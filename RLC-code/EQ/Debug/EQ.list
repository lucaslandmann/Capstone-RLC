
EQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000532c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef8  080054f0  080054f0  000064f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063e8  080063e8  00008028  2**0
                  CONTENTS
  4 .ARM          00000008  080063e8  080063e8  000073e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063f0  080063f0  00008028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063f0  080063f0  000073f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080063f4  080063f4  000073f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080063f8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005fc  20000028  08006420  00008028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  08006420  00008624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147bb  00000000  00000000  00008058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e9  00000000  00000000  0001c813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  0001fa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bbc  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002391d  00000000  00000000  0002157c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014142  00000000  00000000  00044e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfdcc  00000000  00000000  00058fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00138da7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004248  00000000  00000000  00138e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0013d0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00001822  00000000  00000000  0013d109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000450  00000000  00000000  0013e92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000028 	.word	0x20000028
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080054d8 	.word	0x080054d8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	080054d8 	.word	0x080054d8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 bac8 	b.w	80007ac <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f83a 	bl	800029c <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__aeabi_f2lz>:
 8000234:	ee07 0a90 	vmov	s15, r0
 8000238:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800023c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000240:	d401      	bmi.n	8000246 <__aeabi_f2lz+0x12>
 8000242:	f000 b80b 	b.w	800025c <__aeabi_f2ulz>
 8000246:	eef1 7a67 	vneg.f32	s15, s15
 800024a:	b508      	push	{r3, lr}
 800024c:	ee17 0a90 	vmov	r0, s15
 8000250:	f000 f804 	bl	800025c <__aeabi_f2ulz>
 8000254:	4240      	negs	r0, r0
 8000256:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025a:	bd08      	pop	{r3, pc}

0800025c <__aeabi_f2ulz>:
 800025c:	b5d0      	push	{r4, r6, r7, lr}
 800025e:	f000 fc0b 	bl	8000a78 <__aeabi_f2d>
 8000262:	4b0c      	ldr	r3, [pc, #48]	@ (8000294 <__aeabi_f2ulz+0x38>)
 8000264:	2200      	movs	r2, #0
 8000266:	4606      	mov	r6, r0
 8000268:	460f      	mov	r7, r1
 800026a:	f000 f975 	bl	8000558 <__aeabi_dmul>
 800026e:	f000 fc5b 	bl	8000b28 <__aeabi_d2uiz>
 8000272:	4604      	mov	r4, r0
 8000274:	f000 fbde 	bl	8000a34 <__aeabi_ui2d>
 8000278:	4b07      	ldr	r3, [pc, #28]	@ (8000298 <__aeabi_f2ulz+0x3c>)
 800027a:	2200      	movs	r2, #0
 800027c:	f000 f96c 	bl	8000558 <__aeabi_dmul>
 8000280:	4602      	mov	r2, r0
 8000282:	460b      	mov	r3, r1
 8000284:	4630      	mov	r0, r6
 8000286:	4639      	mov	r1, r7
 8000288:	f000 fa96 	bl	80007b8 <__aeabi_dsub>
 800028c:	f000 fc4c 	bl	8000b28 <__aeabi_d2uiz>
 8000290:	4621      	mov	r1, r4
 8000292:	bdd0      	pop	{r4, r6, r7, pc}
 8000294:	3df00000 	.word	0x3df00000
 8000298:	41f00000 	.word	0x41f00000

0800029c <__udivmoddi4>:
 800029c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a0:	9d08      	ldr	r5, [sp, #32]
 80002a2:	460c      	mov	r4, r1
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d14e      	bne.n	8000346 <__udivmoddi4+0xaa>
 80002a8:	4694      	mov	ip, r2
 80002aa:	458c      	cmp	ip, r1
 80002ac:	4686      	mov	lr, r0
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	d962      	bls.n	800037a <__udivmoddi4+0xde>
 80002b4:	b14a      	cbz	r2, 80002ca <__udivmoddi4+0x2e>
 80002b6:	f1c2 0320 	rsb	r3, r2, #32
 80002ba:	4091      	lsls	r1, r2
 80002bc:	fa20 f303 	lsr.w	r3, r0, r3
 80002c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c4:	4319      	orrs	r1, r3
 80002c6:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ce:	fa1f f68c 	uxth.w	r6, ip
 80002d2:	fbb1 f4f7 	udiv	r4, r1, r7
 80002d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002da:	fb07 1114 	mls	r1, r7, r4, r1
 80002de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e2:	fb04 f106 	mul.w	r1, r4, r6
 80002e6:	4299      	cmp	r1, r3
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x64>
 80002ea:	eb1c 0303 	adds.w	r3, ip, r3
 80002ee:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f2:	f080 8112 	bcs.w	800051a <__udivmoddi4+0x27e>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 810f 	bls.w	800051a <__udivmoddi4+0x27e>
 80002fc:	3c02      	subs	r4, #2
 80002fe:	4463      	add	r3, ip
 8000300:	1a59      	subs	r1, r3, r1
 8000302:	fa1f f38e 	uxth.w	r3, lr
 8000306:	fbb1 f0f7 	udiv	r0, r1, r7
 800030a:	fb07 1110 	mls	r1, r7, r0, r1
 800030e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000312:	fb00 f606 	mul.w	r6, r0, r6
 8000316:	429e      	cmp	r6, r3
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x94>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000322:	f080 80fc 	bcs.w	800051e <__udivmoddi4+0x282>
 8000326:	429e      	cmp	r6, r3
 8000328:	f240 80f9 	bls.w	800051e <__udivmoddi4+0x282>
 800032c:	4463      	add	r3, ip
 800032e:	3802      	subs	r0, #2
 8000330:	1b9b      	subs	r3, r3, r6
 8000332:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa6>
 800033a:	40d3      	lsrs	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xba>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb4>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa6>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x150>
 800035e:	42a3      	cmp	r3, r4
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xcc>
 8000362:	4290      	cmp	r0, r2
 8000364:	f0c0 80f0 	bcc.w	8000548 <__udivmoddi4+0x2ac>
 8000368:	1a86      	subs	r6, r0, r2
 800036a:	eb64 0303 	sbc.w	r3, r4, r3
 800036e:	2001      	movs	r0, #1
 8000370:	2d00      	cmp	r5, #0
 8000372:	d0e6      	beq.n	8000342 <__udivmoddi4+0xa6>
 8000374:	e9c5 6300 	strd	r6, r3, [r5]
 8000378:	e7e3      	b.n	8000342 <__udivmoddi4+0xa6>
 800037a:	2a00      	cmp	r2, #0
 800037c:	f040 8090 	bne.w	80004a0 <__udivmoddi4+0x204>
 8000380:	eba1 040c 	sub.w	r4, r1, ip
 8000384:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000388:	fa1f f78c 	uxth.w	r7, ip
 800038c:	2101      	movs	r1, #1
 800038e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000392:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000396:	fb08 4416 	mls	r4, r8, r6, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb07 f006 	mul.w	r0, r7, r6
 80003a2:	4298      	cmp	r0, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x11c>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f106 34ff 	add.w	r4, r6, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x11a>
 80003b0:	4298      	cmp	r0, r3
 80003b2:	f200 80cd 	bhi.w	8000550 <__udivmoddi4+0x2b4>
 80003b6:	4626      	mov	r6, r4
 80003b8:	1a1c      	subs	r4, r3, r0
 80003ba:	fa1f f38e 	uxth.w	r3, lr
 80003be:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c2:	fb08 4410 	mls	r4, r8, r0, r4
 80003c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ca:	fb00 f707 	mul.w	r7, r0, r7
 80003ce:	429f      	cmp	r7, r3
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x148>
 80003d2:	eb1c 0303 	adds.w	r3, ip, r3
 80003d6:	f100 34ff 	add.w	r4, r0, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x146>
 80003dc:	429f      	cmp	r7, r3
 80003de:	f200 80b0 	bhi.w	8000542 <__udivmoddi4+0x2a6>
 80003e2:	4620      	mov	r0, r4
 80003e4:	1bdb      	subs	r3, r3, r7
 80003e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x9c>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa20 fc06 	lsr.w	ip, r0, r6
 80003fc:	fa04 f301 	lsl.w	r3, r4, r1
 8000400:	ea43 030c 	orr.w	r3, r3, ip
 8000404:	40f4      	lsrs	r4, r6
 8000406:	fa00 f801 	lsl.w	r8, r0, r1
 800040a:	0c38      	lsrs	r0, r7, #16
 800040c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000410:	fbb4 fef0 	udiv	lr, r4, r0
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fb00 441e 	mls	r4, r0, lr, r4
 800041c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000420:	fb0e f90c 	mul.w	r9, lr, ip
 8000424:	45a1      	cmp	r9, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x1a6>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000432:	f080 8084 	bcs.w	800053e <__udivmoddi4+0x2a2>
 8000436:	45a1      	cmp	r9, r4
 8000438:	f240 8081 	bls.w	800053e <__udivmoddi4+0x2a2>
 800043c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000440:	443c      	add	r4, r7
 8000442:	eba4 0409 	sub.w	r4, r4, r9
 8000446:	fa1f f983 	uxth.w	r9, r3
 800044a:	fbb4 f3f0 	udiv	r3, r4, r0
 800044e:	fb00 4413 	mls	r4, r0, r3, r4
 8000452:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000456:	fb03 fc0c 	mul.w	ip, r3, ip
 800045a:	45a4      	cmp	ip, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x1d2>
 800045e:	193c      	adds	r4, r7, r4
 8000460:	f103 30ff 	add.w	r0, r3, #4294967295
 8000464:	d267      	bcs.n	8000536 <__udivmoddi4+0x29a>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d965      	bls.n	8000536 <__udivmoddi4+0x29a>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000472:	fba0 9302 	umull	r9, r3, r0, r2
 8000476:	eba4 040c 	sub.w	r4, r4, ip
 800047a:	429c      	cmp	r4, r3
 800047c:	46ce      	mov	lr, r9
 800047e:	469c      	mov	ip, r3
 8000480:	d351      	bcc.n	8000526 <__udivmoddi4+0x28a>
 8000482:	d04e      	beq.n	8000522 <__udivmoddi4+0x286>
 8000484:	b155      	cbz	r5, 800049c <__udivmoddi4+0x200>
 8000486:	ebb8 030e 	subs.w	r3, r8, lr
 800048a:	eb64 040c 	sbc.w	r4, r4, ip
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431e      	orrs	r6, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	e9c5 6400 	strd	r6, r4, [r5]
 800049c:	2100      	movs	r1, #0
 800049e:	e750      	b.n	8000342 <__udivmoddi4+0xa6>
 80004a0:	f1c2 0320 	rsb	r3, r2, #32
 80004a4:	fa20 f103 	lsr.w	r1, r0, r3
 80004a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004ac:	fa24 f303 	lsr.w	r3, r4, r3
 80004b0:	4094      	lsls	r4, r2
 80004b2:	430c      	orrs	r4, r1
 80004b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b8:	fa00 fe02 	lsl.w	lr, r0, r2
 80004bc:	fa1f f78c 	uxth.w	r7, ip
 80004c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c4:	fb08 3110 	mls	r1, r8, r0, r3
 80004c8:	0c23      	lsrs	r3, r4, #16
 80004ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ce:	fb00 f107 	mul.w	r1, r0, r7
 80004d2:	4299      	cmp	r1, r3
 80004d4:	d908      	bls.n	80004e8 <__udivmoddi4+0x24c>
 80004d6:	eb1c 0303 	adds.w	r3, ip, r3
 80004da:	f100 36ff 	add.w	r6, r0, #4294967295
 80004de:	d22c      	bcs.n	800053a <__udivmoddi4+0x29e>
 80004e0:	4299      	cmp	r1, r3
 80004e2:	d92a      	bls.n	800053a <__udivmoddi4+0x29e>
 80004e4:	3802      	subs	r0, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	1a5b      	subs	r3, r3, r1
 80004ea:	b2a4      	uxth	r4, r4
 80004ec:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f0:	fb08 3311 	mls	r3, r8, r1, r3
 80004f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f8:	fb01 f307 	mul.w	r3, r1, r7
 80004fc:	42a3      	cmp	r3, r4
 80004fe:	d908      	bls.n	8000512 <__udivmoddi4+0x276>
 8000500:	eb1c 0404 	adds.w	r4, ip, r4
 8000504:	f101 36ff 	add.w	r6, r1, #4294967295
 8000508:	d213      	bcs.n	8000532 <__udivmoddi4+0x296>
 800050a:	42a3      	cmp	r3, r4
 800050c:	d911      	bls.n	8000532 <__udivmoddi4+0x296>
 800050e:	3902      	subs	r1, #2
 8000510:	4464      	add	r4, ip
 8000512:	1ae4      	subs	r4, r4, r3
 8000514:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000518:	e739      	b.n	800038e <__udivmoddi4+0xf2>
 800051a:	4604      	mov	r4, r0
 800051c:	e6f0      	b.n	8000300 <__udivmoddi4+0x64>
 800051e:	4608      	mov	r0, r1
 8000520:	e706      	b.n	8000330 <__udivmoddi4+0x94>
 8000522:	45c8      	cmp	r8, r9
 8000524:	d2ae      	bcs.n	8000484 <__udivmoddi4+0x1e8>
 8000526:	ebb9 0e02 	subs.w	lr, r9, r2
 800052a:	eb63 0c07 	sbc.w	ip, r3, r7
 800052e:	3801      	subs	r0, #1
 8000530:	e7a8      	b.n	8000484 <__udivmoddi4+0x1e8>
 8000532:	4631      	mov	r1, r6
 8000534:	e7ed      	b.n	8000512 <__udivmoddi4+0x276>
 8000536:	4603      	mov	r3, r0
 8000538:	e799      	b.n	800046e <__udivmoddi4+0x1d2>
 800053a:	4630      	mov	r0, r6
 800053c:	e7d4      	b.n	80004e8 <__udivmoddi4+0x24c>
 800053e:	46d6      	mov	lr, sl
 8000540:	e77f      	b.n	8000442 <__udivmoddi4+0x1a6>
 8000542:	4463      	add	r3, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e74d      	b.n	80003e4 <__udivmoddi4+0x148>
 8000548:	4606      	mov	r6, r0
 800054a:	4623      	mov	r3, r4
 800054c:	4608      	mov	r0, r1
 800054e:	e70f      	b.n	8000370 <__udivmoddi4+0xd4>
 8000550:	3e02      	subs	r6, #2
 8000552:	4463      	add	r3, ip
 8000554:	e730      	b.n	80003b8 <__udivmoddi4+0x11c>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_idiv0>:
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop

080007b0 <__aeabi_drsub>:
 80007b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	e002      	b.n	80007bc <__adddf3>
 80007b6:	bf00      	nop

080007b8 <__aeabi_dsub>:
 80007b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080007bc <__adddf3>:
 80007bc:	b530      	push	{r4, r5, lr}
 80007be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80007c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80007c6:	ea94 0f05 	teq	r4, r5
 80007ca:	bf08      	it	eq
 80007cc:	ea90 0f02 	teqeq	r0, r2
 80007d0:	bf1f      	itttt	ne
 80007d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80007d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80007da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80007de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80007e2:	f000 80e2 	beq.w	80009aa <__adddf3+0x1ee>
 80007e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80007ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80007ee:	bfb8      	it	lt
 80007f0:	426d      	neglt	r5, r5
 80007f2:	dd0c      	ble.n	800080e <__adddf3+0x52>
 80007f4:	442c      	add	r4, r5
 80007f6:	ea80 0202 	eor.w	r2, r0, r2
 80007fa:	ea81 0303 	eor.w	r3, r1, r3
 80007fe:	ea82 0000 	eor.w	r0, r2, r0
 8000802:	ea83 0101 	eor.w	r1, r3, r1
 8000806:	ea80 0202 	eor.w	r2, r0, r2
 800080a:	ea81 0303 	eor.w	r3, r1, r3
 800080e:	2d36      	cmp	r5, #54	@ 0x36
 8000810:	bf88      	it	hi
 8000812:	bd30      	pophi	{r4, r5, pc}
 8000814:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000820:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000824:	d002      	beq.n	800082c <__adddf3+0x70>
 8000826:	4240      	negs	r0, r0
 8000828:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800082c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000838:	d002      	beq.n	8000840 <__adddf3+0x84>
 800083a:	4252      	negs	r2, r2
 800083c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000840:	ea94 0f05 	teq	r4, r5
 8000844:	f000 80a7 	beq.w	8000996 <__adddf3+0x1da>
 8000848:	f1a4 0401 	sub.w	r4, r4, #1
 800084c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000850:	db0d      	blt.n	800086e <__adddf3+0xb2>
 8000852:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000856:	fa22 f205 	lsr.w	r2, r2, r5
 800085a:	1880      	adds	r0, r0, r2
 800085c:	f141 0100 	adc.w	r1, r1, #0
 8000860:	fa03 f20e 	lsl.w	r2, r3, lr
 8000864:	1880      	adds	r0, r0, r2
 8000866:	fa43 f305 	asr.w	r3, r3, r5
 800086a:	4159      	adcs	r1, r3
 800086c:	e00e      	b.n	800088c <__adddf3+0xd0>
 800086e:	f1a5 0520 	sub.w	r5, r5, #32
 8000872:	f10e 0e20 	add.w	lr, lr, #32
 8000876:	2a01      	cmp	r2, #1
 8000878:	fa03 fc0e 	lsl.w	ip, r3, lr
 800087c:	bf28      	it	cs
 800087e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000882:	fa43 f305 	asr.w	r3, r3, r5
 8000886:	18c0      	adds	r0, r0, r3
 8000888:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800088c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000890:	d507      	bpl.n	80008a2 <__adddf3+0xe6>
 8000892:	f04f 0e00 	mov.w	lr, #0
 8000896:	f1dc 0c00 	rsbs	ip, ip, #0
 800089a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800089e:	eb6e 0101 	sbc.w	r1, lr, r1
 80008a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80008a6:	d31b      	bcc.n	80008e0 <__adddf3+0x124>
 80008a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80008ac:	d30c      	bcc.n	80008c8 <__adddf3+0x10c>
 80008ae:	0849      	lsrs	r1, r1, #1
 80008b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80008b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80008b8:	f104 0401 	add.w	r4, r4, #1
 80008bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80008c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80008c4:	f080 809a 	bcs.w	80009fc <__adddf3+0x240>
 80008c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80008cc:	bf08      	it	eq
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	ea41 0105 	orr.w	r1, r1, r5
 80008de:	bd30      	pop	{r4, r5, pc}
 80008e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80008e4:	4140      	adcs	r0, r0
 80008e6:	eb41 0101 	adc.w	r1, r1, r1
 80008ea:	3c01      	subs	r4, #1
 80008ec:	bf28      	it	cs
 80008ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80008f2:	d2e9      	bcs.n	80008c8 <__adddf3+0x10c>
 80008f4:	f091 0f00 	teq	r1, #0
 80008f8:	bf04      	itt	eq
 80008fa:	4601      	moveq	r1, r0
 80008fc:	2000      	moveq	r0, #0
 80008fe:	fab1 f381 	clz	r3, r1
 8000902:	bf08      	it	eq
 8000904:	3320      	addeq	r3, #32
 8000906:	f1a3 030b 	sub.w	r3, r3, #11
 800090a:	f1b3 0220 	subs.w	r2, r3, #32
 800090e:	da0c      	bge.n	800092a <__adddf3+0x16e>
 8000910:	320c      	adds	r2, #12
 8000912:	dd08      	ble.n	8000926 <__adddf3+0x16a>
 8000914:	f102 0c14 	add.w	ip, r2, #20
 8000918:	f1c2 020c 	rsb	r2, r2, #12
 800091c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000920:	fa21 f102 	lsr.w	r1, r1, r2
 8000924:	e00c      	b.n	8000940 <__adddf3+0x184>
 8000926:	f102 0214 	add.w	r2, r2, #20
 800092a:	bfd8      	it	le
 800092c:	f1c2 0c20 	rsble	ip, r2, #32
 8000930:	fa01 f102 	lsl.w	r1, r1, r2
 8000934:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000938:	bfdc      	itt	le
 800093a:	ea41 010c 	orrle.w	r1, r1, ip
 800093e:	4090      	lslle	r0, r2
 8000940:	1ae4      	subs	r4, r4, r3
 8000942:	bfa2      	ittt	ge
 8000944:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000948:	4329      	orrge	r1, r5
 800094a:	bd30      	popge	{r4, r5, pc}
 800094c:	ea6f 0404 	mvn.w	r4, r4
 8000950:	3c1f      	subs	r4, #31
 8000952:	da1c      	bge.n	800098e <__adddf3+0x1d2>
 8000954:	340c      	adds	r4, #12
 8000956:	dc0e      	bgt.n	8000976 <__adddf3+0x1ba>
 8000958:	f104 0414 	add.w	r4, r4, #20
 800095c:	f1c4 0220 	rsb	r2, r4, #32
 8000960:	fa20 f004 	lsr.w	r0, r0, r4
 8000964:	fa01 f302 	lsl.w	r3, r1, r2
 8000968:	ea40 0003 	orr.w	r0, r0, r3
 800096c:	fa21 f304 	lsr.w	r3, r1, r4
 8000970:	ea45 0103 	orr.w	r1, r5, r3
 8000974:	bd30      	pop	{r4, r5, pc}
 8000976:	f1c4 040c 	rsb	r4, r4, #12
 800097a:	f1c4 0220 	rsb	r2, r4, #32
 800097e:	fa20 f002 	lsr.w	r0, r0, r2
 8000982:	fa01 f304 	lsl.w	r3, r1, r4
 8000986:	ea40 0003 	orr.w	r0, r0, r3
 800098a:	4629      	mov	r1, r5
 800098c:	bd30      	pop	{r4, r5, pc}
 800098e:	fa21 f004 	lsr.w	r0, r1, r4
 8000992:	4629      	mov	r1, r5
 8000994:	bd30      	pop	{r4, r5, pc}
 8000996:	f094 0f00 	teq	r4, #0
 800099a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800099e:	bf06      	itte	eq
 80009a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80009a4:	3401      	addeq	r4, #1
 80009a6:	3d01      	subne	r5, #1
 80009a8:	e74e      	b.n	8000848 <__adddf3+0x8c>
 80009aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80009ae:	bf18      	it	ne
 80009b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80009b4:	d029      	beq.n	8000a0a <__adddf3+0x24e>
 80009b6:	ea94 0f05 	teq	r4, r5
 80009ba:	bf08      	it	eq
 80009bc:	ea90 0f02 	teqeq	r0, r2
 80009c0:	d005      	beq.n	80009ce <__adddf3+0x212>
 80009c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80009c6:	bf04      	itt	eq
 80009c8:	4619      	moveq	r1, r3
 80009ca:	4610      	moveq	r0, r2
 80009cc:	bd30      	pop	{r4, r5, pc}
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf1e      	ittt	ne
 80009d4:	2100      	movne	r1, #0
 80009d6:	2000      	movne	r0, #0
 80009d8:	bd30      	popne	{r4, r5, pc}
 80009da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80009de:	d105      	bne.n	80009ec <__adddf3+0x230>
 80009e0:	0040      	lsls	r0, r0, #1
 80009e2:	4149      	adcs	r1, r1
 80009e4:	bf28      	it	cs
 80009e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80009ea:	bd30      	pop	{r4, r5, pc}
 80009ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80009f0:	bf3c      	itt	cc
 80009f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80009f6:	bd30      	popcc	{r4, r5, pc}
 80009f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80009fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000a00:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	bd30      	pop	{r4, r5, pc}
 8000a0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000a0e:	bf1a      	itte	ne
 8000a10:	4619      	movne	r1, r3
 8000a12:	4610      	movne	r0, r2
 8000a14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000a18:	bf1c      	itt	ne
 8000a1a:	460b      	movne	r3, r1
 8000a1c:	4602      	movne	r2, r0
 8000a1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a22:	bf06      	itte	eq
 8000a24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000a28:	ea91 0f03 	teqeq	r1, r3
 8000a2c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000a30:	bd30      	pop	{r4, r5, pc}
 8000a32:	bf00      	nop

08000a34 <__aeabi_ui2d>:
 8000a34:	f090 0f00 	teq	r0, #0
 8000a38:	bf04      	itt	eq
 8000a3a:	2100      	moveq	r1, #0
 8000a3c:	4770      	bxeq	lr
 8000a3e:	b530      	push	{r4, r5, lr}
 8000a40:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000a44:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000a48:	f04f 0500 	mov.w	r5, #0
 8000a4c:	f04f 0100 	mov.w	r1, #0
 8000a50:	e750      	b.n	80008f4 <__adddf3+0x138>
 8000a52:	bf00      	nop

08000a54 <__aeabi_i2d>:
 8000a54:	f090 0f00 	teq	r0, #0
 8000a58:	bf04      	itt	eq
 8000a5a:	2100      	moveq	r1, #0
 8000a5c:	4770      	bxeq	lr
 8000a5e:	b530      	push	{r4, r5, lr}
 8000a60:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000a64:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000a68:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000a6c:	bf48      	it	mi
 8000a6e:	4240      	negmi	r0, r0
 8000a70:	f04f 0100 	mov.w	r1, #0
 8000a74:	e73e      	b.n	80008f4 <__adddf3+0x138>
 8000a76:	bf00      	nop

08000a78 <__aeabi_f2d>:
 8000a78:	0042      	lsls	r2, r0, #1
 8000a7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000a7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a82:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000a86:	bf1f      	itttt	ne
 8000a88:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000a8c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000a90:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000a94:	4770      	bxne	lr
 8000a96:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000a9a:	bf08      	it	eq
 8000a9c:	4770      	bxeq	lr
 8000a9e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000aa2:	bf04      	itt	eq
 8000aa4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000aa8:	4770      	bxeq	lr
 8000aaa:	b530      	push	{r4, r5, lr}
 8000aac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000ab0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000ab4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000ab8:	e71c      	b.n	80008f4 <__adddf3+0x138>
 8000aba:	bf00      	nop

08000abc <__aeabi_ul2d>:
 8000abc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	b530      	push	{r4, r5, lr}
 8000ac6:	f04f 0500 	mov.w	r5, #0
 8000aca:	e00a      	b.n	8000ae2 <__aeabi_l2d+0x16>

08000acc <__aeabi_l2d>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	b530      	push	{r4, r5, lr}
 8000ad6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000ada:	d502      	bpl.n	8000ae2 <__aeabi_l2d+0x16>
 8000adc:	4240      	negs	r0, r0
 8000ade:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000ae6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000aea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000aee:	f43f aed8 	beq.w	80008a2 <__adddf3+0xe6>
 8000af2:	f04f 0203 	mov.w	r2, #3
 8000af6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000afa:	bf18      	it	ne
 8000afc:	3203      	addne	r2, #3
 8000afe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000b02:	bf18      	it	ne
 8000b04:	3203      	addne	r2, #3
 8000b06:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000b0a:	f1c2 0320 	rsb	r3, r2, #32
 8000b0e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	fa01 fe03 	lsl.w	lr, r1, r3
 8000b1a:	ea40 000e 	orr.w	r0, r0, lr
 8000b1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000b22:	4414      	add	r4, r2
 8000b24:	e6bd      	b.n	80008a2 <__adddf3+0xe6>
 8000b26:	bf00      	nop

08000b28 <__aeabi_d2uiz>:
 8000b28:	004a      	lsls	r2, r1, #1
 8000b2a:	d211      	bcs.n	8000b50 <__aeabi_d2uiz+0x28>
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d211      	bcs.n	8000b56 <__aeabi_d2uiz+0x2e>
 8000b32:	d50d      	bpl.n	8000b50 <__aeabi_d2uiz+0x28>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d40e      	bmi.n	8000b5c <__aeabi_d2uiz+0x34>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_d2uiz+0x3a>
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000b6e:	f000 fe4f 	bl	8001810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b72:	f000 f84b 	bl	8000c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b76:	f000 f9e1 	bl	8000f3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b7a:	f000 f9a9 	bl	8000ed0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b7e:	f000 f97d 	bl	8000e7c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b82:	f000 f8af 	bl	8000ce4 <MX_ADC1_Init>
  MX_DAC_Init();
 8000b86:	f000 f8ff 	bl	8000d88 <MX_DAC_Init>
  MX_TIM8_Init();
 8000b8a:	f000 f927 	bl	8000ddc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, N);
 8000b8e:	2220      	movs	r2, #32
 8000b90:	4918      	ldr	r1, [pc, #96]	@ (8000bf4 <main+0x8c>)
 8000b92:	4819      	ldr	r0, [pc, #100]	@ (8000bf8 <main+0x90>)
 8000b94:	f000 fef2 	bl	800197c <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, dac_buffer, N, DAC_ALIGN_12B_R);
 8000b98:	2300      	movs	r3, #0
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2320      	movs	r3, #32
 8000b9e:	4a17      	ldr	r2, [pc, #92]	@ (8000bfc <main+0x94>)
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4817      	ldr	r0, [pc, #92]	@ (8000c00 <main+0x98>)
 8000ba4:	f001 fbe8 	bl	8002378 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim8);
 8000ba8:	4816      	ldr	r0, [pc, #88]	@ (8000c04 <main+0x9c>)
 8000baa:	f003 f917 	bl	8003ddc <HAL_TIM_Base_Start>
  uint8_t buttonState = 1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	717b      	strb	r3, [r7, #5]
  uint8_t toggled = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  uint8_t toggle = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	71bb      	strb	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  buttonState = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000bba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bbe:	4812      	ldr	r0, [pc, #72]	@ (8000c08 <main+0xa0>)
 8000bc0:	f002 faa2 	bl	8003108 <HAL_GPIO_ReadPin>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	717b      	strb	r3, [r7, #5]

	  if(buttonState == 1 && toggled == 0) {
 8000bc8:	797b      	ldrb	r3, [r7, #5]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d10b      	bne.n	8000be6 <main+0x7e>
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d108      	bne.n	8000be6 <main+0x7e>
		  toggle = toggle ? 0: 1;
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	bf0c      	ite	eq
 8000bda:	2301      	moveq	r3, #1
 8000bdc:	2300      	movne	r3, #0
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	71bb      	strb	r3, [r7, #6]
		  toggled = 1;
 8000be2:	2301      	movs	r3, #1
 8000be4:	71fb      	strb	r3, [r7, #7]
	  }

	  if(buttonState == 0){
 8000be6:	797b      	ldrb	r3, [r7, #5]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1e6      	bne.n	8000bba <main+0x52>
		  toggled = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	71fb      	strb	r3, [r7, #7]
	  buttonState = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000bf0:	e7e3      	b.n	8000bba <main+0x52>
 8000bf2:	bf00      	nop
 8000bf4:	200001f0 	.word	0x200001f0
 8000bf8:	20000044 	.word	0x20000044
 8000bfc:	20000270 	.word	0x20000270
 8000c00:	200000ec 	.word	0x200000ec
 8000c04:	20000160 	.word	0x20000160
 8000c08:	40020800 	.word	0x40020800

08000c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b094      	sub	sp, #80	@ 0x50
 8000c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	2234      	movs	r2, #52	@ 0x34
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f004 fc30 	bl	8005480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	4b29      	ldr	r3, [pc, #164]	@ (8000cdc <SystemClock_Config+0xd0>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c38:	4a28      	ldr	r2, [pc, #160]	@ (8000cdc <SystemClock_Config+0xd0>)
 8000c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c40:	4b26      	ldr	r3, [pc, #152]	@ (8000cdc <SystemClock_Config+0xd0>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	4b23      	ldr	r3, [pc, #140]	@ (8000ce0 <SystemClock_Config+0xd4>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c58:	4a21      	ldr	r2, [pc, #132]	@ (8000ce0 <SystemClock_Config+0xd4>)
 8000c5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce0 <SystemClock_Config+0xd4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c70:	2301      	movs	r3, #1
 8000c72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c74:	2310      	movs	r3, #16
 8000c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c80:	2308      	movs	r3, #8
 8000c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000c84:	2354      	movs	r3, #84	@ 0x54
 8000c86:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f002 fdb1 	bl	8003800 <HAL_RCC_OscConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ca4:	f000 fbac 	bl	8001400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca8:	230f      	movs	r3, #15
 8000caa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cac:	2302      	movs	r3, #2
 8000cae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f002 fa51 	bl	800316c <HAL_RCC_ClockConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000cd0:	f000 fb96 	bl	8001400 <Error_Handler>
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	3750      	adds	r7, #80	@ 0x50
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40007000 	.word	0x40007000

08000ce4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cea:	463b      	mov	r3, r7
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cf6:	4b22      	ldr	r3, [pc, #136]	@ (8000d80 <MX_ADC1_Init+0x9c>)
 8000cf8:	4a22      	ldr	r2, [pc, #136]	@ (8000d84 <MX_ADC1_Init+0xa0>)
 8000cfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cfc:	4b20      	ldr	r3, [pc, #128]	@ (8000d80 <MX_ADC1_Init+0x9c>)
 8000cfe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d04:	4b1e      	ldr	r3, [pc, #120]	@ (8000d80 <MX_ADC1_Init+0x9c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d80 <MX_ADC1_Init+0x9c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	@ (8000d80 <MX_ADC1_Init+0x9c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <MX_ADC1_Init+0x9c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <MX_ADC1_Init+0x9c>)
 8000d20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000d26:	4b16      	ldr	r3, [pc, #88]	@ (8000d80 <MX_ADC1_Init+0x9c>)
 8000d28:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000d2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d2e:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <MX_ADC1_Init+0x9c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d34:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <MX_ADC1_Init+0x9c>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <MX_ADC1_Init+0x9c>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d42:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <MX_ADC1_Init+0x9c>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d48:	480d      	ldr	r0, [pc, #52]	@ (8000d80 <MX_ADC1_Init+0x9c>)
 8000d4a:	f000 fdd3 	bl	80018f4 <HAL_ADC_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000d54:	f000 fb54 	bl	8001400 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d64:	463b      	mov	r3, r7
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <MX_ADC1_Init+0x9c>)
 8000d6a:	f000 ff21 	bl	8001bb0 <HAL_ADC_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000d74:	f000 fb44 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000044 	.word	0x20000044
 8000d84:	40012000 	.word	0x40012000

08000d88 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <MX_DAC_Init+0x4c>)
 8000d98:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd8 <MX_DAC_Init+0x50>)
 8000d9a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d9c:	480d      	ldr	r0, [pc, #52]	@ (8000dd4 <MX_DAC_Init+0x4c>)
 8000d9e:	f001 fac8 	bl	8002332 <HAL_DAC_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000da8:	f000 fb2a 	bl	8001400 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000dac:	230c      	movs	r3, #12
 8000dae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000db4:	463b      	mov	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	4619      	mov	r1, r3
 8000dba:	4806      	ldr	r0, [pc, #24]	@ (8000dd4 <MX_DAC_Init+0x4c>)
 8000dbc:	f001 fbbc 	bl	8002538 <HAL_DAC_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000dc6:	f000 fb1b 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200000ec 	.word	0x200000ec
 8000dd8:	40007400 	.word	0x40007400

08000ddc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df0:	463b      	mov	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000df8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e74 <MX_TIM8_Init+0x98>)
 8000dfa:	4a1f      	ldr	r2, [pc, #124]	@ (8000e78 <MX_TIM8_Init+0x9c>)
 8000dfc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16;
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <MX_TIM8_Init+0x98>)
 8000e00:	2210      	movs	r2, #16
 8000e02:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	@ (8000e74 <MX_TIM8_Init+0x98>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <MX_TIM8_Init+0x98>)
 8000e0c:	2231      	movs	r2, #49	@ 0x31
 8000e0e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e10:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <MX_TIM8_Init+0x98>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e16:	4b17      	ldr	r3, [pc, #92]	@ (8000e74 <MX_TIM8_Init+0x98>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <MX_TIM8_Init+0x98>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000e22:	4814      	ldr	r0, [pc, #80]	@ (8000e74 <MX_TIM8_Init+0x98>)
 8000e24:	f002 ff8a 	bl	8003d3c <HAL_TIM_Base_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM8_Init+0x56>
  {
    Error_Handler();
 8000e2e:	f000 fae7 	bl	8001400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480d      	ldr	r0, [pc, #52]	@ (8000e74 <MX_TIM8_Init+0x98>)
 8000e40:	f003 f834 	bl	8003eac <HAL_TIM_ConfigClockSource>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM8_Init+0x72>
  {
    Error_Handler();
 8000e4a:	f000 fad9 	bl	8001400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e4e:	2320      	movs	r3, #32
 8000e50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e56:	463b      	mov	r3, r7
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4806      	ldr	r0, [pc, #24]	@ (8000e74 <MX_TIM8_Init+0x98>)
 8000e5c:	f003 fa34 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8000e66:	f000 facb 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000160 	.word	0x20000160
 8000e78:	40010400 	.word	0x40010400

08000e7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e80:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	@ (8000ecc <MX_USART2_UART_Init+0x50>)
 8000e84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e86:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	f003 fa84 	bl	80043c0 <HAL_UART_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ebe:	f000 fa9f 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200001a8 	.word	0x200001a8
 8000ecc:	40004400 	.word	0x40004400

08000ed0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <MX_DMA_Init+0x68>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a16      	ldr	r2, [pc, #88]	@ (8000f38 <MX_DMA_Init+0x68>)
 8000ee0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b14      	ldr	r3, [pc, #80]	@ (8000f38 <MX_DMA_Init+0x68>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <MX_DMA_Init+0x68>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	4a0f      	ldr	r2, [pc, #60]	@ (8000f38 <MX_DMA_Init+0x68>)
 8000efc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f02:	4b0d      	ldr	r3, [pc, #52]	@ (8000f38 <MX_DMA_Init+0x68>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	2010      	movs	r0, #16
 8000f14:	f001 f9d7 	bl	80022c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f18:	2010      	movs	r0, #16
 8000f1a:	f001 f9f0 	bl	80022fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	2038      	movs	r0, #56	@ 0x38
 8000f24:	f001 f9cf 	bl	80022c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f28:	2038      	movs	r0, #56	@ 0x38
 8000f2a:	f001 f9e8 	bl	80022fe <HAL_NVIC_EnableIRQ>

}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800

08000f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	@ 0x28
 8000f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b2d      	ldr	r3, [pc, #180]	@ (800100c <MX_GPIO_Init+0xd0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a2c      	ldr	r2, [pc, #176]	@ (800100c <MX_GPIO_Init+0xd0>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b2a      	ldr	r3, [pc, #168]	@ (800100c <MX_GPIO_Init+0xd0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b26      	ldr	r3, [pc, #152]	@ (800100c <MX_GPIO_Init+0xd0>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a25      	ldr	r2, [pc, #148]	@ (800100c <MX_GPIO_Init+0xd0>)
 8000f78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7e:	4b23      	ldr	r3, [pc, #140]	@ (800100c <MX_GPIO_Init+0xd0>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <MX_GPIO_Init+0xd0>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a1e      	ldr	r2, [pc, #120]	@ (800100c <MX_GPIO_Init+0xd0>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <MX_GPIO_Init+0xd0>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b18      	ldr	r3, [pc, #96]	@ (800100c <MX_GPIO_Init+0xd0>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a17      	ldr	r2, [pc, #92]	@ (800100c <MX_GPIO_Init+0xd0>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b15      	ldr	r3, [pc, #84]	@ (800100c <MX_GPIO_Init+0xd0>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	4812      	ldr	r0, [pc, #72]	@ (8001010 <MX_GPIO_Init+0xd4>)
 8000fc8:	f002 f8b6 	bl	8003138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480c      	ldr	r0, [pc, #48]	@ (8001014 <MX_GPIO_Init+0xd8>)
 8000fe4:	f001 fefc 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fe8:	2320      	movs	r3, #32
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4804      	ldr	r0, [pc, #16]	@ (8001010 <MX_GPIO_Init+0xd4>)
 8001000:	f001 feee 	bl	8002de0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	@ 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	40020000 	.word	0x40020000
 8001014:	40020800 	.word	0x40020800

08001018 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af02      	add	r7, sp, #8
 800101e:	6078      	str	r0, [r7, #4]

	arm_biquad_cas_df1_32x64_init_q31(&S1, NUMSTAGES,
		          (q31_t *) &coeffTable[190*0 + 10*(gainDB[0] + 9)],
 8001020:	4b63      	ldr	r3, [pc, #396]	@ (80011b0 <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f103 0209 	add.w	r2, r3, #9
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4a60      	ldr	r2, [pc, #384]	@ (80011b4 <HAL_ADC_ConvHalfCpltCallback+0x19c>)
 8001034:	441a      	add	r2, r3
	arm_biquad_cas_df1_32x64_init_q31(&S1, NUMSTAGES,
 8001036:	2302      	movs	r3, #2
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	4b5f      	ldr	r3, [pc, #380]	@ (80011b8 <HAL_ADC_ConvHalfCpltCallback+0x1a0>)
 800103c:	2102      	movs	r1, #2
 800103e:	485f      	ldr	r0, [pc, #380]	@ (80011bc <HAL_ADC_ConvHalfCpltCallback+0x1a4>)
 8001040:	f004 f9cc 	bl	80053dc <arm_biquad_cas_df1_32x64_init_q31>
		          &biquadStateBand1Q31[0], 2);
	arm_biquad_cas_df1_32x64_init_q31(&S2, NUMSTAGES,
		          (q31_t *) &coeffTable[190*1 + 10*(gainDB[1] + 9)],
 8001044:	4b5a      	ldr	r3, [pc, #360]	@ (80011b0 <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f103 0209 	add.w	r2, r3, #9
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	33be      	adds	r3, #190	@ 0xbe
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4a56      	ldr	r2, [pc, #344]	@ (80011b4 <HAL_ADC_ConvHalfCpltCallback+0x19c>)
 800105a:	441a      	add	r2, r3
	arm_biquad_cas_df1_32x64_init_q31(&S2, NUMSTAGES,
 800105c:	2302      	movs	r3, #2
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	4b57      	ldr	r3, [pc, #348]	@ (80011c0 <HAL_ADC_ConvHalfCpltCallback+0x1a8>)
 8001062:	2102      	movs	r1, #2
 8001064:	4857      	ldr	r0, [pc, #348]	@ (80011c4 <HAL_ADC_ConvHalfCpltCallback+0x1ac>)
 8001066:	f004 f9b9 	bl	80053dc <arm_biquad_cas_df1_32x64_init_q31>
		           &biquadStateBand2Q31[0], 2);
	 arm_biquad_cascade_df1_init_q31(&S3, NUMSTAGES,
		          (q31_t *) &coeffTable[190*2 + 10*(gainDB[2] + 9)],
 800106a:	4b51      	ldr	r3, [pc, #324]	@ (80011b0 <HAL_ADC_ConvHalfCpltCallback+0x198>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f103 0209 	add.w	r2, r3, #9
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4a4c      	ldr	r2, [pc, #304]	@ (80011b4 <HAL_ADC_ConvHalfCpltCallback+0x19c>)
 8001082:	441a      	add	r2, r3
	 arm_biquad_cascade_df1_init_q31(&S3, NUMSTAGES,
 8001084:	2302      	movs	r3, #2
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	4b4f      	ldr	r3, [pc, #316]	@ (80011c8 <HAL_ADC_ConvHalfCpltCallback+0x1b0>)
 800108a:	2102      	movs	r1, #2
 800108c:	484f      	ldr	r0, [pc, #316]	@ (80011cc <HAL_ADC_ConvHalfCpltCallback+0x1b4>)
 800108e:	f003 fdb5 	bl	8004bfc <arm_biquad_cascade_df1_init_q31>
		          &biquadStateBand3Q31[0], 2);
	arm_biquad_cascade_df1_init_q31(&S4, NUMSTAGES,
		          (q31_t *) &coeffTable[190*3 + 10*(gainDB[3] + 9)],
 8001092:	4b47      	ldr	r3, [pc, #284]	@ (80011b0 <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	f103 0209 	add.w	r2, r3, #9
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	f203 233a 	addw	r3, r3, #570	@ 0x23a
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4a42      	ldr	r2, [pc, #264]	@ (80011b4 <HAL_ADC_ConvHalfCpltCallback+0x19c>)
 80010aa:	441a      	add	r2, r3
	arm_biquad_cascade_df1_init_q31(&S4, NUMSTAGES,
 80010ac:	2302      	movs	r3, #2
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	4b47      	ldr	r3, [pc, #284]	@ (80011d0 <HAL_ADC_ConvHalfCpltCallback+0x1b8>)
 80010b2:	2102      	movs	r1, #2
 80010b4:	4847      	ldr	r0, [pc, #284]	@ (80011d4 <HAL_ADC_ConvHalfCpltCallback+0x1bc>)
 80010b6:	f003 fda1 	bl	8004bfc <arm_biquad_cascade_df1_init_q31>
		          &biquadStateBand4Q31[0], 2);
	arm_biquad_cascade_df1_init_q31(&S5, NUMSTAGES,
		          (q31_t *) &coeffTable[190*4 + 10*(gainDB[4] + 9)],
 80010ba:	4b3d      	ldr	r3, [pc, #244]	@ (80011b0 <HAL_ADC_ConvHalfCpltCallback+0x198>)
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	f103 0209 	add.w	r2, r3, #9
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4a38      	ldr	r2, [pc, #224]	@ (80011b4 <HAL_ADC_ConvHalfCpltCallback+0x19c>)
 80010d2:	441a      	add	r2, r3
	arm_biquad_cascade_df1_init_q31(&S5, NUMSTAGES,
 80010d4:	2302      	movs	r3, #2
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	4b3f      	ldr	r3, [pc, #252]	@ (80011d8 <HAL_ADC_ConvHalfCpltCallback+0x1c0>)
 80010da:	2102      	movs	r1, #2
 80010dc:	483f      	ldr	r0, [pc, #252]	@ (80011dc <HAL_ADC_ConvHalfCpltCallback+0x1c4>)
 80010de:	f003 fd8d 	bl	8004bfc <arm_biquad_cascade_df1_init_q31>
		          &biquadStateBand5Q31[0], 2);



	for( int n=0; n<halfN; n++){ filt_in[n] = (float32_t) adc_buffer[n];}
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	e010      	b.n	800110a <HAL_ADC_ConvHalfCpltCallback+0xf2>
 80010e8:	4a3d      	ldr	r2, [pc, #244]	@ (80011e0 <HAL_ADC_ConvHalfCpltCallback+0x1c8>)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f0:	ee07 3a90 	vmov	s15, r3
 80010f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f8:	4a3a      	ldr	r2, [pc, #232]	@ (80011e4 <HAL_ADC_ConvHalfCpltCallback+0x1cc>)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	edc3 7a00 	vstr	s15, [r3]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3301      	adds	r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	ddeb      	ble.n	80010e8 <HAL_ADC_ConvHalfCpltCallback+0xd0>


	/* ----------------------------------------------------------------------
	** Convert block of input data from float to Q31
	** ------------------------------------------------------------------- */
	arm_float_to_q31(filt_in_ptr, *inputQ31, halfN);
 8001110:	4b35      	ldr	r3, [pc, #212]	@ (80011e8 <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a35      	ldr	r2, [pc, #212]	@ (80011ec <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8001116:	6812      	ldr	r2, [r2, #0]
 8001118:	4611      	mov	r1, r2
 800111a:	2210      	movs	r2, #16
 800111c:	4618      	mov	r0, r3
 800111e:	f003 fc6b 	bl	80049f8 <arm_float_to_q31>
	** ------------------------------------------------------------------- */
	//arm_scale_q31(inputQ31, 0x7FFFFFFF, -3, inputQ31, halfN);
	/* ----------------------------------------------------------------------
	** Call the Q31 Biquad Cascade DF1 32x64 process function for band1, band2
	** ------------------------------------------------------------------- */
	arm_biquad_cas_df1_32x64_q31(&S1, inputQ31, outputQ31, halfN);
 8001122:	2310      	movs	r3, #16
 8001124:	4a32      	ldr	r2, [pc, #200]	@ (80011f0 <HAL_ADC_ConvHalfCpltCallback+0x1d8>)
 8001126:	4931      	ldr	r1, [pc, #196]	@ (80011ec <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8001128:	4824      	ldr	r0, [pc, #144]	@ (80011bc <HAL_ADC_ConvHalfCpltCallback+0x1a4>)
 800112a:	f003 fd75 	bl	8004c18 <arm_biquad_cas_df1_32x64_q31>
	//arm_biquad_cascade_df1_q31(&S4, outputQ31, outputQ31, halfN);
	//arm_biquad_cascade_df1_q31(&S5, outputQ31, outputQ31, halfN);
	/* ----------------------------------------------------------------------
	** Convert Q31 result back to float
	** ------------------------------------------------------------------- */
	arm_q31_to_float(outputQ31, filt_out_ptr, halfN);
 800112e:	4b31      	ldr	r3, [pc, #196]	@ (80011f4 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2210      	movs	r2, #16
 8001134:	4619      	mov	r1, r3
 8001136:	482e      	ldr	r0, [pc, #184]	@ (80011f0 <HAL_ADC_ConvHalfCpltCallback+0x1d8>)
 8001138:	f003 fc06 	bl	8004948 <arm_q31_to_float>
	/* ----------------------------------------------------------------------
	** Scale back up
	** ------------------------------------------------------------------- */
	arm_scale_f32(filt_out_ptr, 8.0f, filt_out_ptr, halfN);
 800113c:	4b2d      	ldr	r3, [pc, #180]	@ (80011f4 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a2c      	ldr	r2, [pc, #176]	@ (80011f4 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8001142:	6811      	ldr	r1, [r2, #0]
 8001144:	2210      	movs	r2, #16
 8001146:	eeb2 0a00 	vmov.f32	s0, #32	@ 0x41000000  8.0
 800114a:	4618      	mov	r0, r3
 800114c:	f004 f954 	bl	80053f8 <arm_scale_f32>

	for( int n=0; n<halfN; n++)		{
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	e024      	b.n	80011a0 <HAL_ADC_ConvHalfCpltCallback+0x188>
		filt_out[n] += 2;
 8001156:	4a28      	ldr	r2, [pc, #160]	@ (80011f8 <HAL_ADC_ConvHalfCpltCallback+0x1e0>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001166:	ee77 7a87 	vadd.f32	s15, s15, s14
 800116a:	4a23      	ldr	r2, [pc, #140]	@ (80011f8 <HAL_ADC_ConvHalfCpltCallback+0x1e0>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	edc3 7a00 	vstr	s15, [r3]
		dac_buffer[n] = (uint32_t) (filt_out[n] * 1000);
 8001176:	4a20      	ldr	r2, [pc, #128]	@ (80011f8 <HAL_ADC_ConvHalfCpltCallback+0x1e0>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	edd3 7a00 	vldr	s15, [r3]
 8001182:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80011fc <HAL_ADC_ConvHalfCpltCallback+0x1e4>
 8001186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800118e:	ee17 1a90 	vmov	r1, s15
 8001192:	4a1b      	ldr	r2, [pc, #108]	@ (8001200 <HAL_ADC_ConvHalfCpltCallback+0x1e8>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( int n=0; n<halfN; n++)		{
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	3301      	adds	r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b0f      	cmp	r3, #15
 80011a4:	ddd7      	ble.n	8001156 <HAL_ADC_ConvHalfCpltCallback+0x13e>
	}
}
 80011a6:	bf00      	nop
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000008 	.word	0x20000008
 80011b4:	080054f0 	.word	0x080054f0
 80011b8:	200003f0 	.word	0x200003f0
 80011bc:	200005d0 	.word	0x200005d0
 80011c0:	20000430 	.word	0x20000430
 80011c4:	200005e0 	.word	0x200005e0
 80011c8:	20000470 	.word	0x20000470
 80011cc:	200005f0 	.word	0x200005f0
 80011d0:	20000490 	.word	0x20000490
 80011d4:	20000600 	.word	0x20000600
 80011d8:	200004b0 	.word	0x200004b0
 80011dc:	20000610 	.word	0x20000610
 80011e0:	200001f0 	.word	0x200001f0
 80011e4:	200002f0 	.word	0x200002f0
 80011e8:	20000000 	.word	0x20000000
 80011ec:	200004d0 	.word	0x200004d0
 80011f0:	20000550 	.word	0x20000550
 80011f4:	20000004 	.word	0x20000004
 80011f8:	20000370 	.word	0x20000370
 80011fc:	447a0000 	.word	0x447a0000
 8001200:	20000270 	.word	0x20000270

08001204 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af02      	add	r7, sp, #8
 800120a:	6078      	str	r0, [r7, #4]

	arm_biquad_cas_df1_32x64_init_q31(&S1, NUMSTAGES,
		            (q31_t *) &coeffTable[190*0 + 10*(gainDB[0] + 9)],
 800120c:	4b65      	ldr	r3, [pc, #404]	@ (80013a4 <HAL_ADC_ConvCpltCallback+0x1a0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f103 0209 	add.w	r2, r3, #9
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4a62      	ldr	r2, [pc, #392]	@ (80013a8 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001220:	441a      	add	r2, r3
	arm_biquad_cas_df1_32x64_init_q31(&S1, NUMSTAGES,
 8001222:	2302      	movs	r3, #2
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	4b61      	ldr	r3, [pc, #388]	@ (80013ac <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001228:	2102      	movs	r1, #2
 800122a:	4861      	ldr	r0, [pc, #388]	@ (80013b0 <HAL_ADC_ConvCpltCallback+0x1ac>)
 800122c:	f004 f8d6 	bl	80053dc <arm_biquad_cas_df1_32x64_init_q31>
		            &biquadStateBand1Q31[0], 2);
		  arm_biquad_cas_df1_32x64_init_q31(&S2, NUMSTAGES,
		            (q31_t *) &coeffTable[190*1 + 10*(gainDB[1] + 9)],
 8001230:	4b5c      	ldr	r3, [pc, #368]	@ (80013a4 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f103 0209 	add.w	r2, r3, #9
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	33be      	adds	r3, #190	@ 0xbe
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4a58      	ldr	r2, [pc, #352]	@ (80013a8 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001246:	441a      	add	r2, r3
		  arm_biquad_cas_df1_32x64_init_q31(&S2, NUMSTAGES,
 8001248:	2302      	movs	r3, #2
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	4b59      	ldr	r3, [pc, #356]	@ (80013b4 <HAL_ADC_ConvCpltCallback+0x1b0>)
 800124e:	2102      	movs	r1, #2
 8001250:	4859      	ldr	r0, [pc, #356]	@ (80013b8 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001252:	f004 f8c3 	bl	80053dc <arm_biquad_cas_df1_32x64_init_q31>
		            &biquadStateBand2Q31[0], 2);
		  arm_biquad_cascade_df1_init_q31(&S3, NUMSTAGES,
		          (q31_t *) &coeffTable[190*2 + 10*(gainDB[2] + 9)],
 8001256:	4b53      	ldr	r3, [pc, #332]	@ (80013a4 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f103 0209 	add.w	r2, r3, #9
 800125e:	4613      	mov	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4a4e      	ldr	r2, [pc, #312]	@ (80013a8 <HAL_ADC_ConvCpltCallback+0x1a4>)
 800126e:	441a      	add	r2, r3
		  arm_biquad_cascade_df1_init_q31(&S3, NUMSTAGES,
 8001270:	2302      	movs	r3, #2
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	4b51      	ldr	r3, [pc, #324]	@ (80013bc <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001276:	2102      	movs	r1, #2
 8001278:	4851      	ldr	r0, [pc, #324]	@ (80013c0 <HAL_ADC_ConvCpltCallback+0x1bc>)
 800127a:	f003 fcbf 	bl	8004bfc <arm_biquad_cascade_df1_init_q31>
		          &biquadStateBand3Q31[0], 2);
		  arm_biquad_cascade_df1_init_q31(&S4, NUMSTAGES,
		          (q31_t *) &coeffTable[190*3 + 10*(gainDB[3] + 9)],
 800127e:	4b49      	ldr	r3, [pc, #292]	@ (80013a4 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	f103 0209 	add.w	r2, r3, #9
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	f203 233a 	addw	r3, r3, #570	@ 0x23a
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4a44      	ldr	r2, [pc, #272]	@ (80013a8 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001296:	441a      	add	r2, r3
		  arm_biquad_cascade_df1_init_q31(&S4, NUMSTAGES,
 8001298:	2302      	movs	r3, #2
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	4b49      	ldr	r3, [pc, #292]	@ (80013c4 <HAL_ADC_ConvCpltCallback+0x1c0>)
 800129e:	2102      	movs	r1, #2
 80012a0:	4849      	ldr	r0, [pc, #292]	@ (80013c8 <HAL_ADC_ConvCpltCallback+0x1c4>)
 80012a2:	f003 fcab 	bl	8004bfc <arm_biquad_cascade_df1_init_q31>
		          &biquadStateBand4Q31[0], 2);
		  arm_biquad_cascade_df1_init_q31(&S5, NUMSTAGES,
		          (q31_t *) &coeffTable[190*4 + 10*(gainDB[4] + 9)],
 80012a6:	4b3f      	ldr	r3, [pc, #252]	@ (80013a4 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	f103 0209 	add.w	r2, r3, #9
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4a3a      	ldr	r2, [pc, #232]	@ (80013a8 <HAL_ADC_ConvCpltCallback+0x1a4>)
 80012be:	441a      	add	r2, r3
		  arm_biquad_cascade_df1_init_q31(&S5, NUMSTAGES,
 80012c0:	2302      	movs	r3, #2
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	4b41      	ldr	r3, [pc, #260]	@ (80013cc <HAL_ADC_ConvCpltCallback+0x1c8>)
 80012c6:	2102      	movs	r1, #2
 80012c8:	4841      	ldr	r0, [pc, #260]	@ (80013d0 <HAL_ADC_ConvCpltCallback+0x1cc>)
 80012ca:	f003 fc97 	bl	8004bfc <arm_biquad_cascade_df1_init_q31>
		          &biquadStateBand5Q31[0], 2);

	for( int n=halfN; n<N; n++){filt_in[n] = (float32_t) adc_buffer[n];}
 80012ce:	2310      	movs	r3, #16
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	e010      	b.n	80012f6 <HAL_ADC_ConvCpltCallback+0xf2>
 80012d4:	4a3f      	ldr	r2, [pc, #252]	@ (80013d4 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012e4:	4a3c      	ldr	r2, [pc, #240]	@ (80013d8 <HAL_ADC_ConvCpltCallback+0x1d4>)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	edc3 7a00 	vstr	s15, [r3]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3301      	adds	r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2b1f      	cmp	r3, #31
 80012fa:	ddeb      	ble.n	80012d4 <HAL_ADC_ConvCpltCallback+0xd0>
	//filt_in[n] = (float32_t) adc_buffer[n];

	/* ----------------------------------------------------------------------
	** Convert block of input data from float to Q31
	** ------------------------------------------------------------------- */
	arm_float_to_q31(filt_in_ptr + halfN, inputQ31, halfN);
 80012fc:	4b37      	ldr	r3, [pc, #220]	@ (80013dc <HAL_ADC_ConvCpltCallback+0x1d8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3340      	adds	r3, #64	@ 0x40
 8001302:	2210      	movs	r2, #16
 8001304:	4936      	ldr	r1, [pc, #216]	@ (80013e0 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8001306:	4618      	mov	r0, r3
 8001308:	f003 fb76 	bl	80049f8 <arm_float_to_q31>
	** ------------------------------------------------------------------- */
	//arm_scale_q31(inputQ31, 0x7FFFFFFF, -3, inputQ31, halfN);
	/* ----------------------------------------------------------------------
	** Call the Q31 Biquad Cascade DF1 32x64 process function for band1, band2
	** ------------------------------------------------------------------- */
	arm_biquad_cas_df1_32x64_q31(&S1, inputQ31 + halfN, outputQ31 + halfN, halfN);
 800130c:	4935      	ldr	r1, [pc, #212]	@ (80013e4 <HAL_ADC_ConvCpltCallback+0x1e0>)
 800130e:	4a36      	ldr	r2, [pc, #216]	@ (80013e8 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8001310:	2310      	movs	r3, #16
 8001312:	4827      	ldr	r0, [pc, #156]	@ (80013b0 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8001314:	f003 fc80 	bl	8004c18 <arm_biquad_cas_df1_32x64_q31>
	//arm_biquad_cascade_df1_q31(&S4, outputQ31 + halfN, outputQ31 + halfN, halfN);
	//arm_biquad_cascade_df1_q31(&S5, outputQ31 + halfN, outputQ31, halfN);
	/* ----------------------------------------------------------------------
	** Convert Q31 result back to float
	** ------------------------------------------------------------------- */
	arm_q31_to_float(outputQ31, filt_out_ptr + halfN, halfN);
 8001318:	4b34      	ldr	r3, [pc, #208]	@ (80013ec <HAL_ADC_ConvCpltCallback+0x1e8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3340      	adds	r3, #64	@ 0x40
 800131e:	2210      	movs	r2, #16
 8001320:	4619      	mov	r1, r3
 8001322:	4833      	ldr	r0, [pc, #204]	@ (80013f0 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8001324:	f003 fb10 	bl	8004948 <arm_q31_to_float>
	/* ----------------------------------------------------------------------
	** Scale back up
	** ------------------------------------------------------------------- */
	arm_scale_f32(filt_out_ptr + halfN, 8.0f, filt_out_ptr + halfN, halfN);
 8001328:	4b30      	ldr	r3, [pc, #192]	@ (80013ec <HAL_ADC_ConvCpltCallback+0x1e8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8001330:	4b2e      	ldr	r3, [pc, #184]	@ (80013ec <HAL_ADC_ConvCpltCallback+0x1e8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	3340      	adds	r3, #64	@ 0x40
 8001336:	2210      	movs	r2, #16
 8001338:	4619      	mov	r1, r3
 800133a:	eeb2 0a00 	vmov.f32	s0, #32	@ 0x41000000  8.0
 800133e:	f004 f85b 	bl	80053f8 <arm_scale_f32>


	//arm_fir_f32(&filter1, filt_in_ptr + halfN, filt_out_ptr + halfN, halfN);
    for( int n=halfN; n<N; n++){
 8001342:	2310      	movs	r3, #16
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	e024      	b.n	8001392 <HAL_ADC_ConvCpltCallback+0x18e>
    	filt_out[n] += 2;
 8001348:	4a2a      	ldr	r2, [pc, #168]	@ (80013f4 <HAL_ADC_ConvCpltCallback+0x1f0>)
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	edd3 7a00 	vldr	s15, [r3]
 8001354:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001358:	ee77 7a87 	vadd.f32	s15, s15, s14
 800135c:	4a25      	ldr	r2, [pc, #148]	@ (80013f4 <HAL_ADC_ConvCpltCallback+0x1f0>)
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	edc3 7a00 	vstr	s15, [r3]
    	dac_buffer[n] = (uint32_t) (filt_out[n] * 1000);}
 8001368:	4a22      	ldr	r2, [pc, #136]	@ (80013f4 <HAL_ADC_ConvCpltCallback+0x1f0>)
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80013f8 <HAL_ADC_ConvCpltCallback+0x1f4>
 8001378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001380:	ee17 1a90 	vmov	r1, s15
 8001384:	4a1d      	ldr	r2, [pc, #116]	@ (80013fc <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for( int n=halfN; n<N; n++){
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	3301      	adds	r3, #1
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	2b1f      	cmp	r3, #31
 8001396:	ddd7      	ble.n	8001348 <HAL_ADC_ConvCpltCallback+0x144>

}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000008 	.word	0x20000008
 80013a8:	080054f0 	.word	0x080054f0
 80013ac:	200003f0 	.word	0x200003f0
 80013b0:	200005d0 	.word	0x200005d0
 80013b4:	20000430 	.word	0x20000430
 80013b8:	200005e0 	.word	0x200005e0
 80013bc:	20000470 	.word	0x20000470
 80013c0:	200005f0 	.word	0x200005f0
 80013c4:	20000490 	.word	0x20000490
 80013c8:	20000600 	.word	0x20000600
 80013cc:	200004b0 	.word	0x200004b0
 80013d0:	20000610 	.word	0x20000610
 80013d4:	200001f0 	.word	0x200001f0
 80013d8:	200002f0 	.word	0x200002f0
 80013dc:	20000000 	.word	0x20000000
 80013e0:	200004d0 	.word	0x200004d0
 80013e4:	20000510 	.word	0x20000510
 80013e8:	20000590 	.word	0x20000590
 80013ec:	20000004 	.word	0x20000004
 80013f0:	20000550 	.word	0x20000550
 80013f4:	20000370 	.word	0x20000370
 80013f8:	447a0000 	.word	0x447a0000
 80013fc:	20000270 	.word	0x20000270

08001400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001404:	b672      	cpsid	i
}
 8001406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <Error_Handler+0x8>

0800140c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <HAL_MspInit+0x4c>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141a:	4a0f      	ldr	r2, [pc, #60]	@ (8001458 <HAL_MspInit+0x4c>)
 800141c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001420:	6453      	str	r3, [r2, #68]	@ 0x44
 8001422:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <HAL_MspInit+0x4c>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001426:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <HAL_MspInit+0x4c>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	4a08      	ldr	r2, [pc, #32]	@ (8001458 <HAL_MspInit+0x4c>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800143c:	6413      	str	r3, [r2, #64]	@ 0x40
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_MspInit+0x4c>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800144a:	2007      	movs	r0, #7
 800144c:	f000 ff30 	bl	80022b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40023800 	.word	0x40023800

0800145c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	@ 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a2f      	ldr	r2, [pc, #188]	@ (8001538 <HAL_ADC_MspInit+0xdc>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d157      	bne.n	800152e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b2e      	ldr	r3, [pc, #184]	@ (800153c <HAL_ADC_MspInit+0xe0>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001486:	4a2d      	ldr	r2, [pc, #180]	@ (800153c <HAL_ADC_MspInit+0xe0>)
 8001488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800148c:	6453      	str	r3, [r2, #68]	@ 0x44
 800148e:	4b2b      	ldr	r3, [pc, #172]	@ (800153c <HAL_ADC_MspInit+0xe0>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b27      	ldr	r3, [pc, #156]	@ (800153c <HAL_ADC_MspInit+0xe0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a26      	ldr	r2, [pc, #152]	@ (800153c <HAL_ADC_MspInit+0xe0>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b24      	ldr	r3, [pc, #144]	@ (800153c <HAL_ADC_MspInit+0xe0>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014b6:	2302      	movs	r3, #2
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ba:	2303      	movs	r3, #3
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	481d      	ldr	r0, [pc, #116]	@ (8001540 <HAL_ADC_MspInit+0xe4>)
 80014ca:	f001 fc89 	bl	8002de0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <HAL_ADC_MspInit+0xe8>)
 80014d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001548 <HAL_ADC_MspInit+0xec>)
 80014d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001544 <HAL_ADC_MspInit+0xe8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014da:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <HAL_ADC_MspInit+0xe8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e0:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <HAL_ADC_MspInit+0xe8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014e6:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <HAL_ADC_MspInit+0xe8>)
 80014e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <HAL_ADC_MspInit+0xe8>)
 80014f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014f6:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <HAL_ADC_MspInit+0xe8>)
 80014f8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <HAL_ADC_MspInit+0xe8>)
 8001500:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001504:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001506:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <HAL_ADC_MspInit+0xe8>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800150c:	4b0d      	ldr	r3, [pc, #52]	@ (8001544 <HAL_ADC_MspInit+0xe8>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001512:	480c      	ldr	r0, [pc, #48]	@ (8001544 <HAL_ADC_MspInit+0xe8>)
 8001514:	f001 f8f4 	bl	8002700 <HAL_DMA_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800151e:	f7ff ff6f 	bl	8001400 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a07      	ldr	r2, [pc, #28]	@ (8001544 <HAL_ADC_MspInit+0xe8>)
 8001526:	639a      	str	r2, [r3, #56]	@ 0x38
 8001528:	4a06      	ldr	r2, [pc, #24]	@ (8001544 <HAL_ADC_MspInit+0xe8>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	@ 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40012000 	.word	0x40012000
 800153c:	40023800 	.word	0x40023800
 8001540:	40020000 	.word	0x40020000
 8001544:	2000008c 	.word	0x2000008c
 8001548:	40026410 	.word	0x40026410

0800154c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	@ 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a2f      	ldr	r2, [pc, #188]	@ (8001628 <HAL_DAC_MspInit+0xdc>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d158      	bne.n	8001620 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b2e      	ldr	r3, [pc, #184]	@ (800162c <HAL_DAC_MspInit+0xe0>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	4a2d      	ldr	r2, [pc, #180]	@ (800162c <HAL_DAC_MspInit+0xe0>)
 8001578:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800157c:	6413      	str	r3, [r2, #64]	@ 0x40
 800157e:	4b2b      	ldr	r3, [pc, #172]	@ (800162c <HAL_DAC_MspInit+0xe0>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b27      	ldr	r3, [pc, #156]	@ (800162c <HAL_DAC_MspInit+0xe0>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a26      	ldr	r2, [pc, #152]	@ (800162c <HAL_DAC_MspInit+0xe0>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b24      	ldr	r3, [pc, #144]	@ (800162c <HAL_DAC_MspInit+0xe0>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015a6:	2310      	movs	r3, #16
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015aa:	2303      	movs	r3, #3
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	481d      	ldr	r0, [pc, #116]	@ (8001630 <HAL_DAC_MspInit+0xe4>)
 80015ba:	f001 fc11 	bl	8002de0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80015be:	4b1d      	ldr	r3, [pc, #116]	@ (8001634 <HAL_DAC_MspInit+0xe8>)
 80015c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001638 <HAL_DAC_MspInit+0xec>)
 80015c2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001634 <HAL_DAC_MspInit+0xe8>)
 80015c6:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80015ca:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015cc:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <HAL_DAC_MspInit+0xe8>)
 80015ce:	2240      	movs	r2, #64	@ 0x40
 80015d0:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d2:	4b18      	ldr	r3, [pc, #96]	@ (8001634 <HAL_DAC_MspInit+0xe8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80015d8:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <HAL_DAC_MspInit+0xe8>)
 80015da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015de:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015e0:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <HAL_DAC_MspInit+0xe8>)
 80015e2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015e6:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015e8:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <HAL_DAC_MspInit+0xe8>)
 80015ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015ee:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80015f0:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <HAL_DAC_MspInit+0xe8>)
 80015f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015f6:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80015f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <HAL_DAC_MspInit+0xe8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <HAL_DAC_MspInit+0xe8>)
 8001600:	2200      	movs	r2, #0
 8001602:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001604:	480b      	ldr	r0, [pc, #44]	@ (8001634 <HAL_DAC_MspInit+0xe8>)
 8001606:	f001 f87b 	bl	8002700 <HAL_DMA_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001610:	f7ff fef6 	bl	8001400 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a07      	ldr	r2, [pc, #28]	@ (8001634 <HAL_DAC_MspInit+0xe8>)
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	4a06      	ldr	r2, [pc, #24]	@ (8001634 <HAL_DAC_MspInit+0xe8>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001620:	bf00      	nop
 8001622:	3728      	adds	r7, #40	@ 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40007400 	.word	0x40007400
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000
 8001634:	20000100 	.word	0x20000100
 8001638:	40026088 	.word	0x40026088

0800163c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0b      	ldr	r2, [pc, #44]	@ (8001678 <HAL_TIM_Base_MspInit+0x3c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d10d      	bne.n	800166a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <HAL_TIM_Base_MspInit+0x40>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001656:	4a09      	ldr	r2, [pc, #36]	@ (800167c <HAL_TIM_Base_MspInit+0x40>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6453      	str	r3, [r2, #68]	@ 0x44
 800165e:	4b07      	ldr	r3, [pc, #28]	@ (800167c <HAL_TIM_Base_MspInit+0x40>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40010400 	.word	0x40010400
 800167c:	40023800 	.word	0x40023800

08001680 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	@ 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a19      	ldr	r2, [pc, #100]	@ (8001704 <HAL_UART_MspInit+0x84>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d12b      	bne.n	80016fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <HAL_UART_MspInit+0x88>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	4a17      	ldr	r2, [pc, #92]	@ (8001708 <HAL_UART_MspInit+0x88>)
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <HAL_UART_MspInit+0x88>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <HAL_UART_MspInit+0x88>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	4a10      	ldr	r2, [pc, #64]	@ (8001708 <HAL_UART_MspInit+0x88>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <HAL_UART_MspInit+0x88>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016da:	230c      	movs	r3, #12
 80016dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ea:	2307      	movs	r3, #7
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	4805      	ldr	r0, [pc, #20]	@ (800170c <HAL_UART_MspInit+0x8c>)
 80016f6:	f001 fb73 	bl	8002de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	@ 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40004400 	.word	0x40004400
 8001708:	40023800 	.word	0x40023800
 800170c:	40020000 	.word	0x40020000

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <NMI_Handler+0x4>

08001718 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <MemManage_Handler+0x4>

08001728 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <UsageFault_Handler+0x4>

08001738 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001766:	f000 f8a5 	bl	80018b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <DMA1_Stream5_IRQHandler+0x10>)
 8001776:	f001 f8c9 	bl	800290c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000100 	.word	0x20000100

08001784 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <DMA2_Stream0_IRQHandler+0x10>)
 800178a:	f001 f8bf 	bl	800290c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000008c 	.word	0x2000008c

08001798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <SystemInit+0x20>)
 800179e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017a2:	4a05      	ldr	r2, [pc, #20]	@ (80017b8 <SystemInit+0x20>)
 80017a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017c0:	f7ff ffea 	bl	8001798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c4:	480c      	ldr	r0, [pc, #48]	@ (80017f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017c6:	490d      	ldr	r1, [pc, #52]	@ (80017fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001800 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0a      	ldr	r2, [pc, #40]	@ (8001804 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001808 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017ea:	f003 fe51 	bl	8005490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ee:	f7ff f9bb 	bl	8000b68 <main>
  bx  lr    
 80017f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017fc:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001800:	080063f8 	.word	0x080063f8
  ldr r2, =_sbss
 8001804:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001808:	20000624 	.word	0x20000624

0800180c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC_IRQHandler>
	...

08001810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001814:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0d      	ldr	r2, [pc, #52]	@ (8001850 <HAL_Init+0x40>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800181e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001820:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <HAL_Init+0x40>)
 8001826:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800182a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800182c:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a07      	ldr	r2, [pc, #28]	@ (8001850 <HAL_Init+0x40>)
 8001832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001838:	2003      	movs	r0, #3
 800183a:	f000 fd39 	bl	80022b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183e:	2000      	movs	r0, #0
 8001840:	f000 f808 	bl	8001854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001844:	f7ff fde2 	bl	800140c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023c00 	.word	0x40023c00

08001854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800185c:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <HAL_InitTick+0x54>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <HAL_InitTick+0x58>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800186a:	fbb3 f3f1 	udiv	r3, r3, r1
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f000 fd51 	bl	800231a <HAL_SYSTICK_Config>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e00e      	b.n	80018a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d80a      	bhi.n	800189e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001888:	2200      	movs	r2, #0
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	f000 fd19 	bl	80022c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001894:	4a06      	ldr	r2, [pc, #24]	@ (80018b0 <HAL_InitTick+0x5c>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	e000      	b.n	80018a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	2000001c 	.word	0x2000001c
 80018ac:	20000024 	.word	0x20000024
 80018b0:	20000020 	.word	0x20000020

080018b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_IncTick+0x20>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_IncTick+0x24>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	4a04      	ldr	r2, [pc, #16]	@ (80018d8 <HAL_IncTick+0x24>)
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000024 	.word	0x20000024
 80018d8:	20000620 	.word	0x20000620

080018dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return uwTick;
 80018e0:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <HAL_GetTick+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000620 	.word	0x20000620

080018f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e033      	b.n	8001972 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fda2 	bl	800145c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	2b00      	cmp	r3, #0
 8001930:	d118      	bne.n	8001964 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001936:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800193a:	f023 0302 	bic.w	r3, r3, #2
 800193e:	f043 0202 	orr.w	r2, r3, #2
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 fa64 	bl	8001e14 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	f023 0303 	bic.w	r3, r3, #3
 800195a:	f043 0201 	orr.w	r2, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	641a      	str	r2, [r3, #64]	@ 0x40
 8001962:	e001      	b.n	8001968 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001970:	7bfb      	ldrb	r3, [r7, #15]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <HAL_ADC_Start_DMA+0x1e>
 8001996:	2302      	movs	r3, #2
 8001998:	e0e9      	b.n	8001b6e <HAL_ADC_Start_DMA+0x1f2>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d018      	beq.n	80019e2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0201 	orr.w	r2, r2, #1
 80019be:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019c0:	4b6d      	ldr	r3, [pc, #436]	@ (8001b78 <HAL_ADC_Start_DMA+0x1fc>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a6d      	ldr	r2, [pc, #436]	@ (8001b7c <HAL_ADC_Start_DMA+0x200>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	0c9a      	lsrs	r2, r3, #18
 80019cc:	4613      	mov	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4413      	add	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80019d4:	e002      	b.n	80019dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	3b01      	subs	r3, #1
 80019da:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f9      	bne.n	80019d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019f0:	d107      	bne.n	8001a02 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a00:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	f040 80a1 	bne.w	8001b54 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001a1a:	f023 0301 	bic.w	r3, r3, #1
 8001a1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d007      	beq.n	8001a44 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a38:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a3c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a50:	d106      	bne.n	8001a60 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f023 0206 	bic.w	r2, r3, #6
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a5e:	e002      	b.n	8001a66 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a6e:	4b44      	ldr	r3, [pc, #272]	@ (8001b80 <HAL_ADC_Start_DMA+0x204>)
 8001a70:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a76:	4a43      	ldr	r2, [pc, #268]	@ (8001b84 <HAL_ADC_Start_DMA+0x208>)
 8001a78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a7e:	4a42      	ldr	r2, [pc, #264]	@ (8001b88 <HAL_ADC_Start_DMA+0x20c>)
 8001a80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a86:	4a41      	ldr	r2, [pc, #260]	@ (8001b8c <HAL_ADC_Start_DMA+0x210>)
 8001a88:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a92:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001aa2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ab2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	334c      	adds	r3, #76	@ 0x4c
 8001abe:	4619      	mov	r1, r3
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f000 feca 	bl	800285c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 031f 	and.w	r3, r3, #31
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d12a      	bne.n	8001b2a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a2d      	ldr	r2, [pc, #180]	@ (8001b90 <HAL_ADC_Start_DMA+0x214>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d015      	beq.n	8001b0a <HAL_ADC_Start_DMA+0x18e>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a2c      	ldr	r2, [pc, #176]	@ (8001b94 <HAL_ADC_Start_DMA+0x218>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d105      	bne.n	8001af4 <HAL_ADC_Start_DMA+0x178>
 8001ae8:	4b25      	ldr	r3, [pc, #148]	@ (8001b80 <HAL_ADC_Start_DMA+0x204>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00a      	beq.n	8001b0a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a27      	ldr	r2, [pc, #156]	@ (8001b98 <HAL_ADC_Start_DMA+0x21c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d136      	bne.n	8001b6c <HAL_ADC_Start_DMA+0x1f0>
 8001afe:	4b20      	ldr	r3, [pc, #128]	@ (8001b80 <HAL_ADC_Start_DMA+0x204>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 0310 	and.w	r3, r3, #16
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d130      	bne.n	8001b6c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d129      	bne.n	8001b6c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	e020      	b.n	8001b6c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a18      	ldr	r2, [pc, #96]	@ (8001b90 <HAL_ADC_Start_DMA+0x214>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d11b      	bne.n	8001b6c <HAL_ADC_Start_DMA+0x1f0>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d114      	bne.n	8001b6c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	e00b      	b.n	8001b6c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b58:	f043 0210 	orr.w	r2, r3, #16
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b64:	f043 0201 	orr.w	r2, r3, #1
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	2000001c 	.word	0x2000001c
 8001b7c:	431bde83 	.word	0x431bde83
 8001b80:	40012300 	.word	0x40012300
 8001b84:	0800200d 	.word	0x0800200d
 8001b88:	080020c7 	.word	0x080020c7
 8001b8c:	080020e3 	.word	0x080020e3
 8001b90:	40012000 	.word	0x40012000
 8001b94:	40012100 	.word	0x40012100
 8001b98:	40012200 	.word	0x40012200

08001b9c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x1c>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e113      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x244>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b09      	cmp	r3, #9
 8001bda:	d925      	bls.n	8001c28 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68d9      	ldr	r1, [r3, #12]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	461a      	mov	r2, r3
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	3b1e      	subs	r3, #30
 8001bf2:	2207      	movs	r2, #7
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43da      	mvns	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	400a      	ands	r2, r1
 8001c00:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68d9      	ldr	r1, [r3, #12]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	4603      	mov	r3, r0
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4403      	add	r3, r0
 8001c1a:	3b1e      	subs	r3, #30
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	e022      	b.n	8001c6e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6919      	ldr	r1, [r3, #16]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	4613      	mov	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	2207      	movs	r2, #7
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	400a      	ands	r2, r1
 8001c4a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6919      	ldr	r1, [r3, #16]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	4603      	mov	r3, r0
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4403      	add	r3, r0
 8001c64:	409a      	lsls	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d824      	bhi.n	8001cc0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	3b05      	subs	r3, #5
 8001c88:	221f      	movs	r2, #31
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	400a      	ands	r2, r1
 8001c96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	3b05      	subs	r3, #5
 8001cb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cbe:	e04c      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b0c      	cmp	r3, #12
 8001cc6:	d824      	bhi.n	8001d12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3b23      	subs	r3, #35	@ 0x23
 8001cda:	221f      	movs	r2, #31
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	400a      	ands	r2, r1
 8001ce8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	3b23      	subs	r3, #35	@ 0x23
 8001d04:	fa00 f203 	lsl.w	r2, r0, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d10:	e023      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	3b41      	subs	r3, #65	@ 0x41
 8001d24:	221f      	movs	r2, #31
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	400a      	ands	r2, r1
 8001d32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	4618      	mov	r0, r3
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3b41      	subs	r3, #65	@ 0x41
 8001d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d5a:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <HAL_ADC_ConfigChannel+0x250>)
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a28      	ldr	r2, [pc, #160]	@ (8001e04 <HAL_ADC_ConfigChannel+0x254>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d10f      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x1d8>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b12      	cmp	r3, #18
 8001d6e:	d10b      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001e04 <HAL_ADC_ConfigChannel+0x254>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d12b      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x23a>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a1c      	ldr	r2, [pc, #112]	@ (8001e08 <HAL_ADC_ConfigChannel+0x258>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d003      	beq.n	8001da4 <HAL_ADC_ConfigChannel+0x1f4>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b11      	cmp	r3, #17
 8001da2:	d122      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a11      	ldr	r2, [pc, #68]	@ (8001e08 <HAL_ADC_ConfigChannel+0x258>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d111      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dc6:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <HAL_ADC_ConfigChannel+0x25c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a11      	ldr	r2, [pc, #68]	@ (8001e10 <HAL_ADC_ConfigChannel+0x260>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	0c9a      	lsrs	r2, r3, #18
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ddc:	e002      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f9      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	40012300 	.word	0x40012300
 8001e04:	40012000 	.word	0x40012000
 8001e08:	10000012 	.word	0x10000012
 8001e0c:	2000001c 	.word	0x2000001c
 8001e10:	431bde83 	.word	0x431bde83

08001e14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e1c:	4b79      	ldr	r3, [pc, #484]	@ (8002004 <ADC_Init+0x1f0>)
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	431a      	orrs	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6859      	ldr	r1, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	021a      	lsls	r2, r3, #8
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6899      	ldr	r1, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea6:	4a58      	ldr	r2, [pc, #352]	@ (8002008 <ADC_Init+0x1f4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d022      	beq.n	8001ef2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001eba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6899      	ldr	r1, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001edc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6899      	ldr	r1, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	e00f      	b.n	8001f12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f10:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0202 	bic.w	r2, r2, #2
 8001f20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6899      	ldr	r1, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7e1b      	ldrb	r3, [r3, #24]
 8001f2c:	005a      	lsls	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d01b      	beq.n	8001f78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f4e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6859      	ldr	r1, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	035a      	lsls	r2, r3, #13
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	e007      	b.n	8001f88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f86:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	051a      	lsls	r2, r3, #20
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001fbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6899      	ldr	r1, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001fca:	025a      	lsls	r2, r3, #9
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fe2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6899      	ldr	r1, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	029a      	lsls	r2, r3, #10
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	609a      	str	r2, [r3, #8]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	40012300 	.word	0x40012300
 8002008:	0f000001 	.word	0x0f000001

0800200c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002018:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002022:	2b00      	cmp	r3, #0
 8002024:	d13c      	bne.n	80020a0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d12b      	bne.n	8002098 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002044:	2b00      	cmp	r3, #0
 8002046:	d127      	bne.n	8002098 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002052:	2b00      	cmp	r3, #0
 8002054:	d006      	beq.n	8002064 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002060:	2b00      	cmp	r3, #0
 8002062:	d119      	bne.n	8002098 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0220 	bic.w	r2, r2, #32
 8002072:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002084:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d105      	bne.n	8002098 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002090:	f043 0201 	orr.w	r2, r3, #1
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f7ff f8b3 	bl	8001204 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800209e:	e00e      	b.n	80020be <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f7ff fd75 	bl	8001b9c <HAL_ADC_ErrorCallback>
}
 80020b2:	e004      	b.n	80020be <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	4798      	blx	r3
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f7fe ff9f 	bl	8001018 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ee:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2240      	movs	r2, #64	@ 0x40
 80020f4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fa:	f043 0204 	orr.w	r2, r3, #4
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f7ff fd4a 	bl	8001b9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002108:	bf00      	nop
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002120:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800212c:	4013      	ands	r3, r2
 800212e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002138:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800213c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002142:	4a04      	ldr	r2, [pc, #16]	@ (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	60d3      	str	r3, [r2, #12]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800215c:	4b04      	ldr	r3, [pc, #16]	@ (8002170 <__NVIC_GetPriorityGrouping+0x18>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	f003 0307 	and.w	r3, r3, #7
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	2b00      	cmp	r3, #0
 8002184:	db0b      	blt.n	800219e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	f003 021f 	and.w	r2, r3, #31
 800218c:	4907      	ldr	r1, [pc, #28]	@ (80021ac <__NVIC_EnableIRQ+0x38>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	2001      	movs	r0, #1
 8002196:	fa00 f202 	lsl.w	r2, r0, r2
 800219a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000e100 	.word	0xe000e100

080021b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	6039      	str	r1, [r7, #0]
 80021ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	db0a      	blt.n	80021da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	490c      	ldr	r1, [pc, #48]	@ (80021fc <__NVIC_SetPriority+0x4c>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	0112      	lsls	r2, r2, #4
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	440b      	add	r3, r1
 80021d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d8:	e00a      	b.n	80021f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4908      	ldr	r1, [pc, #32]	@ (8002200 <__NVIC_SetPriority+0x50>)
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	3b04      	subs	r3, #4
 80021e8:	0112      	lsls	r2, r2, #4
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	440b      	add	r3, r1
 80021ee:	761a      	strb	r2, [r3, #24]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000e100 	.word	0xe000e100
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002204:	b480      	push	{r7}
 8002206:	b089      	sub	sp, #36	@ 0x24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f1c3 0307 	rsb	r3, r3, #7
 800221e:	2b04      	cmp	r3, #4
 8002220:	bf28      	it	cs
 8002222:	2304      	movcs	r3, #4
 8002224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3304      	adds	r3, #4
 800222a:	2b06      	cmp	r3, #6
 800222c:	d902      	bls.n	8002234 <NVIC_EncodePriority+0x30>
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3b03      	subs	r3, #3
 8002232:	e000      	b.n	8002236 <NVIC_EncodePriority+0x32>
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002238:	f04f 32ff 	mov.w	r2, #4294967295
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43da      	mvns	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	401a      	ands	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800224c:	f04f 31ff 	mov.w	r1, #4294967295
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	43d9      	mvns	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	4313      	orrs	r3, r2
         );
}
 800225e:	4618      	mov	r0, r3
 8002260:	3724      	adds	r7, #36	@ 0x24
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800227c:	d301      	bcc.n	8002282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800227e:	2301      	movs	r3, #1
 8002280:	e00f      	b.n	80022a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002282:	4a0a      	ldr	r2, [pc, #40]	@ (80022ac <SysTick_Config+0x40>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3b01      	subs	r3, #1
 8002288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228a:	210f      	movs	r1, #15
 800228c:	f04f 30ff 	mov.w	r0, #4294967295
 8002290:	f7ff ff8e 	bl	80021b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002294:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <SysTick_Config+0x40>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229a:	4b04      	ldr	r3, [pc, #16]	@ (80022ac <SysTick_Config+0x40>)
 800229c:	2207      	movs	r2, #7
 800229e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	e000e010 	.word	0xe000e010

080022b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ff29 	bl	8002110 <__NVIC_SetPriorityGrouping>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b086      	sub	sp, #24
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d8:	f7ff ff3e 	bl	8002158 <__NVIC_GetPriorityGrouping>
 80022dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	6978      	ldr	r0, [r7, #20]
 80022e4:	f7ff ff8e 	bl	8002204 <NVIC_EncodePriority>
 80022e8:	4602      	mov	r2, r0
 80022ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff5d 	bl	80021b0 <__NVIC_SetPriority>
}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff31 	bl	8002174 <__NVIC_EnableIRQ>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ffa2 	bl	800226c <SysTick_Config>
 8002328:	4603      	mov	r3, r0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e014      	b.n	800236e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	791b      	ldrb	r3, [r3, #4]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d105      	bne.n	800235a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff f8f9 	bl	800154c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2202      	movs	r2, #2
 800235e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0a2      	b.n	80024da <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	795b      	ldrb	r3, [r3, #5]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_DAC_Start_DMA+0x28>
 800239c:	2302      	movs	r3, #2
 800239e:	e09c      	b.n	80024da <HAL_DAC_Start_DMA+0x162>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2202      	movs	r2, #2
 80023aa:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d129      	bne.n	8002406 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	4a4b      	ldr	r2, [pc, #300]	@ (80024e4 <HAL_DAC_Start_DMA+0x16c>)
 80023b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	4a4a      	ldr	r2, [pc, #296]	@ (80024e8 <HAL_DAC_Start_DMA+0x170>)
 80023c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	4a49      	ldr	r2, [pc, #292]	@ (80024ec <HAL_DAC_Start_DMA+0x174>)
 80023c8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80023d8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_DAC_Start_DMA+0x70>
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d005      	beq.n	80023f2 <HAL_DAC_Start_DMA+0x7a>
 80023e6:	e009      	b.n	80023fc <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3308      	adds	r3, #8
 80023ee:	613b      	str	r3, [r7, #16]
        break;
 80023f0:	e033      	b.n	800245a <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	330c      	adds	r3, #12
 80023f8:	613b      	str	r3, [r7, #16]
        break;
 80023fa:	e02e      	b.n	800245a <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	3310      	adds	r3, #16
 8002402:	613b      	str	r3, [r7, #16]
        break;
 8002404:	e029      	b.n	800245a <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	4a39      	ldr	r2, [pc, #228]	@ (80024f0 <HAL_DAC_Start_DMA+0x178>)
 800240c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	4a38      	ldr	r2, [pc, #224]	@ (80024f4 <HAL_DAC_Start_DMA+0x17c>)
 8002414:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	4a37      	ldr	r2, [pc, #220]	@ (80024f8 <HAL_DAC_Start_DMA+0x180>)
 800241c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800242c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_DAC_Start_DMA+0xc4>
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	2b04      	cmp	r3, #4
 8002438:	d005      	beq.n	8002446 <HAL_DAC_Start_DMA+0xce>
 800243a:	e009      	b.n	8002450 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	3314      	adds	r3, #20
 8002442:	613b      	str	r3, [r7, #16]
        break;
 8002444:	e009      	b.n	800245a <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3318      	adds	r3, #24
 800244c:	613b      	str	r3, [r7, #16]
        break;
 800244e:	e004      	b.n	800245a <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	331c      	adds	r3, #28
 8002456:	613b      	str	r3, [r7, #16]
        break;
 8002458:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d111      	bne.n	8002484 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800246e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6898      	ldr	r0, [r3, #8]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	f000 f9ef 	bl	800285c <HAL_DMA_Start_IT>
 800247e:	4603      	mov	r3, r0
 8002480:	75fb      	strb	r3, [r7, #23]
 8002482:	e010      	b.n	80024a6 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002492:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	68d8      	ldr	r0, [r3, #12]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	f000 f9dd 	bl	800285c <HAL_DMA_Start_IT>
 80024a2:	4603      	mov	r3, r0
 80024a4:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10c      	bne.n	80024cc <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6819      	ldr	r1, [r3, #0]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2201      	movs	r2, #1
 80024c0:	409a      	lsls	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	e005      	b.n	80024d8 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	f043 0204 	orr.w	r2, r3, #4
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80024d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	080025eb 	.word	0x080025eb
 80024e8:	0800260d 	.word	0x0800260d
 80024ec:	08002629 	.word	0x08002629
 80024f0:	08002693 	.word	0x08002693
 80024f4:	080026b5 	.word	0x080026b5
 80024f8:	080026d1 	.word	0x080026d1

080024fc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	@ 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_DAC_ConfigChannel+0x1c>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e042      	b.n	80025de <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	795b      	ldrb	r3, [r3, #5]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_DAC_ConfigChannel+0x2c>
 8002560:	2302      	movs	r3, #2
 8002562:	e03c      	b.n	80025de <HAL_DAC_ConfigChannel+0xa6>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2201      	movs	r2, #1
 8002568:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2202      	movs	r2, #2
 800256e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4313      	orrs	r3, r2
 8002598:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6819      	ldr	r1, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	22c0      	movs	r2, #192	@ 0xc0
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	400a      	ands	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2201      	movs	r2, #1
 80025d4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80025dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3724      	adds	r7, #36	@ 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f7ff ff7f 	bl	80024fc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2201      	movs	r2, #1
 8002602:	711a      	strb	r2, [r3, #4]
}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002618:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f7ff ff78 	bl	8002510 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002634:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f043 0204 	orr.w	r2, r3, #4
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f7ff ff6e 	bl	8002524 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2201      	movs	r2, #1
 800264c:	711a      	strb	r2, [r3, #4]
}
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f7ff ffd8 	bl	8002656 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	711a      	strb	r2, [r3, #4]
}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f7ff ffd1 	bl	800266a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f043 0204 	orr.w	r2, r3, #4
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f7ff ffc7 	bl	800267e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2201      	movs	r2, #1
 80026f4:	711a      	strb	r2, [r3, #4]
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800270c:	f7ff f8e6 	bl	80018dc <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e099      	b.n	8002850 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800273c:	e00f      	b.n	800275e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800273e:	f7ff f8cd 	bl	80018dc <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b05      	cmp	r3, #5
 800274a:	d908      	bls.n	800275e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2203      	movs	r2, #3
 8002756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e078      	b.n	8002850 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1e8      	bne.n	800273e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	4b38      	ldr	r3, [pc, #224]	@ (8002858 <HAL_DMA_Init+0x158>)
 8002778:	4013      	ands	r3, r2
 800277a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800278a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d107      	bne.n	80027c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c0:	4313      	orrs	r3, r2
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f023 0307 	bic.w	r3, r3, #7
 80027de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d117      	bne.n	8002822 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00e      	beq.n	8002822 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fa6f 	bl	8002ce8 <DMA_CheckFifoParam>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2240      	movs	r2, #64	@ 0x40
 8002814:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800281e:	2301      	movs	r3, #1
 8002820:	e016      	b.n	8002850 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fa26 	bl	8002c7c <DMA_CalcBaseAndBitshift>
 8002830:	4603      	mov	r3, r0
 8002832:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002838:	223f      	movs	r2, #63	@ 0x3f
 800283a:	409a      	lsls	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	f010803f 	.word	0xf010803f

0800285c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002872:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_DMA_Start_IT+0x26>
 800287e:	2302      	movs	r3, #2
 8002880:	e040      	b.n	8002904 <HAL_DMA_Start_IT+0xa8>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b01      	cmp	r3, #1
 8002894:	d12f      	bne.n	80028f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2202      	movs	r2, #2
 800289a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f9b8 	bl	8002c20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b4:	223f      	movs	r2, #63	@ 0x3f
 80028b6:	409a      	lsls	r2, r3
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0216 	orr.w	r2, r2, #22
 80028ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d007      	beq.n	80028e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0208 	orr.w	r2, r2, #8
 80028e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	e005      	b.n	8002902 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028fe:	2302      	movs	r3, #2
 8002900:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002902:	7dfb      	ldrb	r3, [r7, #23]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002918:	4b8e      	ldr	r3, [pc, #568]	@ (8002b54 <HAL_DMA_IRQHandler+0x248>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a8e      	ldr	r2, [pc, #568]	@ (8002b58 <HAL_DMA_IRQHandler+0x24c>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	0a9b      	lsrs	r3, r3, #10
 8002924:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002936:	2208      	movs	r2, #8
 8002938:	409a      	lsls	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4013      	ands	r3, r2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d01a      	beq.n	8002978 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0204 	bic.w	r2, r2, #4
 800295e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002964:	2208      	movs	r2, #8
 8002966:	409a      	lsls	r2, r3
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002970:	f043 0201 	orr.w	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297c:	2201      	movs	r2, #1
 800297e:	409a      	lsls	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d012      	beq.n	80029ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299a:	2201      	movs	r2, #1
 800299c:	409a      	lsls	r2, r3
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a6:	f043 0202 	orr.w	r2, r3, #2
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b2:	2204      	movs	r2, #4
 80029b4:	409a      	lsls	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d012      	beq.n	80029e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00b      	beq.n	80029e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d0:	2204      	movs	r2, #4
 80029d2:	409a      	lsls	r2, r3
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029dc:	f043 0204 	orr.w	r2, r3, #4
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e8:	2210      	movs	r2, #16
 80029ea:	409a      	lsls	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d043      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d03c      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a06:	2210      	movs	r2, #16
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d018      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d108      	bne.n	8002a3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d024      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	4798      	blx	r3
 8002a3a:	e01f      	b.n	8002a7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d01b      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	4798      	blx	r3
 8002a4c:	e016      	b.n	8002a7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d107      	bne.n	8002a6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0208 	bic.w	r2, r2, #8
 8002a6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a80:	2220      	movs	r2, #32
 8002a82:	409a      	lsls	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 808f 	beq.w	8002bac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0310 	and.w	r3, r3, #16
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 8087 	beq.w	8002bac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d136      	bne.n	8002b24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0216 	bic.w	r2, r2, #22
 8002ac4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ad4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d103      	bne.n	8002ae6 <HAL_DMA_IRQHandler+0x1da>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0208 	bic.w	r2, r2, #8
 8002af4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afa:	223f      	movs	r2, #63	@ 0x3f
 8002afc:	409a      	lsls	r2, r3
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d07e      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	4798      	blx	r3
        }
        return;
 8002b22:	e079      	b.n	8002c18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01d      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10d      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d031      	beq.n	8002bac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	4798      	blx	r3
 8002b50:	e02c      	b.n	8002bac <HAL_DMA_IRQHandler+0x2a0>
 8002b52:	bf00      	nop
 8002b54:	2000001c 	.word	0x2000001c
 8002b58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d023      	beq.n	8002bac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
 8002b6c:	e01e      	b.n	8002bac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10f      	bne.n	8002b9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0210 	bic.w	r2, r2, #16
 8002b8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d032      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d022      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2205      	movs	r2, #5
 8002bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0201 	bic.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d307      	bcc.n	8002bf4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f2      	bne.n	8002bd8 <HAL_DMA_IRQHandler+0x2cc>
 8002bf2:	e000      	b.n	8002bf6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bf4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	4798      	blx	r3
 8002c16:	e000      	b.n	8002c1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c18:	bf00      	nop
    }
  }
}
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b40      	cmp	r3, #64	@ 0x40
 8002c4c:	d108      	bne.n	8002c60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c5e:	e007      	b.n	8002c70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	60da      	str	r2, [r3, #12]
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	3b10      	subs	r3, #16
 8002c8c:	4a14      	ldr	r2, [pc, #80]	@ (8002ce0 <DMA_CalcBaseAndBitshift+0x64>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	091b      	lsrs	r3, r3, #4
 8002c94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c96:	4a13      	ldr	r2, [pc, #76]	@ (8002ce4 <DMA_CalcBaseAndBitshift+0x68>)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d909      	bls.n	8002cbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	1d1a      	adds	r2, r3, #4
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cbc:	e007      	b.n	8002cce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cc6:	f023 0303 	bic.w	r3, r3, #3
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	aaaaaaab 	.word	0xaaaaaaab
 8002ce4:	080063e0 	.word	0x080063e0

08002ce8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d11f      	bne.n	8002d42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d856      	bhi.n	8002db6 <DMA_CheckFifoParam+0xce>
 8002d08:	a201      	add	r2, pc, #4	@ (adr r2, 8002d10 <DMA_CheckFifoParam+0x28>)
 8002d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0e:	bf00      	nop
 8002d10:	08002d21 	.word	0x08002d21
 8002d14:	08002d33 	.word	0x08002d33
 8002d18:	08002d21 	.word	0x08002d21
 8002d1c:	08002db7 	.word	0x08002db7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d046      	beq.n	8002dba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d30:	e043      	b.n	8002dba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d36:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d3a:	d140      	bne.n	8002dbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d40:	e03d      	b.n	8002dbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d4a:	d121      	bne.n	8002d90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d837      	bhi.n	8002dc2 <DMA_CheckFifoParam+0xda>
 8002d52:	a201      	add	r2, pc, #4	@ (adr r2, 8002d58 <DMA_CheckFifoParam+0x70>)
 8002d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d58:	08002d69 	.word	0x08002d69
 8002d5c:	08002d6f 	.word	0x08002d6f
 8002d60:	08002d69 	.word	0x08002d69
 8002d64:	08002d81 	.word	0x08002d81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d6c:	e030      	b.n	8002dd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d025      	beq.n	8002dc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d7e:	e022      	b.n	8002dc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d84:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d88:	d11f      	bne.n	8002dca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d8e:	e01c      	b.n	8002dca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d903      	bls.n	8002d9e <DMA_CheckFifoParam+0xb6>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d003      	beq.n	8002da4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d9c:	e018      	b.n	8002dd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
      break;
 8002da2:	e015      	b.n	8002dd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00e      	beq.n	8002dce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
      break;
 8002db4:	e00b      	b.n	8002dce <DMA_CheckFifoParam+0xe6>
      break;
 8002db6:	bf00      	nop
 8002db8:	e00a      	b.n	8002dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dba:	bf00      	nop
 8002dbc:	e008      	b.n	8002dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dbe:	bf00      	nop
 8002dc0:	e006      	b.n	8002dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dc2:	bf00      	nop
 8002dc4:	e004      	b.n	8002dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dc6:	bf00      	nop
 8002dc8:	e002      	b.n	8002dd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002dca:	bf00      	nop
 8002dcc:	e000      	b.n	8002dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dce:	bf00      	nop
    }
  } 
  
  return status; 
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop

08002de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b089      	sub	sp, #36	@ 0x24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	e165      	b.n	80030c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	f040 8154 	bne.w	80030c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d005      	beq.n	8002e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d130      	bne.n	8002e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e68:	2201      	movs	r2, #1
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	091b      	lsrs	r3, r3, #4
 8002e7e:	f003 0201 	and.w	r2, r3, #1
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d017      	beq.n	8002ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	2203      	movs	r2, #3
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d123      	bne.n	8002f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	08da      	lsrs	r2, r3, #3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3208      	adds	r2, #8
 8002ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	220f      	movs	r2, #15
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	08da      	lsrs	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3208      	adds	r2, #8
 8002f1e:	69b9      	ldr	r1, [r7, #24]
 8002f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2203      	movs	r2, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 0203 	and.w	r2, r3, #3
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80ae 	beq.w	80030c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	4b5d      	ldr	r3, [pc, #372]	@ (80030e0 <HAL_GPIO_Init+0x300>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	4a5c      	ldr	r2, [pc, #368]	@ (80030e0 <HAL_GPIO_Init+0x300>)
 8002f70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f76:	4b5a      	ldr	r3, [pc, #360]	@ (80030e0 <HAL_GPIO_Init+0x300>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f82:	4a58      	ldr	r2, [pc, #352]	@ (80030e4 <HAL_GPIO_Init+0x304>)
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	089b      	lsrs	r3, r3, #2
 8002f88:	3302      	adds	r3, #2
 8002f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	220f      	movs	r2, #15
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a4f      	ldr	r2, [pc, #316]	@ (80030e8 <HAL_GPIO_Init+0x308>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d025      	beq.n	8002ffa <HAL_GPIO_Init+0x21a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a4e      	ldr	r2, [pc, #312]	@ (80030ec <HAL_GPIO_Init+0x30c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d01f      	beq.n	8002ff6 <HAL_GPIO_Init+0x216>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a4d      	ldr	r2, [pc, #308]	@ (80030f0 <HAL_GPIO_Init+0x310>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d019      	beq.n	8002ff2 <HAL_GPIO_Init+0x212>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a4c      	ldr	r2, [pc, #304]	@ (80030f4 <HAL_GPIO_Init+0x314>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <HAL_GPIO_Init+0x20e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a4b      	ldr	r2, [pc, #300]	@ (80030f8 <HAL_GPIO_Init+0x318>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00d      	beq.n	8002fea <HAL_GPIO_Init+0x20a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a4a      	ldr	r2, [pc, #296]	@ (80030fc <HAL_GPIO_Init+0x31c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d007      	beq.n	8002fe6 <HAL_GPIO_Init+0x206>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a49      	ldr	r2, [pc, #292]	@ (8003100 <HAL_GPIO_Init+0x320>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d101      	bne.n	8002fe2 <HAL_GPIO_Init+0x202>
 8002fde:	2306      	movs	r3, #6
 8002fe0:	e00c      	b.n	8002ffc <HAL_GPIO_Init+0x21c>
 8002fe2:	2307      	movs	r3, #7
 8002fe4:	e00a      	b.n	8002ffc <HAL_GPIO_Init+0x21c>
 8002fe6:	2305      	movs	r3, #5
 8002fe8:	e008      	b.n	8002ffc <HAL_GPIO_Init+0x21c>
 8002fea:	2304      	movs	r3, #4
 8002fec:	e006      	b.n	8002ffc <HAL_GPIO_Init+0x21c>
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e004      	b.n	8002ffc <HAL_GPIO_Init+0x21c>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e002      	b.n	8002ffc <HAL_GPIO_Init+0x21c>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_GPIO_Init+0x21c>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	f002 0203 	and.w	r2, r2, #3
 8003002:	0092      	lsls	r2, r2, #2
 8003004:	4093      	lsls	r3, r2
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800300c:	4935      	ldr	r1, [pc, #212]	@ (80030e4 <HAL_GPIO_Init+0x304>)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	3302      	adds	r3, #2
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800301a:	4b3a      	ldr	r3, [pc, #232]	@ (8003104 <HAL_GPIO_Init+0x324>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800303e:	4a31      	ldr	r2, [pc, #196]	@ (8003104 <HAL_GPIO_Init+0x324>)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003044:	4b2f      	ldr	r3, [pc, #188]	@ (8003104 <HAL_GPIO_Init+0x324>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003068:	4a26      	ldr	r2, [pc, #152]	@ (8003104 <HAL_GPIO_Init+0x324>)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800306e:	4b25      	ldr	r3, [pc, #148]	@ (8003104 <HAL_GPIO_Init+0x324>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003092:	4a1c      	ldr	r2, [pc, #112]	@ (8003104 <HAL_GPIO_Init+0x324>)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003098:	4b1a      	ldr	r3, [pc, #104]	@ (8003104 <HAL_GPIO_Init+0x324>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030bc:	4a11      	ldr	r2, [pc, #68]	@ (8003104 <HAL_GPIO_Init+0x324>)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3301      	adds	r3, #1
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	2b0f      	cmp	r3, #15
 80030cc:	f67f ae96 	bls.w	8002dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	3724      	adds	r7, #36	@ 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40013800 	.word	0x40013800
 80030e8:	40020000 	.word	0x40020000
 80030ec:	40020400 	.word	0x40020400
 80030f0:	40020800 	.word	0x40020800
 80030f4:	40020c00 	.word	0x40020c00
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40021400 	.word	0x40021400
 8003100:	40021800 	.word	0x40021800
 8003104:	40013c00 	.word	0x40013c00

08003108 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	887b      	ldrh	r3, [r7, #2]
 800311a:	4013      	ands	r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
 8003124:	e001      	b.n	800312a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003126:	2300      	movs	r3, #0
 8003128:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800312a:	7bfb      	ldrb	r3, [r7, #15]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	807b      	strh	r3, [r7, #2]
 8003144:	4613      	mov	r3, r2
 8003146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003148:	787b      	ldrb	r3, [r7, #1]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800314e:	887a      	ldrh	r2, [r7, #2]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003154:	e003      	b.n	800315e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003156:	887b      	ldrh	r3, [r7, #2]
 8003158:	041a      	lsls	r2, r3, #16
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	619a      	str	r2, [r3, #24]
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e0cc      	b.n	800331a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003180:	4b68      	ldr	r3, [pc, #416]	@ (8003324 <HAL_RCC_ClockConfig+0x1b8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d90c      	bls.n	80031a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318e:	4b65      	ldr	r3, [pc, #404]	@ (8003324 <HAL_RCC_ClockConfig+0x1b8>)
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003196:	4b63      	ldr	r3, [pc, #396]	@ (8003324 <HAL_RCC_ClockConfig+0x1b8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0b8      	b.n	800331a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d020      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031c0:	4b59      	ldr	r3, [pc, #356]	@ (8003328 <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	4a58      	ldr	r2, [pc, #352]	@ (8003328 <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031d8:	4b53      	ldr	r3, [pc, #332]	@ (8003328 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	4a52      	ldr	r2, [pc, #328]	@ (8003328 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e4:	4b50      	ldr	r3, [pc, #320]	@ (8003328 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	494d      	ldr	r1, [pc, #308]	@ (8003328 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d044      	beq.n	800328c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d107      	bne.n	800321a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320a:	4b47      	ldr	r3, [pc, #284]	@ (8003328 <HAL_RCC_ClockConfig+0x1bc>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d119      	bne.n	800324a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e07f      	b.n	800331a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d003      	beq.n	800322a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003226:	2b03      	cmp	r3, #3
 8003228:	d107      	bne.n	800323a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800322a:	4b3f      	ldr	r3, [pc, #252]	@ (8003328 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d109      	bne.n	800324a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e06f      	b.n	800331a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323a:	4b3b      	ldr	r3, [pc, #236]	@ (8003328 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e067      	b.n	800331a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800324a:	4b37      	ldr	r3, [pc, #220]	@ (8003328 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f023 0203 	bic.w	r2, r3, #3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	4934      	ldr	r1, [pc, #208]	@ (8003328 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	4313      	orrs	r3, r2
 800325a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800325c:	f7fe fb3e 	bl	80018dc <HAL_GetTick>
 8003260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003262:	e00a      	b.n	800327a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003264:	f7fe fb3a 	bl	80018dc <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003272:	4293      	cmp	r3, r2
 8003274:	d901      	bls.n	800327a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e04f      	b.n	800331a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327a:	4b2b      	ldr	r3, [pc, #172]	@ (8003328 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 020c 	and.w	r2, r3, #12
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	429a      	cmp	r2, r3
 800328a:	d1eb      	bne.n	8003264 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800328c:	4b25      	ldr	r3, [pc, #148]	@ (8003324 <HAL_RCC_ClockConfig+0x1b8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d20c      	bcs.n	80032b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329a:	4b22      	ldr	r3, [pc, #136]	@ (8003324 <HAL_RCC_ClockConfig+0x1b8>)
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a2:	4b20      	ldr	r3, [pc, #128]	@ (8003324 <HAL_RCC_ClockConfig+0x1b8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e032      	b.n	800331a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032c0:	4b19      	ldr	r3, [pc, #100]	@ (8003328 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	4916      	ldr	r1, [pc, #88]	@ (8003328 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d009      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032de:	4b12      	ldr	r3, [pc, #72]	@ (8003328 <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	490e      	ldr	r1, [pc, #56]	@ (8003328 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032f2:	f000 f855 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 80032f6:	4602      	mov	r2, r0
 80032f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003328 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	091b      	lsrs	r3, r3, #4
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	490a      	ldr	r1, [pc, #40]	@ (800332c <HAL_RCC_ClockConfig+0x1c0>)
 8003304:	5ccb      	ldrb	r3, [r1, r3]
 8003306:	fa22 f303 	lsr.w	r3, r2, r3
 800330a:	4a09      	ldr	r2, [pc, #36]	@ (8003330 <HAL_RCC_ClockConfig+0x1c4>)
 800330c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800330e:	4b09      	ldr	r3, [pc, #36]	@ (8003334 <HAL_RCC_ClockConfig+0x1c8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe fa9e 	bl	8001854 <HAL_InitTick>

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40023c00 	.word	0x40023c00
 8003328:	40023800 	.word	0x40023800
 800332c:	080063c8 	.word	0x080063c8
 8003330:	2000001c 	.word	0x2000001c
 8003334:	20000020 	.word	0x20000020

08003338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800333c:	4b03      	ldr	r3, [pc, #12]	@ (800334c <HAL_RCC_GetHCLKFreq+0x14>)
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	4618      	mov	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	2000001c 	.word	0x2000001c

08003350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003354:	f7ff fff0 	bl	8003338 <HAL_RCC_GetHCLKFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b05      	ldr	r3, [pc, #20]	@ (8003370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	0a9b      	lsrs	r3, r3, #10
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4903      	ldr	r1, [pc, #12]	@ (8003374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40023800 	.word	0x40023800
 8003374:	080063d8 	.word	0x080063d8

08003378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800337c:	f7ff ffdc 	bl	8003338 <HAL_RCC_GetHCLKFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b05      	ldr	r3, [pc, #20]	@ (8003398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	0b5b      	lsrs	r3, r3, #13
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4903      	ldr	r1, [pc, #12]	@ (800339c <HAL_RCC_GetPCLK2Freq+0x24>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40023800 	.word	0x40023800
 800339c:	080063d8 	.word	0x080063d8

080033a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a4:	b0ae      	sub	sp, #184	@ 0xb8
 80033a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c6:	4bcb      	ldr	r3, [pc, #812]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b0c      	cmp	r3, #12
 80033d0:	f200 8206 	bhi.w	80037e0 <HAL_RCC_GetSysClockFreq+0x440>
 80033d4:	a201      	add	r2, pc, #4	@ (adr r2, 80033dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80033d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033da:	bf00      	nop
 80033dc:	08003411 	.word	0x08003411
 80033e0:	080037e1 	.word	0x080037e1
 80033e4:	080037e1 	.word	0x080037e1
 80033e8:	080037e1 	.word	0x080037e1
 80033ec:	08003419 	.word	0x08003419
 80033f0:	080037e1 	.word	0x080037e1
 80033f4:	080037e1 	.word	0x080037e1
 80033f8:	080037e1 	.word	0x080037e1
 80033fc:	08003421 	.word	0x08003421
 8003400:	080037e1 	.word	0x080037e1
 8003404:	080037e1 	.word	0x080037e1
 8003408:	080037e1 	.word	0x080037e1
 800340c:	08003611 	.word	0x08003611
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003410:	4bb9      	ldr	r3, [pc, #740]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003412:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003416:	e1e7      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003418:	4bb8      	ldr	r3, [pc, #736]	@ (80036fc <HAL_RCC_GetSysClockFreq+0x35c>)
 800341a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800341e:	e1e3      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003420:	4bb4      	ldr	r3, [pc, #720]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003428:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800342c:	4bb1      	ldr	r3, [pc, #708]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d071      	beq.n	800351c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003438:	4bae      	ldr	r3, [pc, #696]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	099b      	lsrs	r3, r3, #6
 800343e:	2200      	movs	r2, #0
 8003440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003444:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003448:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800344c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003450:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003454:	2300      	movs	r3, #0
 8003456:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800345a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800345e:	4622      	mov	r2, r4
 8003460:	462b      	mov	r3, r5
 8003462:	f04f 0000 	mov.w	r0, #0
 8003466:	f04f 0100 	mov.w	r1, #0
 800346a:	0159      	lsls	r1, r3, #5
 800346c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003470:	0150      	lsls	r0, r2, #5
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4621      	mov	r1, r4
 8003478:	1a51      	subs	r1, r2, r1
 800347a:	6439      	str	r1, [r7, #64]	@ 0x40
 800347c:	4629      	mov	r1, r5
 800347e:	eb63 0301 	sbc.w	r3, r3, r1
 8003482:	647b      	str	r3, [r7, #68]	@ 0x44
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003490:	4649      	mov	r1, r9
 8003492:	018b      	lsls	r3, r1, #6
 8003494:	4641      	mov	r1, r8
 8003496:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800349a:	4641      	mov	r1, r8
 800349c:	018a      	lsls	r2, r1, #6
 800349e:	4641      	mov	r1, r8
 80034a0:	1a51      	subs	r1, r2, r1
 80034a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80034a4:	4649      	mov	r1, r9
 80034a6:	eb63 0301 	sbc.w	r3, r3, r1
 80034aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80034b8:	4649      	mov	r1, r9
 80034ba:	00cb      	lsls	r3, r1, #3
 80034bc:	4641      	mov	r1, r8
 80034be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034c2:	4641      	mov	r1, r8
 80034c4:	00ca      	lsls	r2, r1, #3
 80034c6:	4610      	mov	r0, r2
 80034c8:	4619      	mov	r1, r3
 80034ca:	4603      	mov	r3, r0
 80034cc:	4622      	mov	r2, r4
 80034ce:	189b      	adds	r3, r3, r2
 80034d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80034d2:	462b      	mov	r3, r5
 80034d4:	460a      	mov	r2, r1
 80034d6:	eb42 0303 	adc.w	r3, r2, r3
 80034da:	637b      	str	r3, [r7, #52]	@ 0x34
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80034e8:	4629      	mov	r1, r5
 80034ea:	024b      	lsls	r3, r1, #9
 80034ec:	4621      	mov	r1, r4
 80034ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034f2:	4621      	mov	r1, r4
 80034f4:	024a      	lsls	r2, r1, #9
 80034f6:	4610      	mov	r0, r2
 80034f8:	4619      	mov	r1, r3
 80034fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034fe:	2200      	movs	r2, #0
 8003500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003504:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003508:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800350c:	f7fc fe7a 	bl	8000204 <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4613      	mov	r3, r2
 8003516:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800351a:	e067      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800351c:	4b75      	ldr	r3, [pc, #468]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	099b      	lsrs	r3, r3, #6
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003528:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800352c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003534:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003536:	2300      	movs	r3, #0
 8003538:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800353a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800353e:	4622      	mov	r2, r4
 8003540:	462b      	mov	r3, r5
 8003542:	f04f 0000 	mov.w	r0, #0
 8003546:	f04f 0100 	mov.w	r1, #0
 800354a:	0159      	lsls	r1, r3, #5
 800354c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003550:	0150      	lsls	r0, r2, #5
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4621      	mov	r1, r4
 8003558:	1a51      	subs	r1, r2, r1
 800355a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800355c:	4629      	mov	r1, r5
 800355e:	eb63 0301 	sbc.w	r3, r3, r1
 8003562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003570:	4649      	mov	r1, r9
 8003572:	018b      	lsls	r3, r1, #6
 8003574:	4641      	mov	r1, r8
 8003576:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800357a:	4641      	mov	r1, r8
 800357c:	018a      	lsls	r2, r1, #6
 800357e:	4641      	mov	r1, r8
 8003580:	ebb2 0a01 	subs.w	sl, r2, r1
 8003584:	4649      	mov	r1, r9
 8003586:	eb63 0b01 	sbc.w	fp, r3, r1
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003596:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800359a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800359e:	4692      	mov	sl, r2
 80035a0:	469b      	mov	fp, r3
 80035a2:	4623      	mov	r3, r4
 80035a4:	eb1a 0303 	adds.w	r3, sl, r3
 80035a8:	623b      	str	r3, [r7, #32]
 80035aa:	462b      	mov	r3, r5
 80035ac:	eb4b 0303 	adc.w	r3, fp, r3
 80035b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80035be:	4629      	mov	r1, r5
 80035c0:	028b      	lsls	r3, r1, #10
 80035c2:	4621      	mov	r1, r4
 80035c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035c8:	4621      	mov	r1, r4
 80035ca:	028a      	lsls	r2, r1, #10
 80035cc:	4610      	mov	r0, r2
 80035ce:	4619      	mov	r1, r3
 80035d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035d4:	2200      	movs	r2, #0
 80035d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80035d8:	677a      	str	r2, [r7, #116]	@ 0x74
 80035da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80035de:	f7fc fe11 	bl	8000204 <__aeabi_uldivmod>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4613      	mov	r3, r2
 80035e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80035ec:	4b41      	ldr	r3, [pc, #260]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	0c1b      	lsrs	r3, r3, #16
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	3301      	adds	r3, #1
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80035fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003606:	fbb2 f3f3 	udiv	r3, r2, r3
 800360a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800360e:	e0eb      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003610:	4b38      	ldr	r3, [pc, #224]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003618:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800361c:	4b35      	ldr	r3, [pc, #212]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d06b      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003628:	4b32      	ldr	r3, [pc, #200]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	099b      	lsrs	r3, r3, #6
 800362e:	2200      	movs	r2, #0
 8003630:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003632:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003634:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800363a:	663b      	str	r3, [r7, #96]	@ 0x60
 800363c:	2300      	movs	r3, #0
 800363e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003640:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003644:	4622      	mov	r2, r4
 8003646:	462b      	mov	r3, r5
 8003648:	f04f 0000 	mov.w	r0, #0
 800364c:	f04f 0100 	mov.w	r1, #0
 8003650:	0159      	lsls	r1, r3, #5
 8003652:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003656:	0150      	lsls	r0, r2, #5
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4621      	mov	r1, r4
 800365e:	1a51      	subs	r1, r2, r1
 8003660:	61b9      	str	r1, [r7, #24]
 8003662:	4629      	mov	r1, r5
 8003664:	eb63 0301 	sbc.w	r3, r3, r1
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003676:	4659      	mov	r1, fp
 8003678:	018b      	lsls	r3, r1, #6
 800367a:	4651      	mov	r1, sl
 800367c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003680:	4651      	mov	r1, sl
 8003682:	018a      	lsls	r2, r1, #6
 8003684:	4651      	mov	r1, sl
 8003686:	ebb2 0801 	subs.w	r8, r2, r1
 800368a:	4659      	mov	r1, fp
 800368c:	eb63 0901 	sbc.w	r9, r3, r1
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800369c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036a4:	4690      	mov	r8, r2
 80036a6:	4699      	mov	r9, r3
 80036a8:	4623      	mov	r3, r4
 80036aa:	eb18 0303 	adds.w	r3, r8, r3
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	462b      	mov	r3, r5
 80036b2:	eb49 0303 	adc.w	r3, r9, r3
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80036c4:	4629      	mov	r1, r5
 80036c6:	024b      	lsls	r3, r1, #9
 80036c8:	4621      	mov	r1, r4
 80036ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036ce:	4621      	mov	r1, r4
 80036d0:	024a      	lsls	r2, r1, #9
 80036d2:	4610      	mov	r0, r2
 80036d4:	4619      	mov	r1, r3
 80036d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036da:	2200      	movs	r2, #0
 80036dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036de:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80036e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80036e4:	f7fc fd8e 	bl	8000204 <__aeabi_uldivmod>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4613      	mov	r3, r2
 80036ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036f2:	e065      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x420>
 80036f4:	40023800 	.word	0x40023800
 80036f8:	00f42400 	.word	0x00f42400
 80036fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003700:	4b3d      	ldr	r3, [pc, #244]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	099b      	lsrs	r3, r3, #6
 8003706:	2200      	movs	r2, #0
 8003708:	4618      	mov	r0, r3
 800370a:	4611      	mov	r1, r2
 800370c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003710:	653b      	str	r3, [r7, #80]	@ 0x50
 8003712:	2300      	movs	r3, #0
 8003714:	657b      	str	r3, [r7, #84]	@ 0x54
 8003716:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800371a:	4642      	mov	r2, r8
 800371c:	464b      	mov	r3, r9
 800371e:	f04f 0000 	mov.w	r0, #0
 8003722:	f04f 0100 	mov.w	r1, #0
 8003726:	0159      	lsls	r1, r3, #5
 8003728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800372c:	0150      	lsls	r0, r2, #5
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4641      	mov	r1, r8
 8003734:	1a51      	subs	r1, r2, r1
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	4649      	mov	r1, r9
 800373a:	eb63 0301 	sbc.w	r3, r3, r1
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800374c:	4659      	mov	r1, fp
 800374e:	018b      	lsls	r3, r1, #6
 8003750:	4651      	mov	r1, sl
 8003752:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003756:	4651      	mov	r1, sl
 8003758:	018a      	lsls	r2, r1, #6
 800375a:	4651      	mov	r1, sl
 800375c:	1a54      	subs	r4, r2, r1
 800375e:	4659      	mov	r1, fp
 8003760:	eb63 0501 	sbc.w	r5, r3, r1
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	00eb      	lsls	r3, r5, #3
 800376e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003772:	00e2      	lsls	r2, r4, #3
 8003774:	4614      	mov	r4, r2
 8003776:	461d      	mov	r5, r3
 8003778:	4643      	mov	r3, r8
 800377a:	18e3      	adds	r3, r4, r3
 800377c:	603b      	str	r3, [r7, #0]
 800377e:	464b      	mov	r3, r9
 8003780:	eb45 0303 	adc.w	r3, r5, r3
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003792:	4629      	mov	r1, r5
 8003794:	028b      	lsls	r3, r1, #10
 8003796:	4621      	mov	r1, r4
 8003798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800379c:	4621      	mov	r1, r4
 800379e:	028a      	lsls	r2, r1, #10
 80037a0:	4610      	mov	r0, r2
 80037a2:	4619      	mov	r1, r3
 80037a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037a8:	2200      	movs	r2, #0
 80037aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037ac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80037ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037b2:	f7fc fd27 	bl	8000204 <__aeabi_uldivmod>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4613      	mov	r3, r2
 80037bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80037c0:	4b0d      	ldr	r3, [pc, #52]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	0f1b      	lsrs	r3, r3, #28
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80037ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80037d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037de:	e003      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80037e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	37b8      	adds	r7, #184	@ 0xb8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800
 80037fc:	00f42400 	.word	0x00f42400

08003800 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e28d      	b.n	8003d2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 8083 	beq.w	8003926 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003820:	4b94      	ldr	r3, [pc, #592]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 030c 	and.w	r3, r3, #12
 8003828:	2b04      	cmp	r3, #4
 800382a:	d019      	beq.n	8003860 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800382c:	4b91      	ldr	r3, [pc, #580]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 030c 	and.w	r3, r3, #12
        || \
 8003834:	2b08      	cmp	r3, #8
 8003836:	d106      	bne.n	8003846 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003838:	4b8e      	ldr	r3, [pc, #568]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003840:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003844:	d00c      	beq.n	8003860 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003846:	4b8b      	ldr	r3, [pc, #556]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800384e:	2b0c      	cmp	r3, #12
 8003850:	d112      	bne.n	8003878 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003852:	4b88      	ldr	r3, [pc, #544]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800385a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800385e:	d10b      	bne.n	8003878 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003860:	4b84      	ldr	r3, [pc, #528]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d05b      	beq.n	8003924 <HAL_RCC_OscConfig+0x124>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d157      	bne.n	8003924 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e25a      	b.n	8003d2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003880:	d106      	bne.n	8003890 <HAL_RCC_OscConfig+0x90>
 8003882:	4b7c      	ldr	r3, [pc, #496]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a7b      	ldr	r2, [pc, #492]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 8003888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	e01d      	b.n	80038cc <HAL_RCC_OscConfig+0xcc>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003898:	d10c      	bne.n	80038b4 <HAL_RCC_OscConfig+0xb4>
 800389a:	4b76      	ldr	r3, [pc, #472]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a75      	ldr	r2, [pc, #468]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 80038a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	4b73      	ldr	r3, [pc, #460]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a72      	ldr	r2, [pc, #456]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 80038ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	e00b      	b.n	80038cc <HAL_RCC_OscConfig+0xcc>
 80038b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a6e      	ldr	r2, [pc, #440]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 80038ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a6b      	ldr	r2, [pc, #428]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 80038c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d013      	beq.n	80038fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fe f802 	bl	80018dc <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038dc:	f7fd fffe 	bl	80018dc <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b64      	cmp	r3, #100	@ 0x64
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e21f      	b.n	8003d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ee:	4b61      	ldr	r3, [pc, #388]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0xdc>
 80038fa:	e014      	b.n	8003926 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fd ffee 	bl	80018dc <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003904:	f7fd ffea 	bl	80018dc <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b64      	cmp	r3, #100	@ 0x64
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e20b      	b.n	8003d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003916:	4b57      	ldr	r3, [pc, #348]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x104>
 8003922:	e000      	b.n	8003926 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d06f      	beq.n	8003a12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003932:	4b50      	ldr	r3, [pc, #320]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 030c 	and.w	r3, r3, #12
 800393a:	2b00      	cmp	r3, #0
 800393c:	d017      	beq.n	800396e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800393e:	4b4d      	ldr	r3, [pc, #308]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
        || \
 8003946:	2b08      	cmp	r3, #8
 8003948:	d105      	bne.n	8003956 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800394a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00b      	beq.n	800396e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003956:	4b47      	ldr	r3, [pc, #284]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800395e:	2b0c      	cmp	r3, #12
 8003960:	d11c      	bne.n	800399c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003962:	4b44      	ldr	r3, [pc, #272]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d116      	bne.n	800399c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396e:	4b41      	ldr	r3, [pc, #260]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <HAL_RCC_OscConfig+0x186>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d001      	beq.n	8003986 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e1d3      	b.n	8003d2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003986:	4b3b      	ldr	r3, [pc, #236]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4937      	ldr	r1, [pc, #220]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399a:	e03a      	b.n	8003a12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d020      	beq.n	80039e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a4:	4b34      	ldr	r3, [pc, #208]	@ (8003a78 <HAL_RCC_OscConfig+0x278>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039aa:	f7fd ff97 	bl	80018dc <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b2:	f7fd ff93 	bl	80018dc <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e1b4      	b.n	8003d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d0:	4b28      	ldr	r3, [pc, #160]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4925      	ldr	r1, [pc, #148]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	600b      	str	r3, [r1, #0]
 80039e4:	e015      	b.n	8003a12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e6:	4b24      	ldr	r3, [pc, #144]	@ (8003a78 <HAL_RCC_OscConfig+0x278>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ec:	f7fd ff76 	bl	80018dc <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f4:	f7fd ff72 	bl	80018dc <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e193      	b.n	8003d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a06:	4b1b      	ldr	r3, [pc, #108]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d036      	beq.n	8003a8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d016      	beq.n	8003a54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a26:	4b15      	ldr	r3, [pc, #84]	@ (8003a7c <HAL_RCC_OscConfig+0x27c>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2c:	f7fd ff56 	bl	80018dc <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a34:	f7fd ff52 	bl	80018dc <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e173      	b.n	8003d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a46:	4b0b      	ldr	r3, [pc, #44]	@ (8003a74 <HAL_RCC_OscConfig+0x274>)
 8003a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x234>
 8003a52:	e01b      	b.n	8003a8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a54:	4b09      	ldr	r3, [pc, #36]	@ (8003a7c <HAL_RCC_OscConfig+0x27c>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5a:	f7fd ff3f 	bl	80018dc <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a60:	e00e      	b.n	8003a80 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a62:	f7fd ff3b 	bl	80018dc <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d907      	bls.n	8003a80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e15c      	b.n	8003d2e <HAL_RCC_OscConfig+0x52e>
 8003a74:	40023800 	.word	0x40023800
 8003a78:	42470000 	.word	0x42470000
 8003a7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a80:	4b8a      	ldr	r3, [pc, #552]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1ea      	bne.n	8003a62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8097 	beq.w	8003bc8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9e:	4b83      	ldr	r3, [pc, #524]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10f      	bne.n	8003aca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	4b7f      	ldr	r3, [pc, #508]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	4a7e      	ldr	r2, [pc, #504]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aba:	4b7c      	ldr	r3, [pc, #496]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aca:	4b79      	ldr	r3, [pc, #484]	@ (8003cb0 <HAL_RCC_OscConfig+0x4b0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d118      	bne.n	8003b08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad6:	4b76      	ldr	r3, [pc, #472]	@ (8003cb0 <HAL_RCC_OscConfig+0x4b0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a75      	ldr	r2, [pc, #468]	@ (8003cb0 <HAL_RCC_OscConfig+0x4b0>)
 8003adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae2:	f7fd fefb 	bl	80018dc <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aea:	f7fd fef7 	bl	80018dc <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e118      	b.n	8003d2e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afc:	4b6c      	ldr	r3, [pc, #432]	@ (8003cb0 <HAL_RCC_OscConfig+0x4b0>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d106      	bne.n	8003b1e <HAL_RCC_OscConfig+0x31e>
 8003b10:	4b66      	ldr	r3, [pc, #408]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b14:	4a65      	ldr	r2, [pc, #404]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b1c:	e01c      	b.n	8003b58 <HAL_RCC_OscConfig+0x358>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b05      	cmp	r3, #5
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x340>
 8003b26:	4b61      	ldr	r3, [pc, #388]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	4a60      	ldr	r2, [pc, #384]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003b2c:	f043 0304 	orr.w	r3, r3, #4
 8003b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b32:	4b5e      	ldr	r3, [pc, #376]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b36:	4a5d      	ldr	r2, [pc, #372]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b3e:	e00b      	b.n	8003b58 <HAL_RCC_OscConfig+0x358>
 8003b40:	4b5a      	ldr	r3, [pc, #360]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b44:	4a59      	ldr	r2, [pc, #356]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b4c:	4b57      	ldr	r3, [pc, #348]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b50:	4a56      	ldr	r2, [pc, #344]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003b52:	f023 0304 	bic.w	r3, r3, #4
 8003b56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d015      	beq.n	8003b8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b60:	f7fd febc 	bl	80018dc <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b68:	f7fd feb8 	bl	80018dc <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e0d7      	b.n	8003d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7e:	4b4b      	ldr	r3, [pc, #300]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0ee      	beq.n	8003b68 <HAL_RCC_OscConfig+0x368>
 8003b8a:	e014      	b.n	8003bb6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8c:	f7fd fea6 	bl	80018dc <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b92:	e00a      	b.n	8003baa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b94:	f7fd fea2 	bl	80018dc <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e0c1      	b.n	8003d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003baa:	4b40      	ldr	r3, [pc, #256]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1ee      	bne.n	8003b94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bb6:	7dfb      	ldrb	r3, [r7, #23]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d105      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc0:	4a3a      	ldr	r2, [pc, #232]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 80ad 	beq.w	8003d2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bd2:	4b36      	ldr	r3, [pc, #216]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d060      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d145      	bne.n	8003c72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be6:	4b33      	ldr	r3, [pc, #204]	@ (8003cb4 <HAL_RCC_OscConfig+0x4b4>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7fd fe76 	bl	80018dc <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf4:	f7fd fe72 	bl	80018dc <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e093      	b.n	8003d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c06:	4b29      	ldr	r3, [pc, #164]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69da      	ldr	r2, [r3, #28]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	019b      	lsls	r3, r3, #6
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c34:	061b      	lsls	r3, r3, #24
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3c:	071b      	lsls	r3, r3, #28
 8003c3e:	491b      	ldr	r1, [pc, #108]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c44:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb4 <HAL_RCC_OscConfig+0x4b4>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4a:	f7fd fe47 	bl	80018dc <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c52:	f7fd fe43 	bl	80018dc <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e064      	b.n	8003d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c64:	4b11      	ldr	r3, [pc, #68]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x452>
 8003c70:	e05c      	b.n	8003d2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c72:	4b10      	ldr	r3, [pc, #64]	@ (8003cb4 <HAL_RCC_OscConfig+0x4b4>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fd fe30 	bl	80018dc <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c80:	f7fd fe2c 	bl	80018dc <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e04d      	b.n	8003d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c92:	4b06      	ldr	r3, [pc, #24]	@ (8003cac <HAL_RCC_OscConfig+0x4ac>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x480>
 8003c9e:	e045      	b.n	8003d2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d107      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e040      	b.n	8003d2e <HAL_RCC_OscConfig+0x52e>
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	40007000 	.word	0x40007000
 8003cb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8003d38 <HAL_RCC_OscConfig+0x538>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d030      	beq.n	8003d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d129      	bne.n	8003d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d122      	bne.n	8003d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ce8:	4013      	ands	r3, r2
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d119      	bne.n	8003d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfe:	085b      	lsrs	r3, r3, #1
 8003d00:	3b01      	subs	r3, #1
 8003d02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d10f      	bne.n	8003d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d107      	bne.n	8003d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40023800 	.word	0x40023800

08003d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e041      	b.n	8003dd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fd fc6a 	bl	800163c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	f000 f95e 	bl	800403c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d001      	beq.n	8003df4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e046      	b.n	8003e82 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a23      	ldr	r2, [pc, #140]	@ (8003e90 <HAL_TIM_Base_Start+0xb4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d022      	beq.n	8003e4c <HAL_TIM_Base_Start+0x70>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e0e:	d01d      	beq.n	8003e4c <HAL_TIM_Base_Start+0x70>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1f      	ldr	r2, [pc, #124]	@ (8003e94 <HAL_TIM_Base_Start+0xb8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d018      	beq.n	8003e4c <HAL_TIM_Base_Start+0x70>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8003e98 <HAL_TIM_Base_Start+0xbc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d013      	beq.n	8003e4c <HAL_TIM_Base_Start+0x70>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1c      	ldr	r2, [pc, #112]	@ (8003e9c <HAL_TIM_Base_Start+0xc0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00e      	beq.n	8003e4c <HAL_TIM_Base_Start+0x70>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1b      	ldr	r2, [pc, #108]	@ (8003ea0 <HAL_TIM_Base_Start+0xc4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d009      	beq.n	8003e4c <HAL_TIM_Base_Start+0x70>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a19      	ldr	r2, [pc, #100]	@ (8003ea4 <HAL_TIM_Base_Start+0xc8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d004      	beq.n	8003e4c <HAL_TIM_Base_Start+0x70>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a18      	ldr	r2, [pc, #96]	@ (8003ea8 <HAL_TIM_Base_Start+0xcc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d111      	bne.n	8003e70 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b06      	cmp	r3, #6
 8003e5c:	d010      	beq.n	8003e80 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0201 	orr.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6e:	e007      	b.n	8003e80 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40010000 	.word	0x40010000
 8003e94:	40000400 	.word	0x40000400
 8003e98:	40000800 	.word	0x40000800
 8003e9c:	40000c00 	.word	0x40000c00
 8003ea0:	40010400 	.word	0x40010400
 8003ea4:	40014000 	.word	0x40014000
 8003ea8:	40001800 	.word	0x40001800

08003eac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e0b4      	b.n	8004032 <HAL_TIM_ConfigClockSource+0x186>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003eee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f00:	d03e      	beq.n	8003f80 <HAL_TIM_ConfigClockSource+0xd4>
 8003f02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f06:	f200 8087 	bhi.w	8004018 <HAL_TIM_ConfigClockSource+0x16c>
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f0e:	f000 8086 	beq.w	800401e <HAL_TIM_ConfigClockSource+0x172>
 8003f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f16:	d87f      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x16c>
 8003f18:	2b70      	cmp	r3, #112	@ 0x70
 8003f1a:	d01a      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0xa6>
 8003f1c:	2b70      	cmp	r3, #112	@ 0x70
 8003f1e:	d87b      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x16c>
 8003f20:	2b60      	cmp	r3, #96	@ 0x60
 8003f22:	d050      	beq.n	8003fc6 <HAL_TIM_ConfigClockSource+0x11a>
 8003f24:	2b60      	cmp	r3, #96	@ 0x60
 8003f26:	d877      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x16c>
 8003f28:	2b50      	cmp	r3, #80	@ 0x50
 8003f2a:	d03c      	beq.n	8003fa6 <HAL_TIM_ConfigClockSource+0xfa>
 8003f2c:	2b50      	cmp	r3, #80	@ 0x50
 8003f2e:	d873      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x16c>
 8003f30:	2b40      	cmp	r3, #64	@ 0x40
 8003f32:	d058      	beq.n	8003fe6 <HAL_TIM_ConfigClockSource+0x13a>
 8003f34:	2b40      	cmp	r3, #64	@ 0x40
 8003f36:	d86f      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x16c>
 8003f38:	2b30      	cmp	r3, #48	@ 0x30
 8003f3a:	d064      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x15a>
 8003f3c:	2b30      	cmp	r3, #48	@ 0x30
 8003f3e:	d86b      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x16c>
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d060      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x15a>
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	d867      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x16c>
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d05c      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x15a>
 8003f4c:	2b10      	cmp	r3, #16
 8003f4e:	d05a      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x15a>
 8003f50:	e062      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f62:	f000 f991 	bl	8004288 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	609a      	str	r2, [r3, #8]
      break;
 8003f7e:	e04f      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f90:	f000 f97a 	bl	8004288 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fa2:	609a      	str	r2, [r3, #8]
      break;
 8003fa4:	e03c      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f000 f8ee 	bl	8004194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2150      	movs	r1, #80	@ 0x50
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 f947 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 8003fc4:	e02c      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f000 f90d 	bl	80041f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2160      	movs	r1, #96	@ 0x60
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 f937 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 8003fe4:	e01c      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f000 f8ce 	bl	8004194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2140      	movs	r1, #64	@ 0x40
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 f927 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 8004004:	e00c      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4619      	mov	r1, r3
 8004010:	4610      	mov	r0, r2
 8004012:	f000 f91e 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 8004016:	e003      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	73fb      	strb	r3, [r7, #15]
      break;
 800401c:	e000      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800401e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004030:	7bfb      	ldrb	r3, [r7, #15]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a46      	ldr	r2, [pc, #280]	@ (8004168 <TIM_Base_SetConfig+0x12c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d013      	beq.n	800407c <TIM_Base_SetConfig+0x40>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800405a:	d00f      	beq.n	800407c <TIM_Base_SetConfig+0x40>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a43      	ldr	r2, [pc, #268]	@ (800416c <TIM_Base_SetConfig+0x130>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00b      	beq.n	800407c <TIM_Base_SetConfig+0x40>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a42      	ldr	r2, [pc, #264]	@ (8004170 <TIM_Base_SetConfig+0x134>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d007      	beq.n	800407c <TIM_Base_SetConfig+0x40>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a41      	ldr	r2, [pc, #260]	@ (8004174 <TIM_Base_SetConfig+0x138>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d003      	beq.n	800407c <TIM_Base_SetConfig+0x40>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a40      	ldr	r2, [pc, #256]	@ (8004178 <TIM_Base_SetConfig+0x13c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d108      	bne.n	800408e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a35      	ldr	r2, [pc, #212]	@ (8004168 <TIM_Base_SetConfig+0x12c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d02b      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800409c:	d027      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a32      	ldr	r2, [pc, #200]	@ (800416c <TIM_Base_SetConfig+0x130>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d023      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a31      	ldr	r2, [pc, #196]	@ (8004170 <TIM_Base_SetConfig+0x134>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d01f      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a30      	ldr	r2, [pc, #192]	@ (8004174 <TIM_Base_SetConfig+0x138>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d01b      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a2f      	ldr	r2, [pc, #188]	@ (8004178 <TIM_Base_SetConfig+0x13c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d017      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a2e      	ldr	r2, [pc, #184]	@ (800417c <TIM_Base_SetConfig+0x140>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004180 <TIM_Base_SetConfig+0x144>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00f      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004184 <TIM_Base_SetConfig+0x148>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00b      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004188 <TIM_Base_SetConfig+0x14c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d007      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a2a      	ldr	r2, [pc, #168]	@ (800418c <TIM_Base_SetConfig+0x150>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d003      	beq.n	80040ee <TIM_Base_SetConfig+0xb2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a29      	ldr	r2, [pc, #164]	@ (8004190 <TIM_Base_SetConfig+0x154>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d108      	bne.n	8004100 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a10      	ldr	r2, [pc, #64]	@ (8004168 <TIM_Base_SetConfig+0x12c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d003      	beq.n	8004134 <TIM_Base_SetConfig+0xf8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a12      	ldr	r2, [pc, #72]	@ (8004178 <TIM_Base_SetConfig+0x13c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d103      	bne.n	800413c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b01      	cmp	r3, #1
 800414c:	d105      	bne.n	800415a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	f023 0201 	bic.w	r2, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	611a      	str	r2, [r3, #16]
  }
}
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40010000 	.word	0x40010000
 800416c:	40000400 	.word	0x40000400
 8004170:	40000800 	.word	0x40000800
 8004174:	40000c00 	.word	0x40000c00
 8004178:	40010400 	.word	0x40010400
 800417c:	40014000 	.word	0x40014000
 8004180:	40014400 	.word	0x40014400
 8004184:	40014800 	.word	0x40014800
 8004188:	40001800 	.word	0x40001800
 800418c:	40001c00 	.word	0x40001c00
 8004190:	40002000 	.word	0x40002000

08004194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	f023 0201 	bic.w	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f023 030a 	bic.w	r3, r3, #10
 80041d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	621a      	str	r2, [r3, #32]
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b087      	sub	sp, #28
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	f023 0210 	bic.w	r2, r3, #16
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800421c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	031b      	lsls	r3, r3, #12
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800422e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	621a      	str	r2, [r3, #32]
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004252:	b480      	push	{r7}
 8004254:	b085      	sub	sp, #20
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	f043 0307 	orr.w	r3, r3, #7
 8004274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	609a      	str	r2, [r3, #8]
}
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	021a      	lsls	r2, r3, #8
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	609a      	str	r2, [r3, #8]
}
 80042bc:	bf00      	nop
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042dc:	2302      	movs	r3, #2
 80042de:	e05a      	b.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004306:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a21      	ldr	r2, [pc, #132]	@ (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d022      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800432c:	d01d      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1d      	ldr	r2, [pc, #116]	@ (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d018      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1b      	ldr	r2, [pc, #108]	@ (80043ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d013      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1a      	ldr	r2, [pc, #104]	@ (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00e      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a18      	ldr	r2, [pc, #96]	@ (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d009      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a17      	ldr	r2, [pc, #92]	@ (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d004      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a15      	ldr	r2, [pc, #84]	@ (80043bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d10c      	bne.n	8004384 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004370:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	4313      	orrs	r3, r2
 800437a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40010000 	.word	0x40010000
 80043a8:	40000400 	.word	0x40000400
 80043ac:	40000800 	.word	0x40000800
 80043b0:	40000c00 	.word	0x40000c00
 80043b4:	40010400 	.word	0x40010400
 80043b8:	40014000 	.word	0x40014000
 80043bc:	40001800 	.word	0x40001800

080043c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e042      	b.n	8004458 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fd f94a 	bl	8001680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2224      	movs	r2, #36	@ 0x24
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f82b 	bl	8004460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695a      	ldr	r2, [r3, #20]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004464:	b0c0      	sub	sp, #256	@ 0x100
 8004466:	af00      	add	r7, sp, #0
 8004468:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447c:	68d9      	ldr	r1, [r3, #12]
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	ea40 0301 	orr.w	r3, r0, r1
 8004488:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800448a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	431a      	orrs	r2, r3
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	431a      	orrs	r2, r3
 80044a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80044b8:	f021 010c 	bic.w	r1, r1, #12
 80044bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80044c6:	430b      	orrs	r3, r1
 80044c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80044d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044da:	6999      	ldr	r1, [r3, #24]
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	ea40 0301 	orr.w	r3, r0, r1
 80044e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	4b8f      	ldr	r3, [pc, #572]	@ (800472c <UART_SetConfig+0x2cc>)
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d005      	beq.n	8004500 <UART_SetConfig+0xa0>
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	4b8d      	ldr	r3, [pc, #564]	@ (8004730 <UART_SetConfig+0x2d0>)
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d104      	bne.n	800450a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004500:	f7fe ff3a 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 8004504:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004508:	e003      	b.n	8004512 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800450a:	f7fe ff21 	bl	8003350 <HAL_RCC_GetPCLK1Freq>
 800450e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800451c:	f040 810c 	bne.w	8004738 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004524:	2200      	movs	r2, #0
 8004526:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800452a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800452e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004532:	4622      	mov	r2, r4
 8004534:	462b      	mov	r3, r5
 8004536:	1891      	adds	r1, r2, r2
 8004538:	65b9      	str	r1, [r7, #88]	@ 0x58
 800453a:	415b      	adcs	r3, r3
 800453c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800453e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004542:	4621      	mov	r1, r4
 8004544:	eb12 0801 	adds.w	r8, r2, r1
 8004548:	4629      	mov	r1, r5
 800454a:	eb43 0901 	adc.w	r9, r3, r1
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800455a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800455e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004562:	4690      	mov	r8, r2
 8004564:	4699      	mov	r9, r3
 8004566:	4623      	mov	r3, r4
 8004568:	eb18 0303 	adds.w	r3, r8, r3
 800456c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004570:	462b      	mov	r3, r5
 8004572:	eb49 0303 	adc.w	r3, r9, r3
 8004576:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800457a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004586:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800458a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800458e:	460b      	mov	r3, r1
 8004590:	18db      	adds	r3, r3, r3
 8004592:	653b      	str	r3, [r7, #80]	@ 0x50
 8004594:	4613      	mov	r3, r2
 8004596:	eb42 0303 	adc.w	r3, r2, r3
 800459a:	657b      	str	r3, [r7, #84]	@ 0x54
 800459c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80045a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80045a4:	f7fb fe2e 	bl	8000204 <__aeabi_uldivmod>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4b61      	ldr	r3, [pc, #388]	@ (8004734 <UART_SetConfig+0x2d4>)
 80045ae:	fba3 2302 	umull	r2, r3, r3, r2
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	011c      	lsls	r4, r3, #4
 80045b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80045c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80045c8:	4642      	mov	r2, r8
 80045ca:	464b      	mov	r3, r9
 80045cc:	1891      	adds	r1, r2, r2
 80045ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80045d0:	415b      	adcs	r3, r3
 80045d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80045d8:	4641      	mov	r1, r8
 80045da:	eb12 0a01 	adds.w	sl, r2, r1
 80045de:	4649      	mov	r1, r9
 80045e0:	eb43 0b01 	adc.w	fp, r3, r1
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045f8:	4692      	mov	sl, r2
 80045fa:	469b      	mov	fp, r3
 80045fc:	4643      	mov	r3, r8
 80045fe:	eb1a 0303 	adds.w	r3, sl, r3
 8004602:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004606:	464b      	mov	r3, r9
 8004608:	eb4b 0303 	adc.w	r3, fp, r3
 800460c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800461c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004620:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004624:	460b      	mov	r3, r1
 8004626:	18db      	adds	r3, r3, r3
 8004628:	643b      	str	r3, [r7, #64]	@ 0x40
 800462a:	4613      	mov	r3, r2
 800462c:	eb42 0303 	adc.w	r3, r2, r3
 8004630:	647b      	str	r3, [r7, #68]	@ 0x44
 8004632:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004636:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800463a:	f7fb fde3 	bl	8000204 <__aeabi_uldivmod>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4611      	mov	r1, r2
 8004644:	4b3b      	ldr	r3, [pc, #236]	@ (8004734 <UART_SetConfig+0x2d4>)
 8004646:	fba3 2301 	umull	r2, r3, r3, r1
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	2264      	movs	r2, #100	@ 0x64
 800464e:	fb02 f303 	mul.w	r3, r2, r3
 8004652:	1acb      	subs	r3, r1, r3
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800465a:	4b36      	ldr	r3, [pc, #216]	@ (8004734 <UART_SetConfig+0x2d4>)
 800465c:	fba3 2302 	umull	r2, r3, r3, r2
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004668:	441c      	add	r4, r3
 800466a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800466e:	2200      	movs	r2, #0
 8004670:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004674:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004678:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800467c:	4642      	mov	r2, r8
 800467e:	464b      	mov	r3, r9
 8004680:	1891      	adds	r1, r2, r2
 8004682:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004684:	415b      	adcs	r3, r3
 8004686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004688:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800468c:	4641      	mov	r1, r8
 800468e:	1851      	adds	r1, r2, r1
 8004690:	6339      	str	r1, [r7, #48]	@ 0x30
 8004692:	4649      	mov	r1, r9
 8004694:	414b      	adcs	r3, r1
 8004696:	637b      	str	r3, [r7, #52]	@ 0x34
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80046a4:	4659      	mov	r1, fp
 80046a6:	00cb      	lsls	r3, r1, #3
 80046a8:	4651      	mov	r1, sl
 80046aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ae:	4651      	mov	r1, sl
 80046b0:	00ca      	lsls	r2, r1, #3
 80046b2:	4610      	mov	r0, r2
 80046b4:	4619      	mov	r1, r3
 80046b6:	4603      	mov	r3, r0
 80046b8:	4642      	mov	r2, r8
 80046ba:	189b      	adds	r3, r3, r2
 80046bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046c0:	464b      	mov	r3, r9
 80046c2:	460a      	mov	r2, r1
 80046c4:	eb42 0303 	adc.w	r3, r2, r3
 80046c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80046d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80046dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80046e0:	460b      	mov	r3, r1
 80046e2:	18db      	adds	r3, r3, r3
 80046e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046e6:	4613      	mov	r3, r2
 80046e8:	eb42 0303 	adc.w	r3, r2, r3
 80046ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80046f6:	f7fb fd85 	bl	8000204 <__aeabi_uldivmod>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004734 <UART_SetConfig+0x2d4>)
 8004700:	fba3 1302 	umull	r1, r3, r3, r2
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	2164      	movs	r1, #100	@ 0x64
 8004708:	fb01 f303 	mul.w	r3, r1, r3
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	3332      	adds	r3, #50	@ 0x32
 8004712:	4a08      	ldr	r2, [pc, #32]	@ (8004734 <UART_SetConfig+0x2d4>)
 8004714:	fba2 2303 	umull	r2, r3, r2, r3
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	f003 0207 	and.w	r2, r3, #7
 800471e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4422      	add	r2, r4
 8004726:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004728:	e106      	b.n	8004938 <UART_SetConfig+0x4d8>
 800472a:	bf00      	nop
 800472c:	40011000 	.word	0x40011000
 8004730:	40011400 	.word	0x40011400
 8004734:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800473c:	2200      	movs	r2, #0
 800473e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004742:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004746:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800474a:	4642      	mov	r2, r8
 800474c:	464b      	mov	r3, r9
 800474e:	1891      	adds	r1, r2, r2
 8004750:	6239      	str	r1, [r7, #32]
 8004752:	415b      	adcs	r3, r3
 8004754:	627b      	str	r3, [r7, #36]	@ 0x24
 8004756:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800475a:	4641      	mov	r1, r8
 800475c:	1854      	adds	r4, r2, r1
 800475e:	4649      	mov	r1, r9
 8004760:	eb43 0501 	adc.w	r5, r3, r1
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	00eb      	lsls	r3, r5, #3
 800476e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004772:	00e2      	lsls	r2, r4, #3
 8004774:	4614      	mov	r4, r2
 8004776:	461d      	mov	r5, r3
 8004778:	4643      	mov	r3, r8
 800477a:	18e3      	adds	r3, r4, r3
 800477c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004780:	464b      	mov	r3, r9
 8004782:	eb45 0303 	adc.w	r3, r5, r3
 8004786:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800478a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004796:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80047a6:	4629      	mov	r1, r5
 80047a8:	008b      	lsls	r3, r1, #2
 80047aa:	4621      	mov	r1, r4
 80047ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047b0:	4621      	mov	r1, r4
 80047b2:	008a      	lsls	r2, r1, #2
 80047b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80047b8:	f7fb fd24 	bl	8000204 <__aeabi_uldivmod>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4b60      	ldr	r3, [pc, #384]	@ (8004944 <UART_SetConfig+0x4e4>)
 80047c2:	fba3 2302 	umull	r2, r3, r3, r2
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	011c      	lsls	r4, r3, #4
 80047ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047ce:	2200      	movs	r2, #0
 80047d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80047d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80047dc:	4642      	mov	r2, r8
 80047de:	464b      	mov	r3, r9
 80047e0:	1891      	adds	r1, r2, r2
 80047e2:	61b9      	str	r1, [r7, #24]
 80047e4:	415b      	adcs	r3, r3
 80047e6:	61fb      	str	r3, [r7, #28]
 80047e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047ec:	4641      	mov	r1, r8
 80047ee:	1851      	adds	r1, r2, r1
 80047f0:	6139      	str	r1, [r7, #16]
 80047f2:	4649      	mov	r1, r9
 80047f4:	414b      	adcs	r3, r1
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004804:	4659      	mov	r1, fp
 8004806:	00cb      	lsls	r3, r1, #3
 8004808:	4651      	mov	r1, sl
 800480a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800480e:	4651      	mov	r1, sl
 8004810:	00ca      	lsls	r2, r1, #3
 8004812:	4610      	mov	r0, r2
 8004814:	4619      	mov	r1, r3
 8004816:	4603      	mov	r3, r0
 8004818:	4642      	mov	r2, r8
 800481a:	189b      	adds	r3, r3, r2
 800481c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004820:	464b      	mov	r3, r9
 8004822:	460a      	mov	r2, r1
 8004824:	eb42 0303 	adc.w	r3, r2, r3
 8004828:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800482c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004836:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004844:	4649      	mov	r1, r9
 8004846:	008b      	lsls	r3, r1, #2
 8004848:	4641      	mov	r1, r8
 800484a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800484e:	4641      	mov	r1, r8
 8004850:	008a      	lsls	r2, r1, #2
 8004852:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004856:	f7fb fcd5 	bl	8000204 <__aeabi_uldivmod>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4611      	mov	r1, r2
 8004860:	4b38      	ldr	r3, [pc, #224]	@ (8004944 <UART_SetConfig+0x4e4>)
 8004862:	fba3 2301 	umull	r2, r3, r3, r1
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	2264      	movs	r2, #100	@ 0x64
 800486a:	fb02 f303 	mul.w	r3, r2, r3
 800486e:	1acb      	subs	r3, r1, r3
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	3332      	adds	r3, #50	@ 0x32
 8004874:	4a33      	ldr	r2, [pc, #204]	@ (8004944 <UART_SetConfig+0x4e4>)
 8004876:	fba2 2303 	umull	r2, r3, r2, r3
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004880:	441c      	add	r4, r3
 8004882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004886:	2200      	movs	r2, #0
 8004888:	673b      	str	r3, [r7, #112]	@ 0x70
 800488a:	677a      	str	r2, [r7, #116]	@ 0x74
 800488c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004890:	4642      	mov	r2, r8
 8004892:	464b      	mov	r3, r9
 8004894:	1891      	adds	r1, r2, r2
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	415b      	adcs	r3, r3
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048a0:	4641      	mov	r1, r8
 80048a2:	1851      	adds	r1, r2, r1
 80048a4:	6039      	str	r1, [r7, #0]
 80048a6:	4649      	mov	r1, r9
 80048a8:	414b      	adcs	r3, r1
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048b8:	4659      	mov	r1, fp
 80048ba:	00cb      	lsls	r3, r1, #3
 80048bc:	4651      	mov	r1, sl
 80048be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048c2:	4651      	mov	r1, sl
 80048c4:	00ca      	lsls	r2, r1, #3
 80048c6:	4610      	mov	r0, r2
 80048c8:	4619      	mov	r1, r3
 80048ca:	4603      	mov	r3, r0
 80048cc:	4642      	mov	r2, r8
 80048ce:	189b      	adds	r3, r3, r2
 80048d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048d2:	464b      	mov	r3, r9
 80048d4:	460a      	mov	r2, r1
 80048d6:	eb42 0303 	adc.w	r3, r2, r3
 80048da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80048e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80048f4:	4649      	mov	r1, r9
 80048f6:	008b      	lsls	r3, r1, #2
 80048f8:	4641      	mov	r1, r8
 80048fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048fe:	4641      	mov	r1, r8
 8004900:	008a      	lsls	r2, r1, #2
 8004902:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004906:	f7fb fc7d 	bl	8000204 <__aeabi_uldivmod>
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	4b0d      	ldr	r3, [pc, #52]	@ (8004944 <UART_SetConfig+0x4e4>)
 8004910:	fba3 1302 	umull	r1, r3, r3, r2
 8004914:	095b      	lsrs	r3, r3, #5
 8004916:	2164      	movs	r1, #100	@ 0x64
 8004918:	fb01 f303 	mul.w	r3, r1, r3
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	3332      	adds	r3, #50	@ 0x32
 8004922:	4a08      	ldr	r2, [pc, #32]	@ (8004944 <UART_SetConfig+0x4e4>)
 8004924:	fba2 2303 	umull	r2, r3, r2, r3
 8004928:	095b      	lsrs	r3, r3, #5
 800492a:	f003 020f 	and.w	r2, r3, #15
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4422      	add	r2, r4
 8004936:	609a      	str	r2, [r3, #8]
}
 8004938:	bf00      	nop
 800493a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800493e:	46bd      	mov	sp, r7
 8004940:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004944:	51eb851f 	.word	0x51eb851f

08004948 <arm_q31_to_float>:
 8004948:	b470      	push	{r4, r5, r6}
 800494a:	0896      	lsrs	r6, r2, #2
 800494c:	d02f      	beq.n	80049ae <arm_q31_to_float+0x66>
 800494e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80049f4 <arm_q31_to_float+0xac>
 8004952:	f100 0410 	add.w	r4, r0, #16
 8004956:	f101 0310 	add.w	r3, r1, #16
 800495a:	4635      	mov	r5, r6
 800495c:	ed54 7a04 	vldr	s15, [r4, #-16]
 8004960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004964:	3d01      	subs	r5, #1
 8004966:	ee67 7a87 	vmul.f32	s15, s15, s14
 800496a:	f104 0410 	add.w	r4, r4, #16
 800496e:	ed43 7a04 	vstr	s15, [r3, #-16]
 8004972:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8004976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800497a:	f103 0310 	add.w	r3, r3, #16
 800497e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004982:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
 8004986:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800498a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800498e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004992:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 8004996:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800499a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800499e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049a2:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 80049a6:	d1d9      	bne.n	800495c <arm_q31_to_float+0x14>
 80049a8:	0136      	lsls	r6, r6, #4
 80049aa:	4431      	add	r1, r6
 80049ac:	4430      	add	r0, r6
 80049ae:	f012 0203 	ands.w	r2, r2, #3
 80049b2:	d01d      	beq.n	80049f0 <arm_q31_to_float+0xa8>
 80049b4:	edd0 7a00 	vldr	s15, [r0]
 80049b8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80049f4 <arm_q31_to_float+0xac>
 80049bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049c0:	3a01      	subs	r2, #1
 80049c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049c6:	edc1 7a00 	vstr	s15, [r1]
 80049ca:	d011      	beq.n	80049f0 <arm_q31_to_float+0xa8>
 80049cc:	edd0 7a01 	vldr	s15, [r0, #4]
 80049d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049d4:	2a01      	cmp	r2, #1
 80049d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049da:	edc1 7a01 	vstr	s15, [r1, #4]
 80049de:	d007      	beq.n	80049f0 <arm_q31_to_float+0xa8>
 80049e0:	edd0 7a02 	vldr	s15, [r0, #8]
 80049e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049ec:	edc1 7a02 	vstr	s15, [r1, #8]
 80049f0:	bc70      	pop	{r4, r5, r6}
 80049f2:	4770      	bx	lr
 80049f4:	30000000 	.word	0x30000000

080049f8 <arm_float_to_q31>:
 80049f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049fc:	ea5f 0992 	movs.w	r9, r2, lsr #2
 8004a00:	ed2d 8b04 	vpush	{d8-d9}
 8004a04:	4690      	mov	r8, r2
 8004a06:	4683      	mov	fp, r0
 8004a08:	468a      	mov	sl, r1
 8004a0a:	d07e      	beq.n	8004b0a <arm_float_to_q31+0x112>
 8004a0c:	ed9f 9a7a 	vldr	s18, [pc, #488]	@ 8004bf8 <arm_float_to_q31+0x200>
 8004a10:	f100 0410 	add.w	r4, r0, #16
 8004a14:	f101 0510 	add.w	r5, r1, #16
 8004a18:	464e      	mov	r6, r9
 8004a1a:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 8004a1e:	eebe 8a00 	vmov.f32	s16, #224	@ 0xbf000000 -0.5
 8004a22:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8004a26:	ed54 7a04 	vldr	s15, [r4, #-16]
 8004a2a:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004a2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a36:	bfd4      	ite	le
 8004a38:	eeb0 7a48 	vmovle.f32	s14, s16
 8004a3c:	eeb0 7a68 	vmovgt.f32	s14, s17
 8004a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a44:	ee17 0a90 	vmov	r0, s15
 8004a48:	f7fb fbf4 	bl	8000234 <__aeabi_f2lz>
 8004a4c:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8004a50:	bf18      	it	ne
 8004a52:	ea87 70e1 	eorne.w	r0, r7, r1, asr #31
 8004a56:	f845 0c10 	str.w	r0, [r5, #-16]
 8004a5a:	ed54 7a03 	vldr	s15, [r4, #-12]
 8004a5e:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004a62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6a:	bfd4      	ite	le
 8004a6c:	eeb0 7a48 	vmovle.f32	s14, s16
 8004a70:	eeb0 7a68 	vmovgt.f32	s14, s17
 8004a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a78:	ee17 0a90 	vmov	r0, s15
 8004a7c:	f7fb fbda 	bl	8000234 <__aeabi_f2lz>
 8004a80:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8004a84:	bf18      	it	ne
 8004a86:	ea87 70e1 	eorne.w	r0, r7, r1, asr #31
 8004a8a:	f845 0c0c 	str.w	r0, [r5, #-12]
 8004a8e:	ed54 7a02 	vldr	s15, [r4, #-8]
 8004a92:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004a96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a9e:	bfd4      	ite	le
 8004aa0:	eeb0 7a48 	vmovle.f32	s14, s16
 8004aa4:	eeb0 7a68 	vmovgt.f32	s14, s17
 8004aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004aac:	ee17 0a90 	vmov	r0, s15
 8004ab0:	f7fb fbc0 	bl	8000234 <__aeabi_f2lz>
 8004ab4:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8004ab8:	bf18      	it	ne
 8004aba:	ea87 70e1 	eorne.w	r0, r7, r1, asr #31
 8004abe:	f845 0c08 	str.w	r0, [r5, #-8]
 8004ac2:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004ac6:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004aca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad2:	bfd4      	ite	le
 8004ad4:	eeb0 7a48 	vmovle.f32	s14, s16
 8004ad8:	eeb0 7a68 	vmovgt.f32	s14, s17
 8004adc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ae0:	ee17 0a90 	vmov	r0, s15
 8004ae4:	f7fb fba6 	bl	8000234 <__aeabi_f2lz>
 8004ae8:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8004aec:	ea87 73e1 	eor.w	r3, r7, r1, asr #31
 8004af0:	d078      	beq.n	8004be4 <arm_float_to_q31+0x1ec>
 8004af2:	3e01      	subs	r6, #1
 8004af4:	f845 3c04 	str.w	r3, [r5, #-4]
 8004af8:	f104 0410 	add.w	r4, r4, #16
 8004afc:	f105 0510 	add.w	r5, r5, #16
 8004b00:	d191      	bne.n	8004a26 <arm_float_to_q31+0x2e>
 8004b02:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8004b06:	44ca      	add	sl, r9
 8004b08:	44cb      	add	fp, r9
 8004b0a:	f018 0803 	ands.w	r8, r8, #3
 8004b0e:	d065      	beq.n	8004bdc <arm_float_to_q31+0x1e4>
 8004b10:	eddb 7a00 	vldr	s15, [fp]
 8004b14:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8004bf8 <arm_float_to_q31+0x200>
 8004b18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b1c:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
 8004b20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b28:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004b2c:	bfd8      	it	le
 8004b2e:	eeb0 7a66 	vmovle.f32	s14, s13
 8004b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b36:	ee17 0a90 	vmov	r0, s15
 8004b3a:	f7fb fb7b 	bl	8000234 <__aeabi_f2lz>
 8004b3e:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8004b42:	bf1c      	itt	ne
 8004b44:	f06f 4000 	mvnne.w	r0, #2147483648	@ 0x80000000
 8004b48:	ea80 70e1 	eorne.w	r0, r0, r1, asr #31
 8004b4c:	f1b8 0801 	subs.w	r8, r8, #1
 8004b50:	f8ca 0000 	str.w	r0, [sl]
 8004b54:	d042      	beq.n	8004bdc <arm_float_to_q31+0x1e4>
 8004b56:	eddb 7a01 	vldr	s15, [fp, #4]
 8004b5a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8004bf8 <arm_float_to_q31+0x200>
 8004b5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b62:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
 8004b66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b6e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004b72:	bfd8      	it	le
 8004b74:	eeb0 7a66 	vmovle.f32	s14, s13
 8004b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b7c:	ee17 0a90 	vmov	r0, s15
 8004b80:	f7fb fb58 	bl	8000234 <__aeabi_f2lz>
 8004b84:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8004b88:	bf1c      	itt	ne
 8004b8a:	f06f 4000 	mvnne.w	r0, #2147483648	@ 0x80000000
 8004b8e:	ea80 70e1 	eorne.w	r0, r0, r1, asr #31
 8004b92:	f1b8 0f01 	cmp.w	r8, #1
 8004b96:	f8ca 0004 	str.w	r0, [sl, #4]
 8004b9a:	d01f      	beq.n	8004bdc <arm_float_to_q31+0x1e4>
 8004b9c:	eddb 7a02 	vldr	s15, [fp, #8]
 8004ba0:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8004bf8 <arm_float_to_q31+0x200>
 8004ba4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ba8:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
 8004bac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004bb8:	bfd8      	it	le
 8004bba:	eeb0 7a66 	vmovle.f32	s14, s13
 8004bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bc2:	ee17 0a90 	vmov	r0, s15
 8004bc6:	f7fb fb35 	bl	8000234 <__aeabi_f2lz>
 8004bca:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8004bce:	bf1c      	itt	ne
 8004bd0:	f06f 4000 	mvnne.w	r0, #2147483648	@ 0x80000000
 8004bd4:	ea80 70e1 	eorne.w	r0, r0, r1, asr #31
 8004bd8:	f8ca 0008 	str.w	r0, [sl, #8]
 8004bdc:	ecbd 8b04 	vpop	{d8-d9}
 8004be0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004be4:	3e01      	subs	r6, #1
 8004be6:	f845 0c04 	str.w	r0, [r5, #-4]
 8004bea:	f104 0410 	add.w	r4, r4, #16
 8004bee:	f105 0510 	add.w	r5, r5, #16
 8004bf2:	f47f af18 	bne.w	8004a26 <arm_float_to_q31+0x2e>
 8004bf6:	e784      	b.n	8004b02 <arm_float_to_q31+0x10a>
 8004bf8:	4f000000 	.word	0x4f000000

08004bfc <arm_biquad_cascade_df1_init_q31>:
 8004bfc:	b510      	push	{r4, lr}
 8004bfe:	4604      	mov	r4, r0
 8004c00:	f99d 0008 	ldrsb.w	r0, [sp, #8]
 8004c04:	60a2      	str	r2, [r4, #8]
 8004c06:	6021      	str	r1, [r4, #0]
 8004c08:	010a      	lsls	r2, r1, #4
 8004c0a:	7320      	strb	r0, [r4, #12]
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fc36 	bl	8005480 <memset>
 8004c14:	6060      	str	r0, [r4, #4]
 8004c16:	bd10      	pop	{r4, pc}

08004c18 <arm_biquad_cas_df1_32x64_q31>:
 8004c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1c:	b0af      	sub	sp, #188	@ 0xbc
 8004c1e:	7b06      	ldrb	r6, [r0, #12]
 8004c20:	9228      	str	r2, [sp, #160]	@ 0xa0
 8004c22:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
 8004c26:	7800      	ldrb	r0, [r0, #0]
 8004c28:	9027      	str	r0, [sp, #156]	@ 0x9c
 8004c2a:	0898      	lsrs	r0, r3, #2
 8004c2c:	902a      	str	r0, [sp, #168]	@ 0xa8
 8004c2e:	4694      	mov	ip, r2
 8004c30:	f003 0203 	and.w	r2, r3, #3
 8004c34:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8004c36:	9122      	str	r1, [sp, #136]	@ 0x88
 8004c38:	f1a6 011f 	sub.w	r1, r6, #31
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	911d      	str	r1, [sp, #116]	@ 0x74
 8004c40:	4661      	mov	r1, ip
 8004c42:	1c75      	adds	r5, r6, #1
 8004c44:	932c      	str	r3, [sp, #176]	@ 0xb0
 8004c46:	18cb      	adds	r3, r1, r3
 8004c48:	f1c5 0020 	rsb	r0, r5, #32
 8004c4c:	932d      	str	r3, [sp, #180]	@ 0xb4
 8004c4e:	1e53      	subs	r3, r2, #1
 8004c50:	9329      	str	r3, [sp, #164]	@ 0xa4
 8004c52:	e9cd 0020 	strd	r0, r0, [sp, #128]	@ 0x80
 8004c56:	f107 0314 	add.w	r3, r7, #20
 8004c5a:	9326      	str	r3, [sp, #152]	@ 0x98
 8004c5c:	f104 0320 	add.w	r3, r4, #32
 8004c60:	901c      	str	r0, [sp, #112]	@ 0x70
 8004c62:	922b      	str	r2, [sp, #172]	@ 0xac
 8004c64:	9016      	str	r0, [sp, #88]	@ 0x58
 8004c66:	9325      	str	r3, [sp, #148]	@ 0x94
 8004c68:	46a9      	mov	r9, r5
 8004c6a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8004c6c:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8004c70:	9212      	str	r2, [sp, #72]	@ 0x48
 8004c72:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8004c76:	f853 1c08 	ldr.w	r1, [r3, #-8]
 8004c7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8004c7e:	9213      	str	r2, [sp, #76]	@ 0x4c
 8004c80:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 8004c84:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8004c86:	9214      	str	r2, [sp, #80]	@ 0x50
 8004c88:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8004c8c:	9215      	str	r2, [sp, #84]	@ 0x54
 8004c8e:	f853 8c10 	ldr.w	r8, [r3, #-16]
 8004c92:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8004c96:	f853 ac04 	ldr.w	sl, [r3, #-4]
 8004c9a:	9124      	str	r1, [sp, #144]	@ 0x90
 8004c9c:	e953 cb03 	ldrd	ip, fp, [r3, #-12]
 8004ca0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8004ca2:	9023      	str	r0, [sp, #140]	@ 0x8c
 8004ca4:	9208      	str	r2, [sp, #32]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 838b 	beq.w	80053c2 <arm_biquad_cas_df1_32x64_q31+0x7aa>
 8004cac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004cae:	931e      	str	r3, [sp, #120]	@ 0x78
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	17c5      	asrs	r5, r0, #31
 8004cb4:	3210      	adds	r2, #16
 8004cb6:	e9cd 4500 	strd	r4, r5, [sp]
 8004cba:	920d      	str	r2, [sp, #52]	@ 0x34
 8004cbc:	460c      	mov	r4, r1
 8004cbe:	17cd      	asrs	r5, r1, #31
 8004cc0:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8004cc2:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8004cc4:	f8dd e070 	ldr.w	lr, [sp, #112]	@ 0x70
 8004cc8:	f8cd 9018 	str.w	r9, [sp, #24]
 8004ccc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004cd0:	3210      	adds	r2, #16
 8004cd2:	ea4f 73ea 	mov.w	r3, sl, asr #31
 8004cd6:	920e      	str	r2, [sp, #56]	@ 0x38
 8004cd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cda:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8004cde:	f8cd a010 	str.w	sl, [sp, #16]
 8004ce2:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
 8004ce6:	9010      	str	r0, [sp, #64]	@ 0x40
 8004ce8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004cec:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8004cee:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8004cf0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8004cf2:	fbac ab08 	umull	sl, fp, ip, r8
 8004cf6:	ea4f 76ec 	mov.w	r6, ip, asr #31
 8004cfa:	fb0c f309 	mul.w	r3, ip, r9
 8004cfe:	fba0 0108 	umull	r0, r1, r0, r8
 8004d02:	fb06 3308 	mla	r3, r6, r8, r3
 8004d06:	465a      	mov	r2, fp
 8004d08:	441a      	add	r2, r3
 8004d0a:	fb04 1309 	mla	r3, r4, r9, r1
 8004d0e:	4619      	mov	r1, r3
 8004d10:	f855 7c10 	ldr.w	r7, [r5, #-16]
 8004d14:	971c      	str	r7, [sp, #112]	@ 0x70
 8004d16:	17cc      	asrs	r4, r1, #31
 8004d18:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8004d1a:	fb87 0101 	smull	r0, r1, r7, r1
 8004d1e:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8004d20:	46b8      	mov	r8, r7
 8004d22:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8004d24:	fbc7 0108 	smlal	r0, r1, r7, r8
 8004d28:	9f08      	ldr	r7, [sp, #32]
 8004d2a:	46b8      	mov	r8, r7
 8004d2c:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8004d2e:	eb13 030a 	adds.w	r3, r3, sl
 8004d32:	fbc7 0108 	smlal	r0, r1, r7, r8
 8004d36:	e9dd 8900 	ldrd	r8, r9, [sp]
 8004d3a:	930d      	str	r3, [sp, #52]	@ 0x34
 8004d3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d3e:	4693      	mov	fp, r2
 8004d40:	465f      	mov	r7, fp
 8004d42:	fba3 ab08 	umull	sl, fp, r3, r8
 8004d46:	fb03 bb09 	mla	fp, r3, r9, fp
 8004d4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d4c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8004d50:	eb44 0707 	adc.w	r7, r4, r7
 8004d54:	181b      	adds	r3, r3, r0
 8004d56:	eb47 0401 	adc.w	r4, r7, r1
 8004d5a:	9f04      	ldr	r7, [sp, #16]
 8004d5c:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8004d5e:	950d      	str	r5, [sp, #52]	@ 0x34
 8004d60:	464a      	mov	r2, r9
 8004d62:	fb07 f702 	mul.w	r7, r7, r2
 8004d66:	9a04      	ldr	r2, [sp, #16]
 8004d68:	4641      	mov	r1, r8
 8004d6a:	fb00 7701 	mla	r7, r0, r1, r7
 8004d6e:	fba2 0101 	umull	r0, r1, r2, r1
 8004d72:	4439      	add	r1, r7
 8004d74:	465f      	mov	r7, fp
 8004d76:	17ff      	asrs	r7, r7, #31
 8004d78:	eb1b 0b00 	adds.w	fp, fp, r0
 8004d7c:	eb41 0707 	adc.w	r7, r1, r7
 8004d80:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8004d82:	9906      	ldr	r1, [sp, #24]
 8004d84:	eb1b 0303 	adds.w	r3, fp, r3
 8004d88:	eb44 0707 	adc.w	r7, r4, r7
 8004d8c:	fa03 f202 	lsl.w	r2, r3, r2
 8004d90:	fa07 f001 	lsl.w	r0, r7, r1
 8004d94:	fa23 fe0e 	lsr.w	lr, r3, lr
 8004d98:	4607      	mov	r7, r0
 8004d9a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8004d9c:	4310      	orrs	r0, r2
 8004d9e:	ea40 020e 	orr.w	r2, r0, lr
 8004da2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004da6:	fa23 f404 	lsr.w	r4, r3, r4
 8004daa:	9204      	str	r2, [sp, #16]
 8004dac:	408b      	lsls	r3, r1
 8004dae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004db0:	9310      	str	r3, [sp, #64]	@ 0x40
 8004db2:	4327      	orrs	r7, r4
 8004db4:	9b04      	ldr	r3, [sp, #16]
 8004db6:	f842 7c10 	str.w	r7, [r2, #-16]
 8004dba:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 8004dbe:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 8004dc2:	fb03 f709 	mul.w	r7, r3, r9
 8004dc6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004dc8:	fba3 ab08 	umull	sl, fp, r3, r8
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8004dd2:	9008      	str	r0, [sp, #32]
 8004dd4:	9a04      	ldr	r2, [sp, #16]
 8004dd6:	9318      	str	r3, [sp, #96]	@ 0x60
 8004dd8:	4644      	mov	r4, r8
 8004dda:	fba2 0104 	umull	r0, r1, r2, r4
 8004dde:	e9cd 011a 	strd	r0, r1, [sp, #104]	@ 0x68
 8004de2:	fb0e 7704 	mla	r7, lr, r4, r7
 8004de6:	4608      	mov	r0, r1
 8004de8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8004dea:	9a01      	ldr	r2, [sp, #4]
 8004dec:	4438      	add	r0, r7
 8004dee:	901b      	str	r0, [sp, #108]	@ 0x6c
 8004df0:	fb01 b709 	mla	r7, r1, r9, fp
 8004df4:	e9dd 9a00 	ldrd	r9, sl, [sp]
 8004df8:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	@ 0x68
 8004dfc:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8004dfe:	9719      	str	r7, [sp, #100]	@ 0x64
 8004e00:	fbac 4509 	umull	r4, r5, ip, r9
 8004e04:	fb0c f202 	mul.w	r2, ip, r2
 8004e08:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 8004e0c:	fb06 2209 	mla	r2, r6, r9, r2
 8004e10:	eb17 040a 	adds.w	r4, r7, sl
 8004e14:	ea4f 76e7 	mov.w	r6, r7, asr #31
 8004e18:	4680      	mov	r8, r0
 8004e1a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8004e1c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8004e1e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8004e20:	fb88 0100 	smull	r0, r1, r8, r0
 8004e24:	46b8      	mov	r8, r7
 8004e26:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8004e28:	fbc5 0103 	smlal	r0, r1, r5, r3
 8004e2c:	fbc7 0108 	smlal	r0, r1, r7, r8
 8004e30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e32:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8004e34:	e9dd 8900 	ldrd	r8, r9, [sp]
 8004e38:	4413      	add	r3, r2
 8004e3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e3c:	465a      	mov	r2, fp
 8004e3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e40:	fba7 ab08 	umull	sl, fp, r7, r8
 8004e44:	fb07 b809 	mla	r8, r7, r9, fp
 8004e48:	eb46 0202 	adc.w	r2, r6, r2
 8004e4c:	1824      	adds	r4, r4, r0
 8004e4e:	eb42 0601 	adc.w	r6, r2, r1
 8004e52:	4642      	mov	r2, r8
 8004e54:	eb18 0803 	adds.w	r8, r8, r3
 8004e58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e5a:	ea4f 72e2 	mov.w	r2, r2, asr #31
 8004e5e:	eb42 0303 	adc.w	r3, r2, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	eb18 0804 	adds.w	r8, r8, r4
 8004e68:	eb46 0202 	adc.w	r2, r6, r2
 8004e6c:	9e06      	ldr	r6, [sp, #24]
 8004e6e:	f1a6 0020 	sub.w	r0, r6, #32
 8004e72:	fa02 fc06 	lsl.w	ip, r2, r6
 8004e76:	fa08 f000 	lsl.w	r0, r8, r0
 8004e7a:	f1c6 0120 	rsb	r1, r6, #32
 8004e7e:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8004e82:	fa28 f101 	lsr.w	r1, r8, r1
 8004e86:	ea4c 0c00 	orr.w	ip, ip, r0
 8004e8a:	ea4c 0c01 	orr.w	ip, ip, r1
 8004e8e:	fa08 f106 	lsl.w	r1, r8, r6
 8004e92:	9117      	str	r1, [sp, #92]	@ 0x5c
 8004e94:	9908      	ldr	r1, [sp, #32]
 8004e96:	fb0c f704 	mul.w	r7, ip, r4
 8004e9a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8004e9c:	ea4f 76ec 	mov.w	r6, ip, asr #31
 8004ea0:	4689      	mov	r9, r1
 8004ea2:	fb06 7703 	mla	r7, r6, r3, r7
 8004ea6:	fb89 0105 	smull	r0, r1, r9, r5
 8004eaa:	961f      	str	r6, [sp, #124]	@ 0x7c
 8004eac:	fba4 4503 	umull	r4, r5, r4, r3
 8004eb0:	9e01      	ldr	r6, [sp, #4]
 8004eb2:	9b04      	ldr	r3, [sp, #16]
 8004eb4:	fb03 fb06 	mul.w	fp, r3, r6
 8004eb8:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8004eba:	46b1      	mov	r9, r6
 8004ebc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004ebe:	fbc6 0109 	smlal	r0, r1, r6, r9
 8004ec2:	9e00      	ldr	r6, [sp, #0]
 8004ec4:	fba3 9a06 	umull	r9, sl, r3, r6
 8004ec8:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	@ 0x28
 8004ecc:	4682      	mov	sl, r0
 8004ece:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8004ed0:	4681      	mov	r9, r0
 8004ed2:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8004ed4:	fb0e be06 	mla	lr, lr, r6, fp
 8004ed8:	468b      	mov	fp, r1
 8004eda:	fbc0 ab09 	smlal	sl, fp, r0, r9
 8004ede:	9802      	ldr	r0, [sp, #8]
 8004ee0:	fbac 0100 	umull	r0, r1, ip, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	443b      	add	r3, r7
 8004ee8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8004eea:	4477      	add	r7, lr
 8004eec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ef0:	970b      	str	r7, [sp, #44]	@ 0x2c
 8004ef2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8004ef4:	9f03      	ldr	r7, [sp, #12]
 8004ef6:	9305      	str	r3, [sp, #20]
 8004ef8:	fb01 5707 	mla	r7, r1, r7, r5
 8004efc:	9b04      	ldr	r3, [sp, #16]
 8004efe:	9901      	ldr	r1, [sp, #4]
 8004f00:	463d      	mov	r5, r7
 8004f02:	17e8      	asrs	r0, r5, #31
 8004f04:	18ff      	adds	r7, r7, r3
 8004f06:	9d05      	ldr	r5, [sp, #20]
 8004f08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004f0a:	eb45 0000 	adc.w	r0, r5, r0
 8004f0e:	fba3 4506 	umull	r4, r5, r3, r6
 8004f12:	fb03 5301 	mla	r3, r3, r1, r5
 8004f16:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	@ 0x28
 8004f1a:	eb17 070a 	adds.w	r7, r7, sl
 8004f1e:	eb40 000b 	adc.w	r0, r0, fp
 8004f22:	ea4f 7ae3 	mov.w	sl, r3, asr #31
 8004f26:	195b      	adds	r3, r3, r5
 8004f28:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f2c:	19df      	adds	r7, r3, r7
 8004f2e:	9e06      	ldr	r6, [sp, #24]
 8004f30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004f32:	eb4a 0000 	adc.w	r0, sl, r0
 8004f36:	fa00 f106 	lsl.w	r1, r0, r6
 8004f3a:	fa27 f403 	lsr.w	r4, r7, r3
 8004f3e:	9104      	str	r1, [sp, #16]
 8004f40:	fa28 f803 	lsr.w	r8, r8, r3
 8004f44:	4321      	orrs	r1, r4
 8004f46:	40b2      	lsls	r2, r6
 8004f48:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8004f4a:	ea42 0208 	orr.w	r2, r2, r8
 8004f4e:	f844 2c0c 	str.w	r2, [r4, #-12]
 8004f52:	f1a6 0320 	sub.w	r3, r6, #32
 8004f56:	9a04      	ldr	r2, [sp, #16]
 8004f58:	f844 1c08 	str.w	r1, [r4, #-8]
 8004f5c:	fa07 f303 	lsl.w	r3, r7, r3
 8004f60:	431a      	orrs	r2, r3
 8004f62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f64:	9204      	str	r2, [sp, #16]
 8004f66:	f1c6 0020 	rsb	r0, r6, #32
 8004f6a:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8004f6e:	9b04      	ldr	r3, [sp, #16]
 8004f70:	9215      	str	r2, [sp, #84]	@ 0x54
 8004f72:	fa27 f000 	lsr.w	r0, r7, r0
 8004f76:	4303      	orrs	r3, r0
 8004f78:	9304      	str	r3, [sp, #16]
 8004f7a:	fa07 f306 	lsl.w	r3, r7, r6
 8004f7e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004f82:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f84:	9b04      	ldr	r3, [sp, #16]
 8004f86:	17df      	asrs	r7, r3, #31
 8004f88:	4638      	mov	r0, r7
 8004f8a:	971a      	str	r7, [sp, #104]	@ 0x68
 8004f8c:	462f      	mov	r7, r5
 8004f8e:	fb03 f707 	mul.w	r7, r3, r7
 8004f92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f94:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8004f96:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004f98:	fba3 ab04 	umull	sl, fp, r3, r4
 8004f9c:	fb82 4501 	smull	r4, r5, r2, r1
 8004fa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fa4:	9904      	ldr	r1, [sp, #16]
 8004fa6:	fba1 8902 	umull	r8, r9, r1, r2
 8004faa:	fb00 7702 	mla	r7, r0, r2, r7
 8004fae:	4648      	mov	r0, r9
 8004fb0:	4438      	add	r0, r7
 8004fb2:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
 8004fb6:	9908      	ldr	r1, [sp, #32]
 8004fb8:	9011      	str	r0, [sp, #68]	@ 0x44
 8004fba:	4618      	mov	r0, r3
 8004fbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fbe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004fc0:	fbc6 4501 	smlal	r4, r5, r6, r1
 8004fc4:	fb03 b800 	mla	r8, r3, r0, fp
 8004fc8:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8004fca:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8004fcc:	4640      	mov	r0, r8
 8004fce:	46a9      	mov	r9, r5
 8004fd0:	46a0      	mov	r8, r4
 8004fd2:	fbc2 8906 	smlal	r8, r9, r2, r6
 8004fd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fda:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8004fdc:	fb0c fe03 	mul.w	lr, ip, r3
 8004fe0:	fbac 4502 	umull	r4, r5, ip, r2
 8004fe4:	fb06 ee02 	mla	lr, r6, r2, lr
 8004fe8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8004fea:	ea4f 7ce0 	mov.w	ip, r0, asr #31
 8004fee:	1882      	adds	r2, r0, r2
 8004ff0:	9800      	ldr	r0, [sp, #0]
 8004ff2:	4647      	mov	r7, r8
 8004ff4:	46c8      	mov	r8, r9
 8004ff6:	fba1 9a00 	umull	r9, sl, r1, r0
 8004ffa:	9801      	ldr	r0, [sp, #4]
 8004ffc:	fb01 a600 	mla	r6, r1, r0, sl
 8005000:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005002:	eb4c 0c01 	adc.w	ip, ip, r1
 8005006:	19d0      	adds	r0, r2, r7
 8005008:	4475      	add	r5, lr
 800500a:	eb4c 0c08 	adc.w	ip, ip, r8
 800500e:	17f3      	asrs	r3, r6, #31
 8005010:	1936      	adds	r6, r6, r4
 8005012:	eb45 0303 	adc.w	r3, r5, r3
 8005016:	1832      	adds	r2, r6, r0
 8005018:	9e06      	ldr	r6, [sp, #24]
 800501a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800501c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800501e:	eb43 0c0c 	adc.w	ip, r3, ip
 8005022:	fa0c f006 	lsl.w	r0, ip, r6
 8005026:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005028:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 800502a:	fa22 f303 	lsr.w	r3, r2, r3
 800502e:	fa02 f106 	lsl.w	r1, r2, r6
 8005032:	4303      	orrs	r3, r0
 8005034:	ea40 0c01 	orr.w	ip, r0, r1
 8005038:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800503a:	9e06      	ldr	r6, [sp, #24]
 800503c:	fa22 f400 	lsr.w	r4, r2, r0
 8005040:	17f9      	asrs	r1, r7, #31
 8005042:	4638      	mov	r0, r7
 8005044:	f105 0710 	add.w	r7, r5, #16
 8005048:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 800504a:	970d      	str	r7, [sp, #52]	@ 0x34
 800504c:	f845 3c04 	str.w	r3, [r5, #-4]
 8005050:	f105 0310 	add.w	r3, r5, #16
 8005054:	930e      	str	r3, [sp, #56]	@ 0x38
 8005056:	fa02 f306 	lsl.w	r3, r2, r6
 800505a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800505c:	9e08      	ldr	r6, [sp, #32]
 800505e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8005060:	9210      	str	r2, [sp, #64]	@ 0x40
 8005062:	f8dd e084 	ldr.w	lr, [sp, #132]	@ 0x84
 8005066:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 8005068:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800506c:	3f01      	subs	r7, #1
 800506e:	ea4c 0c04 	orr.w	ip, ip, r4
 8005072:	4635      	mov	r5, r6
 8005074:	4603      	mov	r3, r0
 8005076:	460c      	mov	r4, r1
 8005078:	4646      	mov	r6, r8
 800507a:	971e      	str	r7, [sp, #120]	@ 0x78
 800507c:	f47f ae34 	bne.w	8004ce8 <arm_biquad_cas_df1_32x64_q31+0xd0>
 8005080:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005084:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8005086:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005088:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800508c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005090:	f8dd 805c 	ldr.w	r8, [sp, #92]	@ 0x5c
 8005094:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8005098:	f8cd e070 	str.w	lr, [sp, #112]	@ 0x70
 800509c:	4413      	add	r3, r2
 800509e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80050a2:	9322      	str	r3, [sp, #136]	@ 0x88
 80050a4:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80050a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80050a8:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 815b 	beq.w	8005366 <arm_biquad_cas_df1_32x64_q31+0x74e>
 80050b0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80050b2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	17d5      	asrs	r5, r2, #31
 80050b8:	461f      	mov	r7, r3
 80050ba:	4614      	mov	r4, r2
 80050bc:	ea4f 71ec 	mov.w	r1, ip, asr #31
 80050c0:	fb0c f305 	mul.w	r3, ip, r5
 80050c4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80050c8:	fb02 3301 	mla	r3, r2, r1, r3
 80050cc:	fba8 4502 	umull	r4, r5, r8, r2
 80050d0:	9110      	str	r1, [sp, #64]	@ 0x40
 80050d2:	fbac 1202 	umull	r1, r2, ip, r2
 80050d6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80050da:	9a03      	ldr	r2, [sp, #12]
 80050dc:	9805      	ldr	r0, [sp, #20]
 80050de:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 80050e0:	970d      	str	r7, [sp, #52]	@ 0x34
 80050e2:	441a      	add	r2, r3
 80050e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80050e6:	9203      	str	r2, [sp, #12]
 80050e8:	fb08 5100 	mla	r1, r8, r0, r5
 80050ec:	4638      	mov	r0, r7
 80050ee:	fb80 2303 	smull	r2, r3, r0, r3
 80050f2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80050f4:	4607      	mov	r7, r0
 80050f6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80050f8:	4625      	mov	r5, r4
 80050fa:	fbc0 2307 	smlal	r2, r3, r0, r7
 80050fe:	17e6      	asrs	r6, r4, #31
 8005100:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005104:	e9cd 5600 	strd	r5, r6, [sp]
 8005108:	9d08      	ldr	r5, [sp, #32]
 800510a:	9b02      	ldr	r3, [sp, #8]
 800510c:	9a03      	ldr	r2, [sp, #12]
 800510e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8005112:	46ae      	mov	lr, r5
 8005114:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8005116:	fbc5 670e 	smlal	r6, r7, r5, lr
 800511a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800511e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005122:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005124:	9c06      	ldr	r4, [sp, #24]
 8005126:	18cb      	adds	r3, r1, r3
 8005128:	ea4f 71e1 	mov.w	r1, r1, asr #31
 800512c:	eb42 0101 	adc.w	r1, r2, r1
 8005130:	ea4f 70ea 	mov.w	r0, sl, asr #31
 8005134:	fb0a f205 	mul.w	r2, sl, r5
 8005138:	4637      	mov	r7, r6
 800513a:	fb06 2200 	mla	r2, r6, r0, r2
 800513e:	4630      	mov	r0, r6
 8005140:	fbab 6707 	umull	r6, r7, fp, r7
 8005144:	191b      	adds	r3, r3, r4
 8005146:	fb0b 7e05 	mla	lr, fp, r5, r7
 800514a:	9c07      	ldr	r4, [sp, #28]
 800514c:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800514e:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 8005150:	fbaa ab00 	umull	sl, fp, sl, r0
 8005154:	4677      	mov	r7, lr
 8005156:	eb44 0101 	adc.w	r1, r4, r1
 800515a:	4493      	add	fp, r2
 800515c:	eb1e 0e0a 	adds.w	lr, lr, sl
 8005160:	ea4f 72e7 	mov.w	r2, r7, asr #31
 8005164:	eb42 020b 	adc.w	r2, r2, fp
 8005168:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 800516a:	eb1e 0e03 	adds.w	lr, lr, r3
 800516e:	eb42 0101 	adc.w	r1, r2, r1
 8005172:	fa0e f304 	lsl.w	r3, lr, r4
 8005176:	fa01 f009 	lsl.w	r0, r1, r9
 800517a:	fa2e f206 	lsr.w	r2, lr, r6
 800517e:	4601      	mov	r1, r0
 8005180:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005182:	4318      	orrs	r0, r3
 8005184:	fa2e f305 	lsr.w	r3, lr, r5
 8005188:	4311      	orrs	r1, r2
 800518a:	4318      	orrs	r0, r3
 800518c:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	@ 0x38
 8005190:	9006      	str	r0, [sp, #24]
 8005192:	6021      	str	r1, [r4, #0]
 8005194:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8005196:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8005198:	46a2      	mov	sl, r4
 800519a:	ea4f 7be4 	mov.w	fp, r4, asr #31
 800519e:	fa0e fe09 	lsl.w	lr, lr, r9
 80051a2:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80051a6:	2900      	cmp	r1, #0
 80051a8:	f000 80f9 	beq.w	800539e <arm_biquad_cas_df1_32x64_q31+0x786>
 80051ac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80051b0:	9d22      	ldr	r5, [sp, #136]	@ 0x88
 80051b2:	fb00 f10b 	mul.w	r1, r0, fp
 80051b6:	686e      	ldr	r6, [r5, #4]
 80051b8:	960e      	str	r6, [sp, #56]	@ 0x38
 80051ba:	17c5      	asrs	r5, r0, #31
 80051bc:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80051be:	9517      	str	r5, [sp, #92]	@ 0x5c
 80051c0:	fbae 2300 	umull	r2, r3, lr, r0
 80051c4:	fb00 1105 	mla	r1, r0, r5, r1
 80051c8:	4604      	mov	r4, r0
 80051ca:	9806      	ldr	r0, [sp, #24]
 80051cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80051ce:	fba0 4504 	umull	r4, r5, r0, r4
 80051d2:	440d      	add	r5, r1
 80051d4:	fb0e 310b 	mla	r1, lr, fp, r3
 80051d8:	460b      	mov	r3, r1
 80051da:	17d8      	asrs	r0, r3, #31
 80051dc:	fb86 2302 	smull	r2, r3, r6, r2
 80051e0:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80051e2:	46b3      	mov	fp, r6
 80051e4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80051e6:	fbc6 230b 	smlal	r2, r3, r6, fp
 80051ea:	469b      	mov	fp, r3
 80051ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80051ee:	461f      	mov	r7, r3
 80051f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80051f2:	4692      	mov	sl, r2
 80051f4:	fbc3 ab07 	smlal	sl, fp, r3, r7
 80051f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80051fa:	1909      	adds	r1, r1, r4
 80051fc:	eb45 0000 	adc.w	r0, r5, r0
 8005200:	461f      	mov	r7, r3
 8005202:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005206:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005208:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800520c:	9a08      	ldr	r2, [sp, #32]
 800520e:	fba8 ab03 	umull	sl, fp, r8, r3
 8005212:	fb08 b405 	mla	r4, r8, r5, fp
 8005216:	1889      	adds	r1, r1, r2
 8005218:	46a3      	mov	fp, r4
 800521a:	4622      	mov	r2, r4
 800521c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800521e:	fb0c f605 	mul.w	r6, ip, r5
 8005222:	eb40 0404 	adc.w	r4, r0, r4
 8005226:	fb03 6607 	mla	r6, r3, r7, r6
 800522a:	4620      	mov	r0, r4
 800522c:	fbac 4503 	umull	r4, r5, ip, r3
 8005230:	4435      	add	r5, r6
 8005232:	17d3      	asrs	r3, r2, #31
 8005234:	eb1b 0204 	adds.w	r2, fp, r4
 8005238:	eb45 0303 	adc.w	r3, r5, r3
 800523c:	1851      	adds	r1, r2, r1
 800523e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005240:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8005242:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8005244:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8005246:	eb43 0000 	adc.w	r0, r3, r0
 800524a:	fa00 fa09 	lsl.w	sl, r0, r9
 800524e:	fa01 f302 	lsl.w	r3, r1, r2
 8005252:	4650      	mov	r0, sl
 8005254:	fa21 f204 	lsr.w	r2, r1, r4
 8005258:	ea4a 0a03 	orr.w	sl, sl, r3
 800525c:	fa01 fb09 	lsl.w	fp, r1, r9
 8005260:	fa21 f306 	lsr.w	r3, r1, r6
 8005264:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005266:	4310      	orrs	r0, r2
 8005268:	ea4f 78e1 	mov.w	r8, r1, asr #31
 800526c:	6068      	str	r0, [r5, #4]
 800526e:	460d      	mov	r5, r1
 8005270:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8005272:	2901      	cmp	r1, #1
 8005274:	ea4a 0a03 	orr.w	sl, sl, r3
 8005278:	4646      	mov	r6, r8
 800527a:	f000 8096 	beq.w	80053aa <arm_biquad_cas_df1_32x64_q31+0x792>
 800527e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005280:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8005282:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8005284:	6889      	ldr	r1, [r1, #8]
 8005286:	9110      	str	r1, [sp, #64]	@ 0x40
 8005288:	fbab 7802 	umull	r7, r8, fp, r2
 800528c:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8005290:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
 8005294:	9903      	ldr	r1, [sp, #12]
 8005296:	fb0a f308 	mul.w	r3, sl, r8
 800529a:	ea4f 70ea 	mov.w	r0, sl, asr #31
 800529e:	fb0b 1108 	mla	r1, fp, r8, r1
 80052a2:	fb02 3000 	mla	r0, r2, r0, r3
 80052a6:	fbaa 7802 	umull	r7, r8, sl, r2
 80052aa:	4440      	add	r0, r8
 80052ac:	e9cd 7804 	strd	r7, r8, [sp, #16]
 80052b0:	9005      	str	r0, [sp, #20]
 80052b2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80052b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80052b6:	4607      	mov	r7, r0
 80052b8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80052ba:	fb83 2304 	smull	r2, r3, r3, r4
 80052be:	fbc0 2307 	smlal	r2, r3, r0, r7
 80052c2:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 80052c4:	9c06      	ldr	r4, [sp, #24]
 80052c6:	fbae 7800 	umull	r7, r8, lr, r0
 80052ca:	e9cd 7808 	strd	r7, r8, [sp, #32]
 80052ce:	9801      	ldr	r0, [sp, #4]
 80052d0:	9f04      	ldr	r7, [sp, #16]
 80052d2:	fb04 f400 	mul.w	r4, r4, r0
 80052d6:	4698      	mov	r8, r3
 80052d8:	17c8      	asrs	r0, r1, #31
 80052da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80052dc:	19c9      	adds	r1, r1, r7
 80052de:	4617      	mov	r7, r2
 80052e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80052e2:	fbc3 7802 	smlal	r7, r8, r3, r2
 80052e6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80052ea:	9f01      	ldr	r7, [sp, #4]
 80052ec:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80052ee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80052f0:	46bc      	mov	ip, r7
 80052f2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80052f4:	fb0e 7e0c 	mla	lr, lr, ip, r7
 80052f8:	9f05      	ldr	r7, [sp, #20]
 80052fa:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 80052fe:	eb47 0000 	adc.w	r0, r7, r0
 8005302:	9f02      	ldr	r7, [sp, #8]
 8005304:	4694      	mov	ip, r2
 8005306:	19c9      	adds	r1, r1, r7
 8005308:	fb03 440c 	mla	r4, r3, ip, r4
 800530c:	9f03      	ldr	r7, [sp, #12]
 800530e:	461a      	mov	r2, r3
 8005310:	9b06      	ldr	r3, [sp, #24]
 8005312:	eb47 0000 	adc.w	r0, r7, r0
 8005316:	fba3 2302 	umull	r2, r3, r3, r2
 800531a:	4677      	mov	r7, lr
 800531c:	4423      	add	r3, r4
 800531e:	eb1e 0e02 	adds.w	lr, lr, r2
 8005322:	ea4f 74e7 	mov.w	r4, r7, asr #31
 8005326:	eb43 0404 	adc.w	r4, r3, r4
 800532a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800532c:	eb1e 0e01 	adds.w	lr, lr, r1
 8005330:	eb44 0000 	adc.w	r0, r4, r0
 8005334:	fa0e f302 	lsl.w	r3, lr, r2
 8005338:	fa00 fc09 	lsl.w	ip, r0, r9
 800533c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 800533e:	4660      	mov	r0, ip
 8005340:	ea4c 0c03 	orr.w	ip, ip, r3
 8005344:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8005346:	fa2e f303 	lsr.w	r3, lr, r3
 800534a:	fa2e f204 	lsr.w	r2, lr, r4
 800534e:	ea4c 0c03 	orr.w	ip, ip, r3
 8005352:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005354:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005356:	4310      	orrs	r0, r2
 8005358:	60a0      	str	r0, [r4, #8]
 800535a:	17d9      	asrs	r1, r3, #31
 800535c:	4618      	mov	r0, r3
 800535e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005362:	fa0e f809 	lsl.w	r8, lr, r9
 8005366:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800536a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800536c:	e943 1208 	strd	r1, r2, [r3, #-32]
 8005370:	e943 5606 	strd	r5, r6, [r3, #-24]
 8005374:	f843 8c10 	str.w	r8, [r3, #-16]
 8005378:	f843 ac04 	str.w	sl, [r3, #-4]
 800537c:	e943 cb03 	strd	ip, fp, [r3, #-12]
 8005380:	3320      	adds	r3, #32
 8005382:	9325      	str	r3, [sp, #148]	@ 0x94
 8005384:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8005386:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8005388:	9322      	str	r3, [sp, #136]	@ 0x88
 800538a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800538c:	3214      	adds	r2, #20
 800538e:	3b01      	subs	r3, #1
 8005390:	9226      	str	r2, [sp, #152]	@ 0x98
 8005392:	9327      	str	r3, [sp, #156]	@ 0x9c
 8005394:	f47f ac69 	bne.w	8004c6a <arm_biquad_cas_df1_32x64_q31+0x52>
 8005398:	b02f      	add	sp, #188	@ 0xbc
 800539a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800539e:	46c3      	mov	fp, r8
 80053a0:	46e2      	mov	sl, ip
 80053a2:	46f0      	mov	r8, lr
 80053a4:	f8dd c018 	ldr.w	ip, [sp, #24]
 80053a8:	e7dd      	b.n	8005366 <arm_biquad_cas_df1_32x64_q31+0x74e>
 80053aa:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80053ae:	46d8      	mov	r8, fp
 80053b0:	e9cd 5602 	strd	r5, r6, [sp, #8]
 80053b4:	46d4      	mov	ip, sl
 80053b6:	460d      	mov	r5, r1
 80053b8:	46f3      	mov	fp, lr
 80053ba:	f8dd a018 	ldr.w	sl, [sp, #24]
 80053be:	4616      	mov	r6, r2
 80053c0:	e7d1      	b.n	8005366 <arm_biquad_cas_df1_32x64_q31+0x74e>
 80053c2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80053c4:	4619      	mov	r1, r3
 80053c6:	17da      	asrs	r2, r3, #31
 80053c8:	9b08      	ldr	r3, [sp, #32]
 80053ca:	461d      	mov	r5, r3
 80053cc:	17de      	asrs	r6, r3, #31
 80053ce:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80053d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80053d2:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 80053d6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80053da:	e665      	b.n	80050a8 <arm_biquad_cas_df1_32x64_q31+0x490>

080053dc <arm_biquad_cas_df1_32x64_init_q31>:
 80053dc:	b510      	push	{r4, lr}
 80053de:	4604      	mov	r4, r0
 80053e0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80053e4:	60a2      	str	r2, [r4, #8]
 80053e6:	7021      	strb	r1, [r4, #0]
 80053e8:	014a      	lsls	r2, r1, #5
 80053ea:	7320      	strb	r0, [r4, #12]
 80053ec:	2100      	movs	r1, #0
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 f846 	bl	8005480 <memset>
 80053f4:	6060      	str	r0, [r4, #4]
 80053f6:	bd10      	pop	{r4, pc}

080053f8 <arm_scale_f32>:
 80053f8:	b470      	push	{r4, r5, r6}
 80053fa:	0896      	lsrs	r6, r2, #2
 80053fc:	d025      	beq.n	800544a <arm_scale_f32+0x52>
 80053fe:	f100 0410 	add.w	r4, r0, #16
 8005402:	f101 0310 	add.w	r3, r1, #16
 8005406:	4635      	mov	r5, r6
 8005408:	ed54 7a04 	vldr	s15, [r4, #-16]
 800540c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005410:	3d01      	subs	r5, #1
 8005412:	ed43 7a04 	vstr	s15, [r3, #-16]
 8005416:	ed54 7a03 	vldr	s15, [r4, #-12]
 800541a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800541e:	f104 0410 	add.w	r4, r4, #16
 8005422:	ed43 7a03 	vstr	s15, [r3, #-12]
 8005426:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800542a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800542e:	f103 0310 	add.w	r3, r3, #16
 8005432:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 8005436:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800543a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800543e:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8005442:	d1e1      	bne.n	8005408 <arm_scale_f32+0x10>
 8005444:	0136      	lsls	r6, r6, #4
 8005446:	4430      	add	r0, r6
 8005448:	4431      	add	r1, r6
 800544a:	f012 0203 	ands.w	r2, r2, #3
 800544e:	d015      	beq.n	800547c <arm_scale_f32+0x84>
 8005450:	edd0 7a00 	vldr	s15, [r0]
 8005454:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005458:	3a01      	subs	r2, #1
 800545a:	edc1 7a00 	vstr	s15, [r1]
 800545e:	d00d      	beq.n	800547c <arm_scale_f32+0x84>
 8005460:	edd0 7a01 	vldr	s15, [r0, #4]
 8005464:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005468:	2a01      	cmp	r2, #1
 800546a:	edc1 7a01 	vstr	s15, [r1, #4]
 800546e:	d005      	beq.n	800547c <arm_scale_f32+0x84>
 8005470:	edd0 7a02 	vldr	s15, [r0, #8]
 8005474:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005478:	ed81 0a02 	vstr	s0, [r1, #8]
 800547c:	bc70      	pop	{r4, r5, r6}
 800547e:	4770      	bx	lr

08005480 <memset>:
 8005480:	4402      	add	r2, r0
 8005482:	4603      	mov	r3, r0
 8005484:	4293      	cmp	r3, r2
 8005486:	d100      	bne.n	800548a <memset+0xa>
 8005488:	4770      	bx	lr
 800548a:	f803 1b01 	strb.w	r1, [r3], #1
 800548e:	e7f9      	b.n	8005484 <memset+0x4>

08005490 <__libc_init_array>:
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	4d0d      	ldr	r5, [pc, #52]	@ (80054c8 <__libc_init_array+0x38>)
 8005494:	4c0d      	ldr	r4, [pc, #52]	@ (80054cc <__libc_init_array+0x3c>)
 8005496:	1b64      	subs	r4, r4, r5
 8005498:	10a4      	asrs	r4, r4, #2
 800549a:	2600      	movs	r6, #0
 800549c:	42a6      	cmp	r6, r4
 800549e:	d109      	bne.n	80054b4 <__libc_init_array+0x24>
 80054a0:	4d0b      	ldr	r5, [pc, #44]	@ (80054d0 <__libc_init_array+0x40>)
 80054a2:	4c0c      	ldr	r4, [pc, #48]	@ (80054d4 <__libc_init_array+0x44>)
 80054a4:	f000 f818 	bl	80054d8 <_init>
 80054a8:	1b64      	subs	r4, r4, r5
 80054aa:	10a4      	asrs	r4, r4, #2
 80054ac:	2600      	movs	r6, #0
 80054ae:	42a6      	cmp	r6, r4
 80054b0:	d105      	bne.n	80054be <__libc_init_array+0x2e>
 80054b2:	bd70      	pop	{r4, r5, r6, pc}
 80054b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b8:	4798      	blx	r3
 80054ba:	3601      	adds	r6, #1
 80054bc:	e7ee      	b.n	800549c <__libc_init_array+0xc>
 80054be:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c2:	4798      	blx	r3
 80054c4:	3601      	adds	r6, #1
 80054c6:	e7f2      	b.n	80054ae <__libc_init_array+0x1e>
 80054c8:	080063f0 	.word	0x080063f0
 80054cc:	080063f0 	.word	0x080063f0
 80054d0:	080063f0 	.word	0x080063f0
 80054d4:	080063f4 	.word	0x080063f4

080054d8 <_init>:
 80054d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054da:	bf00      	nop
 80054dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054de:	bc08      	pop	{r3}
 80054e0:	469e      	mov	lr, r3
 80054e2:	4770      	bx	lr

080054e4 <_fini>:
 80054e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e6:	bf00      	nop
 80054e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ea:	bc08      	pop	{r3}
 80054ec:	469e      	mov	lr, r3
 80054ee:	4770      	bx	lr
