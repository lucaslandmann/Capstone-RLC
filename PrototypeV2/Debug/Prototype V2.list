
Prototype V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011358  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080115cc  080115cc  000125cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080116cc  080116cc  0001300c  2**0
                  CONTENTS
  4 .ARM          00000008  080116cc  080116cc  000126cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080116d4  080116d4  0001300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080116d4  080116d4  000126d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080116d8  080116d8  000126d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080116dc  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006464  2000000c  080116e8  0001300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20006470  080116e8  00013470  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031bc1  00000000  00000000  00013042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d25  00000000  00000000  00044c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002aa0  00000000  00000000  00049928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002171  00000000  00000000  0004c3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004731a  00000000  00000000  0004e539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035b6c  00000000  00000000  00095853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bc9d4  00000000  00000000  000cb3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00287d93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd64  00000000  00000000  00287dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00293b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000000c 	.word	0x2000000c
 8000290:	00000000 	.word	0x00000000
 8000294:	080115b4 	.word	0x080115b4

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000010 	.word	0x20000010
 80002b0:	080115b4 	.word	0x080115b4

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f002 fa97 	bl	8002b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f8ed 	bl	80007b4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005da:	f000 f957 	bl	800088c <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005de:	f000 f98c 	bl	80008fa <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 fefb 	bl	80013dc <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005e6:	f000 fb89 	bl	8000cfc <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 80005ea:	f000 fb49 	bl	8000c80 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 80005ee:	f000 fbbd 	bl	8000d6c <MX_HSPI1_Init>
  MX_I2C2_Init();
 80005f2:	f000 fc39 	bl	8000e68 <MX_I2C2_Init>
  MX_ICACHE_Init();
 80005f6:	f000 fc77 	bl	8000ee8 <MX_ICACHE_Init>
  MX_LTDC_Init();
 80005fa:	f000 fc89 	bl	8000f10 <MX_LTDC_Init>
  MX_RTC_Init();
 80005fe:	f000 fd07 	bl	8001010 <MX_RTC_Init>
  MX_TIM3_Init();
 8000602:	f000 fdbf 	bl	8001184 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000606:	f000 f987 	bl	8000918 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800060a:	f000 fe6d 	bl	80012e8 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 800060e:	f000 fd4d 	bl	80010ac <MX_SAI2_Init>
  MX_ADC4_Init();
 8000612:	f000 fabb 	bl	8000b8c <MX_ADC4_Init>
  MX_I2C1_Init();
 8000616:	f000 fbe7 	bl	8000de8 <MX_I2C1_Init>
  MX_USB_OTG_HS_PCD_Init();
 800061a:	f000 feb1 	bl	8001380 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM15_Init();
 800061e:	f000 fe13 	bl	8001248 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcGroup1, DIM(adcGroup1)); //Begins DMA transfer for first ADC
 8000622:	f44f 6250 	mov.w	r2, #3328	@ 0xd00
 8000626:	4959      	ldr	r1, [pc, #356]	@ (800078c <main+0x1c0>)
 8000628:	4859      	ldr	r0, [pc, #356]	@ (8000790 <main+0x1c4>)
 800062a:	f003 f9b7 	bl	800399c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc4, (uint16_t*)adcGroup4, DIM(adcGroup4)); //begins DMA transfer for fourth ADC
 800062e:	2202      	movs	r2, #2
 8000630:	4958      	ldr	r1, [pc, #352]	@ (8000794 <main+0x1c8>)
 8000632:	4859      	ldr	r0, [pc, #356]	@ (8000798 <main+0x1cc>)
 8000634:	f003 f9b2 	bl	800399c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim15);
 8000638:	4858      	ldr	r0, [pc, #352]	@ (800079c <main+0x1d0>)
 800063a:	f00e f945 	bl	800e8c8 <HAL_TIM_Base_Start>
	  HAL_Delay(10);
  }

  HAL_Delay(10);
  */
  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pcmData, DIM(pcmData)); //Begins DMA transfer for PCM6260
 800063e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000642:	4957      	ldr	r1, [pc, #348]	@ (80007a0 <main+0x1d4>)
 8000644:	4857      	ldr	r0, [pc, #348]	@ (80007a4 <main+0x1d8>)
 8000646:	f00d fd8d 	bl	800e164 <HAL_SAI_Receive_DMA>
  HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)dacData, DIM(dacData));
 800064a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800064e:	4956      	ldr	r1, [pc, #344]	@ (80007a8 <main+0x1dc>)
 8000650:	4856      	ldr	r0, [pc, #344]	@ (80007ac <main+0x1e0>)
 8000652:	f00d fc85 	bl	800df60 <HAL_SAI_Transmit_DMA>

  //Populates each channel in the channels struct with initializer values
  for(int i = 0; i < sizeof(channels); i++)
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	e08e      	b.n	800077a <main+0x1ae>
  {
	  for(int s = 0; s < sizeof(channels[i].channelData); s++)
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	e00d      	b.n	800067e <main+0xb2>
	  {
		  channels[i].channelData[s] = 0;
 8000662:	4953      	ldr	r1, [pc, #332]	@ (80007b0 <main+0x1e4>)
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f240 120b 	movw	r2, #267	@ 0x10b
 800066a:	fb03 f202 	mul.w	r2, r3, r2
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	4413      	add	r3, r2
 8000672:	2200      	movs	r2, #0
 8000674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int s = 0; s < sizeof(channels[i].channelData); s++)
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	3301      	adds	r3, #1
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000684:	d3ed      	bcc.n	8000662 <main+0x96>
	  }
	  channels[i].channelNum = i;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	b2d8      	uxtb	r0, r3
 800068a:	4a49      	ldr	r2, [pc, #292]	@ (80007b0 <main+0x1e4>)
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8000692:	fb01 f303 	mul.w	r3, r1, r3
 8000696:	4413      	add	r3, r2
 8000698:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800069c:	4602      	mov	r2, r0
 800069e:	701a      	strb	r2, [r3, #0]
	  channels[i].volume = 0.0;
 80006a0:	4a43      	ldr	r2, [pc, #268]	@ (80007b0 <main+0x1e4>)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	f240 412c 	movw	r1, #1068	@ 0x42c
 80006a8:	fb01 f303 	mul.w	r3, r1, r3
 80006ac:	4413      	add	r3, r2
 80006ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80006b2:	f04f 0200 	mov.w	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
	  channels[i].LRPan = 0.0;
 80006b8:	4a3d      	ldr	r2, [pc, #244]	@ (80007b0 <main+0x1e4>)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	f240 412c 	movw	r1, #1068	@ 0x42c
 80006c0:	fb01 f303 	mul.w	r3, r1, r3
 80006c4:	4413      	add	r3, r2
 80006c6:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80006ca:	f04f 0200 	mov.w	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
	  channels[i].reverbEnable = false;
 80006d0:	4a37      	ldr	r2, [pc, #220]	@ (80007b0 <main+0x1e4>)
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	f240 412c 	movw	r1, #1068	@ 0x42c
 80006d8:	fb01 f303 	mul.w	r3, r1, r3
 80006dc:	4413      	add	r3, r2
 80006de:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
	  channels[i].EQEnable = false;
 80006e6:	4a32      	ldr	r2, [pc, #200]	@ (80007b0 <main+0x1e4>)
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f240 412c 	movw	r1, #1068	@ 0x42c
 80006ee:	fb01 f303 	mul.w	r3, r1, r3
 80006f2:	4413      	add	r3, r2
 80006f4:	f203 430d 	addw	r3, r3, #1037	@ 0x40d
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
	  channels[i].distortionEnable = false;
 80006fc:	4a2c      	ldr	r2, [pc, #176]	@ (80007b0 <main+0x1e4>)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	f240 412c 	movw	r1, #1068	@ 0x42c
 8000704:	fb01 f303 	mul.w	r3, r1, r3
 8000708:	4413      	add	r3, r2
 800070a:	f203 430e 	addw	r3, r3, #1038	@ 0x40e
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
	  channels[i].reverbStrength = 0.0;
 8000712:	4a27      	ldr	r2, [pc, #156]	@ (80007b0 <main+0x1e4>)
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f240 412c 	movw	r1, #1068	@ 0x42c
 800071a:	fb01 f303 	mul.w	r3, r1, r3
 800071e:	4413      	add	r3, r2
 8000720:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8000724:	f04f 0200 	mov.w	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
	  for(int r = 0; r < sizeof(channels[i].eqLevels);r++)
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	e012      	b.n	8000756 <main+0x18a>
	  {
		  channels[i].eqLevels[r] = 0.0;
 8000730:	491f      	ldr	r1, [pc, #124]	@ (80007b0 <main+0x1e4>)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	f240 120b 	movw	r2, #267	@ 0x10b
 8000738:	fb03 f202 	mul.w	r2, r3, r2
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4413      	add	r3, r2
 8000740:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	440b      	add	r3, r1
 8000748:	3304      	adds	r3, #4
 800074a:	f04f 0200 	mov.w	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
	  for(int r = 0; r < sizeof(channels[i].eqLevels);r++)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3301      	adds	r3, #1
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2b13      	cmp	r3, #19
 800075a:	d9e9      	bls.n	8000730 <main+0x164>
	  }
	  channels[i].distortionStrength = 0.0;
 800075c:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <main+0x1e4>)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f240 412c 	movw	r1, #1068	@ 0x42c
 8000764:	fb01 f303 	mul.w	r3, r1, r3
 8000768:	4413      	add	r3, r2
 800076a:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 800076e:	f04f 0200 	mov.w	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < sizeof(channels); i++)
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3301      	adds	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f641 1207 	movw	r2, #6407	@ 0x1907
 8000780:	4293      	cmp	r3, r2
 8000782:	f67f af6b 	bls.w	800065c <main+0x90>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000786:	bf00      	nop
 8000788:	e7fd      	b.n	8000786 <main+0x1ba>
 800078a:	bf00      	nop
 800078c:	20000d5c 	.word	0x20000d5c
 8000790:	20000028 	.word	0x20000028
 8000794:	2000275c 	.word	0x2000275c
 8000798:	200000b4 	.word	0x200000b4
 800079c:	20000798 	.word	0x20000798
 80007a0:	20002760 	.word	0x20002760
 80007a4:	2000054c 	.word	0x2000054c
 80007a8:	20004760 	.word	0x20004760
 80007ac:	200004b4 	.word	0x200004b4
 80007b0:	20004b60 	.word	0x20004b60

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b09e      	sub	sp, #120	@ 0x78
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0318 	add.w	r3, r7, #24
 80007be:	2260      	movs	r2, #96	@ 0x60
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f010 fec9 	bl	801155a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	463b      	mov	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]
 80007d6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007d8:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80007dc:	f008 fc7c 	bl	80090d8 <HAL_PWREx_ControlVoltageScaling>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x36>
  {
    Error_Handler();
 80007e6:	f000 ffcf 	bl	8001788 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007ea:	f008 fc65 	bl	80090b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007ee:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <SystemClock_Config+0xd4>)
 80007f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80007f4:	4a24      	ldr	r2, [pc, #144]	@ (8000888 <SystemClock_Config+0xd4>)
 80007f6:	f023 0318 	bic.w	r3, r3, #24
 80007fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80007fe:	2307      	movs	r3, #7
 8000800:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000802:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000806:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000808:	2381      	movs	r3, #129	@ 0x81
 800080a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000812:	2310      	movs	r3, #16
 8000814:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081a:	2303      	movs	r3, #3
 800081c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000826:	2308      	movs	r3, #8
 8000828:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 800082a:	2308      	movs	r3, #8
 800082c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000832:	2301      	movs	r3, #1
 8000834:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000836:	230c      	movs	r3, #12
 8000838:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	f107 0318 	add.w	r3, r7, #24
 8000842:	4618      	mov	r0, r3
 8000844:	f008 fd72 	bl	800932c <HAL_RCC_OscConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800084e:	f000 ff9b 	bl	8001788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000852:	231f      	movs	r3, #31
 8000854:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000856:	2303      	movs	r3, #3
 8000858:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800086a:	463b      	mov	r3, r7
 800086c:	2103      	movs	r1, #3
 800086e:	4618      	mov	r0, r3
 8000870:	f009 fc38 	bl	800a0e4 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800087a:	f000 ff85 	bl	8001788 <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3778      	adds	r7, #120	@ 0x78
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	46020c00 	.word	0x46020c00

0800088c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b0b8      	sub	sp, #224	@ 0xe0
 8000890:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000892:	463b      	mov	r3, r7
 8000894:	22e0      	movs	r2, #224	@ 0xe0
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f010 fe5e 	bl	801155a <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 800089e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008a2:	f04f 0301 	mov.w	r3, #1
 80008a6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 80008b0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80008b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 80008b8:	2303      	movs	r3, #3
 80008ba:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 80008c0:	230c      	movs	r3, #12
 80008c2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 80008c8:	2303      	movs	r3, #3
 80008ca:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 80008cc:	2304      	movs	r3, #4
 80008ce:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 80008d0:	230c      	movs	r3, #12
 80008d2:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 80008d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 80008da:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e0:	463b      	mov	r3, r7
 80008e2:	4618      	mov	r0, r3
 80008e4:	f009 ffce 	bl	800a884 <HAL_RCCEx_PeriphCLKConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 80008ee:	f000 ff4b 	bl	8001788 <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	37e0      	adds	r7, #224	@ 0xe0
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80008fe:	f008 fcd7 	bl	80092b0 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000902:	2002      	movs	r0, #2
 8000904:	f008 fc74 	bl	80091f0 <HAL_PWREx_ConfigSupply>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemPower_Config+0x18>
  {
    Error_Handler();
 800090e:	f000 ff3b 	bl	8001788 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800091e:	463b      	mov	r3, r7
 8000920:	2220      	movs	r2, #32
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f010 fe18 	bl	801155a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800092a:	4b89      	ldr	r3, [pc, #548]	@ (8000b50 <MX_ADC1_Init+0x238>)
 800092c:	4a89      	ldr	r2, [pc, #548]	@ (8000b54 <MX_ADC1_Init+0x23c>)
 800092e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000930:	4b87      	ldr	r3, [pc, #540]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000932:	2200      	movs	r2, #0
 8000934:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000936:	4b86      	ldr	r3, [pc, #536]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800093c:	4b84      	ldr	r3, [pc, #528]	@ (8000b50 <MX_ADC1_Init+0x238>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000942:	4b83      	ldr	r3, [pc, #524]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000944:	2200      	movs	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000948:	4b81      	ldr	r3, [pc, #516]	@ (8000b50 <MX_ADC1_Init+0x238>)
 800094a:	2201      	movs	r2, #1
 800094c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800094e:	4b80      	ldr	r3, [pc, #512]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000950:	2204      	movs	r2, #4
 8000952:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000954:	4b7e      	ldr	r3, [pc, #504]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000956:	2201      	movs	r2, #1
 8000958:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800095a:	4b7d      	ldr	r3, [pc, #500]	@ (8000b50 <MX_ADC1_Init+0x238>)
 800095c:	2201      	movs	r2, #1
 800095e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 8000962:	4b7b      	ldr	r3, [pc, #492]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000964:	220d      	movs	r2, #13
 8000966:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000968:	4b79      	ldr	r3, [pc, #484]	@ (8000b50 <MX_ADC1_Init+0x238>)
 800096a:	2200      	movs	r2, #0
 800096c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8000970:	4b77      	ldr	r3, [pc, #476]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000972:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8000976:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000978:	4b75      	ldr	r3, [pc, #468]	@ (8000b50 <MX_ADC1_Init+0x238>)
 800097a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800097e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000980:	4b73      	ldr	r3, [pc, #460]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000982:	2201      	movs	r2, #1
 8000984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000988:	4b71      	ldr	r3, [pc, #452]	@ (8000b50 <MX_ADC1_Init+0x238>)
 800098a:	2200      	movs	r2, #0
 800098c:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800098e:	4b70      	ldr	r3, [pc, #448]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000990:	2200      	movs	r2, #0
 8000992:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000994:	4b6e      	ldr	r3, [pc, #440]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000996:	2200      	movs	r2, #0
 8000998:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800099a:	4b6d      	ldr	r3, [pc, #436]	@ (8000b50 <MX_ADC1_Init+0x238>)
 800099c:	2203      	movs	r2, #3
 800099e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80009a0:	4b6b      	ldr	r3, [pc, #428]	@ (8000b50 <MX_ADC1_Init+0x238>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009a8:	4869      	ldr	r0, [pc, #420]	@ (8000b50 <MX_ADC1_Init+0x238>)
 80009aa:	f002 fd0f 	bl	80033cc <HAL_ADC_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80009b4:	f000 fee8 	bl	8001788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009b8:	4b67      	ldr	r3, [pc, #412]	@ (8000b58 <MX_ADC1_Init+0x240>)
 80009ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009bc:	2306      	movs	r3, #6
 80009be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009c8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ca:	2304      	movs	r3, #4
 80009cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	4619      	mov	r1, r3
 80009d6:	485e      	ldr	r0, [pc, #376]	@ (8000b50 <MX_ADC1_Init+0x238>)
 80009d8:	f003 fc12 	bl	8004200 <HAL_ADC_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80009e2:	f000 fed1 	bl	8001788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009e6:	4b5d      	ldr	r3, [pc, #372]	@ (8000b5c <MX_ADC1_Init+0x244>)
 80009e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009ea:	230c      	movs	r3, #12
 80009ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ee:	463b      	mov	r3, r7
 80009f0:	4619      	mov	r1, r3
 80009f2:	4857      	ldr	r0, [pc, #348]	@ (8000b50 <MX_ADC1_Init+0x238>)
 80009f4:	f003 fc04 	bl	8004200 <HAL_ADC_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80009fe:	f000 fec3 	bl	8001788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a02:	4b57      	ldr	r3, [pc, #348]	@ (8000b60 <MX_ADC1_Init+0x248>)
 8000a04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a06:	2312      	movs	r3, #18
 8000a08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4850      	ldr	r0, [pc, #320]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000a10:	f003 fbf6 	bl	8004200 <HAL_ADC_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8000a1a:	f000 feb5 	bl	8001788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a1e:	4b51      	ldr	r3, [pc, #324]	@ (8000b64 <MX_ADC1_Init+0x24c>)
 8000a20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a22:	2318      	movs	r3, #24
 8000a24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a26:	463b      	mov	r3, r7
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4849      	ldr	r0, [pc, #292]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000a2c:	f003 fbe8 	bl	8004200 <HAL_ADC_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000a36:	f000 fea7 	bl	8001788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8000b68 <MX_ADC1_Init+0x250>)
 8000a3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	4619      	mov	r1, r3
 8000a48:	4841      	ldr	r0, [pc, #260]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000a4a:	f003 fbd9 	bl	8004200 <HAL_ADC_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8000a54:	f000 fe98 	bl	8001788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a58:	4b44      	ldr	r3, [pc, #272]	@ (8000b6c <MX_ADC1_Init+0x254>)
 8000a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a5c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000a60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	4619      	mov	r1, r3
 8000a66:	483a      	ldr	r0, [pc, #232]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000a68:	f003 fbca 	bl	8004200 <HAL_ADC_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8000a72:	f000 fe89 	bl	8001788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a76:	4b3e      	ldr	r3, [pc, #248]	@ (8000b70 <MX_ADC1_Init+0x258>)
 8000a78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000a7a:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000a7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	4619      	mov	r1, r3
 8000a84:	4832      	ldr	r0, [pc, #200]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000a86:	f003 fbbb 	bl	8004200 <HAL_ADC_ConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8000a90:	f000 fe7a 	bl	8001788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a94:	4b37      	ldr	r3, [pc, #220]	@ (8000b74 <MX_ADC1_Init+0x25c>)
 8000a96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a98:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000a9c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	482b      	ldr	r0, [pc, #172]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000aa4:	f003 fbac 	bl	8004200 <HAL_ADC_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
 8000aae:	f000 fe6b 	bl	8001788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ab2:	4b31      	ldr	r3, [pc, #196]	@ (8000b78 <MX_ADC1_Init+0x260>)
 8000ab4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000ab6:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000aba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000abc:	463b      	mov	r3, r7
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4823      	ldr	r0, [pc, #140]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000ac2:	f003 fb9d 	bl	8004200 <HAL_ADC_ConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
 8000acc:	f000 fe5c 	bl	8001788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b7c <MX_ADC1_Init+0x264>)
 8000ad2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000ad4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ad8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ada:	463b      	mov	r3, r7
 8000adc:	4619      	mov	r1, r3
 8000ade:	481c      	ldr	r0, [pc, #112]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000ae0:	f003 fb8e 	bl	8004200 <HAL_ADC_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 8000aea:	f000 fe4d 	bl	8001788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000aee:	4b24      	ldr	r3, [pc, #144]	@ (8000b80 <MX_ADC1_Init+0x268>)
 8000af0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000af2:	f240 2306 	movw	r3, #518	@ 0x206
 8000af6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af8:	463b      	mov	r3, r7
 8000afa:	4619      	mov	r1, r3
 8000afc:	4814      	ldr	r0, [pc, #80]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000afe:	f003 fb7f 	bl	8004200 <HAL_ADC_ConfigChannel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_ADC1_Init+0x1f4>
  {
    Error_Handler();
 8000b08:	f000 fe3e 	bl	8001788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b84 <MX_ADC1_Init+0x26c>)
 8000b0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000b10:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000b14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b16:	463b      	mov	r3, r7
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480d      	ldr	r0, [pc, #52]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000b1c:	f003 fb70 	bl	8004200 <HAL_ADC_ConfigChannel>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 8000b26:	f000 fe2f 	bl	8001788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <MX_ADC1_Init+0x270>)
 8000b2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000b2e:	f240 2312 	movw	r3, #530	@ 0x212
 8000b32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_ADC1_Init+0x238>)
 8000b3a:	f003 fb61 	bl	8004200 <HAL_ADC_ConfigChannel>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_ADC1_Init+0x230>
  {
    Error_Handler();
 8000b44:	f000 fe20 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	3720      	adds	r7, #32
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000028 	.word	0x20000028
 8000b54:	42028000 	.word	0x42028000
 8000b58:	04000002 	.word	0x04000002
 8000b5c:	08000004 	.word	0x08000004
 8000b60:	0c000008 	.word	0x0c000008
 8000b64:	10000010 	.word	0x10000010
 8000b68:	14000020 	.word	0x14000020
 8000b6c:	1c000080 	.word	0x1c000080
 8000b70:	20000100 	.word	0x20000100
 8000b74:	2a000400 	.word	0x2a000400
 8000b78:	2e000800 	.word	0x2e000800
 8000b7c:	32001000 	.word	0x32001000
 8000b80:	3e008000 	.word	0x3e008000
 8000b84:	42010000 	.word	0x42010000
 8000b88:	ce080000 	.word	0xce080000

08000b8c <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b92:	463b      	mov	r3, r7
 8000b94:	2220      	movs	r2, #32
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f010 fcde 	bl	801155a <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000b9e:	4b34      	ldr	r3, [pc, #208]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000ba0:	4a34      	ldr	r2, [pc, #208]	@ (8000c74 <MX_ADC4_Init+0xe8>)
 8000ba2:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ba4:	4b32      	ldr	r3, [pc, #200]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000baa:	4b31      	ldr	r3, [pc, #196]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bac:	2204      	movs	r2, #4
 8000bae:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8000bb6:	4b2e      	ldr	r3, [pc, #184]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bb8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000bbc:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000bca:	4b29      	ldr	r3, [pc, #164]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000bd0:	4b27      	ldr	r3, [pc, #156]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8000bd8:	4b25      	ldr	r3, [pc, #148]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bda:	2202      	movs	r2, #2
 8000bdc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bde:	4b24      	ldr	r3, [pc, #144]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be4:	4b22      	ldr	r3, [pc, #136]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000bea:	4b21      	ldr	r3, [pc, #132]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bf4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000bf8:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000c14:	4816      	ldr	r0, [pc, #88]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000c16:	f002 fbd9 	bl	80033cc <HAL_ADC_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8000c20:	f000 fdb2 	bl	8001788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c24:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <MX_ADC4_Init+0xec>)
 8000c26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c30:	2304      	movs	r3, #4
 8000c32:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000c3e:	f003 fadf 	bl	8004200 <HAL_ADC_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_ADC4_Init+0xc0>
  {
    Error_Handler();
 8000c48:	f000 fd9e 	bl	8001788 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <MX_ADC4_Init+0xf0>)
 8000c4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8000c50:	2304      	movs	r3, #4
 8000c52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c54:	463b      	mov	r3, r7
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <MX_ADC4_Init+0xe4>)
 8000c5a:	f003 fad1 	bl	8004200 <HAL_ADC_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_ADC4_Init+0xdc>
  {
    Error_Handler();
 8000c64:	f000 fd90 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200000b4 	.word	0x200000b4
 8000c74:	46021000 	.word	0x46021000
 8000c78:	1c000080 	.word	0x1c000080
 8000c7c:	20000100 	.word	0x20000100

08000c80 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000c86:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf8 <MX_DMA2D_Init+0x78>)
 8000c88:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000c90:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000c96:	4b17      	ldr	r3, [pc, #92]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000cae:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ccc:	4809      	ldr	r0, [pc, #36]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000cce:	f005 fa25 	bl	800611c <HAL_DMA2D_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000cd8:	f000 fd56 	bl	8001788 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000cdc:	2101      	movs	r1, #1
 8000cde:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <MX_DMA2D_Init+0x74>)
 8000ce0:	f005 fa7e 	bl	80061e0 <HAL_DMA2D_ConfigLayer>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000cea:	f000 fd4d 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000026c 	.word	0x2000026c
 8000cf8:	4002b000 	.word	0x4002b000

08000cfc <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000d02:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <MX_GPDMA1_Init+0x6c>)
 8000d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d08:	4a17      	ldr	r2, [pc, #92]	@ (8000d68 <MX_GPDMA1_Init+0x6c>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <MX_GPDMA1_Init+0x6c>)
 8000d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	201d      	movs	r0, #29
 8000d26:	f004 fa9b 	bl	8005260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000d2a:	201d      	movs	r0, #29
 8000d2c:	f004 fab2 	bl	8005294 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	201e      	movs	r0, #30
 8000d36:	f004 fa93 	bl	8005260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000d3a:	201e      	movs	r0, #30
 8000d3c:	f004 faaa 	bl	8005294 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	201f      	movs	r0, #31
 8000d46:	f004 fa8b 	bl	8005260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000d4a:	201f      	movs	r0, #31
 8000d4c:	f004 faa2 	bl	8005294 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2100      	movs	r1, #0
 8000d54:	2020      	movs	r0, #32
 8000d56:	f004 fa83 	bl	8005260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8000d5a:	2020      	movs	r0, #32
 8000d5c:	f004 fa9a 	bl	8005294 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	46020c00 	.word	0x46020c00

08000d6c <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000d72:	4a1c      	ldr	r2, [pc, #112]	@ (8000de4 <MX_HSPI1_Init+0x78>)
 8000d74:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000d78:	2204      	movs	r2, #4
 8000d7a:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000d82:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000d84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000d88:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000d8c:	221a      	movs	r2, #26
 8000d8e:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 8000d90:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000d92:	2202      	movs	r2, #2
 8000d94:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000d96:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000d9c:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000da2:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8000da8:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000dae:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8000db4:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8000dc0:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8000dcc:	4804      	ldr	r0, [pc, #16]	@ (8000de0 <MX_HSPI1_Init+0x74>)
 8000dce:	f00f ff5d 	bl	8010c8c <HAL_XSPI_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8000dd8:	f000 fcd6 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200002d4 	.word	0x200002d4
 8000de4:	420d3400 	.word	0x420d3400

08000de8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dec:	4b1b      	ldr	r3, [pc, #108]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000dee:	4a1c      	ldr	r2, [pc, #112]	@ (8000e60 <MX_I2C1_Init+0x78>)
 8000df0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8000df2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000df4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e64 <MX_I2C1_Init+0x7c>)
 8000df6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000df8:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dfe:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e04:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e10:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e16:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e22:	480e      	ldr	r0, [pc, #56]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e24:	f006 fd62 	bl	80078ec <HAL_I2C_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e2e:	f000 fcab 	bl	8001788 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4809      	ldr	r0, [pc, #36]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e36:	f007 fc04 	bl	8008642 <HAL_I2CEx_ConfigAnalogFilter>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e40:	f000 fca2 	bl	8001788 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e44:	2100      	movs	r1, #0
 8000e46:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <MX_I2C1_Init+0x74>)
 8000e48:	f007 fc46 	bl	80086d8 <HAL_I2CEx_ConfigDigitalFilter>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e52:	f000 fc99 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000334 	.word	0x20000334
 8000e60:	40005400 	.word	0x40005400
 8000e64:	20a0c4df 	.word	0x20a0c4df

08000e68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee0 <MX_I2C2_Init+0x78>)
 8000e70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8000e72:	4b1a      	ldr	r3, [pc, #104]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e74:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee4 <MX_I2C2_Init+0x7c>)
 8000e76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e78:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7e:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e84:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e8a:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e96:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ea2:	480e      	ldr	r0, [pc, #56]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000ea4:	f006 fd22 	bl	80078ec <HAL_I2C_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000eae:	f000 fc6b 	bl	8001788 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4809      	ldr	r0, [pc, #36]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000eb6:	f007 fbc4 	bl	8008642 <HAL_I2CEx_ConfigAnalogFilter>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ec0:	f000 fc62 	bl	8001788 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4805      	ldr	r0, [pc, #20]	@ (8000edc <MX_I2C2_Init+0x74>)
 8000ec8:	f007 fc06 	bl	80086d8 <HAL_I2CEx_ConfigDigitalFilter>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ed2:	f000 fc59 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000388 	.word	0x20000388
 8000ee0:	40005800 	.word	0x40005800
 8000ee4:	20a0c4df 	.word	0x20a0c4df

08000ee8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000eec:	2000      	movs	r0, #0
 8000eee:	f007 fc3f 	bl	8008770 <HAL_ICACHE_ConfigAssociativityMode>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000ef8:	f000 fc46 	bl	8001788 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000efc:	f007 fc58 	bl	80087b0 <HAL_ICACHE_Enable>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000f06:	f000 fc3f 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08e      	sub	sp, #56	@ 0x38
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2234      	movs	r2, #52	@ 0x34
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f010 fb1c 	bl	801155a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f22:	4b39      	ldr	r3, [pc, #228]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f24:	4a39      	ldr	r2, [pc, #228]	@ (800100c <MX_LTDC_Init+0xfc>)
 8000f26:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f28:	4b37      	ldr	r3, [pc, #220]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f2e:	4b36      	ldr	r3, [pc, #216]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f34:	4b34      	ldr	r3, [pc, #208]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f3a:	4b33      	ldr	r3, [pc, #204]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8000f40:	4b31      	ldr	r3, [pc, #196]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f42:	2203      	movs	r2, #3
 8000f44:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f46:	4b30      	ldr	r3, [pc, #192]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f48:	2203      	movs	r2, #3
 8000f4a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8000f4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f4e:	220b      	movs	r2, #11
 8000f50:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000f52:	4b2d      	ldr	r3, [pc, #180]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f54:	220b      	movs	r2, #11
 8000f56:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8000f58:	4b2b      	ldr	r3, [pc, #172]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f5a:	f240 322b 	movw	r2, #811	@ 0x32b
 8000f5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8000f60:	4b29      	ldr	r3, [pc, #164]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f62:	f240 12eb 	movw	r2, #491	@ 0x1eb
 8000f66:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8000f68:	4b27      	ldr	r3, [pc, #156]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f6a:	f240 3233 	movw	r2, #819	@ 0x333
 8000f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8000f70:	4b25      	ldr	r3, [pc, #148]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f72:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000f76:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f78:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f80:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f90:	481d      	ldr	r0, [pc, #116]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000f92:	f007 fc1d 	bl	80087d0 <HAL_LTDC_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000f9c:	f000 fbf4 	bl	8001788 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8000fa4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000fa8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000fae:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000fb2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000fb8:	23ff      	movs	r3, #255	@ 0xff
 8000fba:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000fc0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fc4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	4619      	mov	r1, r3
 8000fee:	4806      	ldr	r0, [pc, #24]	@ (8001008 <MX_LTDC_Init+0xf8>)
 8000ff0:	f007 fd80 	bl	8008af4 <HAL_LTDC_ConfigLayer>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8000ffa:	f000 fbc5 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	3738      	adds	r7, #56	@ 0x38
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200003dc 	.word	0x200003dc
 800100c:	40016800 	.word	0x40016800

08001010 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
 8001024:	615a      	str	r2, [r3, #20]
 8001026:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001028:	4b1e      	ldr	r3, [pc, #120]	@ (80010a4 <MX_RTC_Init+0x94>)
 800102a:	4a1f      	ldr	r2, [pc, #124]	@ (80010a8 <MX_RTC_Init+0x98>)
 800102c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800102e:	4b1d      	ldr	r3, [pc, #116]	@ (80010a4 <MX_RTC_Init+0x94>)
 8001030:	2200      	movs	r2, #0
 8001032:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001034:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <MX_RTC_Init+0x94>)
 8001036:	227f      	movs	r2, #127	@ 0x7f
 8001038:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800103a:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <MX_RTC_Init+0x94>)
 800103c:	22ff      	movs	r2, #255	@ 0xff
 800103e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001040:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <MX_RTC_Init+0x94>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001046:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <MX_RTC_Init+0x94>)
 8001048:	2200      	movs	r2, #0
 800104a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800104c:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <MX_RTC_Init+0x94>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001052:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <MX_RTC_Init+0x94>)
 8001054:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001058:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800105a:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <MX_RTC_Init+0x94>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001060:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <MX_RTC_Init+0x94>)
 8001062:	2200      	movs	r2, #0
 8001064:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001066:	480f      	ldr	r0, [pc, #60]	@ (80010a4 <MX_RTC_Init+0x94>)
 8001068:	f00c fc08 	bl	800d87c <HAL_RTC_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001072:	f000 fb89 	bl	8001788 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	@ (80010a4 <MX_RTC_Init+0x94>)
 800108c:	f00c fd24 	bl	800dad8 <HAL_RTCEx_PrivilegeModeSet>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8001096:	f000 fb77 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000484 	.word	0x20000484
 80010a8:	46007800 	.word	0x46007800

080010ac <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80010b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010b2:	4a30      	ldr	r2, [pc, #192]	@ (8001174 <MX_SAI2_Init+0xc8>)
 80010b4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80010b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80010bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80010c8:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010ce:	4b28      	ldr	r3, [pc, #160]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 80010d4:	4b26      	ldr	r3, [pc, #152]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010d6:	4a28      	ldr	r2, [pc, #160]	@ (8001178 <MX_SAI2_Init+0xcc>)
 80010d8:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010da:	4b25      	ldr	r3, [pc, #148]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 80010e0:	4b23      	ldr	r3, [pc, #140]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010e2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010e6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80010e8:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80010ee:	4b20      	ldr	r3, [pc, #128]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 80010f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <MX_SAI2_Init+0xc4>)
 80010f6:	2210      	movs	r2, #16
 80010f8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80010fa:	2302      	movs	r3, #2
 80010fc:	2202      	movs	r2, #2
 80010fe:	2101      	movs	r1, #1
 8001100:	481b      	ldr	r0, [pc, #108]	@ (8001170 <MX_SAI2_Init+0xc4>)
 8001102:	f00c fd17 	bl	800db34 <HAL_SAI_InitProtocol>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_SAI2_Init+0x64>
  {
    Error_Handler();
 800110c:	f000 fb3c 	bl	8001788 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001110:	4b1a      	ldr	r3, [pc, #104]	@ (800117c <MX_SAI2_Init+0xd0>)
 8001112:	4a1b      	ldr	r2, [pc, #108]	@ (8001180 <MX_SAI2_Init+0xd4>)
 8001114:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 8001116:	4b19      	ldr	r3, [pc, #100]	@ (800117c <MX_SAI2_Init+0xd0>)
 8001118:	2201      	movs	r2, #1
 800111a:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 800111c:	4b17      	ldr	r3, [pc, #92]	@ (800117c <MX_SAI2_Init+0xd0>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001122:	4b16      	ldr	r3, [pc, #88]	@ (800117c <MX_SAI2_Init+0xd0>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001128:	4b14      	ldr	r3, [pc, #80]	@ (800117c <MX_SAI2_Init+0xd0>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 800112e:	4b13      	ldr	r3, [pc, #76]	@ (800117c <MX_SAI2_Init+0xd0>)
 8001130:	2202      	movs	r2, #2
 8001132:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 8001134:	4b11      	ldr	r3, [pc, #68]	@ (800117c <MX_SAI2_Init+0xd0>)
 8001136:	4a10      	ldr	r2, [pc, #64]	@ (8001178 <MX_SAI2_Init+0xcc>)
 8001138:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800113a:	4b10      	ldr	r3, [pc, #64]	@ (800117c <MX_SAI2_Init+0xd0>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001140:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <MX_SAI2_Init+0xd0>)
 8001142:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001146:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <MX_SAI2_Init+0xd0>)
 800114a:	2200      	movs	r2, #0
 800114c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800114e:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <MX_SAI2_Init+0xd0>)
 8001150:	2200      	movs	r2, #0
 8001152:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001154:	2308      	movs	r3, #8
 8001156:	2202      	movs	r2, #2
 8001158:	2100      	movs	r1, #0
 800115a:	4808      	ldr	r0, [pc, #32]	@ (800117c <MX_SAI2_Init+0xd0>)
 800115c:	f00c fcea 	bl	800db34 <HAL_SAI_InitProtocol>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_SAI2_Init+0xbe>
  {
    Error_Handler();
 8001166:	f000 fb0f 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200004b4 	.word	0x200004b4
 8001174:	40015804 	.word	0x40015804
 8001178:	00017700 	.word	0x00017700
 800117c:	2000054c 	.word	0x2000054c
 8001180:	40015824 	.word	0x40015824

08001184 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	@ 0x28
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001196:	463b      	mov	r3, r7
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
 80011a4:	615a      	str	r2, [r3, #20]
 80011a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011a8:	4b25      	ldr	r3, [pc, #148]	@ (8001240 <MX_TIM3_Init+0xbc>)
 80011aa:	4a26      	ldr	r2, [pc, #152]	@ (8001244 <MX_TIM3_Init+0xc0>)
 80011ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 80011ae:	4b24      	ldr	r3, [pc, #144]	@ (8001240 <MX_TIM3_Init+0xbc>)
 80011b0:	22a0      	movs	r2, #160	@ 0xa0
 80011b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b4:	4b22      	ldr	r3, [pc, #136]	@ (8001240 <MX_TIM3_Init+0xbc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80011ba:	4b21      	ldr	r3, [pc, #132]	@ (8001240 <MX_TIM3_Init+0xbc>)
 80011bc:	2264      	movs	r2, #100	@ 0x64
 80011be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <MX_TIM3_Init+0xbc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001240 <MX_TIM3_Init+0xbc>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011cc:	481c      	ldr	r0, [pc, #112]	@ (8001240 <MX_TIM3_Init+0xbc>)
 80011ce:	f00d fc13 	bl	800e9f8 <HAL_TIM_PWM_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80011d8:	f000 fad6 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	4815      	ldr	r0, [pc, #84]	@ (8001240 <MX_TIM3_Init+0xbc>)
 80011ec:	f00e fbea 	bl	800f9c4 <HAL_TIMEx_MasterConfigSynchronization>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80011f6:	f000 fac7 	bl	8001788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011fa:	2360      	movs	r3, #96	@ 0x60
 80011fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 80011fe:	234b      	movs	r3, #75	@ 0x4b
 8001200:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800120a:	463b      	mov	r3, r7
 800120c:	220c      	movs	r2, #12
 800120e:	4619      	mov	r1, r3
 8001210:	480b      	ldr	r0, [pc, #44]	@ (8001240 <MX_TIM3_Init+0xbc>)
 8001212:	f00d fc49 	bl	800eaa8 <HAL_TIM_PWM_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800121c:	f000 fab4 	bl	8001788 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 8001220:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <MX_TIM3_Init+0xbc>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	69da      	ldr	r2, [r3, #28]
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <MX_TIM3_Init+0xbc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800122e:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001230:	4803      	ldr	r0, [pc, #12]	@ (8001240 <MX_TIM3_Init+0xbc>)
 8001232:	f001 f857 	bl	80022e4 <HAL_TIM_MspPostInit>

}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	@ 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000074c 	.word	0x2000074c
 8001244:	40000400 	.word	0x40000400

08001248 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001266:	4b1e      	ldr	r3, [pc, #120]	@ (80012e0 <MX_TIM15_Init+0x98>)
 8001268:	4a1e      	ldr	r2, [pc, #120]	@ (80012e4 <MX_TIM15_Init+0x9c>)
 800126a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 26;
 800126c:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <MX_TIM15_Init+0x98>)
 800126e:	221a      	movs	r2, #26
 8001270:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001272:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <MX_TIM15_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 49;
 8001278:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <MX_TIM15_Init+0x98>)
 800127a:	2231      	movs	r2, #49	@ 0x31
 800127c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127e:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <MX_TIM15_Init+0x98>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001284:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <MX_TIM15_Init+0x98>)
 8001286:	2200      	movs	r2, #0
 8001288:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <MX_TIM15_Init+0x98>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001290:	4813      	ldr	r0, [pc, #76]	@ (80012e0 <MX_TIM15_Init+0x98>)
 8001292:	f00d fac2 	bl	800e81a <HAL_TIM_Base_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 800129c:	f000 fa74 	bl	8001788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	4619      	mov	r1, r3
 80012ac:	480c      	ldr	r0, [pc, #48]	@ (80012e0 <MX_TIM15_Init+0x98>)
 80012ae:	f00d fd0f 	bl	800ecd0 <HAL_TIM_ConfigClockSource>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 80012b8:	f000 fa66 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012bc:	2320      	movs	r3, #32
 80012be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	@ (80012e0 <MX_TIM15_Init+0x98>)
 80012ca:	f00e fb7b 	bl	800f9c4 <HAL_TIMEx_MasterConfigSynchronization>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 80012d4:	f000 fa58 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000798 	.word	0x20000798
 80012e4:	40014000 	.word	0x40014000

080012e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012ec:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 80012ee:	4a23      	ldr	r2, [pc, #140]	@ (800137c <MX_USART1_UART_Init+0x94>)
 80012f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012f2:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 80012f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001300:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001306:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800130c:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 800130e:	220c      	movs	r2, #12
 8001310:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001312:	4b19      	ldr	r3, [pc, #100]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001318:	4b17      	ldr	r3, [pc, #92]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800131e:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001324:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800132a:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001330:	4811      	ldr	r0, [pc, #68]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001332:	f00e fc09 	bl	800fb48 <HAL_UART_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800133c:	f000 fa24 	bl	8001788 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001340:	2100      	movs	r1, #0
 8001342:	480d      	ldr	r0, [pc, #52]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001344:	f00f fbd7 	bl	8010af6 <HAL_UARTEx_SetTxFifoThreshold>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800134e:	f000 fa1b 	bl	8001788 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001352:	2100      	movs	r1, #0
 8001354:	4808      	ldr	r0, [pc, #32]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001356:	f00f fc0c 	bl	8010b72 <HAL_UARTEx_SetRxFifoThreshold>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001360:	f000 fa12 	bl	8001788 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001364:	4804      	ldr	r0, [pc, #16]	@ (8001378 <MX_USART1_UART_Init+0x90>)
 8001366:	f00f fb8d 	bl	8010a84 <HAL_UARTEx_DisableFifoMode>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001370:	f000 fa0a 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200007e4 	.word	0x200007e4
 800137c:	40013800 	.word	0x40013800

08001380 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001384:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001386:	4a14      	ldr	r2, [pc, #80]	@ (80013d8 <MX_USB_OTG_HS_PCD_Init+0x58>)
 8001388:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800138a:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800138c:	2209      	movs	r2, #9
 800138e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001390:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001392:	2200      	movs	r2, #0
 8001394:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 8001396:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001398:	2203      	movs	r2, #3
 800139a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800139c:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800139e:	2200      	movs	r2, #0
 80013a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80013b4:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013bc:	2200      	movs	r2, #0
 80013be:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	@ (80013d4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013c2:	f007 fd48 	bl	8008e56 <HAL_PCD_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 80013cc:	f000 f9dc 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000878 	.word	0x20000878
 80013d8:	42040000 	.word	0x42040000

080013dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	@ 0x38
 80013e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f2:	4b8c      	ldr	r3, [pc, #560]	@ (8001624 <MX_GPIO_Init+0x248>)
 80013f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013f8:	4a8a      	ldr	r2, [pc, #552]	@ (8001624 <MX_GPIO_Init+0x248>)
 80013fa:	f043 0310 	orr.w	r3, r3, #16
 80013fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001402:	4b88      	ldr	r3, [pc, #544]	@ (8001624 <MX_GPIO_Init+0x248>)
 8001404:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001408:	f003 0310 	and.w	r3, r3, #16
 800140c:	623b      	str	r3, [r7, #32]
 800140e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001410:	4b84      	ldr	r3, [pc, #528]	@ (8001624 <MX_GPIO_Init+0x248>)
 8001412:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001416:	4a83      	ldr	r2, [pc, #524]	@ (8001624 <MX_GPIO_Init+0x248>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001420:	4b80      	ldr	r3, [pc, #512]	@ (8001624 <MX_GPIO_Init+0x248>)
 8001422:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800142e:	4b7d      	ldr	r3, [pc, #500]	@ (8001624 <MX_GPIO_Init+0x248>)
 8001430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001434:	4a7b      	ldr	r2, [pc, #492]	@ (8001624 <MX_GPIO_Init+0x248>)
 8001436:	f043 0320 	orr.w	r3, r3, #32
 800143a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800143e:	4b79      	ldr	r3, [pc, #484]	@ (8001624 <MX_GPIO_Init+0x248>)
 8001440:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001444:	f003 0320 	and.w	r3, r3, #32
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144c:	4b75      	ldr	r3, [pc, #468]	@ (8001624 <MX_GPIO_Init+0x248>)
 800144e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001452:	4a74      	ldr	r2, [pc, #464]	@ (8001624 <MX_GPIO_Init+0x248>)
 8001454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001458:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800145c:	4b71      	ldr	r3, [pc, #452]	@ (8001624 <MX_GPIO_Init+0x248>)
 800145e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b6e      	ldr	r3, [pc, #440]	@ (8001624 <MX_GPIO_Init+0x248>)
 800146c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001470:	4a6c      	ldr	r2, [pc, #432]	@ (8001624 <MX_GPIO_Init+0x248>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800147a:	4b6a      	ldr	r3, [pc, #424]	@ (8001624 <MX_GPIO_Init+0x248>)
 800147c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001488:	4b66      	ldr	r3, [pc, #408]	@ (8001624 <MX_GPIO_Init+0x248>)
 800148a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800148e:	4a65      	ldr	r2, [pc, #404]	@ (8001624 <MX_GPIO_Init+0x248>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001498:	4b62      	ldr	r3, [pc, #392]	@ (8001624 <MX_GPIO_Init+0x248>)
 800149a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001624 <MX_GPIO_Init+0x248>)
 80014a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ac:	4a5d      	ldr	r2, [pc, #372]	@ (8001624 <MX_GPIO_Init+0x248>)
 80014ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001624 <MX_GPIO_Init+0x248>)
 80014b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c4:	4b57      	ldr	r3, [pc, #348]	@ (8001624 <MX_GPIO_Init+0x248>)
 80014c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ca:	4a56      	ldr	r2, [pc, #344]	@ (8001624 <MX_GPIO_Init+0x248>)
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014d4:	4b53      	ldr	r3, [pc, #332]	@ (8001624 <MX_GPIO_Init+0x248>)
 80014d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80014e2:	4b50      	ldr	r3, [pc, #320]	@ (8001624 <MX_GPIO_Init+0x248>)
 80014e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001624 <MX_GPIO_Init+0x248>)
 80014ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001624 <MX_GPIO_Init+0x248>)
 80014f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	2104      	movs	r1, #4
 8001504:	4848      	ldr	r0, [pc, #288]	@ (8001628 <MX_GPIO_Init+0x24c>)
 8001506:	f006 f99d 	bl	8007844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	2110      	movs	r1, #16
 800150e:	4846      	ldr	r0, [pc, #280]	@ (8001628 <MX_GPIO_Init+0x24c>)
 8001510:	f006 f998 	bl	8007844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2114      	movs	r1, #20
 8001518:	4844      	ldr	r0, [pc, #272]	@ (800162c <MX_GPIO_Init+0x250>)
 800151a:	f006 f993 	bl	8007844 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 800151e:	2314      	movs	r3, #20
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	483c      	ldr	r0, [pc, #240]	@ (8001628 <MX_GPIO_Init+0x24c>)
 8001536:	f005 ffad 	bl	8007494 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 800153a:	2320      	movs	r3, #32
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800153e:	4b3c      	ldr	r3, [pc, #240]	@ (8001630 <MX_GPIO_Init+0x254>)
 8001540:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154a:	4619      	mov	r1, r3
 800154c:	4836      	ldr	r0, [pc, #216]	@ (8001628 <MX_GPIO_Init+0x24c>)
 800154e:	f005 ffa1 	bl	8007494 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 8001552:	2302      	movs	r3, #2
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001556:	4b37      	ldr	r3, [pc, #220]	@ (8001634 <MX_GPIO_Init+0x258>)
 8001558:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 800155e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001562:	4619      	mov	r1, r3
 8001564:	4834      	ldr	r0, [pc, #208]	@ (8001638 <MX_GPIO_Init+0x25c>)
 8001566:	f005 ff95 	bl	8007494 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 800156a:	2310      	movs	r3, #16
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800156e:	4b33      	ldr	r3, [pc, #204]	@ (800163c <MX_GPIO_Init+0x260>)
 8001570:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001572:	2301      	movs	r3, #1
 8001574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800157a:	4619      	mov	r1, r3
 800157c:	482e      	ldr	r0, [pc, #184]	@ (8001638 <MX_GPIO_Init+0x25c>)
 800157e:	f005 ff89 	bl	8007494 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 8001582:	2314      	movs	r3, #20
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001596:	4619      	mov	r1, r3
 8001598:	4824      	ldr	r0, [pc, #144]	@ (800162c <MX_GPIO_Init+0x250>)
 800159a:	f005 ff7b 	bl	8007494 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 800159e:	2380      	movs	r3, #128	@ 0x80
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ae:	4619      	mov	r1, r3
 80015b0:	481e      	ldr	r0, [pc, #120]	@ (800162c <MX_GPIO_Init+0x250>)
 80015b2:	f005 ff6f 	bl	8007494 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 80015b6:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c8:	4619      	mov	r1, r3
 80015ca:	481d      	ldr	r0, [pc, #116]	@ (8001640 <MX_GPIO_Init+0x264>)
 80015cc:	f005 ff62 	bl	8007494 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 80015d0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e2:	4619      	mov	r1, r3
 80015e4:	4817      	ldr	r0, [pc, #92]	@ (8001644 <MX_GPIO_Init+0x268>)
 80015e6:	f005 ff55 	bl	8007494 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	200c      	movs	r0, #12
 80015f0:	f003 fe36 	bl	8005260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80015f4:	200c      	movs	r0, #12
 80015f6:	f003 fe4d 	bl	8005294 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	200f      	movs	r0, #15
 8001600:	f003 fe2e 	bl	8005260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001604:	200f      	movs	r0, #15
 8001606:	f003 fe45 	bl	8005294 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2010      	movs	r0, #16
 8001610:	f003 fe26 	bl	8005260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8001614:	2010      	movs	r0, #16
 8001616:	f003 fe3d 	bl	8005294 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800161a:	bf00      	nop
 800161c:	3738      	adds	r7, #56	@ 0x38
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	46020c00 	.word	0x46020c00
 8001628:	42021000 	.word	0x42021000
 800162c:	42020c00 	.word	0x42020c00
 8001630:	10110000 	.word	0x10110000
 8001634:	10310000 	.word	0x10310000
 8001638:	42020000 	.word	0x42020000
 800163c:	10210000 	.word	0x10210000
 8001640:	42021800 	.word	0x42021800
 8001644:	42020400 	.word	0x42020400

08001648 <HAL_ADC_ConvHalfCpltCallback>:
	temp = temp / denoiseSize;
	return temp;
}

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001648:	b480      	push	{r7}
 800164a:	b087      	sub	sp, #28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	uint16_t dacSlot = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (sampleSize * 8 ) / 2; i += 8)
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	e033      	b.n	80016c2 <HAL_ADC_ConvHalfCpltCallback+0x7a>
	{
		float convert = ((((float)pcmData[i] * gain) / 16777216.0f) - 0.5f) * 2.0f;
 800165a:	4a1f      	ldr	r2, [pc, #124]	@ (80016d8 <HAL_ADC_ConvHalfCpltCallback+0x90>)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001662:	ee07 3a90 	vmov	s15, r3
 8001666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800166a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800166e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001672:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80016dc <HAL_ADC_ConvHalfCpltCallback+0x94>
 8001676:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800167a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800167e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001682:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001686:	edc7 7a03 	vstr	s15, [r7, #12]
		int32_t output = (int32_t)(convert * 8388608);
 800168a:	edd7 7a03 	vldr	s15, [r7, #12]
 800168e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80016e0 <HAL_ADC_ConvHalfCpltCallback+0x98>
 8001692:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800169a:	ee17 3a90 	vmov	r3, s15
 800169e:	60bb      	str	r3, [r7, #8]

		dacData[dacSlot] = output;
 80016a0:	8afb      	ldrh	r3, [r7, #22]
 80016a2:	4910      	ldr	r1, [pc, #64]	@ (80016e4 <HAL_ADC_ConvHalfCpltCallback+0x9c>)
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacData[dacSlot + 1] = output;
 80016aa:	8afb      	ldrh	r3, [r7, #22]
 80016ac:	3301      	adds	r3, #1
 80016ae:	490d      	ldr	r1, [pc, #52]	@ (80016e4 <HAL_ADC_ConvHalfCpltCallback+0x9c>)
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacSlot += 2;
 80016b6:	8afb      	ldrh	r3, [r7, #22]
 80016b8:	3302      	adds	r3, #2
 80016ba:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (sampleSize * 8 ) / 2; i += 8)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	3308      	adds	r3, #8
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016c8:	dbc7      	blt.n	800165a <HAL_ADC_ConvHalfCpltCallback+0x12>
	}
}
 80016ca:	bf00      	nop
 80016cc:	bf00      	nop
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	20002760 	.word	0x20002760
 80016dc:	4b800000 	.word	0x4b800000
 80016e0:	4b000000 	.word	0x4b000000
 80016e4:	20004760 	.word	0x20004760

080016e8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	uint16_t dacSlot = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	82fb      	strh	r3, [r7, #22]
	for(int i = ((sampleSize * 8)) / 2; i < sampleSize; i += 8)
 80016f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	e033      	b.n	8001764 <HAL_ADC_ConvCpltCallback+0x7c>
	{
		float convert = ((((float)pcmData[i] * gain) / 16777216.0f) - 0.5f) * 2.0f;
 80016fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001778 <HAL_ADC_ConvCpltCallback+0x90>)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001704:	ee07 3a90 	vmov	s15, r3
 8001708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800170c:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001710:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001714:	eddf 6a19 	vldr	s13, [pc, #100]	@ 800177c <HAL_ADC_ConvCpltCallback+0x94>
 8001718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800171c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001720:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001724:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001728:	edc7 7a03 	vstr	s15, [r7, #12]
		int32_t output = (int32_t)(convert * 8388608);
 800172c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001730:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001780 <HAL_ADC_ConvCpltCallback+0x98>
 8001734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001738:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800173c:	ee17 3a90 	vmov	r3, s15
 8001740:	60bb      	str	r3, [r7, #8]

		dacData[dacSlot] = output;
 8001742:	8afb      	ldrh	r3, [r7, #22]
 8001744:	490f      	ldr	r1, [pc, #60]	@ (8001784 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacData[dacSlot + 1] = output;
 800174c:	8afb      	ldrh	r3, [r7, #22]
 800174e:	3301      	adds	r3, #1
 8001750:	490c      	ldr	r1, [pc, #48]	@ (8001784 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacSlot += 2;
 8001758:	8afb      	ldrh	r3, [r7, #22]
 800175a:	3302      	adds	r3, #2
 800175c:	82fb      	strh	r3, [r7, #22]
	for(int i = ((sampleSize * 8)) / 2; i < sampleSize; i += 8)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	3308      	adds	r3, #8
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	2bff      	cmp	r3, #255	@ 0xff
 8001768:	ddc8      	ble.n	80016fc <HAL_ADC_ConvCpltCallback+0x14>
	}
}
 800176a:	bf00      	nop
 800176c:	bf00      	nop
 800176e:	371c      	adds	r7, #28
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	20002760 	.word	0x20002760
 800177c:	4b800000 	.word	0x4b800000
 8001780:	4b000000 	.word	0x4b000000
 8001784:	20004760 	.word	0x20004760

08001788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800178c:	b672      	cpsid	i
}
 800178e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <Error_Handler+0x8>

08001794 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <HAL_MspInit+0x30>)
 800179c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017a0:	4a08      	ldr	r2, [pc, #32]	@ (80017c4 <HAL_MspInit+0x30>)
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <HAL_MspInit+0x30>)
 80017ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 80017b8:	f007 fd8a 	bl	80092d0 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	46020c00 	.word	0x46020c00

080017c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b0e0      	sub	sp, #384	@ 0x180
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017d2:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80017d6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017ec:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80017f0:	4618      	mov	r0, r3
 80017f2:	23e0      	movs	r3, #224	@ 0xe0
 80017f4:	461a      	mov	r2, r3
 80017f6:	2100      	movs	r1, #0
 80017f8:	f00f feaf 	bl	801155a <memset>
  if(hadc->Instance==ADC1)
 80017fc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001800:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4aa1      	ldr	r2, [pc, #644]	@ (8001a90 <HAL_ADC_MspInit+0x2c8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	f040 8152 	bne.w	8001ab4 <HAL_ADC_MspInit+0x2ec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001810:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001814:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001818:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001824:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001828:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800182c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001830:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001834:	f107 0320 	add.w	r3, r7, #32
 8001838:	4618      	mov	r0, r3
 800183a:	f009 f823 	bl	800a884 <HAL_RCCEx_PeriphCLKConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8001844:	f7ff ffa0 	bl	8001788 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001848:	4b92      	ldr	r3, [pc, #584]	@ (8001a94 <HAL_ADC_MspInit+0x2cc>)
 800184a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800184e:	4a91      	ldr	r2, [pc, #580]	@ (8001a94 <HAL_ADC_MspInit+0x2cc>)
 8001850:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001854:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001858:	4b8e      	ldr	r3, [pc, #568]	@ (8001a94 <HAL_ADC_MspInit+0x2cc>)
 800185a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800185e:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001862:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001866:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001870:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001874:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001876:	4b87      	ldr	r3, [pc, #540]	@ (8001a94 <HAL_ADC_MspInit+0x2cc>)
 8001878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800187c:	4a85      	ldr	r2, [pc, #532]	@ (8001a94 <HAL_ADC_MspInit+0x2cc>)
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001886:	4b83      	ldr	r3, [pc, #524]	@ (8001a94 <HAL_ADC_MspInit+0x2cc>)
 8001888:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800188c:	f003 0204 	and.w	r2, r3, #4
 8001890:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001894:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800189e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018a2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	4b7b      	ldr	r3, [pc, #492]	@ (8001a94 <HAL_ADC_MspInit+0x2cc>)
 80018a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018aa:	4a7a      	ldr	r2, [pc, #488]	@ (8001a94 <HAL_ADC_MspInit+0x2cc>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018b4:	4b77      	ldr	r3, [pc, #476]	@ (8001a94 <HAL_ADC_MspInit+0x2cc>)
 80018b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018ba:	f003 0201 	and.w	r2, r3, #1
 80018be:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018c2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018cc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018d0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d2:	4b70      	ldr	r3, [pc, #448]	@ (8001a94 <HAL_ADC_MspInit+0x2cc>)
 80018d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018d8:	4a6e      	ldr	r2, [pc, #440]	@ (8001a94 <HAL_ADC_MspInit+0x2cc>)
 80018da:	f043 0302 	orr.w	r3, r3, #2
 80018de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018e2:	4b6c      	ldr	r3, [pc, #432]	@ (8001a94 <HAL_ADC_MspInit+0x2cc>)
 80018e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018e8:	f003 0202 	and.w	r2, r3, #2
 80018ec:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018f0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018fa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80018fe:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 8001900:	230f      	movs	r3, #15
 8001902:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001906:	2303      	movs	r3, #3
 8001908:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001912:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001916:	4619      	mov	r1, r3
 8001918:	485f      	ldr	r0, [pc, #380]	@ (8001a98 <HAL_ADC_MspInit+0x2d0>)
 800191a:	f005 fdbb 	bl	8007494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 800191e:	23ed      	movs	r3, #237	@ 0xed
 8001920:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001924:	2303      	movs	r3, #3
 8001926:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001934:	4619      	mov	r1, r3
 8001936:	4859      	ldr	r0, [pc, #356]	@ (8001a9c <HAL_ADC_MspInit+0x2d4>)
 8001938:	f005 fdac 	bl	8007494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 800193c:	2303      	movs	r3, #3
 800193e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001942:	2303      	movs	r3, #3
 8001944:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194e:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001952:	4619      	mov	r1, r3
 8001954:	4852      	ldr	r0, [pc, #328]	@ (8001aa0 <HAL_ADC_MspInit+0x2d8>)
 8001956:	f005 fd9d 	bl	8007494 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800195a:	2321      	movs	r3, #33	@ 0x21
 800195c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8001960:	2300      	movs	r3, #0
 8001962:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001972:	2300      	movs	r3, #0
 8001974:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001978:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800197c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001980:	2301      	movs	r3, #1
 8001982:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001986:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800198a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcBurstLength = 1;
 800198e:	2301      	movs	r3, #1
 8001990:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.DestBurstLength = 1;
 8001994:	2301      	movs	r3, #1
 8001996:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 800199a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800199e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Mode = DMA_NORMAL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 80019b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019b8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 80019bc:	232b      	movs	r3, #43	@ 0x2b
 80019be:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80019ce:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80019d2:	4934      	ldr	r1, [pc, #208]	@ (8001aa4 <HAL_ADC_MspInit+0x2dc>)
 80019d4:	4618      	mov	r0, r3
 80019d6:	f004 fe71 	bl	80066bc <HAL_DMAEx_List_BuildNode>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_ADC_MspInit+0x21c>
    {
      Error_Handler();
 80019e0:	f7ff fed2 	bl	8001788 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80019e4:	4a2f      	ldr	r2, [pc, #188]	@ (8001aa4 <HAL_ADC_MspInit+0x2dc>)
 80019e6:	2100      	movs	r1, #0
 80019e8:	482f      	ldr	r0, [pc, #188]	@ (8001aa8 <HAL_ADC_MspInit+0x2e0>)
 80019ea:	f004 fe93 	bl	8006714 <HAL_DMAEx_List_InsertNode>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 80019f4:	f7ff fec8 	bl	8001788 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 80019f8:	482b      	ldr	r0, [pc, #172]	@ (8001aa8 <HAL_ADC_MspInit+0x2e0>)
 80019fa:	f004 ff54 	bl	80068a6 <HAL_DMAEx_List_SetCircularMode>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_ADC_MspInit+0x240>
    {
      Error_Handler();
 8001a04:	f7ff fec0 	bl	8001788 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001a08:	4b28      	ldr	r3, [pc, #160]	@ (8001aac <HAL_ADC_MspInit+0x2e4>)
 8001a0a:	4a29      	ldr	r2, [pc, #164]	@ (8001ab0 <HAL_ADC_MspInit+0x2e8>)
 8001a0c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001a0e:	4b27      	ldr	r3, [pc, #156]	@ (8001aac <HAL_ADC_MspInit+0x2e4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001a14:	4b25      	ldr	r3, [pc, #148]	@ (8001aac <HAL_ADC_MspInit+0x2e4>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001a1a:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <HAL_ADC_MspInit+0x2e4>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001a20:	4b22      	ldr	r3, [pc, #136]	@ (8001aac <HAL_ADC_MspInit+0x2e4>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001a26:	4b21      	ldr	r3, [pc, #132]	@ (8001aac <HAL_ADC_MspInit+0x2e4>)
 8001a28:	2281      	movs	r2, #129	@ 0x81
 8001a2a:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001a2c:	481f      	ldr	r0, [pc, #124]	@ (8001aac <HAL_ADC_MspInit+0x2e4>)
 8001a2e:	f004 fc85 	bl	800633c <HAL_DMAEx_List_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_ADC_MspInit+0x274>
    {
      Error_Handler();
 8001a38:	f7ff fea6 	bl	8001788 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8001a3c:	491a      	ldr	r1, [pc, #104]	@ (8001aa8 <HAL_ADC_MspInit+0x2e0>)
 8001a3e:	481b      	ldr	r0, [pc, #108]	@ (8001aac <HAL_ADC_MspInit+0x2e4>)
 8001a40:	f004 ff92 	bl	8006968 <HAL_DMAEx_List_LinkQ>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_ADC_MspInit+0x286>
    {
      Error_Handler();
 8001a4a:	f7ff fe9d 	bl	8001788 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8001a4e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a52:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a14      	ldr	r2, [pc, #80]	@ (8001aac <HAL_ADC_MspInit+0x2e4>)
 8001a5a:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a5c:	4a13      	ldr	r2, [pc, #76]	@ (8001aac <HAL_ADC_MspInit+0x2e4>)
 8001a5e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a62:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a6a:	2110      	movs	r1, #16
 8001a6c:	480f      	ldr	r0, [pc, #60]	@ (8001aac <HAL_ADC_MspInit+0x2e4>)
 8001a6e:	f004 f873 	bl	8005b58 <HAL_DMA_ConfigChannelAttributes>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_ADC_MspInit+0x2b4>
    {
      Error_Handler();
 8001a78:	f7ff fe86 	bl	8001788 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2025      	movs	r0, #37	@ 0x25
 8001a82:	f003 fbed 	bl	8005260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a86:	2025      	movs	r0, #37	@ 0x25
 8001a88:	f003 fc04 	bl	8005294 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001a8c:	e0c0      	b.n	8001c10 <HAL_ADC_MspInit+0x448>
 8001a8e:	bf00      	nop
 8001a90:	42028000 	.word	0x42028000
 8001a94:	46020c00 	.word	0x46020c00
 8001a98:	42020800 	.word	0x42020800
 8001a9c:	42020000 	.word	0x42020000
 8001aa0:	42020400 	.word	0x42020400
 8001aa4:	20000140 	.word	0x20000140
 8001aa8:	20000164 	.word	0x20000164
 8001aac:	2000017c 	.word	0x2000017c
 8001ab0:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 8001ab4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001ab8:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a56      	ldr	r2, [pc, #344]	@ (8001c1c <HAL_ADC_MspInit+0x454>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	f040 80a4 	bne.w	8001c10 <HAL_ADC_MspInit+0x448>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001ac8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001acc:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001ad0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001adc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001ae0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001ae4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ae8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aec:	f107 0320 	add.w	r3, r7, #32
 8001af0:	4618      	mov	r0, r3
 8001af2:	f008 fec7 	bl	800a884 <HAL_RCCEx_PeriphCLKConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_ADC_MspInit+0x338>
      Error_Handler();
 8001afc:	f7ff fe44 	bl	8001788 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8001b00:	4b47      	ldr	r3, [pc, #284]	@ (8001c20 <HAL_ADC_MspInit+0x458>)
 8001b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b06:	4a46      	ldr	r2, [pc, #280]	@ (8001c20 <HAL_ADC_MspInit+0x458>)
 8001b08:	f043 0320 	orr.w	r3, r3, #32
 8001b0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001b10:	4b43      	ldr	r3, [pc, #268]	@ (8001c20 <HAL_ADC_MspInit+0x458>)
 8001b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b16:	f003 0220 	and.w	r2, r3, #32
 8001b1a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b1e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b28:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b2c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c20 <HAL_ADC_MspInit+0x458>)
 8001b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b34:	4a3a      	ldr	r2, [pc, #232]	@ (8001c20 <HAL_ADC_MspInit+0x458>)
 8001b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b3e:	4b38      	ldr	r3, [pc, #224]	@ (8001c20 <HAL_ADC_MspInit+0x458>)
 8001b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b44:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001b48:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b4c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b56:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001b5a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b62:	2303      	movs	r3, #3
 8001b64:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b6e:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001b72:	4619      	mov	r1, r3
 8001b74:	482b      	ldr	r0, [pc, #172]	@ (8001c24 <HAL_ADC_MspInit+0x45c>)
 8001b76:	f005 fc8d 	bl	8007494 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c28 <HAL_ADC_MspInit+0x460>)
 8001b7c:	4a2b      	ldr	r2, [pc, #172]	@ (8001c2c <HAL_ADC_MspInit+0x464>)
 8001b7e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8001b80:	4b29      	ldr	r3, [pc, #164]	@ (8001c28 <HAL_ADC_MspInit+0x460>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001b86:	4b28      	ldr	r3, [pc, #160]	@ (8001c28 <HAL_ADC_MspInit+0x460>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b8c:	4b26      	ldr	r3, [pc, #152]	@ (8001c28 <HAL_ADC_MspInit+0x460>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001b92:	4b25      	ldr	r3, [pc, #148]	@ (8001c28 <HAL_ADC_MspInit+0x460>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001b98:	4b23      	ldr	r3, [pc, #140]	@ (8001c28 <HAL_ADC_MspInit+0x460>)
 8001b9a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b9e:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001ba0:	4b21      	ldr	r3, [pc, #132]	@ (8001c28 <HAL_ADC_MspInit+0x460>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001ba6:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <HAL_ADC_MspInit+0x460>)
 8001ba8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bac:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001bae:	4b1e      	ldr	r3, [pc, #120]	@ (8001c28 <HAL_ADC_MspInit+0x460>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c28 <HAL_ADC_MspInit+0x460>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8001bba:	4b1b      	ldr	r3, [pc, #108]	@ (8001c28 <HAL_ADC_MspInit+0x460>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001bc0:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <HAL_ADC_MspInit+0x460>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <HAL_ADC_MspInit+0x460>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8001bcc:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <HAL_ADC_MspInit+0x460>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001bd2:	4815      	ldr	r0, [pc, #84]	@ (8001c28 <HAL_ADC_MspInit+0x460>)
 8001bd4:	f003 fc20 	bl	8005418 <HAL_DMA_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_ADC_MspInit+0x41a>
      Error_Handler();
 8001bde:	f7ff fdd3 	bl	8001788 <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 8001be2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001be6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0e      	ldr	r2, [pc, #56]	@ (8001c28 <HAL_ADC_MspInit+0x460>)
 8001bee:	671a      	str	r2, [r3, #112]	@ 0x70
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c28 <HAL_ADC_MspInit+0x460>)
 8001bf2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001bf6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001bfe:	2110      	movs	r1, #16
 8001c00:	4809      	ldr	r0, [pc, #36]	@ (8001c28 <HAL_ADC_MspInit+0x460>)
 8001c02:	f003 ffa9 	bl	8005b58 <HAL_DMA_ConfigChannelAttributes>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <HAL_ADC_MspInit+0x448>
      Error_Handler();
 8001c0c:	f7ff fdbc 	bl	8001788 <Error_Handler>
}
 8001c10:	bf00      	nop
 8001c12:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	46021000 	.word	0x46021000
 8001c20:	46020c00 	.word	0x46020c00
 8001c24:	42021800 	.word	0x42021800
 8001c28:	200001f4 	.word	0x200001f4
 8001c2c:	40020150 	.word	0x40020150

08001c30 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c6c <HAL_DMA2D_MspInit+0x3c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d10e      	bne.n	8001c60 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c42:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <HAL_DMA2D_MspInit+0x40>)
 8001c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c48:	4a09      	ldr	r2, [pc, #36]	@ (8001c70 <HAL_DMA2D_MspInit+0x40>)
 8001c4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c4e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001c52:	4b07      	ldr	r3, [pc, #28]	@ (8001c70 <HAL_DMA2D_MspInit+0x40>)
 8001c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	4002b000 	.word	0x4002b000
 8001c70:	46020c00 	.word	0x46020c00

08001c74 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	@ 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a2a      	ldr	r2, [pc, #168]	@ (8001d3c <HAL_XSPI_MspInit+0xc8>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d14d      	bne.n	8001d32 <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 8001c96:	4b2a      	ldr	r3, [pc, #168]	@ (8001d40 <HAL_XSPI_MspInit+0xcc>)
 8001c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c9c:	4a28      	ldr	r2, [pc, #160]	@ (8001d40 <HAL_XSPI_MspInit+0xcc>)
 8001c9e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ca2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ca6:	4b26      	ldr	r3, [pc, #152]	@ (8001d40 <HAL_XSPI_MspInit+0xcc>)
 8001ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cb4:	4b22      	ldr	r3, [pc, #136]	@ (8001d40 <HAL_XSPI_MspInit+0xcc>)
 8001cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cba:	4a21      	ldr	r2, [pc, #132]	@ (8001d40 <HAL_XSPI_MspInit+0xcc>)
 8001cbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cc0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d40 <HAL_XSPI_MspInit+0xcc>)
 8001cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d40 <HAL_XSPI_MspInit+0xcc>)
 8001cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cd8:	4a19      	ldr	r2, [pc, #100]	@ (8001d40 <HAL_XSPI_MspInit+0xcc>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cde:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ce2:	4b17      	ldr	r3, [pc, #92]	@ (8001d40 <HAL_XSPI_MspInit+0xcc>)
 8001ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001cf0:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8001cf4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001d02:	2308      	movs	r3, #8
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	480d      	ldr	r0, [pc, #52]	@ (8001d44 <HAL_XSPI_MspInit+0xd0>)
 8001d0e:	f005 fbc1 	bl	8007494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001d12:	230f      	movs	r3, #15
 8001d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001d22:	2308      	movs	r3, #8
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4806      	ldr	r0, [pc, #24]	@ (8001d48 <HAL_XSPI_MspInit+0xd4>)
 8001d2e:	f005 fbb1 	bl	8007494 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8001d32:	bf00      	nop
 8001d34:	3728      	adds	r7, #40	@ 0x28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	420d3400 	.word	0x420d3400
 8001d40:	46020c00 	.word	0x46020c00
 8001d44:	42021c00 	.word	0x42021c00
 8001d48:	42022000 	.word	0x42022000

08001d4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b0c4      	sub	sp, #272	@ 0x110
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d5a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d6c:	f107 0318 	add.w	r3, r7, #24
 8001d70:	22e0      	movs	r2, #224	@ 0xe0
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f00f fbf0 	bl	801155a <memset>
  if(hi2c->Instance==I2C1)
 8001d7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a63      	ldr	r2, [pc, #396]	@ (8001f14 <HAL_I2C_MspInit+0x1c8>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d14f      	bne.n	8001e2c <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d8c:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9e:	f107 0318 	add.w	r3, r7, #24
 8001da2:	4618      	mov	r0, r3
 8001da4:	f008 fd6e 	bl	800a884 <HAL_RCCEx_PeriphCLKConfig>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001dae:	f7ff fceb 	bl	8001788 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001db2:	4b59      	ldr	r3, [pc, #356]	@ (8001f18 <HAL_I2C_MspInit+0x1cc>)
 8001db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001db8:	4a57      	ldr	r2, [pc, #348]	@ (8001f18 <HAL_I2C_MspInit+0x1cc>)
 8001dba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dbe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001dc2:	4b55      	ldr	r3, [pc, #340]	@ (8001f18 <HAL_I2C_MspInit+0x1cc>)
 8001dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001dd0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001dd4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd8:	2312      	movs	r3, #18
 8001dda:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dea:	2304      	movs	r3, #4
 8001dec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001df0:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001df4:	4619      	mov	r1, r3
 8001df6:	4849      	ldr	r0, [pc, #292]	@ (8001f1c <HAL_I2C_MspInit+0x1d0>)
 8001df8:	f005 fb4c 	bl	8007494 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dfc:	4b46      	ldr	r3, [pc, #280]	@ (8001f18 <HAL_I2C_MspInit+0x1cc>)
 8001dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e02:	4a45      	ldr	r2, [pc, #276]	@ (8001f18 <HAL_I2C_MspInit+0x1cc>)
 8001e04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e08:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001e0c:	4b42      	ldr	r3, [pc, #264]	@ (8001f18 <HAL_I2C_MspInit+0x1cc>)
 8001e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e12:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001e16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e1a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e24:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e28:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e2a:	e06e      	b.n	8001f0a <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8001e2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e30:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a39      	ldr	r2, [pc, #228]	@ (8001f20 <HAL_I2C_MspInit+0x1d4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d165      	bne.n	8001f0a <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e3e:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e50:	f107 0318 	add.w	r3, r7, #24
 8001e54:	4618      	mov	r0, r3
 8001e56:	f008 fd15 	bl	800a884 <HAL_RCCEx_PeriphCLKConfig>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8001e60:	f7ff fc92 	bl	8001788 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e64:	4b2c      	ldr	r3, [pc, #176]	@ (8001f18 <HAL_I2C_MspInit+0x1cc>)
 8001e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e6a:	4a2b      	ldr	r2, [pc, #172]	@ (8001f18 <HAL_I2C_MspInit+0x1cc>)
 8001e6c:	f043 0320 	orr.w	r3, r3, #32
 8001e70:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e74:	4b28      	ldr	r3, [pc, #160]	@ (8001f18 <HAL_I2C_MspInit+0x1cc>)
 8001e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e7a:	f003 0220 	and.w	r2, r3, #32
 8001e7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e90:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e92:	2303      	movs	r3, #3
 8001e94:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e98:	2312      	movs	r3, #18
 8001e9a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001eaa:	2304      	movs	r3, #4
 8001eac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001eb0:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	481b      	ldr	r0, [pc, #108]	@ (8001f24 <HAL_I2C_MspInit+0x1d8>)
 8001eb8:	f005 faec 	bl	8007494 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ebc:	4b16      	ldr	r3, [pc, #88]	@ (8001f18 <HAL_I2C_MspInit+0x1cc>)
 8001ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ec2:	4a15      	ldr	r2, [pc, #84]	@ (8001f18 <HAL_I2C_MspInit+0x1cc>)
 8001ec4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ec8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001ecc:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <HAL_I2C_MspInit+0x1cc>)
 8001ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ed2:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ed6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ee8:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	2039      	movs	r0, #57	@ 0x39
 8001ef0:	f003 f9b6 	bl	8005260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001ef4:	2039      	movs	r0, #57	@ 0x39
 8001ef6:	f003 f9cd 	bl	8005294 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2100      	movs	r1, #0
 8001efe:	203a      	movs	r0, #58	@ 0x3a
 8001f00:	f003 f9ae 	bl	8005260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001f04:	203a      	movs	r0, #58	@ 0x3a
 8001f06:	f003 f9c5 	bl	8005294 <HAL_NVIC_EnableIRQ>
}
 8001f0a:	bf00      	nop
 8001f0c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40005400 	.word	0x40005400
 8001f18:	46020c00 	.word	0x46020c00
 8001f1c:	42021800 	.word	0x42021800
 8001f20:	40005800 	.word	0x40005800
 8001f24:	42021400 	.word	0x42021400

08001f28 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0c6      	sub	sp, #280	@ 0x118
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f32:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f36:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f48:	f107 0320 	add.w	r3, r7, #32
 8001f4c:	22e0      	movs	r2, #224	@ 0xe0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f00f fb02 	bl	801155a <memset>
  if(hltdc->Instance==LTDC)
 8001f56:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f5a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a92      	ldr	r2, [pc, #584]	@ (80021ac <HAL_LTDC_MspInit+0x284>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	f040 811b 	bne.w	80021a0 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0302 	mov.w	r3, #2
 8001f72:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8001f80:	2304      	movs	r3, #4
 8001f82:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8001f84:	2332      	movs	r3, #50	@ 0x32
 8001f86:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8001f90:	2308      	movs	r3, #8
 8001f92:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8001f9c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001fa0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fa2:	f107 0320 	add.w	r3, r7, #32
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f008 fc6c 	bl	800a884 <HAL_RCCEx_PeriphCLKConfig>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8001fb2:	f7ff fbe9 	bl	8001788 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001fb6:	4b7e      	ldr	r3, [pc, #504]	@ (80021b0 <HAL_LTDC_MspInit+0x288>)
 8001fb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001fbc:	4a7c      	ldr	r2, [pc, #496]	@ (80021b0 <HAL_LTDC_MspInit+0x288>)
 8001fbe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001fc2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001fc6:	4b7a      	ldr	r3, [pc, #488]	@ (80021b0 <HAL_LTDC_MspInit+0x288>)
 8001fc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001fcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd4:	4b76      	ldr	r3, [pc, #472]	@ (80021b0 <HAL_LTDC_MspInit+0x288>)
 8001fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fda:	4a75      	ldr	r2, [pc, #468]	@ (80021b0 <HAL_LTDC_MspInit+0x288>)
 8001fdc:	f043 0302 	orr.w	r3, r3, #2
 8001fe0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fe4:	4b72      	ldr	r3, [pc, #456]	@ (80021b0 <HAL_LTDC_MspInit+0x288>)
 8001fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fea:	f003 0202 	and.w	r2, r3, #2
 8001fee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ff2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ffc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002000:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002002:	4b6b      	ldr	r3, [pc, #428]	@ (80021b0 <HAL_LTDC_MspInit+0x288>)
 8002004:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002008:	4a69      	ldr	r2, [pc, #420]	@ (80021b0 <HAL_LTDC_MspInit+0x288>)
 800200a:	f043 0310 	orr.w	r3, r3, #16
 800200e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002012:	4b67      	ldr	r3, [pc, #412]	@ (80021b0 <HAL_LTDC_MspInit+0x288>)
 8002014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002018:	f003 0210 	and.w	r2, r3, #16
 800201c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002020:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800202a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800202e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002030:	4b5f      	ldr	r3, [pc, #380]	@ (80021b0 <HAL_LTDC_MspInit+0x288>)
 8002032:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002036:	4a5e      	ldr	r2, [pc, #376]	@ (80021b0 <HAL_LTDC_MspInit+0x288>)
 8002038:	f043 0308 	orr.w	r3, r3, #8
 800203c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002040:	4b5b      	ldr	r3, [pc, #364]	@ (80021b0 <HAL_LTDC_MspInit+0x288>)
 8002042:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002046:	f003 0208 	and.w	r2, r3, #8
 800204a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800204e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002058:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800205c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800205e:	4b54      	ldr	r3, [pc, #336]	@ (80021b0 <HAL_LTDC_MspInit+0x288>)
 8002060:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002064:	4a52      	ldr	r2, [pc, #328]	@ (80021b0 <HAL_LTDC_MspInit+0x288>)
 8002066:	f043 0304 	orr.w	r3, r3, #4
 800206a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800206e:	4b50      	ldr	r3, [pc, #320]	@ (80021b0 <HAL_LTDC_MspInit+0x288>)
 8002070:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002074:	f003 0204 	and.w	r2, r3, #4
 8002078:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800207c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002086:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800208a:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800208c:	2304      	movs	r3, #4
 800208e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80020a4:	2308      	movs	r3, #8
 80020a6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020aa:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80020ae:	4619      	mov	r1, r3
 80020b0:	4840      	ldr	r0, [pc, #256]	@ (80021b4 <HAL_LTDC_MspInit+0x28c>)
 80020b2:	f005 f9ef 	bl	8007494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80020b6:	f64f 7381 	movw	r3, #65409	@ 0xff81
 80020ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80020d0:	2308      	movs	r3, #8
 80020d2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020d6:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80020da:	4619      	mov	r1, r3
 80020dc:	4836      	ldr	r0, [pc, #216]	@ (80021b8 <HAL_LTDC_MspInit+0x290>)
 80020de:	f005 f9d9 	bl	8007494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80020e2:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 80020e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80020fc:	2308      	movs	r3, #8
 80020fe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002102:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002106:	4619      	mov	r1, r3
 8002108:	482c      	ldr	r0, [pc, #176]	@ (80021bc <HAL_LTDC_MspInit+0x294>)
 800210a:	f005 f9c3 	bl	8007494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800210e:	23c0      	movs	r3, #192	@ 0xc0
 8002110:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8002126:	2307      	movs	r3, #7
 8002128:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800212c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002130:	4619      	mov	r1, r3
 8002132:	4823      	ldr	r0, [pc, #140]	@ (80021c0 <HAL_LTDC_MspInit+0x298>)
 8002134:	f005 f9ae 	bl	8007494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002138:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800213c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002152:	2308      	movs	r3, #8
 8002154:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002158:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800215c:	4619      	mov	r1, r3
 800215e:	4818      	ldr	r0, [pc, #96]	@ (80021c0 <HAL_LTDC_MspInit+0x298>)
 8002160:	f005 f998 	bl	8007494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002164:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002168:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 800217e:	2307      	movs	r3, #7
 8002180:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002184:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002188:	4619      	mov	r1, r3
 800218a:	480a      	ldr	r0, [pc, #40]	@ (80021b4 <HAL_LTDC_MspInit+0x28c>)
 800218c:	f005 f982 	bl	8007494 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002190:	2200      	movs	r2, #0
 8002192:	2100      	movs	r1, #0
 8002194:	2087      	movs	r0, #135	@ 0x87
 8002196:	f003 f863 	bl	8005260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800219a:	2087      	movs	r0, #135	@ 0x87
 800219c:	f003 f87a 	bl	8005294 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80021a0:	bf00      	nop
 80021a2:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40016800 	.word	0x40016800
 80021b0:	46020c00 	.word	0x46020c00
 80021b4:	42020400 	.word	0x42020400
 80021b8:	42021000 	.word	0x42021000
 80021bc:	42020c00 	.word	0x42020c00
 80021c0:	42020800 	.word	0x42020800

080021c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b0bc      	sub	sp, #240	@ 0xf0
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021cc:	f107 0310 	add.w	r3, r7, #16
 80021d0:	22e0      	movs	r2, #224	@ 0xe0
 80021d2:	2100      	movs	r1, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f00f f9c0 	bl	801155a <memset>
  if(hrtc->Instance==RTC)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a1d      	ldr	r2, [pc, #116]	@ (8002254 <HAL_RTC_MspInit+0x90>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d132      	bne.n	800224a <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021e4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80021f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021f8:	f107 0310 	add.w	r3, r7, #16
 80021fc:	4618      	mov	r0, r3
 80021fe:	f008 fb41 	bl	800a884 <HAL_RCCEx_PeriphCLKConfig>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002208:	f7ff fabe 	bl	8001788 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800220c:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <HAL_RTC_MspInit+0x94>)
 800220e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002212:	4a11      	ldr	r2, [pc, #68]	@ (8002258 <HAL_RTC_MspInit+0x94>)
 8002214:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002218:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800221c:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <HAL_RTC_MspInit+0x94>)
 800221e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002222:	4a0d      	ldr	r2, [pc, #52]	@ (8002258 <HAL_RTC_MspInit+0x94>)
 8002224:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002228:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800222c:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <HAL_RTC_MspInit+0x94>)
 800222e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002232:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 800223a:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <HAL_RTC_MspInit+0x94>)
 800223c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002240:	4a05      	ldr	r2, [pc, #20]	@ (8002258 <HAL_RTC_MspInit+0x94>)
 8002242:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002246:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800224a:	bf00      	nop
 800224c:	37f0      	adds	r7, #240	@ 0xf0
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	46007800 	.word	0x46007800
 8002258:	46020c00 	.word	0x46020c00

0800225c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0b      	ldr	r2, [pc, #44]	@ (8002298 <HAL_TIM_PWM_MspInit+0x3c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10e      	bne.n	800228c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800226e:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <HAL_TIM_PWM_MspInit+0x40>)
 8002270:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002274:	4a09      	ldr	r2, [pc, #36]	@ (800229c <HAL_TIM_PWM_MspInit+0x40>)
 8002276:	f043 0302 	orr.w	r3, r3, #2
 800227a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800227e:	4b07      	ldr	r3, [pc, #28]	@ (800229c <HAL_TIM_PWM_MspInit+0x40>)
 8002280:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	40000400 	.word	0x40000400
 800229c:	46020c00 	.word	0x46020c00

080022a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0b      	ldr	r2, [pc, #44]	@ (80022dc <HAL_TIM_Base_MspInit+0x3c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d10e      	bne.n	80022d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80022b2:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <HAL_TIM_Base_MspInit+0x40>)
 80022b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80022b8:	4a09      	ldr	r2, [pc, #36]	@ (80022e0 <HAL_TIM_Base_MspInit+0x40>)
 80022ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022be:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80022c2:	4b07      	ldr	r3, [pc, #28]	@ (80022e0 <HAL_TIM_Base_MspInit+0x40>)
 80022c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80022c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	40014000 	.word	0x40014000
 80022e0:	46020c00 	.word	0x46020c00

080022e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 030c 	add.w	r3, r7, #12
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a12      	ldr	r2, [pc, #72]	@ (800234c <HAL_TIM_MspPostInit+0x68>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d11e      	bne.n	8002344 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002306:	4b12      	ldr	r3, [pc, #72]	@ (8002350 <HAL_TIM_MspPostInit+0x6c>)
 8002308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800230c:	4a10      	ldr	r2, [pc, #64]	@ (8002350 <HAL_TIM_MspPostInit+0x6c>)
 800230e:	f043 0310 	orr.w	r3, r3, #16
 8002312:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002316:	4b0e      	ldr	r3, [pc, #56]	@ (8002350 <HAL_TIM_MspPostInit+0x6c>)
 8002318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 8002324:	2340      	movs	r3, #64	@ 0x40
 8002326:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	2300      	movs	r3, #0
 8002332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002334:	2302      	movs	r3, #2
 8002336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002338:	f107 030c 	add.w	r3, r7, #12
 800233c:	4619      	mov	r1, r3
 800233e:	4805      	ldr	r0, [pc, #20]	@ (8002354 <HAL_TIM_MspPostInit+0x70>)
 8002340:	f005 f8a8 	bl	8007494 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002344:	bf00      	nop
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40000400 	.word	0x40000400
 8002350:	46020c00 	.word	0x46020c00
 8002354:	42021000 	.word	0x42021000

08002358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b0c2      	sub	sp, #264	@ 0x108
 800235c:	af00      	add	r7, sp, #0
 800235e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002362:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002366:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002378:	f107 0310 	add.w	r3, r7, #16
 800237c:	22e0      	movs	r2, #224	@ 0xe0
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f00f f8ea 	bl	801155a <memset>
  if(huart->Instance==USART1)
 8002386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800238a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a2f      	ldr	r2, [pc, #188]	@ (8002450 <HAL_UART_MspInit+0xf8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d155      	bne.n	8002444 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002398:	f04f 0201 	mov.w	r2, #1
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023a4:	2300      	movs	r3, #0
 80023a6:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023a8:	f107 0310 	add.w	r3, r7, #16
 80023ac:	4618      	mov	r0, r3
 80023ae:	f008 fa69 	bl	800a884 <HAL_RCCEx_PeriphCLKConfig>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 80023b8:	f7ff f9e6 	bl	8001788 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023bc:	4b25      	ldr	r3, [pc, #148]	@ (8002454 <HAL_UART_MspInit+0xfc>)
 80023be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80023c2:	4a24      	ldr	r2, [pc, #144]	@ (8002454 <HAL_UART_MspInit+0xfc>)
 80023c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023c8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80023cc:	4b21      	ldr	r3, [pc, #132]	@ (8002454 <HAL_UART_MspInit+0xfc>)
 80023ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80023d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023da:	4b1e      	ldr	r3, [pc, #120]	@ (8002454 <HAL_UART_MspInit+0xfc>)
 80023dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002454 <HAL_UART_MspInit+0xfc>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002454 <HAL_UART_MspInit+0xfc>)
 80023ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023f0:	f003 0201 	and.w	r2, r3, #1
 80023f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80023f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002402:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002406:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002408:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800240c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002410:	2302      	movs	r3, #2
 8002412:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002422:	2307      	movs	r3, #7
 8002424:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002428:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800242c:	4619      	mov	r1, r3
 800242e:	480a      	ldr	r0, [pc, #40]	@ (8002458 <HAL_UART_MspInit+0x100>)
 8002430:	f005 f830 	bl	8007494 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002434:	2200      	movs	r2, #0
 8002436:	2100      	movs	r1, #0
 8002438:	203d      	movs	r0, #61	@ 0x3d
 800243a:	f002 ff11 	bl	8005260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800243e:	203d      	movs	r0, #61	@ 0x3d
 8002440:	f002 ff28 	bl	8005294 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002444:	bf00      	nop
 8002446:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40013800 	.word	0x40013800
 8002454:	46020c00 	.word	0x46020c00
 8002458:	42020000 	.word	0x42020000

0800245c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b0be      	sub	sp, #248	@ 0xf8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002464:	f107 0318 	add.w	r3, r7, #24
 8002468:	22e0      	movs	r2, #224	@ 0xe0
 800246a:	2100      	movs	r1, #0
 800246c:	4618      	mov	r0, r3
 800246e:	f00f f874 	bl	801155a <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a3a      	ldr	r2, [pc, #232]	@ (8002560 <HAL_PCD_MspInit+0x104>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d16d      	bne.n	8002558 <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247c:	4b39      	ldr	r3, [pc, #228]	@ (8002564 <HAL_PCD_MspInit+0x108>)
 800247e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002482:	4a38      	ldr	r2, [pc, #224]	@ (8002564 <HAL_PCD_MspInit+0x108>)
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800248c:	4b35      	ldr	r3, [pc, #212]	@ (8002564 <HAL_PCD_MspInit+0x108>)
 800248e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	f04f 0308 	mov.w	r3, #8
 80024a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 80024a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80024aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ae:	f107 0318 	add.w	r3, r7, #24
 80024b2:	4618      	mov	r0, r3
 80024b4:	f008 f9e6 	bl	800a884 <HAL_RCCEx_PeriphCLKConfig>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 80024be:	f7ff f963 	bl	8001788 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 80024c2:	200c      	movs	r0, #12
 80024c4:	f000 fc1c 	bl	8002d00 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80024c8:	4b26      	ldr	r3, [pc, #152]	@ (8002564 <HAL_PCD_MspInit+0x108>)
 80024ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024ce:	4a25      	ldr	r2, [pc, #148]	@ (8002564 <HAL_PCD_MspInit+0x108>)
 80024d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024d8:	4b22      	ldr	r3, [pc, #136]	@ (8002564 <HAL_PCD_MspInit+0x108>)
 80024da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 80024e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002564 <HAL_PCD_MspInit+0x108>)
 80024e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002564 <HAL_PCD_MspInit+0x108>)
 80024ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002564 <HAL_PCD_MspInit+0x108>)
 80024f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002504:	4b17      	ldr	r3, [pc, #92]	@ (8002564 <HAL_PCD_MspInit+0x108>)
 8002506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d11b      	bne.n	800254a <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	4b14      	ldr	r3, [pc, #80]	@ (8002564 <HAL_PCD_MspInit+0x108>)
 8002514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002518:	4a12      	ldr	r2, [pc, #72]	@ (8002564 <HAL_PCD_MspInit+0x108>)
 800251a:	f043 0304 	orr.w	r3, r3, #4
 800251e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002522:	4b10      	ldr	r3, [pc, #64]	@ (8002564 <HAL_PCD_MspInit+0x108>)
 8002524:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002530:	f006 feae 	bl	8009290 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002534:	f006 fedc 	bl	80092f0 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002538:	4b0a      	ldr	r3, [pc, #40]	@ (8002564 <HAL_PCD_MspInit+0x108>)
 800253a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800253e:	4a09      	ldr	r2, [pc, #36]	@ (8002564 <HAL_PCD_MspInit+0x108>)
 8002540:	f023 0304 	bic.w	r3, r3, #4
 8002544:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002548:	e003      	b.n	8002552 <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800254a:	f006 fea1 	bl	8009290 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 800254e:	f006 fecf 	bl	80092f0 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8002552:	2001      	movs	r0, #1
 8002554:	f000 fbc0 	bl	8002cd8 <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8002558:	bf00      	nop
 800255a:	37f8      	adds	r7, #248	@ 0xf8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	42040000 	.word	0x42040000
 8002564:	46020c00 	.word	0x46020c00

08002568 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b0a4      	sub	sp, #144	@ 0x90
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4abb      	ldr	r2, [pc, #748]	@ (8002864 <HAL_SAI_MspInit+0x2fc>)
 8002576:	4293      	cmp	r3, r2
 8002578:	f040 80ca 	bne.w	8002710 <HAL_SAI_MspInit+0x1a8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800257c:	4bba      	ldr	r3, [pc, #744]	@ (8002868 <HAL_SAI_MspInit+0x300>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10e      	bne.n	80025a2 <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002584:	4bb9      	ldr	r3, [pc, #740]	@ (800286c <HAL_SAI_MspInit+0x304>)
 8002586:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800258a:	4ab8      	ldr	r2, [pc, #736]	@ (800286c <HAL_SAI_MspInit+0x304>)
 800258c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002590:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002594:	4bb5      	ldr	r3, [pc, #724]	@ (800286c <HAL_SAI_MspInit+0x304>)
 8002596:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800259a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 80025a2:	4bb1      	ldr	r3, [pc, #708]	@ (8002868 <HAL_SAI_MspInit+0x300>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	3301      	adds	r3, #1
 80025a8:	4aaf      	ldr	r2, [pc, #700]	@ (8002868 <HAL_SAI_MspInit+0x300>)
 80025aa:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80025ac:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80025b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	2302      	movs	r3, #2
 80025b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2300      	movs	r3, #0
 80025c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80025c4:	230d      	movs	r3, #13
 80025c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ca:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80025ce:	4619      	mov	r1, r3
 80025d0:	48a7      	ldr	r0, [pc, #668]	@ (8002870 <HAL_SAI_MspInit+0x308>)
 80025d2:	f004 ff5f 	bl	8007494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80025d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80025da:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e8:	2303      	movs	r3, #3
 80025ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80025ee:	230d      	movs	r3, #13
 80025f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80025f8:	4619      	mov	r1, r3
 80025fa:	489d      	ldr	r0, [pc, #628]	@ (8002870 <HAL_SAI_MspInit+0x308>)
 80025fc:	f004 ff4a 	bl	8007494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002600:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002604:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002612:	2300      	movs	r3, #0
 8002614:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002618:	230d      	movs	r3, #13
 800261a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800261e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002622:	4619      	mov	r1, r3
 8002624:	4893      	ldr	r0, [pc, #588]	@ (8002874 <HAL_SAI_MspInit+0x30c>)
 8002626:	f004 ff35 	bl	8007494 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800262a:	2321      	movs	r3, #33	@ 0x21
 800262c:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 800262e:	2326      	movs	r3, #38	@ 0x26
 8002630:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002636:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800263a:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 800263c:	2308      	movs	r3, #8
 800263e:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002644:	2302      	movs	r3, #2
 8002646:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002648:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800264c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 800264e:	2301      	movs	r3, #1
 8002650:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 8002652:	2301      	movs	r3, #1
 8002654:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002656:	2300      	movs	r3, #0
 8002658:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800265a:	2300      	movs	r3, #0
 800265c:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 800265e:	2300      	movs	r3, #0
 8002660:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002662:	2300      	movs	r3, #0
 8002664:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002666:	2300      	movs	r3, #0
 8002668:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800266a:	2300      	movs	r3, #0
 800266c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 800266e:	f107 0310 	add.w	r3, r7, #16
 8002672:	4981      	ldr	r1, [pc, #516]	@ (8002878 <HAL_SAI_MspInit+0x310>)
 8002674:	4618      	mov	r0, r3
 8002676:	f004 f821 	bl	80066bc <HAL_DMAEx_List_BuildNode>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 8002680:	f7ff f882 	bl	8001788 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 8002684:	4a7c      	ldr	r2, [pc, #496]	@ (8002878 <HAL_SAI_MspInit+0x310>)
 8002686:	2100      	movs	r1, #0
 8002688:	487c      	ldr	r0, [pc, #496]	@ (800287c <HAL_SAI_MspInit+0x314>)
 800268a:	f004 f843 	bl	8006714 <HAL_DMAEx_List_InsertNode>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_SAI_MspInit+0x130>
    {
      Error_Handler();
 8002694:	f7ff f878 	bl	8001788 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 8002698:	4878      	ldr	r0, [pc, #480]	@ (800287c <HAL_SAI_MspInit+0x314>)
 800269a:	f004 f904 	bl	80068a6 <HAL_DMAEx_List_SetCircularMode>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_SAI_MspInit+0x140>
    {
      Error_Handler();
 80026a4:	f7ff f870 	bl	8001788 <Error_Handler>
    }

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 80026a8:	4b75      	ldr	r3, [pc, #468]	@ (8002880 <HAL_SAI_MspInit+0x318>)
 80026aa:	4a76      	ldr	r2, [pc, #472]	@ (8002884 <HAL_SAI_MspInit+0x31c>)
 80026ac:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80026ae:	4b74      	ldr	r3, [pc, #464]	@ (8002880 <HAL_SAI_MspInit+0x318>)
 80026b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026b4:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80026b6:	4b72      	ldr	r3, [pc, #456]	@ (8002880 <HAL_SAI_MspInit+0x318>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80026bc:	4b70      	ldr	r3, [pc, #448]	@ (8002880 <HAL_SAI_MspInit+0x318>)
 80026be:	2200      	movs	r2, #0
 80026c0:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80026c2:	4b6f      	ldr	r3, [pc, #444]	@ (8002880 <HAL_SAI_MspInit+0x318>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80026c8:	4b6d      	ldr	r3, [pc, #436]	@ (8002880 <HAL_SAI_MspInit+0x318>)
 80026ca:	2281      	movs	r2, #129	@ 0x81
 80026cc:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 80026ce:	486c      	ldr	r0, [pc, #432]	@ (8002880 <HAL_SAI_MspInit+0x318>)
 80026d0:	f003 fe34 	bl	800633c <HAL_DMAEx_List_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_SAI_MspInit+0x176>
    {
      Error_Handler();
 80026da:	f7ff f855 	bl	8001788 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 80026de:	4967      	ldr	r1, [pc, #412]	@ (800287c <HAL_SAI_MspInit+0x314>)
 80026e0:	4867      	ldr	r0, [pc, #412]	@ (8002880 <HAL_SAI_MspInit+0x318>)
 80026e2:	f004 f941 	bl	8006968 <HAL_DMAEx_List_LinkQ>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_SAI_MspInit+0x188>
    {
      Error_Handler();
 80026ec:	f7ff f84c 	bl	8001788 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmatx, handle_GPDMA1_Channel3);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a63      	ldr	r2, [pc, #396]	@ (8002880 <HAL_SAI_MspInit+0x318>)
 80026f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80026f8:	4a61      	ldr	r2, [pc, #388]	@ (8002880 <HAL_SAI_MspInit+0x318>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 80026fe:	2110      	movs	r1, #16
 8002700:	485f      	ldr	r0, [pc, #380]	@ (8002880 <HAL_SAI_MspInit+0x318>)
 8002702:	f003 fa29 	bl	8005b58 <HAL_DMA_ConfigChannelAttributes>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 800270c:	f7ff f83c 	bl	8001788 <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a5c      	ldr	r2, [pc, #368]	@ (8002888 <HAL_SAI_MspInit+0x320>)
 8002716:	4293      	cmp	r3, r2
 8002718:	f040 80eb 	bne.w	80028f2 <HAL_SAI_MspInit+0x38a>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800271c:	4b52      	ldr	r3, [pc, #328]	@ (8002868 <HAL_SAI_MspInit+0x300>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10e      	bne.n	8002742 <HAL_SAI_MspInit+0x1da>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002724:	4b51      	ldr	r3, [pc, #324]	@ (800286c <HAL_SAI_MspInit+0x304>)
 8002726:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800272a:	4a50      	ldr	r2, [pc, #320]	@ (800286c <HAL_SAI_MspInit+0x304>)
 800272c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002730:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002734:	4b4d      	ldr	r3, [pc, #308]	@ (800286c <HAL_SAI_MspInit+0x304>)
 8002736:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800273a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002742:	4b49      	ldr	r3, [pc, #292]	@ (8002868 <HAL_SAI_MspInit+0x300>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	3301      	adds	r3, #1
 8002748:	4a47      	ldr	r2, [pc, #284]	@ (8002868 <HAL_SAI_MspInit+0x300>)
 800274a:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800274c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002750:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002752:	2302      	movs	r3, #2
 8002754:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275e:	2303      	movs	r3, #3
 8002760:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002764:	230d      	movs	r3, #13
 8002766:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800276e:	4619      	mov	r1, r3
 8002770:	4846      	ldr	r0, [pc, #280]	@ (800288c <HAL_SAI_MspInit+0x324>)
 8002772:	f004 fe8f 	bl	8007494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002776:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800277a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277c:	2302      	movs	r3, #2
 800277e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800278e:	230d      	movs	r3, #13
 8002790:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002794:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002798:	4619      	mov	r1, r3
 800279a:	483d      	ldr	r0, [pc, #244]	@ (8002890 <HAL_SAI_MspInit+0x328>)
 800279c:	f004 fe7a 	bl	8007494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80027a0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80027a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80027b8:	230d      	movs	r3, #13
 80027ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027be:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80027c2:	4619      	mov	r1, r3
 80027c4:	4832      	ldr	r0, [pc, #200]	@ (8002890 <HAL_SAI_MspInit+0x328>)
 80027c6:	f004 fe65 	bl	8007494 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80027ca:	2321      	movs	r3, #33	@ 0x21
 80027cc:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 80027ce:	2327      	movs	r3, #39	@ 0x27
 80027d0:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80027da:	2300      	movs	r3, #0
 80027dc:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80027de:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80027e2:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80027e4:	2302      	movs	r3, #2
 80027e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80027e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 80027ee:	2301      	movs	r3, #1
 80027f0:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 80027f2:	2301      	movs	r3, #1
 80027f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80027fa:	2300      	movs	r3, #0
 80027fc:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 80027fe:	2300      	movs	r3, #0
 8002800:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002802:	2300      	movs	r3, #0
 8002804:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002806:	2300      	movs	r3, #0
 8002808:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800280a:	2300      	movs	r3, #0
 800280c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 800280e:	f107 0310 	add.w	r3, r7, #16
 8002812:	4920      	ldr	r1, [pc, #128]	@ (8002894 <HAL_SAI_MspInit+0x32c>)
 8002814:	4618      	mov	r0, r3
 8002816:	f003 ff51 	bl	80066bc <HAL_DMAEx_List_BuildNode>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_SAI_MspInit+0x2bc>
    {
      Error_Handler();
 8002820:	f7fe ffb2 	bl	8001788 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8002824:	4a1b      	ldr	r2, [pc, #108]	@ (8002894 <HAL_SAI_MspInit+0x32c>)
 8002826:	2100      	movs	r1, #0
 8002828:	481b      	ldr	r0, [pc, #108]	@ (8002898 <HAL_SAI_MspInit+0x330>)
 800282a:	f003 ff73 	bl	8006714 <HAL_DMAEx_List_InsertNode>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_SAI_MspInit+0x2d0>
    {
      Error_Handler();
 8002834:	f7fe ffa8 	bl	8001788 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8002838:	4817      	ldr	r0, [pc, #92]	@ (8002898 <HAL_SAI_MspInit+0x330>)
 800283a:	f004 f834 	bl	80068a6 <HAL_DMAEx_List_SetCircularMode>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_SAI_MspInit+0x2e0>
    {
      Error_Handler();
 8002844:	f7fe ffa0 	bl	8001788 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8002848:	4b14      	ldr	r3, [pc, #80]	@ (800289c <HAL_SAI_MspInit+0x334>)
 800284a:	4a15      	ldr	r2, [pc, #84]	@ (80028a0 <HAL_SAI_MspInit+0x338>)
 800284c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 800284e:	4b13      	ldr	r3, [pc, #76]	@ (800289c <HAL_SAI_MspInit+0x334>)
 8002850:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002854:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002856:	4b11      	ldr	r3, [pc, #68]	@ (800289c <HAL_SAI_MspInit+0x334>)
 8002858:	2200      	movs	r2, #0
 800285a:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800285c:	4b0f      	ldr	r3, [pc, #60]	@ (800289c <HAL_SAI_MspInit+0x334>)
 800285e:	2200      	movs	r2, #0
 8002860:	641a      	str	r2, [r3, #64]	@ 0x40
 8002862:	e01f      	b.n	80028a4 <HAL_SAI_MspInit+0x33c>
 8002864:	40015804 	.word	0x40015804
 8002868:	20006468 	.word	0x20006468
 800286c:	46020c00 	.word	0x46020c00
 8002870:	42020400 	.word	0x42020400
 8002874:	42021800 	.word	0x42021800
 8002878:	200005e4 	.word	0x200005e4
 800287c:	20000608 	.word	0x20000608
 8002880:	20000620 	.word	0x20000620
 8002884:	400201d0 	.word	0x400201d0
 8002888:	40015824 	.word	0x40015824
 800288c:	42020000 	.word	0x42020000
 8002890:	42020800 	.word	0x42020800
 8002894:	20000698 	.word	0x20000698
 8002898:	200006bc 	.word	0x200006bc
 800289c:	200006d4 	.word	0x200006d4
 80028a0:	400200d0 	.word	0x400200d0
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80028a4:	4b15      	ldr	r3, [pc, #84]	@ (80028fc <HAL_SAI_MspInit+0x394>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80028aa:	4b14      	ldr	r3, [pc, #80]	@ (80028fc <HAL_SAI_MspInit+0x394>)
 80028ac:	2281      	movs	r2, #129	@ 0x81
 80028ae:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80028b0:	4812      	ldr	r0, [pc, #72]	@ (80028fc <HAL_SAI_MspInit+0x394>)
 80028b2:	f003 fd43 	bl	800633c <HAL_DMAEx_List_Init>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_SAI_MspInit+0x358>
    {
      Error_Handler();
 80028bc:	f7fe ff64 	bl	8001788 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 80028c0:	490f      	ldr	r1, [pc, #60]	@ (8002900 <HAL_SAI_MspInit+0x398>)
 80028c2:	480e      	ldr	r0, [pc, #56]	@ (80028fc <HAL_SAI_MspInit+0x394>)
 80028c4:	f004 f850 	bl	8006968 <HAL_DMAEx_List_LinkQ>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_SAI_MspInit+0x36a>
    {
      Error_Handler();
 80028ce:	f7fe ff5b 	bl	8001788 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a09      	ldr	r2, [pc, #36]	@ (80028fc <HAL_SAI_MspInit+0x394>)
 80028d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80028da:	4a08      	ldr	r2, [pc, #32]	@ (80028fc <HAL_SAI_MspInit+0x394>)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80028e0:	2110      	movs	r1, #16
 80028e2:	4806      	ldr	r0, [pc, #24]	@ (80028fc <HAL_SAI_MspInit+0x394>)
 80028e4:	f003 f938 	bl	8005b58 <HAL_DMA_ConfigChannelAttributes>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_SAI_MspInit+0x38a>
    {
      Error_Handler();
 80028ee:	f7fe ff4b 	bl	8001788 <Error_Handler>
    }

    }
}
 80028f2:	bf00      	nop
 80028f4:	3790      	adds	r7, #144	@ 0x90
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	200006d4 	.word	0x200006d4
 8002900:	200006bc 	.word	0x200006bc

08002904 <NMI_Handler>:
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <NMI_Handler+0x4>

0800290c <HardFault_Handler>:
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
 8002910:	bf00      	nop
 8002912:	e7fd      	b.n	8002910 <HardFault_Handler+0x4>

08002914 <MemManage_Handler>:
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
 8002918:	bf00      	nop
 800291a:	e7fd      	b.n	8002918 <MemManage_Handler+0x4>

0800291c <BusFault_Handler>:
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
 8002920:	bf00      	nop
 8002922:	e7fd      	b.n	8002920 <BusFault_Handler+0x4>

08002924 <UsageFault_Handler>:
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
 8002928:	bf00      	nop
 800292a:	e7fd      	b.n	8002928 <UsageFault_Handler+0x4>

0800292c <SVC_Handler>:
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <DebugMon_Handler>:
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <PendSV_Handler>:
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <SysTick_Handler>:
 8002956:	b580      	push	{r7, lr}
 8002958:	af00      	add	r7, sp, #0
 800295a:	f000 f979 	bl	8002c50 <HAL_IncTick>
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}

08002962 <EXTI1_IRQHandler>:
 8002962:	b580      	push	{r7, lr}
 8002964:	af00      	add	r7, sp, #0
 8002966:	2002      	movs	r0, #2
 8002968:	f004 ff84 	bl	8007874 <HAL_GPIO_EXTI_IRQHandler>
 800296c:	bf00      	nop
 800296e:	bd80      	pop	{r7, pc}

08002970 <EXTI4_IRQHandler>:
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
 8002974:	2010      	movs	r0, #16
 8002976:	f004 ff7d 	bl	8007874 <HAL_GPIO_EXTI_IRQHandler>
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}

0800297e <EXTI5_IRQHandler>:
 800297e:	b580      	push	{r7, lr}
 8002980:	af00      	add	r7, sp, #0
 8002982:	2020      	movs	r0, #32
 8002984:	f004 ff76 	bl	8007874 <HAL_GPIO_EXTI_IRQHandler>
 8002988:	bf00      	nop
 800298a:	bd80      	pop	{r7, pc}

0800298c <GPDMA1_Channel0_IRQHandler>:
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
 8002990:	4802      	ldr	r0, [pc, #8]	@ (800299c <GPDMA1_Channel0_IRQHandler+0x10>)
 8002992:	f002 ff72 	bl	800587a <HAL_DMA_IRQHandler>
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	2000017c 	.word	0x2000017c

080029a0 <GPDMA1_Channel1_IRQHandler>:
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4802      	ldr	r0, [pc, #8]	@ (80029b0 <GPDMA1_Channel1_IRQHandler+0x10>)
 80029a6:	f002 ff68 	bl	800587a <HAL_DMA_IRQHandler>
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200006d4 	.word	0x200006d4

080029b4 <GPDMA1_Channel2_IRQHandler>:
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4802      	ldr	r0, [pc, #8]	@ (80029c4 <GPDMA1_Channel2_IRQHandler+0x10>)
 80029ba:	f002 ff5e 	bl	800587a <HAL_DMA_IRQHandler>
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	200001f4 	.word	0x200001f4

080029c8 <GPDMA1_Channel3_IRQHandler>:
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4802      	ldr	r0, [pc, #8]	@ (80029d8 <GPDMA1_Channel3_IRQHandler+0x10>)
 80029ce:	f002 ff54 	bl	800587a <HAL_DMA_IRQHandler>
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000620 	.word	0x20000620

080029dc <ADC1_2_IRQHandler>:
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4802      	ldr	r0, [pc, #8]	@ (80029ec <ADC1_2_IRQHandler+0x10>)
 80029e2:	f001 f925 	bl	8003c30 <HAL_ADC_IRQHandler>
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000028 	.word	0x20000028

080029f0 <I2C2_EV_IRQHandler>:
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4802      	ldr	r0, [pc, #8]	@ (8002a00 <I2C2_EV_IRQHandler+0x10>)
 80029f6:	f005 f814 	bl	8007a22 <HAL_I2C_EV_IRQHandler>
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000388 	.word	0x20000388

08002a04 <I2C2_ER_IRQHandler>:
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4802      	ldr	r0, [pc, #8]	@ (8002a14 <I2C2_ER_IRQHandler+0x10>)
 8002a0a:	f005 f824 	bl	8007a56 <HAL_I2C_ER_IRQHandler>
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000388 	.word	0x20000388

08002a18 <USART1_IRQHandler>:
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4802      	ldr	r0, [pc, #8]	@ (8002a28 <USART1_IRQHandler+0x10>)
 8002a1e:	f00d f8e3 	bl	800fbe8 <HAL_UART_IRQHandler>
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200007e4 	.word	0x200007e4

08002a2c <LTDC_IRQHandler>:
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	4802      	ldr	r0, [pc, #8]	@ (8002a3c <LTDC_IRQHandler+0x10>)
 8002a32:	f005 ff9d 	bl	8008970 <HAL_LTDC_IRQHandler>
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	200003dc 	.word	0x200003dc

08002a40 <SystemInit>:
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	4b18      	ldr	r3, [pc, #96]	@ (8002aa8 <SystemInit+0x68>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4a:	4a17      	ldr	r2, [pc, #92]	@ (8002aa8 <SystemInit+0x68>)
 8002a4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002a54:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <SystemInit+0x6c>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	4b14      	ldr	r3, [pc, #80]	@ (8002aac <SystemInit+0x6c>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	61da      	str	r2, [r3, #28]
 8002a60:	4b12      	ldr	r3, [pc, #72]	@ (8002aac <SystemInit+0x6c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	621a      	str	r2, [r3, #32]
 8002a66:	4b11      	ldr	r3, [pc, #68]	@ (8002aac <SystemInit+0x6c>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002aac <SystemInit+0x6c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0e      	ldr	r2, [pc, #56]	@ (8002aac <SystemInit+0x6c>)
 8002a72:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002a76:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <SystemInit+0x6c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a82:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <SystemInit+0x6c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a09      	ldr	r2, [pc, #36]	@ (8002aac <SystemInit+0x6c>)
 8002a88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b07      	ldr	r3, [pc, #28]	@ (8002aac <SystemInit+0x6c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a94:	4b04      	ldr	r3, [pc, #16]	@ (8002aa8 <SystemInit+0x68>)
 8002a96:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	e000ed00 	.word	0xe000ed00
 8002aac:	46020c00 	.word	0x46020c00

08002ab0 <Reset_Handler>:
 8002ab0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ae8 <LoopForever+0x2>
 8002ab4:	f7ff ffc4 	bl	8002a40 <SystemInit>
 8002ab8:	2100      	movs	r1, #0
 8002aba:	e003      	b.n	8002ac4 <LoopCopyDataInit>

08002abc <CopyDataInit>:
 8002abc:	4b0b      	ldr	r3, [pc, #44]	@ (8002aec <LoopForever+0x6>)
 8002abe:	585b      	ldr	r3, [r3, r1]
 8002ac0:	5043      	str	r3, [r0, r1]
 8002ac2:	3104      	adds	r1, #4

08002ac4 <LoopCopyDataInit>:
 8002ac4:	480a      	ldr	r0, [pc, #40]	@ (8002af0 <LoopForever+0xa>)
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8002af4 <LoopForever+0xe>)
 8002ac8:	1842      	adds	r2, r0, r1
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d3f6      	bcc.n	8002abc <CopyDataInit>
 8002ace:	4a0a      	ldr	r2, [pc, #40]	@ (8002af8 <LoopForever+0x12>)
 8002ad0:	e002      	b.n	8002ad8 <LoopFillZerobss>

08002ad2 <FillZerobss>:
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f842 3b04 	str.w	r3, [r2], #4

08002ad8 <LoopFillZerobss>:
 8002ad8:	4b08      	ldr	r3, [pc, #32]	@ (8002afc <LoopForever+0x16>)
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d3f9      	bcc.n	8002ad2 <FillZerobss>
 8002ade:	f00e fd45 	bl	801156c <__libc_init_array>
 8002ae2:	f7fd fd73 	bl	80005cc <main>

08002ae6 <LoopForever>:
 8002ae6:	e7fe      	b.n	8002ae6 <LoopForever>
 8002ae8:	202f0000 	.word	0x202f0000
 8002aec:	080116dc 	.word	0x080116dc
 8002af0:	20000000 	.word	0x20000000
 8002af4:	2000000c 	.word	0x2000000c
 8002af8:	2000000c 	.word	0x2000000c
 8002afc:	20006470 	.word	0x20006470

08002b00 <ADC4_IRQHandler>:
 8002b00:	e7fe      	b.n	8002b00 <ADC4_IRQHandler>
	...

08002b04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b08:	4b12      	ldr	r3, [pc, #72]	@ (8002b54 <HAL_Init+0x50>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a11      	ldr	r2, [pc, #68]	@ (8002b54 <HAL_Init+0x50>)
 8002b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b14:	2003      	movs	r0, #3
 8002b16:	f002 fb98 	bl	800524a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002b1a:	f007 fcd5 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4b0d      	ldr	r3, [pc, #52]	@ (8002b58 <HAL_Init+0x54>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	490c      	ldr	r1, [pc, #48]	@ (8002b5c <HAL_Init+0x58>)
 8002b2a:	5ccb      	ldrb	r3, [r1, r3]
 8002b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b30:	4a0b      	ldr	r2, [pc, #44]	@ (8002b60 <HAL_Init+0x5c>)
 8002b32:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b34:	2004      	movs	r0, #4
 8002b36:	f002 fbdd 	bl	80052f4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b3a:	200f      	movs	r0, #15
 8002b3c:	f000 f812 	bl	8002b64 <HAL_InitTick>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e002      	b.n	8002b50 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b4a:	f7fe fe23 	bl	8001794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40022000 	.word	0x40022000
 8002b58:	46020c00 	.word	0x46020c00
 8002b5c:	080115cc 	.word	0x080115cc
 8002b60:	20000000 	.word	0x20000000

08002b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002b70:	4b33      	ldr	r3, [pc, #204]	@ (8002c40 <HAL_InitTick+0xdc>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e05c      	b.n	8002c36 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002b7c:	4b31      	ldr	r3, [pc, #196]	@ (8002c44 <HAL_InitTick+0xe0>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d10c      	bne.n	8002ba2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002b88:	4b2f      	ldr	r3, [pc, #188]	@ (8002c48 <HAL_InitTick+0xe4>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b2c      	ldr	r3, [pc, #176]	@ (8002c40 <HAL_InitTick+0xdc>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	4619      	mov	r1, r3
 8002b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	e037      	b.n	8002c12 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002ba2:	f002 fbff 	bl	80053a4 <HAL_SYSTICK_GetCLKSourceConfig>
 8002ba6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d023      	beq.n	8002bf6 <HAL_InitTick+0x92>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d82d      	bhi.n	8002c10 <HAL_InitTick+0xac>
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_InitTick+0x5e>
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d00d      	beq.n	8002bdc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002bc0:	e026      	b.n	8002c10 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002bc2:	4b21      	ldr	r3, [pc, #132]	@ (8002c48 <HAL_InitTick+0xe4>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c40 <HAL_InitTick+0xdc>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002bd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd8:	60fb      	str	r3, [r7, #12]
        break;
 8002bda:	e01a      	b.n	8002c12 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002bdc:	4b18      	ldr	r3, [pc, #96]	@ (8002c40 <HAL_InitTick+0xdc>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002be6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bea:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	60fb      	str	r3, [r7, #12]
        break;
 8002bf4:	e00d      	b.n	8002c12 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002bf6:	4b12      	ldr	r3, [pc, #72]	@ (8002c40 <HAL_InitTick+0xdc>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c00:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c04:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0c:	60fb      	str	r3, [r7, #12]
        break;
 8002c0e:	e000      	b.n	8002c12 <HAL_InitTick+0xae>
        break;
 8002c10:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f002 fb4c 	bl	80052b0 <HAL_SYSTICK_Config>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e009      	b.n	8002c36 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c22:	2200      	movs	r2, #0
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2a:	f002 fb19 	bl	8005260 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002c2e:	4a07      	ldr	r2, [pc, #28]	@ (8002c4c <HAL_InitTick+0xe8>)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000008 	.word	0x20000008
 8002c44:	e000e010 	.word	0xe000e010
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	20000004 	.word	0x20000004

08002c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c54:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <HAL_IncTick+0x20>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <HAL_IncTick+0x24>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4413      	add	r3, r2
 8002c60:	4a04      	ldr	r2, [pc, #16]	@ (8002c74 <HAL_IncTick+0x24>)
 8002c62:	6013      	str	r3, [r2, #0]
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000008 	.word	0x20000008
 8002c74:	2000646c 	.word	0x2000646c

08002c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c7c:	4b03      	ldr	r3, [pc, #12]	@ (8002c8c <HAL_GetTick+0x14>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	2000646c 	.word	0x2000646c

08002c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c98:	f7ff ffee 	bl	8002c78 <HAL_GetTick>
 8002c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca8:	d005      	beq.n	8002cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002caa:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd4 <HAL_Delay+0x44>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cb6:	bf00      	nop
 8002cb8:	f7ff ffde 	bl	8002c78 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d8f7      	bhi.n	8002cb8 <HAL_Delay+0x28>
  {
  }
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000008 	.word	0x20000008

08002cd8 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8002ce0:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ce4:	f023 0201 	bic.w	r2, r3, #1
 8002ce8:	4904      	ldr	r1, [pc, #16]	@ (8002cfc <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	46000400 	.word	0x46000400

08002d00 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8002d08:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d0c:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8002d10:	4904      	ldr	r1, [pc, #16]	@ (8002d24 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	46000400 	.word	0x46000400

08002d28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	609a      	str	r2, [r3, #8]
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	609a      	str	r2, [r3, #8]
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a0a      	ldr	r2, [pc, #40]	@ (8002dcc <LL_ADC_SetResolution+0x3c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d104      	bne.n	8002db0 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f023 020c 	bic.w	r2, r3, #12
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	60da      	str	r2, [r3, #12]
}
 8002dc0:	bf00      	nop
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	46021000 	.word	0x46021000

08002dd0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	3360      	adds	r3, #96	@ 0x60
 8002de2:	461a      	mov	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	431a      	orrs	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b085      	sub	sp, #20
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3360      	adds	r3, #96	@ 0x60
 8002e20:	461a      	mov	r2, r3
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b087      	sub	sp, #28
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3360      	adds	r3, #96	@ 0x60
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	601a      	str	r2, [r3, #0]
}
 8002e68:	bf00      	nop
 8002e6a:	371c      	adds	r7, #28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3360      	adds	r3, #96	@ 0x60
 8002e84:	461a      	mov	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	601a      	str	r2, [r3, #0]
}
 8002e9e:	bf00      	nop
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b087      	sub	sp, #28
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	3360      	adds	r3, #96	@ 0x60
 8002eba:	461a      	mov	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	601a      	str	r2, [r3, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eee:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ef2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	2a00      	cmp	r2, #0
 8002f0a:	d002      	beq.n	8002f12 <LL_ADC_SetGainCompensation+0x32>
 8002f0c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002f10:	e000      	b.n	8002f14 <LL_ADC_SetGainCompensation+0x34>
 8002f12:	2200      	movs	r2, #0
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b085      	sub	sp, #20
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2107      	movs	r1, #7
 8002f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	401a      	ands	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f52:	431a      	orrs	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b089      	sub	sp, #36	@ 0x24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4a2b      	ldr	r2, [pc, #172]	@ (8003048 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d020      	beq.n	8002fe2 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	3330      	adds	r3, #48	@ 0x30
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	4413      	add	r3, r2
 8002fb2:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	211f      	movs	r1, #31
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	0e9b      	lsrs	r3, r3, #26
 8002fcc:	f003 011f 	and.w	r1, r3, #31
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002fe0:	e02b      	b.n	800303a <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	210f      	movs	r1, #15
 8002fee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	401a      	ands	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d104      	bne.n	800300a <LL_ADC_REG_SetSequencerRanks+0x7e>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	0e9b      	lsrs	r3, r3, #26
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	e010      	b.n	800302c <LL_ADC_REG_SetSequencerRanks+0xa0>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	613b      	str	r3, [r7, #16]
  return result;
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8003020:	2320      	movs	r3, #32
 8003022:	e003      	b.n	800302c <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	68b9      	ldr	r1, [r7, #8]
 800302e:	f001 011f 	and.w	r1, r1, #31
 8003032:	408b      	lsls	r3, r1
 8003034:	431a      	orrs	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800303a:	bf00      	nop
 800303c:	3724      	adds	r7, #36	@ 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	46021000 	.word	0x46021000

0800304c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d107      	bne.n	8003070 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	0e9b      	lsrs	r3, r3, #26
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	2201      	movs	r2, #1
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	e015      	b.n	800309c <LL_ADC_REG_SetSequencerChAdd+0x50>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	60fb      	str	r3, [r7, #12]
  return result;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8003086:	2320      	movs	r3, #32
 8003088:	e003      	b.n	8003092 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	fab3 f383 	clz	r3, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	2201      	movs	r2, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80030a0:	431a      	orrs	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030a6:	bf00      	nop
 80030a8:	371c      	adds	r7, #28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	0e9b      	lsrs	r3, r3, #26
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	2101      	movs	r1, #1
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	401a      	ands	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0303 	and.w	r3, r3, #3
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003124:	b480      	push	{r7}
 8003126:	b08b      	sub	sp, #44	@ 0x2c
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4a2d      	ldr	r2, [pc, #180]	@ (80031e8 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d042      	beq.n	80031be <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d104      	bne.n	800314c <LL_ADC_SetChannelSamplingTime+0x28>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	0e9b      	lsrs	r3, r3, #26
 8003146:	f003 021f 	and.w	r2, r3, #31
 800314a:	e011      	b.n	8003170 <LL_ADC_SetChannelSamplingTime+0x4c>
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	fa93 f3a3 	rbit	r3, r3
 8003156:	617b      	str	r3, [r7, #20]
  return result;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8003162:	2320      	movs	r3, #32
 8003164:	e003      	b.n	800316e <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	fab3 f383 	clz	r3, r3
 800316c:	b2db      	uxtb	r3, r3
 800316e:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	0e5b      	lsrs	r3, r3, #25
 8003174:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003178:	460b      	mov	r3, r1
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	1ad2      	subs	r2, r2, r3
 8003182:	4613      	mov	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4413      	add	r3, r2
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	3314      	adds	r3, #20
 800318e:	461a      	mov	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	0e5b      	lsrs	r3, r3, #25
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	4413      	add	r3, r2
 800319c:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	2107      	movs	r1, #7
 80031a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a6:	fa01 f303 	lsl.w	r3, r1, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	401a      	ands	r2, r3
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	431a      	orrs	r2, r3
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 80031bc:	e00e      	b.n	80031dc <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	43db      	mvns	r3, r3
 80031c8:	401a      	ands	r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	0219      	lsls	r1, r3, #8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	400b      	ands	r3, r1
 80031d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031d6:	431a      	orrs	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	615a      	str	r2, [r3, #20]
}
 80031dc:	bf00      	nop
 80031de:	372c      	adds	r7, #44	@ 0x2c
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	46021000 	.word	0x46021000

080031ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003204:	43db      	mvns	r3, r3
 8003206:	401a      	ands	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f003 0318 	and.w	r3, r3, #24
 800320e:	4908      	ldr	r1, [pc, #32]	@ (8003230 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003210:	40d9      	lsrs	r1, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	400b      	ands	r3, r1
 8003216:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800321a:	431a      	orrs	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	000fffff 	.word	0x000fffff

08003234 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 031f 	and.w	r3, r3, #31
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800327c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6093      	str	r3, [r2, #8]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032a4:	d101      	bne.n	80032aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80032c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	609a      	str	r2, [r3, #8]
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032f4:	d101      	bne.n	80032fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003318:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800331c:	f043 0201 	orr.w	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	609a      	str	r2, [r3, #8]
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <LL_ADC_IsEnabled+0x18>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <LL_ADC_IsEnabled+0x1a>
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003366:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800336a:	f043 0204 	orr.w	r2, r3, #4
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	609a      	str	r2, [r3, #8]
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b04      	cmp	r3, #4
 8003390:	d101      	bne.n	8003396 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d101      	bne.n	80033bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033cc:	b590      	push	{r4, r7, lr}
 80033ce:	b08b      	sub	sp, #44	@ 0x2c
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 80033da:	2300      	movs	r3, #0
 80033dc:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80033de:	2300      	movs	r3, #0
 80033e0:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e2ce      	b.n	800398a <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a95      	ldr	r2, [pc, #596]	@ (8003650 <HAL_ADC_Init+0x284>)
 80033fa:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003400:	2b00      	cmp	r3, #0
 8003402:	d109      	bne.n	8003418 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7fe f9df 	bl	80017c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff ff37 	bl	8003290 <LL_ADC_IsDeepPowerDownEnabled>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d004      	beq.n	8003432 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ff1d 	bl	800326c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff ff52 	bl	80032e0 <LL_ADC_IsInternalRegulatorEnabled>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d115      	bne.n	800346e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff ff36 	bl	80032b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800344c:	4b81      	ldr	r3, [pc, #516]	@ (8003654 <HAL_ADC_Init+0x288>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	099b      	lsrs	r3, r3, #6
 8003452:	4a81      	ldr	r2, [pc, #516]	@ (8003658 <HAL_ADC_Init+0x28c>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	099b      	lsrs	r3, r3, #6
 800345a:	3301      	adds	r3, #1
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003460:	e002      	b.n	8003468 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	3b01      	subs	r3, #1
 8003466:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f9      	bne.n	8003462 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff ff34 	bl	80032e0 <LL_ADC_IsInternalRegulatorEnabled>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10e      	bne.n	800349c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003482:	f043 0210 	orr.w	r2, r3, #16
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800348e:	f043 0201 	orr.w	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff6c 	bl	800337e <LL_ADC_REG_IsConversionOngoing>
 80034a6:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f040 825f 	bne.w	8003974 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f040 825b 	bne.w	8003974 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034c2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80034c6:	f043 0202 	orr.w	r2, r3, #2
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff ff2c 	bl	8003330 <LL_ADC_IsEnabled>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d14f      	bne.n	800357e <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003650 <HAL_ADC_Init+0x284>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d037      	beq.n	8003558 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a5b      	ldr	r2, [pc, #364]	@ (800365c <HAL_ADC_Init+0x290>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d004      	beq.n	80034fc <HAL_ADC_Init+0x130>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a5a      	ldr	r2, [pc, #360]	@ (8003660 <HAL_ADC_Init+0x294>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d10e      	bne.n	800351a <HAL_ADC_Init+0x14e>
 80034fc:	4857      	ldr	r0, [pc, #348]	@ (800365c <HAL_ADC_Init+0x290>)
 80034fe:	f7ff ff17 	bl	8003330 <LL_ADC_IsEnabled>
 8003502:	4604      	mov	r4, r0
 8003504:	4856      	ldr	r0, [pc, #344]	@ (8003660 <HAL_ADC_Init+0x294>)
 8003506:	f7ff ff13 	bl	8003330 <LL_ADC_IsEnabled>
 800350a:	4603      	mov	r3, r0
 800350c:	4323      	orrs	r3, r4
 800350e:	2b00      	cmp	r3, #0
 8003510:	bf0c      	ite	eq
 8003512:	2301      	moveq	r3, #1
 8003514:	2300      	movne	r3, #0
 8003516:	b2db      	uxtb	r3, r3
 8003518:	e008      	b.n	800352c <HAL_ADC_Init+0x160>
 800351a:	484d      	ldr	r0, [pc, #308]	@ (8003650 <HAL_ADC_Init+0x284>)
 800351c:	f7ff ff08 	bl	8003330 <LL_ADC_IsEnabled>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	bf0c      	ite	eq
 8003526:	2301      	moveq	r3, #1
 8003528:	2300      	movne	r3, #0
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d026      	beq.n	800357e <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a49      	ldr	r2, [pc, #292]	@ (800365c <HAL_ADC_Init+0x290>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d004      	beq.n	8003544 <HAL_ADC_Init+0x178>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a48      	ldr	r2, [pc, #288]	@ (8003660 <HAL_ADC_Init+0x294>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d101      	bne.n	8003548 <HAL_ADC_Init+0x17c>
 8003544:	4a47      	ldr	r2, [pc, #284]	@ (8003664 <HAL_ADC_Init+0x298>)
 8003546:	e000      	b.n	800354a <HAL_ADC_Init+0x17e>
 8003548:	4a47      	ldr	r2, [pc, #284]	@ (8003668 <HAL_ADC_Init+0x29c>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	4619      	mov	r1, r3
 8003550:	4610      	mov	r0, r2
 8003552:	f7ff fbe9 	bl	8002d28 <LL_ADC_SetCommonClock>
 8003556:	e012      	b.n	800357e <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4619      	mov	r1, r3
 8003562:	4610      	mov	r0, r2
 8003564:	f7ff fc14 	bl	8002d90 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8003568:	4b3f      	ldr	r3, [pc, #252]	@ (8003668 <HAL_ADC_Init+0x29c>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003578:	493b      	ldr	r1, [pc, #236]	@ (8003668 <HAL_ADC_Init+0x29c>)
 800357a:	4313      	orrs	r3, r2
 800357c:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a33      	ldr	r2, [pc, #204]	@ (8003650 <HAL_ADC_Init+0x284>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d010      	beq.n	80035aa <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800358e:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003594:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800359a:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80035a2:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80035a4:	4313      	orrs	r3, r2
 80035a6:	623b      	str	r3, [r7, #32]
 80035a8:	e035      	b.n	8003616 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	7f1b      	ldrb	r3, [r3, #28]
 80035ae:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035b6:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035b8:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80035be:	2a00      	cmp	r2, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_ADC_Init+0x1fc>
 80035c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035c6:	e000      	b.n	80035ca <HAL_ADC_Init+0x1fe>
 80035c8:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80035ca:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80035d0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	da04      	bge.n	80035e4 <HAL_ADC_Init+0x218>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035e2:	e001      	b.n	80035e8 <HAL_ADC_Init+0x21c>
 80035e4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 80035e8:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	491b      	ldr	r1, [pc, #108]	@ (800365c <HAL_ADC_Init+0x290>)
 80035f0:	428b      	cmp	r3, r1
 80035f2:	d004      	beq.n	80035fe <HAL_ADC_Init+0x232>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4919      	ldr	r1, [pc, #100]	@ (8003660 <HAL_ADC_Init+0x294>)
 80035fa:	428b      	cmp	r3, r1
 80035fc:	d103      	bne.n	8003606 <HAL_ADC_Init+0x23a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003604:	e003      	b.n	800360e <HAL_ADC_Init+0x242>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800360c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800360e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003610:	6a3a      	ldr	r2, [r7, #32]
 8003612:	4313      	orrs	r3, r2
 8003614:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800361c:	2b01      	cmp	r3, #1
 800361e:	d131      	bne.n	8003684 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a0a      	ldr	r2, [pc, #40]	@ (8003650 <HAL_ADC_Init+0x284>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d007      	beq.n	800363a <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362e:	3b01      	subs	r3, #1
 8003630:	045b      	lsls	r3, r3, #17
 8003632:	6a3a      	ldr	r2, [r7, #32]
 8003634:	4313      	orrs	r3, r2
 8003636:	623b      	str	r3, [r7, #32]
 8003638:	e024      	b.n	8003684 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003640:	2b00      	cmp	r3, #0
 8003642:	d113      	bne.n	800366c <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800364a:	623b      	str	r3, [r7, #32]
 800364c:	e01a      	b.n	8003684 <HAL_ADC_Init+0x2b8>
 800364e:	bf00      	nop
 8003650:	46021000 	.word	0x46021000
 8003654:	20000000 	.word	0x20000000
 8003658:	053e2d63 	.word	0x053e2d63
 800365c:	42028000 	.word	0x42028000
 8003660:	42028100 	.word	0x42028100
 8003664:	42028300 	.word	0x42028300
 8003668:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003670:	f043 0220 	orr.w	r2, r3, #32
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800367c:	f043 0201 	orr.w	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a75      	ldr	r2, [pc, #468]	@ (8003860 <HAL_ADC_Init+0x494>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d018      	beq.n	80036c0 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003692:	2b00      	cmp	r3, #0
 8003694:	d009      	beq.n	80036aa <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800369a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a2:	4313      	orrs	r3, r2
 80036a4:	6a3a      	ldr	r2, [r7, #32]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	4b6c      	ldr	r3, [pc, #432]	@ (8003864 <HAL_ADC_Init+0x498>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6812      	ldr	r2, [r2, #0]
 80036b8:	6a39      	ldr	r1, [r7, #32]
 80036ba:	430b      	orrs	r3, r1
 80036bc:	60d3      	str	r3, [r2, #12]
 80036be:	e031      	b.n	8003724 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d009      	beq.n	80036dc <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036cc:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d4:	4313      	orrs	r3, r2
 80036d6:	6a3a      	ldr	r2, [r7, #32]
 80036d8:	4313      	orrs	r3, r2
 80036da:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	4b61      	ldr	r3, [pc, #388]	@ (8003868 <HAL_ADC_Init+0x49c>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	6a39      	ldr	r1, [r7, #32]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1a      	ldr	r2, [r3, #32]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a4d      	ldr	r2, [pc, #308]	@ (8003860 <HAL_ADC_Init+0x494>)
 800372a:	4293      	cmp	r3, r2
 800372c:	f000 80a4 	beq.w	8003878 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff fe22 	bl	800337e <LL_ADC_REG_IsConversionOngoing>
 800373a:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fe2f 	bl	80033a4 <LL_ADC_INJ_IsConversionOngoing>
 8003746:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d166      	bne.n	800381c <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d163      	bne.n	800381c <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	7f1b      	ldrb	r3, [r3, #28]
 8003758:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4943      	ldr	r1, [pc, #268]	@ (800386c <HAL_ADC_Init+0x4a0>)
 8003760:	428b      	cmp	r3, r1
 8003762:	d004      	beq.n	800376e <HAL_ADC_Init+0x3a2>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4941      	ldr	r1, [pc, #260]	@ (8003870 <HAL_ADC_Init+0x4a4>)
 800376a:	428b      	cmp	r3, r1
 800376c:	d102      	bne.n	8003774 <HAL_ADC_Init+0x3a8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003772:	e002      	b.n	800377a <HAL_ADC_Init+0x3ae>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003778:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800377a:	4313      	orrs	r3, r2
 800377c:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003788:	f023 0303 	bic.w	r3, r3, #3
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	6a39      	ldr	r1, [r7, #32]
 8003792:	430b      	orrs	r3, r1
 8003794:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	4619      	mov	r1, r3
 80037a8:	4610      	mov	r0, r2
 80037aa:	f7ff fb99 	bl	8002ee0 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d11e      	bne.n	80037f6 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037bc:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003874 <HAL_ADC_Init+0x4a8>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80037cc:	0411      	lsls	r1, r2, #16
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037d2:	4311      	orrs	r1, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80037d8:	4311      	orrs	r1, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80037de:	4311      	orrs	r1, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80037e4:	0892      	lsrs	r2, r2, #2
 80037e6:	430a      	orrs	r2, r1
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0201 	orr.w	r2, r2, #1
 80037f2:	611a      	str	r2, [r3, #16]
 80037f4:	e007      	b.n	8003806 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0201 	bic.w	r2, r2, #1
 8003804:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10c      	bne.n	800383e <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382a:	f023 010f 	bic.w	r1, r3, #15
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003832:	1e5a      	subs	r2, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	631a      	str	r2, [r3, #48]	@ 0x30
 800383c:	e007      	b.n	800384e <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 020f 	bic.w	r2, r2, #15
 800384c:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003852:	f023 0303 	bic.w	r3, r3, #3
 8003856:	f043 0201 	orr.w	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800385e:	e092      	b.n	8003986 <HAL_ADC_Init+0x5ba>
 8003860:	46021000 	.word	0x46021000
 8003864:	fff0c013 	.word	0xfff0c013
 8003868:	ffde800d 	.word	0xffde800d
 800386c:	42028000 	.word	0x42028000
 8003870:	42028100 	.word	0x42028100
 8003874:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800387e:	2b01      	cmp	r3, #1
 8003880:	d111      	bne.n	80038a6 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800388a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8003890:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8003896:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	4313      	orrs	r3, r2
 800389c:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	4b39      	ldr	r3, [pc, #228]	@ (8003994 <HAL_ADC_Init+0x5c8>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	69f9      	ldr	r1, [r7, #28]
 80038b6:	430b      	orrs	r3, r1
 80038b8:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c2:	461a      	mov	r2, r3
 80038c4:	2100      	movs	r1, #0
 80038c6:	f7ff fb2e 	bl	8002f26 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d2:	461a      	mov	r2, r3
 80038d4:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80038d8:	f7ff fb25 	bl	8002f26 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d108      	bne.n	80038f6 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f062 020f 	orn	r2, r2, #15
 80038f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80038f4:	e018      	b.n	8003928 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038fe:	d113      	bne.n	8003928 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390a:	3b01      	subs	r3, #1
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	f003 031c 	and.w	r3, r3, #28
 8003912:	f06f 020f 	mvn.w	r2, #15
 8003916:	fa02 f103 	lsl.w	r1, r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	4b1a      	ldr	r3, [pc, #104]	@ (8003998 <HAL_ADC_Init+0x5cc>)
 8003930:	4013      	ands	r3, r2
 8003932:	6a3a      	ldr	r2, [r7, #32]
 8003934:	429a      	cmp	r2, r3
 8003936:	d10b      	bne.n	8003950 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003942:	f023 0303 	bic.w	r3, r3, #3
 8003946:	f043 0201 	orr.w	r2, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800394e:	e01a      	b.n	8003986 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003954:	f023 0312 	bic.w	r3, r3, #18
 8003958:	f043 0210 	orr.w	r2, r3, #16
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003964:	f043 0201 	orr.w	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003972:	e008      	b.n	8003986 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003978:	f043 0210 	orr.w	r2, r3, #16
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8003986:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800398a:	4618      	mov	r0, r3
 800398c:	372c      	adds	r7, #44	@ 0x2c
 800398e:	46bd      	mov	sp, r7
 8003990:	bd90      	pop	{r4, r7, pc}
 8003992:	bf00      	nop
 8003994:	f7fffc02 	.word	0xf7fffc02
 8003998:	833ffff3 	.word	0x833ffff3

0800399c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b0a2      	sub	sp, #136	@ 0x88
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a98      	ldr	r2, [pc, #608]	@ (8003c10 <HAL_ADC_Start_DMA+0x274>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d004      	beq.n	80039bc <HAL_ADC_Start_DMA+0x20>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a97      	ldr	r2, [pc, #604]	@ (8003c14 <HAL_ADC_Start_DMA+0x278>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d101      	bne.n	80039c0 <HAL_ADC_Start_DMA+0x24>
 80039bc:	4b96      	ldr	r3, [pc, #600]	@ (8003c18 <HAL_ADC_Start_DMA+0x27c>)
 80039be:	e000      	b.n	80039c2 <HAL_ADC_Start_DMA+0x26>
 80039c0:	4b96      	ldr	r3, [pc, #600]	@ (8003c1c <HAL_ADC_Start_DMA+0x280>)
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff fc36 	bl	8003234 <LL_ADC_GetMultimode>
 80039c8:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff fcd5 	bl	800337e <LL_ADC_REG_IsConversionOngoing>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f040 8111 	bne.w	8003bfe <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_ADC_Start_DMA+0x4e>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e10e      	b.n	8003c08 <HAL_ADC_Start_DMA+0x26c>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d006      	beq.n	8003a06 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039fa:	2b05      	cmp	r3, #5
 80039fc:	d003      	beq.n	8003a06 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a00:	2b09      	cmp	r3, #9
 8003a02:	f040 80f4 	bne.w	8003bee <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f001 fa18 	bl	8004e3c <ADC_Enable>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003a12:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f040 80e4 	bne.w	8003be4 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a20:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a24:	f023 0301 	bic.w	r3, r3, #1
 8003a28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a7a      	ldr	r2, [pc, #488]	@ (8003c20 <HAL_ADC_Start_DMA+0x284>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d026      	beq.n	8003a88 <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a75      	ldr	r2, [pc, #468]	@ (8003c14 <HAL_ADC_Start_DMA+0x278>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d002      	beq.n	8003a4a <HAL_ADC_Start_DMA+0xae>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	e000      	b.n	8003a4c <HAL_ADC_Start_DMA+0xb0>
 8003a4a:	4b71      	ldr	r3, [pc, #452]	@ (8003c10 <HAL_ADC_Start_DMA+0x274>)
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d002      	beq.n	8003a5a <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d105      	bne.n	8003a66 <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a5e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d006      	beq.n	8003a80 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a76:	f023 0206 	bic.w	r2, r3, #6
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003a7e:	e006      	b.n	8003a8e <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003a86:	e002      	b.n	8003a8e <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a92:	4a64      	ldr	r2, [pc, #400]	@ (8003c24 <HAL_ADC_Start_DMA+0x288>)
 8003a94:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9a:	4a63      	ldr	r2, [pc, #396]	@ (8003c28 <HAL_ADC_Start_DMA+0x28c>)
 8003a9c:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa2:	4a62      	ldr	r2, [pc, #392]	@ (8003c2c <HAL_ADC_Start_DMA+0x290>)
 8003aa4:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	221c      	movs	r2, #28
 8003aac:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0210 	orr.w	r2, r2, #16
 8003ac4:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a55      	ldr	r2, [pc, #340]	@ (8003c20 <HAL_ADC_Start_DMA+0x284>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d107      	bne.n	8003ae0 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0201 	orr.w	r2, r2, #1
 8003ade:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d04f      	beq.n	8003b8e <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d046      	beq.n	8003b86 <HAL_ADC_Start_DMA+0x1ea>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d040      	beq.n	8003b86 <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	f107 0310 	add.w	r3, r7, #16
 8003b10:	4611      	mov	r1, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f002 fde8 	bl	80066e8 <HAL_DMAEx_List_GetNodeConfig>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e072      	b.n	8003c08 <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d104      	bne.n	8003b32 <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b30:	e00a      	b.n	8003b48 <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d104      	bne.n	8003b42 <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b40:	e002      	b.n	8003b48 <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b54:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f002 fd0b 	bl	8006594 <HAL_DMAEx_List_Start_IT>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003b84:	e028      	b.n	8003bd8 <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003b8c:	e024      	b.n	8003bd8 <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d104      	bne.n	8003ba2 <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ba0:	e00c      	b.n	8003bbc <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d104      	bne.n	8003bb6 <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bb4:	e002      	b.n	8003bbc <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3340      	adds	r3, #64	@ 0x40
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bce:	f001 fd4f 	bl	8005670 <HAL_DMA_Start_IT>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff fbba 	bl	8003356 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003be2:	e00f      	b.n	8003c04 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 8003bec:	e00a      	b.n	8003c04 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8003bfc:	e002      	b.n	8003c04 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 8003c04:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3788      	adds	r7, #136	@ 0x88
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	42028000 	.word	0x42028000
 8003c14:	42028100 	.word	0x42028100
 8003c18:	42028300 	.word	0x42028300
 8003c1c:	46021300 	.word	0x46021300
 8003c20:	46021000 	.word	0x46021000
 8003c24:	08004f71 	.word	0x08004f71
 8003c28:	0800504f 	.word	0x0800504f
 8003c2c:	0800506b 	.word	0x0800506b

08003c30 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08a      	sub	sp, #40	@ 0x28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003c38:	2300      	movs	r3, #0
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a77      	ldr	r2, [pc, #476]	@ (8003e30 <HAL_ADC_IRQHandler+0x200>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d004      	beq.n	8003c60 <HAL_ADC_IRQHandler+0x30>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a76      	ldr	r2, [pc, #472]	@ (8003e34 <HAL_ADC_IRQHandler+0x204>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d101      	bne.n	8003c64 <HAL_ADC_IRQHandler+0x34>
 8003c60:	4b75      	ldr	r3, [pc, #468]	@ (8003e38 <HAL_ADC_IRQHandler+0x208>)
 8003c62:	e000      	b.n	8003c66 <HAL_ADC_IRQHandler+0x36>
 8003c64:	4b75      	ldr	r3, [pc, #468]	@ (8003e3c <HAL_ADC_IRQHandler+0x20c>)
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff fae4 	bl	8003234 <LL_ADC_GetMultimode>
 8003c6c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d017      	beq.n	8003ca8 <HAL_ADC_IRQHandler+0x78>
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d012      	beq.n	8003ca8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d105      	bne.n	8003c9a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c92:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f001 fa1d 	bl	80050da <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d004      	beq.n	8003cbc <HAL_ADC_IRQHandler+0x8c>
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10b      	bne.n	8003cd4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80d1 	beq.w	8003e6a <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 80cb 	beq.w	8003e6a <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d105      	bne.n	8003cec <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ce4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a53      	ldr	r2, [pc, #332]	@ (8003e40 <HAL_ADC_IRQHandler+0x210>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d06c      	beq.n	8003dd0 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff f932 	bl	8002f64 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 80aa 	beq.w	8003e5c <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a49      	ldr	r2, [pc, #292]	@ (8003e34 <HAL_ADC_IRQHandler+0x204>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d002      	beq.n	8003d18 <HAL_ADC_IRQHandler+0xe8>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	e000      	b.n	8003d1a <HAL_ADC_IRQHandler+0xea>
 8003d18:	4b45      	ldr	r3, [pc, #276]	@ (8003e30 <HAL_ADC_IRQHandler+0x200>)
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d008      	beq.n	8003d34 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2b05      	cmp	r3, #5
 8003d2c:	d002      	beq.n	8003d34 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b09      	cmp	r3, #9
 8003d32:	d104      	bne.n	8003d3e <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	623b      	str	r3, [r7, #32]
 8003d3c:	e00c      	b.n	8003d58 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a3c      	ldr	r2, [pc, #240]	@ (8003e34 <HAL_ADC_IRQHandler+0x204>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d002      	beq.n	8003d4e <HAL_ADC_IRQHandler+0x11e>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	e000      	b.n	8003d50 <HAL_ADC_IRQHandler+0x120>
 8003d4e:	4b38      	ldr	r3, [pc, #224]	@ (8003e30 <HAL_ADC_IRQHandler+0x200>)
 8003d50:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d17c      	bne.n	8003e5c <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d175      	bne.n	8003e5c <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fb02 	bl	800337e <LL_ADC_REG_IsConversionOngoing>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d11a      	bne.n	8003db6 <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 020c 	bic.w	r2, r2, #12
 8003d8e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003da0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d159      	bne.n	8003e5c <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dac:	f043 0201 	orr.w	r2, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	679a      	str	r2, [r3, #120]	@ 0x78
 8003db4:	e052      	b.n	8003e5c <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dba:	f043 0210 	orr.w	r2, r3, #16
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dc6:	f043 0201 	orr.w	r2, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003dce:	e045      	b.n	8003e5c <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff f8c5 	bl	8002f64 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d03d      	beq.n	8003e5c <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d138      	bne.n	8003e5c <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d131      	bne.n	8003e5c <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff fabe 	bl	800337e <LL_ADC_REG_IsConversionOngoing>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d11d      	bne.n	8003e44 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 020c 	bic.w	r2, r2, #12
 8003e16:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	f043 0201 	orr.w	r2, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	679a      	str	r2, [r3, #120]	@ 0x78
 8003e2c:	e016      	b.n	8003e5c <HAL_ADC_IRQHandler+0x22c>
 8003e2e:	bf00      	nop
 8003e30:	42028000 	.word	0x42028000
 8003e34:	42028100 	.word	0x42028100
 8003e38:	42028300 	.word	0x42028300
 8003e3c:	46021300 	.word	0x46021300
 8003e40:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e48:	f043 0220 	orr.w	r2, r3, #32
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e54:	f043 0201 	orr.w	r2, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7fd fc43 	bl	80016e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	220c      	movs	r2, #12
 8003e68:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a8c      	ldr	r2, [pc, #560]	@ (80040a0 <HAL_ADC_IRQHandler+0x470>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	f000 8095 	beq.w	8003fa0 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d004      	beq.n	8003e8a <HAL_ADC_IRQHandler+0x25a>
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10a      	bne.n	8003ea0 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8085 	beq.w	8003fa0 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d07f      	beq.n	8003fa0 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d105      	bne.n	8003eb8 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003eb0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff f91e 	bl	80030fe <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003ec2:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff f84b 	bl	8002f64 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ece:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a73      	ldr	r2, [pc, #460]	@ (80040a4 <HAL_ADC_IRQHandler+0x474>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d002      	beq.n	8003ee0 <HAL_ADC_IRQHandler+0x2b0>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	e000      	b.n	8003ee2 <HAL_ADC_IRQHandler+0x2b2>
 8003ee0:	4b71      	ldr	r3, [pc, #452]	@ (80040a8 <HAL_ADC_IRQHandler+0x478>)
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d008      	beq.n	8003efc <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2b06      	cmp	r3, #6
 8003ef4:	d002      	beq.n	8003efc <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b07      	cmp	r3, #7
 8003efa:	d104      	bne.n	8003f06 <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	623b      	str	r3, [r7, #32]
 8003f04:	e00c      	b.n	8003f20 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a66      	ldr	r2, [pc, #408]	@ (80040a4 <HAL_ADC_IRQHandler+0x474>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d002      	beq.n	8003f16 <HAL_ADC_IRQHandler+0x2e6>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	e000      	b.n	8003f18 <HAL_ADC_IRQHandler+0x2e8>
 8003f16:	4b64      	ldr	r3, [pc, #400]	@ (80040a8 <HAL_ADC_IRQHandler+0x478>)
 8003f18:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d035      	beq.n	8003f92 <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <HAL_ADC_IRQHandler+0x310>
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d02d      	beq.n	8003f92 <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d128      	bne.n	8003f92 <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4a:	2b40      	cmp	r3, #64	@ 0x40
 8003f4c:	d121      	bne.n	8003f92 <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff fa26 	bl	80033a4 <LL_ADC_INJ_IsConversionOngoing>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d119      	bne.n	8003f92 <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f6c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d105      	bne.n	8003f92 <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f8a:	f043 0201 	orr.w	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f001 f883 	bl	800509e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2260      	movs	r2, #96	@ 0x60
 8003f9e:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d011      	beq.n	8003fce <HAL_ADC_IRQHandler+0x39e>
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00c      	beq.n	8003fce <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fb8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f8eb 	bl	800419c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2280      	movs	r2, #128	@ 0x80
 8003fcc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d012      	beq.n	8003ffe <HAL_ADC_IRQHandler+0x3ce>
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00d      	beq.n	8003ffe <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fe6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f001 f85f 	bl	80050b2 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ffc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004004:	2b00      	cmp	r3, #0
 8004006:	d012      	beq.n	800402e <HAL_ADC_IRQHandler+0x3fe>
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00d      	beq.n	800402e <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004016:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f001 f851 	bl	80050c6 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800402c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b00      	cmp	r3, #0
 8004036:	d05d      	beq.n	80040f4 <HAL_ADC_IRQHandler+0x4c4>
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	f003 0310 	and.w	r3, r3, #16
 800403e:	2b00      	cmp	r3, #0
 8004040:	d058      	beq.n	80040f4 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004046:	2b00      	cmp	r3, #0
 8004048:	d102      	bne.n	8004050 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 800404a:	2301      	movs	r3, #1
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
 800404e:	e03b      	b.n	80040c8 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a12      	ldr	r2, [pc, #72]	@ (80040a0 <HAL_ADC_IRQHandler+0x470>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d02c      	beq.n	80040b4 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d015      	beq.n	800408c <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a10      	ldr	r2, [pc, #64]	@ (80040a8 <HAL_ADC_IRQHandler+0x478>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d004      	beq.n	8004074 <HAL_ADC_IRQHandler+0x444>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a0d      	ldr	r2, [pc, #52]	@ (80040a4 <HAL_ADC_IRQHandler+0x474>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d101      	bne.n	8004078 <HAL_ADC_IRQHandler+0x448>
 8004074:	4b0d      	ldr	r3, [pc, #52]	@ (80040ac <HAL_ADC_IRQHandler+0x47c>)
 8004076:	e000      	b.n	800407a <HAL_ADC_IRQHandler+0x44a>
 8004078:	4b0d      	ldr	r3, [pc, #52]	@ (80040b0 <HAL_ADC_IRQHandler+0x480>)
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff f8e8 	bl	8003250 <LL_ADC_GetMultiDMATransfer>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d020      	beq.n	80040c8 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8004086:	2301      	movs	r3, #1
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24
 800408a:	e01d      	b.n	80040c8 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d016      	beq.n	80040c8 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 800409a:	2301      	movs	r3, #1
 800409c:	627b      	str	r3, [r7, #36]	@ 0x24
 800409e:	e013      	b.n	80040c8 <HAL_ADC_IRQHandler+0x498>
 80040a0:	46021000 	.word	0x46021000
 80040a4:	42028100 	.word	0x42028100
 80040a8:	42028000 	.word	0x42028000
 80040ac:	42028300 	.word	0x42028300
 80040b0:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff f812 	bl	80030e2 <LL_ADC_REG_GetDMATransfer>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 80040c4:	2301      	movs	r3, #1
 80040c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80040c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d10e      	bne.n	80040ec <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040d2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040de:	f043 0202 	orr.w	r2, r3, #2
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f862 	bl	80041b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2210      	movs	r2, #16
 80040f2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d01b      	beq.n	8004136 <HAL_ADC_IRQHandler+0x506>
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d016      	beq.n	8004136 <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800410c:	f003 0310 	and.w	r3, r3, #16
 8004110:	2b00      	cmp	r3, #0
 8004112:	d105      	bne.n	8004120 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004118:	f043 0201 	orr.w	r2, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f863 	bl	80041ec <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a17      	ldr	r2, [pc, #92]	@ (8004198 <HAL_ADC_IRQHandler+0x568>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d126      	bne.n	800418e <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00c      	beq.n	8004164 <HAL_ADC_IRQHandler+0x534>
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004150:	2b00      	cmp	r3, #0
 8004152:	d007      	beq.n	8004164 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f835 	bl	80041c4 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004162:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00f      	beq.n	800418e <HAL_ADC_IRQHandler+0x55e>
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f82d 	bl	80041d8 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800418c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800418e:	bf00      	nop
 8004190:	3728      	adds	r7, #40	@ 0x28
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	46021000 	.word	0x46021000

0800419c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004200:	b590      	push	{r4, r7, lr}
 8004202:	b0b7      	sub	sp, #220	@ 0xdc
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4aa8      	ldr	r2, [pc, #672]	@ (80044bc <HAL_ADC_ConfigChannel+0x2bc>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d103      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800422c:	2b01      	cmp	r3, #1
 800422e:	d102      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x36>
 8004230:	2302      	movs	r3, #2
 8004232:	f000 bdfe 	b.w	8004e32 <HAL_ADC_ConfigChannel+0xc32>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff f89b 	bl	800337e <LL_ADC_REG_IsConversionOngoing>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	f040 85c1 	bne.w	8004dd2 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a99      	ldr	r2, [pc, #612]	@ (80044bc <HAL_ADC_ConfigChannel+0x2bc>)
 8004256:	4293      	cmp	r3, r2
 8004258:	f000 8409 	beq.w	8004a6e <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d108      	bne.n	800427a <HAL_ADC_ConfigChannel+0x7a>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	0e9b      	lsrs	r3, r3, #26
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	2201      	movs	r2, #1
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	e01d      	b.n	80042b6 <HAL_ADC_ConfigChannel+0xb6>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004282:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004286:	fa93 f3a3 	rbit	r3, r3
 800428a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800428e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004292:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004296:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 800429e:	2320      	movs	r3, #32
 80042a0:	e004      	b.n	80042ac <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 80042a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80042a6:	fab3 f383 	clz	r3, r3
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	f003 031f 	and.w	r3, r3, #31
 80042b0:	2201      	movs	r2, #1
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6812      	ldr	r2, [r2, #0]
 80042ba:	69d1      	ldr	r1, [r2, #28]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	430b      	orrs	r3, r1
 80042c2:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	6859      	ldr	r1, [r3, #4]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	f7fe fe5b 	bl	8002f8c <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff f84f 	bl	800337e <LL_ADC_REG_IsConversionOngoing>
 80042e0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff f85b 	bl	80033a4 <LL_ADC_INJ_IsConversionOngoing>
 80042ee:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f040 81df 	bne.w	80046ba <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004300:	2b00      	cmp	r3, #0
 8004302:	f040 81da 	bne.w	80046ba <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6819      	ldr	r1, [r3, #0]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	461a      	mov	r2, r3
 8004314:	f7fe ff06 	bl	8003124 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	089b      	lsrs	r3, r3, #2
 8004324:	f003 0303 	and.w	r3, r3, #3
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	2b04      	cmp	r3, #4
 8004338:	d046      	beq.n	80043c8 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6919      	ldr	r1, [r3, #16]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800434a:	f7fe fd41 	bl	8002dd0 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	6919      	ldr	r1, [r3, #16]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	461a      	mov	r2, r3
 800435c:	f7fe fd6f 	bl	8002e3e <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	7e9b      	ldrb	r3, [r3, #26]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d11e      	bne.n	80043a6 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004374:	2b00      	cmp	r3, #0
 8004376:	d102      	bne.n	800437e <HAL_ADC_ConfigChannel+0x17e>
 8004378:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800437c:	e000      	b.n	8004380 <HAL_ADC_ConfigChannel+0x180>
 800437e:	2300      	movs	r3, #0
 8004380:	461a      	mov	r2, r3
 8004382:	f7fe fd92 	bl	8002eaa <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004392:	2b01      	cmp	r3, #1
 8004394:	d102      	bne.n	800439c <HAL_ADC_ConfigChannel+0x19c>
 8004396:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800439a:	e000      	b.n	800439e <HAL_ADC_ConfigChannel+0x19e>
 800439c:	2300      	movs	r3, #0
 800439e:	461a      	mov	r2, r3
 80043a0:	f7fe fd68 	bl	8002e74 <LL_ADC_SetOffsetSignedSaturation>
 80043a4:	e189      	b.n	80046ba <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	2200      	movs	r2, #0
 80043b0:	4619      	mov	r1, r3
 80043b2:	f7fe fd7a 	bl	8002eaa <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2200      	movs	r2, #0
 80043c0:	4619      	mov	r1, r3
 80043c2:	f7fe fd57 	bl	8002e74 <LL_ADC_SetOffsetSignedSaturation>
 80043c6:	e178      	b.n	80046ba <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2100      	movs	r1, #0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe fd1f 	bl	8002e12 <LL_ADC_GetOffsetChannel>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10a      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x1f4>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2100      	movs	r1, #0
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fe fd14 	bl	8002e12 <LL_ADC_GetOffsetChannel>
 80043ea:	4603      	mov	r3, r0
 80043ec:	0e9b      	lsrs	r3, r3, #26
 80043ee:	f003 021f 	and.w	r2, r3, #31
 80043f2:	e01e      	b.n	8004432 <HAL_ADC_ConfigChannel+0x232>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2100      	movs	r1, #0
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe fd09 	bl	8002e12 <LL_ADC_GetOffsetChannel>
 8004400:	4603      	mov	r3, r0
 8004402:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800440a:	fa93 f3a3 	rbit	r3, r3
 800440e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004412:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004416:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800441a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8004422:	2320      	movs	r3, #32
 8004424:	e004      	b.n	8004430 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8004426:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800442a:	fab3 f383 	clz	r3, r3
 800442e:	b2db      	uxtb	r3, r3
 8004430:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d105      	bne.n	800444a <HAL_ADC_ConfigChannel+0x24a>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	0e9b      	lsrs	r3, r3, #26
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	e018      	b.n	800447c <HAL_ADC_ConfigChannel+0x27c>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004456:	fa93 f3a3 	rbit	r3, r3
 800445a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800445e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004462:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004466:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 800446e:	2320      	movs	r3, #32
 8004470:	e004      	b.n	800447c <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8004472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004476:	fab3 f383 	clz	r3, r3
 800447a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800447c:	429a      	cmp	r2, r3
 800447e:	d107      	bne.n	8004490 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6818      	ldr	r0, [r3, #0]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	2300      	movs	r3, #0
 800448a:	2100      	movs	r1, #0
 800448c:	f7fe fca0 	bl	8002dd0 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2101      	movs	r1, #1
 8004496:	4618      	mov	r0, r3
 8004498:	f7fe fcbb 	bl	8002e12 <LL_ADC_GetOffsetChannel>
 800449c:	4603      	mov	r3, r0
 800449e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10c      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x2c0>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2101      	movs	r1, #1
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fe fcb0 	bl	8002e12 <LL_ADC_GetOffsetChannel>
 80044b2:	4603      	mov	r3, r0
 80044b4:	0e9b      	lsrs	r3, r3, #26
 80044b6:	f003 021f 	and.w	r2, r3, #31
 80044ba:	e020      	b.n	80044fe <HAL_ADC_ConfigChannel+0x2fe>
 80044bc:	46021000 	.word	0x46021000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2101      	movs	r1, #1
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fe fca3 	bl	8002e12 <LL_ADC_GetOffsetChannel>
 80044cc:	4603      	mov	r3, r0
 80044ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80044d6:	fa93 f3a3 	rbit	r3, r3
 80044da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80044de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80044e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80044e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 80044ee:	2320      	movs	r3, #32
 80044f0:	e004      	b.n	80044fc <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 80044f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044f6:	fab3 f383 	clz	r3, r3
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d105      	bne.n	8004516 <HAL_ADC_ConfigChannel+0x316>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	0e9b      	lsrs	r3, r3, #26
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	e018      	b.n	8004548 <HAL_ADC_ConfigChannel+0x348>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004522:	fa93 f3a3 	rbit	r3, r3
 8004526:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800452a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800452e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004532:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 800453a:	2320      	movs	r3, #32
 800453c:	e004      	b.n	8004548 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 800453e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004542:	fab3 f383 	clz	r3, r3
 8004546:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004548:	429a      	cmp	r2, r3
 800454a:	d107      	bne.n	800455c <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	2300      	movs	r3, #0
 8004556:	2101      	movs	r1, #1
 8004558:	f7fe fc3a 	bl	8002dd0 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2102      	movs	r1, #2
 8004562:	4618      	mov	r0, r3
 8004564:	f7fe fc55 	bl	8002e12 <LL_ADC_GetOffsetChannel>
 8004568:	4603      	mov	r3, r0
 800456a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10a      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x388>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2102      	movs	r1, #2
 8004578:	4618      	mov	r0, r3
 800457a:	f7fe fc4a 	bl	8002e12 <LL_ADC_GetOffsetChannel>
 800457e:	4603      	mov	r3, r0
 8004580:	0e9b      	lsrs	r3, r3, #26
 8004582:	f003 021f 	and.w	r2, r3, #31
 8004586:	e01a      	b.n	80045be <HAL_ADC_ConfigChannel+0x3be>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2102      	movs	r1, #2
 800458e:	4618      	mov	r0, r3
 8004590:	f7fe fc3f 	bl	8002e12 <LL_ADC_GetOffsetChannel>
 8004594:	4603      	mov	r3, r0
 8004596:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004598:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800459a:	fa93 f3a3 	rbit	r3, r3
 800459e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80045a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80045a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80045ae:	2320      	movs	r3, #32
 80045b0:	e004      	b.n	80045bc <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 80045b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045b6:	fab3 f383 	clz	r3, r3
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d105      	bne.n	80045d6 <HAL_ADC_ConfigChannel+0x3d6>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	0e9b      	lsrs	r3, r3, #26
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	e011      	b.n	80045fa <HAL_ADC_ConfigChannel+0x3fa>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045de:	fa93 f3a3 	rbit	r3, r3
 80045e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80045e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045e6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80045e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80045ee:	2320      	movs	r3, #32
 80045f0:	e003      	b.n	80045fa <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80045f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045f4:	fab3 f383 	clz	r3, r3
 80045f8:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d107      	bne.n	800460e <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	2300      	movs	r3, #0
 8004608:	2102      	movs	r1, #2
 800460a:	f7fe fbe1 	bl	8002dd0 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2103      	movs	r1, #3
 8004614:	4618      	mov	r0, r3
 8004616:	f7fe fbfc 	bl	8002e12 <LL_ADC_GetOffsetChannel>
 800461a:	4603      	mov	r3, r0
 800461c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <HAL_ADC_ConfigChannel+0x43a>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2103      	movs	r1, #3
 800462a:	4618      	mov	r0, r3
 800462c:	f7fe fbf1 	bl	8002e12 <LL_ADC_GetOffsetChannel>
 8004630:	4603      	mov	r3, r0
 8004632:	0e9b      	lsrs	r3, r3, #26
 8004634:	f003 021f 	and.w	r2, r3, #31
 8004638:	e017      	b.n	800466a <HAL_ADC_ConfigChannel+0x46a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2103      	movs	r1, #3
 8004640:	4618      	mov	r0, r3
 8004642:	f7fe fbe6 	bl	8002e12 <LL_ADC_GetOffsetChannel>
 8004646:	4603      	mov	r3, r0
 8004648:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800464c:	fa93 f3a3 	rbit	r3, r3
 8004650:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004652:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004654:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004656:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 800465c:	2320      	movs	r3, #32
 800465e:	e003      	b.n	8004668 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8004660:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004662:	fab3 f383 	clz	r3, r3
 8004666:	b2db      	uxtb	r3, r3
 8004668:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d105      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x482>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	0e9b      	lsrs	r3, r3, #26
 800467c:	f003 031f 	and.w	r3, r3, #31
 8004680:	e011      	b.n	80046a6 <HAL_ADC_ConfigChannel+0x4a6>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004688:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800468a:	fa93 f3a3 	rbit	r3, r3
 800468e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004692:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004694:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 800469a:	2320      	movs	r3, #32
 800469c:	e003      	b.n	80046a6 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 800469e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046a0:	fab3 f383 	clz	r3, r3
 80046a4:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d107      	bne.n	80046ba <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	2300      	movs	r3, #0
 80046b4:	2103      	movs	r1, #3
 80046b6:	f7fe fb8b 	bl	8002dd0 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fe fe36 	bl	8003330 <LL_ADC_IsEnabled>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f040 83ad 	bne.w	8004e26 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	6819      	ldr	r1, [r3, #0]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	461a      	mov	r2, r3
 80046da:	f7fe fd87 	bl	80031ec <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046e6:	f040 80d6 	bne.w	8004896 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10b      	bne.n	800470e <HAL_ADC_ConfigChannel+0x50e>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	0e9b      	lsrs	r3, r3, #26
 80046fc:	3301      	adds	r3, #1
 80046fe:	f003 031f 	and.w	r3, r3, #31
 8004702:	2b09      	cmp	r3, #9
 8004704:	bf94      	ite	ls
 8004706:	2301      	movls	r3, #1
 8004708:	2300      	movhi	r3, #0
 800470a:	b2db      	uxtb	r3, r3
 800470c:	e019      	b.n	8004742 <HAL_ADC_ConfigChannel+0x542>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004716:	fa93 f3a3 	rbit	r3, r3
 800471a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800471c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800471e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004720:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004726:	2320      	movs	r3, #32
 8004728:	e003      	b.n	8004732 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800472a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800472c:	fab3 f383 	clz	r3, r3
 8004730:	b2db      	uxtb	r3, r3
 8004732:	3301      	adds	r3, #1
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	2b09      	cmp	r3, #9
 800473a:	bf94      	ite	ls
 800473c:	2301      	movls	r3, #1
 800473e:	2300      	movhi	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d04d      	beq.n	80047e2 <HAL_ADC_ConfigChannel+0x5e2>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d107      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x562>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	0e9b      	lsrs	r3, r3, #26
 8004758:	3301      	adds	r3, #1
 800475a:	069b      	lsls	r3, r3, #26
 800475c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004760:	e015      	b.n	800478e <HAL_ADC_ConfigChannel+0x58e>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800476a:	fa93 f3a3 	rbit	r3, r3
 800476e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004772:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800477a:	2320      	movs	r3, #32
 800477c:	e003      	b.n	8004786 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800477e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004780:	fab3 f383 	clz	r3, r3
 8004784:	b2db      	uxtb	r3, r3
 8004786:	3301      	adds	r3, #1
 8004788:	069b      	lsls	r3, r3, #26
 800478a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <HAL_ADC_ConfigChannel+0x5ae>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	0e9b      	lsrs	r3, r3, #26
 80047a0:	3301      	adds	r3, #1
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	2101      	movs	r1, #1
 80047a8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ac:	e017      	b.n	80047de <HAL_ADC_ConfigChannel+0x5de>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b6:	fa93 f3a3 	rbit	r3, r3
 80047ba:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80047bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80047c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 80047c6:	2320      	movs	r3, #32
 80047c8:	e003      	b.n	80047d2 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 80047ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047cc:	fab3 f383 	clz	r3, r3
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	3301      	adds	r3, #1
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	2101      	movs	r1, #1
 80047da:	fa01 f303 	lsl.w	r3, r1, r3
 80047de:	4313      	orrs	r3, r2
 80047e0:	e04e      	b.n	8004880 <HAL_ADC_ConfigChannel+0x680>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d107      	bne.n	80047fe <HAL_ADC_ConfigChannel+0x5fe>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	0e9b      	lsrs	r3, r3, #26
 80047f4:	3301      	adds	r3, #1
 80047f6:	069b      	lsls	r3, r3, #26
 80047f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047fc:	e015      	b.n	800482a <HAL_ADC_ConfigChannel+0x62a>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004806:	fa93 f3a3 	rbit	r3, r3
 800480a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800480c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8004816:	2320      	movs	r3, #32
 8004818:	e003      	b.n	8004822 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 800481a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800481c:	fab3 f383 	clz	r3, r3
 8004820:	b2db      	uxtb	r3, r3
 8004822:	3301      	adds	r3, #1
 8004824:	069b      	lsls	r3, r3, #26
 8004826:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <HAL_ADC_ConfigChannel+0x64a>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	0e9b      	lsrs	r3, r3, #26
 800483c:	3301      	adds	r3, #1
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	2101      	movs	r1, #1
 8004844:	fa01 f303 	lsl.w	r3, r1, r3
 8004848:	e017      	b.n	800487a <HAL_ADC_ConfigChannel+0x67a>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	fa93 f3a3 	rbit	r3, r3
 8004856:	61bb      	str	r3, [r7, #24]
  return result;
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8004862:	2320      	movs	r3, #32
 8004864:	e003      	b.n	800486e <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	fab3 f383 	clz	r3, r3
 800486c:	b2db      	uxtb	r3, r3
 800486e:	3301      	adds	r3, #1
 8004870:	f003 031f 	and.w	r3, r3, #31
 8004874:	2101      	movs	r1, #1
 8004876:	fa01 f303 	lsl.w	r3, r1, r3
 800487a:	4313      	orrs	r3, r2
 800487c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004880:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6818      	ldr	r0, [r3, #0]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	461a      	mov	r2, r3
 800488e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004892:	f7fe fc47 	bl	8003124 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	f280 82c3 	bge.w	8004e26 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a92      	ldr	r2, [pc, #584]	@ (8004af0 <HAL_ADC_ConfigChannel+0x8f0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d004      	beq.n	80048b4 <HAL_ADC_ConfigChannel+0x6b4>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a91      	ldr	r2, [pc, #580]	@ (8004af4 <HAL_ADC_ConfigChannel+0x8f4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d101      	bne.n	80048b8 <HAL_ADC_ConfigChannel+0x6b8>
 80048b4:	4b90      	ldr	r3, [pc, #576]	@ (8004af8 <HAL_ADC_ConfigChannel+0x8f8>)
 80048b6:	e000      	b.n	80048ba <HAL_ADC_ConfigChannel+0x6ba>
 80048b8:	4b90      	ldr	r3, [pc, #576]	@ (8004afc <HAL_ADC_ConfigChannel+0x8fc>)
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fe fa5a 	bl	8002d74 <LL_ADC_GetCommonPathInternalCh>
 80048c0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a89      	ldr	r2, [pc, #548]	@ (8004af0 <HAL_ADC_ConfigChannel+0x8f0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d004      	beq.n	80048d8 <HAL_ADC_ConfigChannel+0x6d8>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a88      	ldr	r2, [pc, #544]	@ (8004af4 <HAL_ADC_ConfigChannel+0x8f4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d10e      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x6f6>
 80048d8:	4885      	ldr	r0, [pc, #532]	@ (8004af0 <HAL_ADC_ConfigChannel+0x8f0>)
 80048da:	f7fe fd29 	bl	8003330 <LL_ADC_IsEnabled>
 80048de:	4604      	mov	r4, r0
 80048e0:	4884      	ldr	r0, [pc, #528]	@ (8004af4 <HAL_ADC_ConfigChannel+0x8f4>)
 80048e2:	f7fe fd25 	bl	8003330 <LL_ADC_IsEnabled>
 80048e6:	4603      	mov	r3, r0
 80048e8:	4323      	orrs	r3, r4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	bf0c      	ite	eq
 80048ee:	2301      	moveq	r3, #1
 80048f0:	2300      	movne	r3, #0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	e008      	b.n	8004908 <HAL_ADC_ConfigChannel+0x708>
 80048f6:	4882      	ldr	r0, [pc, #520]	@ (8004b00 <HAL_ADC_ConfigChannel+0x900>)
 80048f8:	f7fe fd1a 	bl	8003330 <LL_ADC_IsEnabled>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	bf0c      	ite	eq
 8004902:	2301      	moveq	r3, #1
 8004904:	2300      	movne	r3, #0
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 80a6 	beq.w	8004a5a <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a7c      	ldr	r2, [pc, #496]	@ (8004b04 <HAL_ADC_ConfigChannel+0x904>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d13c      	bne.n	8004992 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004918:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800491c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d136      	bne.n	8004992 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a71      	ldr	r2, [pc, #452]	@ (8004af0 <HAL_ADC_ConfigChannel+0x8f0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00a      	beq.n	8004944 <HAL_ADC_ConfigChannel+0x744>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a70      	ldr	r2, [pc, #448]	@ (8004af4 <HAL_ADC_ConfigChannel+0x8f4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d005      	beq.n	8004944 <HAL_ADC_ConfigChannel+0x744>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a70      	ldr	r2, [pc, #448]	@ (8004b00 <HAL_ADC_ConfigChannel+0x900>)
 800493e:	4293      	cmp	r3, r2
 8004940:	f040 826e 	bne.w	8004e20 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a69      	ldr	r2, [pc, #420]	@ (8004af0 <HAL_ADC_ConfigChannel+0x8f0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d004      	beq.n	8004958 <HAL_ADC_ConfigChannel+0x758>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a68      	ldr	r2, [pc, #416]	@ (8004af4 <HAL_ADC_ConfigChannel+0x8f4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d101      	bne.n	800495c <HAL_ADC_ConfigChannel+0x75c>
 8004958:	4a67      	ldr	r2, [pc, #412]	@ (8004af8 <HAL_ADC_ConfigChannel+0x8f8>)
 800495a:	e000      	b.n	800495e <HAL_ADC_ConfigChannel+0x75e>
 800495c:	4a67      	ldr	r2, [pc, #412]	@ (8004afc <HAL_ADC_ConfigChannel+0x8fc>)
 800495e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004962:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004966:	4619      	mov	r1, r3
 8004968:	4610      	mov	r0, r2
 800496a:	f7fe f9f0 	bl	8002d4e <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800496e:	4b66      	ldr	r3, [pc, #408]	@ (8004b08 <HAL_ADC_ConfigChannel+0x908>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	099b      	lsrs	r3, r3, #6
 8004974:	4a65      	ldr	r2, [pc, #404]	@ (8004b0c <HAL_ADC_ConfigChannel+0x90c>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	099b      	lsrs	r3, r3, #6
 800497c:	3301      	adds	r3, #1
 800497e:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8004980:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004982:	e002      	b.n	800498a <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	3b01      	subs	r3, #1
 8004988:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1f9      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004990:	e246      	b.n	8004e20 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a5e      	ldr	r2, [pc, #376]	@ (8004b10 <HAL_ADC_ConfigChannel+0x910>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d12b      	bne.n	80049f4 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800499c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d125      	bne.n	80049f4 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a50      	ldr	r2, [pc, #320]	@ (8004af0 <HAL_ADC_ConfigChannel+0x8f0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00a      	beq.n	80049c8 <HAL_ADC_ConfigChannel+0x7c8>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a4f      	ldr	r2, [pc, #316]	@ (8004af4 <HAL_ADC_ConfigChannel+0x8f4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d005      	beq.n	80049c8 <HAL_ADC_ConfigChannel+0x7c8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a4f      	ldr	r2, [pc, #316]	@ (8004b00 <HAL_ADC_ConfigChannel+0x900>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	f040 822e 	bne.w	8004e24 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a48      	ldr	r2, [pc, #288]	@ (8004af0 <HAL_ADC_ConfigChannel+0x8f0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d004      	beq.n	80049dc <HAL_ADC_ConfigChannel+0x7dc>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a47      	ldr	r2, [pc, #284]	@ (8004af4 <HAL_ADC_ConfigChannel+0x8f4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d101      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x7e0>
 80049dc:	4a46      	ldr	r2, [pc, #280]	@ (8004af8 <HAL_ADC_ConfigChannel+0x8f8>)
 80049de:	e000      	b.n	80049e2 <HAL_ADC_ConfigChannel+0x7e2>
 80049e0:	4a46      	ldr	r2, [pc, #280]	@ (8004afc <HAL_ADC_ConfigChannel+0x8fc>)
 80049e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049ea:	4619      	mov	r1, r3
 80049ec:	4610      	mov	r0, r2
 80049ee:	f7fe f9ae 	bl	8002d4e <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049f2:	e217      	b.n	8004e24 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a46      	ldr	r2, [pc, #280]	@ (8004b14 <HAL_ADC_ConfigChannel+0x914>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	f040 8213 	bne.w	8004e26 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f040 820c 	bne.w	8004e26 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a37      	ldr	r2, [pc, #220]	@ (8004af0 <HAL_ADC_ConfigChannel+0x8f0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00a      	beq.n	8004a2e <HAL_ADC_ConfigChannel+0x82e>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a35      	ldr	r2, [pc, #212]	@ (8004af4 <HAL_ADC_ConfigChannel+0x8f4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d005      	beq.n	8004a2e <HAL_ADC_ConfigChannel+0x82e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a36      	ldr	r2, [pc, #216]	@ (8004b00 <HAL_ADC_ConfigChannel+0x900>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	f040 81fc 	bne.w	8004e26 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a2f      	ldr	r2, [pc, #188]	@ (8004af0 <HAL_ADC_ConfigChannel+0x8f0>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d004      	beq.n	8004a42 <HAL_ADC_ConfigChannel+0x842>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a2d      	ldr	r2, [pc, #180]	@ (8004af4 <HAL_ADC_ConfigChannel+0x8f4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d101      	bne.n	8004a46 <HAL_ADC_ConfigChannel+0x846>
 8004a42:	4a2d      	ldr	r2, [pc, #180]	@ (8004af8 <HAL_ADC_ConfigChannel+0x8f8>)
 8004a44:	e000      	b.n	8004a48 <HAL_ADC_ConfigChannel+0x848>
 8004a46:	4a2d      	ldr	r2, [pc, #180]	@ (8004afc <HAL_ADC_ConfigChannel+0x8fc>)
 8004a48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f7fe f97b 	bl	8002d4e <LL_ADC_SetCommonPathInternalCh>
 8004a58:	e1e5      	b.n	8004e26 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a5e:	f043 0220 	orr.w	r2, r3, #32
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004a6c:	e1db      	b.n	8004e26 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	f000 811b 	beq.w	8004cb6 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a88:	d004      	beq.n	8004a94 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004a8e:	4a22      	ldr	r2, [pc, #136]	@ (8004b18 <HAL_ADC_ConfigChannel+0x918>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d107      	bne.n	8004aa4 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fe fad5 	bl	800304c <LL_ADC_REG_SetSequencerChAdd>
 8004aa2:	e059      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f003 031f 	and.w	r3, r3, #31
 8004ab2:	210f      	movs	r1, #15
 8004ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	401a      	ands	r2, r3
 8004abc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004ac0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d105      	bne.n	8004ad4 <HAL_ADC_ConfigChannel+0x8d4>
 8004ac8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004acc:	0e9b      	lsrs	r3, r3, #26
 8004ace:	f003 031f 	and.w	r3, r3, #31
 8004ad2:	e027      	b.n	8004b24 <HAL_ADC_ConfigChannel+0x924>
 8004ad4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004ad8:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	fa93 f3a3 	rbit	r3, r3
 8004ae0:	60fb      	str	r3, [r7, #12]
  return result;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d117      	bne.n	8004b1c <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8004aec:	2320      	movs	r3, #32
 8004aee:	e019      	b.n	8004b24 <HAL_ADC_ConfigChannel+0x924>
 8004af0:	42028000 	.word	0x42028000
 8004af4:	42028100 	.word	0x42028100
 8004af8:	42028300 	.word	0x42028300
 8004afc:	46021300 	.word	0x46021300
 8004b00:	46021000 	.word	0x46021000
 8004b04:	ce080000 	.word	0xce080000
 8004b08:	20000000 	.word	0x20000000
 8004b0c:	053e2d63 	.word	0x053e2d63
 8004b10:	ca040000 	.word	0xca040000
 8004b14:	80000001 	.word	0x80000001
 8004b18:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	fab3 f383 	clz	r3, r3
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	6839      	ldr	r1, [r7, #0]
 8004b26:	6849      	ldr	r1, [r1, #4]
 8004b28:	f001 011f 	and.w	r1, r1, #31
 8004b2c:	408b      	lsls	r3, r1
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	089b      	lsrs	r3, r3, #2
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d808      	bhi.n	8004b58 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b52:	4619      	mov	r1, r3
 8004b54:	f7fe fa1a 	bl	8002f8c <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	461a      	mov	r2, r3
 8004b62:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004b66:	f7fe fadd 	bl	8003124 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f280 8159 	bge.w	8004e26 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a9b      	ldr	r2, [pc, #620]	@ (8004de8 <HAL_ADC_ConfigChannel+0xbe8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d004      	beq.n	8004b88 <HAL_ADC_ConfigChannel+0x988>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a9a      	ldr	r2, [pc, #616]	@ (8004dec <HAL_ADC_ConfigChannel+0xbec>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d101      	bne.n	8004b8c <HAL_ADC_ConfigChannel+0x98c>
 8004b88:	4b99      	ldr	r3, [pc, #612]	@ (8004df0 <HAL_ADC_ConfigChannel+0xbf0>)
 8004b8a:	e000      	b.n	8004b8e <HAL_ADC_ConfigChannel+0x98e>
 8004b8c:	4b99      	ldr	r3, [pc, #612]	@ (8004df4 <HAL_ADC_ConfigChannel+0xbf4>)
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fe f8f0 	bl	8002d74 <LL_ADC_GetCommonPathInternalCh>
 8004b94:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a96      	ldr	r2, [pc, #600]	@ (8004df8 <HAL_ADC_ConfigChannel+0xbf8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d12b      	bne.n	8004bfa <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ba2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ba6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d125      	bne.n	8004bfa <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a8d      	ldr	r2, [pc, #564]	@ (8004de8 <HAL_ADC_ConfigChannel+0xbe8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d004      	beq.n	8004bc2 <HAL_ADC_ConfigChannel+0x9c2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a8b      	ldr	r2, [pc, #556]	@ (8004dec <HAL_ADC_ConfigChannel+0xbec>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d101      	bne.n	8004bc6 <HAL_ADC_ConfigChannel+0x9c6>
 8004bc2:	4a8b      	ldr	r2, [pc, #556]	@ (8004df0 <HAL_ADC_ConfigChannel+0xbf0>)
 8004bc4:	e000      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x9c8>
 8004bc6:	4a8b      	ldr	r2, [pc, #556]	@ (8004df4 <HAL_ADC_ConfigChannel+0xbf4>)
 8004bc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bcc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	f7fe f8bb 	bl	8002d4e <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004bd8:	4b88      	ldr	r3, [pc, #544]	@ (8004dfc <HAL_ADC_ConfigChannel+0xbfc>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	099b      	lsrs	r3, r3, #6
 8004bde:	4a88      	ldr	r2, [pc, #544]	@ (8004e00 <HAL_ADC_ConfigChannel+0xc00>)
 8004be0:	fba2 2303 	umull	r2, r3, r2, r3
 8004be4:	099b      	lsrs	r3, r3, #6
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004bea:	e002      	b.n	8004bf2 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1f9      	bne.n	8004bec <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004bf8:	e045      	b.n	8004c86 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a81      	ldr	r2, [pc, #516]	@ (8004e04 <HAL_ADC_ConfigChannel+0xc04>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d11b      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d115      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a74      	ldr	r2, [pc, #464]	@ (8004de8 <HAL_ADC_ConfigChannel+0xbe8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d004      	beq.n	8004c24 <HAL_ADC_ConfigChannel+0xa24>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a73      	ldr	r2, [pc, #460]	@ (8004dec <HAL_ADC_ConfigChannel+0xbec>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d101      	bne.n	8004c28 <HAL_ADC_ConfigChannel+0xa28>
 8004c24:	4a72      	ldr	r2, [pc, #456]	@ (8004df0 <HAL_ADC_ConfigChannel+0xbf0>)
 8004c26:	e000      	b.n	8004c2a <HAL_ADC_ConfigChannel+0xa2a>
 8004c28:	4a72      	ldr	r2, [pc, #456]	@ (8004df4 <HAL_ADC_ConfigChannel+0xbf4>)
 8004c2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c32:	4619      	mov	r1, r3
 8004c34:	4610      	mov	r0, r2
 8004c36:	f7fe f88a 	bl	8002d4e <LL_ADC_SetCommonPathInternalCh>
 8004c3a:	e024      	b.n	8004c86 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a71      	ldr	r2, [pc, #452]	@ (8004e08 <HAL_ADC_ConfigChannel+0xc08>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d11f      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d115      	bne.n	8004c7e <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a64      	ldr	r2, [pc, #400]	@ (8004de8 <HAL_ADC_ConfigChannel+0xbe8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d004      	beq.n	8004c66 <HAL_ADC_ConfigChannel+0xa66>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a62      	ldr	r2, [pc, #392]	@ (8004dec <HAL_ADC_ConfigChannel+0xbec>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d101      	bne.n	8004c6a <HAL_ADC_ConfigChannel+0xa6a>
 8004c66:	4a62      	ldr	r2, [pc, #392]	@ (8004df0 <HAL_ADC_ConfigChannel+0xbf0>)
 8004c68:	e000      	b.n	8004c6c <HAL_ADC_ConfigChannel+0xa6c>
 8004c6a:	4a62      	ldr	r2, [pc, #392]	@ (8004df4 <HAL_ADC_ConfigChannel+0xbf4>)
 8004c6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f7fe f869 	bl	8002d4e <LL_ADC_SetCommonPathInternalCh>
 8004c7c:	e003      	b.n	8004c86 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a62      	ldr	r2, [pc, #392]	@ (8004e0c <HAL_ADC_ConfigChannel+0xc0c>)
 8004c84:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a61      	ldr	r2, [pc, #388]	@ (8004e10 <HAL_ADC_ConfigChannel+0xc10>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	f040 80ca 	bne.w	8004e26 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f040 80c3 	bne.w	8004e26 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f042 0201 	orr.w	r2, r2, #1
 8004cb0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004cb4:	e0b7      	b.n	8004e26 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cbe:	d004      	beq.n	8004cca <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004cc4:	4a53      	ldr	r2, [pc, #332]	@ (8004e14 <HAL_ADC_ConfigChannel+0xc14>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d106      	bne.n	8004cd8 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fe f9ed 	bl	80030b2 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f280 80a2 	bge.w	8004e26 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a40      	ldr	r2, [pc, #256]	@ (8004de8 <HAL_ADC_ConfigChannel+0xbe8>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d004      	beq.n	8004cf6 <HAL_ADC_ConfigChannel+0xaf6>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a3e      	ldr	r2, [pc, #248]	@ (8004dec <HAL_ADC_ConfigChannel+0xbec>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d101      	bne.n	8004cfa <HAL_ADC_ConfigChannel+0xafa>
 8004cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8004df0 <HAL_ADC_ConfigChannel+0xbf0>)
 8004cf8:	e000      	b.n	8004cfc <HAL_ADC_ConfigChannel+0xafc>
 8004cfa:	4b3e      	ldr	r3, [pc, #248]	@ (8004df4 <HAL_ADC_ConfigChannel+0xbf4>)
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fe f839 	bl	8002d74 <LL_ADC_GetCommonPathInternalCh>
 8004d02:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a43      	ldr	r2, [pc, #268]	@ (8004e18 <HAL_ADC_ConfigChannel+0xc18>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d115      	bne.n	8004d3c <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a34      	ldr	r2, [pc, #208]	@ (8004de8 <HAL_ADC_ConfigChannel+0xbe8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d004      	beq.n	8004d24 <HAL_ADC_ConfigChannel+0xb24>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a33      	ldr	r2, [pc, #204]	@ (8004dec <HAL_ADC_ConfigChannel+0xbec>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d101      	bne.n	8004d28 <HAL_ADC_ConfigChannel+0xb28>
 8004d24:	4a32      	ldr	r2, [pc, #200]	@ (8004df0 <HAL_ADC_ConfigChannel+0xbf0>)
 8004d26:	e000      	b.n	8004d2a <HAL_ADC_ConfigChannel+0xb2a>
 8004d28:	4a32      	ldr	r2, [pc, #200]	@ (8004df4 <HAL_ADC_ConfigChannel+0xbf4>)
 8004d2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d2e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004d32:	4619      	mov	r1, r3
 8004d34:	4610      	mov	r0, r2
 8004d36:	f7fe f80a 	bl	8002d4e <LL_ADC_SetCommonPathInternalCh>
 8004d3a:	e034      	b.n	8004da6 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a36      	ldr	r2, [pc, #216]	@ (8004e1c <HAL_ADC_ConfigChannel+0xc1c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d115      	bne.n	8004d72 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a27      	ldr	r2, [pc, #156]	@ (8004de8 <HAL_ADC_ConfigChannel+0xbe8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d004      	beq.n	8004d5a <HAL_ADC_ConfigChannel+0xb5a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a25      	ldr	r2, [pc, #148]	@ (8004dec <HAL_ADC_ConfigChannel+0xbec>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d101      	bne.n	8004d5e <HAL_ADC_ConfigChannel+0xb5e>
 8004d5a:	4a25      	ldr	r2, [pc, #148]	@ (8004df0 <HAL_ADC_ConfigChannel+0xbf0>)
 8004d5c:	e000      	b.n	8004d60 <HAL_ADC_ConfigChannel+0xb60>
 8004d5e:	4a25      	ldr	r2, [pc, #148]	@ (8004df4 <HAL_ADC_ConfigChannel+0xbf4>)
 8004d60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	f7fd ffef 	bl	8002d4e <LL_ADC_SetCommonPathInternalCh>
 8004d70:	e019      	b.n	8004da6 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a24      	ldr	r2, [pc, #144]	@ (8004e08 <HAL_ADC_ConfigChannel+0xc08>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d114      	bne.n	8004da6 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a19      	ldr	r2, [pc, #100]	@ (8004de8 <HAL_ADC_ConfigChannel+0xbe8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d004      	beq.n	8004d90 <HAL_ADC_ConfigChannel+0xb90>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a18      	ldr	r2, [pc, #96]	@ (8004dec <HAL_ADC_ConfigChannel+0xbec>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d101      	bne.n	8004d94 <HAL_ADC_ConfigChannel+0xb94>
 8004d90:	4a17      	ldr	r2, [pc, #92]	@ (8004df0 <HAL_ADC_ConfigChannel+0xbf0>)
 8004d92:	e000      	b.n	8004d96 <HAL_ADC_ConfigChannel+0xb96>
 8004d94:	4a17      	ldr	r2, [pc, #92]	@ (8004df4 <HAL_ADC_ConfigChannel+0xbf4>)
 8004d96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d9a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4610      	mov	r0, r2
 8004da2:	f7fd ffd4 	bl	8002d4e <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a19      	ldr	r2, [pc, #100]	@ (8004e10 <HAL_ADC_ConfigChannel+0xc10>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d13a      	bne.n	8004e26 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004db0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004db4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d134      	bne.n	8004e26 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f042 0201 	orr.w	r2, r2, #1
 8004dcc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004dd0:	e029      	b.n	8004e26 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dd6:	f043 0220 	orr.w	r2, r3, #32
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004de4:	e01f      	b.n	8004e26 <HAL_ADC_ConfigChannel+0xc26>
 8004de6:	bf00      	nop
 8004de8:	42028000 	.word	0x42028000
 8004dec:	42028100 	.word	0x42028100
 8004df0:	42028300 	.word	0x42028300
 8004df4:	46021300 	.word	0x46021300
 8004df8:	b6002000 	.word	0xb6002000
 8004dfc:	20000000 	.word	0x20000000
 8004e00:	053e2d63 	.word	0x053e2d63
 8004e04:	ba004000 	.word	0xba004000
 8004e08:	80000001 	.word	0x80000001
 8004e0c:	b2001000 	.word	0xb2001000
 8004e10:	d7200000 	.word	0xd7200000
 8004e14:	80000010 	.word	0x80000010
 8004e18:	ce080000 	.word	0xce080000
 8004e1c:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e20:	bf00      	nop
 8004e22:	e000      	b.n	8004e26 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e24:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004e2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	37dc      	adds	r7, #220	@ 0xdc
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd90      	pop	{r4, r7, pc}
 8004e3a:	bf00      	nop

08004e3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fe fa71 	bl	8003330 <LL_ADC_IsEnabled>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d17b      	bne.n	8004f4c <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f58 <ADC_Enable+0x11c>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00d      	beq.n	8004e7e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e66:	f043 0210 	orr.w	r2, r3, #16
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e72:	f043 0201 	orr.w	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e067      	b.n	8004f4e <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2201      	movs	r2, #1
 8004e84:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe fa3c 	bl	8003308 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d004      	beq.n	8004ea2 <ADC_Enable+0x66>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a2f      	ldr	r2, [pc, #188]	@ (8004f5c <ADC_Enable+0x120>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d054      	beq.n	8004f4c <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004ea2:	f7fd fee9 	bl	8002c78 <HAL_GetTick>
 8004ea6:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a2c      	ldr	r2, [pc, #176]	@ (8004f60 <ADC_Enable+0x124>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d004      	beq.n	8004ebc <ADC_Enable+0x80>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a2b      	ldr	r2, [pc, #172]	@ (8004f64 <ADC_Enable+0x128>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d101      	bne.n	8004ec0 <ADC_Enable+0x84>
 8004ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8004f68 <ADC_Enable+0x12c>)
 8004ebe:	e000      	b.n	8004ec2 <ADC_Enable+0x86>
 8004ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8004f6c <ADC_Enable+0x130>)
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fe f9b6 	bl	8003234 <LL_ADC_GetMultimode>
 8004ec8:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a25      	ldr	r2, [pc, #148]	@ (8004f64 <ADC_Enable+0x128>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d002      	beq.n	8004eda <ADC_Enable+0x9e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	e000      	b.n	8004edc <ADC_Enable+0xa0>
 8004eda:	4b21      	ldr	r3, [pc, #132]	@ (8004f60 <ADC_Enable+0x124>)
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d02c      	beq.n	8004f3e <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d130      	bne.n	8004f4c <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004eea:	e028      	b.n	8004f3e <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fe fa1d 	bl	8003330 <LL_ADC_IsEnabled>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d104      	bne.n	8004f06 <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fe fa01 	bl	8003308 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f06:	f7fd feb7 	bl	8002c78 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d914      	bls.n	8004f3e <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d00d      	beq.n	8004f3e <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f26:	f043 0210 	orr.w	r2, r3, #16
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f32:	f043 0201 	orr.w	r2, r3, #1
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e007      	b.n	8004f4e <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d1cf      	bne.n	8004eec <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	8000003f 	.word	0x8000003f
 8004f5c:	46021000 	.word	0x46021000
 8004f60:	42028000 	.word	0x42028000
 8004f64:	42028100 	.word	0x42028100
 8004f68:	42028300 	.word	0x42028300
 8004f6c:	46021300 	.word	0x46021300

08004f70 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f82:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d14b      	bne.n	8005022 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f8e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0308 	and.w	r3, r3, #8
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d021      	beq.n	8004fe8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fd ffdb 	bl	8002f64 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d032      	beq.n	800501a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d12b      	bne.n	800501a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fc6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d11f      	bne.n	800501a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fde:	f043 0201 	orr.w	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	679a      	str	r2, [r3, #120]	@ 0x78
 8004fe6:	e018      	b.n	800501a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d111      	bne.n	800501a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ffa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005006:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d105      	bne.n	800501a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005012:	f043 0201 	orr.w	r2, r3, #1
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f7fc fb64 	bl	80016e8 <HAL_ADC_ConvCpltCallback>
      /* Call ADC DMA error callback */
        HAL_ADC_ConvCpltCallback(hadc);
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005020:	e011      	b.n	8005046 <ADC_DMAConvCplt+0xd6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005026:	f003 0310 	and.w	r3, r3, #16
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7ff f8be 	bl	80041b0 <HAL_ADC_ErrorCallback>
}
 8005034:	e007      	b.n	8005046 <ADC_DMAConvCplt+0xd6>
        HAL_ADC_ConvCpltCallback(hadc);
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f7fc fb56 	bl	80016e8 <HAL_ADC_ConvCpltCallback>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
}
 8005046:	bf00      	nop
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b084      	sub	sp, #16
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800505a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f7fc faf3 	bl	8001648 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005062:	bf00      	nop
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b084      	sub	sp, #16
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005076:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800507c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005088:	f043 0204 	orr.w	r2, r3, #4
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f7ff f88d 	bl	80041b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005096:	bf00      	nop
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005100:	4b0c      	ldr	r3, [pc, #48]	@ (8005134 <__NVIC_SetPriorityGrouping+0x44>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800510c:	4013      	ands	r3, r2
 800510e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005118:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800511c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005122:	4a04      	ldr	r2, [pc, #16]	@ (8005134 <__NVIC_SetPriorityGrouping+0x44>)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	60d3      	str	r3, [r2, #12]
}
 8005128:	bf00      	nop
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	e000ed00 	.word	0xe000ed00

08005138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800513c:	4b04      	ldr	r3, [pc, #16]	@ (8005150 <__NVIC_GetPriorityGrouping+0x18>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	0a1b      	lsrs	r3, r3, #8
 8005142:	f003 0307 	and.w	r3, r3, #7
}
 8005146:	4618      	mov	r0, r3
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	e000ed00 	.word	0xe000ed00

08005154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800515e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005162:	2b00      	cmp	r3, #0
 8005164:	db0b      	blt.n	800517e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	f003 021f 	and.w	r2, r3, #31
 800516c:	4907      	ldr	r1, [pc, #28]	@ (800518c <__NVIC_EnableIRQ+0x38>)
 800516e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	2001      	movs	r0, #1
 8005176:	fa00 f202 	lsl.w	r2, r0, r2
 800517a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	e000e100 	.word	0xe000e100

08005190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	4603      	mov	r3, r0
 8005198:	6039      	str	r1, [r7, #0]
 800519a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800519c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	db0a      	blt.n	80051ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	490c      	ldr	r1, [pc, #48]	@ (80051dc <__NVIC_SetPriority+0x4c>)
 80051aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051ae:	0112      	lsls	r2, r2, #4
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	440b      	add	r3, r1
 80051b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051b8:	e00a      	b.n	80051d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	4908      	ldr	r1, [pc, #32]	@ (80051e0 <__NVIC_SetPriority+0x50>)
 80051c0:	88fb      	ldrh	r3, [r7, #6]
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	3b04      	subs	r3, #4
 80051c8:	0112      	lsls	r2, r2, #4
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	440b      	add	r3, r1
 80051ce:	761a      	strb	r2, [r3, #24]
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	e000e100 	.word	0xe000e100
 80051e0:	e000ed00 	.word	0xe000ed00

080051e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b089      	sub	sp, #36	@ 0x24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f1c3 0307 	rsb	r3, r3, #7
 80051fe:	2b04      	cmp	r3, #4
 8005200:	bf28      	it	cs
 8005202:	2304      	movcs	r3, #4
 8005204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	3304      	adds	r3, #4
 800520a:	2b06      	cmp	r3, #6
 800520c:	d902      	bls.n	8005214 <NVIC_EncodePriority+0x30>
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	3b03      	subs	r3, #3
 8005212:	e000      	b.n	8005216 <NVIC_EncodePriority+0x32>
 8005214:	2300      	movs	r3, #0
 8005216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005218:	f04f 32ff 	mov.w	r2, #4294967295
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	43da      	mvns	r2, r3
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	401a      	ands	r2, r3
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800522c:	f04f 31ff 	mov.w	r1, #4294967295
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	fa01 f303 	lsl.w	r3, r1, r3
 8005236:	43d9      	mvns	r1, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800523c:	4313      	orrs	r3, r2
         );
}
 800523e:	4618      	mov	r0, r3
 8005240:	3724      	adds	r7, #36	@ 0x24
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b082      	sub	sp, #8
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7ff ff4c 	bl	80050f0 <__NVIC_SetPriorityGrouping>
}
 8005258:	bf00      	nop
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	4603      	mov	r3, r0
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800526e:	f7ff ff63 	bl	8005138 <__NVIC_GetPriorityGrouping>
 8005272:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	6978      	ldr	r0, [r7, #20]
 800527a:	f7ff ffb3 	bl	80051e4 <NVIC_EncodePriority>
 800527e:	4602      	mov	r2, r0
 8005280:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005284:	4611      	mov	r1, r2
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff ff82 	bl	8005190 <__NVIC_SetPriority>
}
 800528c:	bf00      	nop
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	4603      	mov	r3, r0
 800529c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800529e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff ff56 	bl	8005154 <__NVIC_EnableIRQ>
}
 80052a8:	bf00      	nop
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052c0:	d301      	bcc.n	80052c6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80052c2:	2301      	movs	r3, #1
 80052c4:	e00d      	b.n	80052e2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80052c6:	4a0a      	ldr	r2, [pc, #40]	@ (80052f0 <HAL_SYSTICK_Config+0x40>)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80052ce:	4b08      	ldr	r3, [pc, #32]	@ (80052f0 <HAL_SYSTICK_Config+0x40>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80052d4:	4b06      	ldr	r3, [pc, #24]	@ (80052f0 <HAL_SYSTICK_Config+0x40>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a05      	ldr	r2, [pc, #20]	@ (80052f0 <HAL_SYSTICK_Config+0x40>)
 80052da:	f043 0303 	orr.w	r3, r3, #3
 80052de:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	e000e010 	.word	0xe000e010

080052f4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d844      	bhi.n	800538c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005302:	a201      	add	r2, pc, #4	@ (adr r2, 8005308 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005308:	0800532b 	.word	0x0800532b
 800530c:	08005349 	.word	0x08005349
 8005310:	0800536b 	.word	0x0800536b
 8005314:	0800538d 	.word	0x0800538d
 8005318:	0800531d 	.word	0x0800531d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800531c:	4b1f      	ldr	r3, [pc, #124]	@ (800539c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a1e      	ldr	r2, [pc, #120]	@ (800539c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005322:	f043 0304 	orr.w	r3, r3, #4
 8005326:	6013      	str	r3, [r2, #0]
      break;
 8005328:	e031      	b.n	800538e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800532a:	4b1c      	ldr	r3, [pc, #112]	@ (800539c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1b      	ldr	r2, [pc, #108]	@ (800539c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005330:	f023 0304 	bic.w	r3, r3, #4
 8005334:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8005336:	4b1a      	ldr	r3, [pc, #104]	@ (80053a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800533c:	4a18      	ldr	r2, [pc, #96]	@ (80053a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800533e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005342:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005346:	e022      	b.n	800538e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005348:	4b14      	ldr	r3, [pc, #80]	@ (800539c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a13      	ldr	r2, [pc, #76]	@ (800539c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800534e:	f023 0304 	bic.w	r3, r3, #4
 8005352:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005354:	4b12      	ldr	r3, [pc, #72]	@ (80053a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800535a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800535e:	4a10      	ldr	r2, [pc, #64]	@ (80053a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005360:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005364:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005368:	e011      	b.n	800538e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800536a:	4b0c      	ldr	r3, [pc, #48]	@ (800539c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a0b      	ldr	r2, [pc, #44]	@ (800539c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005370:	f023 0304 	bic.w	r3, r3, #4
 8005374:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8005376:	4b0a      	ldr	r3, [pc, #40]	@ (80053a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800537c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005380:	4a07      	ldr	r2, [pc, #28]	@ (80053a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005382:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005386:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800538a:	e000      	b.n	800538e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800538c:	bf00      	nop
  }
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	e000e010 	.word	0xe000e010
 80053a0:	46020c00 	.word	0x46020c00

080053a4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80053aa:	4b19      	ldr	r3, [pc, #100]	@ (8005410 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80053b6:	2304      	movs	r3, #4
 80053b8:	607b      	str	r3, [r7, #4]
 80053ba:	e021      	b.n	8005400 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80053bc:	4b15      	ldr	r3, [pc, #84]	@ (8005414 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80053be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053c2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80053c6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053ce:	d011      	beq.n	80053f4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053d6:	d810      	bhi.n	80053fa <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d004      	beq.n	80053e8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053e4:	d003      	beq.n	80053ee <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80053e6:	e008      	b.n	80053fa <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80053e8:	2300      	movs	r3, #0
 80053ea:	607b      	str	r3, [r7, #4]
        break;
 80053ec:	e008      	b.n	8005400 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80053ee:	2301      	movs	r3, #1
 80053f0:	607b      	str	r3, [r7, #4]
        break;
 80053f2:	e005      	b.n	8005400 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80053f4:	2302      	movs	r3, #2
 80053f6:	607b      	str	r3, [r7, #4]
        break;
 80053f8:	e002      	b.n	8005400 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80053fa:	2300      	movs	r3, #0
 80053fc:	607b      	str	r3, [r7, #4]
        break;
 80053fe:	bf00      	nop
    }
  }
  return systick_source;
 8005400:	687b      	ldr	r3, [r7, #4]
}
 8005402:	4618      	mov	r0, r3
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	e000e010 	.word	0xe000e010
 8005414:	46020c00 	.word	0x46020c00

08005418 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005420:	f7fd fc2a 	bl	8002c78 <HAL_GetTick>
 8005424:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e0db      	b.n	80055e8 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a6e      	ldr	r2, [pc, #440]	@ (80055f0 <HAL_DMA_Init+0x1d8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	f000 809f 	beq.w	800557a <HAL_DMA_Init+0x162>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a6c      	ldr	r2, [pc, #432]	@ (80055f4 <HAL_DMA_Init+0x1dc>)
 8005442:	4293      	cmp	r3, r2
 8005444:	f000 8099 	beq.w	800557a <HAL_DMA_Init+0x162>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a6a      	ldr	r2, [pc, #424]	@ (80055f8 <HAL_DMA_Init+0x1e0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	f000 8093 	beq.w	800557a <HAL_DMA_Init+0x162>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a68      	ldr	r2, [pc, #416]	@ (80055fc <HAL_DMA_Init+0x1e4>)
 800545a:	4293      	cmp	r3, r2
 800545c:	f000 808d 	beq.w	800557a <HAL_DMA_Init+0x162>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a66      	ldr	r2, [pc, #408]	@ (8005600 <HAL_DMA_Init+0x1e8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	f000 8087 	beq.w	800557a <HAL_DMA_Init+0x162>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a64      	ldr	r2, [pc, #400]	@ (8005604 <HAL_DMA_Init+0x1ec>)
 8005472:	4293      	cmp	r3, r2
 8005474:	f000 8081 	beq.w	800557a <HAL_DMA_Init+0x162>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a62      	ldr	r2, [pc, #392]	@ (8005608 <HAL_DMA_Init+0x1f0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d07b      	beq.n	800557a <HAL_DMA_Init+0x162>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a61      	ldr	r2, [pc, #388]	@ (800560c <HAL_DMA_Init+0x1f4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d076      	beq.n	800557a <HAL_DMA_Init+0x162>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a5f      	ldr	r2, [pc, #380]	@ (8005610 <HAL_DMA_Init+0x1f8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d071      	beq.n	800557a <HAL_DMA_Init+0x162>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a5e      	ldr	r2, [pc, #376]	@ (8005614 <HAL_DMA_Init+0x1fc>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d06c      	beq.n	800557a <HAL_DMA_Init+0x162>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a5c      	ldr	r2, [pc, #368]	@ (8005618 <HAL_DMA_Init+0x200>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d067      	beq.n	800557a <HAL_DMA_Init+0x162>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a5b      	ldr	r2, [pc, #364]	@ (800561c <HAL_DMA_Init+0x204>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d062      	beq.n	800557a <HAL_DMA_Init+0x162>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a59      	ldr	r2, [pc, #356]	@ (8005620 <HAL_DMA_Init+0x208>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d05d      	beq.n	800557a <HAL_DMA_Init+0x162>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a58      	ldr	r2, [pc, #352]	@ (8005624 <HAL_DMA_Init+0x20c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d058      	beq.n	800557a <HAL_DMA_Init+0x162>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a56      	ldr	r2, [pc, #344]	@ (8005628 <HAL_DMA_Init+0x210>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d053      	beq.n	800557a <HAL_DMA_Init+0x162>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a55      	ldr	r2, [pc, #340]	@ (800562c <HAL_DMA_Init+0x214>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d04e      	beq.n	800557a <HAL_DMA_Init+0x162>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a53      	ldr	r2, [pc, #332]	@ (8005630 <HAL_DMA_Init+0x218>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d049      	beq.n	800557a <HAL_DMA_Init+0x162>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a52      	ldr	r2, [pc, #328]	@ (8005634 <HAL_DMA_Init+0x21c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d044      	beq.n	800557a <HAL_DMA_Init+0x162>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a50      	ldr	r2, [pc, #320]	@ (8005638 <HAL_DMA_Init+0x220>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d03f      	beq.n	800557a <HAL_DMA_Init+0x162>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a4f      	ldr	r2, [pc, #316]	@ (800563c <HAL_DMA_Init+0x224>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d03a      	beq.n	800557a <HAL_DMA_Init+0x162>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a4d      	ldr	r2, [pc, #308]	@ (8005640 <HAL_DMA_Init+0x228>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d035      	beq.n	800557a <HAL_DMA_Init+0x162>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a4c      	ldr	r2, [pc, #304]	@ (8005644 <HAL_DMA_Init+0x22c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d030      	beq.n	800557a <HAL_DMA_Init+0x162>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a4a      	ldr	r2, [pc, #296]	@ (8005648 <HAL_DMA_Init+0x230>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d02b      	beq.n	800557a <HAL_DMA_Init+0x162>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a49      	ldr	r2, [pc, #292]	@ (800564c <HAL_DMA_Init+0x234>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d026      	beq.n	800557a <HAL_DMA_Init+0x162>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a47      	ldr	r2, [pc, #284]	@ (8005650 <HAL_DMA_Init+0x238>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d021      	beq.n	800557a <HAL_DMA_Init+0x162>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a46      	ldr	r2, [pc, #280]	@ (8005654 <HAL_DMA_Init+0x23c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d01c      	beq.n	800557a <HAL_DMA_Init+0x162>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a44      	ldr	r2, [pc, #272]	@ (8005658 <HAL_DMA_Init+0x240>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d017      	beq.n	800557a <HAL_DMA_Init+0x162>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a43      	ldr	r2, [pc, #268]	@ (800565c <HAL_DMA_Init+0x244>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d012      	beq.n	800557a <HAL_DMA_Init+0x162>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a41      	ldr	r2, [pc, #260]	@ (8005660 <HAL_DMA_Init+0x248>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00d      	beq.n	800557a <HAL_DMA_Init+0x162>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a40      	ldr	r2, [pc, #256]	@ (8005664 <HAL_DMA_Init+0x24c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d008      	beq.n	800557a <HAL_DMA_Init+0x162>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a3e      	ldr	r2, [pc, #248]	@ (8005668 <HAL_DMA_Init+0x250>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d003      	beq.n	800557a <HAL_DMA_Init+0x162>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a3d      	ldr	r2, [pc, #244]	@ (800566c <HAL_DMA_Init+0x254>)
 8005578:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2202      	movs	r2, #2
 8005586:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695a      	ldr	r2, [r3, #20]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 0206 	orr.w	r2, r2, #6
 8005598:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800559a:	e00f      	b.n	80055bc <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800559c:	f7fd fb6c 	bl	8002c78 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b05      	cmp	r3, #5
 80055a8:	d908      	bls.n	80055bc <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2210      	movs	r2, #16
 80055ae:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2203      	movs	r2, #3
 80055b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e015      	b.n	80055e8 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e8      	bne.n	800559c <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fb26 	bl	8005c1c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40020050 	.word	0x40020050
 80055f4:	50020050 	.word	0x50020050
 80055f8:	400200d0 	.word	0x400200d0
 80055fc:	500200d0 	.word	0x500200d0
 8005600:	40020150 	.word	0x40020150
 8005604:	50020150 	.word	0x50020150
 8005608:	400201d0 	.word	0x400201d0
 800560c:	500201d0 	.word	0x500201d0
 8005610:	40020250 	.word	0x40020250
 8005614:	50020250 	.word	0x50020250
 8005618:	400202d0 	.word	0x400202d0
 800561c:	500202d0 	.word	0x500202d0
 8005620:	40020350 	.word	0x40020350
 8005624:	50020350 	.word	0x50020350
 8005628:	400203d0 	.word	0x400203d0
 800562c:	500203d0 	.word	0x500203d0
 8005630:	40020450 	.word	0x40020450
 8005634:	50020450 	.word	0x50020450
 8005638:	400204d0 	.word	0x400204d0
 800563c:	500204d0 	.word	0x500204d0
 8005640:	40020550 	.word	0x40020550
 8005644:	50020550 	.word	0x50020550
 8005648:	400205d0 	.word	0x400205d0
 800564c:	500205d0 	.word	0x500205d0
 8005650:	40020650 	.word	0x40020650
 8005654:	50020650 	.word	0x50020650
 8005658:	400206d0 	.word	0x400206d0
 800565c:	500206d0 	.word	0x500206d0
 8005660:	40020750 	.word	0x40020750
 8005664:	50020750 	.word	0x50020750
 8005668:	400207d0 	.word	0x400207d0
 800566c:	500207d0 	.word	0x500207d0

08005670 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e04f      	b.n	8005728 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <HAL_DMA_Start_IT+0x26>
 8005692:	2302      	movs	r3, #2
 8005694:	e048      	b.n	8005728 <HAL_DMA_Start_IT+0xb8>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d136      	bne.n	8005718 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2202      	movs	r2, #2
 80056ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	68b9      	ldr	r1, [r7, #8]
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 fa86 	bl	8005bd0 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695a      	ldr	r2, [r3, #20]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80056d2:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d007      	beq.n	80056ec <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695a      	ldr	r2, [r3, #20]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056ea:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d007      	beq.n	8005704 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695a      	ldr	r2, [r3, #20]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005702:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695a      	ldr	r2, [r3, #20]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
 8005716:	e007      	b.n	8005728 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2240      	movs	r2, #64	@ 0x40
 800571c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8005738:	f7fd fa9e 	bl	8002c78 <HAL_GetTick>
 800573c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e06b      	b.n	8005820 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d008      	beq.n	8005766 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2220      	movs	r2, #32
 8005758:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e05c      	b.n	8005820 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	695a      	ldr	r2, [r3, #20]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f042 0204 	orr.w	r2, r2, #4
 8005774:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2205      	movs	r2, #5
 800577a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800577e:	e020      	b.n	80057c2 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005780:	f7fd fa7a 	bl	8002c78 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b05      	cmp	r3, #5
 800578c:	d919      	bls.n	80057c2 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005792:	f043 0210 	orr.w	r2, r3, #16
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2203      	movs	r2, #3
 800579e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057b2:	2201      	movs	r2, #1
 80057b4:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e02e      	b.n	8005820 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0d7      	beq.n	8005780 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695a      	ldr	r2, [r3, #20]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0202 	orr.w	r2, r2, #2
 80057de:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2204      	movs	r2, #4
 80057e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80057f0:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005802:	2b00      	cmp	r3, #0
 8005804:	d007      	beq.n	8005816 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800580a:	2201      	movs	r2, #1
 800580c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2200      	movs	r2, #0
 8005814:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e019      	b.n	800586e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d004      	beq.n	8005850 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e00e      	b.n	800586e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2204      	movs	r2, #4
 8005854:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6812      	ldr	r2, [r2, #0]
 8005862:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005866:	f043 0304 	orr.w	r3, r3, #4
 800586a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b086      	sub	sp, #24
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800588a:	f023 030f 	bic.w	r3, r3, #15
 800588e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005898:	3b50      	subs	r3, #80	@ 0x50
 800589a:	09db      	lsrs	r3, r3, #7
 800589c:	f003 031f 	and.w	r3, r3, #31
 80058a0:	2201      	movs	r2, #1
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4013      	ands	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 813b 	beq.w	8005b30 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d011      	beq.n	80058ec <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00a      	beq.n	80058ec <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80058de:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058e4:	f043 0201 	orr.w	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d011      	beq.n	800591e <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00a      	beq.n	800591e <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005910:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005916:	f043 0202 	orr.w	r2, r3, #2
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d011      	beq.n	8005950 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005942:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005948:	f043 0204 	orr.w	r2, r3, #4
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d011      	beq.n	8005982 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005974:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800597a:	f043 0208 	orr.w	r2, r3, #8
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800598c:	2b00      	cmp	r3, #0
 800598e:	d013      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00c      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059a6:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d04c      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d045      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80059dc:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d12e      	bne.n	8005a48 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	695a      	ldr	r2, [r3, #20]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059f8:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	695a      	ldr	r2, [r3, #20]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 0202 	orr.w	r2, r2, #2
 8005a08:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d007      	beq.n	8005a2e <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a22:	2201      	movs	r2, #1
 8005a24:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d07a      	beq.n	8005b34 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	4798      	blx	r3
        }

        return;
 8005a46:	e075      	b.n	8005b34 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2205      	movs	r2, #5
 8005a4c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d039      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d032      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d012      	beq.n	8005aae <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d116      	bne.n	8005ac0 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d111      	bne.n	8005ac0 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	731a      	strb	r2, [r3, #12]
 8005aac:	e008      	b.n	8005ac0 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d103      	bne.n	8005ac0 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005ac8:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d025      	beq.n	8005b36 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	695a      	ldr	r2, [r3, #20]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0202 	orr.w	r2, r2, #2
 8005af8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b12:	2201      	movs	r2, #1
 8005b14:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d007      	beq.n	8005b36 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	4798      	blx	r3
 8005b2e:	e002      	b.n	8005b36 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005b30:	bf00      	nop
 8005b32:	e000      	b.n	8005b36 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8005b34:	bf00      	nop
    }
  }
}
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005b4a:	b2db      	uxtb	r3, r3
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e02b      	b.n	8005bc4 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005b74:	f023 030f 	bic.w	r3, r3, #15
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b82:	3b50      	subs	r3, #80	@ 0x50
 8005b84:	09db      	lsrs	r3, r3, #7
 8005b86:	f003 031f 	and.w	r3, r3, #31
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b90:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d012      	beq.n	8005bc2 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	f003 0311 	and.w	r3, r3, #17
 8005ba2:	2b11      	cmp	r3, #17
 8005ba4:	d106      	bne.n	8005bb4 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	431a      	orrs	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	605a      	str	r2, [r3, #4]
 8005bb2:	e006      	b.n	8005bc2 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	43db      	mvns	r3, r3
 8005bbc:	401a      	ands	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005be4:	0c1b      	lsrs	r3, r3, #16
 8005be6:	041b      	lsls	r3, r3, #16
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	b291      	uxth	r1, r2
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	6812      	ldr	r2, [r2, #0]
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005bfc:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005c0e:	bf00      	nop
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
	...

08005c1c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	695a      	ldr	r2, [r3, #20]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a53      	ldr	r2, [pc, #332]	@ (8005da8 <DMA_Init+0x18c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	f000 80a0 	beq.w	8005da2 <DMA_Init+0x186>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a51      	ldr	r2, [pc, #324]	@ (8005dac <DMA_Init+0x190>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	f000 809a 	beq.w	8005da2 <DMA_Init+0x186>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a4f      	ldr	r2, [pc, #316]	@ (8005db0 <DMA_Init+0x194>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	f000 8094 	beq.w	8005da2 <DMA_Init+0x186>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a4d      	ldr	r2, [pc, #308]	@ (8005db4 <DMA_Init+0x198>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	f000 808e 	beq.w	8005da2 <DMA_Init+0x186>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a4b      	ldr	r2, [pc, #300]	@ (8005db8 <DMA_Init+0x19c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	f000 8088 	beq.w	8005da2 <DMA_Init+0x186>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a49      	ldr	r2, [pc, #292]	@ (8005dbc <DMA_Init+0x1a0>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	f000 8082 	beq.w	8005da2 <DMA_Init+0x186>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a47      	ldr	r2, [pc, #284]	@ (8005dc0 <DMA_Init+0x1a4>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d07c      	beq.n	8005da2 <DMA_Init+0x186>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a45      	ldr	r2, [pc, #276]	@ (8005dc4 <DMA_Init+0x1a8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d077      	beq.n	8005da2 <DMA_Init+0x186>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a44      	ldr	r2, [pc, #272]	@ (8005dc8 <DMA_Init+0x1ac>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d072      	beq.n	8005da2 <DMA_Init+0x186>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a42      	ldr	r2, [pc, #264]	@ (8005dcc <DMA_Init+0x1b0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d06d      	beq.n	8005da2 <DMA_Init+0x186>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a41      	ldr	r2, [pc, #260]	@ (8005dd0 <DMA_Init+0x1b4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d068      	beq.n	8005da2 <DMA_Init+0x186>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a3f      	ldr	r2, [pc, #252]	@ (8005dd4 <DMA_Init+0x1b8>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d063      	beq.n	8005da2 <DMA_Init+0x186>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a3e      	ldr	r2, [pc, #248]	@ (8005dd8 <DMA_Init+0x1bc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d05e      	beq.n	8005da2 <DMA_Init+0x186>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a3c      	ldr	r2, [pc, #240]	@ (8005ddc <DMA_Init+0x1c0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d059      	beq.n	8005da2 <DMA_Init+0x186>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a3b      	ldr	r2, [pc, #236]	@ (8005de0 <DMA_Init+0x1c4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d054      	beq.n	8005da2 <DMA_Init+0x186>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a39      	ldr	r2, [pc, #228]	@ (8005de4 <DMA_Init+0x1c8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d04f      	beq.n	8005da2 <DMA_Init+0x186>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a38      	ldr	r2, [pc, #224]	@ (8005de8 <DMA_Init+0x1cc>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d04a      	beq.n	8005da2 <DMA_Init+0x186>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a36      	ldr	r2, [pc, #216]	@ (8005dec <DMA_Init+0x1d0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d045      	beq.n	8005da2 <DMA_Init+0x186>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a35      	ldr	r2, [pc, #212]	@ (8005df0 <DMA_Init+0x1d4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d040      	beq.n	8005da2 <DMA_Init+0x186>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a33      	ldr	r2, [pc, #204]	@ (8005df4 <DMA_Init+0x1d8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d03b      	beq.n	8005da2 <DMA_Init+0x186>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a32      	ldr	r2, [pc, #200]	@ (8005df8 <DMA_Init+0x1dc>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d036      	beq.n	8005da2 <DMA_Init+0x186>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a30      	ldr	r2, [pc, #192]	@ (8005dfc <DMA_Init+0x1e0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d031      	beq.n	8005da2 <DMA_Init+0x186>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a2f      	ldr	r2, [pc, #188]	@ (8005e00 <DMA_Init+0x1e4>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d02c      	beq.n	8005da2 <DMA_Init+0x186>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a2d      	ldr	r2, [pc, #180]	@ (8005e04 <DMA_Init+0x1e8>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d027      	beq.n	8005da2 <DMA_Init+0x186>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a2c      	ldr	r2, [pc, #176]	@ (8005e08 <DMA_Init+0x1ec>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d022      	beq.n	8005da2 <DMA_Init+0x186>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a2a      	ldr	r2, [pc, #168]	@ (8005e0c <DMA_Init+0x1f0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d01d      	beq.n	8005da2 <DMA_Init+0x186>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a29      	ldr	r2, [pc, #164]	@ (8005e10 <DMA_Init+0x1f4>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d018      	beq.n	8005da2 <DMA_Init+0x186>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a27      	ldr	r2, [pc, #156]	@ (8005e14 <DMA_Init+0x1f8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d013      	beq.n	8005da2 <DMA_Init+0x186>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a26      	ldr	r2, [pc, #152]	@ (8005e18 <DMA_Init+0x1fc>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00e      	beq.n	8005da2 <DMA_Init+0x186>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a24      	ldr	r2, [pc, #144]	@ (8005e1c <DMA_Init+0x200>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d009      	beq.n	8005da2 <DMA_Init+0x186>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a23      	ldr	r2, [pc, #140]	@ (8005e20 <DMA_Init+0x204>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d004      	beq.n	8005da2 <DMA_Init+0x186>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a21      	ldr	r2, [pc, #132]	@ (8005e24 <DMA_Init+0x208>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d142      	bne.n	8005e28 <DMA_Init+0x20c>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e041      	b.n	8005e2a <DMA_Init+0x20e>
 8005da6:	bf00      	nop
 8005da8:	40020050 	.word	0x40020050
 8005dac:	50020050 	.word	0x50020050
 8005db0:	400200d0 	.word	0x400200d0
 8005db4:	500200d0 	.word	0x500200d0
 8005db8:	40020150 	.word	0x40020150
 8005dbc:	50020150 	.word	0x50020150
 8005dc0:	400201d0 	.word	0x400201d0
 8005dc4:	500201d0 	.word	0x500201d0
 8005dc8:	40020250 	.word	0x40020250
 8005dcc:	50020250 	.word	0x50020250
 8005dd0:	400202d0 	.word	0x400202d0
 8005dd4:	500202d0 	.word	0x500202d0
 8005dd8:	40020350 	.word	0x40020350
 8005ddc:	50020350 	.word	0x50020350
 8005de0:	400203d0 	.word	0x400203d0
 8005de4:	500203d0 	.word	0x500203d0
 8005de8:	40020450 	.word	0x40020450
 8005dec:	50020450 	.word	0x50020450
 8005df0:	400204d0 	.word	0x400204d0
 8005df4:	500204d0 	.word	0x500204d0
 8005df8:	40020550 	.word	0x40020550
 8005dfc:	50020550 	.word	0x50020550
 8005e00:	400205d0 	.word	0x400205d0
 8005e04:	500205d0 	.word	0x500205d0
 8005e08:	40020650 	.word	0x40020650
 8005e0c:	50020650 	.word	0x50020650
 8005e10:	400206d0 	.word	0x400206d0
 8005e14:	500206d0 	.word	0x500206d0
 8005e18:	40020750 	.word	0x40020750
 8005e1c:	50020750 	.word	0x50020750
 8005e20:	400207d0 	.word	0x400207d0
 8005e24:	500207d0 	.word	0x500207d0
 8005e28:	2300      	movs	r3, #0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d012      	beq.n	8005e54 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e36:	3b01      	subs	r3, #1
 8005e38:	051b      	lsls	r3, r3, #20
 8005e3a:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005e3e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e44:	3b01      	subs	r3, #1
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005e4c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5a:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e74:	431a      	orrs	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e86:	f040 80b0 	bne.w	8005fea <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a82      	ldr	r2, [pc, #520]	@ (8006098 <DMA_Init+0x47c>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	f000 80a0 	beq.w	8005fd6 <DMA_Init+0x3ba>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a80      	ldr	r2, [pc, #512]	@ (800609c <DMA_Init+0x480>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	f000 809a 	beq.w	8005fd6 <DMA_Init+0x3ba>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a7e      	ldr	r2, [pc, #504]	@ (80060a0 <DMA_Init+0x484>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	f000 8094 	beq.w	8005fd6 <DMA_Init+0x3ba>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a7c      	ldr	r2, [pc, #496]	@ (80060a4 <DMA_Init+0x488>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	f000 808e 	beq.w	8005fd6 <DMA_Init+0x3ba>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a7a      	ldr	r2, [pc, #488]	@ (80060a8 <DMA_Init+0x48c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	f000 8088 	beq.w	8005fd6 <DMA_Init+0x3ba>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a78      	ldr	r2, [pc, #480]	@ (80060ac <DMA_Init+0x490>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	f000 8082 	beq.w	8005fd6 <DMA_Init+0x3ba>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a76      	ldr	r2, [pc, #472]	@ (80060b0 <DMA_Init+0x494>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d07c      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a74      	ldr	r2, [pc, #464]	@ (80060b4 <DMA_Init+0x498>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d077      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a73      	ldr	r2, [pc, #460]	@ (80060b8 <DMA_Init+0x49c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d072      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a71      	ldr	r2, [pc, #452]	@ (80060bc <DMA_Init+0x4a0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d06d      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a70      	ldr	r2, [pc, #448]	@ (80060c0 <DMA_Init+0x4a4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d068      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a6e      	ldr	r2, [pc, #440]	@ (80060c4 <DMA_Init+0x4a8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d063      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a6d      	ldr	r2, [pc, #436]	@ (80060c8 <DMA_Init+0x4ac>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d05e      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a6b      	ldr	r2, [pc, #428]	@ (80060cc <DMA_Init+0x4b0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d059      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a6a      	ldr	r2, [pc, #424]	@ (80060d0 <DMA_Init+0x4b4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d054      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a68      	ldr	r2, [pc, #416]	@ (80060d4 <DMA_Init+0x4b8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d04f      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a67      	ldr	r2, [pc, #412]	@ (80060d8 <DMA_Init+0x4bc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d04a      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a65      	ldr	r2, [pc, #404]	@ (80060dc <DMA_Init+0x4c0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d045      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a64      	ldr	r2, [pc, #400]	@ (80060e0 <DMA_Init+0x4c4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d040      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a62      	ldr	r2, [pc, #392]	@ (80060e4 <DMA_Init+0x4c8>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d03b      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a61      	ldr	r2, [pc, #388]	@ (80060e8 <DMA_Init+0x4cc>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d036      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a5f      	ldr	r2, [pc, #380]	@ (80060ec <DMA_Init+0x4d0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d031      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a5e      	ldr	r2, [pc, #376]	@ (80060f0 <DMA_Init+0x4d4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d02c      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a5c      	ldr	r2, [pc, #368]	@ (80060f4 <DMA_Init+0x4d8>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d027      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a5b      	ldr	r2, [pc, #364]	@ (80060f8 <DMA_Init+0x4dc>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d022      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a59      	ldr	r2, [pc, #356]	@ (80060fc <DMA_Init+0x4e0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d01d      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a58      	ldr	r2, [pc, #352]	@ (8006100 <DMA_Init+0x4e4>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d018      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a56      	ldr	r2, [pc, #344]	@ (8006104 <DMA_Init+0x4e8>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d013      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a55      	ldr	r2, [pc, #340]	@ (8006108 <DMA_Init+0x4ec>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d00e      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a53      	ldr	r2, [pc, #332]	@ (800610c <DMA_Init+0x4f0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d009      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a52      	ldr	r2, [pc, #328]	@ (8006110 <DMA_Init+0x4f4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d004      	beq.n	8005fd6 <DMA_Init+0x3ba>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a50      	ldr	r2, [pc, #320]	@ (8006114 <DMA_Init+0x4f8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d101      	bne.n	8005fda <DMA_Init+0x3be>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <DMA_Init+0x3c0>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00d      	beq.n	8005ffc <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	e008      	b.n	8005ffc <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ff2:	d103      	bne.n	8005ffc <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ffa:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006002:	4b45      	ldr	r3, [pc, #276]	@ (8006118 <DMA_Init+0x4fc>)
 8006004:	4013      	ands	r3, r2
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6812      	ldr	r2, [r2, #0]
 800600a:	68f9      	ldr	r1, [r7, #12]
 800600c:	430b      	orrs	r3, r1
 800600e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2200      	movs	r2, #0
 8006016:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a36      	ldr	r2, [pc, #216]	@ (80060f8 <DMA_Init+0x4dc>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d022      	beq.n	8006068 <DMA_Init+0x44c>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a35      	ldr	r2, [pc, #212]	@ (80060fc <DMA_Init+0x4e0>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d01d      	beq.n	8006068 <DMA_Init+0x44c>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a33      	ldr	r2, [pc, #204]	@ (8006100 <DMA_Init+0x4e4>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d018      	beq.n	8006068 <DMA_Init+0x44c>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a32      	ldr	r2, [pc, #200]	@ (8006104 <DMA_Init+0x4e8>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d013      	beq.n	8006068 <DMA_Init+0x44c>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a30      	ldr	r2, [pc, #192]	@ (8006108 <DMA_Init+0x4ec>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00e      	beq.n	8006068 <DMA_Init+0x44c>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a2f      	ldr	r2, [pc, #188]	@ (800610c <DMA_Init+0x4f0>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d009      	beq.n	8006068 <DMA_Init+0x44c>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a2d      	ldr	r2, [pc, #180]	@ (8006110 <DMA_Init+0x4f4>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d004      	beq.n	8006068 <DMA_Init+0x44c>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a2c      	ldr	r2, [pc, #176]	@ (8006114 <DMA_Init+0x4f8>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d101      	bne.n	800606c <DMA_Init+0x450>
 8006068:	2301      	movs	r3, #1
 800606a:	e000      	b.n	800606e <DMA_Init+0x452>
 800606c:	2300      	movs	r3, #0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2200      	movs	r2, #0
 8006078:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2200      	movs	r2, #0
 8006080:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2200      	movs	r2, #0
 8006088:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800608a:	bf00      	nop
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	40020050 	.word	0x40020050
 800609c:	50020050 	.word	0x50020050
 80060a0:	400200d0 	.word	0x400200d0
 80060a4:	500200d0 	.word	0x500200d0
 80060a8:	40020150 	.word	0x40020150
 80060ac:	50020150 	.word	0x50020150
 80060b0:	400201d0 	.word	0x400201d0
 80060b4:	500201d0 	.word	0x500201d0
 80060b8:	40020250 	.word	0x40020250
 80060bc:	50020250 	.word	0x50020250
 80060c0:	400202d0 	.word	0x400202d0
 80060c4:	500202d0 	.word	0x500202d0
 80060c8:	40020350 	.word	0x40020350
 80060cc:	50020350 	.word	0x50020350
 80060d0:	400203d0 	.word	0x400203d0
 80060d4:	500203d0 	.word	0x500203d0
 80060d8:	40020450 	.word	0x40020450
 80060dc:	50020450 	.word	0x50020450
 80060e0:	400204d0 	.word	0x400204d0
 80060e4:	500204d0 	.word	0x500204d0
 80060e8:	40020550 	.word	0x40020550
 80060ec:	50020550 	.word	0x50020550
 80060f0:	400205d0 	.word	0x400205d0
 80060f4:	500205d0 	.word	0x500205d0
 80060f8:	40020650 	.word	0x40020650
 80060fc:	50020650 	.word	0x50020650
 8006100:	400206d0 	.word	0x400206d0
 8006104:	500206d0 	.word	0x500206d0
 8006108:	40020750 	.word	0x40020750
 800610c:	50020750 	.word	0x50020750
 8006110:	400207d0 	.word	0x400207d0
 8006114:	500207d0 	.word	0x500207d0
 8006118:	3c803180 	.word	0x3c803180

0800611c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e053      	b.n	80061d6 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d106      	bne.n	8006148 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fb fd74 	bl	8001c30 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800615a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6851      	ldr	r1, [r2, #4]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	69d2      	ldr	r2, [r2, #28]
 8006166:	4311      	orrs	r1, r2
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	6812      	ldr	r2, [r2, #0]
 800616c:	430b      	orrs	r3, r1
 800616e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006176:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 800617a:	f023 0301 	bic.w	r3, r3, #1
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	6891      	ldr	r1, [r2, #8]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	6992      	ldr	r2, [r2, #24]
 8006186:	4311      	orrs	r1, r2
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	430b      	orrs	r3, r1
 800618e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006196:	0c1b      	lsrs	r3, r3, #16
 8006198:	041b      	lsls	r3, r3, #16
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	68d1      	ldr	r1, [r2, #12]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6812      	ldr	r2, [r2, #0]
 80061a2:	430b      	orrs	r3, r1
 80061a4:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ac:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	051a      	lsls	r2, r3, #20
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	055b      	lsls	r3, r3, #21
 80061bc:	431a      	orrs	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d101      	bne.n	8006204 <HAL_DMA2D_ConfigLayer+0x24>
 8006200:	2302      	movs	r3, #2
 8006202:	e092      	b.n	800632a <HAL_DMA2D_ConfigLayer+0x14a>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	4613      	mov	r3, r2
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	1a9b      	subs	r3, r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	3328      	adds	r3, #40	@ 0x28
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	4413      	add	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	041b      	lsls	r3, r3, #16
 8006230:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006238:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006244:	4b3c      	ldr	r3, [pc, #240]	@ (8006338 <HAL_DMA2D_ConfigLayer+0x158>)
 8006246:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	2b0a      	cmp	r3, #10
 800624e:	d003      	beq.n	8006258 <HAL_DMA2D_ConfigLayer+0x78>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b09      	cmp	r3, #9
 8006256:	d107      	bne.n	8006268 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	4313      	orrs	r3, r2
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	e005      	b.n	8006274 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	061b      	lsls	r3, r3, #24
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4313      	orrs	r3, r2
 8006272:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d120      	bne.n	80062bc <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	43db      	mvns	r3, r3
 8006284:	ea02 0103 	and.w	r1, r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	430a      	orrs	r2, r1
 8006290:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	6812      	ldr	r2, [r2, #0]
 800629a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b0a      	cmp	r3, #10
 80062a2:	d003      	beq.n	80062ac <HAL_DMA2D_ConfigLayer+0xcc>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2b09      	cmp	r3, #9
 80062aa:	d135      	bne.n	8006318 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	68da      	ldr	r2, [r3, #12]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80062b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80062ba:	e02d      	b.n	8006318 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	2b0b      	cmp	r3, #11
 80062c2:	d109      	bne.n	80062d8 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	049b      	lsls	r3, r3, #18
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80062d6:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	69da      	ldr	r2, [r3, #28]
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	43db      	mvns	r3, r3
 80062e2:	ea02 0103 	and.w	r1, r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	6812      	ldr	r2, [r2, #0]
 80062f8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	2b0a      	cmp	r3, #10
 8006300:	d003      	beq.n	800630a <HAL_DMA2D_ConfigLayer+0x12a>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2b09      	cmp	r3, #9
 8006308:	d106      	bne.n	8006318 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006316:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	371c      	adds	r7, #28
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	ff33000f 	.word	0xff33000f

0800633c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006344:	f7fc fc98 	bl	8002c78 <HAL_GetTick>
 8006348:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e0db      	b.n	800650c <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a6e      	ldr	r2, [pc, #440]	@ (8006514 <HAL_DMAEx_List_Init+0x1d8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	f000 809f 	beq.w	800649e <HAL_DMAEx_List_Init+0x162>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a6c      	ldr	r2, [pc, #432]	@ (8006518 <HAL_DMAEx_List_Init+0x1dc>)
 8006366:	4293      	cmp	r3, r2
 8006368:	f000 8099 	beq.w	800649e <HAL_DMAEx_List_Init+0x162>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a6a      	ldr	r2, [pc, #424]	@ (800651c <HAL_DMAEx_List_Init+0x1e0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	f000 8093 	beq.w	800649e <HAL_DMAEx_List_Init+0x162>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a68      	ldr	r2, [pc, #416]	@ (8006520 <HAL_DMAEx_List_Init+0x1e4>)
 800637e:	4293      	cmp	r3, r2
 8006380:	f000 808d 	beq.w	800649e <HAL_DMAEx_List_Init+0x162>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a66      	ldr	r2, [pc, #408]	@ (8006524 <HAL_DMAEx_List_Init+0x1e8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	f000 8087 	beq.w	800649e <HAL_DMAEx_List_Init+0x162>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a64      	ldr	r2, [pc, #400]	@ (8006528 <HAL_DMAEx_List_Init+0x1ec>)
 8006396:	4293      	cmp	r3, r2
 8006398:	f000 8081 	beq.w	800649e <HAL_DMAEx_List_Init+0x162>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a62      	ldr	r2, [pc, #392]	@ (800652c <HAL_DMAEx_List_Init+0x1f0>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d07b      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a61      	ldr	r2, [pc, #388]	@ (8006530 <HAL_DMAEx_List_Init+0x1f4>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d076      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a5f      	ldr	r2, [pc, #380]	@ (8006534 <HAL_DMAEx_List_Init+0x1f8>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d071      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a5e      	ldr	r2, [pc, #376]	@ (8006538 <HAL_DMAEx_List_Init+0x1fc>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d06c      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a5c      	ldr	r2, [pc, #368]	@ (800653c <HAL_DMAEx_List_Init+0x200>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d067      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a5b      	ldr	r2, [pc, #364]	@ (8006540 <HAL_DMAEx_List_Init+0x204>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d062      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a59      	ldr	r2, [pc, #356]	@ (8006544 <HAL_DMAEx_List_Init+0x208>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d05d      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a58      	ldr	r2, [pc, #352]	@ (8006548 <HAL_DMAEx_List_Init+0x20c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d058      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a56      	ldr	r2, [pc, #344]	@ (800654c <HAL_DMAEx_List_Init+0x210>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d053      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a55      	ldr	r2, [pc, #340]	@ (8006550 <HAL_DMAEx_List_Init+0x214>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d04e      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a53      	ldr	r2, [pc, #332]	@ (8006554 <HAL_DMAEx_List_Init+0x218>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d049      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a52      	ldr	r2, [pc, #328]	@ (8006558 <HAL_DMAEx_List_Init+0x21c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d044      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a50      	ldr	r2, [pc, #320]	@ (800655c <HAL_DMAEx_List_Init+0x220>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d03f      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a4f      	ldr	r2, [pc, #316]	@ (8006560 <HAL_DMAEx_List_Init+0x224>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d03a      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a4d      	ldr	r2, [pc, #308]	@ (8006564 <HAL_DMAEx_List_Init+0x228>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d035      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a4c      	ldr	r2, [pc, #304]	@ (8006568 <HAL_DMAEx_List_Init+0x22c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d030      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a4a      	ldr	r2, [pc, #296]	@ (800656c <HAL_DMAEx_List_Init+0x230>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d02b      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a49      	ldr	r2, [pc, #292]	@ (8006570 <HAL_DMAEx_List_Init+0x234>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d026      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a47      	ldr	r2, [pc, #284]	@ (8006574 <HAL_DMAEx_List_Init+0x238>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d021      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a46      	ldr	r2, [pc, #280]	@ (8006578 <HAL_DMAEx_List_Init+0x23c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d01c      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a44      	ldr	r2, [pc, #272]	@ (800657c <HAL_DMAEx_List_Init+0x240>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d017      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a43      	ldr	r2, [pc, #268]	@ (8006580 <HAL_DMAEx_List_Init+0x244>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d012      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a41      	ldr	r2, [pc, #260]	@ (8006584 <HAL_DMAEx_List_Init+0x248>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d00d      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a40      	ldr	r2, [pc, #256]	@ (8006588 <HAL_DMAEx_List_Init+0x24c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d008      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a3e      	ldr	r2, [pc, #248]	@ (800658c <HAL_DMAEx_List_Init+0x250>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d003      	beq.n	800649e <HAL_DMAEx_List_Init+0x162>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a3d      	ldr	r2, [pc, #244]	@ (8006590 <HAL_DMAEx_List_Init+0x254>)
 800649c:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2202      	movs	r2, #2
 80064aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695a      	ldr	r2, [r3, #20]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f042 0206 	orr.w	r2, r2, #6
 80064bc:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80064be:	e00f      	b.n	80064e0 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80064c0:	f7fc fbda 	bl	8002c78 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b05      	cmp	r3, #5
 80064cc:	d908      	bls.n	80064e0 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2210      	movs	r2, #16
 80064d2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2203      	movs	r2, #3
 80064d8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e015      	b.n	800650c <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e8      	bne.n	80064c0 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fae0 	bl	8006ab4 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	40020050 	.word	0x40020050
 8006518:	50020050 	.word	0x50020050
 800651c:	400200d0 	.word	0x400200d0
 8006520:	500200d0 	.word	0x500200d0
 8006524:	40020150 	.word	0x40020150
 8006528:	50020150 	.word	0x50020150
 800652c:	400201d0 	.word	0x400201d0
 8006530:	500201d0 	.word	0x500201d0
 8006534:	40020250 	.word	0x40020250
 8006538:	50020250 	.word	0x50020250
 800653c:	400202d0 	.word	0x400202d0
 8006540:	500202d0 	.word	0x500202d0
 8006544:	40020350 	.word	0x40020350
 8006548:	50020350 	.word	0x50020350
 800654c:	400203d0 	.word	0x400203d0
 8006550:	500203d0 	.word	0x500203d0
 8006554:	40020450 	.word	0x40020450
 8006558:	50020450 	.word	0x50020450
 800655c:	400204d0 	.word	0x400204d0
 8006560:	500204d0 	.word	0x500204d0
 8006564:	40020550 	.word	0x40020550
 8006568:	50020550 	.word	0x50020550
 800656c:	400205d0 	.word	0x400205d0
 8006570:	500205d0 	.word	0x500205d0
 8006574:	40020650 	.word	0x40020650
 8006578:	50020650 	.word	0x50020650
 800657c:	400206d0 	.word	0x400206d0
 8006580:	500206d0 	.word	0x500206d0
 8006584:	40020750 	.word	0x40020750
 8006588:	50020750 	.word	0x50020750
 800658c:	400207d0 	.word	0x400207d0
 8006590:	500207d0 	.word	0x500207d0

08006594 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_DMAEx_List_Start_IT+0x16>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e082      	b.n	80066b4 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80065b4:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065c0:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d005      	beq.n	80065d4 <HAL_DMAEx_List_Start_IT+0x40>
 80065c8:	7dfb      	ldrb	r3, [r7, #23]
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d16a      	bne.n	80066a4 <HAL_DMAEx_List_Start_IT+0x110>
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d067      	beq.n	80066a4 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d157      	bne.n	8006690 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d101      	bne.n	80065ee <HAL_DMAEx_List_Start_IT+0x5a>
 80065ea:	2302      	movs	r3, #2
 80065ec:	e062      	b.n	80066b4 <HAL_DMAEx_List_Start_IT+0x120>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2202      	movs	r2, #2
 80065fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006602:	2202      	movs	r2, #2
 8006604:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006610:	2200      	movs	r2, #0
 8006612:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695a      	ldr	r2, [r3, #20]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8006622:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006628:	2b00      	cmp	r3, #0
 800662a:	d007      	beq.n	800663c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	695a      	ldr	r2, [r3, #20]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800663a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695a      	ldr	r2, [r3, #20]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006652:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f107 010c 	add.w	r1, r7, #12
 800665e:	2200      	movs	r2, #0
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fe47 	bl	80072f4 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4619      	mov	r1, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	0c0b      	lsrs	r3, r1, #16
 8006674:	041b      	lsls	r3, r3, #16
 8006676:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006684:	4013      	ands	r3, r2
 8006686:	68f9      	ldr	r1, [r7, #12]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6812      	ldr	r2, [r2, #0]
 800668c:	430b      	orrs	r3, r1
 800668e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	695a      	ldr	r2, [r3, #20]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0201 	orr.w	r2, r2, #1
 800669e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	e007      	b.n	80066b4 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2240      	movs	r2, #64	@ 0x40
 80066a8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3718      	adds	r7, #24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <HAL_DMAEx_List_BuildNode+0x16>
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e004      	b.n	80066e0 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fb43 	bl	8006d64 <DMA_List_BuildNode>

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <HAL_DMAEx_List_GetNodeConfig+0x16>
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e004      	b.n	800670c <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fc7f 	bl	8007008 <DMA_List_GetNodeConfig>

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b08c      	sub	sp, #48	@ 0x30
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <HAL_DMAEx_List_InsertNode+0x18>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e0b6      	b.n	800689e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d104      	bne.n	8006742 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2204      	movs	r2, #4
 800673c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e0ad      	b.n	800689e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fd66 	bl	800721c <DMA_List_CheckNodesBaseAddresses>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2205      	movs	r2, #5
 800675a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e09e      	b.n	800689e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	68b9      	ldr	r1, [r7, #8]
 8006768:	4618      	mov	r0, r3
 800676a:	f000 fd87 	bl	800727c <DMA_List_CheckNodesTypes>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d004      	beq.n	800677e <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2204      	movs	r2, #4
 8006778:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e08f      	b.n	800689e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2202      	movs	r2, #2
 8006782:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800678a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800678e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006792:	4619      	mov	r1, r3
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fdad 	bl	80072f4 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d11a      	bne.n	80067d8 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d106      	bne.n	80067b6 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2201      	movs	r2, #1
 80067b2:	609a      	str	r2, [r3, #8]
 80067b4:	e06c      	b.n	8006890 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80067c2:	4013      	ands	r3, r2
 80067c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067c8:	4319      	orrs	r1, r3
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2202      	movs	r2, #2
 80067d4:	609a      	str	r2, [r3, #8]
 80067d6:	e05b      	b.n	8006890 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10f      	bne.n	80067fe <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80067e8:	4013      	ands	r3, r2
 80067ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067ee:	4319      	orrs	r1, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	e043      	b.n	8006886 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80067fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006800:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8006802:	f107 0314 	add.w	r3, r7, #20
 8006806:	461a      	mov	r2, r3
 8006808:	68b9      	ldr	r1, [r7, #8]
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f000 fda2 	bl	8007354 <DMA_List_FindNode>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d132      	bne.n	800687c <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8006816:	69fa      	ldr	r2, [r7, #28]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	429a      	cmp	r2, r3
 800681e:	d11a      	bne.n	8006856 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00b      	beq.n	8006840 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	461a      	mov	r2, r3
 800682e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006832:	4013      	ands	r3, r2
 8006834:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006836:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006838:	4319      	orrs	r1, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006846:	4013      	ands	r3, r2
 8006848:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800684a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800684c:	4319      	orrs	r1, r3
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006854:	e017      	b.n	8006886 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8006856:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006858:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800686c:	4013      	ands	r3, r2
 800686e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006870:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006872:	4319      	orrs	r1, r3
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800687a:	e004      	b.n	8006886 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2206      	movs	r2, #6
 8006880:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e00b      	b.n	800689e <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2201      	movs	r2, #1
 800689a:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3730      	adds	r7, #48	@ 0x30
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b08a      	sub	sp, #40	@ 0x28
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e052      	b.n	800695e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d104      	bne.n	80068ca <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e049      	b.n	800695e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00c      	beq.n	80068ec <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d101      	bne.n	80068e2 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	e03d      	b.n	800695e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2204      	movs	r2, #4
 80068e6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e038      	b.n	800695e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d104      	bne.n	80068fe <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2204      	movs	r2, #4
 80068f8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e02f      	b.n	800695e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2202      	movs	r2, #2
 8006902:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f107 0220 	add.w	r2, r7, #32
 8006912:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8006916:	4618      	mov	r0, r3
 8006918:	f000 fcec 	bl	80072f4 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8006920:	f107 030c 	add.w	r3, r7, #12
 8006924:	461a      	mov	r2, r3
 8006926:	2100      	movs	r1, #0
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fd13 	bl	8007354 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006938:	4013      	ands	r3, r2
 800693a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	4610      	mov	r0, r2
 8006940:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006942:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006944:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3728      	adds	r7, #40	@ 0x28
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d002      	beq.n	800697e <HAL_DMAEx_List_LinkQ+0x16>
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e072      	b.n	8006a68 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006988:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d002      	beq.n	800699c <HAL_DMAEx_List_LinkQ+0x34>
 8006996:	7bfb      	ldrb	r3, [r7, #15]
 8006998:	2b05      	cmp	r3, #5
 800699a:	d108      	bne.n	80069ae <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2240      	movs	r2, #64	@ 0x40
 80069a0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e05c      	b.n	8006a68 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	7b1b      	ldrb	r3, [r3, #12]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d104      	bne.n	80069c2 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	2201      	movs	r2, #1
 80069bc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e052      	b.n	8006a68 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a2b      	ldr	r2, [pc, #172]	@ (8006a74 <HAL_DMAEx_List_LinkQ+0x10c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d022      	beq.n	8006a12 <HAL_DMAEx_List_LinkQ+0xaa>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a29      	ldr	r2, [pc, #164]	@ (8006a78 <HAL_DMAEx_List_LinkQ+0x110>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d01d      	beq.n	8006a12 <HAL_DMAEx_List_LinkQ+0xaa>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a28      	ldr	r2, [pc, #160]	@ (8006a7c <HAL_DMAEx_List_LinkQ+0x114>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d018      	beq.n	8006a12 <HAL_DMAEx_List_LinkQ+0xaa>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a26      	ldr	r2, [pc, #152]	@ (8006a80 <HAL_DMAEx_List_LinkQ+0x118>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d013      	beq.n	8006a12 <HAL_DMAEx_List_LinkQ+0xaa>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a25      	ldr	r2, [pc, #148]	@ (8006a84 <HAL_DMAEx_List_LinkQ+0x11c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00e      	beq.n	8006a12 <HAL_DMAEx_List_LinkQ+0xaa>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a23      	ldr	r2, [pc, #140]	@ (8006a88 <HAL_DMAEx_List_LinkQ+0x120>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d009      	beq.n	8006a12 <HAL_DMAEx_List_LinkQ+0xaa>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a22      	ldr	r2, [pc, #136]	@ (8006a8c <HAL_DMAEx_List_LinkQ+0x124>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d004      	beq.n	8006a12 <HAL_DMAEx_List_LinkQ+0xaa>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a20      	ldr	r2, [pc, #128]	@ (8006a90 <HAL_DMAEx_List_LinkQ+0x128>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d101      	bne.n	8006a16 <HAL_DMAEx_List_LinkQ+0xae>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e000      	b.n	8006a18 <HAL_DMAEx_List_LinkQ+0xb0>
 8006a16:	2300      	movs	r3, #0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10b      	bne.n	8006a34 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d004      	beq.n	8006a34 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2203      	movs	r2, #3
 8006a2e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e019      	b.n	8006a68 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a38:	2b81      	cmp	r3, #129	@ 0x81
 8006a3a:	d108      	bne.n	8006a4e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10d      	bne.n	8006a60 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2204      	movs	r2, #4
 8006a48:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e00c      	b.n	8006a68 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d004      	beq.n	8006a60 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	2204      	movs	r2, #4
 8006a5a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e003      	b.n	8006a68 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	40020650 	.word	0x40020650
 8006a78:	50020650 	.word	0x50020650
 8006a7c:	400206d0 	.word	0x400206d0
 8006a80:	500206d0 	.word	0x500206d0
 8006a84:	40020750 	.word	0x40020750
 8006a88:	50020750 	.word	0x50020750
 8006a8c:	400207d0 	.word	0x400207d0
 8006a90:	500207d0 	.word	0x500207d0

08006a94 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	0c1b      	lsrs	r3, r3, #16
 8006aa4:	b2db      	uxtb	r3, r3
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
	...

08006ab4 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a85      	ldr	r2, [pc, #532]	@ (8006ce4 <DMA_List_Init+0x230>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	f000 80a0 	beq.w	8006c14 <DMA_List_Init+0x160>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a83      	ldr	r2, [pc, #524]	@ (8006ce8 <DMA_List_Init+0x234>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	f000 809a 	beq.w	8006c14 <DMA_List_Init+0x160>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a81      	ldr	r2, [pc, #516]	@ (8006cec <DMA_List_Init+0x238>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	f000 8094 	beq.w	8006c14 <DMA_List_Init+0x160>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a7f      	ldr	r2, [pc, #508]	@ (8006cf0 <DMA_List_Init+0x23c>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	f000 808e 	beq.w	8006c14 <DMA_List_Init+0x160>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a7d      	ldr	r2, [pc, #500]	@ (8006cf4 <DMA_List_Init+0x240>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	f000 8088 	beq.w	8006c14 <DMA_List_Init+0x160>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a7b      	ldr	r2, [pc, #492]	@ (8006cf8 <DMA_List_Init+0x244>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	f000 8082 	beq.w	8006c14 <DMA_List_Init+0x160>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a79      	ldr	r2, [pc, #484]	@ (8006cfc <DMA_List_Init+0x248>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d07c      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a78      	ldr	r2, [pc, #480]	@ (8006d00 <DMA_List_Init+0x24c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d077      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a76      	ldr	r2, [pc, #472]	@ (8006d04 <DMA_List_Init+0x250>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d072      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a75      	ldr	r2, [pc, #468]	@ (8006d08 <DMA_List_Init+0x254>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d06d      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a73      	ldr	r2, [pc, #460]	@ (8006d0c <DMA_List_Init+0x258>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d068      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a72      	ldr	r2, [pc, #456]	@ (8006d10 <DMA_List_Init+0x25c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d063      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a70      	ldr	r2, [pc, #448]	@ (8006d14 <DMA_List_Init+0x260>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d05e      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a6f      	ldr	r2, [pc, #444]	@ (8006d18 <DMA_List_Init+0x264>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d059      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a6d      	ldr	r2, [pc, #436]	@ (8006d1c <DMA_List_Init+0x268>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d054      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a6c      	ldr	r2, [pc, #432]	@ (8006d20 <DMA_List_Init+0x26c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d04f      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a6a      	ldr	r2, [pc, #424]	@ (8006d24 <DMA_List_Init+0x270>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d04a      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a69      	ldr	r2, [pc, #420]	@ (8006d28 <DMA_List_Init+0x274>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d045      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a67      	ldr	r2, [pc, #412]	@ (8006d2c <DMA_List_Init+0x278>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d040      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a66      	ldr	r2, [pc, #408]	@ (8006d30 <DMA_List_Init+0x27c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d03b      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a64      	ldr	r2, [pc, #400]	@ (8006d34 <DMA_List_Init+0x280>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d036      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a63      	ldr	r2, [pc, #396]	@ (8006d38 <DMA_List_Init+0x284>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d031      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a61      	ldr	r2, [pc, #388]	@ (8006d3c <DMA_List_Init+0x288>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d02c      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a60      	ldr	r2, [pc, #384]	@ (8006d40 <DMA_List_Init+0x28c>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d027      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a5e      	ldr	r2, [pc, #376]	@ (8006d44 <DMA_List_Init+0x290>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d022      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a5d      	ldr	r2, [pc, #372]	@ (8006d48 <DMA_List_Init+0x294>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d01d      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a5b      	ldr	r2, [pc, #364]	@ (8006d4c <DMA_List_Init+0x298>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d018      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a5a      	ldr	r2, [pc, #360]	@ (8006d50 <DMA_List_Init+0x29c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d013      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a58      	ldr	r2, [pc, #352]	@ (8006d54 <DMA_List_Init+0x2a0>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d00e      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a57      	ldr	r2, [pc, #348]	@ (8006d58 <DMA_List_Init+0x2a4>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d009      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a55      	ldr	r2, [pc, #340]	@ (8006d5c <DMA_List_Init+0x2a8>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d004      	beq.n	8006c14 <DMA_List_Init+0x160>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a54      	ldr	r2, [pc, #336]	@ (8006d60 <DMA_List_Init+0x2ac>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d101      	bne.n	8006c18 <DMA_List_Init+0x164>
 8006c14:	2301      	movs	r3, #1
 8006c16:	e000      	b.n	8006c1a <DMA_List_Init+0x166>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d004      	beq.n	8006c28 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2200      	movs	r2, #0
 8006c42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006c4c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2200      	movs	r2, #0
 8006c54:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2200      	movs	r2, #0
 8006c64:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a36      	ldr	r2, [pc, #216]	@ (8006d44 <DMA_List_Init+0x290>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d022      	beq.n	8006cb6 <DMA_List_Init+0x202>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a34      	ldr	r2, [pc, #208]	@ (8006d48 <DMA_List_Init+0x294>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d01d      	beq.n	8006cb6 <DMA_List_Init+0x202>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a33      	ldr	r2, [pc, #204]	@ (8006d4c <DMA_List_Init+0x298>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d018      	beq.n	8006cb6 <DMA_List_Init+0x202>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a31      	ldr	r2, [pc, #196]	@ (8006d50 <DMA_List_Init+0x29c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d013      	beq.n	8006cb6 <DMA_List_Init+0x202>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a30      	ldr	r2, [pc, #192]	@ (8006d54 <DMA_List_Init+0x2a0>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00e      	beq.n	8006cb6 <DMA_List_Init+0x202>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a2e      	ldr	r2, [pc, #184]	@ (8006d58 <DMA_List_Init+0x2a4>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d009      	beq.n	8006cb6 <DMA_List_Init+0x202>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a2d      	ldr	r2, [pc, #180]	@ (8006d5c <DMA_List_Init+0x2a8>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d004      	beq.n	8006cb6 <DMA_List_Init+0x202>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a2b      	ldr	r2, [pc, #172]	@ (8006d60 <DMA_List_Init+0x2ac>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d101      	bne.n	8006cba <DMA_List_Init+0x206>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e000      	b.n	8006cbc <DMA_List_Init+0x208>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d007      	beq.n	8006cd0 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006cd8:	bf00      	nop
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	40020050 	.word	0x40020050
 8006ce8:	50020050 	.word	0x50020050
 8006cec:	400200d0 	.word	0x400200d0
 8006cf0:	500200d0 	.word	0x500200d0
 8006cf4:	40020150 	.word	0x40020150
 8006cf8:	50020150 	.word	0x50020150
 8006cfc:	400201d0 	.word	0x400201d0
 8006d00:	500201d0 	.word	0x500201d0
 8006d04:	40020250 	.word	0x40020250
 8006d08:	50020250 	.word	0x50020250
 8006d0c:	400202d0 	.word	0x400202d0
 8006d10:	500202d0 	.word	0x500202d0
 8006d14:	40020350 	.word	0x40020350
 8006d18:	50020350 	.word	0x50020350
 8006d1c:	400203d0 	.word	0x400203d0
 8006d20:	500203d0 	.word	0x500203d0
 8006d24:	40020450 	.word	0x40020450
 8006d28:	50020450 	.word	0x50020450
 8006d2c:	400204d0 	.word	0x400204d0
 8006d30:	500204d0 	.word	0x500204d0
 8006d34:	40020550 	.word	0x40020550
 8006d38:	50020550 	.word	0x50020550
 8006d3c:	400205d0 	.word	0x400205d0
 8006d40:	500205d0 	.word	0x500205d0
 8006d44:	40020650 	.word	0x40020650
 8006d48:	50020650 	.word	0x50020650
 8006d4c:	400206d0 	.word	0x400206d0
 8006d50:	500206d0 	.word	0x500206d0
 8006d54:	40020750 	.word	0x40020750
 8006d58:	50020750 	.word	0x50020750
 8006d5c:	400207d0 	.word	0x400207d0
 8006d60:	500207d0 	.word	0x500207d0

08006d64 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006d76:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8006d7c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006d82:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8006d88:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0320 	and.w	r3, r3, #32
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d017      	beq.n	8006dca <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da6:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dac:	3b01      	subs	r3, #1
 8006dae:	051b      	lsls	r3, r3, #20
 8006db0:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006db4:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006dc2:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6859      	ldr	r1, [r3, #4]
 8006dd2:	f240 237f 	movw	r3, #639	@ 0x27f
 8006dd6:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de6:	d10c      	bne.n	8006e02 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0320 	and.w	r3, r3, #32
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d011      	beq.n	8006e18 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	605a      	str	r2, [r3, #4]
 8006e00:	e00a      	b.n	8006e18 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e0a:	d105      	bne.n	8006e18 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00f      	beq.n	8006e40 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e2c:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e32:	041b      	lsls	r3, r3, #16
 8006e34:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006e38:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d04e      	beq.n	8006ef4 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	0419      	lsls	r1, r3, #16
 8006e62:	4b67      	ldr	r3, [pc, #412]	@ (8007000 <DMA_List_BuildNode+0x29c>)
 8006e64:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006e66:	431a      	orrs	r2, r3
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	da06      	bge.n	8006e82 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	609a      	str	r2, [r3, #8]
 8006e80:	e005      	b.n	8006e8e <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	da06      	bge.n	8006ea4 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	609a      	str	r2, [r3, #8]
 8006ea2:	e005      	b.n	8006eb0 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	da06      	bge.n	8006ec6 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	609a      	str	r2, [r3, #8]
 8006ec4:	e005      	b.n	8006ed2 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	da06      	bge.n	8006ee8 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	609a      	str	r2, [r3, #8]
 8006ee6:	e005      	b.n	8006ef4 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d059      	beq.n	8006fc4 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	da09      	bge.n	8006f2c <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f1c:	425b      	negs	r3, r3
 8006f1e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	615a      	str	r2, [r3, #20]
 8006f2a:	e005      	b.n	8006f38 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f30:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	da0d      	bge.n	8006f5c <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f44:	425b      	negs	r3, r3
 8006f46:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	695a      	ldr	r2, [r3, #20]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	0419      	lsls	r1, r3, #16
 8006f50:	4b2c      	ldr	r3, [pc, #176]	@ (8007004 <DMA_List_BuildNode+0x2a0>)
 8006f52:	400b      	ands	r3, r1
 8006f54:	431a      	orrs	r2, r3
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	615a      	str	r2, [r3, #20]
 8006f5a:	e009      	b.n	8006f70 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f64:	0419      	lsls	r1, r3, #16
 8006f66:	4b27      	ldr	r3, [pc, #156]	@ (8007004 <DMA_List_BuildNode+0x2a0>)
 8006f68:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	da08      	bge.n	8006f8a <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f7c:	425b      	negs	r3, r3
 8006f7e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	619a      	str	r2, [r3, #24]
 8006f88:	e004      	b.n	8006f94 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f8e:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	da0b      	bge.n	8006fb4 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fa0:	425b      	negs	r3, r3
 8006fa2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006fac:	431a      	orrs	r2, r3
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	619a      	str	r2, [r3, #24]
 8006fb2:	e007      	b.n	8006fc4 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fbc:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d006      	beq.n	8006fe6 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8006fe4:	e005      	b.n	8006ff2 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	621a      	str	r2, [r3, #32]
}
 8006ff2:	bf00      	nop
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	07ff0000 	.word	0x07ff0000
 8007004:	1fff0000 	.word	0x1fff0000

08007008 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	b2da      	uxtb	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0208 	and.w	r2, r3, #8
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0203 	and.w	r2, r3, #3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8007050:	091b      	lsrs	r3, r3, #4
 8007052:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007056:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8007060:	0d1b      	lsrs	r3, r3, #20
 8007062:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007066:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	4b66      	ldr	r3, [pc, #408]	@ (8007218 <DMA_List_GetNodeConfig+0x210>)
 800707e:	4013      	ands	r3, r2
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007098:	2b00      	cmp	r3, #0
 800709a:	d008      	beq.n	80070ae <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070a2:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070aa:	60da      	str	r2, [r3, #12]
 80070ac:	e013      	b.n	80070d6 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d004      	beq.n	80070d0 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80070cc:	60da      	str	r2, [r3, #12]
 80070ce:	e002      	b.n	80070d6 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 80070fe:	0c1b      	lsrs	r3, r3, #16
 8007100:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	b29a      	uxth	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0302 	and.w	r3, r3, #2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d008      	beq.n	800713c <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	0c1b      	lsrs	r3, r3, #16
 8007130:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007134:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	64da      	str	r2, [r3, #76]	@ 0x4c
 800713a:	e002      	b.n	8007142 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	68da      	ldr	r2, [r3, #12]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	691a      	ldr	r2, [r3, #16]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d04a      	beq.n	80071f4 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	b29b      	uxth	r3, r3
 8007164:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007168:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 800716a:	89fa      	ldrh	r2, [r7, #14]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	0c1b      	lsrs	r3, r3, #16
 8007176:	b29b      	uxth	r3, r3
 8007178:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800717c:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 800717e:	89fa      	ldrh	r2, [r7, #14]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d004      	beq.n	800719a <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007194:	425a      	negs	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d004      	beq.n	80071b0 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071aa:	425a      	negs	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 80071b6:	89fa      	ldrh	r2, [r7, #14]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	0c1b      	lsrs	r3, r3, #16
 80071c2:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 80071c4:	89fa      	ldrh	r2, [r7, #14]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d004      	beq.n	80071e0 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071da:	425a      	negs	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	da11      	bge.n	800720c <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071ec:	425a      	negs	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 80071f2:	e00b      	b.n	800720c <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800720c:	bf00      	nop
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	0c002000 	.word	0x0c002000

0800721c <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	431a      	orrs	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4313      	orrs	r3, r2
 8007232:	0c1b      	lsrs	r3, r3, #16
 8007234:	041b      	lsls	r3, r3, #16
 8007236:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d002      	beq.n	8007248 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	617b      	str	r3, [r7, #20]
 8007246:	e00a      	b.n	800725e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d002      	beq.n	8007254 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	e004      	b.n	800725e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	0c1b      	lsrs	r3, r3, #16
 8007262:	041b      	lsls	r3, r3, #16
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	429a      	cmp	r2, r3
 8007268:	d001      	beq.n	800726e <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800726a:	2301      	movs	r3, #1
 800726c:	e000      	b.n	8007270 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	371c      	adds	r7, #28
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8007288:	2300      	movs	r3, #0
 800728a:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d004      	beq.n	800729c <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	b2db      	uxtb	r3, r3
 8007298:	617b      	str	r3, [r7, #20]
 800729a:	e00e      	b.n	80072ba <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d004      	beq.n	80072ac <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	617b      	str	r3, [r7, #20]
 80072aa:	e006      	b.n	80072ba <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d003      	beq.n	80072ba <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d007      	beq.n	80072d0 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d001      	beq.n	80072d0 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80072cc:	2302      	movs	r3, #2
 80072ce:	e00b      	b.n	80072e8 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d007      	beq.n	80072e6 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d001      	beq.n	80072e6 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e000      	b.n	80072e8 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	371c      	adds	r7, #28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a1b      	ldr	r3, [r3, #32]
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00c      	beq.n	8007326 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	4a0d      	ldr	r2, [pc, #52]	@ (800734c <DMA_List_GetCLLRNodeInfo+0x58>)
 8007316:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00f      	beq.n	800733e <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2207      	movs	r2, #7
 8007322:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8007324:	e00b      	b.n	800733e <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d002      	beq.n	8007332 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	4a08      	ldr	r2, [pc, #32]	@ (8007350 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8007330:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2205      	movs	r2, #5
 800733c:	601a      	str	r2, [r3, #0]
}
 800733e:	bf00      	nop
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	fe010000 	.word	0xfe010000
 8007350:	f8010000 	.word	0xf8010000

08007354 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8007354:	b480      	push	{r7}
 8007356:	b089      	sub	sp, #36	@ 0x24
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d142      	bne.n	80073fe <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8007378:	e01d      	b.n	80073b6 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d107      	bne.n	8007390 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	461a      	mov	r2, r3
 8007386:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800738a:	4013      	ands	r3, r2
 800738c:	61bb      	str	r3, [r7, #24]
 800738e:	e00f      	b.n	80073b0 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	0c1b      	lsrs	r3, r3, #16
 800739a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	4413      	add	r3, r2
 80073a0:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80073a8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073ac:	4013      	ands	r3, r2
 80073ae:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	3301      	adds	r3, #1
 80073b4:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	69fa      	ldr	r2, [r7, #28]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d3dc      	bcc.n	800737a <DMA_List_FindNode+0x26>
 80073c0:	e029      	b.n	8007416 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d107      	bne.n	80073d8 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	461a      	mov	r2, r3
 80073ce:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073d2:	4013      	ands	r3, r2
 80073d4:	61bb      	str	r3, [r7, #24]
 80073d6:	e00f      	b.n	80073f8 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	0c1b      	lsrs	r3, r3, #16
 80073e2:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	4413      	add	r3, r2
 80073e8:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80073f0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073f4:	4013      	ands	r3, r2
 80073f6:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	3301      	adds	r3, #1
 80073fc:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	69fa      	ldr	r2, [r7, #28]
 8007404:	429a      	cmp	r2, r3
 8007406:	d206      	bcs.n	8007416 <DMA_List_FindNode+0xc2>
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800740e:	4013      	ands	r3, r2
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	429a      	cmp	r2, r3
 8007414:	d1d5      	bne.n	80073c2 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d008      	beq.n	800742e <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007422:	4013      	ands	r3, r2
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	429a      	cmp	r2, r3
 8007428:	d001      	beq.n	800742e <DMA_List_FindNode+0xda>
    {
      return 1U;
 800742a:	2301      	movs	r3, #1
 800742c:	e02b      	b.n	8007486 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	69fa      	ldr	r2, [r7, #28]
 8007432:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	0c1b      	lsrs	r3, r3, #16
 800743a:	041b      	lsls	r3, r3, #16
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	431a      	orrs	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	0c1b      	lsrs	r3, r3, #16
 800744a:	041b      	lsls	r3, r3, #16
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	431a      	orrs	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	461a      	mov	r2, r3
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00f      	beq.n	8007484 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	461a      	mov	r2, r3
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007470:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8007474:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	0c1b      	lsrs	r3, r3, #16
 800747c:	041b      	lsls	r3, r3, #16
 800747e:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3724      	adds	r7, #36	@ 0x24
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
	...

08007494 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007494:	b480      	push	{r7}
 8007496:	b089      	sub	sp, #36	@ 0x24
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80074a6:	e1ba      	b.n	800781e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	2101      	movs	r1, #1
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	fa01 f303 	lsl.w	r3, r1, r3
 80074b4:	4013      	ands	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 81aa 	beq.w	8007818 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a55      	ldr	r2, [pc, #340]	@ (800761c <HAL_GPIO_Init+0x188>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d15d      	bne.n	8007588 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80074d2:	2201      	movs	r2, #1
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	fa02 f303 	lsl.w	r3, r2, r3
 80074da:	43db      	mvns	r3, r3
 80074dc:	69fa      	ldr	r2, [r7, #28]
 80074de:	4013      	ands	r3, r2
 80074e0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f003 0201 	and.w	r2, r3, #1
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	fa02 f303 	lsl.w	r3, r2, r3
 80074f0:	69fa      	ldr	r2, [r7, #28]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	69fa      	ldr	r2, [r7, #28]
 80074fa:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80074fc:	4a48      	ldr	r2, [pc, #288]	@ (8007620 <HAL_GPIO_Init+0x18c>)
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007504:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007506:	4a46      	ldr	r2, [pc, #280]	@ (8007620 <HAL_GPIO_Init+0x18c>)
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	00db      	lsls	r3, r3, #3
 800750c:	4413      	add	r3, r2
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	08da      	lsrs	r2, r3, #3
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	3208      	adds	r2, #8
 800751a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	f003 0307 	and.w	r3, r3, #7
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	220f      	movs	r2, #15
 800752a:	fa02 f303 	lsl.w	r3, r2, r3
 800752e:	43db      	mvns	r3, r3
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	4013      	ands	r3, r2
 8007534:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	f003 0307 	and.w	r3, r3, #7
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	220b      	movs	r2, #11
 8007540:	fa02 f303 	lsl.w	r3, r2, r3
 8007544:	69fa      	ldr	r2, [r7, #28]
 8007546:	4313      	orrs	r3, r2
 8007548:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	08da      	lsrs	r2, r3, #3
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	3208      	adds	r2, #8
 8007552:	69f9      	ldr	r1, [r7, #28]
 8007554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	2203      	movs	r2, #3
 8007564:	fa02 f303 	lsl.w	r3, r2, r3
 8007568:	43db      	mvns	r3, r3
 800756a:	69fa      	ldr	r2, [r7, #28]
 800756c:	4013      	ands	r3, r2
 800756e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	005b      	lsls	r3, r3, #1
 8007574:	2202      	movs	r2, #2
 8007576:	fa02 f303 	lsl.w	r3, r2, r3
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	4313      	orrs	r3, r2
 800757e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	69fa      	ldr	r2, [r7, #28]
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	e067      	b.n	8007658 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	2b02      	cmp	r3, #2
 800758e:	d003      	beq.n	8007598 <HAL_GPIO_Init+0x104>
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	2b12      	cmp	r3, #18
 8007596:	d145      	bne.n	8007624 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	08da      	lsrs	r2, r3, #3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	3208      	adds	r2, #8
 80075a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	220f      	movs	r2, #15
 80075b0:	fa02 f303 	lsl.w	r3, r2, r3
 80075b4:	43db      	mvns	r3, r3
 80075b6:	69fa      	ldr	r2, [r7, #28]
 80075b8:	4013      	ands	r3, r2
 80075ba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	f003 020f 	and.w	r2, r3, #15
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f003 0307 	and.w	r3, r3, #7
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	fa02 f303 	lsl.w	r3, r2, r3
 80075d0:	69fa      	ldr	r2, [r7, #28]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	08da      	lsrs	r2, r3, #3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	3208      	adds	r2, #8
 80075de:	69f9      	ldr	r1, [r7, #28]
 80075e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	005b      	lsls	r3, r3, #1
 80075ee:	2203      	movs	r2, #3
 80075f0:	fa02 f303 	lsl.w	r3, r2, r3
 80075f4:	43db      	mvns	r3, r3
 80075f6:	69fa      	ldr	r2, [r7, #28]
 80075f8:	4013      	ands	r3, r2
 80075fa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f003 0203 	and.w	r2, r3, #3
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	fa02 f303 	lsl.w	r3, r2, r3
 800760c:	69fa      	ldr	r2, [r7, #28]
 800760e:	4313      	orrs	r3, r2
 8007610:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	69fa      	ldr	r2, [r7, #28]
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	e01e      	b.n	8007658 <HAL_GPIO_Init+0x1c4>
 800761a:	bf00      	nop
 800761c:	46020000 	.word	0x46020000
 8007620:	08011624 	.word	0x08011624
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	005b      	lsls	r3, r3, #1
 800762e:	2203      	movs	r2, #3
 8007630:	fa02 f303 	lsl.w	r3, r2, r3
 8007634:	43db      	mvns	r3, r3
 8007636:	69fa      	ldr	r2, [r7, #28]
 8007638:	4013      	ands	r3, r2
 800763a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	f003 0203 	and.w	r2, r3, #3
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	005b      	lsls	r3, r3, #1
 8007648:	fa02 f303 	lsl.w	r3, r2, r3
 800764c:	69fa      	ldr	r2, [r7, #28]
 800764e:	4313      	orrs	r3, r2
 8007650:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	69fa      	ldr	r2, [r7, #28]
 8007656:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d00b      	beq.n	8007678 <HAL_GPIO_Init+0x1e4>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	2b02      	cmp	r3, #2
 8007666:	d007      	beq.n	8007678 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800766c:	2b11      	cmp	r3, #17
 800766e:	d003      	beq.n	8007678 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	2b12      	cmp	r3, #18
 8007676:	d130      	bne.n	80076da <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	005b      	lsls	r3, r3, #1
 8007682:	2203      	movs	r2, #3
 8007684:	fa02 f303 	lsl.w	r3, r2, r3
 8007688:	43db      	mvns	r3, r3
 800768a:	69fa      	ldr	r2, [r7, #28]
 800768c:	4013      	ands	r3, r2
 800768e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	fa02 f303 	lsl.w	r3, r2, r3
 800769c:	69fa      	ldr	r2, [r7, #28]
 800769e:	4313      	orrs	r3, r2
 80076a0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	69fa      	ldr	r2, [r7, #28]
 80076a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80076ae:	2201      	movs	r2, #1
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	fa02 f303 	lsl.w	r3, r2, r3
 80076b6:	43db      	mvns	r3, r3
 80076b8:	69fa      	ldr	r2, [r7, #28]
 80076ba:	4013      	ands	r3, r2
 80076bc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	091b      	lsrs	r3, r3, #4
 80076c4:	f003 0201 	and.w	r2, r3, #1
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	fa02 f303 	lsl.w	r3, r2, r3
 80076ce:	69fa      	ldr	r2, [r7, #28]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	69fa      	ldr	r2, [r7, #28]
 80076d8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d017      	beq.n	8007712 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	2203      	movs	r2, #3
 80076ee:	fa02 f303 	lsl.w	r3, r2, r3
 80076f2:	43db      	mvns	r3, r3
 80076f4:	69fa      	ldr	r2, [r7, #28]
 80076f6:	4013      	ands	r3, r2
 80076f8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	689a      	ldr	r2, [r3, #8]
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	fa02 f303 	lsl.w	r3, r2, r3
 8007706:	69fa      	ldr	r2, [r7, #28]
 8007708:	4313      	orrs	r3, r2
 800770a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	69fa      	ldr	r2, [r7, #28]
 8007710:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d07c      	beq.n	8007818 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800771e:	4a47      	ldr	r2, [pc, #284]	@ (800783c <HAL_GPIO_Init+0x3a8>)
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	089b      	lsrs	r3, r3, #2
 8007724:	3318      	adds	r3, #24
 8007726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800772a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f003 0303 	and.w	r3, r3, #3
 8007732:	00db      	lsls	r3, r3, #3
 8007734:	220f      	movs	r2, #15
 8007736:	fa02 f303 	lsl.w	r3, r2, r3
 800773a:	43db      	mvns	r3, r3
 800773c:	69fa      	ldr	r2, [r7, #28]
 800773e:	4013      	ands	r3, r2
 8007740:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	0a9a      	lsrs	r2, r3, #10
 8007746:	4b3e      	ldr	r3, [pc, #248]	@ (8007840 <HAL_GPIO_Init+0x3ac>)
 8007748:	4013      	ands	r3, r2
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	f002 0203 	and.w	r2, r2, #3
 8007750:	00d2      	lsls	r2, r2, #3
 8007752:	4093      	lsls	r3, r2
 8007754:	69fa      	ldr	r2, [r7, #28]
 8007756:	4313      	orrs	r3, r2
 8007758:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800775a:	4938      	ldr	r1, [pc, #224]	@ (800783c <HAL_GPIO_Init+0x3a8>)
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	089b      	lsrs	r3, r3, #2
 8007760:	3318      	adds	r3, #24
 8007762:	69fa      	ldr	r2, [r7, #28]
 8007764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007768:	4b34      	ldr	r3, [pc, #208]	@ (800783c <HAL_GPIO_Init+0x3a8>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	43db      	mvns	r3, r3
 8007772:	69fa      	ldr	r2, [r7, #28]
 8007774:	4013      	ands	r3, r2
 8007776:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007784:	69fa      	ldr	r2, [r7, #28]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	4313      	orrs	r3, r2
 800778a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800778c:	4a2b      	ldr	r2, [pc, #172]	@ (800783c <HAL_GPIO_Init+0x3a8>)
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007792:	4b2a      	ldr	r3, [pc, #168]	@ (800783c <HAL_GPIO_Init+0x3a8>)
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	43db      	mvns	r3, r3
 800779c:	69fa      	ldr	r2, [r7, #28]
 800779e:	4013      	ands	r3, r2
 80077a0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80077ae:	69fa      	ldr	r2, [r7, #28]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80077b6:	4a21      	ldr	r2, [pc, #132]	@ (800783c <HAL_GPIO_Init+0x3a8>)
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80077bc:	4b1f      	ldr	r3, [pc, #124]	@ (800783c <HAL_GPIO_Init+0x3a8>)
 80077be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	43db      	mvns	r3, r3
 80077c8:	69fa      	ldr	r2, [r7, #28]
 80077ca:	4013      	ands	r3, r2
 80077cc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80077da:	69fa      	ldr	r2, [r7, #28]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4313      	orrs	r3, r2
 80077e0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80077e2:	4a16      	ldr	r2, [pc, #88]	@ (800783c <HAL_GPIO_Init+0x3a8>)
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80077ea:	4b14      	ldr	r3, [pc, #80]	@ (800783c <HAL_GPIO_Init+0x3a8>)
 80077ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	43db      	mvns	r3, r3
 80077f6:	69fa      	ldr	r2, [r7, #28]
 80077f8:	4013      	ands	r3, r2
 80077fa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8007808:	69fa      	ldr	r2, [r7, #28]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	4313      	orrs	r3, r2
 800780e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007810:	4a0a      	ldr	r2, [pc, #40]	@ (800783c <HAL_GPIO_Init+0x3a8>)
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	3301      	adds	r3, #1
 800781c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	fa22 f303 	lsr.w	r3, r2, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	f47f ae3d 	bne.w	80074a8 <HAL_GPIO_Init+0x14>
  }
}
 800782e:	bf00      	nop
 8007830:	bf00      	nop
 8007832:	3724      	adds	r7, #36	@ 0x24
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	46022000 	.word	0x46022000
 8007840:	002f7f7f 	.word	0x002f7f7f

08007844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	807b      	strh	r3, [r7, #2]
 8007850:	4613      	mov	r3, r2
 8007852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007854:	787b      	ldrb	r3, [r7, #1]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800785a:	887a      	ldrh	r2, [r7, #2]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8007860:	e002      	b.n	8007868 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8007862:	887a      	ldrh	r2, [r7, #2]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800787e:	4b0f      	ldr	r3, [pc, #60]	@ (80078bc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007880:	68da      	ldr	r2, [r3, #12]
 8007882:	88fb      	ldrh	r3, [r7, #6]
 8007884:	4013      	ands	r3, r2
 8007886:	2b00      	cmp	r3, #0
 8007888:	d006      	beq.n	8007898 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800788a:	4a0c      	ldr	r2, [pc, #48]	@ (80078bc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800788c:	88fb      	ldrh	r3, [r7, #6]
 800788e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8007890:	88fb      	ldrh	r3, [r7, #6]
 8007892:	4618      	mov	r0, r3
 8007894:	f000 f814 	bl	80078c0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8007898:	4b08      	ldr	r3, [pc, #32]	@ (80078bc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800789a:	691a      	ldr	r2, [r3, #16]
 800789c:	88fb      	ldrh	r3, [r7, #6]
 800789e:	4013      	ands	r3, r2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d006      	beq.n	80078b2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80078a4:	4a05      	ldr	r2, [pc, #20]	@ (80078bc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80078a6:	88fb      	ldrh	r3, [r7, #6]
 80078a8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80078aa:	88fb      	ldrh	r3, [r7, #6]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 f812 	bl	80078d6 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80078b2:	bf00      	nop
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	46022000 	.word	0x46022000

080078c0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	4603      	mov	r3, r0
 80078c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80078ca:	bf00      	nop
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	4603      	mov	r3, r0
 80078de:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e08d      	b.n	8007a1a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d106      	bne.n	8007918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7fa fa1a 	bl	8001d4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2224      	movs	r2, #36	@ 0x24
 800791c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f022 0201 	bic.w	r2, r2, #1
 800792e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800793c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689a      	ldr	r2, [r3, #8]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800794c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d107      	bne.n	8007966 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689a      	ldr	r2, [r3, #8]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007962:	609a      	str	r2, [r3, #8]
 8007964:	e006      	b.n	8007974 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	689a      	ldr	r2, [r3, #8]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007972:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	2b02      	cmp	r3, #2
 800797a:	d108      	bne.n	800798e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800798a:	605a      	str	r2, [r3, #4]
 800798c:	e007      	b.n	800799e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800799c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	6812      	ldr	r2, [r2, #0]
 80079a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80079ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68da      	ldr	r2, [r3, #12]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	691a      	ldr	r2, [r3, #16]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	69d9      	ldr	r1, [r3, #28]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a1a      	ldr	r2, [r3, #32]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f042 0201 	orr.w	r2, r2, #1
 80079fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2220      	movs	r2, #32
 8007a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b084      	sub	sp, #16
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d005      	beq.n	8007a4e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	68f9      	ldr	r1, [r7, #12]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	4798      	blx	r3
  }
}
 8007a4e:	bf00      	nop
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b086      	sub	sp, #24
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00f      	beq.n	8007a98 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00a      	beq.n	8007a98 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a86:	f043 0201 	orr.w	r2, r3, #1
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a96:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00f      	beq.n	8007ac2 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00a      	beq.n	8007ac2 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ab0:	f043 0208 	orr.w	r2, r3, #8
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007ac0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00f      	beq.n	8007aec <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00a      	beq.n	8007aec <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ada:	f043 0202 	orr.w	r2, r3, #2
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007aea:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007af0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f003 030b 	and.w	r3, r3, #11
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d003      	beq.n	8007b04 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8007afc:	68f9      	ldr	r1, [r7, #12]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fbe8 	bl	80082d4 <I2C_ITError>
  }
}
 8007b04:	bf00      	nop
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
 8007b40:	4613      	mov	r3, r2
 8007b42:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d101      	bne.n	8007bb0 <I2C_Slave_ISR_IT+0x24>
 8007bac:	2302      	movs	r3, #2
 8007bae:	e0e2      	b.n	8007d76 <I2C_Slave_ISR_IT+0x1ea>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	f003 0320 	and.w	r3, r3, #32
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d009      	beq.n	8007bd6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d004      	beq.n	8007bd6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007bcc:	6939      	ldr	r1, [r7, #16]
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 f9b6 	bl	8007f40 <I2C_ITSlaveCplt>
 8007bd4:	e0ca      	b.n	8007d6c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	f003 0310 	and.w	r3, r3, #16
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d04b      	beq.n	8007c78 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d046      	beq.n	8007c78 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d128      	bne.n	8007c46 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b28      	cmp	r3, #40	@ 0x28
 8007bfe:	d108      	bne.n	8007c12 <I2C_Slave_ISR_IT+0x86>
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c06:	d104      	bne.n	8007c12 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007c08:	6939      	ldr	r1, [r7, #16]
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 fb0e 	bl	800822c <I2C_ITListenCplt>
 8007c10:	e031      	b.n	8007c76 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b29      	cmp	r3, #41	@ 0x29
 8007c1c:	d10e      	bne.n	8007c3c <I2C_Slave_ISR_IT+0xb0>
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007c24:	d00a      	beq.n	8007c3c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2210      	movs	r2, #16
 8007c2c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f000 fc67 	bl	8008502 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 f926 	bl	8007e86 <I2C_ITSlaveSeqCplt>
 8007c3a:	e01c      	b.n	8007c76 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2210      	movs	r2, #16
 8007c42:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007c44:	e08f      	b.n	8007d66 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2210      	movs	r2, #16
 8007c4c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c52:	f043 0204 	orr.w	r2, r3, #4
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d003      	beq.n	8007c68 <I2C_Slave_ISR_IT+0xdc>
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c66:	d17e      	bne.n	8007d66 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 fb30 	bl	80082d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007c74:	e077      	b.n	8007d66 <I2C_Slave_ISR_IT+0x1da>
 8007c76:	e076      	b.n	8007d66 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f003 0304 	and.w	r3, r3, #4
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d02f      	beq.n	8007ce2 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d02a      	beq.n	8007ce2 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d018      	beq.n	8007cc8 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca0:	b2d2      	uxtb	r2, r2
 8007ca2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca8:	1c5a      	adds	r2, r3, #1
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d14b      	bne.n	8007d6a <I2C_Slave_ISR_IT+0x1de>
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007cd8:	d047      	beq.n	8007d6a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 f8d3 	bl	8007e86 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007ce0:	e043      	b.n	8007d6a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f003 0308 	and.w	r3, r3, #8
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d009      	beq.n	8007d00 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d004      	beq.n	8007d00 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007cf6:	6939      	ldr	r1, [r7, #16]
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 f840 	bl	8007d7e <I2C_ITAddrCplt>
 8007cfe:	e035      	b.n	8007d6c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f003 0302 	and.w	r3, r3, #2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d030      	beq.n	8007d6c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d02b      	beq.n	8007d6c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d018      	beq.n	8007d50 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d22:	781a      	ldrb	r2, [r3, #0]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d46:	3b01      	subs	r3, #1
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007d4e:	e00d      	b.n	8007d6c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d56:	d002      	beq.n	8007d5e <I2C_Slave_ISR_IT+0x1d2>
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d106      	bne.n	8007d6c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f000 f891 	bl	8007e86 <I2C_ITSlaveSeqCplt>
 8007d64:	e002      	b.n	8007d6c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8007d66:	bf00      	nop
 8007d68:	e000      	b.n	8007d6c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8007d6a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007d94:	2b28      	cmp	r3, #40	@ 0x28
 8007d96:	d16a      	bne.n	8007e6e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	0c1b      	lsrs	r3, r3, #16
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	0c1b      	lsrs	r3, r3, #16
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007db6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dc4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007dd2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d138      	bne.n	8007e4e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007ddc:	897b      	ldrh	r3, [r7, #10]
 8007dde:	09db      	lsrs	r3, r3, #7
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	89bb      	ldrh	r3, [r7, #12]
 8007de4:	4053      	eors	r3, r2
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	f003 0306 	and.w	r3, r3, #6
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d11c      	bne.n	8007e2a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007df0:	897b      	ldrh	r3, [r7, #10]
 8007df2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d13b      	bne.n	8007e7e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2208      	movs	r2, #8
 8007e12:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007e1c:	89ba      	ldrh	r2, [r7, #12]
 8007e1e:	7bfb      	ldrb	r3, [r7, #15]
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff fe86 	bl	8007b34 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007e28:	e029      	b.n	8007e7e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007e2a:	893b      	ldrh	r3, [r7, #8]
 8007e2c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007e2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fba7 	bl	8008586 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007e40:	89ba      	ldrh	r2, [r7, #12]
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
 8007e44:	4619      	mov	r1, r3
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7ff fe74 	bl	8007b34 <HAL_I2C_AddrCallback>
}
 8007e4c:	e017      	b.n	8007e7e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007e4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fb97 	bl	8008586 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007e60:	89ba      	ldrh	r2, [r7, #12]
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7ff fe64 	bl	8007b34 <HAL_I2C_AddrCallback>
}
 8007e6c:	e007      	b.n	8007e7e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2208      	movs	r2, #8
 8007e74:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007e7e:	bf00      	nop
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d008      	beq.n	8007eba <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007eb6:	601a      	str	r2, [r3, #0]
 8007eb8:	e00c      	b.n	8007ed4 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d007      	beq.n	8007ed4 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007ed2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b29      	cmp	r3, #41	@ 0x29
 8007ede:	d112      	bne.n	8007f06 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2228      	movs	r2, #40	@ 0x28
 8007ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2221      	movs	r2, #33	@ 0x21
 8007eec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007eee:	2101      	movs	r1, #1
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fb48 	bl	8008586 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7ff fe04 	bl	8007b0c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007f04:	e017      	b.n	8007f36 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f10:	d111      	bne.n	8007f36 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2228      	movs	r2, #40	@ 0x28
 8007f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2222      	movs	r2, #34	@ 0x22
 8007f1e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007f20:	2102      	movs	r1, #2
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fb2f 	bl	8008586 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7ff fdf5 	bl	8007b20 <HAL_I2C_SlaveRxCpltCallback>
}
 8007f36:	bf00      	nop
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007f40:	b590      	push	{r4, r7, lr}
 8007f42:	b087      	sub	sp, #28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f62:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2220      	movs	r2, #32
 8007f6a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007f6c:	7afb      	ldrb	r3, [r7, #11]
 8007f6e:	2b21      	cmp	r3, #33	@ 0x21
 8007f70:	d002      	beq.n	8007f78 <I2C_ITSlaveCplt+0x38>
 8007f72:	7afb      	ldrb	r3, [r7, #11]
 8007f74:	2b29      	cmp	r3, #41	@ 0x29
 8007f76:	d108      	bne.n	8007f8a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007f78:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fb02 	bl	8008586 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2221      	movs	r2, #33	@ 0x21
 8007f86:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f88:	e019      	b.n	8007fbe <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f8a:	7afb      	ldrb	r3, [r7, #11]
 8007f8c:	2b22      	cmp	r3, #34	@ 0x22
 8007f8e:	d002      	beq.n	8007f96 <I2C_ITSlaveCplt+0x56>
 8007f90:	7afb      	ldrb	r3, [r7, #11]
 8007f92:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f94:	d108      	bne.n	8007fa8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007f96:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 faf3 	bl	8008586 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2222      	movs	r2, #34	@ 0x22
 8007fa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8007fa6:	e00a      	b.n	8007fbe <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007fa8:	7afb      	ldrb	r3, [r7, #11]
 8007faa:	2b28      	cmp	r3, #40	@ 0x28
 8007fac:	d107      	bne.n	8007fbe <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007fae:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fae7 	bl	8008586 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685a      	ldr	r2, [r3, #4]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007fcc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	6859      	ldr	r1, [r3, #4]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	4b92      	ldr	r3, [pc, #584]	@ (8008224 <I2C_ITSlaveCplt+0x2e4>)
 8007fda:	400b      	ands	r3, r1
 8007fdc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fa8f 	bl	8008502 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d01c      	beq.n	8008028 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007ffc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008002:	2b00      	cmp	r3, #0
 8008004:	d031      	beq.n	800806a <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800800e:	b29c      	uxth	r4, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008014:	4618      	mov	r0, r3
 8008016:	f7fe fd3d 	bl	8006a94 <HAL_DMAEx_GetFifoLevel>
 800801a:	4603      	mov	r3, r0
 800801c:	b29b      	uxth	r3, r3
 800801e:	4423      	add	r3, r4
 8008020:	b29a      	uxth	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008026:	e020      	b.n	800806a <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d01b      	beq.n	800806a <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008040:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00f      	beq.n	800806a <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008052:	b29c      	uxth	r4, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008058:	4618      	mov	r0, r3
 800805a:	f7fe fd1b 	bl	8006a94 <HAL_DMAEx_GetFifoLevel>
 800805e:	4603      	mov	r3, r0
 8008060:	b29b      	uxth	r3, r3
 8008062:	4423      	add	r3, r4
 8008064:	b29a      	uxth	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f003 0304 	and.w	r3, r3, #4
 8008070:	2b00      	cmp	r3, #0
 8008072:	d020      	beq.n	80080b6 <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f023 0304 	bic.w	r3, r3, #4
 800807a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008086:	b2d2      	uxtb	r2, r2
 8008088:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800808e:	1c5a      	adds	r2, r3, #1
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00c      	beq.n	80080b6 <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080a0:	3b01      	subs	r3, #1
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	3b01      	subs	r3, #1
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d005      	beq.n	80080cc <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080c4:	f043 0204 	orr.w	r2, r3, #4
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f003 0310 	and.w	r3, r3, #16
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d049      	beq.n	800816a <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d044      	beq.n	800816a <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d128      	bne.n	800813c <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b28      	cmp	r3, #40	@ 0x28
 80080f4:	d108      	bne.n	8008108 <I2C_ITSlaveCplt+0x1c8>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080fc:	d104      	bne.n	8008108 <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80080fe:	6979      	ldr	r1, [r7, #20]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f893 	bl	800822c <I2C_ITListenCplt>
 8008106:	e030      	b.n	800816a <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b29      	cmp	r3, #41	@ 0x29
 8008112:	d10e      	bne.n	8008132 <I2C_ITSlaveCplt+0x1f2>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800811a:	d00a      	beq.n	8008132 <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2210      	movs	r2, #16
 8008122:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f9ec 	bl	8008502 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7ff feab 	bl	8007e86 <I2C_ITSlaveSeqCplt>
 8008130:	e01b      	b.n	800816a <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2210      	movs	r2, #16
 8008138:	61da      	str	r2, [r3, #28]
 800813a:	e016      	b.n	800816a <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2210      	movs	r2, #16
 8008142:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008148:	f043 0204 	orr.w	r2, r3, #4
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d003      	beq.n	800815e <I2C_ITSlaveCplt+0x21e>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800815c:	d105      	bne.n	800816a <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 f8b5 	bl	80082d4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800817c:	2b00      	cmp	r3, #0
 800817e:	d010      	beq.n	80081a2 <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008184:	4619      	mov	r1, r3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f8a4 	bl	80082d4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b28      	cmp	r3, #40	@ 0x28
 8008196:	d141      	bne.n	800821c <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008198:	6979      	ldr	r1, [r7, #20]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f846 	bl	800822c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80081a0:	e03c      	b.n	800821c <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80081aa:	d014      	beq.n	80081d6 <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7ff fe6a 	bl	8007e86 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a1c      	ldr	r2, [pc, #112]	@ (8008228 <I2C_ITSlaveCplt+0x2e8>)
 80081b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2220      	movs	r2, #32
 80081bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7ff fcbe 	bl	8007b50 <HAL_I2C_ListenCpltCallback>
}
 80081d4:	e022      	b.n	800821c <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b22      	cmp	r3, #34	@ 0x22
 80081e0:	d10e      	bne.n	8008200 <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2220      	movs	r2, #32
 80081e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff fc91 	bl	8007b20 <HAL_I2C_SlaveRxCpltCallback>
}
 80081fe:	e00d      	b.n	800821c <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2220      	movs	r2, #32
 8008204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff fc78 	bl	8007b0c <HAL_I2C_SlaveTxCpltCallback>
}
 800821c:	bf00      	nop
 800821e:	371c      	adds	r7, #28
 8008220:	46bd      	mov	sp, r7
 8008222:	bd90      	pop	{r4, r7, pc}
 8008224:	fe00e800 	.word	0xfe00e800
 8008228:	ffff0000 	.word	0xffff0000

0800822c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a25      	ldr	r2, [pc, #148]	@ (80082d0 <I2C_ITListenCplt+0xa4>)
 800823a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2220      	movs	r2, #32
 8008246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	f003 0304 	and.w	r3, r3, #4
 800825e:	2b00      	cmp	r3, #0
 8008260:	d022      	beq.n	80082a8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800826c:	b2d2      	uxtb	r2, r2
 800826e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008274:	1c5a      	adds	r2, r3, #1
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800827e:	2b00      	cmp	r3, #0
 8008280:	d012      	beq.n	80082a8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008286:	3b01      	subs	r3, #1
 8008288:	b29a      	uxth	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008292:	b29b      	uxth	r3, r3
 8008294:	3b01      	subs	r3, #1
 8008296:	b29a      	uxth	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082a0:	f043 0204 	orr.w	r2, r3, #4
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80082a8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f96a 	bl	8008586 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2210      	movs	r2, #16
 80082b8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7ff fc44 	bl	8007b50 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80082c8:	bf00      	nop
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	ffff0000 	.word	0xffff0000

080082d4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082e4:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a6d      	ldr	r2, [pc, #436]	@ (80084a8 <I2C_ITError+0x1d4>)
 80082f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	431a      	orrs	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	2b28      	cmp	r3, #40	@ 0x28
 800830a:	d005      	beq.n	8008318 <I2C_ITError+0x44>
 800830c:	7bfb      	ldrb	r3, [r7, #15]
 800830e:	2b29      	cmp	r3, #41	@ 0x29
 8008310:	d002      	beq.n	8008318 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	2b2a      	cmp	r3, #42	@ 0x2a
 8008316:	d10b      	bne.n	8008330 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008318:	2103      	movs	r1, #3
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f933 	bl	8008586 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2228      	movs	r2, #40	@ 0x28
 8008324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a60      	ldr	r2, [pc, #384]	@ (80084ac <I2C_ITError+0x1d8>)
 800832c:	635a      	str	r2, [r3, #52]	@ 0x34
 800832e:	e030      	b.n	8008392 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008330:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 f926 	bl	8008586 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f8e1 	bl	8008502 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008346:	b2db      	uxtb	r3, r3
 8008348:	2b60      	cmp	r3, #96	@ 0x60
 800834a:	d01f      	beq.n	800838c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2220      	movs	r2, #32
 8008350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	f003 0320 	and.w	r3, r3, #32
 800835e:	2b20      	cmp	r3, #32
 8008360:	d114      	bne.n	800838c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	f003 0310 	and.w	r3, r3, #16
 800836c:	2b10      	cmp	r3, #16
 800836e:	d109      	bne.n	8008384 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2210      	movs	r2, #16
 8008376:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800837c:	f043 0204 	orr.w	r2, r3, #4
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2220      	movs	r2, #32
 800838a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008396:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800839c:	2b00      	cmp	r3, #0
 800839e:	d039      	beq.n	8008414 <I2C_ITError+0x140>
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b11      	cmp	r3, #17
 80083a4:	d002      	beq.n	80083ac <I2C_ITError+0xd8>
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b21      	cmp	r3, #33	@ 0x21
 80083aa:	d133      	bne.n	8008414 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083ba:	d107      	bne.n	80083cc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80083ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fd fbb3 	bl	8005b3c <HAL_DMA_GetState>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d017      	beq.n	800840c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e0:	4a33      	ldr	r2, [pc, #204]	@ (80084b0 <I2C_ITError+0x1dc>)
 80083e2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fd fa19 	bl	8005828 <HAL_DMA_Abort_IT>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d04d      	beq.n	8008498 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008400:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008406:	4610      	mov	r0, r2
 8008408:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800840a:	e045      	b.n	8008498 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f851 	bl	80084b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008412:	e041      	b.n	8008498 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008418:	2b00      	cmp	r3, #0
 800841a:	d039      	beq.n	8008490 <I2C_ITError+0x1bc>
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2b12      	cmp	r3, #18
 8008420:	d002      	beq.n	8008428 <I2C_ITError+0x154>
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2b22      	cmp	r3, #34	@ 0x22
 8008426:	d133      	bne.n	8008490 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008432:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008436:	d107      	bne.n	8008448 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008446:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800844c:	4618      	mov	r0, r3
 800844e:	f7fd fb75 	bl	8005b3c <HAL_DMA_GetState>
 8008452:	4603      	mov	r3, r0
 8008454:	2b01      	cmp	r3, #1
 8008456:	d017      	beq.n	8008488 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800845c:	4a14      	ldr	r2, [pc, #80]	@ (80084b0 <I2C_ITError+0x1dc>)
 800845e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800846c:	4618      	mov	r0, r3
 800846e:	f7fd f9db 	bl	8005828 <HAL_DMA_Abort_IT>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d011      	beq.n	800849c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800847c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008482:	4610      	mov	r0, r2
 8008484:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008486:	e009      	b.n	800849c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f813 	bl	80084b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800848e:	e005      	b.n	800849c <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f80f 	bl	80084b4 <I2C_TreatErrorCallback>
  }
}
 8008496:	e002      	b.n	800849e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008498:	bf00      	nop
 800849a:	e000      	b.n	800849e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800849c:	bf00      	nop
}
 800849e:	bf00      	nop
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	ffff0000 	.word	0xffff0000
 80084ac:	08007b8d 	.word	0x08007b8d
 80084b0:	0800854b 	.word	0x0800854b

080084b4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b60      	cmp	r3, #96	@ 0x60
 80084c6:	d10e      	bne.n	80084e6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2220      	movs	r2, #32
 80084cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7ff fb4a 	bl	8007b78 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80084e4:	e009      	b.n	80084fa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f7ff fb35 	bl	8007b64 <HAL_I2C_ErrorCallback>
}
 80084fa:	bf00      	nop
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008502:	b480      	push	{r7}
 8008504:	b083      	sub	sp, #12
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	f003 0302 	and.w	r3, r3, #2
 8008514:	2b02      	cmp	r3, #2
 8008516:	d103      	bne.n	8008520 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2200      	movs	r2, #0
 800851e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	2b01      	cmp	r3, #1
 800852c:	d007      	beq.n	800853e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	699a      	ldr	r2, [r3, #24]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f042 0201 	orr.w	r2, r2, #1
 800853c:	619a      	str	r2, [r3, #24]
  }
}
 800853e:	bf00      	nop
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b084      	sub	sp, #16
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008556:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800855c:	2b00      	cmp	r3, #0
 800855e:	d003      	beq.n	8008568 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008564:	2200      	movs	r2, #0
 8008566:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800856c:	2b00      	cmp	r3, #0
 800856e:	d003      	beq.n	8008578 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008574:	2200      	movs	r2, #0
 8008576:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f7ff ff9b 	bl	80084b4 <I2C_TreatErrorCallback>
}
 800857e:	bf00      	nop
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008586:	b480      	push	{r7}
 8008588:	b085      	sub	sp, #20
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	460b      	mov	r3, r1
 8008590:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008592:	2300      	movs	r3, #0
 8008594:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008596:	887b      	ldrh	r3, [r7, #2]
 8008598:	f003 0301 	and.w	r3, r3, #1
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00f      	beq.n	80085c0 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80085a6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80085b4:	2b28      	cmp	r3, #40	@ 0x28
 80085b6:	d003      	beq.n	80085c0 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80085be:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80085c0:	887b      	ldrh	r3, [r7, #2]
 80085c2:	f003 0302 	and.w	r3, r3, #2
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00f      	beq.n	80085ea <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80085d0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80085de:	2b28      	cmp	r3, #40	@ 0x28
 80085e0:	d003      	beq.n	80085ea <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80085e8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80085ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	da03      	bge.n	80085fa <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80085f8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80085fa:	887b      	ldrh	r3, [r7, #2]
 80085fc:	2b10      	cmp	r3, #16
 80085fe:	d103      	bne.n	8008608 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008606:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008608:	887b      	ldrh	r3, [r7, #2]
 800860a:	2b20      	cmp	r3, #32
 800860c:	d103      	bne.n	8008616 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f043 0320 	orr.w	r3, r3, #32
 8008614:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008616:	887b      	ldrh	r3, [r7, #2]
 8008618:	2b40      	cmp	r3, #64	@ 0x40
 800861a:	d103      	bne.n	8008624 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008622:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6819      	ldr	r1, [r3, #0]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	43da      	mvns	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	400a      	ands	r2, r1
 8008634:	601a      	str	r2, [r3, #0]
}
 8008636:	bf00      	nop
 8008638:	3714      	adds	r7, #20
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008642:	b480      	push	{r7}
 8008644:	b083      	sub	sp, #12
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b20      	cmp	r3, #32
 8008656:	d138      	bne.n	80086ca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800865e:	2b01      	cmp	r3, #1
 8008660:	d101      	bne.n	8008666 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008662:	2302      	movs	r3, #2
 8008664:	e032      	b.n	80086cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2201      	movs	r2, #1
 800866a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2224      	movs	r2, #36	@ 0x24
 8008672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f022 0201 	bic.w	r2, r2, #1
 8008684:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008694:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	6819      	ldr	r1, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	683a      	ldr	r2, [r7, #0]
 80086a2:	430a      	orrs	r2, r1
 80086a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f042 0201 	orr.w	r2, r2, #1
 80086b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2220      	movs	r2, #32
 80086ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	e000      	b.n	80086cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80086ca:	2302      	movs	r3, #2
  }
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b20      	cmp	r3, #32
 80086ec:	d139      	bne.n	8008762 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d101      	bne.n	80086fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80086f8:	2302      	movs	r3, #2
 80086fa:	e033      	b.n	8008764 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2224      	movs	r2, #36	@ 0x24
 8008708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f022 0201 	bic.w	r2, r2, #1
 800871a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800872a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	021b      	lsls	r3, r3, #8
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	4313      	orrs	r3, r2
 8008734:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f042 0201 	orr.w	r2, r2, #1
 800874c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2220      	movs	r2, #32
 8008752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	e000      	b.n	8008764 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008762:	2302      	movs	r3, #2
  }
}
 8008764:	4618      	mov	r0, r3
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800877c:	4b0b      	ldr	r3, [pc, #44]	@ (80087ac <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	73fb      	strb	r3, [r7, #15]
 800878c:	e007      	b.n	800879e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800878e:	4b07      	ldr	r3, [pc, #28]	@ (80087ac <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f023 0204 	bic.w	r2, r3, #4
 8008796:	4905      	ldr	r1, [pc, #20]	@ (80087ac <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4313      	orrs	r3, r2
 800879c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800879e:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	40030400 	.word	0x40030400

080087b0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80087b0:	b480      	push	{r7}
 80087b2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80087b4:	4b05      	ldr	r3, [pc, #20]	@ (80087cc <HAL_ICACHE_Enable+0x1c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a04      	ldr	r2, [pc, #16]	@ (80087cc <HAL_ICACHE_Enable+0x1c>)
 80087ba:	f043 0301 	orr.w	r3, r3, #1
 80087be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	40030400 	.word	0x40030400

080087d0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e0bf      	b.n	8008962 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d106      	bne.n	80087fc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7f9 fb96 	bl	8001f28 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2202      	movs	r2, #2
 8008800:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	699a      	ldr	r2, [r3, #24]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008812:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6999      	ldr	r1, [r3, #24]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008828:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	430a      	orrs	r2, r1
 8008836:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6899      	ldr	r1, [r3, #8]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	4b4a      	ldr	r3, [pc, #296]	@ (800896c <HAL_LTDC_Init+0x19c>)
 8008844:	400b      	ands	r3, r1
 8008846:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	041b      	lsls	r3, r3, #16
 800884e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6899      	ldr	r1, [r3, #8]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	699a      	ldr	r2, [r3, #24]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	431a      	orrs	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	430a      	orrs	r2, r1
 8008864:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68d9      	ldr	r1, [r3, #12]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	4b3e      	ldr	r3, [pc, #248]	@ (800896c <HAL_LTDC_Init+0x19c>)
 8008872:	400b      	ands	r3, r1
 8008874:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	041b      	lsls	r3, r3, #16
 800887c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68d9      	ldr	r1, [r3, #12]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a1a      	ldr	r2, [r3, #32]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	431a      	orrs	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	430a      	orrs	r2, r1
 8008892:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6919      	ldr	r1, [r3, #16]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	4b33      	ldr	r3, [pc, #204]	@ (800896c <HAL_LTDC_Init+0x19c>)
 80088a0:	400b      	ands	r3, r1
 80088a2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088a8:	041b      	lsls	r3, r3, #16
 80088aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6919      	ldr	r1, [r3, #16]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	431a      	orrs	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	430a      	orrs	r2, r1
 80088c0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6959      	ldr	r1, [r3, #20]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	4b27      	ldr	r3, [pc, #156]	@ (800896c <HAL_LTDC_Init+0x19c>)
 80088ce:	400b      	ands	r3, r1
 80088d0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d6:	041b      	lsls	r3, r3, #16
 80088d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	6959      	ldr	r1, [r3, #20]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	431a      	orrs	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	430a      	orrs	r2, r1
 80088ee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80088f6:	021b      	lsls	r3, r3, #8
 80088f8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008900:	041b      	lsls	r3, r3, #16
 8008902:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8008912:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	4313      	orrs	r3, r2
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8008926:	431a      	orrs	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	430a      	orrs	r2, r1
 800892e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f042 0206 	orr.w	r2, r2, #6
 800893e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	699a      	ldr	r2, [r3, #24]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f042 0201 	orr.w	r2, r2, #1
 800894e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	f000f800 	.word	0xf000f800

08008970 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800897e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008986:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f003 0304 	and.w	r3, r3, #4
 800898e:	2b00      	cmp	r3, #0
 8008990:	d023      	beq.n	80089da <HAL_LTDC_IRQHandler+0x6a>
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	f003 0304 	and.w	r3, r3, #4
 8008998:	2b00      	cmp	r3, #0
 800899a:	d01e      	beq.n	80089da <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f022 0204 	bic.w	r2, r2, #4
 80089aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2204      	movs	r2, #4
 80089b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80089ba:	f043 0201 	orr.w	r2, r3, #1
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2204      	movs	r2, #4
 80089c8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f86f 	bl	8008ab8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f003 0302 	and.w	r3, r3, #2
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d023      	beq.n	8008a2c <HAL_LTDC_IRQHandler+0xbc>
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d01e      	beq.n	8008a2c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f022 0202 	bic.w	r2, r2, #2
 80089fc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2202      	movs	r2, #2
 8008a04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a0c:	f043 0202 	orr.w	r2, r3, #2
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2204      	movs	r2, #4
 8008a1a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 f846 	bl	8008ab8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d01b      	beq.n	8008a6e <HAL_LTDC_IRQHandler+0xfe>
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	f003 0301 	and.w	r3, r3, #1
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d016      	beq.n	8008a6e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f022 0201 	bic.w	r2, r2, #1
 8008a4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2201      	movs	r2, #1
 8008a56:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f82f 	bl	8008acc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f003 0308 	and.w	r3, r3, #8
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d01b      	beq.n	8008ab0 <HAL_LTDC_IRQHandler+0x140>
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	f003 0308 	and.w	r3, r3, #8
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d016      	beq.n	8008ab0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f022 0208 	bic.w	r2, r2, #8
 8008a90:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2208      	movs	r2, #8
 8008a98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f818 	bl	8008ae0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008ab0:	bf00      	nop
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008af4:	b5b0      	push	{r4, r5, r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d101      	bne.n	8008b0e <HAL_LTDC_ConfigLayer+0x1a>
 8008b0a:	2302      	movs	r3, #2
 8008b0c:	e02c      	b.n	8008b68 <HAL_LTDC_ConfigLayer+0x74>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2202      	movs	r2, #2
 8008b1a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2134      	movs	r1, #52	@ 0x34
 8008b24:	fb01 f303 	mul.w	r3, r1, r3
 8008b28:	4413      	add	r3, r2
 8008b2a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	4614      	mov	r4, r2
 8008b32:	461d      	mov	r5, r3
 8008b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b40:	682b      	ldr	r3, [r5, #0]
 8008b42:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	68b9      	ldr	r1, [r7, #8]
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 f811 	bl	8008b70 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2201      	movs	r2, #1
 8008b54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bdb0      	pop	{r4, r5, r7, pc}

08008b70 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b089      	sub	sp, #36	@ 0x24
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	685a      	ldr	r2, [r3, #4]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	0c1b      	lsrs	r3, r3, #16
 8008b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b8c:	4413      	add	r3, r2
 8008b8e:	041b      	lsls	r3, r3, #16
 8008b90:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	01db      	lsls	r3, r3, #7
 8008b9c:	4413      	add	r3, r2
 8008b9e:	3384      	adds	r3, #132	@ 0x84
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	6812      	ldr	r2, [r2, #0]
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	01d2      	lsls	r2, r2, #7
 8008bac:	440a      	add	r2, r1
 8008bae:	3284      	adds	r2, #132	@ 0x84
 8008bb0:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8008bb4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	0c1b      	lsrs	r3, r3, #16
 8008bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008bc6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008bc8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	01db      	lsls	r3, r3, #7
 8008bd4:	440b      	add	r3, r1
 8008bd6:	3384      	adds	r3, #132	@ 0x84
 8008bd8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008bde:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	68da      	ldr	r2, [r3, #12]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008bee:	4413      	add	r3, r2
 8008bf0:	041b      	lsls	r3, r3, #16
 8008bf2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	01db      	lsls	r3, r3, #7
 8008bfe:	4413      	add	r3, r2
 8008c00:	3384      	adds	r3, #132	@ 0x84
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	6812      	ldr	r2, [r2, #0]
 8008c08:	4611      	mov	r1, r2
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	01d2      	lsls	r2, r2, #7
 8008c0e:	440a      	add	r2, r1
 8008c10:	3284      	adds	r2, #132	@ 0x84
 8008c12:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8008c16:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	689a      	ldr	r2, [r3, #8]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c26:	4413      	add	r3, r2
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4619      	mov	r1, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	01db      	lsls	r3, r3, #7
 8008c34:	440b      	add	r3, r1
 8008c36:	3384      	adds	r3, #132	@ 0x84
 8008c38:	4619      	mov	r1, r3
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	461a      	mov	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	01db      	lsls	r3, r3, #7
 8008c4a:	4413      	add	r3, r2
 8008c4c:	3384      	adds	r3, #132	@ 0x84
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	6812      	ldr	r2, [r2, #0]
 8008c54:	4611      	mov	r1, r2
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	01d2      	lsls	r2, r2, #7
 8008c5a:	440a      	add	r2, r1
 8008c5c:	3284      	adds	r2, #132	@ 0x84
 8008c5e:	f023 0307 	bic.w	r3, r3, #7
 8008c62:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	01db      	lsls	r3, r3, #7
 8008c6e:	4413      	add	r3, r2
 8008c70:	3384      	adds	r3, #132	@ 0x84
 8008c72:	461a      	mov	r2, r3
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008c80:	021b      	lsls	r3, r3, #8
 8008c82:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008c8a:	041b      	lsls	r3, r3, #16
 8008c8c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	061b      	lsls	r3, r3, #24
 8008c94:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	431a      	orrs	r2, r3
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4619      	mov	r1, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	01db      	lsls	r3, r3, #7
 8008cb0:	440b      	add	r3, r1
 8008cb2:	3384      	adds	r3, #132	@ 0x84
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	01db      	lsls	r3, r3, #7
 8008cc6:	4413      	add	r3, r2
 8008cc8:	3384      	adds	r3, #132	@ 0x84
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	6812      	ldr	r2, [r2, #0]
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	01d2      	lsls	r2, r2, #7
 8008cd6:	440a      	add	r2, r1
 8008cd8:	3284      	adds	r2, #132	@ 0x84
 8008cda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008cde:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	01db      	lsls	r3, r3, #7
 8008cea:	4413      	add	r3, r2
 8008cec:	3384      	adds	r3, #132	@ 0x84
 8008cee:	461a      	mov	r2, r3
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	695b      	ldr	r3, [r3, #20]
 8008cf4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	01db      	lsls	r3, r3, #7
 8008d00:	4413      	add	r3, r2
 8008d02:	3384      	adds	r3, #132	@ 0x84
 8008d04:	69db      	ldr	r3, [r3, #28]
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	6812      	ldr	r2, [r2, #0]
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	01d2      	lsls	r2, r2, #7
 8008d10:	440a      	add	r2, r1
 8008d12:	3284      	adds	r2, #132	@ 0x84
 8008d14:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008d18:	f023 0307 	bic.w	r3, r3, #7
 8008d1c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	69da      	ldr	r2, [r3, #28]
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	6a1b      	ldr	r3, [r3, #32]
 8008d26:	68f9      	ldr	r1, [r7, #12]
 8008d28:	6809      	ldr	r1, [r1, #0]
 8008d2a:	4608      	mov	r0, r1
 8008d2c:	6879      	ldr	r1, [r7, #4]
 8008d2e:	01c9      	lsls	r1, r1, #7
 8008d30:	4401      	add	r1, r0
 8008d32:	3184      	adds	r1, #132	@ 0x84
 8008d34:	4313      	orrs	r3, r2
 8008d36:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	01db      	lsls	r3, r3, #7
 8008d42:	4413      	add	r3, r2
 8008d44:	3384      	adds	r3, #132	@ 0x84
 8008d46:	461a      	mov	r2, r3
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d4c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d102      	bne.n	8008d5c <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8008d56:	2304      	movs	r3, #4
 8008d58:	61fb      	str	r3, [r7, #28]
 8008d5a:	e01b      	b.n	8008d94 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d102      	bne.n	8008d6a <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8008d64:	2303      	movs	r3, #3
 8008d66:	61fb      	str	r3, [r7, #28]
 8008d68:	e014      	b.n	8008d94 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	d00b      	beq.n	8008d8a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d007      	beq.n	8008d8a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d003      	beq.n	8008d8a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008d86:	2b07      	cmp	r3, #7
 8008d88:	d102      	bne.n	8008d90 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	61fb      	str	r3, [r7, #28]
 8008d8e:	e001      	b.n	8008d94 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8008d90:	2301      	movs	r3, #1
 8008d92:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	01db      	lsls	r3, r3, #7
 8008d9e:	4413      	add	r3, r2
 8008da0:	3384      	adds	r3, #132	@ 0x84
 8008da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	6812      	ldr	r2, [r2, #0]
 8008da8:	4611      	mov	r1, r2
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	01d2      	lsls	r2, r2, #7
 8008dae:	440a      	add	r2, r1
 8008db0:	3284      	adds	r2, #132	@ 0x84
 8008db2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008db6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dbc:	69fa      	ldr	r2, [r7, #28]
 8008dbe:	fb02 f303 	mul.w	r3, r2, r3
 8008dc2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	6859      	ldr	r1, [r3, #4]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	1acb      	subs	r3, r1, r3
 8008dce:	69f9      	ldr	r1, [r7, #28]
 8008dd0:	fb01 f303 	mul.w	r3, r1, r3
 8008dd4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008dd6:	68f9      	ldr	r1, [r7, #12]
 8008dd8:	6809      	ldr	r1, [r1, #0]
 8008dda:	4608      	mov	r0, r1
 8008ddc:	6879      	ldr	r1, [r7, #4]
 8008dde:	01c9      	lsls	r1, r1, #7
 8008de0:	4401      	add	r1, r0
 8008de2:	3184      	adds	r1, #132	@ 0x84
 8008de4:	4313      	orrs	r3, r2
 8008de6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	461a      	mov	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	01db      	lsls	r3, r3, #7
 8008df2:	4413      	add	r3, r2
 8008df4:	3384      	adds	r3, #132	@ 0x84
 8008df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	6812      	ldr	r2, [r2, #0]
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	01d2      	lsls	r2, r2, #7
 8008e02:	440a      	add	r2, r1
 8008e04:	3284      	adds	r2, #132	@ 0x84
 8008e06:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008e0a:	f023 0307 	bic.w	r3, r3, #7
 8008e0e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	461a      	mov	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	01db      	lsls	r3, r3, #7
 8008e1a:	4413      	add	r3, r2
 8008e1c:	3384      	adds	r3, #132	@ 0x84
 8008e1e:	461a      	mov	r2, r3
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e24:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	01db      	lsls	r3, r3, #7
 8008e30:	4413      	add	r3, r2
 8008e32:	3384      	adds	r3, #132	@ 0x84
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	6812      	ldr	r2, [r2, #0]
 8008e3a:	4611      	mov	r1, r2
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	01d2      	lsls	r2, r2, #7
 8008e40:	440a      	add	r2, r1
 8008e42:	3284      	adds	r2, #132	@ 0x84
 8008e44:	f043 0301 	orr.w	r3, r3, #1
 8008e48:	6013      	str	r3, [r2, #0]
}
 8008e4a:	bf00      	nop
 8008e4c:	3724      	adds	r7, #36	@ 0x24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b086      	sub	sp, #24
 8008e5a:	af02      	add	r7, sp, #8
 8008e5c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	e0fe      	b.n	8009066 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d106      	bne.n	8008e82 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f7f9 faed 	bl	800245c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2203      	movs	r2, #3
 8008e86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f008 f8bd 	bl	801100e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6818      	ldr	r0, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	7c1a      	ldrb	r2, [r3, #16]
 8008e9c:	f88d 2000 	strb.w	r2, [sp]
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ea4:	f008 f884 	bl	8010fb0 <USB_CoreInit>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d005      	beq.n	8008eba <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2202      	movs	r2, #2
 8008eb2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e0d5      	b.n	8009066 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f008 f8b5 	bl	8011030 <USB_SetCurrentMode>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d005      	beq.n	8008ed8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2202      	movs	r2, #2
 8008ed0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e0c6      	b.n	8009066 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73fb      	strb	r3, [r7, #15]
 8008edc:	e04a      	b.n	8008f74 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008ede:	7bfa      	ldrb	r2, [r7, #15]
 8008ee0:	6879      	ldr	r1, [r7, #4]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	00db      	lsls	r3, r3, #3
 8008ee6:	4413      	add	r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	440b      	add	r3, r1
 8008eec:	3315      	adds	r3, #21
 8008eee:	2201      	movs	r2, #1
 8008ef0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008ef2:	7bfa      	ldrb	r2, [r7, #15]
 8008ef4:	6879      	ldr	r1, [r7, #4]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	00db      	lsls	r3, r3, #3
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	440b      	add	r3, r1
 8008f00:	3314      	adds	r3, #20
 8008f02:	7bfa      	ldrb	r2, [r7, #15]
 8008f04:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008f06:	7bfa      	ldrb	r2, [r7, #15]
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
 8008f0a:	b298      	uxth	r0, r3
 8008f0c:	6879      	ldr	r1, [r7, #4]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	00db      	lsls	r3, r3, #3
 8008f12:	4413      	add	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	440b      	add	r3, r1
 8008f18:	332e      	adds	r3, #46	@ 0x2e
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008f1e:	7bfa      	ldrb	r2, [r7, #15]
 8008f20:	6879      	ldr	r1, [r7, #4]
 8008f22:	4613      	mov	r3, r2
 8008f24:	00db      	lsls	r3, r3, #3
 8008f26:	4413      	add	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	440b      	add	r3, r1
 8008f2c:	3318      	adds	r3, #24
 8008f2e:	2200      	movs	r2, #0
 8008f30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008f32:	7bfa      	ldrb	r2, [r7, #15]
 8008f34:	6879      	ldr	r1, [r7, #4]
 8008f36:	4613      	mov	r3, r2
 8008f38:	00db      	lsls	r3, r3, #3
 8008f3a:	4413      	add	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	440b      	add	r3, r1
 8008f40:	331c      	adds	r3, #28
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008f46:	7bfa      	ldrb	r2, [r7, #15]
 8008f48:	6879      	ldr	r1, [r7, #4]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	00db      	lsls	r3, r3, #3
 8008f4e:	4413      	add	r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	440b      	add	r3, r1
 8008f54:	3320      	adds	r3, #32
 8008f56:	2200      	movs	r2, #0
 8008f58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008f5a:	7bfa      	ldrb	r2, [r7, #15]
 8008f5c:	6879      	ldr	r1, [r7, #4]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	00db      	lsls	r3, r3, #3
 8008f62:	4413      	add	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	440b      	add	r3, r1
 8008f68:	3324      	adds	r3, #36	@ 0x24
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
 8008f70:	3301      	adds	r3, #1
 8008f72:	73fb      	strb	r3, [r7, #15]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	791b      	ldrb	r3, [r3, #4]
 8008f78:	7bfa      	ldrb	r2, [r7, #15]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d3af      	bcc.n	8008ede <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f7e:	2300      	movs	r3, #0
 8008f80:	73fb      	strb	r3, [r7, #15]
 8008f82:	e044      	b.n	800900e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008f84:	7bfa      	ldrb	r2, [r7, #15]
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	00db      	lsls	r3, r3, #3
 8008f8c:	4413      	add	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	440b      	add	r3, r1
 8008f92:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008f96:	2200      	movs	r2, #0
 8008f98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008f9a:	7bfa      	ldrb	r2, [r7, #15]
 8008f9c:	6879      	ldr	r1, [r7, #4]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	00db      	lsls	r3, r3, #3
 8008fa2:	4413      	add	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	440b      	add	r3, r1
 8008fa8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008fac:	7bfa      	ldrb	r2, [r7, #15]
 8008fae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008fb0:	7bfa      	ldrb	r2, [r7, #15]
 8008fb2:	6879      	ldr	r1, [r7, #4]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	00db      	lsls	r3, r3, #3
 8008fb8:	4413      	add	r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	440b      	add	r3, r1
 8008fbe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008fc6:	7bfa      	ldrb	r2, [r7, #15]
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	00db      	lsls	r3, r3, #3
 8008fce:	4413      	add	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	440b      	add	r3, r1
 8008fd4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008fd8:	2200      	movs	r2, #0
 8008fda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008fdc:	7bfa      	ldrb	r2, [r7, #15]
 8008fde:	6879      	ldr	r1, [r7, #4]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	00db      	lsls	r3, r3, #3
 8008fe4:	4413      	add	r3, r2
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	440b      	add	r3, r1
 8008fea:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008fee:	2200      	movs	r2, #0
 8008ff0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008ff2:	7bfa      	ldrb	r2, [r7, #15]
 8008ff4:	6879      	ldr	r1, [r7, #4]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	00db      	lsls	r3, r3, #3
 8008ffa:	4413      	add	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	440b      	add	r3, r1
 8009000:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009004:	2200      	movs	r2, #0
 8009006:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009008:	7bfb      	ldrb	r3, [r7, #15]
 800900a:	3301      	adds	r3, #1
 800900c:	73fb      	strb	r3, [r7, #15]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	791b      	ldrb	r3, [r3, #4]
 8009012:	7bfa      	ldrb	r2, [r7, #15]
 8009014:	429a      	cmp	r2, r3
 8009016:	d3b5      	bcc.n	8008f84 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6818      	ldr	r0, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	7c1a      	ldrb	r2, [r3, #16]
 8009020:	f88d 2000 	strb.w	r2, [sp]
 8009024:	3304      	adds	r3, #4
 8009026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009028:	f008 f84e 	bl	80110c8 <USB_DevInit>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d005      	beq.n	800903e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2202      	movs	r2, #2
 8009036:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	e013      	b.n	8009066 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	7b1b      	ldrb	r3, [r3, #12]
 8009050:	2b01      	cmp	r3, #1
 8009052:	d102      	bne.n	800905a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f80a 	bl	800906e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4618      	mov	r0, r3
 8009060:	f008 fa1b 	bl	801149a <USB_DevDisconnect>

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800906e:	b480      	push	{r7}
 8009070:	b085      	sub	sp, #20
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800909c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090a0:	f043 0303 	orr.w	r3, r3, #3
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
	...

080090b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80090b8:	b480      	push	{r7}
 80090ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80090bc:	4b05      	ldr	r3, [pc, #20]	@ (80090d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80090be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c0:	4a04      	ldr	r2, [pc, #16]	@ (80090d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80090c2:	f043 0301 	orr.w	r3, r3, #1
 80090c6:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80090c8:	bf00      	nop
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	46020800 	.word	0x46020800

080090d8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80090e0:	4b39      	ldr	r3, [pc, #228]	@ (80091c8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80090e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80090e8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80090ea:	68ba      	ldr	r2, [r7, #8]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d10b      	bne.n	800910a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090f8:	d905      	bls.n	8009106 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80090fa:	4b33      	ldr	r3, [pc, #204]	@ (80091c8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	4a32      	ldr	r2, [pc, #200]	@ (80091c8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009104:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	e057      	b.n	80091ba <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009110:	d90a      	bls.n	8009128 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8009112:	4b2d      	ldr	r3, [pc, #180]	@ (80091c8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4313      	orrs	r3, r2
 800911e:	4a2a      	ldr	r2, [pc, #168]	@ (80091c8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009124:	60d3      	str	r3, [r2, #12]
 8009126:	e007      	b.n	8009138 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8009128:	4b27      	ldr	r3, [pc, #156]	@ (80091c8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8009130:	4925      	ldr	r1, [pc, #148]	@ (80091c8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4313      	orrs	r3, r2
 8009136:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009138:	4b24      	ldr	r3, [pc, #144]	@ (80091cc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a24      	ldr	r2, [pc, #144]	@ (80091d0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800913e:	fba2 2303 	umull	r2, r3, r2, r3
 8009142:	099b      	lsrs	r3, r3, #6
 8009144:	2232      	movs	r2, #50	@ 0x32
 8009146:	fb02 f303 	mul.w	r3, r2, r3
 800914a:	4a21      	ldr	r2, [pc, #132]	@ (80091d0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800914c:	fba2 2303 	umull	r2, r3, r2, r3
 8009150:	099b      	lsrs	r3, r3, #6
 8009152:	3301      	adds	r3, #1
 8009154:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009156:	e002      	b.n	800915e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	3b01      	subs	r3, #1
 800915c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800915e:	4b1a      	ldr	r3, [pc, #104]	@ (80091c8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d102      	bne.n	8009170 <HAL_PWREx_ControlVoltageScaling+0x98>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1f3      	bne.n	8009158 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d01b      	beq.n	80091ae <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009176:	4b15      	ldr	r3, [pc, #84]	@ (80091cc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a15      	ldr	r2, [pc, #84]	@ (80091d0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800917c:	fba2 2303 	umull	r2, r3, r2, r3
 8009180:	099b      	lsrs	r3, r3, #6
 8009182:	2232      	movs	r2, #50	@ 0x32
 8009184:	fb02 f303 	mul.w	r3, r2, r3
 8009188:	4a11      	ldr	r2, [pc, #68]	@ (80091d0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800918a:	fba2 2303 	umull	r2, r3, r2, r3
 800918e:	099b      	lsrs	r3, r3, #6
 8009190:	3301      	adds	r3, #1
 8009192:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8009194:	e002      	b.n	800919c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3b01      	subs	r3, #1
 800919a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800919c:	4b0a      	ldr	r3, [pc, #40]	@ (80091c8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800919e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d102      	bne.n	80091ae <HAL_PWREx_ControlVoltageScaling+0xd6>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1f3      	bne.n	8009196 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d101      	bne.n	80091b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80091b4:	2303      	movs	r3, #3
 80091b6:	e000      	b.n	80091ba <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3714      	adds	r7, #20
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	46020800 	.word	0x46020800
 80091cc:	20000000 	.word	0x20000000
 80091d0:	10624dd3 	.word	0x10624dd3

080091d4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80091d4:	b480      	push	{r7}
 80091d6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80091d8:	4b04      	ldr	r3, [pc, #16]	@ (80091ec <HAL_PWREx_GetVoltageRange+0x18>)
 80091da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	46020800 	.word	0x46020800

080091f0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80091f8:	4b22      	ldr	r3, [pc, #136]	@ (8009284 <HAL_PWREx_ConfigSupply+0x94>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a22      	ldr	r2, [pc, #136]	@ (8009288 <HAL_PWREx_ConfigSupply+0x98>)
 80091fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009202:	099b      	lsrs	r3, r3, #6
 8009204:	2232      	movs	r2, #50	@ 0x32
 8009206:	fb02 f303 	mul.w	r3, r2, r3
 800920a:	4a1f      	ldr	r2, [pc, #124]	@ (8009288 <HAL_PWREx_ConfigSupply+0x98>)
 800920c:	fba2 2303 	umull	r2, r3, r2, r3
 8009210:	099b      	lsrs	r3, r3, #6
 8009212:	3301      	adds	r3, #1
 8009214:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d113      	bne.n	8009244 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800921c:	4b1b      	ldr	r3, [pc, #108]	@ (800928c <HAL_PWREx_ConfigSupply+0x9c>)
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	4a1a      	ldr	r2, [pc, #104]	@ (800928c <HAL_PWREx_ConfigSupply+0x9c>)
 8009222:	f023 0302 	bic.w	r3, r3, #2
 8009226:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009228:	e002      	b.n	8009230 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3b01      	subs	r3, #1
 800922e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009230:	4b16      	ldr	r3, [pc, #88]	@ (800928c <HAL_PWREx_ConfigSupply+0x9c>)
 8009232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009234:	f003 0302 	and.w	r3, r3, #2
 8009238:	2b02      	cmp	r3, #2
 800923a:	d116      	bne.n	800926a <HAL_PWREx_ConfigSupply+0x7a>
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1f3      	bne.n	800922a <HAL_PWREx_ConfigSupply+0x3a>
 8009242:	e012      	b.n	800926a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009244:	4b11      	ldr	r3, [pc, #68]	@ (800928c <HAL_PWREx_ConfigSupply+0x9c>)
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	4a10      	ldr	r2, [pc, #64]	@ (800928c <HAL_PWREx_ConfigSupply+0x9c>)
 800924a:	f043 0302 	orr.w	r3, r3, #2
 800924e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009250:	e002      	b.n	8009258 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	3b01      	subs	r3, #1
 8009256:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009258:	4b0c      	ldr	r3, [pc, #48]	@ (800928c <HAL_PWREx_ConfigSupply+0x9c>)
 800925a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800925c:	f003 0302 	and.w	r3, r3, #2
 8009260:	2b00      	cmp	r3, #0
 8009262:	d102      	bne.n	800926a <HAL_PWREx_ConfigSupply+0x7a>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1f3      	bne.n	8009252 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8009270:	2303      	movs	r3, #3
 8009272:	e000      	b.n	8009276 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	20000000 	.word	0x20000000
 8009288:	10624dd3 	.word	0x10624dd3
 800928c:	46020800 	.word	0x46020800

08009290 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009290:	b480      	push	{r7}
 8009292:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8009294:	4b05      	ldr	r3, [pc, #20]	@ (80092ac <HAL_PWREx_EnableVddUSB+0x1c>)
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	4a04      	ldr	r2, [pc, #16]	@ (80092ac <HAL_PWREx_EnableVddUSB+0x1c>)
 800929a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800929e:	6113      	str	r3, [r2, #16]
}
 80092a0:	bf00      	nop
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	46020800 	.word	0x46020800

080092b0 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80092b0:	b480      	push	{r7}
 80092b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80092b4:	4b05      	ldr	r3, [pc, #20]	@ (80092cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	4a04      	ldr	r2, [pc, #16]	@ (80092cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80092ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80092be:	6113      	str	r3, [r2, #16]
}
 80092c0:	bf00      	nop
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	46020800 	.word	0x46020800

080092d0 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80092d0:	b480      	push	{r7}
 80092d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80092d4:	4b05      	ldr	r3, [pc, #20]	@ (80092ec <HAL_PWREx_EnableVddA+0x1c>)
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	4a04      	ldr	r2, [pc, #16]	@ (80092ec <HAL_PWREx_EnableVddA+0x1c>)
 80092da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80092de:	6113      	str	r3, [r2, #16]
}
 80092e0:	bf00      	nop
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	46020800 	.word	0x46020800

080092f0 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 80092f6:	f7ff ff6d 	bl	80091d4 <HAL_PWREx_GetVoltageRange>
 80092fa:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009302:	d003      	beq.n	800930c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800930a:	d107      	bne.n	800931c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 800930c:	4b06      	ldr	r3, [pc, #24]	@ (8009328 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	4a05      	ldr	r2, [pc, #20]	@ (8009328 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8009312:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8009316:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009318:	2300      	movs	r3, #0
 800931a:	e000      	b.n	800931e <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 800931c:	2301      	movs	r3, #1
}
 800931e:	4618      	mov	r0, r3
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	46020800 	.word	0x46020800

0800932c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b08e      	sub	sp, #56	@ 0x38
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8009334:	2300      	movs	r3, #0
 8009336:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d102      	bne.n	8009346 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	f000 bec8 	b.w	800a0d6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009346:	4b99      	ldr	r3, [pc, #612]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 8009348:	69db      	ldr	r3, [r3, #28]
 800934a:	f003 030c 	and.w	r3, r3, #12
 800934e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009350:	4b96      	ldr	r3, [pc, #600]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 8009352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009354:	f003 0303 	and.w	r3, r3, #3
 8009358:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 0310 	and.w	r3, r3, #16
 8009362:	2b00      	cmp	r3, #0
 8009364:	f000 816c 	beq.w	8009640 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936a:	2b00      	cmp	r3, #0
 800936c:	d007      	beq.n	800937e <HAL_RCC_OscConfig+0x52>
 800936e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009370:	2b0c      	cmp	r3, #12
 8009372:	f040 80de 	bne.w	8009532 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009378:	2b01      	cmp	r3, #1
 800937a:	f040 80da 	bne.w	8009532 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	69db      	ldr	r3, [r3, #28]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d102      	bne.n	800938c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	f000 bea5 	b.w	800a0d6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009390:	4b86      	ldr	r3, [pc, #536]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009398:	2b00      	cmp	r3, #0
 800939a:	d004      	beq.n	80093a6 <HAL_RCC_OscConfig+0x7a>
 800939c:	4b83      	ldr	r3, [pc, #524]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80093a4:	e005      	b.n	80093b2 <HAL_RCC_OscConfig+0x86>
 80093a6:	4b81      	ldr	r3, [pc, #516]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 80093a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80093ac:	041b      	lsls	r3, r3, #16
 80093ae:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d255      	bcs.n	8009462 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10a      	bne.n	80093d2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c0:	4618      	mov	r0, r3
 80093c2:	f001 f9d9 	bl	800a778 <RCC_SetFlashLatencyFromMSIRange>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d002      	beq.n	80093d2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	f000 be82 	b.w	800a0d6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80093d2:	4b76      	ldr	r3, [pc, #472]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	4a75      	ldr	r2, [pc, #468]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 80093d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80093dc:	6093      	str	r3, [r2, #8]
 80093de:	4b73      	ldr	r3, [pc, #460]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ea:	4970      	ldr	r1, [pc, #448]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 80093ec:	4313      	orrs	r3, r2
 80093ee:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093f4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80093f8:	d309      	bcc.n	800940e <HAL_RCC_OscConfig+0xe2>
 80093fa:	4b6c      	ldr	r3, [pc, #432]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	f023 021f 	bic.w	r2, r3, #31
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a1b      	ldr	r3, [r3, #32]
 8009406:	4969      	ldr	r1, [pc, #420]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 8009408:	4313      	orrs	r3, r2
 800940a:	60cb      	str	r3, [r1, #12]
 800940c:	e07e      	b.n	800950c <HAL_RCC_OscConfig+0x1e0>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009412:	2b00      	cmp	r3, #0
 8009414:	da0a      	bge.n	800942c <HAL_RCC_OscConfig+0x100>
 8009416:	4b65      	ldr	r3, [pc, #404]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	015b      	lsls	r3, r3, #5
 8009424:	4961      	ldr	r1, [pc, #388]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 8009426:	4313      	orrs	r3, r2
 8009428:	60cb      	str	r3, [r1, #12]
 800942a:	e06f      	b.n	800950c <HAL_RCC_OscConfig+0x1e0>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009434:	d30a      	bcc.n	800944c <HAL_RCC_OscConfig+0x120>
 8009436:	4b5d      	ldr	r3, [pc, #372]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a1b      	ldr	r3, [r3, #32]
 8009442:	029b      	lsls	r3, r3, #10
 8009444:	4959      	ldr	r1, [pc, #356]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 8009446:	4313      	orrs	r3, r2
 8009448:	60cb      	str	r3, [r1, #12]
 800944a:	e05f      	b.n	800950c <HAL_RCC_OscConfig+0x1e0>
 800944c:	4b57      	ldr	r3, [pc, #348]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a1b      	ldr	r3, [r3, #32]
 8009458:	03db      	lsls	r3, r3, #15
 800945a:	4954      	ldr	r1, [pc, #336]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 800945c:	4313      	orrs	r3, r2
 800945e:	60cb      	str	r3, [r1, #12]
 8009460:	e054      	b.n	800950c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009462:	4b52      	ldr	r3, [pc, #328]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	4a51      	ldr	r2, [pc, #324]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 8009468:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800946c:	6093      	str	r3, [r2, #8]
 800946e:	4b4f      	ldr	r3, [pc, #316]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800947a:	494c      	ldr	r1, [pc, #304]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 800947c:	4313      	orrs	r3, r2
 800947e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009484:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009488:	d309      	bcc.n	800949e <HAL_RCC_OscConfig+0x172>
 800948a:	4b48      	ldr	r3, [pc, #288]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	f023 021f 	bic.w	r2, r3, #31
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	4945      	ldr	r1, [pc, #276]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 8009498:	4313      	orrs	r3, r2
 800949a:	60cb      	str	r3, [r1, #12]
 800949c:	e028      	b.n	80094f0 <HAL_RCC_OscConfig+0x1c4>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	da0a      	bge.n	80094bc <HAL_RCC_OscConfig+0x190>
 80094a6:	4b41      	ldr	r3, [pc, #260]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6a1b      	ldr	r3, [r3, #32]
 80094b2:	015b      	lsls	r3, r3, #5
 80094b4:	493d      	ldr	r1, [pc, #244]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 80094b6:	4313      	orrs	r3, r2
 80094b8:	60cb      	str	r3, [r1, #12]
 80094ba:	e019      	b.n	80094f0 <HAL_RCC_OscConfig+0x1c4>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094c4:	d30a      	bcc.n	80094dc <HAL_RCC_OscConfig+0x1b0>
 80094c6:	4b39      	ldr	r3, [pc, #228]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	029b      	lsls	r3, r3, #10
 80094d4:	4935      	ldr	r1, [pc, #212]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 80094d6:	4313      	orrs	r3, r2
 80094d8:	60cb      	str	r3, [r1, #12]
 80094da:	e009      	b.n	80094f0 <HAL_RCC_OscConfig+0x1c4>
 80094dc:	4b33      	ldr	r3, [pc, #204]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a1b      	ldr	r3, [r3, #32]
 80094e8:	03db      	lsls	r3, r3, #15
 80094ea:	4930      	ldr	r1, [pc, #192]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 80094ec:	4313      	orrs	r3, r2
 80094ee:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80094f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10a      	bne.n	800950c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094fa:	4618      	mov	r0, r3
 80094fc:	f001 f93c 	bl	800a778 <RCC_SetFlashLatencyFromMSIRange>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d002      	beq.n	800950c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	f000 bde5 	b.w	800a0d6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800950c:	f001 f8de 	bl	800a6cc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009510:	4b27      	ldr	r3, [pc, #156]	@ (80095b0 <HAL_RCC_OscConfig+0x284>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4618      	mov	r0, r3
 8009516:	f7f9 fb25 	bl	8002b64 <HAL_InitTick>
 800951a:	4603      	mov	r3, r0
 800951c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8009520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 808a 	beq.w	800963e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800952a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800952e:	f000 bdd2 	b.w	800a0d6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	69db      	ldr	r3, [r3, #28]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d066      	beq.n	8009608 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800953a:	4b1c      	ldr	r3, [pc, #112]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a1b      	ldr	r2, [pc, #108]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 8009540:	f043 0301 	orr.w	r3, r3, #1
 8009544:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009546:	f7f9 fb97 	bl	8002c78 <HAL_GetTick>
 800954a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800954c:	e009      	b.n	8009562 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800954e:	f7f9 fb93 	bl	8002c78 <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	2b02      	cmp	r3, #2
 800955a:	d902      	bls.n	8009562 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800955c:	2303      	movs	r3, #3
 800955e:	f000 bdba 	b.w	800a0d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009562:	4b12      	ldr	r3, [pc, #72]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 0304 	and.w	r3, r3, #4
 800956a:	2b00      	cmp	r3, #0
 800956c:	d0ef      	beq.n	800954e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800956e:	4b0f      	ldr	r3, [pc, #60]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	4a0e      	ldr	r2, [pc, #56]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 8009574:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009578:	6093      	str	r3, [r2, #8]
 800957a:	4b0c      	ldr	r3, [pc, #48]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009586:	4909      	ldr	r1, [pc, #36]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 8009588:	4313      	orrs	r3, r2
 800958a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009590:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009594:	d30e      	bcc.n	80095b4 <HAL_RCC_OscConfig+0x288>
 8009596:	4b05      	ldr	r3, [pc, #20]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	f023 021f 	bic.w	r2, r3, #31
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a1b      	ldr	r3, [r3, #32]
 80095a2:	4902      	ldr	r1, [pc, #8]	@ (80095ac <HAL_RCC_OscConfig+0x280>)
 80095a4:	4313      	orrs	r3, r2
 80095a6:	60cb      	str	r3, [r1, #12]
 80095a8:	e04a      	b.n	8009640 <HAL_RCC_OscConfig+0x314>
 80095aa:	bf00      	nop
 80095ac:	46020c00 	.word	0x46020c00
 80095b0:	20000004 	.word	0x20000004
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	da0a      	bge.n	80095d2 <HAL_RCC_OscConfig+0x2a6>
 80095bc:	4b98      	ldr	r3, [pc, #608]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a1b      	ldr	r3, [r3, #32]
 80095c8:	015b      	lsls	r3, r3, #5
 80095ca:	4995      	ldr	r1, [pc, #596]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80095cc:	4313      	orrs	r3, r2
 80095ce:	60cb      	str	r3, [r1, #12]
 80095d0:	e036      	b.n	8009640 <HAL_RCC_OscConfig+0x314>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095da:	d30a      	bcc.n	80095f2 <HAL_RCC_OscConfig+0x2c6>
 80095dc:	4b90      	ldr	r3, [pc, #576]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a1b      	ldr	r3, [r3, #32]
 80095e8:	029b      	lsls	r3, r3, #10
 80095ea:	498d      	ldr	r1, [pc, #564]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80095ec:	4313      	orrs	r3, r2
 80095ee:	60cb      	str	r3, [r1, #12]
 80095f0:	e026      	b.n	8009640 <HAL_RCC_OscConfig+0x314>
 80095f2:	4b8b      	ldr	r3, [pc, #556]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	03db      	lsls	r3, r3, #15
 8009600:	4987      	ldr	r1, [pc, #540]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 8009602:	4313      	orrs	r3, r2
 8009604:	60cb      	str	r3, [r1, #12]
 8009606:	e01b      	b.n	8009640 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8009608:	4b85      	ldr	r3, [pc, #532]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a84      	ldr	r2, [pc, #528]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 800960e:	f023 0301 	bic.w	r3, r3, #1
 8009612:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009614:	f7f9 fb30 	bl	8002c78 <HAL_GetTick>
 8009618:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800961a:	e009      	b.n	8009630 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800961c:	f7f9 fb2c 	bl	8002c78 <HAL_GetTick>
 8009620:	4602      	mov	r2, r0
 8009622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009624:	1ad3      	subs	r3, r2, r3
 8009626:	2b02      	cmp	r3, #2
 8009628:	d902      	bls.n	8009630 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800962a:	2303      	movs	r3, #3
 800962c:	f000 bd53 	b.w	800a0d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009630:	4b7b      	ldr	r3, [pc, #492]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 0304 	and.w	r3, r3, #4
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1ef      	bne.n	800961c <HAL_RCC_OscConfig+0x2f0>
 800963c:	e000      	b.n	8009640 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800963e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0301 	and.w	r3, r3, #1
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 808b 	beq.w	8009764 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800964e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009650:	2b08      	cmp	r3, #8
 8009652:	d005      	beq.n	8009660 <HAL_RCC_OscConfig+0x334>
 8009654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009656:	2b0c      	cmp	r3, #12
 8009658:	d109      	bne.n	800966e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800965a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800965c:	2b03      	cmp	r3, #3
 800965e:	d106      	bne.n	800966e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d17d      	bne.n	8009764 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	f000 bd34 	b.w	800a0d6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009676:	d106      	bne.n	8009686 <HAL_RCC_OscConfig+0x35a>
 8009678:	4b69      	ldr	r3, [pc, #420]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a68      	ldr	r2, [pc, #416]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 800967e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009682:	6013      	str	r3, [r2, #0]
 8009684:	e041      	b.n	800970a <HAL_RCC_OscConfig+0x3de>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800968e:	d112      	bne.n	80096b6 <HAL_RCC_OscConfig+0x38a>
 8009690:	4b63      	ldr	r3, [pc, #396]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a62      	ldr	r2, [pc, #392]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 8009696:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800969a:	6013      	str	r3, [r2, #0]
 800969c:	4b60      	ldr	r3, [pc, #384]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a5f      	ldr	r2, [pc, #380]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80096a2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80096a6:	6013      	str	r3, [r2, #0]
 80096a8:	4b5d      	ldr	r3, [pc, #372]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a5c      	ldr	r2, [pc, #368]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80096ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096b2:	6013      	str	r3, [r2, #0]
 80096b4:	e029      	b.n	800970a <HAL_RCC_OscConfig+0x3de>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80096be:	d112      	bne.n	80096e6 <HAL_RCC_OscConfig+0x3ba>
 80096c0:	4b57      	ldr	r3, [pc, #348]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a56      	ldr	r2, [pc, #344]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80096c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80096ca:	6013      	str	r3, [r2, #0]
 80096cc:	4b54      	ldr	r3, [pc, #336]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a53      	ldr	r2, [pc, #332]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80096d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096d6:	6013      	str	r3, [r2, #0]
 80096d8:	4b51      	ldr	r3, [pc, #324]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a50      	ldr	r2, [pc, #320]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80096de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096e2:	6013      	str	r3, [r2, #0]
 80096e4:	e011      	b.n	800970a <HAL_RCC_OscConfig+0x3de>
 80096e6:	4b4e      	ldr	r3, [pc, #312]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a4d      	ldr	r2, [pc, #308]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80096ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096f0:	6013      	str	r3, [r2, #0]
 80096f2:	4b4b      	ldr	r3, [pc, #300]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a4a      	ldr	r2, [pc, #296]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80096f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80096fc:	6013      	str	r3, [r2, #0]
 80096fe:	4b48      	ldr	r3, [pc, #288]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a47      	ldr	r2, [pc, #284]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 8009704:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009708:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d014      	beq.n	800973c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8009712:	f7f9 fab1 	bl	8002c78 <HAL_GetTick>
 8009716:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009718:	e009      	b.n	800972e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800971a:	f7f9 faad 	bl	8002c78 <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	2b64      	cmp	r3, #100	@ 0x64
 8009726:	d902      	bls.n	800972e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8009728:	2303      	movs	r3, #3
 800972a:	f000 bcd4 	b.w	800a0d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800972e:	4b3c      	ldr	r3, [pc, #240]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009736:	2b00      	cmp	r3, #0
 8009738:	d0ef      	beq.n	800971a <HAL_RCC_OscConfig+0x3ee>
 800973a:	e013      	b.n	8009764 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800973c:	f7f9 fa9c 	bl	8002c78 <HAL_GetTick>
 8009740:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009742:	e009      	b.n	8009758 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009744:	f7f9 fa98 	bl	8002c78 <HAL_GetTick>
 8009748:	4602      	mov	r2, r0
 800974a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	2b64      	cmp	r3, #100	@ 0x64
 8009750:	d902      	bls.n	8009758 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009752:	2303      	movs	r3, #3
 8009754:	f000 bcbf 	b.w	800a0d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009758:	4b31      	ldr	r3, [pc, #196]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1ef      	bne.n	8009744 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 0302 	and.w	r3, r3, #2
 800976c:	2b00      	cmp	r3, #0
 800976e:	d05f      	beq.n	8009830 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009772:	2b04      	cmp	r3, #4
 8009774:	d005      	beq.n	8009782 <HAL_RCC_OscConfig+0x456>
 8009776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009778:	2b0c      	cmp	r3, #12
 800977a:	d114      	bne.n	80097a6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800977c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800977e:	2b02      	cmp	r3, #2
 8009780:	d111      	bne.n	80097a6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d102      	bne.n	8009790 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	f000 bca3 	b.w	800a0d6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009790:	4b23      	ldr	r3, [pc, #140]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 8009792:	691b      	ldr	r3, [r3, #16]
 8009794:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	691b      	ldr	r3, [r3, #16]
 800979c:	041b      	lsls	r3, r3, #16
 800979e:	4920      	ldr	r1, [pc, #128]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80097a0:	4313      	orrs	r3, r2
 80097a2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80097a4:	e044      	b.n	8009830 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d024      	beq.n	80097f8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80097ae:	4b1c      	ldr	r3, [pc, #112]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a1b      	ldr	r2, [pc, #108]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80097b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097b8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80097ba:	f7f9 fa5d 	bl	8002c78 <HAL_GetTick>
 80097be:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80097c0:	e009      	b.n	80097d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097c2:	f7f9 fa59 	bl	8002c78 <HAL_GetTick>
 80097c6:	4602      	mov	r2, r0
 80097c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	d902      	bls.n	80097d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80097d0:	2303      	movs	r3, #3
 80097d2:	f000 bc80 	b.w	800a0d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80097d6:	4b12      	ldr	r3, [pc, #72]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d0ef      	beq.n	80097c2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80097e2:	4b0f      	ldr	r3, [pc, #60]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	041b      	lsls	r3, r3, #16
 80097f0:	490b      	ldr	r1, [pc, #44]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80097f2:	4313      	orrs	r3, r2
 80097f4:	610b      	str	r3, [r1, #16]
 80097f6:	e01b      	b.n	8009830 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80097f8:	4b09      	ldr	r3, [pc, #36]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a08      	ldr	r2, [pc, #32]	@ (8009820 <HAL_RCC_OscConfig+0x4f4>)
 80097fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009802:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009804:	f7f9 fa38 	bl	8002c78 <HAL_GetTick>
 8009808:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800980a:	e00b      	b.n	8009824 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800980c:	f7f9 fa34 	bl	8002c78 <HAL_GetTick>
 8009810:	4602      	mov	r2, r0
 8009812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009814:	1ad3      	subs	r3, r2, r3
 8009816:	2b02      	cmp	r3, #2
 8009818:	d904      	bls.n	8009824 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800981a:	2303      	movs	r3, #3
 800981c:	f000 bc5b 	b.w	800a0d6 <HAL_RCC_OscConfig+0xdaa>
 8009820:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009824:	4baf      	ldr	r3, [pc, #700]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1ed      	bne.n	800980c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 0308 	and.w	r3, r3, #8
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 80c8 	beq.w	80099ce <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800983e:	2300      	movs	r3, #0
 8009840:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009844:	4ba7      	ldr	r3, [pc, #668]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800984a:	f003 0304 	and.w	r3, r3, #4
 800984e:	2b00      	cmp	r3, #0
 8009850:	d111      	bne.n	8009876 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009852:	4ba4      	ldr	r3, [pc, #656]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009854:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009858:	4aa2      	ldr	r2, [pc, #648]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 800985a:	f043 0304 	orr.w	r3, r3, #4
 800985e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009862:	4ba0      	ldr	r3, [pc, #640]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009864:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009868:	f003 0304 	and.w	r3, r3, #4
 800986c:	617b      	str	r3, [r7, #20]
 800986e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8009870:	2301      	movs	r3, #1
 8009872:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009876:	4b9c      	ldr	r3, [pc, #624]	@ (8009ae8 <HAL_RCC_OscConfig+0x7bc>)
 8009878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	2b00      	cmp	r3, #0
 8009880:	d119      	bne.n	80098b6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009882:	4b99      	ldr	r3, [pc, #612]	@ (8009ae8 <HAL_RCC_OscConfig+0x7bc>)
 8009884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009886:	4a98      	ldr	r2, [pc, #608]	@ (8009ae8 <HAL_RCC_OscConfig+0x7bc>)
 8009888:	f043 0301 	orr.w	r3, r3, #1
 800988c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800988e:	f7f9 f9f3 	bl	8002c78 <HAL_GetTick>
 8009892:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009894:	e009      	b.n	80098aa <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009896:	f7f9 f9ef 	bl	8002c78 <HAL_GetTick>
 800989a:	4602      	mov	r2, r0
 800989c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d902      	bls.n	80098aa <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80098a4:	2303      	movs	r3, #3
 80098a6:	f000 bc16 	b.w	800a0d6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80098aa:	4b8f      	ldr	r3, [pc, #572]	@ (8009ae8 <HAL_RCC_OscConfig+0x7bc>)
 80098ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d0ef      	beq.n	8009896 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	695b      	ldr	r3, [r3, #20]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d05f      	beq.n	800997e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80098be:	4b89      	ldr	r3, [pc, #548]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 80098c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098c4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	699a      	ldr	r2, [r3, #24]
 80098ca:	6a3b      	ldr	r3, [r7, #32]
 80098cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d037      	beq.n	8009944 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d006      	beq.n	80098ec <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80098de:	6a3b      	ldr	r3, [r7, #32]
 80098e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d101      	bne.n	80098ec <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	e3f4      	b.n	800a0d6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80098ec:	6a3b      	ldr	r3, [r7, #32]
 80098ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d01b      	beq.n	800992e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80098f6:	4b7b      	ldr	r3, [pc, #492]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 80098f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098fc:	4a79      	ldr	r2, [pc, #484]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 80098fe:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009902:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8009906:	f7f9 f9b7 	bl	8002c78 <HAL_GetTick>
 800990a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800990c:	e008      	b.n	8009920 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800990e:	f7f9 f9b3 	bl	8002c78 <HAL_GetTick>
 8009912:	4602      	mov	r2, r0
 8009914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	2b05      	cmp	r3, #5
 800991a:	d901      	bls.n	8009920 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800991c:	2303      	movs	r3, #3
 800991e:	e3da      	b.n	800a0d6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009920:	4b70      	ldr	r3, [pc, #448]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009926:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1ef      	bne.n	800990e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800992e:	4b6d      	ldr	r3, [pc, #436]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009930:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009934:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	699b      	ldr	r3, [r3, #24]
 800993c:	4969      	ldr	r1, [pc, #420]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 800993e:	4313      	orrs	r3, r2
 8009940:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8009944:	4b67      	ldr	r3, [pc, #412]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009946:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800994a:	4a66      	ldr	r2, [pc, #408]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 800994c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009950:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009954:	f7f9 f990 	bl	8002c78 <HAL_GetTick>
 8009958:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800995a:	e008      	b.n	800996e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800995c:	f7f9 f98c 	bl	8002c78 <HAL_GetTick>
 8009960:	4602      	mov	r2, r0
 8009962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009964:	1ad3      	subs	r3, r2, r3
 8009966:	2b05      	cmp	r3, #5
 8009968:	d901      	bls.n	800996e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800996a:	2303      	movs	r3, #3
 800996c:	e3b3      	b.n	800a0d6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800996e:	4b5d      	ldr	r3, [pc, #372]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009978:	2b00      	cmp	r3, #0
 800997a:	d0ef      	beq.n	800995c <HAL_RCC_OscConfig+0x630>
 800997c:	e01b      	b.n	80099b6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800997e:	4b59      	ldr	r3, [pc, #356]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009984:	4a57      	ldr	r2, [pc, #348]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009986:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800998a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800998e:	f7f9 f973 	bl	8002c78 <HAL_GetTick>
 8009992:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009994:	e008      	b.n	80099a8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009996:	f7f9 f96f 	bl	8002c78 <HAL_GetTick>
 800999a:	4602      	mov	r2, r0
 800999c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	2b05      	cmp	r3, #5
 80099a2:	d901      	bls.n	80099a8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e396      	b.n	800a0d6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80099a8:	4b4e      	ldr	r3, [pc, #312]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 80099aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1ef      	bne.n	8009996 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80099b6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d107      	bne.n	80099ce <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099be:	4b49      	ldr	r3, [pc, #292]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 80099c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099c4:	4a47      	ldr	r2, [pc, #284]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 80099c6:	f023 0304 	bic.w	r3, r3, #4
 80099ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f003 0304 	and.w	r3, r3, #4
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f000 8111 	beq.w	8009bfe <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80099dc:	2300      	movs	r3, #0
 80099de:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099e2:	4b40      	ldr	r3, [pc, #256]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 80099e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099e8:	f003 0304 	and.w	r3, r3, #4
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d111      	bne.n	8009a14 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099f0:	4b3c      	ldr	r3, [pc, #240]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 80099f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099f6:	4a3b      	ldr	r2, [pc, #236]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 80099f8:	f043 0304 	orr.w	r3, r3, #4
 80099fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009a00:	4b38      	ldr	r3, [pc, #224]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a06:	f003 0304 	and.w	r3, r3, #4
 8009a0a:	613b      	str	r3, [r7, #16]
 8009a0c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009a14:	4b34      	ldr	r3, [pc, #208]	@ (8009ae8 <HAL_RCC_OscConfig+0x7bc>)
 8009a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a18:	f003 0301 	and.w	r3, r3, #1
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d118      	bne.n	8009a52 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009a20:	4b31      	ldr	r3, [pc, #196]	@ (8009ae8 <HAL_RCC_OscConfig+0x7bc>)
 8009a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a24:	4a30      	ldr	r2, [pc, #192]	@ (8009ae8 <HAL_RCC_OscConfig+0x7bc>)
 8009a26:	f043 0301 	orr.w	r3, r3, #1
 8009a2a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a2c:	f7f9 f924 	bl	8002c78 <HAL_GetTick>
 8009a30:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009a32:	e008      	b.n	8009a46 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a34:	f7f9 f920 	bl	8002c78 <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d901      	bls.n	8009a46 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	e347      	b.n	800a0d6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009a46:	4b28      	ldr	r3, [pc, #160]	@ (8009ae8 <HAL_RCC_OscConfig+0x7bc>)
 8009a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a4a:	f003 0301 	and.w	r3, r3, #1
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d0f0      	beq.n	8009a34 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	f003 0301 	and.w	r3, r3, #1
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d01f      	beq.n	8009a9e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	f003 0304 	and.w	r3, r3, #4
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d010      	beq.n	8009a8c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009a6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a70:	4a1c      	ldr	r2, [pc, #112]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009a72:	f043 0304 	orr.w	r3, r3, #4
 8009a76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009a7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a80:	4a18      	ldr	r2, [pc, #96]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009a82:	f043 0301 	orr.w	r3, r3, #1
 8009a86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009a8a:	e018      	b.n	8009abe <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009a8c:	4b15      	ldr	r3, [pc, #84]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009a8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a92:	4a14      	ldr	r2, [pc, #80]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009a94:	f043 0301 	orr.w	r3, r3, #1
 8009a98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009a9c:	e00f      	b.n	8009abe <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009a9e:	4b11      	ldr	r3, [pc, #68]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009aa4:	4a0f      	ldr	r2, [pc, #60]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009aa6:	f023 0301 	bic.w	r3, r3, #1
 8009aaa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009aae:	4b0d      	ldr	r3, [pc, #52]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8009ae4 <HAL_RCC_OscConfig+0x7b8>)
 8009ab6:	f023 0304 	bic.w	r3, r3, #4
 8009aba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d057      	beq.n	8009b76 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8009ac6:	f7f9 f8d7 	bl	8002c78 <HAL_GetTick>
 8009aca:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009acc:	e00e      	b.n	8009aec <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ace:	f7f9 f8d3 	bl	8002c78 <HAL_GetTick>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d905      	bls.n	8009aec <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	e2f8      	b.n	800a0d6 <HAL_RCC_OscConfig+0xdaa>
 8009ae4:	46020c00 	.word	0x46020c00
 8009ae8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009aec:	4b9c      	ldr	r3, [pc, #624]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009af2:	f003 0302 	and.w	r3, r3, #2
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d0e9      	beq.n	8009ace <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d01b      	beq.n	8009b3e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009b06:	4b96      	ldr	r3, [pc, #600]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b0c:	4a94      	ldr	r2, [pc, #592]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009b16:	e00a      	b.n	8009b2e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b18:	f7f9 f8ae 	bl	8002c78 <HAL_GetTick>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d901      	bls.n	8009b2e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	e2d3      	b.n	800a0d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009b2e:	4b8c      	ldr	r3, [pc, #560]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009b30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d0ed      	beq.n	8009b18 <HAL_RCC_OscConfig+0x7ec>
 8009b3c:	e053      	b.n	8009be6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009b3e:	4b88      	ldr	r3, [pc, #544]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009b40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b44:	4a86      	ldr	r2, [pc, #536]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009b46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009b4e:	e00a      	b.n	8009b66 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b50:	f7f9 f892 	bl	8002c78 <HAL_GetTick>
 8009b54:	4602      	mov	r2, r0
 8009b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b58:	1ad3      	subs	r3, r2, r3
 8009b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d901      	bls.n	8009b66 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8009b62:	2303      	movs	r3, #3
 8009b64:	e2b7      	b.n	800a0d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009b66:	4b7e      	ldr	r3, [pc, #504]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1ed      	bne.n	8009b50 <HAL_RCC_OscConfig+0x824>
 8009b74:	e037      	b.n	8009be6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8009b76:	f7f9 f87f 	bl	8002c78 <HAL_GetTick>
 8009b7a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009b7c:	e00a      	b.n	8009b94 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b7e:	f7f9 f87b 	bl	8002c78 <HAL_GetTick>
 8009b82:	4602      	mov	r2, r0
 8009b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d901      	bls.n	8009b94 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8009b90:	2303      	movs	r3, #3
 8009b92:	e2a0      	b.n	800a0d6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009b94:	4b72      	ldr	r3, [pc, #456]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b9a:	f003 0302 	and.w	r3, r3, #2
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1ed      	bne.n	8009b7e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8009ba2:	4b6f      	ldr	r3, [pc, #444]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d01a      	beq.n	8009be6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009bb0:	4b6b      	ldr	r3, [pc, #428]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bb6:	4a6a      	ldr	r2, [pc, #424]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009bb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bbc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009bc0:	e00a      	b.n	8009bd8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bc2:	f7f9 f859 	bl	8002c78 <HAL_GetTick>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d901      	bls.n	8009bd8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	e27e      	b.n	800a0d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009bd8:	4b61      	ldr	r3, [pc, #388]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009bda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1ed      	bne.n	8009bc2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009be6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d107      	bne.n	8009bfe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bee:	4b5c      	ldr	r3, [pc, #368]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009bf4:	4a5a      	ldr	r2, [pc, #360]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009bf6:	f023 0304 	bic.w	r3, r3, #4
 8009bfa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 0320 	and.w	r3, r3, #32
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d036      	beq.n	8009c78 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d019      	beq.n	8009c46 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8009c12:	4b53      	ldr	r3, [pc, #332]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a52      	ldr	r2, [pc, #328]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009c18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009c1c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009c1e:	f7f9 f82b 	bl	8002c78 <HAL_GetTick>
 8009c22:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009c24:	e008      	b.n	8009c38 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c26:	f7f9 f827 	bl	8002c78 <HAL_GetTick>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d901      	bls.n	8009c38 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e24e      	b.n	800a0d6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009c38:	4b49      	ldr	r3, [pc, #292]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d0f0      	beq.n	8009c26 <HAL_RCC_OscConfig+0x8fa>
 8009c44:	e018      	b.n	8009c78 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8009c46:	4b46      	ldr	r3, [pc, #280]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a45      	ldr	r2, [pc, #276]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009c4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c50:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009c52:	f7f9 f811 	bl	8002c78 <HAL_GetTick>
 8009c56:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009c58:	e008      	b.n	8009c6c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c5a:	f7f9 f80d 	bl	8002c78 <HAL_GetTick>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d901      	bls.n	8009c6c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8009c68:	2303      	movs	r3, #3
 8009c6a:	e234      	b.n	800a0d6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009c6c:	4b3c      	ldr	r3, [pc, #240]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1f0      	bne.n	8009c5a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d036      	beq.n	8009cf2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d019      	beq.n	8009cc0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8009c8c:	4b34      	ldr	r3, [pc, #208]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a33      	ldr	r2, [pc, #204]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009c92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009c96:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009c98:	f7f8 ffee 	bl	8002c78 <HAL_GetTick>
 8009c9c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009c9e:	e008      	b.n	8009cb2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009ca0:	f7f8 ffea 	bl	8002c78 <HAL_GetTick>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d901      	bls.n	8009cb2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e211      	b.n	800a0d6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d0f0      	beq.n	8009ca0 <HAL_RCC_OscConfig+0x974>
 8009cbe:	e018      	b.n	8009cf2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8009cc0:	4b27      	ldr	r3, [pc, #156]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a26      	ldr	r2, [pc, #152]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009cc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009cca:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009ccc:	f7f8 ffd4 	bl	8002c78 <HAL_GetTick>
 8009cd0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009cd2:	e008      	b.n	8009ce6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009cd4:	f7f8 ffd0 	bl	8002c78 <HAL_GetTick>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	d901      	bls.n	8009ce6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	e1f7      	b.n	800a0d6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1f0      	bne.n	8009cd4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d07f      	beq.n	8009dfe <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d062      	beq.n	8009dcc <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8009d06:	4b16      	ldr	r3, [pc, #88]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	4a15      	ldr	r2, [pc, #84]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009d0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009d10:	6093      	str	r3, [r2, #8]
 8009d12:	4b13      	ldr	r3, [pc, #76]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d1e:	4910      	ldr	r1, [pc, #64]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009d20:	4313      	orrs	r3, r2
 8009d22:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d28:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009d2c:	d309      	bcc.n	8009d42 <HAL_RCC_OscConfig+0xa16>
 8009d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	f023 021f 	bic.w	r2, r3, #31
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a1b      	ldr	r3, [r3, #32]
 8009d3a:	4909      	ldr	r1, [pc, #36]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	60cb      	str	r3, [r1, #12]
 8009d40:	e02a      	b.n	8009d98 <HAL_RCC_OscConfig+0xa6c>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	da0c      	bge.n	8009d64 <HAL_RCC_OscConfig+0xa38>
 8009d4a:	4b05      	ldr	r3, [pc, #20]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a1b      	ldr	r3, [r3, #32]
 8009d56:	015b      	lsls	r3, r3, #5
 8009d58:	4901      	ldr	r1, [pc, #4]	@ (8009d60 <HAL_RCC_OscConfig+0xa34>)
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	60cb      	str	r3, [r1, #12]
 8009d5e:	e01b      	b.n	8009d98 <HAL_RCC_OscConfig+0xa6c>
 8009d60:	46020c00 	.word	0x46020c00
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d6c:	d30a      	bcc.n	8009d84 <HAL_RCC_OscConfig+0xa58>
 8009d6e:	4ba1      	ldr	r3, [pc, #644]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6a1b      	ldr	r3, [r3, #32]
 8009d7a:	029b      	lsls	r3, r3, #10
 8009d7c:	499d      	ldr	r1, [pc, #628]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	60cb      	str	r3, [r1, #12]
 8009d82:	e009      	b.n	8009d98 <HAL_RCC_OscConfig+0xa6c>
 8009d84:	4b9b      	ldr	r3, [pc, #620]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a1b      	ldr	r3, [r3, #32]
 8009d90:	03db      	lsls	r3, r3, #15
 8009d92:	4998      	ldr	r1, [pc, #608]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009d94:	4313      	orrs	r3, r2
 8009d96:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8009d98:	4b96      	ldr	r3, [pc, #600]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a95      	ldr	r2, [pc, #596]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009d9e:	f043 0310 	orr.w	r3, r3, #16
 8009da2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009da4:	f7f8 ff68 	bl	8002c78 <HAL_GetTick>
 8009da8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8009daa:	e008      	b.n	8009dbe <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009dac:	f7f8 ff64 	bl	8002c78 <HAL_GetTick>
 8009db0:	4602      	mov	r2, r0
 8009db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d901      	bls.n	8009dbe <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8009dba:	2303      	movs	r3, #3
 8009dbc:	e18b      	b.n	800a0d6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8009dbe:	4b8d      	ldr	r3, [pc, #564]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 0320 	and.w	r3, r3, #32
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d0f0      	beq.n	8009dac <HAL_RCC_OscConfig+0xa80>
 8009dca:	e018      	b.n	8009dfe <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8009dcc:	4b89      	ldr	r3, [pc, #548]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a88      	ldr	r2, [pc, #544]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009dd2:	f023 0310 	bic.w	r3, r3, #16
 8009dd6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009dd8:	f7f8 ff4e 	bl	8002c78 <HAL_GetTick>
 8009ddc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009dde:	e008      	b.n	8009df2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009de0:	f7f8 ff4a 	bl	8002c78 <HAL_GetTick>
 8009de4:	4602      	mov	r2, r0
 8009de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d901      	bls.n	8009df2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8009dee:	2303      	movs	r3, #3
 8009df0:	e171      	b.n	800a0d6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009df2:	4b80      	ldr	r3, [pc, #512]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 0320 	and.w	r3, r3, #32
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1f0      	bne.n	8009de0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f000 8166 	beq.w	800a0d4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009e0e:	4b79      	ldr	r3, [pc, #484]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009e10:	69db      	ldr	r3, [r3, #28]
 8009e12:	f003 030c 	and.w	r3, r3, #12
 8009e16:	2b0c      	cmp	r3, #12
 8009e18:	f000 80f2 	beq.w	800a000 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	f040 80c5 	bne.w	8009fb0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009e26:	4b73      	ldr	r3, [pc, #460]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a72      	ldr	r2, [pc, #456]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009e2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009e30:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009e32:	f7f8 ff21 	bl	8002c78 <HAL_GetTick>
 8009e36:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009e38:	e008      	b.n	8009e4c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e3a:	f7f8 ff1d 	bl	8002c78 <HAL_GetTick>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	d901      	bls.n	8009e4c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	e144      	b.n	800a0d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009e4c:	4b69      	ldr	r3, [pc, #420]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1f0      	bne.n	8009e3a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e58:	4b66      	ldr	r3, [pc, #408]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e5e:	f003 0304 	and.w	r3, r3, #4
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d111      	bne.n	8009e8a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8009e66:	4b63      	ldr	r3, [pc, #396]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e6c:	4a61      	ldr	r2, [pc, #388]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009e6e:	f043 0304 	orr.w	r3, r3, #4
 8009e72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009e76:	4b5f      	ldr	r3, [pc, #380]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e7c:	f003 0304 	and.w	r3, r3, #4
 8009e80:	60fb      	str	r3, [r7, #12]
 8009e82:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8009e84:	2301      	movs	r3, #1
 8009e86:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8009e8a:	4b5b      	ldr	r3, [pc, #364]	@ (8009ff8 <HAL_RCC_OscConfig+0xccc>)
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009e92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e96:	d102      	bne.n	8009e9e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009e9e:	4b56      	ldr	r3, [pc, #344]	@ (8009ff8 <HAL_RCC_OscConfig+0xccc>)
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	4a55      	ldr	r2, [pc, #340]	@ (8009ff8 <HAL_RCC_OscConfig+0xccc>)
 8009ea4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009ea8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8009eaa:	4b52      	ldr	r3, [pc, #328]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009eb2:	f023 0303 	bic.w	r3, r3, #3
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009ebe:	3a01      	subs	r2, #1
 8009ec0:	0212      	lsls	r2, r2, #8
 8009ec2:	4311      	orrs	r1, r2
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009ec8:	430a      	orrs	r2, r1
 8009eca:	494a      	ldr	r1, [pc, #296]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	628b      	str	r3, [r1, #40]	@ 0x28
 8009ed0:	4b48      	ldr	r3, [pc, #288]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009ed2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ed4:	4b49      	ldr	r3, [pc, #292]	@ (8009ffc <HAL_RCC_OscConfig+0xcd0>)
 8009ed6:	4013      	ands	r3, r2
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009edc:	3a01      	subs	r2, #1
 8009ede:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009ee6:	3a01      	subs	r2, #1
 8009ee8:	0252      	lsls	r2, r2, #9
 8009eea:	b292      	uxth	r2, r2
 8009eec:	4311      	orrs	r1, r2
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009ef2:	3a01      	subs	r2, #1
 8009ef4:	0412      	lsls	r2, r2, #16
 8009ef6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009efa:	4311      	orrs	r1, r2
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009f00:	3a01      	subs	r2, #1
 8009f02:	0612      	lsls	r2, r2, #24
 8009f04:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009f08:	430a      	orrs	r2, r1
 8009f0a:	493a      	ldr	r1, [pc, #232]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8009f10:	4b38      	ldr	r3, [pc, #224]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f14:	4a37      	ldr	r2, [pc, #220]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009f16:	f023 0310 	bic.w	r3, r3, #16
 8009f1a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f20:	4a34      	ldr	r2, [pc, #208]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009f22:	00db      	lsls	r3, r3, #3
 8009f24:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8009f26:	4b33      	ldr	r3, [pc, #204]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f2a:	4a32      	ldr	r2, [pc, #200]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009f2c:	f043 0310 	orr.w	r3, r3, #16
 8009f30:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8009f32:	4b30      	ldr	r3, [pc, #192]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f36:	f023 020c 	bic.w	r2, r3, #12
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f3e:	492d      	ldr	r1, [pc, #180]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009f40:	4313      	orrs	r3, r2
 8009f42:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8009f44:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d105      	bne.n	8009f58 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8009ff8 <HAL_RCC_OscConfig+0xccc>)
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	4a29      	ldr	r2, [pc, #164]	@ (8009ff8 <HAL_RCC_OscConfig+0xccc>)
 8009f52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009f56:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8009f58:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d107      	bne.n	8009f70 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8009f60:	4b24      	ldr	r3, [pc, #144]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f66:	4a23      	ldr	r2, [pc, #140]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009f68:	f023 0304 	bic.w	r3, r3, #4
 8009f6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8009f70:	4b20      	ldr	r3, [pc, #128]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a1f      	ldr	r2, [pc, #124]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009f76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009f7a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009f7c:	f7f8 fe7c 	bl	8002c78 <HAL_GetTick>
 8009f80:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009f82:	e008      	b.n	8009f96 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f84:	f7f8 fe78 	bl	8002c78 <HAL_GetTick>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d901      	bls.n	8009f96 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e09f      	b.n	800a0d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009f96:	4b17      	ldr	r3, [pc, #92]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d0f0      	beq.n	8009f84 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009fa2:	4b14      	ldr	r3, [pc, #80]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa6:	4a13      	ldr	r2, [pc, #76]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009fa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009fac:	6293      	str	r3, [r2, #40]	@ 0x28
 8009fae:	e091      	b.n	800a0d4 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009fb0:	4b10      	ldr	r3, [pc, #64]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a0f      	ldr	r2, [pc, #60]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009fb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009fba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009fbc:	f7f8 fe5c 	bl	8002c78 <HAL_GetTick>
 8009fc0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009fc2:	e008      	b.n	8009fd6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fc4:	f7f8 fe58 	bl	8002c78 <HAL_GetTick>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fcc:	1ad3      	subs	r3, r2, r3
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	d901      	bls.n	8009fd6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	e07f      	b.n	800a0d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009fd6:	4b07      	ldr	r3, [pc, #28]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1f0      	bne.n	8009fc4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8009fe2:	4b04      	ldr	r3, [pc, #16]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe6:	4a03      	ldr	r2, [pc, #12]	@ (8009ff4 <HAL_RCC_OscConfig+0xcc8>)
 8009fe8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8009fec:	f023 0303 	bic.w	r3, r3, #3
 8009ff0:	6293      	str	r3, [r2, #40]	@ 0x28
 8009ff2:	e06f      	b.n	800a0d4 <HAL_RCC_OscConfig+0xda8>
 8009ff4:	46020c00 	.word	0x46020c00
 8009ff8:	46020800 	.word	0x46020800
 8009ffc:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800a000:	4b37      	ldr	r3, [pc, #220]	@ (800a0e0 <HAL_RCC_OscConfig+0xdb4>)
 800a002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a004:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a006:	4b36      	ldr	r3, [pc, #216]	@ (800a0e0 <HAL_RCC_OscConfig+0xdb4>)
 800a008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a00a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a010:	2b01      	cmp	r3, #1
 800a012:	d039      	beq.n	800a088 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	f003 0203 	and.w	r2, r3, #3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a01e:	429a      	cmp	r2, r3
 800a020:	d132      	bne.n	800a088 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	0a1b      	lsrs	r3, r3, #8
 800a026:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a02e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a030:	429a      	cmp	r2, r3
 800a032:	d129      	bne.n	800a088 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a03e:	429a      	cmp	r2, r3
 800a040:	d122      	bne.n	800a088 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a04c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a04e:	429a      	cmp	r2, r3
 800a050:	d11a      	bne.n	800a088 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	0a5b      	lsrs	r3, r3, #9
 800a056:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a05e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a060:	429a      	cmp	r2, r3
 800a062:	d111      	bne.n	800a088 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	0c1b      	lsrs	r3, r3, #16
 800a068:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a070:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a072:	429a      	cmp	r2, r3
 800a074:	d108      	bne.n	800a088 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	0e1b      	lsrs	r3, r3, #24
 800a07a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a082:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a084:	429a      	cmp	r2, r3
 800a086:	d001      	beq.n	800a08c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e024      	b.n	800a0d6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a08c:	4b14      	ldr	r3, [pc, #80]	@ (800a0e0 <HAL_RCC_OscConfig+0xdb4>)
 800a08e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a090:	08db      	lsrs	r3, r3, #3
 800a092:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d01a      	beq.n	800a0d4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a09e:	4b10      	ldr	r3, [pc, #64]	@ (800a0e0 <HAL_RCC_OscConfig+0xdb4>)
 800a0a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0a2:	4a0f      	ldr	r2, [pc, #60]	@ (800a0e0 <HAL_RCC_OscConfig+0xdb4>)
 800a0a4:	f023 0310 	bic.w	r3, r3, #16
 800a0a8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0aa:	f7f8 fde5 	bl	8002c78 <HAL_GetTick>
 800a0ae:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800a0b0:	bf00      	nop
 800a0b2:	f7f8 fde1 	bl	8002c78 <HAL_GetTick>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d0f9      	beq.n	800a0b2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0c2:	4a07      	ldr	r2, [pc, #28]	@ (800a0e0 <HAL_RCC_OscConfig+0xdb4>)
 800a0c4:	00db      	lsls	r3, r3, #3
 800a0c6:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a0c8:	4b05      	ldr	r3, [pc, #20]	@ (800a0e0 <HAL_RCC_OscConfig+0xdb4>)
 800a0ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0cc:	4a04      	ldr	r2, [pc, #16]	@ (800a0e0 <HAL_RCC_OscConfig+0xdb4>)
 800a0ce:	f043 0310 	orr.w	r3, r3, #16
 800a0d2:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3738      	adds	r7, #56	@ 0x38
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	46020c00 	.word	0x46020c00

0800a0e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d101      	bne.n	800a0f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e1d9      	b.n	800a4ac <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a0f8:	4b9b      	ldr	r3, [pc, #620]	@ (800a368 <HAL_RCC_ClockConfig+0x284>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 030f 	and.w	r3, r3, #15
 800a100:	683a      	ldr	r2, [r7, #0]
 800a102:	429a      	cmp	r2, r3
 800a104:	d910      	bls.n	800a128 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a106:	4b98      	ldr	r3, [pc, #608]	@ (800a368 <HAL_RCC_ClockConfig+0x284>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f023 020f 	bic.w	r2, r3, #15
 800a10e:	4996      	ldr	r1, [pc, #600]	@ (800a368 <HAL_RCC_ClockConfig+0x284>)
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	4313      	orrs	r3, r2
 800a114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a116:	4b94      	ldr	r3, [pc, #592]	@ (800a368 <HAL_RCC_ClockConfig+0x284>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f003 030f 	and.w	r3, r3, #15
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	429a      	cmp	r2, r3
 800a122:	d001      	beq.n	800a128 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	e1c1      	b.n	800a4ac <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 0310 	and.w	r3, r3, #16
 800a130:	2b00      	cmp	r3, #0
 800a132:	d010      	beq.n	800a156 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	695a      	ldr	r2, [r3, #20]
 800a138:	4b8c      	ldr	r3, [pc, #560]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a13c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a140:	429a      	cmp	r2, r3
 800a142:	d908      	bls.n	800a156 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800a144:	4b89      	ldr	r3, [pc, #548]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a148:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	695b      	ldr	r3, [r3, #20]
 800a150:	4986      	ldr	r1, [pc, #536]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a152:	4313      	orrs	r3, r2
 800a154:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f003 0308 	and.w	r3, r3, #8
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d012      	beq.n	800a188 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	691a      	ldr	r2, [r3, #16]
 800a166:	4b81      	ldr	r3, [pc, #516]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a168:	6a1b      	ldr	r3, [r3, #32]
 800a16a:	091b      	lsrs	r3, r3, #4
 800a16c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a170:	429a      	cmp	r2, r3
 800a172:	d909      	bls.n	800a188 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a174:	4b7d      	ldr	r3, [pc, #500]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a176:	6a1b      	ldr	r3, [r3, #32]
 800a178:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	691b      	ldr	r3, [r3, #16]
 800a180:	011b      	lsls	r3, r3, #4
 800a182:	497a      	ldr	r1, [pc, #488]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a184:	4313      	orrs	r3, r2
 800a186:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f003 0304 	and.w	r3, r3, #4
 800a190:	2b00      	cmp	r3, #0
 800a192:	d010      	beq.n	800a1b6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	68da      	ldr	r2, [r3, #12]
 800a198:	4b74      	ldr	r3, [pc, #464]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a19a:	6a1b      	ldr	r3, [r3, #32]
 800a19c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d908      	bls.n	800a1b6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a1a4:	4b71      	ldr	r3, [pc, #452]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a1a6:	6a1b      	ldr	r3, [r3, #32]
 800a1a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	496e      	ldr	r1, [pc, #440]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f003 0302 	and.w	r3, r3, #2
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d010      	beq.n	800a1e4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	689a      	ldr	r2, [r3, #8]
 800a1c6:	4b69      	ldr	r3, [pc, #420]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	f003 030f 	and.w	r3, r3, #15
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d908      	bls.n	800a1e4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a1d2:	4b66      	ldr	r3, [pc, #408]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a1d4:	6a1b      	ldr	r3, [r3, #32]
 800a1d6:	f023 020f 	bic.w	r2, r3, #15
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	4963      	ldr	r1, [pc, #396]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 0301 	and.w	r3, r3, #1
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f000 80d2 	beq.w	800a396 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	2b03      	cmp	r3, #3
 800a1fc:	d143      	bne.n	800a286 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a1fe:	4b5b      	ldr	r3, [pc, #364]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a200:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a204:	f003 0304 	and.w	r3, r3, #4
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d110      	bne.n	800a22e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a20c:	4b57      	ldr	r3, [pc, #348]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a20e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a212:	4a56      	ldr	r2, [pc, #344]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a214:	f043 0304 	orr.w	r3, r3, #4
 800a218:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a21c:	4b53      	ldr	r3, [pc, #332]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a21e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a222:	f003 0304 	and.w	r3, r3, #4
 800a226:	60bb      	str	r3, [r7, #8]
 800a228:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800a22a:	2301      	movs	r3, #1
 800a22c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800a22e:	f7f8 fd23 	bl	8002c78 <HAL_GetTick>
 800a232:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800a234:	4b4e      	ldr	r3, [pc, #312]	@ (800a370 <HAL_RCC_ClockConfig+0x28c>)
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00f      	beq.n	800a260 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a240:	e008      	b.n	800a254 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800a242:	f7f8 fd19 	bl	8002c78 <HAL_GetTick>
 800a246:	4602      	mov	r2, r0
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	1ad3      	subs	r3, r2, r3
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d901      	bls.n	800a254 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800a250:	2303      	movs	r3, #3
 800a252:	e12b      	b.n	800a4ac <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a254:	4b46      	ldr	r3, [pc, #280]	@ (800a370 <HAL_RCC_ClockConfig+0x28c>)
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d0f0      	beq.n	800a242 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a260:	7dfb      	ldrb	r3, [r7, #23]
 800a262:	2b01      	cmp	r3, #1
 800a264:	d107      	bne.n	800a276 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a266:	4b41      	ldr	r3, [pc, #260]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a268:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a26c:	4a3f      	ldr	r2, [pc, #252]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a26e:	f023 0304 	bic.w	r3, r3, #4
 800a272:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a276:	4b3d      	ldr	r3, [pc, #244]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d121      	bne.n	800a2c6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800a282:	2301      	movs	r3, #1
 800a284:	e112      	b.n	800a4ac <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	d107      	bne.n	800a29e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a28e:	4b37      	ldr	r3, [pc, #220]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a296:	2b00      	cmp	r3, #0
 800a298:	d115      	bne.n	800a2c6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e106      	b.n	800a4ac <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d107      	bne.n	800a2b6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a2a6:	4b31      	ldr	r3, [pc, #196]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 0304 	and.w	r3, r3, #4
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d109      	bne.n	800a2c6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e0fa      	b.n	800a4ac <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a2b6:	4b2d      	ldr	r3, [pc, #180]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d101      	bne.n	800a2c6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e0f2      	b.n	800a4ac <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800a2c6:	4b29      	ldr	r3, [pc, #164]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a2c8:	69db      	ldr	r3, [r3, #28]
 800a2ca:	f023 0203 	bic.w	r2, r3, #3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	4926      	ldr	r1, [pc, #152]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800a2d8:	f7f8 fcce 	bl	8002c78 <HAL_GetTick>
 800a2dc:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	2b03      	cmp	r3, #3
 800a2e4:	d112      	bne.n	800a30c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a2e6:	e00a      	b.n	800a2fe <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a2e8:	f7f8 fcc6 	bl	8002c78 <HAL_GetTick>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d901      	bls.n	800a2fe <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800a2fa:	2303      	movs	r3, #3
 800a2fc:	e0d6      	b.n	800a4ac <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a2fe:	4b1b      	ldr	r3, [pc, #108]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a300:	69db      	ldr	r3, [r3, #28]
 800a302:	f003 030c 	and.w	r3, r3, #12
 800a306:	2b0c      	cmp	r3, #12
 800a308:	d1ee      	bne.n	800a2e8 <HAL_RCC_ClockConfig+0x204>
 800a30a:	e044      	b.n	800a396 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	2b02      	cmp	r3, #2
 800a312:	d112      	bne.n	800a33a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a314:	e00a      	b.n	800a32c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a316:	f7f8 fcaf 	bl	8002c78 <HAL_GetTick>
 800a31a:	4602      	mov	r2, r0
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	1ad3      	subs	r3, r2, r3
 800a320:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a324:	4293      	cmp	r3, r2
 800a326:	d901      	bls.n	800a32c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a328:	2303      	movs	r3, #3
 800a32a:	e0bf      	b.n	800a4ac <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a32c:	4b0f      	ldr	r3, [pc, #60]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a32e:	69db      	ldr	r3, [r3, #28]
 800a330:	f003 030c 	and.w	r3, r3, #12
 800a334:	2b08      	cmp	r3, #8
 800a336:	d1ee      	bne.n	800a316 <HAL_RCC_ClockConfig+0x232>
 800a338:	e02d      	b.n	800a396 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d123      	bne.n	800a38a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a342:	e00a      	b.n	800a35a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a344:	f7f8 fc98 	bl	8002c78 <HAL_GetTick>
 800a348:	4602      	mov	r2, r0
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	1ad3      	subs	r3, r2, r3
 800a34e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a352:	4293      	cmp	r3, r2
 800a354:	d901      	bls.n	800a35a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800a356:	2303      	movs	r3, #3
 800a358:	e0a8      	b.n	800a4ac <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a35a:	4b04      	ldr	r3, [pc, #16]	@ (800a36c <HAL_RCC_ClockConfig+0x288>)
 800a35c:	69db      	ldr	r3, [r3, #28]
 800a35e:	f003 030c 	and.w	r3, r3, #12
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1ee      	bne.n	800a344 <HAL_RCC_ClockConfig+0x260>
 800a366:	e016      	b.n	800a396 <HAL_RCC_ClockConfig+0x2b2>
 800a368:	40022000 	.word	0x40022000
 800a36c:	46020c00 	.word	0x46020c00
 800a370:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a374:	f7f8 fc80 	bl	8002c78 <HAL_GetTick>
 800a378:	4602      	mov	r2, r0
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	1ad3      	subs	r3, r2, r3
 800a37e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a382:	4293      	cmp	r3, r2
 800a384:	d901      	bls.n	800a38a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800a386:	2303      	movs	r3, #3
 800a388:	e090      	b.n	800a4ac <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a38a:	4b4a      	ldr	r3, [pc, #296]	@ (800a4b4 <HAL_RCC_ClockConfig+0x3d0>)
 800a38c:	69db      	ldr	r3, [r3, #28]
 800a38e:	f003 030c 	and.w	r3, r3, #12
 800a392:	2b04      	cmp	r3, #4
 800a394:	d1ee      	bne.n	800a374 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 0302 	and.w	r3, r3, #2
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d010      	beq.n	800a3c4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	689a      	ldr	r2, [r3, #8]
 800a3a6:	4b43      	ldr	r3, [pc, #268]	@ (800a4b4 <HAL_RCC_ClockConfig+0x3d0>)
 800a3a8:	6a1b      	ldr	r3, [r3, #32]
 800a3aa:	f003 030f 	and.w	r3, r3, #15
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d208      	bcs.n	800a3c4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a3b2:	4b40      	ldr	r3, [pc, #256]	@ (800a4b4 <HAL_RCC_ClockConfig+0x3d0>)
 800a3b4:	6a1b      	ldr	r3, [r3, #32]
 800a3b6:	f023 020f 	bic.w	r2, r3, #15
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	493d      	ldr	r1, [pc, #244]	@ (800a4b4 <HAL_RCC_ClockConfig+0x3d0>)
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a3c4:	4b3c      	ldr	r3, [pc, #240]	@ (800a4b8 <HAL_RCC_ClockConfig+0x3d4>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 030f 	and.w	r3, r3, #15
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d210      	bcs.n	800a3f4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3d2:	4b39      	ldr	r3, [pc, #228]	@ (800a4b8 <HAL_RCC_ClockConfig+0x3d4>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f023 020f 	bic.w	r2, r3, #15
 800a3da:	4937      	ldr	r1, [pc, #220]	@ (800a4b8 <HAL_RCC_ClockConfig+0x3d4>)
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3e2:	4b35      	ldr	r3, [pc, #212]	@ (800a4b8 <HAL_RCC_ClockConfig+0x3d4>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f003 030f 	and.w	r3, r3, #15
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d001      	beq.n	800a3f4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e05b      	b.n	800a4ac <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 0304 	and.w	r3, r3, #4
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d010      	beq.n	800a422 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	68da      	ldr	r2, [r3, #12]
 800a404:	4b2b      	ldr	r3, [pc, #172]	@ (800a4b4 <HAL_RCC_ClockConfig+0x3d0>)
 800a406:	6a1b      	ldr	r3, [r3, #32]
 800a408:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d208      	bcs.n	800a422 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a410:	4b28      	ldr	r3, [pc, #160]	@ (800a4b4 <HAL_RCC_ClockConfig+0x3d0>)
 800a412:	6a1b      	ldr	r3, [r3, #32]
 800a414:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	4925      	ldr	r1, [pc, #148]	@ (800a4b4 <HAL_RCC_ClockConfig+0x3d0>)
 800a41e:	4313      	orrs	r3, r2
 800a420:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f003 0308 	and.w	r3, r3, #8
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d012      	beq.n	800a454 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	691a      	ldr	r2, [r3, #16]
 800a432:	4b20      	ldr	r3, [pc, #128]	@ (800a4b4 <HAL_RCC_ClockConfig+0x3d0>)
 800a434:	6a1b      	ldr	r3, [r3, #32]
 800a436:	091b      	lsrs	r3, r3, #4
 800a438:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d209      	bcs.n	800a454 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a440:	4b1c      	ldr	r3, [pc, #112]	@ (800a4b4 <HAL_RCC_ClockConfig+0x3d0>)
 800a442:	6a1b      	ldr	r3, [r3, #32]
 800a444:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	011b      	lsls	r3, r3, #4
 800a44e:	4919      	ldr	r1, [pc, #100]	@ (800a4b4 <HAL_RCC_ClockConfig+0x3d0>)
 800a450:	4313      	orrs	r3, r2
 800a452:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 0310 	and.w	r3, r3, #16
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d010      	beq.n	800a482 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	695a      	ldr	r2, [r3, #20]
 800a464:	4b13      	ldr	r3, [pc, #76]	@ (800a4b4 <HAL_RCC_ClockConfig+0x3d0>)
 800a466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a468:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d208      	bcs.n	800a482 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800a470:	4b10      	ldr	r3, [pc, #64]	@ (800a4b4 <HAL_RCC_ClockConfig+0x3d0>)
 800a472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a474:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	695b      	ldr	r3, [r3, #20]
 800a47c:	490d      	ldr	r1, [pc, #52]	@ (800a4b4 <HAL_RCC_ClockConfig+0x3d0>)
 800a47e:	4313      	orrs	r3, r2
 800a480:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a482:	f000 f821 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800a486:	4602      	mov	r2, r0
 800a488:	4b0a      	ldr	r3, [pc, #40]	@ (800a4b4 <HAL_RCC_ClockConfig+0x3d0>)
 800a48a:	6a1b      	ldr	r3, [r3, #32]
 800a48c:	f003 030f 	and.w	r3, r3, #15
 800a490:	490a      	ldr	r1, [pc, #40]	@ (800a4bc <HAL_RCC_ClockConfig+0x3d8>)
 800a492:	5ccb      	ldrb	r3, [r1, r3]
 800a494:	fa22 f303 	lsr.w	r3, r2, r3
 800a498:	4a09      	ldr	r2, [pc, #36]	@ (800a4c0 <HAL_RCC_ClockConfig+0x3dc>)
 800a49a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a49c:	4b09      	ldr	r3, [pc, #36]	@ (800a4c4 <HAL_RCC_ClockConfig+0x3e0>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7f8 fb5f 	bl	8002b64 <HAL_InitTick>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	73fb      	strb	r3, [r7, #15]

  return status;
 800a4aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3718      	adds	r7, #24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	46020c00 	.word	0x46020c00
 800a4b8:	40022000 	.word	0x40022000
 800a4bc:	080115cc 	.word	0x080115cc
 800a4c0:	20000000 	.word	0x20000000
 800a4c4:	20000004 	.word	0x20000004

0800a4c8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b08b      	sub	sp, #44	@ 0x2c
 800a4cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a4d6:	4b78      	ldr	r3, [pc, #480]	@ (800a6b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a4d8:	69db      	ldr	r3, [r3, #28]
 800a4da:	f003 030c 	and.w	r3, r3, #12
 800a4de:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a4e0:	4b75      	ldr	r3, [pc, #468]	@ (800a6b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a4e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4e4:	f003 0303 	and.w	r3, r3, #3
 800a4e8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d005      	beq.n	800a4fc <HAL_RCC_GetSysClockFreq+0x34>
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	2b0c      	cmp	r3, #12
 800a4f4:	d121      	bne.n	800a53a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d11e      	bne.n	800a53a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800a4fc:	4b6e      	ldr	r3, [pc, #440]	@ (800a6b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a504:	2b00      	cmp	r3, #0
 800a506:	d107      	bne.n	800a518 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800a508:	4b6b      	ldr	r3, [pc, #428]	@ (800a6b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a50a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a50e:	0b1b      	lsrs	r3, r3, #12
 800a510:	f003 030f 	and.w	r3, r3, #15
 800a514:	627b      	str	r3, [r7, #36]	@ 0x24
 800a516:	e005      	b.n	800a524 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800a518:	4b67      	ldr	r3, [pc, #412]	@ (800a6b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	0f1b      	lsrs	r3, r3, #28
 800a51e:	f003 030f 	and.w	r3, r3, #15
 800a522:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a524:	4a65      	ldr	r2, [pc, #404]	@ (800a6bc <HAL_RCC_GetSysClockFreq+0x1f4>)
 800a526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a52c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d110      	bne.n	800a556 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a536:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a538:	e00d      	b.n	800a556 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a53a:	4b5f      	ldr	r3, [pc, #380]	@ (800a6b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a53c:	69db      	ldr	r3, [r3, #28]
 800a53e:	f003 030c 	and.w	r3, r3, #12
 800a542:	2b04      	cmp	r3, #4
 800a544:	d102      	bne.n	800a54c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a546:	4b5e      	ldr	r3, [pc, #376]	@ (800a6c0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800a548:	623b      	str	r3, [r7, #32]
 800a54a:	e004      	b.n	800a556 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	2b08      	cmp	r3, #8
 800a550:	d101      	bne.n	800a556 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a552:	4b5b      	ldr	r3, [pc, #364]	@ (800a6c0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800a554:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	2b0c      	cmp	r3, #12
 800a55a:	f040 80a5 	bne.w	800a6a8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a55e:	4b56      	ldr	r3, [pc, #344]	@ (800a6b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a562:	f003 0303 	and.w	r3, r3, #3
 800a566:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a568:	4b53      	ldr	r3, [pc, #332]	@ (800a6b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a56a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a56c:	0a1b      	lsrs	r3, r3, #8
 800a56e:	f003 030f 	and.w	r3, r3, #15
 800a572:	3301      	adds	r3, #1
 800a574:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a576:	4b50      	ldr	r3, [pc, #320]	@ (800a6b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a57a:	091b      	lsrs	r3, r3, #4
 800a57c:	f003 0301 	and.w	r3, r3, #1
 800a580:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a582:	4b4d      	ldr	r3, [pc, #308]	@ (800a6b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a586:	08db      	lsrs	r3, r3, #3
 800a588:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a58c:	68ba      	ldr	r2, [r7, #8]
 800a58e:	fb02 f303 	mul.w	r3, r2, r3
 800a592:	ee07 3a90 	vmov	s15, r3
 800a596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a59a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d003      	beq.n	800a5ac <HAL_RCC_GetSysClockFreq+0xe4>
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	2b03      	cmp	r3, #3
 800a5a8:	d022      	beq.n	800a5f0 <HAL_RCC_GetSysClockFreq+0x128>
 800a5aa:	e043      	b.n	800a634 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	ee07 3a90 	vmov	s15, r3
 800a5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5b6:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800a6c4 <HAL_RCC_GetSysClockFreq+0x1fc>
 800a5ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5be:	4b3e      	ldr	r3, [pc, #248]	@ (800a6b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a5c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5c6:	ee07 3a90 	vmov	s15, r3
 800a5ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a5ce:	ed97 6a01 	vldr	s12, [r7, #4]
 800a5d2:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800a6c8 <HAL_RCC_GetSysClockFreq+0x200>
 800a5d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a5da:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a5de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a5e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5ee:	e046      	b.n	800a67e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	ee07 3a90 	vmov	s15, r3
 800a5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5fa:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800a6c4 <HAL_RCC_GetSysClockFreq+0x1fc>
 800a5fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a602:	4b2d      	ldr	r3, [pc, #180]	@ (800a6b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a60a:	ee07 3a90 	vmov	s15, r3
 800a60e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a612:	ed97 6a01 	vldr	s12, [r7, #4]
 800a616:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800a6c8 <HAL_RCC_GetSysClockFreq+0x200>
 800a61a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a61e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a626:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a62a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a62e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a632:	e024      	b.n	800a67e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a636:	ee07 3a90 	vmov	s15, r3
 800a63a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	ee07 3a90 	vmov	s15, r3
 800a644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a64c:	4b1a      	ldr	r3, [pc, #104]	@ (800a6b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a64e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a654:	ee07 3a90 	vmov	s15, r3
 800a658:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a65c:	ed97 6a01 	vldr	s12, [r7, #4]
 800a660:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800a6c8 <HAL_RCC_GetSysClockFreq+0x200>
 800a664:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a668:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a66c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a670:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a674:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a678:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a67c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800a67e:	4b0e      	ldr	r3, [pc, #56]	@ (800a6b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a682:	0e1b      	lsrs	r3, r3, #24
 800a684:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a688:	3301      	adds	r3, #1
 800a68a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	ee07 3a90 	vmov	s15, r3
 800a692:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a696:	edd7 6a07 	vldr	s13, [r7, #28]
 800a69a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a69e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6a2:	ee17 3a90 	vmov	r3, s15
 800a6a6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800a6a8:	6a3b      	ldr	r3, [r7, #32]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	372c      	adds	r7, #44	@ 0x2c
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr
 800a6b6:	bf00      	nop
 800a6b8:	46020c00 	.word	0x46020c00
 800a6bc:	080115e4 	.word	0x080115e4
 800a6c0:	00f42400 	.word	0x00f42400
 800a6c4:	4b742400 	.word	0x4b742400
 800a6c8:	46000000 	.word	0x46000000

0800a6cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a6d0:	f7ff fefa 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	4b07      	ldr	r3, [pc, #28]	@ (800a6f4 <HAL_RCC_GetHCLKFreq+0x28>)
 800a6d8:	6a1b      	ldr	r3, [r3, #32]
 800a6da:	f003 030f 	and.w	r3, r3, #15
 800a6de:	4906      	ldr	r1, [pc, #24]	@ (800a6f8 <HAL_RCC_GetHCLKFreq+0x2c>)
 800a6e0:	5ccb      	ldrb	r3, [r1, r3]
 800a6e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6e6:	4a05      	ldr	r2, [pc, #20]	@ (800a6fc <HAL_RCC_GetHCLKFreq+0x30>)
 800a6e8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800a6ea:	4b04      	ldr	r3, [pc, #16]	@ (800a6fc <HAL_RCC_GetHCLKFreq+0x30>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	46020c00 	.word	0x46020c00
 800a6f8:	080115cc 	.word	0x080115cc
 800a6fc:	20000000 	.word	0x20000000

0800a700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800a704:	f7ff ffe2 	bl	800a6cc <HAL_RCC_GetHCLKFreq>
 800a708:	4602      	mov	r2, r0
 800a70a:	4b05      	ldr	r3, [pc, #20]	@ (800a720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a70c:	6a1b      	ldr	r3, [r3, #32]
 800a70e:	091b      	lsrs	r3, r3, #4
 800a710:	f003 0307 	and.w	r3, r3, #7
 800a714:	4903      	ldr	r1, [pc, #12]	@ (800a724 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a716:	5ccb      	ldrb	r3, [r1, r3]
 800a718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	46020c00 	.word	0x46020c00
 800a724:	080115dc 	.word	0x080115dc

0800a728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800a72c:	f7ff ffce 	bl	800a6cc <HAL_RCC_GetHCLKFreq>
 800a730:	4602      	mov	r2, r0
 800a732:	4b05      	ldr	r3, [pc, #20]	@ (800a748 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a734:	6a1b      	ldr	r3, [r3, #32]
 800a736:	0a1b      	lsrs	r3, r3, #8
 800a738:	f003 0307 	and.w	r3, r3, #7
 800a73c:	4903      	ldr	r1, [pc, #12]	@ (800a74c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a73e:	5ccb      	ldrb	r3, [r1, r3]
 800a740:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a744:	4618      	mov	r0, r3
 800a746:	bd80      	pop	{r7, pc}
 800a748:	46020c00 	.word	0x46020c00
 800a74c:	080115dc 	.word	0x080115dc

0800a750 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800a754:	f7ff ffba 	bl	800a6cc <HAL_RCC_GetHCLKFreq>
 800a758:	4602      	mov	r2, r0
 800a75a:	4b05      	ldr	r3, [pc, #20]	@ (800a770 <HAL_RCC_GetPCLK3Freq+0x20>)
 800a75c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a75e:	091b      	lsrs	r3, r3, #4
 800a760:	f003 0307 	and.w	r3, r3, #7
 800a764:	4903      	ldr	r1, [pc, #12]	@ (800a774 <HAL_RCC_GetPCLK3Freq+0x24>)
 800a766:	5ccb      	ldrb	r3, [r1, r3]
 800a768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	46020c00 	.word	0x46020c00
 800a774:	080115dc 	.word	0x080115dc

0800a778 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a780:	4b3e      	ldr	r3, [pc, #248]	@ (800a87c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a786:	f003 0304 	and.w	r3, r3, #4
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d003      	beq.n	800a796 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a78e:	f7fe fd21 	bl	80091d4 <HAL_PWREx_GetVoltageRange>
 800a792:	6178      	str	r0, [r7, #20]
 800a794:	e019      	b.n	800a7ca <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a796:	4b39      	ldr	r3, [pc, #228]	@ (800a87c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a798:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a79c:	4a37      	ldr	r2, [pc, #220]	@ (800a87c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a79e:	f043 0304 	orr.w	r3, r3, #4
 800a7a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a7a6:	4b35      	ldr	r3, [pc, #212]	@ (800a87c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a7a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7ac:	f003 0304 	and.w	r3, r3, #4
 800a7b0:	60fb      	str	r3, [r7, #12]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a7b4:	f7fe fd0e 	bl	80091d4 <HAL_PWREx_GetVoltageRange>
 800a7b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a7ba:	4b30      	ldr	r3, [pc, #192]	@ (800a87c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a7bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7c0:	4a2e      	ldr	r2, [pc, #184]	@ (800a87c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a7c2:	f023 0304 	bic.w	r3, r3, #4
 800a7c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a7d0:	d003      	beq.n	800a7da <RCC_SetFlashLatencyFromMSIRange+0x62>
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7d8:	d109      	bne.n	800a7ee <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7e0:	d202      	bcs.n	800a7e8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800a7e6:	e033      	b.n	800a850 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800a7ec:	e030      	b.n	800a850 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7f4:	d208      	bcs.n	800a808 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7fc:	d102      	bne.n	800a804 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800a7fe:	2303      	movs	r3, #3
 800a800:	613b      	str	r3, [r7, #16]
 800a802:	e025      	b.n	800a850 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	e035      	b.n	800a874 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a80e:	d90f      	bls.n	800a830 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d109      	bne.n	800a82a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a81c:	d902      	bls.n	800a824 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800a81e:	2300      	movs	r3, #0
 800a820:	613b      	str	r3, [r7, #16]
 800a822:	e015      	b.n	800a850 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800a824:	2301      	movs	r3, #1
 800a826:	613b      	str	r3, [r7, #16]
 800a828:	e012      	b.n	800a850 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800a82a:	2300      	movs	r3, #0
 800a82c:	613b      	str	r3, [r7, #16]
 800a82e:	e00f      	b.n	800a850 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a836:	d109      	bne.n	800a84c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a83e:	d102      	bne.n	800a846 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800a840:	2301      	movs	r3, #1
 800a842:	613b      	str	r3, [r7, #16]
 800a844:	e004      	b.n	800a850 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800a846:	2302      	movs	r3, #2
 800a848:	613b      	str	r3, [r7, #16]
 800a84a:	e001      	b.n	800a850 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800a84c:	2301      	movs	r3, #1
 800a84e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a850:	4b0b      	ldr	r3, [pc, #44]	@ (800a880 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f023 020f 	bic.w	r2, r3, #15
 800a858:	4909      	ldr	r1, [pc, #36]	@ (800a880 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	4313      	orrs	r3, r2
 800a85e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800a860:	4b07      	ldr	r3, [pc, #28]	@ (800a880 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 030f 	and.w	r3, r3, #15
 800a868:	693a      	ldr	r2, [r7, #16]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d001      	beq.n	800a872 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	e000      	b.n	800a874 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3718      	adds	r7, #24
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	46020c00 	.word	0x46020c00
 800a880:	40022000 	.word	0x40022000

0800a884 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800a884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a888:	b0c8      	sub	sp, #288	@ 0x120
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a890:	2300      	movs	r3, #0
 800a892:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a896:	2300      	movs	r3, #0
 800a898:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a89c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a4:	f002 0401 	and.w	r4, r2, #1
 800a8a8:	2500      	movs	r5, #0
 800a8aa:	ea54 0305 	orrs.w	r3, r4, r5
 800a8ae:	d00b      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800a8b0:	4bd5      	ldr	r3, [pc, #852]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a8b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a8b6:	f023 0103 	bic.w	r1, r3, #3
 800a8ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8c0:	4ad1      	ldr	r2, [pc, #836]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a8c2:	430b      	orrs	r3, r1
 800a8c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a8c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d0:	f002 0802 	and.w	r8, r2, #2
 800a8d4:	f04f 0900 	mov.w	r9, #0
 800a8d8:	ea58 0309 	orrs.w	r3, r8, r9
 800a8dc:	d00b      	beq.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800a8de:	4bca      	ldr	r3, [pc, #808]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a8e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a8e4:	f023 010c 	bic.w	r1, r3, #12
 800a8e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8ee:	4ac6      	ldr	r2, [pc, #792]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a8f0:	430b      	orrs	r3, r1
 800a8f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a8f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fe:	f002 0a04 	and.w	sl, r2, #4
 800a902:	f04f 0b00 	mov.w	fp, #0
 800a906:	ea5a 030b 	orrs.w	r3, sl, fp
 800a90a:	d00b      	beq.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800a90c:	4bbe      	ldr	r3, [pc, #760]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a90e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a912:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a916:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a91a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a91c:	4aba      	ldr	r2, [pc, #744]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a91e:	430b      	orrs	r3, r1
 800a920:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a924:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92c:	f002 0308 	and.w	r3, r2, #8
 800a930:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a934:	2300      	movs	r3, #0
 800a936:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a93a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a93e:	460b      	mov	r3, r1
 800a940:	4313      	orrs	r3, r2
 800a942:	d00b      	beq.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800a944:	4bb0      	ldr	r3, [pc, #704]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a94a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a94e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a954:	4aac      	ldr	r2, [pc, #688]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a956:	430b      	orrs	r3, r1
 800a958:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a95c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	f002 0310 	and.w	r3, r2, #16
 800a968:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a96c:	2300      	movs	r3, #0
 800a96e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a972:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a976:	460b      	mov	r3, r1
 800a978:	4313      	orrs	r3, r2
 800a97a:	d00b      	beq.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800a97c:	4ba2      	ldr	r3, [pc, #648]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a97e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a982:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a986:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a98a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a98c:	4a9e      	ldr	r2, [pc, #632]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a98e:	430b      	orrs	r3, r1
 800a990:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a994:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a9a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a9aa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	d00b      	beq.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800a9b4:	4b94      	ldr	r3, [pc, #592]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a9b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a9ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a9be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9c4:	4a90      	ldr	r2, [pc, #576]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a9c6:	430b      	orrs	r3, r1
 800a9c8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a9cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d4:	f002 0320 	and.w	r3, r2, #32
 800a9d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a9dc:	2300      	movs	r3, #0
 800a9de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a9e2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	d00b      	beq.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800a9ec:	4b86      	ldr	r3, [pc, #536]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a9ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a9f2:	f023 0107 	bic.w	r1, r3, #7
 800a9f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9fc:	4a82      	ldr	r2, [pc, #520]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a9fe:	430b      	orrs	r3, r1
 800aa00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800aa04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800aa10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800aa14:	2300      	movs	r3, #0
 800aa16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aa1a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	4313      	orrs	r3, r2
 800aa22:	d00b      	beq.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800aa24:	4b78      	ldr	r3, [pc, #480]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aa2a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800aa2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa34:	4a74      	ldr	r2, [pc, #464]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa36:	430b      	orrs	r3, r1
 800aa38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800aa3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa44:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800aa48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aa52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800aa56:	460b      	mov	r3, r1
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	d00b      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800aa5c:	4b6a      	ldr	r3, [pc, #424]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aa62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa6c:	4a66      	ldr	r2, [pc, #408]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa6e:	430b      	orrs	r3, r1
 800aa70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aa74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800aa80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aa84:	2300      	movs	r3, #0
 800aa86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800aa8a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800aa8e:	460b      	mov	r3, r1
 800aa90:	4313      	orrs	r3, r2
 800aa92:	d00b      	beq.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800aa94:	4b5c      	ldr	r3, [pc, #368]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aa9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800aa9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aaa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aaa4:	4a58      	ldr	r2, [pc, #352]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aaa6:	430b      	orrs	r3, r1
 800aaa8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aaac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800aab8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aabc:	2300      	movs	r3, #0
 800aabe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aac2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800aac6:	460b      	mov	r3, r1
 800aac8:	4313      	orrs	r3, r2
 800aaca:	d00b      	beq.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800aacc:	4b4e      	ldr	r3, [pc, #312]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aad2:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800aad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aada:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aadc:	4a4a      	ldr	r2, [pc, #296]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aade:	430b      	orrs	r3, r1
 800aae0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800aae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaec:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800aaf0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aafa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800aafe:	460b      	mov	r3, r1
 800ab00:	4313      	orrs	r3, r2
 800ab02:	d00b      	beq.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800ab04:	4b40      	ldr	r3, [pc, #256]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ab0a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800ab0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ab14:	4a3c      	ldr	r2, [pc, #240]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab16:	430b      	orrs	r3, r1
 800ab18:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800ab1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab24:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ab28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ab32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ab36:	460b      	mov	r3, r1
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	d00c      	beq.n	800ab56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800ab3c:	4b32      	ldr	r3, [pc, #200]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ab42:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800ab46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab4e:	4a2e      	ldr	r2, [pc, #184]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab50:	430b      	orrs	r3, r1
 800ab52:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ab56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5e:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800ab62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ab66:	2300      	movs	r3, #0
 800ab68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ab6c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ab70:	460b      	mov	r3, r1
 800ab72:	4313      	orrs	r3, r2
 800ab74:	d00c      	beq.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800ab76:	4b24      	ldr	r3, [pc, #144]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ab7c:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800ab80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab88:	4a1f      	ldr	r2, [pc, #124]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab8a:	430b      	orrs	r3, r1
 800ab8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ab90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab98:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800ab9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800aba0:	2300      	movs	r3, #0
 800aba2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aba6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800abaa:	460b      	mov	r3, r1
 800abac:	4313      	orrs	r3, r2
 800abae:	d00c      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800abb0:	4b15      	ldr	r3, [pc, #84]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800abb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800abb6:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800abba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abc2:	4a11      	ldr	r2, [pc, #68]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800abc4:	430b      	orrs	r3, r1
 800abc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800abca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800abd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800abda:	2300      	movs	r3, #0
 800abdc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800abe0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800abe4:	460b      	mov	r3, r1
 800abe6:	4313      	orrs	r3, r2
 800abe8:	d010      	beq.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800abea:	4b07      	ldr	r3, [pc, #28]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800abec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800abf0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800abf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abfc:	4a02      	ldr	r2, [pc, #8]	@ (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800abfe:	430b      	orrs	r3, r1
 800ac00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800ac04:	e002      	b.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x388>
 800ac06:	bf00      	nop
 800ac08:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ac0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac14:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ac18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ac22:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800ac26:	460b      	mov	r3, r1
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	d04c      	beq.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800ac2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ac34:	2b80      	cmp	r3, #128	@ 0x80
 800ac36:	d02d      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800ac38:	2b80      	cmp	r3, #128	@ 0x80
 800ac3a:	d827      	bhi.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800ac3c:	2b60      	cmp	r3, #96	@ 0x60
 800ac3e:	d02b      	beq.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800ac40:	2b60      	cmp	r3, #96	@ 0x60
 800ac42:	d823      	bhi.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800ac44:	2b40      	cmp	r3, #64	@ 0x40
 800ac46:	d006      	beq.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800ac48:	2b40      	cmp	r3, #64	@ 0x40
 800ac4a:	d81f      	bhi.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d009      	beq.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800ac50:	2b20      	cmp	r3, #32
 800ac52:	d011      	beq.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800ac54:	e01a      	b.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ac56:	4bc0      	ldr	r3, [pc, #768]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac5a:	4abf      	ldr	r2, [pc, #764]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac60:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ac62:	e01a      	b.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ac64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac68:	3308      	adds	r3, #8
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f002 fcd6 	bl	800d61c <RCCEx_PLL2_Config>
 800ac70:	4603      	mov	r3, r0
 800ac72:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ac76:	e010      	b.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ac78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac7c:	332c      	adds	r3, #44	@ 0x2c
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f002 fd64 	bl	800d74c <RCCEx_PLL3_Config>
 800ac84:	4603      	mov	r3, r0
 800ac86:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ac8a:	e006      	b.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ac92:	e002      	b.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800ac94:	bf00      	nop
 800ac96:	e000      	b.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800ac98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac9a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d10d      	bne.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800aca2:	4bad      	ldr	r3, [pc, #692]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aca4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aca8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800acac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800acb4:	4aa8      	ldr	r2, [pc, #672]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800acb6:	430b      	orrs	r3, r1
 800acb8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800acbc:	e003      	b.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acbe:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800acc2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800acc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acce:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800acd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800acd6:	2300      	movs	r3, #0
 800acd8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800acdc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ace0:	460b      	mov	r3, r1
 800ace2:	4313      	orrs	r3, r2
 800ace4:	d053      	beq.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800ace6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800acee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acf2:	d033      	beq.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800acf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acf8:	d82c      	bhi.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800acfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acfe:	d02f      	beq.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800ad00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad04:	d826      	bhi.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ad06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad0a:	d008      	beq.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800ad0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad10:	d820      	bhi.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00a      	beq.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800ad16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad1a:	d011      	beq.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ad1c:	e01a      	b.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ad1e:	4b8e      	ldr	r3, [pc, #568]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad22:	4a8d      	ldr	r2, [pc, #564]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad28:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ad2a:	e01a      	b.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ad2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad30:	3308      	adds	r3, #8
 800ad32:	4618      	mov	r0, r3
 800ad34:	f002 fc72 	bl	800d61c <RCCEx_PLL2_Config>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ad3e:	e010      	b.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ad40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad44:	332c      	adds	r3, #44	@ 0x2c
 800ad46:	4618      	mov	r0, r3
 800ad48:	f002 fd00 	bl	800d74c <RCCEx_PLL3_Config>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ad52:	e006      	b.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad54:	2301      	movs	r3, #1
 800ad56:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ad5a:	e002      	b.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800ad5c:	bf00      	nop
 800ad5e:	e000      	b.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800ad60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad62:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d10d      	bne.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800ad6a:	4b7b      	ldr	r3, [pc, #492]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ad70:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800ad74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ad7c:	4a76      	ldr	r2, [pc, #472]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad7e:	430b      	orrs	r3, r1
 800ad80:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ad84:	e003      	b.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad86:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ad8a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800ad8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad96:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ad9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ad9e:	2300      	movs	r3, #0
 800ada0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ada4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ada8:	460b      	mov	r3, r1
 800adaa:	4313      	orrs	r3, r2
 800adac:	d046      	beq.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800adae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800adb6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800adba:	d028      	beq.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800adbc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800adc0:	d821      	bhi.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800adc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800adc6:	d022      	beq.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800adc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800adcc:	d81b      	bhi.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800adce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800add2:	d01c      	beq.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800add4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800add8:	d815      	bhi.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800adda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adde:	d008      	beq.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800ade0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ade4:	d80f      	bhi.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d011      	beq.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800adea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adee:	d00e      	beq.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800adf0:	e009      	b.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800adf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adf6:	3308      	adds	r3, #8
 800adf8:	4618      	mov	r0, r3
 800adfa:	f002 fc0f 	bl	800d61c <RCCEx_PLL2_Config>
 800adfe:	4603      	mov	r3, r0
 800ae00:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ae04:	e004      	b.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ae0c:	e000      	b.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800ae0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae10:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d10d      	bne.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800ae18:	4b4f      	ldr	r3, [pc, #316]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ae1e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ae22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ae2a:	4a4b      	ldr	r2, [pc, #300]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae2c:	430b      	orrs	r3, r1
 800ae2e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800ae32:	e003      	b.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae34:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ae38:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800ae3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae44:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ae48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae52:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ae56:	460b      	mov	r3, r1
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	d03f      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800ae5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ae64:	2b04      	cmp	r3, #4
 800ae66:	d81e      	bhi.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x622>
 800ae68:	a201      	add	r2, pc, #4	@ (adr r2, 800ae70 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800ae6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae6e:	bf00      	nop
 800ae70:	0800aeaf 	.word	0x0800aeaf
 800ae74:	0800ae85 	.word	0x0800ae85
 800ae78:	0800ae93 	.word	0x0800ae93
 800ae7c:	0800aeaf 	.word	0x0800aeaf
 800ae80:	0800aeaf 	.word	0x0800aeaf
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ae84:	4b34      	ldr	r3, [pc, #208]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae88:	4a33      	ldr	r2, [pc, #204]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae8e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800ae90:	e00e      	b.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ae92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae96:	332c      	adds	r3, #44	@ 0x2c
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f002 fc57 	bl	800d74c <RCCEx_PLL3_Config>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800aea4:	e004      	b.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800aeac:	e000      	b.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800aeae:	bf00      	nop
    }
    if (ret == HAL_OK)
 800aeb0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10d      	bne.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800aeb8:	4b27      	ldr	r3, [pc, #156]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aeba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aebe:	f023 0107 	bic.w	r1, r3, #7
 800aec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aeca:	4a23      	ldr	r2, [pc, #140]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aecc:	430b      	orrs	r3, r1
 800aece:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800aed2:	e003      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aed4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800aed8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800aedc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800aee8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aeea:	2300      	movs	r3, #0
 800aeec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aeee:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800aef2:	460b      	mov	r3, r1
 800aef4:	4313      	orrs	r3, r2
 800aef6:	d04c      	beq.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800aef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aefc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800af00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800af04:	d02a      	beq.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800af06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800af0a:	d821      	bhi.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800af0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800af10:	d026      	beq.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800af12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800af16:	d81b      	bhi.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800af18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af1c:	d00e      	beq.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800af1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af22:	d815      	bhi.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800af24:	2b00      	cmp	r3, #0
 800af26:	d01d      	beq.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800af28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af2c:	d110      	bne.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800af2e:	4b0a      	ldr	r3, [pc, #40]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800af30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af32:	4a09      	ldr	r2, [pc, #36]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800af34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af38:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800af3a:	e014      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800af3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af40:	332c      	adds	r3, #44	@ 0x2c
 800af42:	4618      	mov	r0, r3
 800af44:	f002 fc02 	bl	800d74c <RCCEx_PLL3_Config>
 800af48:	4603      	mov	r3, r0
 800af4a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800af4e:	e00a      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800af50:	2301      	movs	r3, #1
 800af52:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800af56:	e006      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800af58:	46020c00 	.word	0x46020c00
        break;
 800af5c:	bf00      	nop
 800af5e:	e002      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800af60:	bf00      	nop
 800af62:	e000      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800af64:	bf00      	nop
    }
    if (ret == HAL_OK)
 800af66:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10d      	bne.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800af6e:	4baf      	ldr	r3, [pc, #700]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800af70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800af74:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800af78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800af80:	4aaa      	ldr	r2, [pc, #680]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800af82:	430b      	orrs	r3, r1
 800af84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800af88:	e003      	b.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af8a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800af8e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800af92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800af9e:	673b      	str	r3, [r7, #112]	@ 0x70
 800afa0:	2300      	movs	r3, #0
 800afa2:	677b      	str	r3, [r7, #116]	@ 0x74
 800afa4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800afa8:	460b      	mov	r3, r1
 800afaa:	4313      	orrs	r3, r2
 800afac:	f000 80b5 	beq.w	800b11a <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800afb0:	2300      	movs	r3, #0
 800afb2:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800afb6:	4b9d      	ldr	r3, [pc, #628]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800afb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800afbc:	f003 0304 	and.w	r3, r3, #4
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d113      	bne.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800afc4:	4b99      	ldr	r3, [pc, #612]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800afc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800afca:	4a98      	ldr	r2, [pc, #608]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800afcc:	f043 0304 	orr.w	r3, r3, #4
 800afd0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800afd4:	4b95      	ldr	r3, [pc, #596]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800afd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800afda:	f003 0304 	and.w	r3, r3, #4
 800afde:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800afe2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800afe6:	2301      	movs	r3, #1
 800afe8:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800afec:	4b90      	ldr	r3, [pc, #576]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800afee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aff0:	4a8f      	ldr	r2, [pc, #572]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800aff2:	f043 0301 	orr.w	r3, r3, #1
 800aff6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aff8:	f7f7 fe3e 	bl	8002c78 <HAL_GetTick>
 800affc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b000:	e00b      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b002:	f7f7 fe39 	bl	8002c78 <HAL_GetTick>
 800b006:	4602      	mov	r2, r0
 800b008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b00c:	1ad3      	subs	r3, r2, r3
 800b00e:	2b02      	cmp	r3, #2
 800b010:	d903      	bls.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800b012:	2303      	movs	r3, #3
 800b014:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b018:	e005      	b.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b01a:	4b85      	ldr	r3, [pc, #532]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b01c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b01e:	f003 0301 	and.w	r3, r3, #1
 800b022:	2b00      	cmp	r3, #0
 800b024:	d0ed      	beq.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800b026:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d165      	bne.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b02e:	4b7f      	ldr	r3, [pc, #508]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b034:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b038:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800b03c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b040:	2b00      	cmp	r3, #0
 800b042:	d023      	beq.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x808>
 800b044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b048:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800b04c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b050:	4293      	cmp	r3, r2
 800b052:	d01b      	beq.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b054:	4b75      	ldr	r3, [pc, #468]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b056:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b05a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b05e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b062:	4b72      	ldr	r3, [pc, #456]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b068:	4a70      	ldr	r2, [pc, #448]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b06a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b06e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b072:	4b6e      	ldr	r3, [pc, #440]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b078:	4a6c      	ldr	r2, [pc, #432]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b07a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b07e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b082:	4a6a      	ldr	r2, [pc, #424]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b084:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b088:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b08c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b090:	f003 0301 	and.w	r3, r3, #1
 800b094:	2b00      	cmp	r3, #0
 800b096:	d019      	beq.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b098:	f7f7 fdee 	bl	8002c78 <HAL_GetTick>
 800b09c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b0a0:	e00d      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0a2:	f7f7 fde9 	bl	8002c78 <HAL_GetTick>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0ac:	1ad2      	subs	r2, r2, r3
 800b0ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d903      	bls.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800b0b6:	2303      	movs	r3, #3
 800b0b8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800b0bc:	e006      	b.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b0be:	4b5b      	ldr	r3, [pc, #364]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b0c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b0c4:	f003 0302 	and.w	r3, r3, #2
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d0ea      	beq.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800b0cc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d10d      	bne.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800b0d4:	4b55      	ldr	r3, [pc, #340]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b0d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b0da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b0de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0e2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b0e6:	4a51      	ldr	r2, [pc, #324]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b0e8:	430b      	orrs	r3, r1
 800b0ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b0ee:	e008      	b.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b0f0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b0f4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800b0f8:	e003      	b.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0fa:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b0fe:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b102:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800b106:	2b01      	cmp	r3, #1
 800b108:	d107      	bne.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b10a:	4b48      	ldr	r3, [pc, #288]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b10c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b110:	4a46      	ldr	r2, [pc, #280]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b112:	f023 0304 	bic.w	r3, r3, #4
 800b116:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800b11a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b122:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b126:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b128:	2300      	movs	r3, #0
 800b12a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b12c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b130:	460b      	mov	r3, r1
 800b132:	4313      	orrs	r3, r2
 800b134:	d042      	beq.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800b136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b13a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b13e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b142:	d022      	beq.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x906>
 800b144:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b148:	d81b      	bhi.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b14a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b14e:	d011      	beq.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800b150:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b154:	d815      	bhi.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b156:	2b00      	cmp	r3, #0
 800b158:	d019      	beq.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800b15a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b15e:	d110      	bne.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b164:	3308      	adds	r3, #8
 800b166:	4618      	mov	r0, r3
 800b168:	f002 fa58 	bl	800d61c <RCCEx_PLL2_Config>
 800b16c:	4603      	mov	r3, r0
 800b16e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b172:	e00d      	b.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b174:	4b2d      	ldr	r3, [pc, #180]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b178:	4a2c      	ldr	r2, [pc, #176]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b17a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b17e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b180:	e006      	b.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b182:	2301      	movs	r3, #1
 800b184:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b188:	e002      	b.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b18a:	bf00      	nop
 800b18c:	e000      	b.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b18e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b190:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b194:	2b00      	cmp	r3, #0
 800b196:	d10d      	bne.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800b198:	4b24      	ldr	r3, [pc, #144]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b19a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b19e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b1a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b1aa:	4a20      	ldr	r2, [pc, #128]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b1ac:	430b      	orrs	r3, r1
 800b1ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b1b2:	e003      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1b4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b1b8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b1bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b1c8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	667b      	str	r3, [r7, #100]	@ 0x64
 800b1ce:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	d031      	beq.n	800b23c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800b1d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b1e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1e4:	d00b      	beq.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800b1e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1ea:	d804      	bhi.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d008      	beq.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800b1f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1f4:	d007      	beq.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b1fc:	e004      	b.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b1fe:	bf00      	nop
 800b200:	e002      	b.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b202:	bf00      	nop
 800b204:	e000      	b.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b206:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b208:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d111      	bne.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b210:	4b06      	ldr	r3, [pc, #24]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b212:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b216:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b21a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b21e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b222:	4a02      	ldr	r2, [pc, #8]	@ (800b22c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b224:	430b      	orrs	r3, r1
 800b226:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b22a:	e007      	b.n	800b23c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800b22c:	46020c00 	.word	0x46020c00
 800b230:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b234:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b238:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800b23c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b244:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b248:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b24a:	2300      	movs	r3, #0
 800b24c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b24e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b252:	460b      	mov	r3, r1
 800b254:	4313      	orrs	r3, r2
 800b256:	d00c      	beq.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800b258:	4bb2      	ldr	r3, [pc, #712]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b25a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b25e:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800b262:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b266:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b26a:	4aae      	ldr	r2, [pc, #696]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b26c:	430b      	orrs	r3, r1
 800b26e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800b272:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b27e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b280:	2300      	movs	r3, #0
 800b282:	657b      	str	r3, [r7, #84]	@ 0x54
 800b284:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b288:	460b      	mov	r3, r1
 800b28a:	4313      	orrs	r3, r2
 800b28c:	d019      	beq.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800b28e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b292:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b296:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b29a:	d105      	bne.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b29c:	4ba1      	ldr	r3, [pc, #644]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b29e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2a0:	4aa0      	ldr	r2, [pc, #640]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b2a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2a6:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800b2a8:	4b9e      	ldr	r3, [pc, #632]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b2aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b2ae:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b2b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b2ba:	4a9a      	ldr	r2, [pc, #616]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b2bc:	430b      	orrs	r3, r1
 800b2be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b2c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ca:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b2ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2d4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b2d8:	460b      	mov	r3, r1
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	d00c      	beq.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b2de:	4b91      	ldr	r3, [pc, #580]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b2e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b2e4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b2e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b2f0:	4a8c      	ldr	r2, [pc, #560]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b2f2:	430b      	orrs	r3, r1
 800b2f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800b2f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b300:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b304:	643b      	str	r3, [r7, #64]	@ 0x40
 800b306:	2300      	movs	r3, #0
 800b308:	647b      	str	r3, [r7, #68]	@ 0x44
 800b30a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b30e:	460b      	mov	r3, r1
 800b310:	4313      	orrs	r3, r2
 800b312:	d00c      	beq.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800b314:	4b83      	ldr	r3, [pc, #524]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b31a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b31e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b322:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b326:	4a7f      	ldr	r2, [pc, #508]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b328:	430b      	orrs	r3, r1
 800b32a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800b32e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b336:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b33a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b33c:	2300      	movs	r3, #0
 800b33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b340:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b344:	460b      	mov	r3, r1
 800b346:	4313      	orrs	r3, r2
 800b348:	d00c      	beq.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800b34a:	4b76      	ldr	r3, [pc, #472]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b34c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b350:	f023 0118 	bic.w	r1, r3, #24
 800b354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b358:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b35c:	4a71      	ldr	r2, [pc, #452]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b35e:	430b      	orrs	r3, r1
 800b360:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b364:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800b370:	633b      	str	r3, [r7, #48]	@ 0x30
 800b372:	2300      	movs	r3, #0
 800b374:	637b      	str	r3, [r7, #52]	@ 0x34
 800b376:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b37a:	460b      	mov	r3, r1
 800b37c:	4313      	orrs	r3, r2
 800b37e:	d032      	beq.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800b380:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b384:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b388:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b38c:	d105      	bne.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b38e:	4b65      	ldr	r3, [pc, #404]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b392:	4a64      	ldr	r2, [pc, #400]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b398:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800b39a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b39e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b3a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b3a6:	d108      	bne.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b3a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3ac:	3308      	adds	r3, #8
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f002 f934 	bl	800d61c <RCCEx_PLL2_Config>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800b3ba:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d10d      	bne.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800b3c2:	4b58      	ldr	r3, [pc, #352]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b3c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b3c8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b3cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b3d4:	4a53      	ldr	r2, [pc, #332]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b3d6:	430b      	orrs	r3, r1
 800b3d8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b3dc:	e003      	b.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3de:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b3e2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800b3e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b3f2:	f003 0301 	and.w	r3, r3, #1
 800b3f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3f8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	4313      	orrs	r3, r2
 800b400:	d04a      	beq.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800b402:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b406:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b40a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b40e:	d01e      	beq.n	800b44e <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800b410:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b414:	d825      	bhi.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800b416:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b41a:	d00e      	beq.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800b41c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b420:	d81f      	bhi.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800b422:	2b00      	cmp	r3, #0
 800b424:	d021      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800b426:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b42a:	d11a      	bne.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b42c:	4b3d      	ldr	r3, [pc, #244]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b42e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b430:	4a3c      	ldr	r2, [pc, #240]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b432:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b436:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b438:	e018      	b.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b43a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b43e:	3308      	adds	r3, #8
 800b440:	4618      	mov	r0, r3
 800b442:	f002 f8eb 	bl	800d61c <RCCEx_PLL2_Config>
 800b446:	4603      	mov	r3, r0
 800b448:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b44c:	e00e      	b.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b44e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b452:	332c      	adds	r3, #44	@ 0x2c
 800b454:	4618      	mov	r0, r3
 800b456:	f002 f979 	bl	800d74c <RCCEx_PLL3_Config>
 800b45a:	4603      	mov	r3, r0
 800b45c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b460:	e004      	b.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800b462:	2301      	movs	r3, #1
 800b464:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b468:	e000      	b.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800b46a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b46c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b470:	2b00      	cmp	r3, #0
 800b472:	d10d      	bne.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800b474:	4b2b      	ldr	r3, [pc, #172]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b476:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b47a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b47e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b482:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b486:	4927      	ldr	r1, [pc, #156]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b488:	4313      	orrs	r3, r2
 800b48a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b48e:	e003      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b490:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b494:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800b498:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800b4a4:	623b      	str	r3, [r7, #32]
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4aa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	d03d      	beq.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800b4b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4c0:	d00e      	beq.n	800b4e0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800b4c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4c6:	d815      	bhi.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d017      	beq.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b4cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b4d0:	d110      	bne.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4d2:	4b14      	ldr	r3, [pc, #80]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b4d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4d6:	4a13      	ldr	r2, [pc, #76]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b4d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b4dc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800b4de:	e00e      	b.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b4e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4e4:	3308      	adds	r3, #8
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f002 f898 	bl	800d61c <RCCEx_PLL2_Config>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800b4f2:	e004      	b.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b4fa:	e000      	b.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4fc:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b4fe:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b502:	2b00      	cmp	r3, #0
 800b504:	d110      	bne.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800b506:	4b07      	ldr	r3, [pc, #28]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b50c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b518:	4902      	ldr	r1, [pc, #8]	@ (800b524 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b51a:	4313      	orrs	r3, r2
 800b51c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800b520:	e006      	b.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800b522:	bf00      	nop
 800b524:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b528:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b52c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800b530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b538:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b53c:	61bb      	str	r3, [r7, #24]
 800b53e:	2300      	movs	r3, #0
 800b540:	61fb      	str	r3, [r7, #28]
 800b542:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b546:	460b      	mov	r3, r1
 800b548:	4313      	orrs	r3, r2
 800b54a:	d00c      	beq.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800b54c:	4b68      	ldr	r3, [pc, #416]	@ (800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b54e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b552:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800b556:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b55a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b55e:	4964      	ldr	r1, [pc, #400]	@ (800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b560:	4313      	orrs	r3, r2
 800b562:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b566:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56e:	2100      	movs	r1, #0
 800b570:	6139      	str	r1, [r7, #16]
 800b572:	f003 0302 	and.w	r3, r3, #2
 800b576:	617b      	str	r3, [r7, #20]
 800b578:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b57c:	460b      	mov	r3, r1
 800b57e:	4313      	orrs	r3, r2
 800b580:	d036      	beq.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800b582:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b586:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00c      	beq.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800b58e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b592:	d113      	bne.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b594:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b598:	3308      	adds	r3, #8
 800b59a:	4618      	mov	r0, r3
 800b59c:	f002 f83e 	bl	800d61c <RCCEx_PLL2_Config>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800b5a6:	e00d      	b.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b5a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5ac:	332c      	adds	r3, #44	@ 0x2c
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f002 f8cc 	bl	800d74c <RCCEx_PLL3_Config>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800b5ba:	e003      	b.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b5c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5c4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10d      	bne.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800b5cc:	4b48      	ldr	r3, [pc, #288]	@ (800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b5ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b5d2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800b5d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b5de:	4944      	ldr	r1, [pc, #272]	@ (800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b5e6:	e003      	b.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5e8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b5ec:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800b5f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	60b9      	str	r1, [r7, #8]
 800b5fc:	f003 0304 	and.w	r3, r3, #4
 800b600:	60fb      	str	r3, [r7, #12]
 800b602:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b606:	460b      	mov	r3, r1
 800b608:	4313      	orrs	r3, r2
 800b60a:	d024      	beq.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800b60c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b610:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b614:	2b00      	cmp	r3, #0
 800b616:	d108      	bne.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b618:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b61c:	332c      	adds	r3, #44	@ 0x2c
 800b61e:	4618      	mov	r0, r3
 800b620:	f002 f894 	bl	800d74c <RCCEx_PLL3_Config>
 800b624:	4603      	mov	r3, r0
 800b626:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800b62a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d10d      	bne.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800b632:	4b2f      	ldr	r3, [pc, #188]	@ (800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b634:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b638:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800b63c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b640:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b644:	492a      	ldr	r1, [pc, #168]	@ (800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b646:	4313      	orrs	r3, r2
 800b648:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b64c:	e003      	b.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b64e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b652:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800b656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65e:	2100      	movs	r1, #0
 800b660:	6039      	str	r1, [r7, #0]
 800b662:	f003 0308 	and.w	r3, r3, #8
 800b666:	607b      	str	r3, [r7, #4]
 800b668:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b66c:	460b      	mov	r3, r1
 800b66e:	4313      	orrs	r3, r2
 800b670:	d036      	beq.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800b672:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b676:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b67a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b67e:	d00d      	beq.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800b680:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b684:	d811      	bhi.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800b686:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b68a:	d012      	beq.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800b68c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b690:	d80b      	bhi.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00d      	beq.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800b696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b69a:	d106      	bne.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b69c:	4b14      	ldr	r3, [pc, #80]	@ (800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b69e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6a0:	4a13      	ldr	r2, [pc, #76]	@ (800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b6a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b6a6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800b6a8:	e004      	b.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b6b0:	e000      	b.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800b6b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6b4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d10d      	bne.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800b6bc:	4b0c      	ldr	r3, [pc, #48]	@ (800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b6be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b6c2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800b6c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6ca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b6ce:	4908      	ldr	r1, [pc, #32]	@ (800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b6d6:	e003      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6d8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b6dc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800b6e0:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b6f0:	46020c00 	.word	0x46020c00

0800b6f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b089      	sub	sp, #36	@ 0x24
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800b6fc:	4ba6      	ldr	r3, [pc, #664]	@ (800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b6fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b704:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800b706:	4ba4      	ldr	r3, [pc, #656]	@ (800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b70a:	f003 0303 	and.w	r3, r3, #3
 800b70e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b710:	4ba1      	ldr	r3, [pc, #644]	@ (800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b714:	0a1b      	lsrs	r3, r3, #8
 800b716:	f003 030f 	and.w	r3, r3, #15
 800b71a:	3301      	adds	r3, #1
 800b71c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800b71e:	4b9e      	ldr	r3, [pc, #632]	@ (800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b722:	091b      	lsrs	r3, r3, #4
 800b724:	f003 0301 	and.w	r3, r3, #1
 800b728:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800b72a:	4b9b      	ldr	r3, [pc, #620]	@ (800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b72c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b72e:	08db      	lsrs	r3, r3, #3
 800b730:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	fb02 f303 	mul.w	r3, r2, r3
 800b73a:	ee07 3a90 	vmov	s15, r3
 800b73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b742:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	2b03      	cmp	r3, #3
 800b74a:	d062      	beq.n	800b812 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	2b03      	cmp	r3, #3
 800b750:	f200 8081 	bhi.w	800b856 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d024      	beq.n	800b7a4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	2b02      	cmp	r3, #2
 800b75e:	d17a      	bne.n	800b856 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	ee07 3a90 	vmov	s15, r3
 800b766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b76a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800b99c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800b76e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b772:	4b89      	ldr	r3, [pc, #548]	@ (800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b77a:	ee07 3a90 	vmov	s15, r3
 800b77e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b782:	ed97 6a02 	vldr	s12, [r7, #8]
 800b786:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800b9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b78a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b78e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b796:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b79a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b79e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7a2:	e08f      	b.n	800b8c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b7a4:	4b7c      	ldr	r3, [pc, #496]	@ (800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d005      	beq.n	800b7bc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800b7b0:	4b79      	ldr	r3, [pc, #484]	@ (800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	0f1b      	lsrs	r3, r3, #28
 800b7b6:	f003 030f 	and.w	r3, r3, #15
 800b7ba:	e006      	b.n	800b7ca <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800b7bc:	4b76      	ldr	r3, [pc, #472]	@ (800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b7be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b7c2:	041b      	lsls	r3, r3, #16
 800b7c4:	0f1b      	lsrs	r3, r3, #28
 800b7c6:	f003 030f 	and.w	r3, r3, #15
 800b7ca:	4a76      	ldr	r2, [pc, #472]	@ (800b9a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800b7cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7d0:	ee07 3a90 	vmov	s15, r3
 800b7d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	ee07 3a90 	vmov	s15, r3
 800b7de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	ee07 3a90 	vmov	s15, r3
 800b7ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7f0:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7f4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800b9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b7f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b800:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b804:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b80c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b810:	e058      	b.n	800b8c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	ee07 3a90 	vmov	s15, r3
 800b818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b81c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b99c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800b820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b824:	4b5c      	ldr	r3, [pc, #368]	@ (800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b82c:	ee07 3a90 	vmov	s15, r3
 800b830:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b834:	ed97 6a02 	vldr	s12, [r7, #8]
 800b838:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800b9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b83c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b840:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b844:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b848:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b84c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b850:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b854:	e036      	b.n	800b8c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b856:	4b50      	ldr	r3, [pc, #320]	@ (800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d005      	beq.n	800b86e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800b862:	4b4d      	ldr	r3, [pc, #308]	@ (800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b864:	689b      	ldr	r3, [r3, #8]
 800b866:	0f1b      	lsrs	r3, r3, #28
 800b868:	f003 030f 	and.w	r3, r3, #15
 800b86c:	e006      	b.n	800b87c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800b86e:	4b4a      	ldr	r3, [pc, #296]	@ (800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b874:	041b      	lsls	r3, r3, #16
 800b876:	0f1b      	lsrs	r3, r3, #28
 800b878:	f003 030f 	and.w	r3, r3, #15
 800b87c:	4a49      	ldr	r2, [pc, #292]	@ (800b9a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800b87e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b882:	ee07 3a90 	vmov	s15, r3
 800b886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	ee07 3a90 	vmov	s15, r3
 800b890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b898:	69bb      	ldr	r3, [r7, #24]
 800b89a:	ee07 3a90 	vmov	s15, r3
 800b89e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b8a6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800b9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b8aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b8ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b8c2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800b8c4:	4b34      	ldr	r3, [pc, #208]	@ (800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b8c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d017      	beq.n	800b900 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b8d0:	4b31      	ldr	r3, [pc, #196]	@ (800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b8d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8d4:	0a5b      	lsrs	r3, r3, #9
 800b8d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8da:	ee07 3a90 	vmov	s15, r3
 800b8de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800b8e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8e6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b8ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8f6:	ee17 2a90 	vmov	r2, s15
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	601a      	str	r2, [r3, #0]
 800b8fe:	e002      	b.n	800b906 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2200      	movs	r2, #0
 800b904:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800b906:	4b24      	ldr	r3, [pc, #144]	@ (800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b90a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d017      	beq.n	800b942 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b912:	4b21      	ldr	r3, [pc, #132]	@ (800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b916:	0c1b      	lsrs	r3, r3, #16
 800b918:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b91c:	ee07 3a90 	vmov	s15, r3
 800b920:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800b924:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b928:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b92c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b938:	ee17 2a90 	vmov	r2, s15
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	605a      	str	r2, [r3, #4]
 800b940:	e002      	b.n	800b948 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800b948:	4b13      	ldr	r3, [pc, #76]	@ (800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b94a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b94c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b950:	2b00      	cmp	r3, #0
 800b952:	d017      	beq.n	800b984 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b954:	4b10      	ldr	r3, [pc, #64]	@ (800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b958:	0e1b      	lsrs	r3, r3, #24
 800b95a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b95e:	ee07 3a90 	vmov	s15, r3
 800b962:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800b966:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b96a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b96e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b97a:	ee17 2a90 	vmov	r2, s15
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b982:	e002      	b.n	800b98a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2200      	movs	r2, #0
 800b988:	609a      	str	r2, [r3, #8]
}
 800b98a:	bf00      	nop
 800b98c:	3724      	adds	r7, #36	@ 0x24
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr
 800b996:	bf00      	nop
 800b998:	46020c00 	.word	0x46020c00
 800b99c:	4b742400 	.word	0x4b742400
 800b9a0:	46000000 	.word	0x46000000
 800b9a4:	080115e4 	.word	0x080115e4

0800b9a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b089      	sub	sp, #36	@ 0x24
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800b9b0:	4ba6      	ldr	r3, [pc, #664]	@ (800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b9b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9b8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800b9ba:	4ba4      	ldr	r3, [pc, #656]	@ (800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b9bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9be:	f003 0303 	and.w	r3, r3, #3
 800b9c2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800b9c4:	4ba1      	ldr	r3, [pc, #644]	@ (800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c8:	0a1b      	lsrs	r3, r3, #8
 800b9ca:	f003 030f 	and.w	r3, r3, #15
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800b9d2:	4b9e      	ldr	r3, [pc, #632]	@ (800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b9d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9d6:	091b      	lsrs	r3, r3, #4
 800b9d8:	f003 0301 	and.w	r3, r3, #1
 800b9dc:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800b9de:	4b9b      	ldr	r3, [pc, #620]	@ (800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b9e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9e2:	08db      	lsrs	r3, r3, #3
 800b9e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	fb02 f303 	mul.w	r3, r2, r3
 800b9ee:	ee07 3a90 	vmov	s15, r3
 800b9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9f6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	2b03      	cmp	r3, #3
 800b9fe:	d062      	beq.n	800bac6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	2b03      	cmp	r3, #3
 800ba04:	f200 8081 	bhi.w	800bb0a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d024      	beq.n	800ba58 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d17a      	bne.n	800bb0a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	ee07 3a90 	vmov	s15, r3
 800ba1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba1e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800bc50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800ba22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba26:	4b89      	ldr	r3, [pc, #548]	@ (800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ba28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba2e:	ee07 3a90 	vmov	s15, r3
 800ba32:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba36:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba3a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800bc54 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ba3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ba42:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ba4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba56:	e08f      	b.n	800bb78 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800ba58:	4b7c      	ldr	r3, [pc, #496]	@ (800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d005      	beq.n	800ba70 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800ba64:	4b79      	ldr	r3, [pc, #484]	@ (800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ba66:	689b      	ldr	r3, [r3, #8]
 800ba68:	0f1b      	lsrs	r3, r3, #28
 800ba6a:	f003 030f 	and.w	r3, r3, #15
 800ba6e:	e006      	b.n	800ba7e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800ba70:	4b76      	ldr	r3, [pc, #472]	@ (800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ba72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ba76:	041b      	lsls	r3, r3, #16
 800ba78:	0f1b      	lsrs	r3, r3, #28
 800ba7a:	f003 030f 	and.w	r3, r3, #15
 800ba7e:	4a76      	ldr	r2, [pc, #472]	@ (800bc58 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800ba80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba84:	ee07 3a90 	vmov	s15, r3
 800ba88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	ee07 3a90 	vmov	s15, r3
 800ba92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	ee07 3a90 	vmov	s15, r3
 800baa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baa4:	ed97 6a02 	vldr	s12, [r7, #8]
 800baa8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800bc54 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800baac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bab0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bab4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bab8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800babc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bac0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bac4:	e058      	b.n	800bb78 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	ee07 3a90 	vmov	s15, r3
 800bacc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bad0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bc50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800bad4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bad8:	4b5c      	ldr	r3, [pc, #368]	@ (800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800badc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bae0:	ee07 3a90 	vmov	s15, r3
 800bae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800bae8:	ed97 6a02 	vldr	s12, [r7, #8]
 800baec:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bc54 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800baf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800baf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800baf8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bafc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800bb00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb08:	e036      	b.n	800bb78 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800bb0a:	4b50      	ldr	r3, [pc, #320]	@ (800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d005      	beq.n	800bb22 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800bb16:	4b4d      	ldr	r3, [pc, #308]	@ (800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bb18:	689b      	ldr	r3, [r3, #8]
 800bb1a:	0f1b      	lsrs	r3, r3, #28
 800bb1c:	f003 030f 	and.w	r3, r3, #15
 800bb20:	e006      	b.n	800bb30 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800bb22:	4b4a      	ldr	r3, [pc, #296]	@ (800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bb24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bb28:	041b      	lsls	r3, r3, #16
 800bb2a:	0f1b      	lsrs	r3, r3, #28
 800bb2c:	f003 030f 	and.w	r3, r3, #15
 800bb30:	4a49      	ldr	r2, [pc, #292]	@ (800bc58 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800bb32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb36:	ee07 3a90 	vmov	s15, r3
 800bb3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	ee07 3a90 	vmov	s15, r3
 800bb44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb4c:	69bb      	ldr	r3, [r7, #24]
 800bb4e:	ee07 3a90 	vmov	s15, r3
 800bb52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb56:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb5a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800bc54 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800bb5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800bb6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb76:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800bb78:	4b34      	ldr	r3, [pc, #208]	@ (800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bb7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d017      	beq.n	800bbb4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bb84:	4b31      	ldr	r3, [pc, #196]	@ (800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bb86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb88:	0a5b      	lsrs	r3, r3, #9
 800bb8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb8e:	ee07 3a90 	vmov	s15, r3
 800bb92:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800bb96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb9a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bb9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbaa:	ee17 2a90 	vmov	r2, s15
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	601a      	str	r2, [r3, #0]
 800bbb2:	e002      	b.n	800bbba <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800bbba:	4b24      	ldr	r3, [pc, #144]	@ (800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bbbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d017      	beq.n	800bbf6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bbc6:	4b21      	ldr	r3, [pc, #132]	@ (800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bbc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbca:	0c1b      	lsrs	r3, r3, #16
 800bbcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbd0:	ee07 3a90 	vmov	s15, r3
 800bbd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800bbd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bbdc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bbe0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbec:	ee17 2a90 	vmov	r2, s15
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	605a      	str	r2, [r3, #4]
 800bbf4:	e002      	b.n	800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800bbfc:	4b13      	ldr	r3, [pc, #76]	@ (800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bbfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d017      	beq.n	800bc38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bc08:	4b10      	ldr	r3, [pc, #64]	@ (800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bc0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc0c:	0e1b      	lsrs	r3, r3, #24
 800bc0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc12:	ee07 3a90 	vmov	s15, r3
 800bc16:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800bc1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc1e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bc22:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc2e:	ee17 2a90 	vmov	r2, s15
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bc36:	e002      	b.n	800bc3e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	609a      	str	r2, [r3, #8]
}
 800bc3e:	bf00      	nop
 800bc40:	3724      	adds	r7, #36	@ 0x24
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	46020c00 	.word	0x46020c00
 800bc50:	4b742400 	.word	0x4b742400
 800bc54:	46000000 	.word	0x46000000
 800bc58:	080115e4 	.word	0x080115e4

0800bc5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b089      	sub	sp, #36	@ 0x24
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800bc64:	4ba6      	ldr	r3, [pc, #664]	@ (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bc66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc6c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800bc6e:	4ba4      	ldr	r3, [pc, #656]	@ (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bc70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc72:	f003 0303 	and.w	r3, r3, #3
 800bc76:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800bc78:	4ba1      	ldr	r3, [pc, #644]	@ (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bc7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc7c:	0a1b      	lsrs	r3, r3, #8
 800bc7e:	f003 030f 	and.w	r3, r3, #15
 800bc82:	3301      	adds	r3, #1
 800bc84:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800bc86:	4b9e      	ldr	r3, [pc, #632]	@ (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bc88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc8a:	091b      	lsrs	r3, r3, #4
 800bc8c:	f003 0301 	and.w	r3, r3, #1
 800bc90:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800bc92:	4b9b      	ldr	r3, [pc, #620]	@ (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bc94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc96:	08db      	lsrs	r3, r3, #3
 800bc98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	fb02 f303 	mul.w	r3, r2, r3
 800bca2:	ee07 3a90 	vmov	s15, r3
 800bca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcaa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	2b03      	cmp	r3, #3
 800bcb2:	d062      	beq.n	800bd7a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	2b03      	cmp	r3, #3
 800bcb8:	f200 8081 	bhi.w	800bdbe <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d024      	beq.n	800bd0c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	2b02      	cmp	r3, #2
 800bcc6:	d17a      	bne.n	800bdbe <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	ee07 3a90 	vmov	s15, r3
 800bcce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcd2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800bcd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcda:	4b89      	ldr	r3, [pc, #548]	@ (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bcdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bce2:	ee07 3a90 	vmov	s15, r3
 800bce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcea:	ed97 6a02 	vldr	s12, [r7, #8]
 800bcee:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800bcf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bcf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bd02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd06:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800bd0a:	e08f      	b.n	800be2c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bd0c:	4b7c      	ldr	r3, [pc, #496]	@ (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d005      	beq.n	800bd24 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800bd18:	4b79      	ldr	r3, [pc, #484]	@ (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	0f1b      	lsrs	r3, r3, #28
 800bd1e:	f003 030f 	and.w	r3, r3, #15
 800bd22:	e006      	b.n	800bd32 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800bd24:	4b76      	ldr	r3, [pc, #472]	@ (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bd26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bd2a:	041b      	lsls	r3, r3, #16
 800bd2c:	0f1b      	lsrs	r3, r3, #28
 800bd2e:	f003 030f 	and.w	r3, r3, #15
 800bd32:	4a76      	ldr	r2, [pc, #472]	@ (800bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800bd34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd38:	ee07 3a90 	vmov	s15, r3
 800bd3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	ee07 3a90 	vmov	s15, r3
 800bd46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd4e:	69bb      	ldr	r3, [r7, #24]
 800bd50:	ee07 3a90 	vmov	s15, r3
 800bd54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd58:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd5c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800bd60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bd70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd78:	e058      	b.n	800be2c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	ee07 3a90 	vmov	s15, r3
 800bd80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd84:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800bd88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd8c:	4b5c      	ldr	r3, [pc, #368]	@ (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bd8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd94:	ee07 3a90 	vmov	s15, r3
 800bd98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd9c:	ed97 6a02 	vldr	s12, [r7, #8]
 800bda0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800bda4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bda8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bdac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bdb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdb8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdbc:	e036      	b.n	800be2c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bdbe:	4b50      	ldr	r3, [pc, #320]	@ (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bdc0:	689b      	ldr	r3, [r3, #8]
 800bdc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d005      	beq.n	800bdd6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800bdca:	4b4d      	ldr	r3, [pc, #308]	@ (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	0f1b      	lsrs	r3, r3, #28
 800bdd0:	f003 030f 	and.w	r3, r3, #15
 800bdd4:	e006      	b.n	800bde4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800bdd6:	4b4a      	ldr	r3, [pc, #296]	@ (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bdd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bddc:	041b      	lsls	r3, r3, #16
 800bdde:	0f1b      	lsrs	r3, r3, #28
 800bde0:	f003 030f 	and.w	r3, r3, #15
 800bde4:	4a49      	ldr	r2, [pc, #292]	@ (800bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800bde6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdea:	ee07 3a90 	vmov	s15, r3
 800bdee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	ee07 3a90 	vmov	s15, r3
 800bdf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be00:	69bb      	ldr	r3, [r7, #24]
 800be02:	ee07 3a90 	vmov	s15, r3
 800be06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be0a:	ed97 6a02 	vldr	s12, [r7, #8]
 800be0e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800be12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800be22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be2a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800be2c:	4b34      	ldr	r3, [pc, #208]	@ (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800be2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be34:	2b00      	cmp	r3, #0
 800be36:	d017      	beq.n	800be68 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800be38:	4b31      	ldr	r3, [pc, #196]	@ (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800be3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be3c:	0a5b      	lsrs	r3, r3, #9
 800be3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be42:	ee07 3a90 	vmov	s15, r3
 800be46:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800be4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be4e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800be52:	edd7 6a07 	vldr	s13, [r7, #28]
 800be56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be5e:	ee17 2a90 	vmov	r2, s15
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	601a      	str	r2, [r3, #0]
 800be66:	e002      	b.n	800be6e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800be6e:	4b24      	ldr	r3, [pc, #144]	@ (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800be70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be76:	2b00      	cmp	r3, #0
 800be78:	d017      	beq.n	800beaa <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800be7a:	4b21      	ldr	r3, [pc, #132]	@ (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800be7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be7e:	0c1b      	lsrs	r3, r3, #16
 800be80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be84:	ee07 3a90 	vmov	s15, r3
 800be88:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800be8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be90:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800be94:	edd7 6a07 	vldr	s13, [r7, #28]
 800be98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bea0:	ee17 2a90 	vmov	r2, s15
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	605a      	str	r2, [r3, #4]
 800bea8:	e002      	b.n	800beb0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800beb0:	4b13      	ldr	r3, [pc, #76]	@ (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800beb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d017      	beq.n	800beec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bebc:	4b10      	ldr	r3, [pc, #64]	@ (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bec0:	0e1b      	lsrs	r3, r3, #24
 800bec2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bec6:	ee07 3a90 	vmov	s15, r3
 800beca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800bece:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bed2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bed6:	edd7 6a07 	vldr	s13, [r7, #28]
 800beda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bee2:	ee17 2a90 	vmov	r2, s15
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800beea:	e002      	b.n	800bef2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	609a      	str	r2, [r3, #8]
}
 800bef2:	bf00      	nop
 800bef4:	3724      	adds	r7, #36	@ 0x24
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	46020c00 	.word	0x46020c00
 800bf04:	4b742400 	.word	0x4b742400
 800bf08:	46000000 	.word	0x46000000
 800bf0c:	080115e4 	.word	0x080115e4

0800bf10 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b08e      	sub	sp, #56	@ 0x38
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800bf1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf1e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800bf22:	430b      	orrs	r3, r1
 800bf24:	d145      	bne.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800bf26:	4ba7      	ldr	r3, [pc, #668]	@ (800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bf28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf30:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800bf32:	4ba4      	ldr	r3, [pc, #656]	@ (800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bf34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf38:	f003 0302 	and.w	r3, r3, #2
 800bf3c:	2b02      	cmp	r3, #2
 800bf3e:	d108      	bne.n	800bf52 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800bf40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf46:	d104      	bne.n	800bf52 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800bf48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf4e:	f001 bb5a 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800bf52:	4b9c      	ldr	r3, [pc, #624]	@ (800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bf54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf60:	d114      	bne.n	800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800bf62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf68:	d110      	bne.n	800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf6a:	4b96      	ldr	r3, [pc, #600]	@ (800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bf6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf78:	d103      	bne.n	800bf82 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800bf7a:	23fa      	movs	r3, #250	@ 0xfa
 800bf7c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf7e:	f001 bb42 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800bf82:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bf86:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf88:	f001 bb3d 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800bf8c:	4b8d      	ldr	r3, [pc, #564]	@ (800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf98:	d107      	bne.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bfa0:	d103      	bne.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800bfa2:	4b89      	ldr	r3, [pc, #548]	@ (800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800bfa4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfa6:	f001 bb2e 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfae:	f001 bb2a 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bfb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfb6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800bfba:	430b      	orrs	r3, r1
 800bfbc:	d151      	bne.n	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800bfbe:	4b81      	ldr	r3, [pc, #516]	@ (800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bfc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bfc4:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800bfc8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800bfca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfcc:	2b80      	cmp	r3, #128	@ 0x80
 800bfce:	d035      	beq.n	800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800bfd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd2:	2b80      	cmp	r3, #128	@ 0x80
 800bfd4:	d841      	bhi.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800bfd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd8:	2b60      	cmp	r3, #96	@ 0x60
 800bfda:	d02a      	beq.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800bfdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfde:	2b60      	cmp	r3, #96	@ 0x60
 800bfe0:	d83b      	bhi.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800bfe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfe4:	2b40      	cmp	r3, #64	@ 0x40
 800bfe6:	d009      	beq.n	800bffc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bfe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfea:	2b40      	cmp	r3, #64	@ 0x40
 800bfec:	d835      	bhi.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800bfee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00c      	beq.n	800c00e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800bff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bff6:	2b20      	cmp	r3, #32
 800bff8:	d012      	beq.n	800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800bffa:	e02e      	b.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bffc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c000:	4618      	mov	r0, r3
 800c002:	f7ff fb77 	bl	800b6f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c008:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c00a:	f001 bafc 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c00e:	f107 0318 	add.w	r3, r7, #24
 800c012:	4618      	mov	r0, r3
 800c014:	f7ff fcc8 	bl	800b9a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c01c:	f001 baf3 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c020:	f107 030c 	add.w	r3, r7, #12
 800c024:	4618      	mov	r0, r3
 800c026:	f7ff fe19 	bl	800bc5c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c02e:	f001 baea 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c032:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c036:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c038:	f001 bae5 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c03c:	4b61      	ldr	r3, [pc, #388]	@ (800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c044:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c048:	d103      	bne.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800c04a:	4b60      	ldr	r3, [pc, #384]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c04c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c04e:	f001 bada 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c052:	2300      	movs	r3, #0
 800c054:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c056:	f001 bad6 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800c05a:	2300      	movs	r3, #0
 800c05c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c05e:	f001 bad2 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c062:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c066:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c06a:	430b      	orrs	r3, r1
 800c06c:	d158      	bne.n	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800c06e:	4b55      	ldr	r3, [pc, #340]	@ (800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c070:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c074:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c078:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c07c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c080:	d03b      	beq.n	800c0fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800c082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c084:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c088:	d846      	bhi.n	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c08c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c090:	d02e      	beq.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800c092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c094:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c098:	d83e      	bhi.n	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c09c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0a0:	d00b      	beq.n	800c0ba <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800c0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0a8:	d836      	bhi.n	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00d      	beq.n	800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800c0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c0b6:	d012      	beq.n	800c0de <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800c0b8:	e02e      	b.n	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7ff fb18 	bl	800b6f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c0c8:	f001 ba9d 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0cc:	f107 0318 	add.w	r3, r7, #24
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7ff fc69 	bl	800b9a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c0d6:	69bb      	ldr	r3, [r7, #24]
 800c0d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c0da:	f001 ba94 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0de:	f107 030c 	add.w	r3, r7, #12
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7ff fdba 	bl	800bc5c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c0ec:	f001 ba8b 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c0f0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c0f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c0f6:	f001 ba86 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c0fa:	4b32      	ldr	r3, [pc, #200]	@ (800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c106:	d103      	bne.n	800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800c108:	4b30      	ldr	r3, [pc, #192]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c10a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c10c:	f001 ba7b 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c110:	2300      	movs	r3, #0
 800c112:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c114:	f001 ba77 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c118:	2300      	movs	r3, #0
 800c11a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c11c:	f001 ba73 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800c120:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c124:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c128:	430b      	orrs	r3, r1
 800c12a:	d126      	bne.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800c12c:	4b25      	ldr	r3, [pc, #148]	@ (800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c12e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c132:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c136:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800c138:	4b22      	ldr	r3, [pc, #136]	@ (800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c144:	d106      	bne.n	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800c146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d103      	bne.n	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800c14c:	4b1f      	ldr	r3, [pc, #124]	@ (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c14e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c150:	f001 ba59 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800c154:	4b1b      	ldr	r3, [pc, #108]	@ (800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c15c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c160:	d107      	bne.n	800c172 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800c162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c168:	d103      	bne.n	800c172 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800c16a:	4b19      	ldr	r3, [pc, #100]	@ (800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c16c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c16e:	f001 ba4a 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800c172:	2300      	movs	r3, #0
 800c174:	637b      	str	r3, [r7, #52]	@ 0x34
 800c176:	f001 ba46 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800c17a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c17e:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800c182:	430b      	orrs	r3, r1
 800c184:	d16e      	bne.n	800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c186:	4b0f      	ldr	r3, [pc, #60]	@ (800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c18c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c190:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c194:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c198:	d03d      	beq.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c19c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c1a0:	d85c      	bhi.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c1a8:	d014      	beq.n	800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800c1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c1b0:	d854      	bhi.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d01f      	beq.n	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800c1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c1be:	d012      	beq.n	800c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800c1c0:	e04c      	b.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c1c2:	bf00      	nop
 800c1c4:	46020c00 	.word	0x46020c00
 800c1c8:	0007a120 	.word	0x0007a120
 800c1cc:	00f42400 	.word	0x00f42400
 800c1d0:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7ff fa8b 	bl	800b6f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c1e2:	f001 ba10 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1e6:	f107 0318 	add.w	r3, r7, #24
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7ff fbdc 	bl	800b9a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c1f4:	f001 ba07 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c1f8:	4ba7      	ldr	r3, [pc, #668]	@ (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c200:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c204:	d103      	bne.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800c206:	4ba5      	ldr	r3, [pc, #660]	@ (800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c208:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c20a:	f001 b9fc 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c20e:	2300      	movs	r3, #0
 800c210:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c212:	f001 b9f8 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c216:	4ba0      	ldr	r3, [pc, #640]	@ (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f003 0320 	and.w	r3, r3, #32
 800c21e:	2b20      	cmp	r3, #32
 800c220:	d118      	bne.n	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c222:	4b9d      	ldr	r3, [pc, #628]	@ (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c224:	689b      	ldr	r3, [r3, #8]
 800c226:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d005      	beq.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c22e:	4b9a      	ldr	r3, [pc, #616]	@ (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	0e1b      	lsrs	r3, r3, #24
 800c234:	f003 030f 	and.w	r3, r3, #15
 800c238:	e006      	b.n	800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800c23a:	4b97      	ldr	r3, [pc, #604]	@ (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c23c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c240:	041b      	lsls	r3, r3, #16
 800c242:	0e1b      	lsrs	r3, r3, #24
 800c244:	f003 030f 	and.w	r3, r3, #15
 800c248:	4a95      	ldr	r2, [pc, #596]	@ (800c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c24a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c24e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c250:	f001 b9d9 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c254:	2300      	movs	r3, #0
 800c256:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c258:	f001 b9d5 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c25c:	2300      	movs	r3, #0
 800c25e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c260:	f001 b9d1 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c264:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c268:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800c26c:	430b      	orrs	r3, r1
 800c26e:	d17f      	bne.n	800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c270:	4b89      	ldr	r3, [pc, #548]	@ (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c272:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c276:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c27a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800c27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d165      	bne.n	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c282:	4b85      	ldr	r3, [pc, #532]	@ (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c288:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c28c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800c28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c290:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c294:	d034      	beq.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800c296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c298:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c29c:	d853      	bhi.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c2a4:	d00b      	beq.n	800c2be <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800c2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c2ac:	d84b      	bhi.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d016      	beq.n	800c2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800c2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c2ba:	d009      	beq.n	800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800c2bc:	e043      	b.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7ff fa16 	bl	800b6f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ca:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c2cc:	f001 b99b 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2d0:	f107 0318 	add.w	r3, r7, #24
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7ff fb67 	bl	800b9a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c2de:	f001 b992 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c2e2:	4b6d      	ldr	r3, [pc, #436]	@ (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c2ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c2ee:	d103      	bne.n	800c2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800c2f0:	4b6a      	ldr	r3, [pc, #424]	@ (800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c2f2:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c2f4:	f001 b987 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c2fc:	f001 b983 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c300:	4b65      	ldr	r3, [pc, #404]	@ (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 0320 	and.w	r3, r3, #32
 800c308:	2b20      	cmp	r3, #32
 800c30a:	d118      	bne.n	800c33e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c30c:	4b62      	ldr	r3, [pc, #392]	@ (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c314:	2b00      	cmp	r3, #0
 800c316:	d005      	beq.n	800c324 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800c318:	4b5f      	ldr	r3, [pc, #380]	@ (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c31a:	689b      	ldr	r3, [r3, #8]
 800c31c:	0e1b      	lsrs	r3, r3, #24
 800c31e:	f003 030f 	and.w	r3, r3, #15
 800c322:	e006      	b.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c324:	4b5c      	ldr	r3, [pc, #368]	@ (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c326:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c32a:	041b      	lsls	r3, r3, #16
 800c32c:	0e1b      	lsrs	r3, r3, #24
 800c32e:	f003 030f 	and.w	r3, r3, #15
 800c332:	4a5b      	ldr	r2, [pc, #364]	@ (800c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c338:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c33a:	f001 b964 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c33e:	2300      	movs	r3, #0
 800c340:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c342:	f001 b960 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800c346:	2300      	movs	r3, #0
 800c348:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c34a:	f001 b95c 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800c34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c350:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c354:	d108      	bne.n	800c368 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c356:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7ff f9ca 	bl	800b6f4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c362:	637b      	str	r3, [r7, #52]	@ 0x34
 800c364:	f001 b94f 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800c368:	2300      	movs	r3, #0
 800c36a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c36c:	f001 b94b 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800c370:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c374:	1e51      	subs	r1, r2, #1
 800c376:	430b      	orrs	r3, r1
 800c378:	d136      	bne.n	800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c37a:	4b47      	ldr	r3, [pc, #284]	@ (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c37c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c380:	f003 0303 	and.w	r3, r3, #3
 800c384:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800c386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d104      	bne.n	800c396 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800c38c:	f7fe f9cc 	bl	800a728 <HAL_RCC_GetPCLK2Freq>
 800c390:	6378      	str	r0, [r7, #52]	@ 0x34
 800c392:	f001 b938 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800c396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d104      	bne.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c39c:	f7fe f894 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800c3a0:	6378      	str	r0, [r7, #52]	@ 0x34
 800c3a2:	f001 b930 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800c3a6:	4b3c      	ldr	r3, [pc, #240]	@ (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3b2:	d106      	bne.n	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800c3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	d103      	bne.n	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800c3ba:	4b3a      	ldr	r3, [pc, #232]	@ (800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c3bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3be:	f001 b922 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800c3c2:	4b35      	ldr	r3, [pc, #212]	@ (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c3c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c3c8:	f003 0302 	and.w	r3, r3, #2
 800c3cc:	2b02      	cmp	r3, #2
 800c3ce:	d107      	bne.n	800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d2:	2b03      	cmp	r3, #3
 800c3d4:	d104      	bne.n	800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800c3d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c3da:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3dc:	f001 b913 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3e4:	f001 b90f 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800c3e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3ec:	1e91      	subs	r1, r2, #2
 800c3ee:	430b      	orrs	r3, r1
 800c3f0:	d136      	bne.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c3f2:	4b29      	ldr	r3, [pc, #164]	@ (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c3f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c3f8:	f003 030c 	and.w	r3, r3, #12
 800c3fc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800c3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c400:	2b00      	cmp	r3, #0
 800c402:	d104      	bne.n	800c40e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c404:	f7fe f97c 	bl	800a700 <HAL_RCC_GetPCLK1Freq>
 800c408:	6378      	str	r0, [r7, #52]	@ 0x34
 800c40a:	f001 b8fc 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800c40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c410:	2b04      	cmp	r3, #4
 800c412:	d104      	bne.n	800c41e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c414:	f7fe f858 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800c418:	6378      	str	r0, [r7, #52]	@ 0x34
 800c41a:	f001 b8f4 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800c41e:	4b1e      	ldr	r3, [pc, #120]	@ (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c42a:	d106      	bne.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c42e:	2b08      	cmp	r3, #8
 800c430:	d103      	bne.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800c432:	4b1c      	ldr	r3, [pc, #112]	@ (800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c434:	637b      	str	r3, [r7, #52]	@ 0x34
 800c436:	f001 b8e6 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800c43a:	4b17      	ldr	r3, [pc, #92]	@ (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c43c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c440:	f003 0302 	and.w	r3, r3, #2
 800c444:	2b02      	cmp	r3, #2
 800c446:	d107      	bne.n	800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800c448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c44a:	2b0c      	cmp	r3, #12
 800c44c:	d104      	bne.n	800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800c44e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c452:	637b      	str	r3, [r7, #52]	@ 0x34
 800c454:	f001 b8d7 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800c458:	2300      	movs	r3, #0
 800c45a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c45c:	f001 b8d3 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800c460:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c464:	1f11      	subs	r1, r2, #4
 800c466:	430b      	orrs	r3, r1
 800c468:	d13f      	bne.n	800c4ea <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800c46a:	4b0b      	ldr	r3, [pc, #44]	@ (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c46c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c470:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c474:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800c476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d104      	bne.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c47c:	f7fe f940 	bl	800a700 <HAL_RCC_GetPCLK1Freq>
 800c480:	6378      	str	r0, [r7, #52]	@ 0x34
 800c482:	f001 b8c0 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800c486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c488:	2b10      	cmp	r3, #16
 800c48a:	d10d      	bne.n	800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c48c:	f7fe f81c 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800c490:	6378      	str	r0, [r7, #52]	@ 0x34
 800c492:	f001 b8b8 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c496:	bf00      	nop
 800c498:	46020c00 	.word	0x46020c00
 800c49c:	02dc6c00 	.word	0x02dc6c00
 800c4a0:	080115e4 	.word	0x080115e4
 800c4a4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800c4a8:	4ba8      	ldr	r3, [pc, #672]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c4b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c4b4:	d106      	bne.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800c4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b8:	2b20      	cmp	r3, #32
 800c4ba:	d103      	bne.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800c4bc:	4ba4      	ldr	r3, [pc, #656]	@ (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c4be:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4c0:	f001 b8a1 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800c4c4:	4ba1      	ldr	r3, [pc, #644]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c4c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c4ca:	f003 0302 	and.w	r3, r3, #2
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d107      	bne.n	800c4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d4:	2b30      	cmp	r3, #48	@ 0x30
 800c4d6:	d104      	bne.n	800c4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800c4d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c4dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4de:	f001 b892 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4e6:	f001 b88e 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800c4ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4ee:	f1a2 0108 	sub.w	r1, r2, #8
 800c4f2:	430b      	orrs	r3, r1
 800c4f4:	d136      	bne.n	800c564 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800c4f6:	4b95      	ldr	r3, [pc, #596]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c4f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c4fc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c500:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800c502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c504:	2b00      	cmp	r3, #0
 800c506:	d104      	bne.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c508:	f7fe f8fa 	bl	800a700 <HAL_RCC_GetPCLK1Freq>
 800c50c:	6378      	str	r0, [r7, #52]	@ 0x34
 800c50e:	f001 b87a 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800c512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c514:	2b40      	cmp	r3, #64	@ 0x40
 800c516:	d104      	bne.n	800c522 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c518:	f7fd ffd6 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800c51c:	6378      	str	r0, [r7, #52]	@ 0x34
 800c51e:	f001 b872 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800c522:	4b8a      	ldr	r3, [pc, #552]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c52a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c52e:	d106      	bne.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800c530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c532:	2b80      	cmp	r3, #128	@ 0x80
 800c534:	d103      	bne.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800c536:	4b86      	ldr	r3, [pc, #536]	@ (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c538:	637b      	str	r3, [r7, #52]	@ 0x34
 800c53a:	f001 b864 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800c53e:	4b83      	ldr	r3, [pc, #524]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c544:	f003 0302 	and.w	r3, r3, #2
 800c548:	2b02      	cmp	r3, #2
 800c54a:	d107      	bne.n	800c55c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800c54c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c54e:	2bc0      	cmp	r3, #192	@ 0xc0
 800c550:	d104      	bne.n	800c55c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800c552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c556:	637b      	str	r3, [r7, #52]	@ 0x34
 800c558:	f001 b855 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800c55c:	2300      	movs	r3, #0
 800c55e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c560:	f001 b851 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800c564:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c568:	f1a2 0110 	sub.w	r1, r2, #16
 800c56c:	430b      	orrs	r3, r1
 800c56e:	d139      	bne.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800c570:	4b76      	ldr	r3, [pc, #472]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c57a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800c57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d104      	bne.n	800c58c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c582:	f7fe f8bd 	bl	800a700 <HAL_RCC_GetPCLK1Freq>
 800c586:	6378      	str	r0, [r7, #52]	@ 0x34
 800c588:	f001 b83d 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800c58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c58e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c592:	d104      	bne.n	800c59e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c594:	f7fd ff98 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800c598:	6378      	str	r0, [r7, #52]	@ 0x34
 800c59a:	f001 b834 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800c59e:	4b6b      	ldr	r3, [pc, #428]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c5a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5aa:	d107      	bne.n	800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800c5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5b2:	d103      	bne.n	800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800c5b4:	4b66      	ldr	r3, [pc, #408]	@ (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c5b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5b8:	f001 b825 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800c5bc:	4b63      	ldr	r3, [pc, #396]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c5be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c5c2:	f003 0302 	and.w	r3, r3, #2
 800c5c6:	2b02      	cmp	r3, #2
 800c5c8:	d108      	bne.n	800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800c5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5d0:	d104      	bne.n	800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800c5d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5d8:	f001 b815 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5e0:	f001 b811 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800c5e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5e8:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800c5ec:	430b      	orrs	r3, r1
 800c5ee:	d139      	bne.n	800c664 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800c5f0:	4b56      	ldr	r3, [pc, #344]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c5f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c5f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c5fa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800c5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d104      	bne.n	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c602:	f7fe f87d 	bl	800a700 <HAL_RCC_GetPCLK1Freq>
 800c606:	6378      	str	r0, [r7, #52]	@ 0x34
 800c608:	f000 bffd 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800c60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c612:	d104      	bne.n	800c61e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c614:	f7fd ff58 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800c618:	6378      	str	r0, [r7, #52]	@ 0x34
 800c61a:	f000 bff4 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800c61e:	4b4b      	ldr	r3, [pc, #300]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c62a:	d107      	bne.n	800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800c62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c62e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c632:	d103      	bne.n	800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800c634:	4b46      	ldr	r3, [pc, #280]	@ (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c636:	637b      	str	r3, [r7, #52]	@ 0x34
 800c638:	f000 bfe5 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800c63c:	4b43      	ldr	r3, [pc, #268]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c63e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c642:	f003 0302 	and.w	r3, r3, #2
 800c646:	2b02      	cmp	r3, #2
 800c648:	d108      	bne.n	800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800c64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c64c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c650:	d104      	bne.n	800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800c652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c656:	637b      	str	r3, [r7, #52]	@ 0x34
 800c658:	f000 bfd5 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800c65c:	2300      	movs	r3, #0
 800c65e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c660:	f000 bfd1 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800c664:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c668:	f1a2 0120 	sub.w	r1, r2, #32
 800c66c:	430b      	orrs	r3, r1
 800c66e:	d158      	bne.n	800c722 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800c670:	4b36      	ldr	r3, [pc, #216]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c672:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c676:	f003 0307 	and.w	r3, r3, #7
 800c67a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800c67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d104      	bne.n	800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800c682:	f7fe f865 	bl	800a750 <HAL_RCC_GetPCLK3Freq>
 800c686:	6378      	str	r0, [r7, #52]	@ 0x34
 800c688:	f000 bfbd 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800c68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d104      	bne.n	800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c692:	f7fd ff19 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800c696:	6378      	str	r0, [r7, #52]	@ 0x34
 800c698:	f000 bfb5 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800c69c:	4b2b      	ldr	r3, [pc, #172]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c6a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6a8:	d106      	bne.n	800c6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	d103      	bne.n	800c6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800c6b0:	4b27      	ldr	r3, [pc, #156]	@ (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c6b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6b4:	f000 bfa7 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800c6b8:	4b24      	ldr	r3, [pc, #144]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c6ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c6be:	f003 0302 	and.w	r3, r3, #2
 800c6c2:	2b02      	cmp	r3, #2
 800c6c4:	d107      	bne.n	800c6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800c6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c8:	2b03      	cmp	r3, #3
 800c6ca:	d104      	bne.n	800c6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800c6cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6d2:	f000 bf98 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800c6d6:	4b1d      	ldr	r3, [pc, #116]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f003 0320 	and.w	r3, r3, #32
 800c6de:	2b20      	cmp	r3, #32
 800c6e0:	d11b      	bne.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e4:	2b04      	cmp	r3, #4
 800c6e6:	d118      	bne.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c6e8:	4b18      	ldr	r3, [pc, #96]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d005      	beq.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800c6f4:	4b15      	ldr	r3, [pc, #84]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	0e1b      	lsrs	r3, r3, #24
 800c6fa:	f003 030f 	and.w	r3, r3, #15
 800c6fe:	e006      	b.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800c700:	4b12      	ldr	r3, [pc, #72]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c702:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c706:	041b      	lsls	r3, r3, #16
 800c708:	0e1b      	lsrs	r3, r3, #24
 800c70a:	f003 030f 	and.w	r3, r3, #15
 800c70e:	4a11      	ldr	r2, [pc, #68]	@ (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800c710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c714:	637b      	str	r3, [r7, #52]	@ 0x34
 800c716:	f000 bf76 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800c71a:	2300      	movs	r3, #0
 800c71c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c71e:	f000 bf72 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800c722:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c726:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800c72a:	430b      	orrs	r3, r1
 800c72c:	d172      	bne.n	800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800c72e:	4b07      	ldr	r3, [pc, #28]	@ (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c730:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c734:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c738:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800c73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c73c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c740:	d10a      	bne.n	800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c742:	f7fd fec1 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800c746:	6378      	str	r0, [r7, #52]	@ 0x34
 800c748:	f000 bf5d 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c74c:	46020c00 	.word	0x46020c00
 800c750:	00f42400 	.word	0x00f42400
 800c754:	080115e4 	.word	0x080115e4
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800c758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c75a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c75e:	d108      	bne.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c760:	f107 0318 	add.w	r3, r7, #24
 800c764:	4618      	mov	r0, r3
 800c766:	f7ff f91f 	bl	800b9a8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800c76a:	6a3b      	ldr	r3, [r7, #32]
 800c76c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c76e:	f000 bf4a 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800c772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c774:	2b00      	cmp	r3, #0
 800c776:	d104      	bne.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800c778:	f7fd ffa8 	bl	800a6cc <HAL_RCC_GetHCLKFreq>
 800c77c:	6378      	str	r0, [r7, #52]	@ 0x34
 800c77e:	f000 bf42 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800c782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c784:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800c788:	d122      	bne.n	800c7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c78a:	4bb0      	ldr	r3, [pc, #704]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f003 0320 	and.w	r3, r3, #32
 800c792:	2b20      	cmp	r3, #32
 800c794:	d118      	bne.n	800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c796:	4bad      	ldr	r3, [pc, #692]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d005      	beq.n	800c7ae <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800c7a2:	4baa      	ldr	r3, [pc, #680]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	0e1b      	lsrs	r3, r3, #24
 800c7a8:	f003 030f 	and.w	r3, r3, #15
 800c7ac:	e006      	b.n	800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800c7ae:	4ba7      	ldr	r3, [pc, #668]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c7b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c7b4:	041b      	lsls	r3, r3, #16
 800c7b6:	0e1b      	lsrs	r3, r3, #24
 800c7b8:	f003 030f 	and.w	r3, r3, #15
 800c7bc:	4aa4      	ldr	r2, [pc, #656]	@ (800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800c7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7c4:	f000 bf1f 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7cc:	f000 bf1b 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800c7d0:	4b9e      	ldr	r3, [pc, #632]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c7d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c7dc:	d107      	bne.n	800c7ee <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800c7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c7e4:	d103      	bne.n	800c7ee <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800c7e6:	4b9b      	ldr	r3, [pc, #620]	@ (800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800c7e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7ea:	f000 bf0c 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800c7ee:	4b97      	ldr	r3, [pc, #604]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c7f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c7fa:	d107      	bne.n	800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800c7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c802:	d103      	bne.n	800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800c804:	4b93      	ldr	r3, [pc, #588]	@ (800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800c806:	637b      	str	r3, [r7, #52]	@ 0x34
 800c808:	f000 befd 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800c80c:	2300      	movs	r3, #0
 800c80e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c810:	f000 bef9 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800c814:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c818:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800c81c:	430b      	orrs	r3, r1
 800c81e:	d158      	bne.n	800c8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800c820:	4b8a      	ldr	r3, [pc, #552]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c822:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c826:	f003 0307 	and.w	r3, r3, #7
 800c82a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c82e:	2b04      	cmp	r3, #4
 800c830:	d84b      	bhi.n	800c8ca <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800c832:	a201      	add	r2, pc, #4	@ (adr r2, 800c838 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800c834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c838:	0800c871 	.word	0x0800c871
 800c83c:	0800c84d 	.word	0x0800c84d
 800c840:	0800c85f 	.word	0x0800c85f
 800c844:	0800c87b 	.word	0x0800c87b
 800c848:	0800c885 	.word	0x0800c885
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c84c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c850:	4618      	mov	r0, r3
 800c852:	f7fe ff4f 	bl	800b6f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c858:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c85a:	f000 bed4 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c85e:	f107 030c 	add.w	r3, r7, #12
 800c862:	4618      	mov	r0, r3
 800c864:	f7ff f9fa 	bl	800bc5c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c86c:	f000 becb 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800c870:	f7fd ff2c 	bl	800a6cc <HAL_RCC_GetHCLKFreq>
 800c874:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c876:	f000 bec6 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c87a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c87e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c880:	f000 bec1 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c884:	4b71      	ldr	r3, [pc, #452]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f003 0320 	and.w	r3, r3, #32
 800c88c:	2b20      	cmp	r3, #32
 800c88e:	d118      	bne.n	800c8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c890:	4b6e      	ldr	r3, [pc, #440]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d005      	beq.n	800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800c89c:	4b6b      	ldr	r3, [pc, #428]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	0e1b      	lsrs	r3, r3, #24
 800c8a2:	f003 030f 	and.w	r3, r3, #15
 800c8a6:	e006      	b.n	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800c8a8:	4b68      	ldr	r3, [pc, #416]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c8aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c8ae:	041b      	lsls	r3, r3, #16
 800c8b0:	0e1b      	lsrs	r3, r3, #24
 800c8b2:	f003 030f 	and.w	r3, r3, #15
 800c8b6:	4a66      	ldr	r2, [pc, #408]	@ (800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800c8b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8bc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c8be:	f000 bea2 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8c6:	f000 be9e 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8ce:	f000 be9a 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800c8d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8d6:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800c8da:	430b      	orrs	r3, r1
 800c8dc:	d167      	bne.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800c8de:	4b5b      	ldr	r3, [pc, #364]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c8e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c8e4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800c8e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c8f0:	d036      	beq.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800c8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c8f8:	d855      	bhi.n	800c9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800c8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c900:	d029      	beq.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800c902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c904:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c908:	d84d      	bhi.n	800c9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800c90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c90c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c910:	d013      	beq.n	800c93a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800c912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c918:	d845      	bhi.n	800c9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800c91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d015      	beq.n	800c94c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800c920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c926:	d13e      	bne.n	800c9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c928:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7fe fee1 	bl	800b6f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c934:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c936:	f000 be66 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c93a:	f107 030c 	add.w	r3, r7, #12
 800c93e:	4618      	mov	r0, r3
 800c940:	f7ff f98c 	bl	800bc5c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c948:	f000 be5d 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800c94c:	f7fd febe 	bl	800a6cc <HAL_RCC_GetHCLKFreq>
 800c950:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c952:	f000 be58 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c956:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c95a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c95c:	f000 be53 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c960:	4b3a      	ldr	r3, [pc, #232]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f003 0320 	and.w	r3, r3, #32
 800c968:	2b20      	cmp	r3, #32
 800c96a:	d118      	bne.n	800c99e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c96c:	4b37      	ldr	r3, [pc, #220]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c96e:	689b      	ldr	r3, [r3, #8]
 800c970:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c974:	2b00      	cmp	r3, #0
 800c976:	d005      	beq.n	800c984 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800c978:	4b34      	ldr	r3, [pc, #208]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c97a:	689b      	ldr	r3, [r3, #8]
 800c97c:	0e1b      	lsrs	r3, r3, #24
 800c97e:	f003 030f 	and.w	r3, r3, #15
 800c982:	e006      	b.n	800c992 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c984:	4b31      	ldr	r3, [pc, #196]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c986:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c98a:	041b      	lsls	r3, r3, #16
 800c98c:	0e1b      	lsrs	r3, r3, #24
 800c98e:	f003 030f 	and.w	r3, r3, #15
 800c992:	4a2f      	ldr	r2, [pc, #188]	@ (800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800c994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c998:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c99a:	f000 be34 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c9a2:	f000 be30 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c9aa:	f000 be2c 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800c9ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9b2:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800c9b6:	430b      	orrs	r3, r1
 800c9b8:	d152      	bne.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800c9ba:	4b24      	ldr	r3, [pc, #144]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c9bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c9c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c9c4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800c9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d104      	bne.n	800c9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c9cc:	f7fd fe98 	bl	800a700 <HAL_RCC_GetPCLK1Freq>
 800c9d0:	6378      	str	r0, [r7, #52]	@ 0x34
 800c9d2:	f000 be18 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800c9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9dc:	d104      	bne.n	800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c9de:	f7fd fd73 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800c9e2:	6378      	str	r0, [r7, #52]	@ 0x34
 800c9e4:	f000 be0f 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800c9e8:	4b18      	ldr	r3, [pc, #96]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9f4:	d107      	bne.n	800ca06 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800c9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c9fc:	d103      	bne.n	800ca06 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800c9fe:	4b15      	ldr	r3, [pc, #84]	@ (800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ca00:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca02:	f000 be00 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800ca06:	4b11      	ldr	r3, [pc, #68]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f003 0320 	and.w	r3, r3, #32
 800ca0e:	2b20      	cmp	r3, #32
 800ca10:	d122      	bne.n	800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800ca12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ca18:	d11e      	bne.n	800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ca1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d005      	beq.n	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800ca26:	4b09      	ldr	r3, [pc, #36]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	0e1b      	lsrs	r3, r3, #24
 800ca2c:	f003 030f 	and.w	r3, r3, #15
 800ca30:	e006      	b.n	800ca40 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800ca32:	4b06      	ldr	r3, [pc, #24]	@ (800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ca34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ca38:	041b      	lsls	r3, r3, #16
 800ca3a:	0e1b      	lsrs	r3, r3, #24
 800ca3c:	f003 030f 	and.w	r3, r3, #15
 800ca40:	4a03      	ldr	r2, [pc, #12]	@ (800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ca42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca46:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca48:	f000 bddd 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ca4c:	46020c00 	.word	0x46020c00
 800ca50:	080115e4 	.word	0x080115e4
 800ca54:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca5c:	f000 bdd3 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800ca60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca64:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800ca68:	430b      	orrs	r3, r1
 800ca6a:	d14c      	bne.n	800cb06 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800ca6c:	4ba8      	ldr	r3, [pc, #672]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ca6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca72:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ca76:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800ca78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d104      	bne.n	800ca88 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ca7e:	f7fd fe3f 	bl	800a700 <HAL_RCC_GetPCLK1Freq>
 800ca82:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca84:	f000 bdbf 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800ca88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca8e:	d104      	bne.n	800ca9a <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ca90:	f7fd fd1a 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800ca94:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca96:	f000 bdb6 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800ca9a:	4b9d      	ldr	r3, [pc, #628]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800caa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800caa6:	d107      	bne.n	800cab8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800caa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800caae:	d103      	bne.n	800cab8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800cab0:	4b98      	ldr	r3, [pc, #608]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800cab2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cab4:	f000 bda7 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800cab8:	4b95      	ldr	r3, [pc, #596]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f003 0320 	and.w	r3, r3, #32
 800cac0:	2b20      	cmp	r3, #32
 800cac2:	d11c      	bne.n	800cafe <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800cac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cac6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800caca:	d118      	bne.n	800cafe <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cacc:	4b90      	ldr	r3, [pc, #576]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cace:	689b      	ldr	r3, [r3, #8]
 800cad0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d005      	beq.n	800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800cad8:	4b8d      	ldr	r3, [pc, #564]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cada:	689b      	ldr	r3, [r3, #8]
 800cadc:	0e1b      	lsrs	r3, r3, #24
 800cade:	f003 030f 	and.w	r3, r3, #15
 800cae2:	e006      	b.n	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800cae4:	4b8a      	ldr	r3, [pc, #552]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cae6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800caea:	041b      	lsls	r3, r3, #16
 800caec:	0e1b      	lsrs	r3, r3, #24
 800caee:	f003 030f 	and.w	r3, r3, #15
 800caf2:	4a89      	ldr	r2, [pc, #548]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800caf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caf8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cafa:	f000 bd84 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800cafe:	2300      	movs	r3, #0
 800cb00:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb02:	f000 bd80 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800cb06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb0a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800cb0e:	430b      	orrs	r3, r1
 800cb10:	d158      	bne.n	800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800cb12:	4b7f      	ldr	r3, [pc, #508]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cb18:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cb1c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800cb1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb20:	2bc0      	cmp	r3, #192	@ 0xc0
 800cb22:	d028      	beq.n	800cb76 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800cb24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb26:	2bc0      	cmp	r3, #192	@ 0xc0
 800cb28:	d848      	bhi.n	800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb2c:	2b80      	cmp	r3, #128	@ 0x80
 800cb2e:	d00e      	beq.n	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800cb30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb32:	2b80      	cmp	r3, #128	@ 0x80
 800cb34:	d842      	bhi.n	800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800cb36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d003      	beq.n	800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800cb3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb3e:	2b40      	cmp	r3, #64	@ 0x40
 800cb40:	d014      	beq.n	800cb6c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800cb42:	e03b      	b.n	800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800cb44:	f7fd fe04 	bl	800a750 <HAL_RCC_GetPCLK3Freq>
 800cb48:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cb4a:	f000 bd5c 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb4e:	4b70      	ldr	r3, [pc, #448]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb5a:	d103      	bne.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800cb5c:	4b6d      	ldr	r3, [pc, #436]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800cb5e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cb60:	f000 bd51 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cb64:	2300      	movs	r3, #0
 800cb66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cb68:	f000 bd4d 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800cb6c:	f7fd fcac 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800cb70:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cb72:	f000 bd48 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cb76:	4b66      	ldr	r3, [pc, #408]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f003 0320 	and.w	r3, r3, #32
 800cb7e:	2b20      	cmp	r3, #32
 800cb80:	d118      	bne.n	800cbb4 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cb82:	4b63      	ldr	r3, [pc, #396]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb84:	689b      	ldr	r3, [r3, #8]
 800cb86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d005      	beq.n	800cb9a <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800cb8e:	4b60      	ldr	r3, [pc, #384]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	0e1b      	lsrs	r3, r3, #24
 800cb94:	f003 030f 	and.w	r3, r3, #15
 800cb98:	e006      	b.n	800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800cb9a:	4b5d      	ldr	r3, [pc, #372]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cba0:	041b      	lsls	r3, r3, #16
 800cba2:	0e1b      	lsrs	r3, r3, #24
 800cba4:	f003 030f 	and.w	r3, r3, #15
 800cba8:	4a5b      	ldr	r2, [pc, #364]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800cbaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cbb0:	f000 bd29 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cbb8:	f000 bd25 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cbc0:	f000 bd21 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800cbc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbc8:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800cbcc:	430b      	orrs	r3, r1
 800cbce:	d14c      	bne.n	800cc6a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800cbd0:	4b4f      	ldr	r3, [pc, #316]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cbd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cbd6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cbda:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800cbdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d104      	bne.n	800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cbe2:	f7fd fd8d 	bl	800a700 <HAL_RCC_GetPCLK1Freq>
 800cbe6:	6378      	str	r0, [r7, #52]	@ 0x34
 800cbe8:	f000 bd0d 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800cbec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cbf2:	d104      	bne.n	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cbf4:	f7fd fc68 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800cbf8:	6378      	str	r0, [r7, #52]	@ 0x34
 800cbfa:	f000 bd04 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800cbfe:	4b44      	ldr	r3, [pc, #272]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc0a:	d107      	bne.n	800cc1c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800cc0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cc12:	d103      	bne.n	800cc1c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800cc14:	4b3f      	ldr	r3, [pc, #252]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800cc16:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc18:	f000 bcf5 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800cc1c:	4b3c      	ldr	r3, [pc, #240]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f003 0320 	and.w	r3, r3, #32
 800cc24:	2b20      	cmp	r3, #32
 800cc26:	d11c      	bne.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800cc28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc2a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cc2e:	d118      	bne.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cc30:	4b37      	ldr	r3, [pc, #220]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cc32:	689b      	ldr	r3, [r3, #8]
 800cc34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d005      	beq.n	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800cc3c:	4b34      	ldr	r3, [pc, #208]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	0e1b      	lsrs	r3, r3, #24
 800cc42:	f003 030f 	and.w	r3, r3, #15
 800cc46:	e006      	b.n	800cc56 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800cc48:	4b31      	ldr	r3, [pc, #196]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cc4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cc4e:	041b      	lsls	r3, r3, #16
 800cc50:	0e1b      	lsrs	r3, r3, #24
 800cc52:	f003 030f 	and.w	r3, r3, #15
 800cc56:	4a30      	ldr	r2, [pc, #192]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800cc58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc5e:	f000 bcd2 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800cc62:	2300      	movs	r3, #0
 800cc64:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc66:	f000 bcce 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800cc6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc6e:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800cc72:	430b      	orrs	r3, r1
 800cc74:	d152      	bne.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800cc76:	4b26      	ldr	r3, [pc, #152]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cc78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cc7c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800cc80:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800cc82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d104      	bne.n	800cc92 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cc88:	f7fd fd3a 	bl	800a700 <HAL_RCC_GetPCLK1Freq>
 800cc8c:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc8e:	f000 bcba 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800cc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc98:	d104      	bne.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cc9a:	f7fd fc15 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800cc9e:	6378      	str	r0, [r7, #52]	@ 0x34
 800cca0:	f000 bcb1 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800cca4:	4b1a      	ldr	r3, [pc, #104]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ccac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ccb0:	d107      	bne.n	800ccc2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800ccb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ccb8:	d103      	bne.n	800ccc2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800ccba:	4b16      	ldr	r3, [pc, #88]	@ (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ccbc:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccbe:	f000 bca2 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800ccc2:	4b13      	ldr	r3, [pc, #76]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f003 0320 	and.w	r3, r3, #32
 800ccca:	2b20      	cmp	r3, #32
 800cccc:	d11c      	bne.n	800cd08 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800ccce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ccd4:	d118      	bne.n	800cd08 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ccd6:	4b0e      	ldr	r3, [pc, #56]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ccd8:	689b      	ldr	r3, [r3, #8]
 800ccda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d005      	beq.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800cce2:	4b0b      	ldr	r3, [pc, #44]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cce4:	689b      	ldr	r3, [r3, #8]
 800cce6:	0e1b      	lsrs	r3, r3, #24
 800cce8:	f003 030f 	and.w	r3, r3, #15
 800ccec:	e006      	b.n	800ccfc <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800ccee:	4b08      	ldr	r3, [pc, #32]	@ (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ccf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ccf4:	041b      	lsls	r3, r3, #16
 800ccf6:	0e1b      	lsrs	r3, r3, #24
 800ccf8:	f003 030f 	and.w	r3, r3, #15
 800ccfc:	4a06      	ldr	r2, [pc, #24]	@ (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800ccfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd02:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd04:	f000 bc7f 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd0c:	f000 bc7b 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cd10:	46020c00 	.word	0x46020c00
 800cd14:	00f42400 	.word	0x00f42400
 800cd18:	080115e4 	.word	0x080115e4
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800cd1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd20:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800cd24:	430b      	orrs	r3, r1
 800cd26:	d14c      	bne.n	800cdc2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800cd28:	4ba6      	ldr	r3, [pc, #664]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cd2e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800cd32:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800cd34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d104      	bne.n	800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cd3a:	f7fd fce1 	bl	800a700 <HAL_RCC_GetPCLK1Freq>
 800cd3e:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd40:	f000 bc61 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800cd44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cd4a:	d104      	bne.n	800cd56 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cd4c:	f7fd fbbc 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800cd50:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd52:	f000 bc58 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800cd56:	4b9b      	ldr	r3, [pc, #620]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd62:	d107      	bne.n	800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800cd64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd6a:	d103      	bne.n	800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800cd6c:	4b96      	ldr	r3, [pc, #600]	@ (800cfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800cd6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd70:	f000 bc49 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800cd74:	4b93      	ldr	r3, [pc, #588]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f003 0320 	and.w	r3, r3, #32
 800cd7c:	2b20      	cmp	r3, #32
 800cd7e:	d11c      	bne.n	800cdba <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800cd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd82:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800cd86:	d118      	bne.n	800cdba <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cd88:	4b8e      	ldr	r3, [pc, #568]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d005      	beq.n	800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800cd94:	4b8b      	ldr	r3, [pc, #556]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	0e1b      	lsrs	r3, r3, #24
 800cd9a:	f003 030f 	and.w	r3, r3, #15
 800cd9e:	e006      	b.n	800cdae <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800cda0:	4b88      	ldr	r3, [pc, #544]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cda2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cda6:	041b      	lsls	r3, r3, #16
 800cda8:	0e1b      	lsrs	r3, r3, #24
 800cdaa:	f003 030f 	and.w	r3, r3, #15
 800cdae:	4a87      	ldr	r2, [pc, #540]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800cdb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdb6:	f000 bc26 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdbe:	f000 bc22 	b.w	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800cdc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdc6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800cdca:	430b      	orrs	r3, r1
 800cdcc:	d164      	bne.n	800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800cdce:	4b7d      	ldr	r3, [pc, #500]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cdd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cdd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cdd8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800cdda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d120      	bne.n	800ce22 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cde0:	4b78      	ldr	r3, [pc, #480]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f003 0320 	and.w	r3, r3, #32
 800cde8:	2b20      	cmp	r3, #32
 800cdea:	d117      	bne.n	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cdec:	4b75      	ldr	r3, [pc, #468]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cdee:	689b      	ldr	r3, [r3, #8]
 800cdf0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d005      	beq.n	800ce04 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800cdf8:	4b72      	ldr	r3, [pc, #456]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cdfa:	689b      	ldr	r3, [r3, #8]
 800cdfc:	0e1b      	lsrs	r3, r3, #24
 800cdfe:	f003 030f 	and.w	r3, r3, #15
 800ce02:	e006      	b.n	800ce12 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800ce04:	4b6f      	ldr	r3, [pc, #444]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ce0a:	041b      	lsls	r3, r3, #16
 800ce0c:	0e1b      	lsrs	r3, r3, #24
 800ce0e:	f003 030f 	and.w	r3, r3, #15
 800ce12:	4a6e      	ldr	r2, [pc, #440]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800ce14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce18:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce1a:	e3f4      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce20:	e3f1      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800ce22:	4b68      	ldr	r3, [pc, #416]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ce30:	d112      	bne.n	800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800ce32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce38:	d10e      	bne.n	800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ce3a:	4b62      	ldr	r3, [pc, #392]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ce44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce48:	d102      	bne.n	800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800ce4a:	23fa      	movs	r3, #250	@ 0xfa
 800ce4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ce4e:	e3da      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800ce50:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ce54:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ce56:	e3d6      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800ce58:	4b5a      	ldr	r3, [pc, #360]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce64:	d106      	bne.n	800ce74 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800ce66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce6c:	d102      	bne.n	800ce74 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800ce6e:	4b56      	ldr	r3, [pc, #344]	@ (800cfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800ce70:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce72:	e3c8      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800ce74:	4b53      	ldr	r3, [pc, #332]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce7a:	f003 0302 	and.w	r3, r3, #2
 800ce7e:	2b02      	cmp	r3, #2
 800ce80:	d107      	bne.n	800ce92 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800ce82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce88:	d103      	bne.n	800ce92 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800ce8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce90:	e3b9      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800ce92:	2300      	movs	r3, #0
 800ce94:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce96:	e3b6      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800ce98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce9c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800cea0:	430b      	orrs	r3, r1
 800cea2:	d164      	bne.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800cea4:	4b47      	ldr	r3, [pc, #284]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cea6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ceaa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ceae:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800ceb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d120      	bne.n	800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ceb6:	4b43      	ldr	r3, [pc, #268]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f003 0320 	and.w	r3, r3, #32
 800cebe:	2b20      	cmp	r3, #32
 800cec0:	d117      	bne.n	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cec2:	4b40      	ldr	r3, [pc, #256]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cec4:	689b      	ldr	r3, [r3, #8]
 800cec6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d005      	beq.n	800ceda <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800cece:	4b3d      	ldr	r3, [pc, #244]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ced0:	689b      	ldr	r3, [r3, #8]
 800ced2:	0e1b      	lsrs	r3, r3, #24
 800ced4:	f003 030f 	and.w	r3, r3, #15
 800ced8:	e006      	b.n	800cee8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800ceda:	4b3a      	ldr	r3, [pc, #232]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cedc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cee0:	041b      	lsls	r3, r3, #16
 800cee2:	0e1b      	lsrs	r3, r3, #24
 800cee4:	f003 030f 	and.w	r3, r3, #15
 800cee8:	4a38      	ldr	r2, [pc, #224]	@ (800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800ceea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceee:	637b      	str	r3, [r7, #52]	@ 0x34
 800cef0:	e389      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800cef2:	2300      	movs	r3, #0
 800cef4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cef6:	e386      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800cef8:	4b32      	ldr	r3, [pc, #200]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cefa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cefe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cf06:	d112      	bne.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800cf08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf0e:	d10e      	bne.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cf10:	4b2c      	ldr	r3, [pc, #176]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cf12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cf16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf1e:	d102      	bne.n	800cf26 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800cf20:	23fa      	movs	r3, #250	@ 0xfa
 800cf22:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cf24:	e36f      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800cf26:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800cf2a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cf2c:	e36b      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800cf2e:	4b25      	ldr	r3, [pc, #148]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf3a:	d106      	bne.n	800cf4a <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800cf3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf42:	d102      	bne.n	800cf4a <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800cf44:	4b20      	ldr	r3, [pc, #128]	@ (800cfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800cf46:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf48:	e35d      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800cf4a:	4b1e      	ldr	r3, [pc, #120]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cf4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cf50:	f003 0302 	and.w	r3, r3, #2
 800cf54:	2b02      	cmp	r3, #2
 800cf56:	d107      	bne.n	800cf68 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800cf58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cf5e:	d103      	bne.n	800cf68 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800cf60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf64:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf66:	e34e      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf6c:	e34b      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800cf6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf72:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800cf76:	430b      	orrs	r3, r1
 800cf78:	d14e      	bne.n	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800cf7a:	4b12      	ldr	r3, [pc, #72]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cf7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cf80:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800cf84:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800cf86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d103      	bne.n	800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cf8c:	f7fd fbb8 	bl	800a700 <HAL_RCC_GetPCLK1Freq>
 800cf90:	6378      	str	r0, [r7, #52]	@ 0x34
 800cf92:	e338      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800cf94:	4b0b      	ldr	r3, [pc, #44]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cf96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cf9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cfa2:	d119      	bne.n	800cfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800cfa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfa6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cfaa:	d115      	bne.n	800cfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cfac:	4b05      	ldr	r3, [pc, #20]	@ (800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cfae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cfb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cfb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cfba:	d109      	bne.n	800cfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800cfbc:	23fa      	movs	r3, #250	@ 0xfa
 800cfbe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cfc0:	e321      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cfc2:	bf00      	nop
 800cfc4:	46020c00 	.word	0x46020c00
 800cfc8:	00f42400 	.word	0x00f42400
 800cfcc:	080115e4 	.word	0x080115e4
      }
      else
      {
        frequency = LSI_VALUE;
 800cfd0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800cfd4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cfd6:	e316      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800cfd8:	4ba8      	ldr	r3, [pc, #672]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cfe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cfe4:	d106      	bne.n	800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800cfe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfe8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800cfec:	d102      	bne.n	800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800cfee:	4ba4      	ldr	r3, [pc, #656]	@ (800d280 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800cff0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cff2:	e308      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800cff4:	4ba1      	ldr	r3, [pc, #644]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cff6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cffa:	f003 0302 	and.w	r3, r3, #2
 800cffe:	2b02      	cmp	r3, #2
 800d000:	d107      	bne.n	800d012 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800d002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d004:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d008:	d103      	bne.n	800d012 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800d00a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d00e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d010:	e2f9      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800d012:	2300      	movs	r3, #0
 800d014:	637b      	str	r3, [r7, #52]	@ 0x34
 800d016:	e2f6      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800d018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d01c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800d020:	430b      	orrs	r3, r1
 800d022:	d12d      	bne.n	800d080 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800d024:	4b95      	ldr	r3, [pc, #596]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d02a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d02e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800d030:	4b92      	ldr	r3, [pc, #584]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d038:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d03c:	d105      	bne.n	800d04a <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800d03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d040:	2b00      	cmp	r3, #0
 800d042:	d102      	bne.n	800d04a <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800d044:	4b8e      	ldr	r3, [pc, #568]	@ (800d280 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d046:	637b      	str	r3, [r7, #52]	@ 0x34
 800d048:	e2dd      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800d04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d04c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d050:	d107      	bne.n	800d062 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d056:	4618      	mov	r0, r3
 800d058:	f7fe fb4c 	bl	800b6f4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800d05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d05e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d060:	e2d1      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800d062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d064:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d068:	d107      	bne.n	800d07a <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d06a:	f107 0318 	add.w	r3, r7, #24
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fe fc9a 	bl	800b9a8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	637b      	str	r3, [r7, #52]	@ 0x34
 800d078:	e2c5      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800d07a:	2300      	movs	r3, #0
 800d07c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d07e:	e2c2      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800d080:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d084:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800d088:	430b      	orrs	r3, r1
 800d08a:	d156      	bne.n	800d13a <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800d08c:	4b7b      	ldr	r3, [pc, #492]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d08e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d092:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d096:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d09a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d09e:	d028      	beq.n	800d0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800d0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d0a6:	d845      	bhi.n	800d134 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d0ae:	d013      	beq.n	800d0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800d0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d0b6:	d83d      	bhi.n	800d134 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d004      	beq.n	800d0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800d0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d0c4:	d004      	beq.n	800d0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800d0c6:	e035      	b.n	800d134 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800d0c8:	f7fd fb2e 	bl	800a728 <HAL_RCC_GetPCLK2Freq>
 800d0cc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d0ce:	e29a      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d0d0:	f7fd f9fa 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800d0d4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d0d6:	e296      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d0d8:	4b68      	ldr	r3, [pc, #416]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d0e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d0e4:	d102      	bne.n	800d0ec <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800d0e6:	4b66      	ldr	r3, [pc, #408]	@ (800d280 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d0e8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d0ea:	e28c      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d0f0:	e289      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d0f2:	4b62      	ldr	r3, [pc, #392]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f003 0320 	and.w	r3, r3, #32
 800d0fa:	2b20      	cmp	r3, #32
 800d0fc:	d117      	bne.n	800d12e <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d0fe:	4b5f      	ldr	r3, [pc, #380]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d100:	689b      	ldr	r3, [r3, #8]
 800d102:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d106:	2b00      	cmp	r3, #0
 800d108:	d005      	beq.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800d10a:	4b5c      	ldr	r3, [pc, #368]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d10c:	689b      	ldr	r3, [r3, #8]
 800d10e:	0e1b      	lsrs	r3, r3, #24
 800d110:	f003 030f 	and.w	r3, r3, #15
 800d114:	e006      	b.n	800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800d116:	4b59      	ldr	r3, [pc, #356]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d11c:	041b      	lsls	r3, r3, #16
 800d11e:	0e1b      	lsrs	r3, r3, #24
 800d120:	f003 030f 	and.w	r3, r3, #15
 800d124:	4a57      	ldr	r2, [pc, #348]	@ (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d12a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d12c:	e26b      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d12e:	2300      	movs	r3, #0
 800d130:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d132:	e268      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d134:	2300      	movs	r3, #0
 800d136:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d138:	e265      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800d13a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d13e:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800d142:	430b      	orrs	r3, r1
 800d144:	d156      	bne.n	800d1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800d146:	4b4d      	ldr	r3, [pc, #308]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d14c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d150:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d154:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d158:	d028      	beq.n	800d1ac <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800d15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d15c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d160:	d845      	bhi.n	800d1ee <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d164:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d168:	d013      	beq.n	800d192 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800d16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d16c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d170:	d83d      	bhi.n	800d1ee <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d174:	2b00      	cmp	r3, #0
 800d176:	d004      	beq.n	800d182 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800d178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d17a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d17e:	d004      	beq.n	800d18a <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800d180:	e035      	b.n	800d1ee <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800d182:	f7fd fabd 	bl	800a700 <HAL_RCC_GetPCLK1Freq>
 800d186:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d188:	e23d      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d18a:	f7fd f99d 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800d18e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d190:	e239      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d192:	4b3a      	ldr	r3, [pc, #232]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d19a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d19e:	d102      	bne.n	800d1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800d1a0:	4b37      	ldr	r3, [pc, #220]	@ (800d280 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d1a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d1a4:	e22f      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1aa:	e22c      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d1ac:	4b33      	ldr	r3, [pc, #204]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f003 0320 	and.w	r3, r3, #32
 800d1b4:	2b20      	cmp	r3, #32
 800d1b6:	d117      	bne.n	800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d1b8:	4b30      	ldr	r3, [pc, #192]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d1ba:	689b      	ldr	r3, [r3, #8]
 800d1bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d005      	beq.n	800d1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800d1c4:	4b2d      	ldr	r3, [pc, #180]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d1c6:	689b      	ldr	r3, [r3, #8]
 800d1c8:	0e1b      	lsrs	r3, r3, #24
 800d1ca:	f003 030f 	and.w	r3, r3, #15
 800d1ce:	e006      	b.n	800d1de <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800d1d0:	4b2a      	ldr	r3, [pc, #168]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d1d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d1d6:	041b      	lsls	r3, r3, #16
 800d1d8:	0e1b      	lsrs	r3, r3, #24
 800d1da:	f003 030f 	and.w	r3, r3, #15
 800d1de:	4a29      	ldr	r2, [pc, #164]	@ (800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d1e6:	e20e      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1ec:	e20b      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1f2:	e208      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800d1f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1f8:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800d1fc:	430b      	orrs	r3, r1
 800d1fe:	d17c      	bne.n	800d2fa <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800d200:	4b1e      	ldr	r3, [pc, #120]	@ (800d27c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d202:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d206:	f003 0318 	and.w	r3, r3, #24
 800d20a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d20e:	2b18      	cmp	r3, #24
 800d210:	d870      	bhi.n	800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800d212:	a201      	add	r2, pc, #4	@ (adr r2, 800d218 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800d214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d218:	0800d289 	.word	0x0800d289
 800d21c:	0800d2f5 	.word	0x0800d2f5
 800d220:	0800d2f5 	.word	0x0800d2f5
 800d224:	0800d2f5 	.word	0x0800d2f5
 800d228:	0800d2f5 	.word	0x0800d2f5
 800d22c:	0800d2f5 	.word	0x0800d2f5
 800d230:	0800d2f5 	.word	0x0800d2f5
 800d234:	0800d2f5 	.word	0x0800d2f5
 800d238:	0800d291 	.word	0x0800d291
 800d23c:	0800d2f5 	.word	0x0800d2f5
 800d240:	0800d2f5 	.word	0x0800d2f5
 800d244:	0800d2f5 	.word	0x0800d2f5
 800d248:	0800d2f5 	.word	0x0800d2f5
 800d24c:	0800d2f5 	.word	0x0800d2f5
 800d250:	0800d2f5 	.word	0x0800d2f5
 800d254:	0800d2f5 	.word	0x0800d2f5
 800d258:	0800d299 	.word	0x0800d299
 800d25c:	0800d2f5 	.word	0x0800d2f5
 800d260:	0800d2f5 	.word	0x0800d2f5
 800d264:	0800d2f5 	.word	0x0800d2f5
 800d268:	0800d2f5 	.word	0x0800d2f5
 800d26c:	0800d2f5 	.word	0x0800d2f5
 800d270:	0800d2f5 	.word	0x0800d2f5
 800d274:	0800d2f5 	.word	0x0800d2f5
 800d278:	0800d2b3 	.word	0x0800d2b3
 800d27c:	46020c00 	.word	0x46020c00
 800d280:	00f42400 	.word	0x00f42400
 800d284:	080115e4 	.word	0x080115e4
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800d288:	f7fd fa62 	bl	800a750 <HAL_RCC_GetPCLK3Freq>
 800d28c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d28e:	e1ba      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d290:	f7fd f91a 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800d294:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d296:	e1b6      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d298:	4b9f      	ldr	r3, [pc, #636]	@ (800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d2a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d2a4:	d102      	bne.n	800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800d2a6:	4b9d      	ldr	r3, [pc, #628]	@ (800d51c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d2a8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d2aa:	e1ac      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2b0:	e1a9      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d2b2:	4b99      	ldr	r3, [pc, #612]	@ (800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f003 0320 	and.w	r3, r3, #32
 800d2ba:	2b20      	cmp	r3, #32
 800d2bc:	d117      	bne.n	800d2ee <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d2be:	4b96      	ldr	r3, [pc, #600]	@ (800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d2c0:	689b      	ldr	r3, [r3, #8]
 800d2c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d005      	beq.n	800d2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800d2ca:	4b93      	ldr	r3, [pc, #588]	@ (800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d2cc:	689b      	ldr	r3, [r3, #8]
 800d2ce:	0e1b      	lsrs	r3, r3, #24
 800d2d0:	f003 030f 	and.w	r3, r3, #15
 800d2d4:	e006      	b.n	800d2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800d2d6:	4b90      	ldr	r3, [pc, #576]	@ (800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d2d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d2dc:	041b      	lsls	r3, r3, #16
 800d2de:	0e1b      	lsrs	r3, r3, #24
 800d2e0:	f003 030f 	and.w	r3, r3, #15
 800d2e4:	4a8e      	ldr	r2, [pc, #568]	@ (800d520 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d2e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2ea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d2ec:	e18b      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2f2:	e188      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2f8:	e185      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800d2fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2fe:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800d302:	430b      	orrs	r3, r1
 800d304:	d155      	bne.n	800d3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800d306:	4b84      	ldr	r3, [pc, #528]	@ (800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d308:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d30c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d310:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d314:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d318:	d013      	beq.n	800d342 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800d31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d31c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d320:	d844      	bhi.n	800d3ac <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d324:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d328:	d013      	beq.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800d32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d32c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d330:	d83c      	bhi.n	800d3ac <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d334:	2b00      	cmp	r3, #0
 800d336:	d014      	beq.n	800d362 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800d338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d33a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d33e:	d014      	beq.n	800d36a <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800d340:	e034      	b.n	800d3ac <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d342:	f107 0318 	add.w	r3, r7, #24
 800d346:	4618      	mov	r0, r3
 800d348:	f7fe fb2e 	bl	800b9a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d350:	e159      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d352:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d356:	4618      	mov	r0, r3
 800d358:	f7fe f9cc 	bl	800b6f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d35e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d360:	e151      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d362:	f7fd f8b1 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800d366:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d368:	e14d      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d36a:	4b6b      	ldr	r3, [pc, #428]	@ (800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f003 0320 	and.w	r3, r3, #32
 800d372:	2b20      	cmp	r3, #32
 800d374:	d117      	bne.n	800d3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d376:	4b68      	ldr	r3, [pc, #416]	@ (800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d378:	689b      	ldr	r3, [r3, #8]
 800d37a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d005      	beq.n	800d38e <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800d382:	4b65      	ldr	r3, [pc, #404]	@ (800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d384:	689b      	ldr	r3, [r3, #8]
 800d386:	0e1b      	lsrs	r3, r3, #24
 800d388:	f003 030f 	and.w	r3, r3, #15
 800d38c:	e006      	b.n	800d39c <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800d38e:	4b62      	ldr	r3, [pc, #392]	@ (800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d390:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d394:	041b      	lsls	r3, r3, #16
 800d396:	0e1b      	lsrs	r3, r3, #24
 800d398:	f003 030f 	and.w	r3, r3, #15
 800d39c:	4a60      	ldr	r2, [pc, #384]	@ (800d520 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d39e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d3a4:	e12f      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d3aa:	e12c      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d3b0:	e129      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800d3b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3b6:	1e59      	subs	r1, r3, #1
 800d3b8:	ea52 0301 	orrs.w	r3, r2, r1
 800d3bc:	d13c      	bne.n	800d438 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800d3be:	4b56      	ldr	r3, [pc, #344]	@ (800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d3c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d3c4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800d3c8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d3d0:	d027      	beq.n	800d422 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800d3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d3d8:	d82b      	bhi.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d3e0:	d017      	beq.n	800d412 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800d3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d3e8:	d823      	bhi.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d004      	beq.n	800d3fa <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800d3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d3f6:	d004      	beq.n	800d402 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800d3f8:	e01b      	b.n	800d432 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d3fa:	f7fd f865 	bl	800a4c8 <HAL_RCC_GetSysClockFreq>
 800d3fe:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d400:	e101      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d406:	4618      	mov	r0, r3
 800d408:	f7fe f974 	bl	800b6f4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d40e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d410:	e0f9      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d412:	f107 0318 	add.w	r3, r7, #24
 800d416:	4618      	mov	r0, r3
 800d418:	f7fe fac6 	bl	800b9a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d420:	e0f1      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d422:	f107 030c 	add.w	r3, r7, #12
 800d426:	4618      	mov	r0, r3
 800d428:	f7fe fc18 	bl	800bc5c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d430:	e0e9      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d432:	2300      	movs	r3, #0
 800d434:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d436:	e0e6      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800d438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d43c:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800d440:	430b      	orrs	r3, r1
 800d442:	d131      	bne.n	800d4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800d444:	4b34      	ldr	r3, [pc, #208]	@ (800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d44a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d44e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800d450:	4b31      	ldr	r3, [pc, #196]	@ (800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d456:	f003 0302 	and.w	r3, r3, #2
 800d45a:	2b02      	cmp	r3, #2
 800d45c:	d106      	bne.n	800d46c <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800d45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d460:	2b00      	cmp	r3, #0
 800d462:	d103      	bne.n	800d46c <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800d464:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d468:	637b      	str	r3, [r7, #52]	@ 0x34
 800d46a:	e0cc      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800d46c:	4b2a      	ldr	r3, [pc, #168]	@ (800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d46e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d472:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d476:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d47a:	d112      	bne.n	800d4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800d47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d47e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d482:	d10e      	bne.n	800d4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d484:	4b24      	ldr	r3, [pc, #144]	@ (800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d486:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d48a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d48e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d492:	d102      	bne.n	800d49a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800d494:	23fa      	movs	r3, #250	@ 0xfa
 800d496:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d498:	e0b5      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d49a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d49e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d4a0:	e0b1      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4a6:	e0ae      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800d4a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4ac:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d4b0:	430b      	orrs	r3, r1
 800d4b2:	d13b      	bne.n	800d52c <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800d4b4:	4b18      	ldr	r3, [pc, #96]	@ (800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d4b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d4ba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d4be:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800d4c0:	4b15      	ldr	r3, [pc, #84]	@ (800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d4c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d4cc:	d105      	bne.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d102      	bne.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800d4d4:	4b13      	ldr	r3, [pc, #76]	@ (800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800d4d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4d8:	e095      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800d4da:	4b0f      	ldr	r3, [pc, #60]	@ (800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d4e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d4e6:	d106      	bne.n	800d4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800d4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d4ee:	d102      	bne.n	800d4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800d4f0:	4b0d      	ldr	r3, [pc, #52]	@ (800d528 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800d4f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4f4:	e087      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800d4f6:	4b08      	ldr	r3, [pc, #32]	@ (800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d4fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d502:	d106      	bne.n	800d512 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800d504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d506:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d50a:	d102      	bne.n	800d512 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800d50c:	4b03      	ldr	r3, [pc, #12]	@ (800d51c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d50e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d510:	e079      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800d512:	2300      	movs	r3, #0
 800d514:	637b      	str	r3, [r7, #52]	@ 0x34
 800d516:	e076      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d518:	46020c00 	.word	0x46020c00
 800d51c:	00f42400 	.word	0x00f42400
 800d520:	080115e4 	.word	0x080115e4
 800d524:	02dc6c00 	.word	0x02dc6c00
 800d528:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800d52c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d530:	1e99      	subs	r1, r3, #2
 800d532:	ea52 0301 	orrs.w	r3, r2, r1
 800d536:	d120      	bne.n	800d57a <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800d538:	4b35      	ldr	r3, [pc, #212]	@ (800d610 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d53a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d53e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d542:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d546:	2b00      	cmp	r3, #0
 800d548:	d004      	beq.n	800d554 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800d54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d54c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d550:	d008      	beq.n	800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800d552:	e00f      	b.n	800d574 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d554:	f107 030c 	add.w	r3, r7, #12
 800d558:	4618      	mov	r0, r3
 800d55a:	f7fe fb7f 	bl	800bc5c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d562:	e050      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d564:	f107 0318 	add.w	r3, r7, #24
 800d568:	4618      	mov	r0, r3
 800d56a:	f7fe fa1d 	bl	800b9a8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800d56e:	6a3b      	ldr	r3, [r7, #32]
 800d570:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d572:	e048      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d574:	2300      	movs	r3, #0
 800d576:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d578:	e045      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800d57a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d57e:	f1a3 0108 	sub.w	r1, r3, #8
 800d582:	ea52 0301 	orrs.w	r3, r2, r1
 800d586:	d13c      	bne.n	800d602 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800d588:	4b21      	ldr	r3, [pc, #132]	@ (800d610 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d58a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d58e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800d592:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800d594:	4b1e      	ldr	r3, [pc, #120]	@ (800d610 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d59c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d5a0:	d105      	bne.n	800d5ae <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800d5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d102      	bne.n	800d5ae <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800d5a8:	4b1a      	ldr	r3, [pc, #104]	@ (800d614 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800d5aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5ac:	e02b      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800d5ae:	4b18      	ldr	r3, [pc, #96]	@ (800d610 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d5b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d5ba:	d106      	bne.n	800d5ca <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800d5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d5c2:	d102      	bne.n	800d5ca <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800d5c4:	4b14      	ldr	r3, [pc, #80]	@ (800d618 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800d5c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5c8:	e01d      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800d5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5d0:	d107      	bne.n	800d5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d5d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7fe f88c 	bl	800b6f4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5de:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5e0:	e011      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800d5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800d5e8:	d108      	bne.n	800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d5ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7fe f880 	bl	800b6f4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800d5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f6:	085b      	lsrs	r3, r3, #1
 800d5f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5fa:	e004      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800d600:	e001      	b.n	800d606 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800d602:	2300      	movs	r3, #0
 800d604:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800d606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3738      	adds	r7, #56	@ 0x38
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	46020c00 	.word	0x46020c00
 800d614:	00f42400 	.word	0x00f42400
 800d618:	007a1200 	.word	0x007a1200

0800d61c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800d624:	4b47      	ldr	r3, [pc, #284]	@ (800d744 <RCCEx_PLL2_Config+0x128>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4a46      	ldr	r2, [pc, #280]	@ (800d744 <RCCEx_PLL2_Config+0x128>)
 800d62a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d62e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d630:	f7f5 fb22 	bl	8002c78 <HAL_GetTick>
 800d634:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d636:	e008      	b.n	800d64a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d638:	f7f5 fb1e 	bl	8002c78 <HAL_GetTick>
 800d63c:	4602      	mov	r2, r0
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	1ad3      	subs	r3, r2, r3
 800d642:	2b02      	cmp	r3, #2
 800d644:	d901      	bls.n	800d64a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d646:	2303      	movs	r3, #3
 800d648:	e077      	b.n	800d73a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d64a:	4b3e      	ldr	r3, [pc, #248]	@ (800d744 <RCCEx_PLL2_Config+0x128>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d652:	2b00      	cmp	r3, #0
 800d654:	d1f0      	bne.n	800d638 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800d656:	4b3b      	ldr	r3, [pc, #236]	@ (800d744 <RCCEx_PLL2_Config+0x128>)
 800d658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d65a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800d65e:	f023 0303 	bic.w	r3, r3, #3
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	6811      	ldr	r1, [r2, #0]
 800d666:	687a      	ldr	r2, [r7, #4]
 800d668:	6852      	ldr	r2, [r2, #4]
 800d66a:	3a01      	subs	r2, #1
 800d66c:	0212      	lsls	r2, r2, #8
 800d66e:	430a      	orrs	r2, r1
 800d670:	4934      	ldr	r1, [pc, #208]	@ (800d744 <RCCEx_PLL2_Config+0x128>)
 800d672:	4313      	orrs	r3, r2
 800d674:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800d676:	4b33      	ldr	r3, [pc, #204]	@ (800d744 <RCCEx_PLL2_Config+0x128>)
 800d678:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d67a:	4b33      	ldr	r3, [pc, #204]	@ (800d748 <RCCEx_PLL2_Config+0x12c>)
 800d67c:	4013      	ands	r3, r2
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	6892      	ldr	r2, [r2, #8]
 800d682:	3a01      	subs	r2, #1
 800d684:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800d688:	687a      	ldr	r2, [r7, #4]
 800d68a:	68d2      	ldr	r2, [r2, #12]
 800d68c:	3a01      	subs	r2, #1
 800d68e:	0252      	lsls	r2, r2, #9
 800d690:	b292      	uxth	r2, r2
 800d692:	4311      	orrs	r1, r2
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	6912      	ldr	r2, [r2, #16]
 800d698:	3a01      	subs	r2, #1
 800d69a:	0412      	lsls	r2, r2, #16
 800d69c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800d6a0:	4311      	orrs	r1, r2
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	6952      	ldr	r2, [r2, #20]
 800d6a6:	3a01      	subs	r2, #1
 800d6a8:	0612      	lsls	r2, r2, #24
 800d6aa:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800d6ae:	430a      	orrs	r2, r1
 800d6b0:	4924      	ldr	r1, [pc, #144]	@ (800d744 <RCCEx_PLL2_Config+0x128>)
 800d6b2:	4313      	orrs	r3, r2
 800d6b4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800d6b6:	4b23      	ldr	r3, [pc, #140]	@ (800d744 <RCCEx_PLL2_Config+0x128>)
 800d6b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6ba:	f023 020c 	bic.w	r2, r3, #12
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	699b      	ldr	r3, [r3, #24]
 800d6c2:	4920      	ldr	r1, [pc, #128]	@ (800d744 <RCCEx_PLL2_Config+0x128>)
 800d6c4:	4313      	orrs	r3, r2
 800d6c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800d6c8:	4b1e      	ldr	r3, [pc, #120]	@ (800d744 <RCCEx_PLL2_Config+0x128>)
 800d6ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6a1b      	ldr	r3, [r3, #32]
 800d6d0:	491c      	ldr	r1, [pc, #112]	@ (800d744 <RCCEx_PLL2_Config+0x128>)
 800d6d2:	4313      	orrs	r3, r2
 800d6d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800d6d6:	4b1b      	ldr	r3, [pc, #108]	@ (800d744 <RCCEx_PLL2_Config+0x128>)
 800d6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6da:	4a1a      	ldr	r2, [pc, #104]	@ (800d744 <RCCEx_PLL2_Config+0x128>)
 800d6dc:	f023 0310 	bic.w	r3, r3, #16
 800d6e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d6e2:	4b18      	ldr	r3, [pc, #96]	@ (800d744 <RCCEx_PLL2_Config+0x128>)
 800d6e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d6ea:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800d6ee:	687a      	ldr	r2, [r7, #4]
 800d6f0:	69d2      	ldr	r2, [r2, #28]
 800d6f2:	00d2      	lsls	r2, r2, #3
 800d6f4:	4913      	ldr	r1, [pc, #76]	@ (800d744 <RCCEx_PLL2_Config+0x128>)
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800d6fa:	4b12      	ldr	r3, [pc, #72]	@ (800d744 <RCCEx_PLL2_Config+0x128>)
 800d6fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6fe:	4a11      	ldr	r2, [pc, #68]	@ (800d744 <RCCEx_PLL2_Config+0x128>)
 800d700:	f043 0310 	orr.w	r3, r3, #16
 800d704:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800d706:	4b0f      	ldr	r3, [pc, #60]	@ (800d744 <RCCEx_PLL2_Config+0x128>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4a0e      	ldr	r2, [pc, #56]	@ (800d744 <RCCEx_PLL2_Config+0x128>)
 800d70c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d710:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d712:	f7f5 fab1 	bl	8002c78 <HAL_GetTick>
 800d716:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d718:	e008      	b.n	800d72c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d71a:	f7f5 faad 	bl	8002c78 <HAL_GetTick>
 800d71e:	4602      	mov	r2, r0
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	1ad3      	subs	r3, r2, r3
 800d724:	2b02      	cmp	r3, #2
 800d726:	d901      	bls.n	800d72c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800d728:	2303      	movs	r3, #3
 800d72a:	e006      	b.n	800d73a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d72c:	4b05      	ldr	r3, [pc, #20]	@ (800d744 <RCCEx_PLL2_Config+0x128>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d734:	2b00      	cmp	r3, #0
 800d736:	d0f0      	beq.n	800d71a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800d738:	2300      	movs	r3, #0

}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3710      	adds	r7, #16
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	46020c00 	.word	0x46020c00
 800d748:	80800000 	.word	0x80800000

0800d74c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b084      	sub	sp, #16
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800d754:	4b47      	ldr	r3, [pc, #284]	@ (800d874 <RCCEx_PLL3_Config+0x128>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4a46      	ldr	r2, [pc, #280]	@ (800d874 <RCCEx_PLL3_Config+0x128>)
 800d75a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d75e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d760:	f7f5 fa8a 	bl	8002c78 <HAL_GetTick>
 800d764:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d766:	e008      	b.n	800d77a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d768:	f7f5 fa86 	bl	8002c78 <HAL_GetTick>
 800d76c:	4602      	mov	r2, r0
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	1ad3      	subs	r3, r2, r3
 800d772:	2b02      	cmp	r3, #2
 800d774:	d901      	bls.n	800d77a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d776:	2303      	movs	r3, #3
 800d778:	e077      	b.n	800d86a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d77a:	4b3e      	ldr	r3, [pc, #248]	@ (800d874 <RCCEx_PLL3_Config+0x128>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d782:	2b00      	cmp	r3, #0
 800d784:	d1f0      	bne.n	800d768 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800d786:	4b3b      	ldr	r3, [pc, #236]	@ (800d874 <RCCEx_PLL3_Config+0x128>)
 800d788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d78a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800d78e:	f023 0303 	bic.w	r3, r3, #3
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	6811      	ldr	r1, [r2, #0]
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	6852      	ldr	r2, [r2, #4]
 800d79a:	3a01      	subs	r2, #1
 800d79c:	0212      	lsls	r2, r2, #8
 800d79e:	430a      	orrs	r2, r1
 800d7a0:	4934      	ldr	r1, [pc, #208]	@ (800d874 <RCCEx_PLL3_Config+0x128>)
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	630b      	str	r3, [r1, #48]	@ 0x30
 800d7a6:	4b33      	ldr	r3, [pc, #204]	@ (800d874 <RCCEx_PLL3_Config+0x128>)
 800d7a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d7aa:	4b33      	ldr	r3, [pc, #204]	@ (800d878 <RCCEx_PLL3_Config+0x12c>)
 800d7ac:	4013      	ands	r3, r2
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	6892      	ldr	r2, [r2, #8]
 800d7b2:	3a01      	subs	r2, #1
 800d7b4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800d7b8:	687a      	ldr	r2, [r7, #4]
 800d7ba:	68d2      	ldr	r2, [r2, #12]
 800d7bc:	3a01      	subs	r2, #1
 800d7be:	0252      	lsls	r2, r2, #9
 800d7c0:	b292      	uxth	r2, r2
 800d7c2:	4311      	orrs	r1, r2
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	6912      	ldr	r2, [r2, #16]
 800d7c8:	3a01      	subs	r2, #1
 800d7ca:	0412      	lsls	r2, r2, #16
 800d7cc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800d7d0:	4311      	orrs	r1, r2
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	6952      	ldr	r2, [r2, #20]
 800d7d6:	3a01      	subs	r2, #1
 800d7d8:	0612      	lsls	r2, r2, #24
 800d7da:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800d7de:	430a      	orrs	r2, r1
 800d7e0:	4924      	ldr	r1, [pc, #144]	@ (800d874 <RCCEx_PLL3_Config+0x128>)
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800d7e6:	4b23      	ldr	r3, [pc, #140]	@ (800d874 <RCCEx_PLL3_Config+0x128>)
 800d7e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7ea:	f023 020c 	bic.w	r2, r3, #12
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	699b      	ldr	r3, [r3, #24]
 800d7f2:	4920      	ldr	r1, [pc, #128]	@ (800d874 <RCCEx_PLL3_Config+0x128>)
 800d7f4:	4313      	orrs	r3, r2
 800d7f6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800d7f8:	4b1e      	ldr	r3, [pc, #120]	@ (800d874 <RCCEx_PLL3_Config+0x128>)
 800d7fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6a1b      	ldr	r3, [r3, #32]
 800d800:	491c      	ldr	r1, [pc, #112]	@ (800d874 <RCCEx_PLL3_Config+0x128>)
 800d802:	4313      	orrs	r3, r2
 800d804:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800d806:	4b1b      	ldr	r3, [pc, #108]	@ (800d874 <RCCEx_PLL3_Config+0x128>)
 800d808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d80a:	4a1a      	ldr	r2, [pc, #104]	@ (800d874 <RCCEx_PLL3_Config+0x128>)
 800d80c:	f023 0310 	bic.w	r3, r3, #16
 800d810:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d812:	4b18      	ldr	r3, [pc, #96]	@ (800d874 <RCCEx_PLL3_Config+0x128>)
 800d814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d81a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	69d2      	ldr	r2, [r2, #28]
 800d822:	00d2      	lsls	r2, r2, #3
 800d824:	4913      	ldr	r1, [pc, #76]	@ (800d874 <RCCEx_PLL3_Config+0x128>)
 800d826:	4313      	orrs	r3, r2
 800d828:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800d82a:	4b12      	ldr	r3, [pc, #72]	@ (800d874 <RCCEx_PLL3_Config+0x128>)
 800d82c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d82e:	4a11      	ldr	r2, [pc, #68]	@ (800d874 <RCCEx_PLL3_Config+0x128>)
 800d830:	f043 0310 	orr.w	r3, r3, #16
 800d834:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800d836:	4b0f      	ldr	r3, [pc, #60]	@ (800d874 <RCCEx_PLL3_Config+0x128>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	4a0e      	ldr	r2, [pc, #56]	@ (800d874 <RCCEx_PLL3_Config+0x128>)
 800d83c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d840:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d842:	f7f5 fa19 	bl	8002c78 <HAL_GetTick>
 800d846:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d848:	e008      	b.n	800d85c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d84a:	f7f5 fa15 	bl	8002c78 <HAL_GetTick>
 800d84e:	4602      	mov	r2, r0
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	1ad3      	subs	r3, r2, r3
 800d854:	2b02      	cmp	r3, #2
 800d856:	d901      	bls.n	800d85c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800d858:	2303      	movs	r3, #3
 800d85a:	e006      	b.n	800d86a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d85c:	4b05      	ldr	r3, [pc, #20]	@ (800d874 <RCCEx_PLL3_Config+0x128>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d864:	2b00      	cmp	r3, #0
 800d866:	d0f0      	beq.n	800d84a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800d868:	2300      	movs	r3, #0
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3710      	adds	r7, #16
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	46020c00 	.word	0x46020c00
 800d878:	80800000 	.word	0x80800000

0800d87c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b084      	sub	sp, #16
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d884:	2301      	movs	r3, #1
 800d886:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d071      	beq.n	800d972 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d894:	b2db      	uxtb	r3, r3
 800d896:	2b00      	cmp	r3, #0
 800d898:	d106      	bne.n	800d8a8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2200      	movs	r2, #0
 800d89e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f7f4 fc8e 	bl	80021c4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2202      	movs	r2, #2
 800d8ac:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d8b0:	4b32      	ldr	r3, [pc, #200]	@ (800d97c <HAL_RTC_Init+0x100>)
 800d8b2:	68db      	ldr	r3, [r3, #12]
 800d8b4:	f003 0310 	and.w	r3, r3, #16
 800d8b8:	2b10      	cmp	r3, #16
 800d8ba:	d051      	beq.n	800d960 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d8bc:	4b2f      	ldr	r3, [pc, #188]	@ (800d97c <HAL_RTC_Init+0x100>)
 800d8be:	22ca      	movs	r2, #202	@ 0xca
 800d8c0:	625a      	str	r2, [r3, #36]	@ 0x24
 800d8c2:	4b2e      	ldr	r3, [pc, #184]	@ (800d97c <HAL_RTC_Init+0x100>)
 800d8c4:	2253      	movs	r2, #83	@ 0x53
 800d8c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f000 f88b 	bl	800d9e4 <RTC_EnterInitMode>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d8d2:	7bfb      	ldrb	r3, [r7, #15]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d13f      	bne.n	800d958 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800d8d8:	4b28      	ldr	r3, [pc, #160]	@ (800d97c <HAL_RTC_Init+0x100>)
 800d8da:	699b      	ldr	r3, [r3, #24]
 800d8dc:	4a27      	ldr	r2, [pc, #156]	@ (800d97c <HAL_RTC_Init+0x100>)
 800d8de:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800d8e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d8e6:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800d8e8:	4b24      	ldr	r3, [pc, #144]	@ (800d97c <HAL_RTC_Init+0x100>)
 800d8ea:	699a      	ldr	r2, [r3, #24]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6859      	ldr	r1, [r3, #4]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	691b      	ldr	r3, [r3, #16]
 800d8f4:	4319      	orrs	r1, r3
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	699b      	ldr	r3, [r3, #24]
 800d8fa:	430b      	orrs	r3, r1
 800d8fc:	491f      	ldr	r1, [pc, #124]	@ (800d97c <HAL_RTC_Init+0x100>)
 800d8fe:	4313      	orrs	r3, r2
 800d900:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	68da      	ldr	r2, [r3, #12]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	689b      	ldr	r3, [r3, #8]
 800d90a:	041b      	lsls	r3, r3, #16
 800d90c:	491b      	ldr	r1, [pc, #108]	@ (800d97c <HAL_RTC_Init+0x100>)
 800d90e:	4313      	orrs	r3, r2
 800d910:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800d912:	4b1a      	ldr	r3, [pc, #104]	@ (800d97c <HAL_RTC_Init+0x100>)
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d922:	430b      	orrs	r3, r1
 800d924:	4915      	ldr	r1, [pc, #84]	@ (800d97c <HAL_RTC_Init+0x100>)
 800d926:	4313      	orrs	r3, r2
 800d928:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 f896 	bl	800da5c <RTC_ExitInitMode>
 800d930:	4603      	mov	r3, r0
 800d932:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800d934:	7bfb      	ldrb	r3, [r7, #15]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d10e      	bne.n	800d958 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800d93a:	4b10      	ldr	r3, [pc, #64]	@ (800d97c <HAL_RTC_Init+0x100>)
 800d93c:	699b      	ldr	r3, [r3, #24]
 800d93e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6a19      	ldr	r1, [r3, #32]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	69db      	ldr	r3, [r3, #28]
 800d94a:	4319      	orrs	r1, r3
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	695b      	ldr	r3, [r3, #20]
 800d950:	430b      	orrs	r3, r1
 800d952:	490a      	ldr	r1, [pc, #40]	@ (800d97c <HAL_RTC_Init+0x100>)
 800d954:	4313      	orrs	r3, r2
 800d956:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d958:	4b08      	ldr	r3, [pc, #32]	@ (800d97c <HAL_RTC_Init+0x100>)
 800d95a:	22ff      	movs	r2, #255	@ 0xff
 800d95c:	625a      	str	r2, [r3, #36]	@ 0x24
 800d95e:	e001      	b.n	800d964 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800d960:	2300      	movs	r3, #0
 800d962:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d964:	7bfb      	ldrb	r3, [r7, #15]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d103      	bne.n	800d972 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2201      	movs	r2, #1
 800d96e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800d972:	7bfb      	ldrb	r3, [r7, #15]
}
 800d974:	4618      	mov	r0, r3
 800d976:	3710      	adds	r7, #16
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}
 800d97c:	46007800 	.word	0x46007800

0800d980 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800d988:	4b15      	ldr	r3, [pc, #84]	@ (800d9e0 <HAL_RTC_WaitForSynchro+0x60>)
 800d98a:	68db      	ldr	r3, [r3, #12]
 800d98c:	4a14      	ldr	r2, [pc, #80]	@ (800d9e0 <HAL_RTC_WaitForSynchro+0x60>)
 800d98e:	f023 0320 	bic.w	r3, r3, #32
 800d992:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800d994:	f7f5 f970 	bl	8002c78 <HAL_GetTick>
 800d998:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800d99a:	e013      	b.n	800d9c4 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d99c:	f7f5 f96c 	bl	8002c78 <HAL_GetTick>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	1ad3      	subs	r3, r2, r3
 800d9a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d9aa:	d90b      	bls.n	800d9c4 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800d9ac:	4b0c      	ldr	r3, [pc, #48]	@ (800d9e0 <HAL_RTC_WaitForSynchro+0x60>)
 800d9ae:	68db      	ldr	r3, [r3, #12]
 800d9b0:	f003 0320 	and.w	r3, r3, #32
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d10c      	bne.n	800d9d2 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2203      	movs	r2, #3
 800d9bc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800d9c0:	2303      	movs	r3, #3
 800d9c2:	e008      	b.n	800d9d6 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800d9c4:	4b06      	ldr	r3, [pc, #24]	@ (800d9e0 <HAL_RTC_WaitForSynchro+0x60>)
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	f003 0320 	and.w	r3, r3, #32
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d0e5      	beq.n	800d99c <HAL_RTC_WaitForSynchro+0x1c>
 800d9d0:	e000      	b.n	800d9d4 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800d9d2:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800d9d4:	2300      	movs	r3, #0
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3710      	adds	r7, #16
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	46007800 	.word	0x46007800

0800d9e4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b084      	sub	sp, #16
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800d9f0:	4b19      	ldr	r3, [pc, #100]	@ (800da58 <RTC_EnterInitMode+0x74>)
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d128      	bne.n	800da4e <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d9fc:	4b16      	ldr	r3, [pc, #88]	@ (800da58 <RTC_EnterInitMode+0x74>)
 800d9fe:	68db      	ldr	r3, [r3, #12]
 800da00:	4a15      	ldr	r2, [pc, #84]	@ (800da58 <RTC_EnterInitMode+0x74>)
 800da02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da06:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800da08:	f7f5 f936 	bl	8002c78 <HAL_GetTick>
 800da0c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800da0e:	e013      	b.n	800da38 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800da10:	f7f5 f932 	bl	8002c78 <HAL_GetTick>
 800da14:	4602      	mov	r2, r0
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	1ad3      	subs	r3, r2, r3
 800da1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800da1e:	d90b      	bls.n	800da38 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800da20:	4b0d      	ldr	r3, [pc, #52]	@ (800da58 <RTC_EnterInitMode+0x74>)
 800da22:	68db      	ldr	r3, [r3, #12]
 800da24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d10f      	bne.n	800da4c <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800da2c:	2303      	movs	r3, #3
 800da2e:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2203      	movs	r2, #3
 800da34:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800da38:	4b07      	ldr	r3, [pc, #28]	@ (800da58 <RTC_EnterInitMode+0x74>)
 800da3a:	68db      	ldr	r3, [r3, #12]
 800da3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da40:	2b00      	cmp	r3, #0
 800da42:	d104      	bne.n	800da4e <RTC_EnterInitMode+0x6a>
 800da44:	7bfb      	ldrb	r3, [r7, #15]
 800da46:	2b03      	cmp	r3, #3
 800da48:	d1e2      	bne.n	800da10 <RTC_EnterInitMode+0x2c>
 800da4a:	e000      	b.n	800da4e <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800da4c:	bf00      	nop
        }
      }
    }
  }

  return status;
 800da4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da50:	4618      	mov	r0, r3
 800da52:	3710      	adds	r7, #16
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	46007800 	.word	0x46007800

0800da5c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800da64:	2300      	movs	r3, #0
 800da66:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800da68:	4b1a      	ldr	r3, [pc, #104]	@ (800dad4 <RTC_ExitInitMode+0x78>)
 800da6a:	68db      	ldr	r3, [r3, #12]
 800da6c:	4a19      	ldr	r2, [pc, #100]	@ (800dad4 <RTC_ExitInitMode+0x78>)
 800da6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da72:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800da74:	4b17      	ldr	r3, [pc, #92]	@ (800dad4 <RTC_ExitInitMode+0x78>)
 800da76:	699b      	ldr	r3, [r3, #24]
 800da78:	f003 0320 	and.w	r3, r3, #32
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d10c      	bne.n	800da9a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7ff ff7d 	bl	800d980 <HAL_RTC_WaitForSynchro>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d01e      	beq.n	800daca <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2203      	movs	r2, #3
 800da90:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800da94:	2303      	movs	r3, #3
 800da96:	73fb      	strb	r3, [r7, #15]
 800da98:	e017      	b.n	800daca <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800da9a:	4b0e      	ldr	r3, [pc, #56]	@ (800dad4 <RTC_ExitInitMode+0x78>)
 800da9c:	699b      	ldr	r3, [r3, #24]
 800da9e:	4a0d      	ldr	r2, [pc, #52]	@ (800dad4 <RTC_ExitInitMode+0x78>)
 800daa0:	f023 0320 	bic.w	r3, r3, #32
 800daa4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f7ff ff6a 	bl	800d980 <HAL_RTC_WaitForSynchro>
 800daac:	4603      	mov	r3, r0
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d005      	beq.n	800dabe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2203      	movs	r2, #3
 800dab6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800daba:	2303      	movs	r3, #3
 800dabc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dabe:	4b05      	ldr	r3, [pc, #20]	@ (800dad4 <RTC_ExitInitMode+0x78>)
 800dac0:	699b      	ldr	r3, [r3, #24]
 800dac2:	4a04      	ldr	r2, [pc, #16]	@ (800dad4 <RTC_ExitInitMode+0x78>)
 800dac4:	f043 0320 	orr.w	r3, r3, #32
 800dac8:	6193      	str	r3, [r2, #24]
  }
  return status;
 800daca:	7bfb      	ldrb	r3, [r7, #15]
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3710      	adds	r7, #16
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	46007800 	.word	0x46007800

0800dad8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800dad8:	b480      	push	{r7}
 800dada:	b083      	sub	sp, #12
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	681a      	ldr	r2, [r3, #0]
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	4910      	ldr	r1, [pc, #64]	@ (800db2c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800daec:	4313      	orrs	r3, r2
 800daee:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	689a      	ldr	r2, [r3, #8]
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	68db      	ldr	r3, [r3, #12]
 800daf8:	431a      	orrs	r2, r3
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	699b      	ldr	r3, [r3, #24]
 800dafe:	490c      	ldr	r1, [pc, #48]	@ (800db30 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800db00:	4313      	orrs	r3, r2
 800db02:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800db04:	4b0a      	ldr	r3, [pc, #40]	@ (800db30 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800db06:	6a1b      	ldr	r3, [r3, #32]
 800db08:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	6919      	ldr	r1, [r3, #16]
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	695b      	ldr	r3, [r3, #20]
 800db14:	041b      	lsls	r3, r3, #16
 800db16:	430b      	orrs	r3, r1
 800db18:	4905      	ldr	r1, [pc, #20]	@ (800db30 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800db1a:	4313      	orrs	r3, r2
 800db1c:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800db1e:	2300      	movs	r3, #0
}
 800db20:	4618      	mov	r0, r3
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr
 800db2c:	46007800 	.word	0x46007800
 800db30:	46007c00 	.word	0x46007c00

0800db34 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b086      	sub	sp, #24
 800db38:	af00      	add	r7, sp, #0
 800db3a:	60f8      	str	r0, [r7, #12]
 800db3c:	60b9      	str	r1, [r7, #8]
 800db3e:	607a      	str	r2, [r7, #4]
 800db40:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	2b02      	cmp	r3, #2
 800db46:	d904      	bls.n	800db52 <HAL_SAI_InitProtocol+0x1e>
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	3b03      	subs	r3, #3
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d812      	bhi.n	800db76 <HAL_SAI_InitProtocol+0x42>
 800db50:	e008      	b.n	800db64 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	68b9      	ldr	r1, [r7, #8]
 800db58:	68f8      	ldr	r0, [r7, #12]
 800db5a:	f000 fc15 	bl	800e388 <SAI_InitI2S>
 800db5e:	4603      	mov	r3, r0
 800db60:	75fb      	strb	r3, [r7, #23]
      break;
 800db62:	e00b      	b.n	800db7c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	68b9      	ldr	r1, [r7, #8]
 800db6a:	68f8      	ldr	r0, [r7, #12]
 800db6c:	f000 fcbe 	bl	800e4ec <SAI_InitPCM>
 800db70:	4603      	mov	r3, r0
 800db72:	75fb      	strb	r3, [r7, #23]
      break;
 800db74:	e002      	b.n	800db7c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800db76:	2301      	movs	r3, #1
 800db78:	75fb      	strb	r3, [r7, #23]
      break;
 800db7a:	bf00      	nop
  }

  if (status == HAL_OK)
 800db7c:	7dfb      	ldrb	r3, [r7, #23]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d104      	bne.n	800db8c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800db82:	68f8      	ldr	r0, [r7, #12]
 800db84:	f000 f808 	bl	800db98 <HAL_SAI_Init>
 800db88:	4603      	mov	r3, r0
 800db8a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800db8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3718      	adds	r7, #24
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
	...

0800db98 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b08a      	sub	sp, #40	@ 0x28
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d101      	bne.n	800dbaa <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800dba6:	2301      	movs	r3, #1
 800dba8:	e1ce      	b.n	800df48 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d10e      	bne.n	800dbd2 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4a83      	ldr	r2, [pc, #524]	@ (800ddc8 <HAL_SAI_Init+0x230>)
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d107      	bne.n	800dbce <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d103      	bne.n	800dbce <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d001      	beq.n	800dbd2 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e1ba      	b.n	800df48 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d106      	bne.n	800dbec <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f7f4 fcbe 	bl	8002568 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f000 fd37 	bl	800e660 <SAI_Disable>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d001      	beq.n	800dbfc <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e1a5      	b.n	800df48 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2202      	movs	r2, #2
 800dc00:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	2b02      	cmp	r3, #2
 800dc0a:	d00c      	beq.n	800dc26 <HAL_SAI_Init+0x8e>
 800dc0c:	2b02      	cmp	r3, #2
 800dc0e:	d80d      	bhi.n	800dc2c <HAL_SAI_Init+0x94>
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d002      	beq.n	800dc1a <HAL_SAI_Init+0x82>
 800dc14:	2b01      	cmp	r3, #1
 800dc16:	d003      	beq.n	800dc20 <HAL_SAI_Init+0x88>
 800dc18:	e008      	b.n	800dc2c <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800dc1e:	e008      	b.n	800dc32 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800dc20:	2310      	movs	r3, #16
 800dc22:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800dc24:	e005      	b.n	800dc32 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800dc26:	2320      	movs	r3, #32
 800dc28:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800dc2a:	e002      	b.n	800dc32 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800dc30:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	689b      	ldr	r3, [r3, #8]
 800dc36:	2b03      	cmp	r3, #3
 800dc38:	d81d      	bhi.n	800dc76 <HAL_SAI_Init+0xde>
 800dc3a:	a201      	add	r2, pc, #4	@ (adr r2, 800dc40 <HAL_SAI_Init+0xa8>)
 800dc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc40:	0800dc51 	.word	0x0800dc51
 800dc44:	0800dc57 	.word	0x0800dc57
 800dc48:	0800dc5f 	.word	0x0800dc5f
 800dc4c:	0800dc67 	.word	0x0800dc67
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800dc50:	2300      	movs	r3, #0
 800dc52:	61fb      	str	r3, [r7, #28]
      break;
 800dc54:	e012      	b.n	800dc7c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800dc56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc5a:	61fb      	str	r3, [r7, #28]
      break;
 800dc5c:	e00e      	b.n	800dc7c <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800dc5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dc62:	61fb      	str	r3, [r7, #28]
      break;
 800dc64:	e00a      	b.n	800dc7c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800dc66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dc6a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800dc6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc6e:	f043 0301 	orr.w	r3, r3, #1
 800dc72:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800dc74:	e002      	b.n	800dc7c <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800dc76:	2300      	movs	r3, #0
 800dc78:	61fb      	str	r3, [r7, #28]
      break;
 800dc7a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a51      	ldr	r2, [pc, #324]	@ (800ddc8 <HAL_SAI_Init+0x230>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d004      	beq.n	800dc90 <HAL_SAI_Init+0xf8>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4a50      	ldr	r2, [pc, #320]	@ (800ddcc <HAL_SAI_Init+0x234>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d103      	bne.n	800dc98 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800dc90:	4a4f      	ldr	r2, [pc, #316]	@ (800ddd0 <HAL_SAI_Init+0x238>)
 800dc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc94:	6013      	str	r3, [r2, #0]
 800dc96:	e002      	b.n	800dc9e <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800dc98:	4a4e      	ldr	r2, [pc, #312]	@ (800ddd4 <HAL_SAI_Init+0x23c>)
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc9c:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6a1b      	ldr	r3, [r3, #32]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d077      	beq.n	800dd96 <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4a47      	ldr	r2, [pc, #284]	@ (800ddc8 <HAL_SAI_Init+0x230>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d004      	beq.n	800dcba <HAL_SAI_Init+0x122>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4a45      	ldr	r2, [pc, #276]	@ (800ddcc <HAL_SAI_Init+0x234>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d107      	bne.n	800dcca <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800dcba:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800dcbe:	f04f 0100 	mov.w	r1, #0
 800dcc2:	f7fe f925 	bl	800bf10 <HAL_RCCEx_GetPeriphCLKFreq>
 800dcc6:	61b8      	str	r0, [r7, #24]
 800dcc8:	e006      	b.n	800dcd8 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800dcca:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800dcce:	f04f 0100 	mov.w	r1, #0
 800dcd2:	f7fe f91d 	bl	800bf10 <HAL_RCCEx_GetPeriphCLKFreq>
 800dcd6:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	699b      	ldr	r3, [r3, #24]
 800dcdc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800dce0:	d120      	bne.n	800dd24 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dce6:	2b04      	cmp	r3, #4
 800dce8:	d102      	bne.n	800dcf0 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800dcea:	2340      	movs	r3, #64	@ 0x40
 800dcec:	613b      	str	r3, [r7, #16]
 800dcee:	e00a      	b.n	800dd06 <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcf4:	2b08      	cmp	r3, #8
 800dcf6:	d103      	bne.n	800dd00 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800dcf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dcfc:	613b      	str	r3, [r7, #16]
 800dcfe:	e002      	b.n	800dd06 <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd04:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800dd06:	69ba      	ldr	r2, [r7, #24]
 800dd08:	4613      	mov	r3, r2
 800dd0a:	009b      	lsls	r3, r3, #2
 800dd0c:	4413      	add	r3, r2
 800dd0e:	005b      	lsls	r3, r3, #1
 800dd10:	4619      	mov	r1, r3
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6a1b      	ldr	r3, [r3, #32]
 800dd16:	693a      	ldr	r2, [r7, #16]
 800dd18:	fb02 f303 	mul.w	r3, r2, r3
 800dd1c:	fbb1 f3f3 	udiv	r3, r1, r3
 800dd20:	617b      	str	r3, [r7, #20]
 800dd22:	e017      	b.n	800dd54 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dd2c:	d101      	bne.n	800dd32 <HAL_SAI_Init+0x19a>
 800dd2e:	2302      	movs	r3, #2
 800dd30:	e000      	b.n	800dd34 <HAL_SAI_Init+0x19c>
 800dd32:	2301      	movs	r3, #1
 800dd34:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800dd36:	69ba      	ldr	r2, [r7, #24]
 800dd38:	4613      	mov	r3, r2
 800dd3a:	009b      	lsls	r3, r3, #2
 800dd3c:	4413      	add	r3, r2
 800dd3e:	005b      	lsls	r3, r3, #1
 800dd40:	4619      	mov	r1, r3
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6a1b      	ldr	r3, [r3, #32]
 800dd46:	68fa      	ldr	r2, [r7, #12]
 800dd48:	fb02 f303 	mul.w	r3, r2, r3
 800dd4c:	021b      	lsls	r3, r3, #8
 800dd4e:	fbb1 f3f3 	udiv	r3, r1, r3
 800dd52:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	4a20      	ldr	r2, [pc, #128]	@ (800ddd8 <HAL_SAI_Init+0x240>)
 800dd58:	fba2 2303 	umull	r2, r3, r2, r3
 800dd5c:	08da      	lsrs	r2, r3, #3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800dd62:	6979      	ldr	r1, [r7, #20]
 800dd64:	4b1c      	ldr	r3, [pc, #112]	@ (800ddd8 <HAL_SAI_Init+0x240>)
 800dd66:	fba3 2301 	umull	r2, r3, r3, r1
 800dd6a:	08da      	lsrs	r2, r3, #3
 800dd6c:	4613      	mov	r3, r2
 800dd6e:	009b      	lsls	r3, r3, #2
 800dd70:	4413      	add	r3, r2
 800dd72:	005b      	lsls	r3, r3, #1
 800dd74:	1aca      	subs	r2, r1, r3
 800dd76:	2a08      	cmp	r2, #8
 800dd78:	d904      	bls.n	800dd84 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd7e:	1c5a      	adds	r2, r3, #1
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd88:	2b04      	cmp	r3, #4
 800dd8a:	d104      	bne.n	800dd96 <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd90:	085a      	lsrs	r2, r3, #1
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d003      	beq.n	800dda6 <HAL_SAI_Init+0x20e>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	2b02      	cmp	r3, #2
 800dda4:	d109      	bne.n	800ddba <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	d101      	bne.n	800ddb2 <HAL_SAI_Init+0x21a>
 800ddae:	2300      	movs	r3, #0
 800ddb0:	e001      	b.n	800ddb6 <HAL_SAI_Init+0x21e>
 800ddb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ddb6:	623b      	str	r3, [r7, #32]
 800ddb8:	e012      	b.n	800dde0 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	d10c      	bne.n	800dddc <HAL_SAI_Init+0x244>
 800ddc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ddc6:	e00a      	b.n	800ddde <HAL_SAI_Init+0x246>
 800ddc8:	40015404 	.word	0x40015404
 800ddcc:	40015424 	.word	0x40015424
 800ddd0:	40015400 	.word	0x40015400
 800ddd4:	40015800 	.word	0x40015800
 800ddd8:	cccccccd 	.word	0xcccccccd
 800dddc:	2300      	movs	r3, #0
 800ddde:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	6819      	ldr	r1, [r3, #0]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681a      	ldr	r2, [r3, #0]
 800ddea:	4b59      	ldr	r3, [pc, #356]	@ (800df50 <HAL_SAI_Init+0x3b8>)
 800ddec:	400b      	ands	r3, r1
 800ddee:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	6819      	ldr	r1, [r3, #0]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	685a      	ldr	r2, [r3, #4]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddfe:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800de04:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de0a:	431a      	orrs	r2, r3
 800de0c:	6a3b      	ldr	r3, [r7, #32]
 800de0e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800de10:	69fb      	ldr	r3, [r7, #28]
 800de12:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800de18:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	695b      	ldr	r3, [r3, #20]
 800de1e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800de24:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de2a:	051b      	lsls	r3, r3, #20
 800de2c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800de32:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	691b      	ldr	r3, [r3, #16]
 800de38:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	430a      	orrs	r2, r1
 800de40:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	687a      	ldr	r2, [r7, #4]
 800de4a:	6812      	ldr	r2, [r2, #0]
 800de4c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800de50:	f023 030f 	bic.w	r3, r3, #15
 800de54:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	6859      	ldr	r1, [r3, #4]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	69da      	ldr	r2, [r3, #28]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de64:	431a      	orrs	r2, r3
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de6a:	431a      	orrs	r2, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	430a      	orrs	r2, r1
 800de72:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	6899      	ldr	r1, [r3, #8]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681a      	ldr	r2, [r3, #0]
 800de7e:	4b35      	ldr	r3, [pc, #212]	@ (800df54 <HAL_SAI_Init+0x3bc>)
 800de80:	400b      	ands	r3, r1
 800de82:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	6899      	ldr	r1, [r3, #8]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de8e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800de94:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800de9a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800dea0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dea6:	3b01      	subs	r3, #1
 800dea8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800deaa:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	430a      	orrs	r2, r1
 800deb2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	68d9      	ldr	r1, [r3, #12]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681a      	ldr	r2, [r3, #0]
 800debe:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800dec2:	400b      	ands	r3, r1
 800dec4:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	68d9      	ldr	r1, [r3, #12]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ded4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800deda:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800dedc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dee2:	3b01      	subs	r3, #1
 800dee4:	021b      	lsls	r3, r3, #8
 800dee6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	430a      	orrs	r2, r1
 800deee:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	4a18      	ldr	r2, [pc, #96]	@ (800df58 <HAL_SAI_Init+0x3c0>)
 800def6:	4293      	cmp	r3, r2
 800def8:	d119      	bne.n	800df2e <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800defa:	4b18      	ldr	r3, [pc, #96]	@ (800df5c <HAL_SAI_Init+0x3c4>)
 800defc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800defe:	4a17      	ldr	r2, [pc, #92]	@ (800df5c <HAL_SAI_Init+0x3c4>)
 800df00:	f023 0301 	bic.w	r3, r3, #1
 800df04:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d10e      	bne.n	800df2e <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df18:	3b01      	subs	r3, #1
 800df1a:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800df1c:	490f      	ldr	r1, [pc, #60]	@ (800df5c <HAL_SAI_Init+0x3c4>)
 800df1e:	4313      	orrs	r3, r2
 800df20:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800df22:	4b0e      	ldr	r3, [pc, #56]	@ (800df5c <HAL_SAI_Init+0x3c4>)
 800df24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df26:	4a0d      	ldr	r2, [pc, #52]	@ (800df5c <HAL_SAI_Init+0x3c4>)
 800df28:	f043 0301 	orr.w	r3, r3, #1
 800df2c:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2200      	movs	r2, #0
 800df32:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2201      	movs	r2, #1
 800df3a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2200      	movs	r2, #0
 800df42:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800df46:	2300      	movs	r3, #0
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3728      	adds	r7, #40	@ 0x28
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	f005c010 	.word	0xf005c010
 800df54:	fff88000 	.word	0xfff88000
 800df58:	40015404 	.word	0x40015404
 800df5c:	40015400 	.word	0x40015400

0800df60 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b088      	sub	sp, #32
 800df64:	af00      	add	r7, sp, #0
 800df66:	60f8      	str	r0, [r7, #12]
 800df68:	60b9      	str	r1, [r7, #8]
 800df6a:	4613      	mov	r3, r2
 800df6c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800df6e:	f7f4 fe83 	bl	8002c78 <HAL_GetTick>
 800df72:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d002      	beq.n	800df80 <HAL_SAI_Transmit_DMA+0x20>
 800df7a:	88fb      	ldrh	r3, [r7, #6]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d101      	bne.n	800df84 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800df80:	2301      	movs	r3, #1
 800df82:	e0e4      	b.n	800e14e <HAL_SAI_Transmit_DMA+0x1ee>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800df8a:	b2db      	uxtb	r3, r3
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	f040 80dd 	bne.w	800e14c <HAL_SAI_Transmit_DMA+0x1ec>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d101      	bne.n	800dfa0 <HAL_SAI_Transmit_DMA+0x40>
 800df9c:	2302      	movs	r3, #2
 800df9e:	e0d6      	b.n	800e14e <HAL_SAI_Transmit_DMA+0x1ee>
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	68ba      	ldr	r2, [r7, #8]
 800dfac:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	88fa      	ldrh	r2, [r7, #6]
 800dfb2:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	88fa      	ldrh	r2, [r7, #6]
 800dfba:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2212      	movs	r2, #18
 800dfca:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfd4:	4a60      	ldr	r2, [pc, #384]	@ (800e158 <HAL_SAI_Transmit_DMA+0x1f8>)
 800dfd6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfde:	4a5f      	ldr	r2, [pc, #380]	@ (800e15c <HAL_SAI_Transmit_DMA+0x1fc>)
 800dfe0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfe8:	4a5d      	ldr	r2, [pc, #372]	@ (800e160 <HAL_SAI_Transmit_DMA+0x200>)
 800dfea:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dff2:	2200      	movs	r2, #0
 800dff4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For transmission, the DMA source is data buffer.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dffa:	2b40      	cmp	r3, #64	@ 0x40
 800dffc:	d106      	bne.n	800e00c <HAL_SAI_Transmit_DMA+0xac>
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e002:	2b00      	cmp	r3, #0
 800e004:	d102      	bne.n	800e00c <HAL_SAI_Transmit_DMA+0xac>
    {
      dmaSrcSize = (uint32_t) Size;
 800e006:	88fb      	ldrh	r3, [r7, #6]
 800e008:	61bb      	str	r3, [r7, #24]
 800e00a:	e00a      	b.n	800e022 <HAL_SAI_Transmit_DMA+0xc2>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e010:	2b80      	cmp	r3, #128	@ 0x80
 800e012:	d803      	bhi.n	800e01c <HAL_SAI_Transmit_DMA+0xbc>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800e014:	88fb      	ldrh	r3, [r7, #6]
 800e016:	005b      	lsls	r3, r3, #1
 800e018:	61bb      	str	r3, [r7, #24]
 800e01a:	e002      	b.n	800e022 <HAL_SAI_Transmit_DMA+0xc2>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800e01c:	88fb      	ldrh	r3, [r7, #6]
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	61bb      	str	r3, [r7, #24]
    }

    /* Enable the Tx DMA Stream */
    if ((hsai->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e02a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d02d      	beq.n	800e08e <HAL_SAI_Transmit_DMA+0x12e>
    {
      if (hsai->hdmatx->LinkedListQueue != NULL)
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d021      	beq.n	800e082 <HAL_SAI_Transmit_DMA+0x122>
      {
        /* Set DMA data size */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	69ba      	ldr	r2, [r7, #24]
 800e04a:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f103 021c 	add.w	r2, r3, #28
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e06a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmatx);
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e076:	4618      	mov	r0, r3
 800e078:	f7f8 fa8c 	bl	8006594 <HAL_DMAEx_List_Start_IT>
 800e07c:	4603      	mov	r3, r0
 800e07e:	77fb      	strb	r3, [r7, #31]
 800e080:	e014      	b.n	800e0ac <HAL_SAI_Transmit_DMA+0x14c>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2200      	movs	r2, #0
 800e086:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800e08a:	2301      	movs	r3, #1
 800e08c:	e05f      	b.n	800e14e <HAL_SAI_Transmit_DMA+0x1ee>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, dmaSrcSize);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e098:	4619      	mov	r1, r3
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	331c      	adds	r3, #28
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	69bb      	ldr	r3, [r7, #24]
 800e0a4:	f7f7 fae4 	bl	8005670 <HAL_DMA_Start_IT>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	77fb      	strb	r3, [r7, #31]
    }

    if (status != HAL_OK)
 800e0ac:	7ffb      	ldrb	r3, [r7, #31]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d005      	beq.n	800e0be <HAL_SAI_Transmit_DMA+0x15e>
    {
      __HAL_UNLOCK(hsai);
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	e047      	b.n	800e14e <HAL_SAI_Transmit_DMA+0x1ee>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e0be:	2100      	movs	r1, #0
 800e0c0:	68f8      	ldr	r0, [r7, #12]
 800e0c2:	f000 fa95 	bl	800e5f0 <SAI_InterruptFlag>
 800e0c6:	4601      	mov	r1, r0
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	691a      	ldr	r2, [r3, #16]
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	430a      	orrs	r2, r1
 800e0d4:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e0e4:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e0e6:	e015      	b.n	800e114 <HAL_SAI_Transmit_DMA+0x1b4>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800e0e8:	f7f4 fdc6 	bl	8002c78 <HAL_GetTick>
 800e0ec:	4602      	mov	r2, r0
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	1ad3      	subs	r3, r2, r3
 800e0f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e0f6:	d90d      	bls.n	800e114 <HAL_SAI_Transmit_DMA+0x1b4>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e0fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	2200      	movs	r2, #0
 800e10c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800e110:	2303      	movs	r3, #3
 800e112:	e01c      	b.n	800e14e <HAL_SAI_Transmit_DMA+0x1ee>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	695b      	ldr	r3, [r3, #20]
 800e11a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d0e2      	beq.n	800e0e8 <HAL_SAI_Transmit_DMA+0x188>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d107      	bne.n	800e140 <HAL_SAI_Transmit_DMA+0x1e0>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e13e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2200      	movs	r2, #0
 800e144:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e148:	2300      	movs	r3, #0
 800e14a:	e000      	b.n	800e14e <HAL_SAI_Transmit_DMA+0x1ee>
  }
  else
  {
    return HAL_BUSY;
 800e14c:	2302      	movs	r3, #2
  }
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3720      	adds	r7, #32
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	0800e733 	.word	0x0800e733
 800e15c:	0800e6d5 	.word	0x0800e6d5
 800e160:	0800e7c9 	.word	0x0800e7c9

0800e164 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b086      	sub	sp, #24
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	4613      	mov	r3, r2
 800e170:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d002      	beq.n	800e17e <HAL_SAI_Receive_DMA+0x1a>
 800e178:	88fb      	ldrh	r3, [r7, #6]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d101      	bne.n	800e182 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800e17e:	2301      	movs	r3, #1
 800e180:	e0c6      	b.n	800e310 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	f040 80bf 	bne.w	800e30e <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e196:	2b01      	cmp	r3, #1
 800e198:	d101      	bne.n	800e19e <HAL_SAI_Receive_DMA+0x3a>
 800e19a:	2302      	movs	r3, #2
 800e19c:	e0b8      	b.n	800e310 <HAL_SAI_Receive_DMA+0x1ac>
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	68ba      	ldr	r2, [r7, #8]
 800e1aa:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	88fa      	ldrh	r2, [r7, #6]
 800e1b0:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	88fa      	ldrh	r2, [r7, #6]
 800e1b8:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	2222      	movs	r2, #34	@ 0x22
 800e1c8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e1d2:	4a51      	ldr	r2, [pc, #324]	@ (800e318 <HAL_SAI_Receive_DMA+0x1b4>)
 800e1d4:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e1dc:	4a4f      	ldr	r2, [pc, #316]	@ (800e31c <HAL_SAI_Receive_DMA+0x1b8>)
 800e1de:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e1e6:	4a4e      	ldr	r2, [pc, #312]	@ (800e320 <HAL_SAI_Receive_DMA+0x1bc>)
 800e1e8:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e1f8:	2b40      	cmp	r3, #64	@ 0x40
 800e1fa:	d106      	bne.n	800e20a <HAL_SAI_Receive_DMA+0xa6>
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e200:	2b00      	cmp	r3, #0
 800e202:	d102      	bne.n	800e20a <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800e204:	88fb      	ldrh	r3, [r7, #6]
 800e206:	613b      	str	r3, [r7, #16]
 800e208:	e00a      	b.n	800e220 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e20e:	2b80      	cmp	r3, #128	@ 0x80
 800e210:	d803      	bhi.n	800e21a <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800e212:	88fb      	ldrh	r3, [r7, #6]
 800e214:	005b      	lsls	r3, r3, #1
 800e216:	613b      	str	r3, [r7, #16]
 800e218:	e002      	b.n	800e220 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800e21a:	88fb      	ldrh	r3, [r7, #6]
 800e21c:	009b      	lsls	r3, r3, #2
 800e21e:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d02d      	beq.n	800e28c <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d021      	beq.n	800e280 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	693a      	ldr	r2, [r7, #16]
 800e248:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f103 021c 	add.w	r2, r3, #28
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e274:	4618      	mov	r0, r3
 800e276:	f7f8 f98d 	bl	8006594 <HAL_DMAEx_List_Start_IT>
 800e27a:	4603      	mov	r3, r0
 800e27c:	75fb      	strb	r3, [r7, #23]
 800e27e:	e014      	b.n	800e2aa <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2200      	movs	r2, #0
 800e284:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800e288:	2301      	movs	r3, #1
 800e28a:	e041      	b.n	800e310 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	331c      	adds	r3, #28
 800e298:	4619      	mov	r1, r3
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e29e:	461a      	mov	r2, r3
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	f7f7 f9e5 	bl	8005670 <HAL_DMA_Start_IT>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800e2aa:	7dfb      	ldrb	r3, [r7, #23]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d005      	beq.n	800e2bc <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	e029      	b.n	800e310 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e2bc:	2100      	movs	r1, #0
 800e2be:	68f8      	ldr	r0, [r7, #12]
 800e2c0:	f000 f996 	bl	800e5f0 <SAI_InterruptFlag>
 800e2c4:	4601      	mov	r1, r0
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	691a      	ldr	r2, [r3, #16]
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	430a      	orrs	r2, r1
 800e2d2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e2e2:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d107      	bne.n	800e302 <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	681a      	ldr	r2, [r3, #0]
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e300:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2200      	movs	r2, #0
 800e306:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e30a:	2300      	movs	r3, #0
 800e30c:	e000      	b.n	800e310 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800e30e:	2302      	movs	r3, #2
  }
}
 800e310:	4618      	mov	r0, r3
 800e312:	3718      	adds	r7, #24
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}
 800e318:	0800e7ad 	.word	0x0800e7ad
 800e31c:	0800e74f 	.word	0x0800e74f
 800e320:	0800e7c9 	.word	0x0800e7c9

0800e324 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800e324:	b480      	push	{r7}
 800e326:	b083      	sub	sp, #12
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800e32c:	bf00      	nop
 800e32e:	370c      	adds	r7, #12
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800e338:	b480      	push	{r7}
 800e33a:	b083      	sub	sp, #12
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e340:	bf00      	nop
 800e342:	370c      	adds	r7, #12
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr

0800e34c <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800e34c:	b480      	push	{r7}
 800e34e:	b083      	sub	sp, #12
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 800e354:	bf00      	nop
 800e356:	370c      	adds	r7, #12
 800e358:	46bd      	mov	sp, r7
 800e35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35e:	4770      	bx	lr

0800e360 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800e360:	b480      	push	{r7}
 800e362:	b083      	sub	sp, #12
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 800e368:	bf00      	nop
 800e36a:	370c      	adds	r7, #12
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr

0800e374 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800e374:	b480      	push	{r7}
 800e376:	b083      	sub	sp, #12
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800e37c:	bf00      	nop
 800e37e:	370c      	adds	r7, #12
 800e380:	46bd      	mov	sp, r7
 800e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e386:	4770      	bx	lr

0800e388 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e388:	b480      	push	{r7}
 800e38a:	b087      	sub	sp, #28
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	60b9      	str	r1, [r7, #8]
 800e392:	607a      	str	r2, [r7, #4]
 800e394:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e396:	2300      	movs	r3, #0
 800e398:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2200      	movs	r2, #0
 800e39e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	685b      	ldr	r3, [r3, #4]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d003      	beq.n	800e3b6 <SAI_InitI2S+0x2e>
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	2b02      	cmp	r3, #2
 800e3b4:	d103      	bne.n	800e3be <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	651a      	str	r2, [r3, #80]	@ 0x50
 800e3bc:	e002      	b.n	800e3c4 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e3ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e3d2:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	683a      	ldr	r2, [r7, #0]
 800e3de:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	f003 0301 	and.w	r3, r3, #1
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d001      	beq.n	800e3ee <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	e077      	b.n	800e4de <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d107      	bne.n	800e404 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e400:	665a      	str	r2, [r3, #100]	@ 0x64
 800e402:	e006      	b.n	800e412 <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e40a:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	2200      	movs	r2, #0
 800e410:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2b03      	cmp	r3, #3
 800e416:	d84f      	bhi.n	800e4b8 <SAI_InitI2S+0x130>
 800e418:	a201      	add	r2, pc, #4	@ (adr r2, 800e420 <SAI_InitI2S+0x98>)
 800e41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e41e:	bf00      	nop
 800e420:	0800e431 	.word	0x0800e431
 800e424:	0800e453 	.word	0x0800e453
 800e428:	0800e475 	.word	0x0800e475
 800e42c:	0800e497 	.word	0x0800e497
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2280      	movs	r2, #128	@ 0x80
 800e434:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	085b      	lsrs	r3, r3, #1
 800e43a:	015a      	lsls	r2, r3, #5
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	085b      	lsrs	r3, r3, #1
 800e444:	011a      	lsls	r2, r3, #4
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2240      	movs	r2, #64	@ 0x40
 800e44e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e450:	e035      	b.n	800e4be <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2280      	movs	r2, #128	@ 0x80
 800e456:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	085b      	lsrs	r3, r3, #1
 800e45c:	019a      	lsls	r2, r3, #6
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	085b      	lsrs	r3, r3, #1
 800e466:	015a      	lsls	r2, r3, #5
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	2280      	movs	r2, #128	@ 0x80
 800e470:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e472:	e024      	b.n	800e4be <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	22c0      	movs	r2, #192	@ 0xc0
 800e478:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	085b      	lsrs	r3, r3, #1
 800e47e:	019a      	lsls	r2, r3, #6
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	085b      	lsrs	r3, r3, #1
 800e488:	015a      	lsls	r2, r3, #5
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	2280      	movs	r2, #128	@ 0x80
 800e492:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e494:	e013      	b.n	800e4be <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	22e0      	movs	r2, #224	@ 0xe0
 800e49a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	085b      	lsrs	r3, r3, #1
 800e4a0:	019a      	lsls	r2, r3, #6
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	085b      	lsrs	r3, r3, #1
 800e4aa:	015a      	lsls	r2, r3, #5
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2280      	movs	r2, #128	@ 0x80
 800e4b4:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e4b6:	e002      	b.n	800e4be <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	75fb      	strb	r3, [r7, #23]
      break;
 800e4bc:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	2b02      	cmp	r3, #2
 800e4c2:	d10b      	bne.n	800e4dc <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2b01      	cmp	r3, #1
 800e4c8:	d102      	bne.n	800e4d0 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	2210      	movs	r2, #16
 800e4ce:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2b02      	cmp	r3, #2
 800e4d4:	d102      	bne.n	800e4dc <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2208      	movs	r2, #8
 800e4da:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800e4dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	371c      	adds	r7, #28
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e8:	4770      	bx	lr
 800e4ea:	bf00      	nop

0800e4ec <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b087      	sub	sp, #28
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	607a      	str	r2, [r7, #4]
 800e4f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2200      	movs	r2, #0
 800e502:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2200      	movs	r2, #0
 800e508:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d003      	beq.n	800e51a <SAI_InitPCM+0x2e>
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	2b02      	cmp	r3, #2
 800e518:	d103      	bne.n	800e522 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2201      	movs	r2, #1
 800e51e:	651a      	str	r2, [r3, #80]	@ 0x50
 800e520:	e002      	b.n	800e528 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2200      	movs	r2, #0
 800e526:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	2200      	movs	r2, #0
 800e52c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e534:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e53c:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2200      	movs	r2, #0
 800e542:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	683a      	ldr	r2, [r7, #0]
 800e548:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e550:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	2b04      	cmp	r3, #4
 800e556:	d103      	bne.n	800e560 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2201      	movs	r2, #1
 800e55c:	659a      	str	r2, [r3, #88]	@ 0x58
 800e55e:	e002      	b.n	800e566 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	220d      	movs	r2, #13
 800e564:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2b03      	cmp	r3, #3
 800e56a:	d837      	bhi.n	800e5dc <SAI_InitPCM+0xf0>
 800e56c:	a201      	add	r2, pc, #4	@ (adr r2, 800e574 <SAI_InitPCM+0x88>)
 800e56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e572:	bf00      	nop
 800e574:	0800e585 	.word	0x0800e585
 800e578:	0800e59b 	.word	0x0800e59b
 800e57c:	0800e5b1 	.word	0x0800e5b1
 800e580:	0800e5c7 	.word	0x0800e5c7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2280      	movs	r2, #128	@ 0x80
 800e588:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	011a      	lsls	r2, r3, #4
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	2240      	movs	r2, #64	@ 0x40
 800e596:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e598:	e023      	b.n	800e5e2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2280      	movs	r2, #128	@ 0x80
 800e59e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	015a      	lsls	r2, r3, #5
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	2280      	movs	r2, #128	@ 0x80
 800e5ac:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e5ae:	e018      	b.n	800e5e2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	22c0      	movs	r2, #192	@ 0xc0
 800e5b4:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	015a      	lsls	r2, r3, #5
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	2280      	movs	r2, #128	@ 0x80
 800e5c2:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e5c4:	e00d      	b.n	800e5e2 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	22e0      	movs	r2, #224	@ 0xe0
 800e5ca:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	015a      	lsls	r2, r3, #5
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2280      	movs	r2, #128	@ 0x80
 800e5d8:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e5da:	e002      	b.n	800e5e2 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	75fb      	strb	r3, [r7, #23]
      break;
 800e5e0:	bf00      	nop
  }

  return status;
 800e5e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	371c      	adds	r7, #28
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ee:	4770      	bx	lr

0800e5f0 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b085      	sub	sp, #20
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	460b      	mov	r3, r1
 800e5fa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800e600:	78fb      	ldrb	r3, [r7, #3]
 800e602:	2b01      	cmp	r3, #1
 800e604:	d103      	bne.n	800e60e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f043 0308 	orr.w	r3, r3, #8
 800e60c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e612:	2b08      	cmp	r3, #8
 800e614:	d10b      	bne.n	800e62e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e61a:	2b03      	cmp	r3, #3
 800e61c:	d003      	beq.n	800e626 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	2b01      	cmp	r3, #1
 800e624:	d103      	bne.n	800e62e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f043 0310 	orr.w	r3, r3, #16
 800e62c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	2b03      	cmp	r3, #3
 800e634:	d003      	beq.n	800e63e <SAI_InterruptFlag+0x4e>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	2b02      	cmp	r3, #2
 800e63c:	d104      	bne.n	800e648 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e644:	60fb      	str	r3, [r7, #12]
 800e646:	e003      	b.n	800e650 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	f043 0304 	orr.w	r3, r3, #4
 800e64e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800e650:	68fb      	ldr	r3, [r7, #12]
}
 800e652:	4618      	mov	r0, r3
 800e654:	3714      	adds	r7, #20
 800e656:	46bd      	mov	sp, r7
 800e658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65c:	4770      	bx	lr
	...

0800e660 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800e660:	b480      	push	{r7}
 800e662:	b085      	sub	sp, #20
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800e668:	4b18      	ldr	r3, [pc, #96]	@ (800e6cc <SAI_Disable+0x6c>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4a18      	ldr	r2, [pc, #96]	@ (800e6d0 <SAI_Disable+0x70>)
 800e66e:	fba2 2303 	umull	r2, r3, r2, r3
 800e672:	0b1b      	lsrs	r3, r3, #12
 800e674:	009b      	lsls	r3, r3, #2
 800e676:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800e678:	2300      	movs	r3, #0
 800e67a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	681a      	ldr	r2, [r3, #0]
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800e68a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d10a      	bne.n	800e6a8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e698:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800e6a2:	2303      	movs	r3, #3
 800e6a4:	72fb      	strb	r3, [r7, #11]
      break;
 800e6a6:	e009      	b.n	800e6bc <SAI_Disable+0x5c>
    }
    count--;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d1e7      	bne.n	800e68c <SAI_Disable+0x2c>

  return status;
 800e6bc:	7afb      	ldrb	r3, [r7, #11]
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3714      	adds	r7, #20
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c8:	4770      	bx	lr
 800e6ca:	bf00      	nop
 800e6cc:	20000000 	.word	0x20000000
 800e6d0:	95cbec1b 	.word	0x95cbec1b

0800e6d4 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e6e0:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e6e6:	2b81      	cmp	r3, #129	@ 0x81
 800e6e8:	d01c      	beq.n	800e724 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	681a      	ldr	r2, [r3, #0]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800e700:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e702:	2100      	movs	r1, #0
 800e704:	68f8      	ldr	r0, [r7, #12]
 800e706:	f7ff ff73 	bl	800e5f0 <SAI_InterruptFlag>
 800e70a:	4603      	mov	r3, r0
 800e70c:	43d9      	mvns	r1, r3
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	691a      	ldr	r2, [r3, #16]
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	400a      	ands	r2, r1
 800e71a:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	2201      	movs	r2, #1
 800e720:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800e724:	68f8      	ldr	r0, [r7, #12]
 800e726:	f7ff fdfd 	bl	800e324 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e72a:	bf00      	nop
 800e72c:	3710      	adds	r7, #16
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}

0800e732 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e732:	b580      	push	{r7, lr}
 800e734:	b084      	sub	sp, #16
 800e736:	af00      	add	r7, sp, #0
 800e738:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e73e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800e740:	68f8      	ldr	r0, [r7, #12]
 800e742:	f7ff fdf9 	bl	800e338 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e746:	bf00      	nop
 800e748:	3710      	adds	r7, #16
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}

0800e74e <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800e74e:	b580      	push	{r7, lr}
 800e750:	b084      	sub	sp, #16
 800e752:	af00      	add	r7, sp, #0
 800e754:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e75a:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e760:	2b81      	cmp	r3, #129	@ 0x81
 800e762:	d01c      	beq.n	800e79e <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	681a      	ldr	r2, [r3, #0]
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800e772:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2200      	movs	r2, #0
 800e778:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e77c:	2100      	movs	r1, #0
 800e77e:	68f8      	ldr	r0, [r7, #12]
 800e780:	f7ff ff36 	bl	800e5f0 <SAI_InterruptFlag>
 800e784:	4603      	mov	r3, r0
 800e786:	43d9      	mvns	r1, r3
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	691a      	ldr	r2, [r3, #16]
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	400a      	ands	r2, r1
 800e794:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2201      	movs	r2, #1
 800e79a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800e79e:	68f8      	ldr	r0, [r7, #12]
 800e7a0:	f7ff fdd4 	bl	800e34c <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e7a4:	bf00      	nop
 800e7a6:	3710      	adds	r7, #16
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b084      	sub	sp, #16
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e7b8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800e7ba:	68f8      	ldr	r0, [r7, #12]
 800e7bc:	f7ff fdd0 	bl	800e360 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e7c0:	bf00      	nop
 800e7c2:	3710      	adds	r7, #16
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}

0800e7c8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e7d4:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e7dc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800e7f4:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800e7f6:	68f8      	ldr	r0, [r7, #12]
 800e7f8:	f7ff ff32 	bl	800e660 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2201      	movs	r2, #1
 800e800:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2200      	movs	r2, #0
 800e808:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800e80c:	68f8      	ldr	r0, [r7, #12]
 800e80e:	f7ff fdb1 	bl	800e374 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e812:	bf00      	nop
 800e814:	3710      	adds	r7, #16
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}

0800e81a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e81a:	b580      	push	{r7, lr}
 800e81c:	b082      	sub	sp, #8
 800e81e:	af00      	add	r7, sp, #0
 800e820:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d101      	bne.n	800e82c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e828:	2301      	movs	r3, #1
 800e82a:	e049      	b.n	800e8c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e832:	b2db      	uxtb	r3, r3
 800e834:	2b00      	cmp	r3, #0
 800e836:	d106      	bne.n	800e846 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2200      	movs	r2, #0
 800e83c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f7f3 fd2d 	bl	80022a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2202      	movs	r2, #2
 800e84a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681a      	ldr	r2, [r3, #0]
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	3304      	adds	r3, #4
 800e856:	4619      	mov	r1, r3
 800e858:	4610      	mov	r0, r2
 800e85a:	f000 fb3b 	bl	800eed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2201      	movs	r2, #1
 800e862:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2201      	movs	r2, #1
 800e86a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2201      	movs	r2, #1
 800e872:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2201      	movs	r2, #1
 800e87a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2201      	movs	r2, #1
 800e882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2201      	movs	r2, #1
 800e88a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2201      	movs	r2, #1
 800e892:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2201      	movs	r2, #1
 800e89a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2201      	movs	r2, #1
 800e8a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2201      	movs	r2, #1
 800e8aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e8be:	2300      	movs	r3, #0
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3708      	adds	r7, #8
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}

0800e8c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b085      	sub	sp, #20
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	2b01      	cmp	r3, #1
 800e8da:	d001      	beq.n	800e8e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e8dc:	2301      	movs	r3, #1
 800e8de:	e06a      	b.n	800e9b6 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2202      	movs	r2, #2
 800e8e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	4a35      	ldr	r2, [pc, #212]	@ (800e9c4 <HAL_TIM_Base_Start+0xfc>)
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d040      	beq.n	800e974 <HAL_TIM_Base_Start+0xac>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	4a34      	ldr	r2, [pc, #208]	@ (800e9c8 <HAL_TIM_Base_Start+0x100>)
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	d03b      	beq.n	800e974 <HAL_TIM_Base_Start+0xac>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e904:	d036      	beq.n	800e974 <HAL_TIM_Base_Start+0xac>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e90e:	d031      	beq.n	800e974 <HAL_TIM_Base_Start+0xac>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4a2d      	ldr	r2, [pc, #180]	@ (800e9cc <HAL_TIM_Base_Start+0x104>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d02c      	beq.n	800e974 <HAL_TIM_Base_Start+0xac>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	4a2c      	ldr	r2, [pc, #176]	@ (800e9d0 <HAL_TIM_Base_Start+0x108>)
 800e920:	4293      	cmp	r3, r2
 800e922:	d027      	beq.n	800e974 <HAL_TIM_Base_Start+0xac>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	4a2a      	ldr	r2, [pc, #168]	@ (800e9d4 <HAL_TIM_Base_Start+0x10c>)
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d022      	beq.n	800e974 <HAL_TIM_Base_Start+0xac>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	4a29      	ldr	r2, [pc, #164]	@ (800e9d8 <HAL_TIM_Base_Start+0x110>)
 800e934:	4293      	cmp	r3, r2
 800e936:	d01d      	beq.n	800e974 <HAL_TIM_Base_Start+0xac>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4a27      	ldr	r2, [pc, #156]	@ (800e9dc <HAL_TIM_Base_Start+0x114>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	d018      	beq.n	800e974 <HAL_TIM_Base_Start+0xac>
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	4a26      	ldr	r2, [pc, #152]	@ (800e9e0 <HAL_TIM_Base_Start+0x118>)
 800e948:	4293      	cmp	r3, r2
 800e94a:	d013      	beq.n	800e974 <HAL_TIM_Base_Start+0xac>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a24      	ldr	r2, [pc, #144]	@ (800e9e4 <HAL_TIM_Base_Start+0x11c>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d00e      	beq.n	800e974 <HAL_TIM_Base_Start+0xac>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	4a23      	ldr	r2, [pc, #140]	@ (800e9e8 <HAL_TIM_Base_Start+0x120>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d009      	beq.n	800e974 <HAL_TIM_Base_Start+0xac>
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	4a21      	ldr	r2, [pc, #132]	@ (800e9ec <HAL_TIM_Base_Start+0x124>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d004      	beq.n	800e974 <HAL_TIM_Base_Start+0xac>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	4a20      	ldr	r2, [pc, #128]	@ (800e9f0 <HAL_TIM_Base_Start+0x128>)
 800e970:	4293      	cmp	r3, r2
 800e972:	d115      	bne.n	800e9a0 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	689a      	ldr	r2, [r3, #8]
 800e97a:	4b1e      	ldr	r3, [pc, #120]	@ (800e9f4 <HAL_TIM_Base_Start+0x12c>)
 800e97c:	4013      	ands	r3, r2
 800e97e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	2b06      	cmp	r3, #6
 800e984:	d015      	beq.n	800e9b2 <HAL_TIM_Base_Start+0xea>
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e98c:	d011      	beq.n	800e9b2 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f042 0201 	orr.w	r2, r2, #1
 800e99c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e99e:	e008      	b.n	800e9b2 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	681a      	ldr	r2, [r3, #0]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f042 0201 	orr.w	r2, r2, #1
 800e9ae:	601a      	str	r2, [r3, #0]
 800e9b0:	e000      	b.n	800e9b4 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e9b4:	2300      	movs	r3, #0
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3714      	adds	r7, #20
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	4770      	bx	lr
 800e9c2:	bf00      	nop
 800e9c4:	40012c00 	.word	0x40012c00
 800e9c8:	50012c00 	.word	0x50012c00
 800e9cc:	40000400 	.word	0x40000400
 800e9d0:	50000400 	.word	0x50000400
 800e9d4:	40000800 	.word	0x40000800
 800e9d8:	50000800 	.word	0x50000800
 800e9dc:	40000c00 	.word	0x40000c00
 800e9e0:	50000c00 	.word	0x50000c00
 800e9e4:	40013400 	.word	0x40013400
 800e9e8:	50013400 	.word	0x50013400
 800e9ec:	40014000 	.word	0x40014000
 800e9f0:	50014000 	.word	0x50014000
 800e9f4:	00010007 	.word	0x00010007

0800e9f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b082      	sub	sp, #8
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d101      	bne.n	800ea0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ea06:	2301      	movs	r3, #1
 800ea08:	e049      	b.n	800ea9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ea10:	b2db      	uxtb	r3, r3
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d106      	bne.n	800ea24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f7f3 fc1c 	bl	800225c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2202      	movs	r2, #2
 800ea28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681a      	ldr	r2, [r3, #0]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	3304      	adds	r3, #4
 800ea34:	4619      	mov	r1, r3
 800ea36:	4610      	mov	r0, r2
 800ea38:	f000 fa4c 	bl	800eed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2201      	movs	r2, #1
 800ea40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2201      	movs	r2, #1
 800ea48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2201      	movs	r2, #1
 800ea50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2201      	movs	r2, #1
 800ea58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2201      	movs	r2, #1
 800ea60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2201      	movs	r2, #1
 800ea68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2201      	movs	r2, #1
 800ea70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2201      	movs	r2, #1
 800ea78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2201      	movs	r2, #1
 800ea80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2201      	movs	r2, #1
 800ea88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2201      	movs	r2, #1
 800ea90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2201      	movs	r2, #1
 800ea98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ea9c:	2300      	movs	r3, #0
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3708      	adds	r7, #8
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}
	...

0800eaa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b086      	sub	sp, #24
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	60b9      	str	r1, [r7, #8]
 800eab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eab4:	2300      	movs	r3, #0
 800eab6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d101      	bne.n	800eac6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eac2:	2302      	movs	r3, #2
 800eac4:	e0ff      	b.n	800ecc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2201      	movs	r2, #1
 800eaca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2b14      	cmp	r3, #20
 800ead2:	f200 80f0 	bhi.w	800ecb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ead6:	a201      	add	r2, pc, #4	@ (adr r2, 800eadc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ead8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eadc:	0800eb31 	.word	0x0800eb31
 800eae0:	0800ecb7 	.word	0x0800ecb7
 800eae4:	0800ecb7 	.word	0x0800ecb7
 800eae8:	0800ecb7 	.word	0x0800ecb7
 800eaec:	0800eb71 	.word	0x0800eb71
 800eaf0:	0800ecb7 	.word	0x0800ecb7
 800eaf4:	0800ecb7 	.word	0x0800ecb7
 800eaf8:	0800ecb7 	.word	0x0800ecb7
 800eafc:	0800ebb3 	.word	0x0800ebb3
 800eb00:	0800ecb7 	.word	0x0800ecb7
 800eb04:	0800ecb7 	.word	0x0800ecb7
 800eb08:	0800ecb7 	.word	0x0800ecb7
 800eb0c:	0800ebf3 	.word	0x0800ebf3
 800eb10:	0800ecb7 	.word	0x0800ecb7
 800eb14:	0800ecb7 	.word	0x0800ecb7
 800eb18:	0800ecb7 	.word	0x0800ecb7
 800eb1c:	0800ec35 	.word	0x0800ec35
 800eb20:	0800ecb7 	.word	0x0800ecb7
 800eb24:	0800ecb7 	.word	0x0800ecb7
 800eb28:	0800ecb7 	.word	0x0800ecb7
 800eb2c:	0800ec75 	.word	0x0800ec75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	68b9      	ldr	r1, [r7, #8]
 800eb36:	4618      	mov	r0, r3
 800eb38:	f000 fad2 	bl	800f0e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	699a      	ldr	r2, [r3, #24]
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	f042 0208 	orr.w	r2, r2, #8
 800eb4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	699a      	ldr	r2, [r3, #24]
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	f022 0204 	bic.w	r2, r2, #4
 800eb5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	6999      	ldr	r1, [r3, #24]
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	691a      	ldr	r2, [r3, #16]
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	430a      	orrs	r2, r1
 800eb6c:	619a      	str	r2, [r3, #24]
      break;
 800eb6e:	e0a5      	b.n	800ecbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	68b9      	ldr	r1, [r7, #8]
 800eb76:	4618      	mov	r0, r3
 800eb78:	f000 fb74 	bl	800f264 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	699a      	ldr	r2, [r3, #24]
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eb8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	699a      	ldr	r2, [r3, #24]
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eb9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	6999      	ldr	r1, [r3, #24]
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	691b      	ldr	r3, [r3, #16]
 800eba6:	021a      	lsls	r2, r3, #8
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	430a      	orrs	r2, r1
 800ebae:	619a      	str	r2, [r3, #24]
      break;
 800ebb0:	e084      	b.n	800ecbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	68b9      	ldr	r1, [r7, #8]
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f000 fc03 	bl	800f3c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	69da      	ldr	r2, [r3, #28]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f042 0208 	orr.w	r2, r2, #8
 800ebcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	69da      	ldr	r2, [r3, #28]
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f022 0204 	bic.w	r2, r2, #4
 800ebdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	69d9      	ldr	r1, [r3, #28]
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	691a      	ldr	r2, [r3, #16]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	430a      	orrs	r2, r1
 800ebee:	61da      	str	r2, [r3, #28]
      break;
 800ebf0:	e064      	b.n	800ecbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	68b9      	ldr	r1, [r7, #8]
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f000 fc91 	bl	800f520 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	69da      	ldr	r2, [r3, #28]
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ec0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	69da      	ldr	r2, [r3, #28]
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ec1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	69d9      	ldr	r1, [r3, #28]
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	691b      	ldr	r3, [r3, #16]
 800ec28:	021a      	lsls	r2, r3, #8
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	430a      	orrs	r2, r1
 800ec30:	61da      	str	r2, [r3, #28]
      break;
 800ec32:	e043      	b.n	800ecbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	68b9      	ldr	r1, [r7, #8]
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f000 fd20 	bl	800f680 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f042 0208 	orr.w	r2, r2, #8
 800ec4e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	f022 0204 	bic.w	r2, r2, #4
 800ec5e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	691a      	ldr	r2, [r3, #16]
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	430a      	orrs	r2, r1
 800ec70:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ec72:	e023      	b.n	800ecbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	68b9      	ldr	r1, [r7, #8]
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f000 fd82 	bl	800f784 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ec8e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ec9e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	691b      	ldr	r3, [r3, #16]
 800ecaa:	021a      	lsls	r2, r3, #8
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	430a      	orrs	r2, r1
 800ecb2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ecb4:	e002      	b.n	800ecbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	75fb      	strb	r3, [r7, #23]
      break;
 800ecba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ecc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3718      	adds	r7, #24
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop

0800ecd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b084      	sub	sp, #16
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d101      	bne.n	800ecec <HAL_TIM_ConfigClockSource+0x1c>
 800ece8:	2302      	movs	r3, #2
 800ecea:	e0e6      	b.n	800eeba <HAL_TIM_ConfigClockSource+0x1ea>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2201      	movs	r2, #1
 800ecf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2202      	movs	r2, #2
 800ecf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	689b      	ldr	r3, [r3, #8]
 800ed02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ed0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ed0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ed16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	68ba      	ldr	r2, [r7, #8]
 800ed1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	4a67      	ldr	r2, [pc, #412]	@ (800eec4 <HAL_TIM_ConfigClockSource+0x1f4>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	f000 80b1 	beq.w	800ee8e <HAL_TIM_ConfigClockSource+0x1be>
 800ed2c:	4a65      	ldr	r2, [pc, #404]	@ (800eec4 <HAL_TIM_ConfigClockSource+0x1f4>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	f200 80b6 	bhi.w	800eea0 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed34:	4a64      	ldr	r2, [pc, #400]	@ (800eec8 <HAL_TIM_ConfigClockSource+0x1f8>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	f000 80a9 	beq.w	800ee8e <HAL_TIM_ConfigClockSource+0x1be>
 800ed3c:	4a62      	ldr	r2, [pc, #392]	@ (800eec8 <HAL_TIM_ConfigClockSource+0x1f8>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	f200 80ae 	bhi.w	800eea0 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed44:	4a61      	ldr	r2, [pc, #388]	@ (800eecc <HAL_TIM_ConfigClockSource+0x1fc>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	f000 80a1 	beq.w	800ee8e <HAL_TIM_ConfigClockSource+0x1be>
 800ed4c:	4a5f      	ldr	r2, [pc, #380]	@ (800eecc <HAL_TIM_ConfigClockSource+0x1fc>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	f200 80a6 	bhi.w	800eea0 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed54:	4a5e      	ldr	r2, [pc, #376]	@ (800eed0 <HAL_TIM_ConfigClockSource+0x200>)
 800ed56:	4293      	cmp	r3, r2
 800ed58:	f000 8099 	beq.w	800ee8e <HAL_TIM_ConfigClockSource+0x1be>
 800ed5c:	4a5c      	ldr	r2, [pc, #368]	@ (800eed0 <HAL_TIM_ConfigClockSource+0x200>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	f200 809e 	bhi.w	800eea0 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed64:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ed68:	f000 8091 	beq.w	800ee8e <HAL_TIM_ConfigClockSource+0x1be>
 800ed6c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ed70:	f200 8096 	bhi.w	800eea0 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ed78:	f000 8089 	beq.w	800ee8e <HAL_TIM_ConfigClockSource+0x1be>
 800ed7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ed80:	f200 808e 	bhi.w	800eea0 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ed88:	d03e      	beq.n	800ee08 <HAL_TIM_ConfigClockSource+0x138>
 800ed8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ed8e:	f200 8087 	bhi.w	800eea0 <HAL_TIM_ConfigClockSource+0x1d0>
 800ed92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed96:	f000 8086 	beq.w	800eea6 <HAL_TIM_ConfigClockSource+0x1d6>
 800ed9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed9e:	d87f      	bhi.n	800eea0 <HAL_TIM_ConfigClockSource+0x1d0>
 800eda0:	2b70      	cmp	r3, #112	@ 0x70
 800eda2:	d01a      	beq.n	800edda <HAL_TIM_ConfigClockSource+0x10a>
 800eda4:	2b70      	cmp	r3, #112	@ 0x70
 800eda6:	d87b      	bhi.n	800eea0 <HAL_TIM_ConfigClockSource+0x1d0>
 800eda8:	2b60      	cmp	r3, #96	@ 0x60
 800edaa:	d050      	beq.n	800ee4e <HAL_TIM_ConfigClockSource+0x17e>
 800edac:	2b60      	cmp	r3, #96	@ 0x60
 800edae:	d877      	bhi.n	800eea0 <HAL_TIM_ConfigClockSource+0x1d0>
 800edb0:	2b50      	cmp	r3, #80	@ 0x50
 800edb2:	d03c      	beq.n	800ee2e <HAL_TIM_ConfigClockSource+0x15e>
 800edb4:	2b50      	cmp	r3, #80	@ 0x50
 800edb6:	d873      	bhi.n	800eea0 <HAL_TIM_ConfigClockSource+0x1d0>
 800edb8:	2b40      	cmp	r3, #64	@ 0x40
 800edba:	d058      	beq.n	800ee6e <HAL_TIM_ConfigClockSource+0x19e>
 800edbc:	2b40      	cmp	r3, #64	@ 0x40
 800edbe:	d86f      	bhi.n	800eea0 <HAL_TIM_ConfigClockSource+0x1d0>
 800edc0:	2b30      	cmp	r3, #48	@ 0x30
 800edc2:	d064      	beq.n	800ee8e <HAL_TIM_ConfigClockSource+0x1be>
 800edc4:	2b30      	cmp	r3, #48	@ 0x30
 800edc6:	d86b      	bhi.n	800eea0 <HAL_TIM_ConfigClockSource+0x1d0>
 800edc8:	2b20      	cmp	r3, #32
 800edca:	d060      	beq.n	800ee8e <HAL_TIM_ConfigClockSource+0x1be>
 800edcc:	2b20      	cmp	r3, #32
 800edce:	d867      	bhi.n	800eea0 <HAL_TIM_ConfigClockSource+0x1d0>
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d05c      	beq.n	800ee8e <HAL_TIM_ConfigClockSource+0x1be>
 800edd4:	2b10      	cmp	r3, #16
 800edd6:	d05a      	beq.n	800ee8e <HAL_TIM_ConfigClockSource+0x1be>
 800edd8:	e062      	b.n	800eea0 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800edea:	f000 fdcb 	bl	800f984 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	689b      	ldr	r3, [r3, #8]
 800edf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800edfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	68ba      	ldr	r2, [r7, #8]
 800ee04:	609a      	str	r2, [r3, #8]
      break;
 800ee06:	e04f      	b.n	800eea8 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ee18:	f000 fdb4 	bl	800f984 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	689a      	ldr	r2, [r3, #8]
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ee2a:	609a      	str	r2, [r3, #8]
      break;
 800ee2c:	e03c      	b.n	800eea8 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee3a:	461a      	mov	r2, r3
 800ee3c:	f000 fd26 	bl	800f88c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	2150      	movs	r1, #80	@ 0x50
 800ee46:	4618      	mov	r0, r3
 800ee48:	f000 fd7f 	bl	800f94a <TIM_ITRx_SetConfig>
      break;
 800ee4c:	e02c      	b.n	800eea8 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	f000 fd45 	bl	800f8ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	2160      	movs	r1, #96	@ 0x60
 800ee66:	4618      	mov	r0, r3
 800ee68:	f000 fd6f 	bl	800f94a <TIM_ITRx_SetConfig>
      break;
 800ee6c:	e01c      	b.n	800eea8 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	f000 fd06 	bl	800f88c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	2140      	movs	r1, #64	@ 0x40
 800ee86:	4618      	mov	r0, r3
 800ee88:	f000 fd5f 	bl	800f94a <TIM_ITRx_SetConfig>
      break;
 800ee8c:	e00c      	b.n	800eea8 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681a      	ldr	r2, [r3, #0]
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	4619      	mov	r1, r3
 800ee98:	4610      	mov	r0, r2
 800ee9a:	f000 fd56 	bl	800f94a <TIM_ITRx_SetConfig>
      break;
 800ee9e:	e003      	b.n	800eea8 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800eea0:	2301      	movs	r3, #1
 800eea2:	73fb      	strb	r3, [r7, #15]
      break;
 800eea4:	e000      	b.n	800eea8 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800eea6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2201      	movs	r2, #1
 800eeac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eeb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3710      	adds	r7, #16
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
 800eec2:	bf00      	nop
 800eec4:	00100070 	.word	0x00100070
 800eec8:	00100040 	.word	0x00100040
 800eecc:	00100030 	.word	0x00100030
 800eed0:	00100020 	.word	0x00100020

0800eed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b085      	sub	sp, #20
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	4a6e      	ldr	r2, [pc, #440]	@ (800f0a0 <TIM_Base_SetConfig+0x1cc>)
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d02b      	beq.n	800ef44 <TIM_Base_SetConfig+0x70>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	4a6d      	ldr	r2, [pc, #436]	@ (800f0a4 <TIM_Base_SetConfig+0x1d0>)
 800eef0:	4293      	cmp	r3, r2
 800eef2:	d027      	beq.n	800ef44 <TIM_Base_SetConfig+0x70>
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eefa:	d023      	beq.n	800ef44 <TIM_Base_SetConfig+0x70>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ef02:	d01f      	beq.n	800ef44 <TIM_Base_SetConfig+0x70>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	4a68      	ldr	r2, [pc, #416]	@ (800f0a8 <TIM_Base_SetConfig+0x1d4>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d01b      	beq.n	800ef44 <TIM_Base_SetConfig+0x70>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	4a67      	ldr	r2, [pc, #412]	@ (800f0ac <TIM_Base_SetConfig+0x1d8>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d017      	beq.n	800ef44 <TIM_Base_SetConfig+0x70>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	4a66      	ldr	r2, [pc, #408]	@ (800f0b0 <TIM_Base_SetConfig+0x1dc>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d013      	beq.n	800ef44 <TIM_Base_SetConfig+0x70>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	4a65      	ldr	r2, [pc, #404]	@ (800f0b4 <TIM_Base_SetConfig+0x1e0>)
 800ef20:	4293      	cmp	r3, r2
 800ef22:	d00f      	beq.n	800ef44 <TIM_Base_SetConfig+0x70>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	4a64      	ldr	r2, [pc, #400]	@ (800f0b8 <TIM_Base_SetConfig+0x1e4>)
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d00b      	beq.n	800ef44 <TIM_Base_SetConfig+0x70>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	4a63      	ldr	r2, [pc, #396]	@ (800f0bc <TIM_Base_SetConfig+0x1e8>)
 800ef30:	4293      	cmp	r3, r2
 800ef32:	d007      	beq.n	800ef44 <TIM_Base_SetConfig+0x70>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	4a62      	ldr	r2, [pc, #392]	@ (800f0c0 <TIM_Base_SetConfig+0x1ec>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d003      	beq.n	800ef44 <TIM_Base_SetConfig+0x70>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	4a61      	ldr	r2, [pc, #388]	@ (800f0c4 <TIM_Base_SetConfig+0x1f0>)
 800ef40:	4293      	cmp	r3, r2
 800ef42:	d108      	bne.n	800ef56 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	685b      	ldr	r3, [r3, #4]
 800ef50:	68fa      	ldr	r2, [r7, #12]
 800ef52:	4313      	orrs	r3, r2
 800ef54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4a51      	ldr	r2, [pc, #324]	@ (800f0a0 <TIM_Base_SetConfig+0x1cc>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d043      	beq.n	800efe6 <TIM_Base_SetConfig+0x112>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4a50      	ldr	r2, [pc, #320]	@ (800f0a4 <TIM_Base_SetConfig+0x1d0>)
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d03f      	beq.n	800efe6 <TIM_Base_SetConfig+0x112>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef6c:	d03b      	beq.n	800efe6 <TIM_Base_SetConfig+0x112>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ef74:	d037      	beq.n	800efe6 <TIM_Base_SetConfig+0x112>
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	4a4b      	ldr	r2, [pc, #300]	@ (800f0a8 <TIM_Base_SetConfig+0x1d4>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d033      	beq.n	800efe6 <TIM_Base_SetConfig+0x112>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	4a4a      	ldr	r2, [pc, #296]	@ (800f0ac <TIM_Base_SetConfig+0x1d8>)
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d02f      	beq.n	800efe6 <TIM_Base_SetConfig+0x112>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	4a49      	ldr	r2, [pc, #292]	@ (800f0b0 <TIM_Base_SetConfig+0x1dc>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d02b      	beq.n	800efe6 <TIM_Base_SetConfig+0x112>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	4a48      	ldr	r2, [pc, #288]	@ (800f0b4 <TIM_Base_SetConfig+0x1e0>)
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d027      	beq.n	800efe6 <TIM_Base_SetConfig+0x112>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	4a47      	ldr	r2, [pc, #284]	@ (800f0b8 <TIM_Base_SetConfig+0x1e4>)
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d023      	beq.n	800efe6 <TIM_Base_SetConfig+0x112>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	4a46      	ldr	r2, [pc, #280]	@ (800f0bc <TIM_Base_SetConfig+0x1e8>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d01f      	beq.n	800efe6 <TIM_Base_SetConfig+0x112>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	4a45      	ldr	r2, [pc, #276]	@ (800f0c0 <TIM_Base_SetConfig+0x1ec>)
 800efaa:	4293      	cmp	r3, r2
 800efac:	d01b      	beq.n	800efe6 <TIM_Base_SetConfig+0x112>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	4a44      	ldr	r2, [pc, #272]	@ (800f0c4 <TIM_Base_SetConfig+0x1f0>)
 800efb2:	4293      	cmp	r3, r2
 800efb4:	d017      	beq.n	800efe6 <TIM_Base_SetConfig+0x112>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	4a43      	ldr	r2, [pc, #268]	@ (800f0c8 <TIM_Base_SetConfig+0x1f4>)
 800efba:	4293      	cmp	r3, r2
 800efbc:	d013      	beq.n	800efe6 <TIM_Base_SetConfig+0x112>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	4a42      	ldr	r2, [pc, #264]	@ (800f0cc <TIM_Base_SetConfig+0x1f8>)
 800efc2:	4293      	cmp	r3, r2
 800efc4:	d00f      	beq.n	800efe6 <TIM_Base_SetConfig+0x112>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	4a41      	ldr	r2, [pc, #260]	@ (800f0d0 <TIM_Base_SetConfig+0x1fc>)
 800efca:	4293      	cmp	r3, r2
 800efcc:	d00b      	beq.n	800efe6 <TIM_Base_SetConfig+0x112>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	4a40      	ldr	r2, [pc, #256]	@ (800f0d4 <TIM_Base_SetConfig+0x200>)
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d007      	beq.n	800efe6 <TIM_Base_SetConfig+0x112>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	4a3f      	ldr	r2, [pc, #252]	@ (800f0d8 <TIM_Base_SetConfig+0x204>)
 800efda:	4293      	cmp	r3, r2
 800efdc:	d003      	beq.n	800efe6 <TIM_Base_SetConfig+0x112>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	4a3e      	ldr	r2, [pc, #248]	@ (800f0dc <TIM_Base_SetConfig+0x208>)
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d108      	bne.n	800eff8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800efec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	68db      	ldr	r3, [r3, #12]
 800eff2:	68fa      	ldr	r2, [r7, #12]
 800eff4:	4313      	orrs	r3, r2
 800eff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	695b      	ldr	r3, [r3, #20]
 800f002:	4313      	orrs	r3, r2
 800f004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	68fa      	ldr	r2, [r7, #12]
 800f00a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	689a      	ldr	r2, [r3, #8]
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	681a      	ldr	r2, [r3, #0]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	4a20      	ldr	r2, [pc, #128]	@ (800f0a0 <TIM_Base_SetConfig+0x1cc>)
 800f020:	4293      	cmp	r3, r2
 800f022:	d023      	beq.n	800f06c <TIM_Base_SetConfig+0x198>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	4a1f      	ldr	r2, [pc, #124]	@ (800f0a4 <TIM_Base_SetConfig+0x1d0>)
 800f028:	4293      	cmp	r3, r2
 800f02a:	d01f      	beq.n	800f06c <TIM_Base_SetConfig+0x198>
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	4a24      	ldr	r2, [pc, #144]	@ (800f0c0 <TIM_Base_SetConfig+0x1ec>)
 800f030:	4293      	cmp	r3, r2
 800f032:	d01b      	beq.n	800f06c <TIM_Base_SetConfig+0x198>
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	4a23      	ldr	r2, [pc, #140]	@ (800f0c4 <TIM_Base_SetConfig+0x1f0>)
 800f038:	4293      	cmp	r3, r2
 800f03a:	d017      	beq.n	800f06c <TIM_Base_SetConfig+0x198>
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	4a22      	ldr	r2, [pc, #136]	@ (800f0c8 <TIM_Base_SetConfig+0x1f4>)
 800f040:	4293      	cmp	r3, r2
 800f042:	d013      	beq.n	800f06c <TIM_Base_SetConfig+0x198>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4a21      	ldr	r2, [pc, #132]	@ (800f0cc <TIM_Base_SetConfig+0x1f8>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d00f      	beq.n	800f06c <TIM_Base_SetConfig+0x198>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	4a20      	ldr	r2, [pc, #128]	@ (800f0d0 <TIM_Base_SetConfig+0x1fc>)
 800f050:	4293      	cmp	r3, r2
 800f052:	d00b      	beq.n	800f06c <TIM_Base_SetConfig+0x198>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	4a1f      	ldr	r2, [pc, #124]	@ (800f0d4 <TIM_Base_SetConfig+0x200>)
 800f058:	4293      	cmp	r3, r2
 800f05a:	d007      	beq.n	800f06c <TIM_Base_SetConfig+0x198>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	4a1e      	ldr	r2, [pc, #120]	@ (800f0d8 <TIM_Base_SetConfig+0x204>)
 800f060:	4293      	cmp	r3, r2
 800f062:	d003      	beq.n	800f06c <TIM_Base_SetConfig+0x198>
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	4a1d      	ldr	r2, [pc, #116]	@ (800f0dc <TIM_Base_SetConfig+0x208>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d103      	bne.n	800f074 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	691a      	ldr	r2, [r3, #16]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2201      	movs	r2, #1
 800f078:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	691b      	ldr	r3, [r3, #16]
 800f07e:	f003 0301 	and.w	r3, r3, #1
 800f082:	2b01      	cmp	r3, #1
 800f084:	d105      	bne.n	800f092 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	691b      	ldr	r3, [r3, #16]
 800f08a:	f023 0201 	bic.w	r2, r3, #1
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	611a      	str	r2, [r3, #16]
  }
}
 800f092:	bf00      	nop
 800f094:	3714      	adds	r7, #20
 800f096:	46bd      	mov	sp, r7
 800f098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09c:	4770      	bx	lr
 800f09e:	bf00      	nop
 800f0a0:	40012c00 	.word	0x40012c00
 800f0a4:	50012c00 	.word	0x50012c00
 800f0a8:	40000400 	.word	0x40000400
 800f0ac:	50000400 	.word	0x50000400
 800f0b0:	40000800 	.word	0x40000800
 800f0b4:	50000800 	.word	0x50000800
 800f0b8:	40000c00 	.word	0x40000c00
 800f0bc:	50000c00 	.word	0x50000c00
 800f0c0:	40013400 	.word	0x40013400
 800f0c4:	50013400 	.word	0x50013400
 800f0c8:	40014000 	.word	0x40014000
 800f0cc:	50014000 	.word	0x50014000
 800f0d0:	40014400 	.word	0x40014400
 800f0d4:	50014400 	.word	0x50014400
 800f0d8:	40014800 	.word	0x40014800
 800f0dc:	50014800 	.word	0x50014800

0800f0e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	b087      	sub	sp, #28
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
 800f0e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6a1b      	ldr	r3, [r3, #32]
 800f0ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6a1b      	ldr	r3, [r3, #32]
 800f0f4:	f023 0201 	bic.w	r2, r3, #1
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	699b      	ldr	r3, [r3, #24]
 800f106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f10e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f023 0303 	bic.w	r3, r3, #3
 800f11a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	68fa      	ldr	r2, [r7, #12]
 800f122:	4313      	orrs	r3, r2
 800f124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f126:	697b      	ldr	r3, [r7, #20]
 800f128:	f023 0302 	bic.w	r3, r3, #2
 800f12c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	689b      	ldr	r3, [r3, #8]
 800f132:	697a      	ldr	r2, [r7, #20]
 800f134:	4313      	orrs	r3, r2
 800f136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	4a40      	ldr	r2, [pc, #256]	@ (800f23c <TIM_OC1_SetConfig+0x15c>)
 800f13c:	4293      	cmp	r3, r2
 800f13e:	d023      	beq.n	800f188 <TIM_OC1_SetConfig+0xa8>
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	4a3f      	ldr	r2, [pc, #252]	@ (800f240 <TIM_OC1_SetConfig+0x160>)
 800f144:	4293      	cmp	r3, r2
 800f146:	d01f      	beq.n	800f188 <TIM_OC1_SetConfig+0xa8>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	4a3e      	ldr	r2, [pc, #248]	@ (800f244 <TIM_OC1_SetConfig+0x164>)
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d01b      	beq.n	800f188 <TIM_OC1_SetConfig+0xa8>
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	4a3d      	ldr	r2, [pc, #244]	@ (800f248 <TIM_OC1_SetConfig+0x168>)
 800f154:	4293      	cmp	r3, r2
 800f156:	d017      	beq.n	800f188 <TIM_OC1_SetConfig+0xa8>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	4a3c      	ldr	r2, [pc, #240]	@ (800f24c <TIM_OC1_SetConfig+0x16c>)
 800f15c:	4293      	cmp	r3, r2
 800f15e:	d013      	beq.n	800f188 <TIM_OC1_SetConfig+0xa8>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	4a3b      	ldr	r2, [pc, #236]	@ (800f250 <TIM_OC1_SetConfig+0x170>)
 800f164:	4293      	cmp	r3, r2
 800f166:	d00f      	beq.n	800f188 <TIM_OC1_SetConfig+0xa8>
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	4a3a      	ldr	r2, [pc, #232]	@ (800f254 <TIM_OC1_SetConfig+0x174>)
 800f16c:	4293      	cmp	r3, r2
 800f16e:	d00b      	beq.n	800f188 <TIM_OC1_SetConfig+0xa8>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	4a39      	ldr	r2, [pc, #228]	@ (800f258 <TIM_OC1_SetConfig+0x178>)
 800f174:	4293      	cmp	r3, r2
 800f176:	d007      	beq.n	800f188 <TIM_OC1_SetConfig+0xa8>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	4a38      	ldr	r2, [pc, #224]	@ (800f25c <TIM_OC1_SetConfig+0x17c>)
 800f17c:	4293      	cmp	r3, r2
 800f17e:	d003      	beq.n	800f188 <TIM_OC1_SetConfig+0xa8>
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	4a37      	ldr	r2, [pc, #220]	@ (800f260 <TIM_OC1_SetConfig+0x180>)
 800f184:	4293      	cmp	r3, r2
 800f186:	d10c      	bne.n	800f1a2 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	f023 0308 	bic.w	r3, r3, #8
 800f18e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	68db      	ldr	r3, [r3, #12]
 800f194:	697a      	ldr	r2, [r7, #20]
 800f196:	4313      	orrs	r3, r2
 800f198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	f023 0304 	bic.w	r3, r3, #4
 800f1a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	4a25      	ldr	r2, [pc, #148]	@ (800f23c <TIM_OC1_SetConfig+0x15c>)
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d023      	beq.n	800f1f2 <TIM_OC1_SetConfig+0x112>
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	4a24      	ldr	r2, [pc, #144]	@ (800f240 <TIM_OC1_SetConfig+0x160>)
 800f1ae:	4293      	cmp	r3, r2
 800f1b0:	d01f      	beq.n	800f1f2 <TIM_OC1_SetConfig+0x112>
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	4a23      	ldr	r2, [pc, #140]	@ (800f244 <TIM_OC1_SetConfig+0x164>)
 800f1b6:	4293      	cmp	r3, r2
 800f1b8:	d01b      	beq.n	800f1f2 <TIM_OC1_SetConfig+0x112>
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	4a22      	ldr	r2, [pc, #136]	@ (800f248 <TIM_OC1_SetConfig+0x168>)
 800f1be:	4293      	cmp	r3, r2
 800f1c0:	d017      	beq.n	800f1f2 <TIM_OC1_SetConfig+0x112>
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	4a21      	ldr	r2, [pc, #132]	@ (800f24c <TIM_OC1_SetConfig+0x16c>)
 800f1c6:	4293      	cmp	r3, r2
 800f1c8:	d013      	beq.n	800f1f2 <TIM_OC1_SetConfig+0x112>
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	4a20      	ldr	r2, [pc, #128]	@ (800f250 <TIM_OC1_SetConfig+0x170>)
 800f1ce:	4293      	cmp	r3, r2
 800f1d0:	d00f      	beq.n	800f1f2 <TIM_OC1_SetConfig+0x112>
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	4a1f      	ldr	r2, [pc, #124]	@ (800f254 <TIM_OC1_SetConfig+0x174>)
 800f1d6:	4293      	cmp	r3, r2
 800f1d8:	d00b      	beq.n	800f1f2 <TIM_OC1_SetConfig+0x112>
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	4a1e      	ldr	r2, [pc, #120]	@ (800f258 <TIM_OC1_SetConfig+0x178>)
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	d007      	beq.n	800f1f2 <TIM_OC1_SetConfig+0x112>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	4a1d      	ldr	r2, [pc, #116]	@ (800f25c <TIM_OC1_SetConfig+0x17c>)
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	d003      	beq.n	800f1f2 <TIM_OC1_SetConfig+0x112>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	4a1c      	ldr	r2, [pc, #112]	@ (800f260 <TIM_OC1_SetConfig+0x180>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d111      	bne.n	800f216 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f1f2:	693b      	ldr	r3, [r7, #16]
 800f1f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f1f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	695b      	ldr	r3, [r3, #20]
 800f206:	693a      	ldr	r2, [r7, #16]
 800f208:	4313      	orrs	r3, r2
 800f20a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	699b      	ldr	r3, [r3, #24]
 800f210:	693a      	ldr	r2, [r7, #16]
 800f212:	4313      	orrs	r3, r2
 800f214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	693a      	ldr	r2, [r7, #16]
 800f21a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	68fa      	ldr	r2, [r7, #12]
 800f220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	685a      	ldr	r2, [r3, #4]
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	697a      	ldr	r2, [r7, #20]
 800f22e:	621a      	str	r2, [r3, #32]
}
 800f230:	bf00      	nop
 800f232:	371c      	adds	r7, #28
 800f234:	46bd      	mov	sp, r7
 800f236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23a:	4770      	bx	lr
 800f23c:	40012c00 	.word	0x40012c00
 800f240:	50012c00 	.word	0x50012c00
 800f244:	40013400 	.word	0x40013400
 800f248:	50013400 	.word	0x50013400
 800f24c:	40014000 	.word	0x40014000
 800f250:	50014000 	.word	0x50014000
 800f254:	40014400 	.word	0x40014400
 800f258:	50014400 	.word	0x50014400
 800f25c:	40014800 	.word	0x40014800
 800f260:	50014800 	.word	0x50014800

0800f264 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f264:	b480      	push	{r7}
 800f266:	b087      	sub	sp, #28
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6a1b      	ldr	r3, [r3, #32]
 800f272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6a1b      	ldr	r3, [r3, #32]
 800f278:	f023 0210 	bic.w	r2, r3, #16
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	699b      	ldr	r3, [r3, #24]
 800f28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f29e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	021b      	lsls	r3, r3, #8
 800f2a6:	68fa      	ldr	r2, [r7, #12]
 800f2a8:	4313      	orrs	r3, r2
 800f2aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	f023 0320 	bic.w	r3, r3, #32
 800f2b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	689b      	ldr	r3, [r3, #8]
 800f2b8:	011b      	lsls	r3, r3, #4
 800f2ba:	697a      	ldr	r2, [r7, #20]
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	4a36      	ldr	r2, [pc, #216]	@ (800f39c <TIM_OC2_SetConfig+0x138>)
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	d00b      	beq.n	800f2e0 <TIM_OC2_SetConfig+0x7c>
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	4a35      	ldr	r2, [pc, #212]	@ (800f3a0 <TIM_OC2_SetConfig+0x13c>)
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	d007      	beq.n	800f2e0 <TIM_OC2_SetConfig+0x7c>
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	4a34      	ldr	r2, [pc, #208]	@ (800f3a4 <TIM_OC2_SetConfig+0x140>)
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	d003      	beq.n	800f2e0 <TIM_OC2_SetConfig+0x7c>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	4a33      	ldr	r2, [pc, #204]	@ (800f3a8 <TIM_OC2_SetConfig+0x144>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d10d      	bne.n	800f2fc <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f2e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	68db      	ldr	r3, [r3, #12]
 800f2ec:	011b      	lsls	r3, r3, #4
 800f2ee:	697a      	ldr	r2, [r7, #20]
 800f2f0:	4313      	orrs	r3, r2
 800f2f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f2fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	4a27      	ldr	r2, [pc, #156]	@ (800f39c <TIM_OC2_SetConfig+0x138>)
 800f300:	4293      	cmp	r3, r2
 800f302:	d023      	beq.n	800f34c <TIM_OC2_SetConfig+0xe8>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	4a26      	ldr	r2, [pc, #152]	@ (800f3a0 <TIM_OC2_SetConfig+0x13c>)
 800f308:	4293      	cmp	r3, r2
 800f30a:	d01f      	beq.n	800f34c <TIM_OC2_SetConfig+0xe8>
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	4a25      	ldr	r2, [pc, #148]	@ (800f3a4 <TIM_OC2_SetConfig+0x140>)
 800f310:	4293      	cmp	r3, r2
 800f312:	d01b      	beq.n	800f34c <TIM_OC2_SetConfig+0xe8>
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	4a24      	ldr	r2, [pc, #144]	@ (800f3a8 <TIM_OC2_SetConfig+0x144>)
 800f318:	4293      	cmp	r3, r2
 800f31a:	d017      	beq.n	800f34c <TIM_OC2_SetConfig+0xe8>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	4a23      	ldr	r2, [pc, #140]	@ (800f3ac <TIM_OC2_SetConfig+0x148>)
 800f320:	4293      	cmp	r3, r2
 800f322:	d013      	beq.n	800f34c <TIM_OC2_SetConfig+0xe8>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	4a22      	ldr	r2, [pc, #136]	@ (800f3b0 <TIM_OC2_SetConfig+0x14c>)
 800f328:	4293      	cmp	r3, r2
 800f32a:	d00f      	beq.n	800f34c <TIM_OC2_SetConfig+0xe8>
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	4a21      	ldr	r2, [pc, #132]	@ (800f3b4 <TIM_OC2_SetConfig+0x150>)
 800f330:	4293      	cmp	r3, r2
 800f332:	d00b      	beq.n	800f34c <TIM_OC2_SetConfig+0xe8>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	4a20      	ldr	r2, [pc, #128]	@ (800f3b8 <TIM_OC2_SetConfig+0x154>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	d007      	beq.n	800f34c <TIM_OC2_SetConfig+0xe8>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	4a1f      	ldr	r2, [pc, #124]	@ (800f3bc <TIM_OC2_SetConfig+0x158>)
 800f340:	4293      	cmp	r3, r2
 800f342:	d003      	beq.n	800f34c <TIM_OC2_SetConfig+0xe8>
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	4a1e      	ldr	r2, [pc, #120]	@ (800f3c0 <TIM_OC2_SetConfig+0x15c>)
 800f348:	4293      	cmp	r3, r2
 800f34a:	d113      	bne.n	800f374 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f352:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f35a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	695b      	ldr	r3, [r3, #20]
 800f360:	009b      	lsls	r3, r3, #2
 800f362:	693a      	ldr	r2, [r7, #16]
 800f364:	4313      	orrs	r3, r2
 800f366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	699b      	ldr	r3, [r3, #24]
 800f36c:	009b      	lsls	r3, r3, #2
 800f36e:	693a      	ldr	r2, [r7, #16]
 800f370:	4313      	orrs	r3, r2
 800f372:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	693a      	ldr	r2, [r7, #16]
 800f378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	68fa      	ldr	r2, [r7, #12]
 800f37e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	685a      	ldr	r2, [r3, #4]
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	697a      	ldr	r2, [r7, #20]
 800f38c:	621a      	str	r2, [r3, #32]
}
 800f38e:	bf00      	nop
 800f390:	371c      	adds	r7, #28
 800f392:	46bd      	mov	sp, r7
 800f394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f398:	4770      	bx	lr
 800f39a:	bf00      	nop
 800f39c:	40012c00 	.word	0x40012c00
 800f3a0:	50012c00 	.word	0x50012c00
 800f3a4:	40013400 	.word	0x40013400
 800f3a8:	50013400 	.word	0x50013400
 800f3ac:	40014000 	.word	0x40014000
 800f3b0:	50014000 	.word	0x50014000
 800f3b4:	40014400 	.word	0x40014400
 800f3b8:	50014400 	.word	0x50014400
 800f3bc:	40014800 	.word	0x40014800
 800f3c0:	50014800 	.word	0x50014800

0800f3c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b087      	sub	sp, #28
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6a1b      	ldr	r3, [r3, #32]
 800f3d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6a1b      	ldr	r3, [r3, #32]
 800f3d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	69db      	ldr	r3, [r3, #28]
 800f3ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f3f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f3f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	f023 0303 	bic.w	r3, r3, #3
 800f3fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	68fa      	ldr	r2, [r7, #12]
 800f406:	4313      	orrs	r3, r2
 800f408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	689b      	ldr	r3, [r3, #8]
 800f416:	021b      	lsls	r3, r3, #8
 800f418:	697a      	ldr	r2, [r7, #20]
 800f41a:	4313      	orrs	r3, r2
 800f41c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	4a35      	ldr	r2, [pc, #212]	@ (800f4f8 <TIM_OC3_SetConfig+0x134>)
 800f422:	4293      	cmp	r3, r2
 800f424:	d00b      	beq.n	800f43e <TIM_OC3_SetConfig+0x7a>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	4a34      	ldr	r2, [pc, #208]	@ (800f4fc <TIM_OC3_SetConfig+0x138>)
 800f42a:	4293      	cmp	r3, r2
 800f42c:	d007      	beq.n	800f43e <TIM_OC3_SetConfig+0x7a>
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	4a33      	ldr	r2, [pc, #204]	@ (800f500 <TIM_OC3_SetConfig+0x13c>)
 800f432:	4293      	cmp	r3, r2
 800f434:	d003      	beq.n	800f43e <TIM_OC3_SetConfig+0x7a>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	4a32      	ldr	r2, [pc, #200]	@ (800f504 <TIM_OC3_SetConfig+0x140>)
 800f43a:	4293      	cmp	r3, r2
 800f43c:	d10d      	bne.n	800f45a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f444:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	68db      	ldr	r3, [r3, #12]
 800f44a:	021b      	lsls	r3, r3, #8
 800f44c:	697a      	ldr	r2, [r7, #20]
 800f44e:	4313      	orrs	r3, r2
 800f450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	4a26      	ldr	r2, [pc, #152]	@ (800f4f8 <TIM_OC3_SetConfig+0x134>)
 800f45e:	4293      	cmp	r3, r2
 800f460:	d023      	beq.n	800f4aa <TIM_OC3_SetConfig+0xe6>
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	4a25      	ldr	r2, [pc, #148]	@ (800f4fc <TIM_OC3_SetConfig+0x138>)
 800f466:	4293      	cmp	r3, r2
 800f468:	d01f      	beq.n	800f4aa <TIM_OC3_SetConfig+0xe6>
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	4a24      	ldr	r2, [pc, #144]	@ (800f500 <TIM_OC3_SetConfig+0x13c>)
 800f46e:	4293      	cmp	r3, r2
 800f470:	d01b      	beq.n	800f4aa <TIM_OC3_SetConfig+0xe6>
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	4a23      	ldr	r2, [pc, #140]	@ (800f504 <TIM_OC3_SetConfig+0x140>)
 800f476:	4293      	cmp	r3, r2
 800f478:	d017      	beq.n	800f4aa <TIM_OC3_SetConfig+0xe6>
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	4a22      	ldr	r2, [pc, #136]	@ (800f508 <TIM_OC3_SetConfig+0x144>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d013      	beq.n	800f4aa <TIM_OC3_SetConfig+0xe6>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	4a21      	ldr	r2, [pc, #132]	@ (800f50c <TIM_OC3_SetConfig+0x148>)
 800f486:	4293      	cmp	r3, r2
 800f488:	d00f      	beq.n	800f4aa <TIM_OC3_SetConfig+0xe6>
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	4a20      	ldr	r2, [pc, #128]	@ (800f510 <TIM_OC3_SetConfig+0x14c>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	d00b      	beq.n	800f4aa <TIM_OC3_SetConfig+0xe6>
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	4a1f      	ldr	r2, [pc, #124]	@ (800f514 <TIM_OC3_SetConfig+0x150>)
 800f496:	4293      	cmp	r3, r2
 800f498:	d007      	beq.n	800f4aa <TIM_OC3_SetConfig+0xe6>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	4a1e      	ldr	r2, [pc, #120]	@ (800f518 <TIM_OC3_SetConfig+0x154>)
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d003      	beq.n	800f4aa <TIM_OC3_SetConfig+0xe6>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	4a1d      	ldr	r2, [pc, #116]	@ (800f51c <TIM_OC3_SetConfig+0x158>)
 800f4a6:	4293      	cmp	r3, r2
 800f4a8:	d113      	bne.n	800f4d2 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f4b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f4b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	695b      	ldr	r3, [r3, #20]
 800f4be:	011b      	lsls	r3, r3, #4
 800f4c0:	693a      	ldr	r2, [r7, #16]
 800f4c2:	4313      	orrs	r3, r2
 800f4c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	699b      	ldr	r3, [r3, #24]
 800f4ca:	011b      	lsls	r3, r3, #4
 800f4cc:	693a      	ldr	r2, [r7, #16]
 800f4ce:	4313      	orrs	r3, r2
 800f4d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	693a      	ldr	r2, [r7, #16]
 800f4d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	68fa      	ldr	r2, [r7, #12]
 800f4dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	685a      	ldr	r2, [r3, #4]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	697a      	ldr	r2, [r7, #20]
 800f4ea:	621a      	str	r2, [r3, #32]
}
 800f4ec:	bf00      	nop
 800f4ee:	371c      	adds	r7, #28
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f6:	4770      	bx	lr
 800f4f8:	40012c00 	.word	0x40012c00
 800f4fc:	50012c00 	.word	0x50012c00
 800f500:	40013400 	.word	0x40013400
 800f504:	50013400 	.word	0x50013400
 800f508:	40014000 	.word	0x40014000
 800f50c:	50014000 	.word	0x50014000
 800f510:	40014400 	.word	0x40014400
 800f514:	50014400 	.word	0x50014400
 800f518:	40014800 	.word	0x40014800
 800f51c:	50014800 	.word	0x50014800

0800f520 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f520:	b480      	push	{r7}
 800f522:	b087      	sub	sp, #28
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6a1b      	ldr	r3, [r3, #32]
 800f52e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6a1b      	ldr	r3, [r3, #32]
 800f534:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	685b      	ldr	r3, [r3, #4]
 800f540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	69db      	ldr	r3, [r3, #28]
 800f546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f54e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f55a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	021b      	lsls	r3, r3, #8
 800f562:	68fa      	ldr	r2, [r7, #12]
 800f564:	4313      	orrs	r3, r2
 800f566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f56e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	689b      	ldr	r3, [r3, #8]
 800f574:	031b      	lsls	r3, r3, #12
 800f576:	697a      	ldr	r2, [r7, #20]
 800f578:	4313      	orrs	r3, r2
 800f57a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	4a36      	ldr	r2, [pc, #216]	@ (800f658 <TIM_OC4_SetConfig+0x138>)
 800f580:	4293      	cmp	r3, r2
 800f582:	d00b      	beq.n	800f59c <TIM_OC4_SetConfig+0x7c>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	4a35      	ldr	r2, [pc, #212]	@ (800f65c <TIM_OC4_SetConfig+0x13c>)
 800f588:	4293      	cmp	r3, r2
 800f58a:	d007      	beq.n	800f59c <TIM_OC4_SetConfig+0x7c>
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	4a34      	ldr	r2, [pc, #208]	@ (800f660 <TIM_OC4_SetConfig+0x140>)
 800f590:	4293      	cmp	r3, r2
 800f592:	d003      	beq.n	800f59c <TIM_OC4_SetConfig+0x7c>
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	4a33      	ldr	r2, [pc, #204]	@ (800f664 <TIM_OC4_SetConfig+0x144>)
 800f598:	4293      	cmp	r3, r2
 800f59a:	d10d      	bne.n	800f5b8 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f5a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	68db      	ldr	r3, [r3, #12]
 800f5a8:	031b      	lsls	r3, r3, #12
 800f5aa:	697a      	ldr	r2, [r7, #20]
 800f5ac:	4313      	orrs	r3, r2
 800f5ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f5b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	4a27      	ldr	r2, [pc, #156]	@ (800f658 <TIM_OC4_SetConfig+0x138>)
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	d023      	beq.n	800f608 <TIM_OC4_SetConfig+0xe8>
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	4a26      	ldr	r2, [pc, #152]	@ (800f65c <TIM_OC4_SetConfig+0x13c>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d01f      	beq.n	800f608 <TIM_OC4_SetConfig+0xe8>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	4a25      	ldr	r2, [pc, #148]	@ (800f660 <TIM_OC4_SetConfig+0x140>)
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	d01b      	beq.n	800f608 <TIM_OC4_SetConfig+0xe8>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	4a24      	ldr	r2, [pc, #144]	@ (800f664 <TIM_OC4_SetConfig+0x144>)
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d017      	beq.n	800f608 <TIM_OC4_SetConfig+0xe8>
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	4a23      	ldr	r2, [pc, #140]	@ (800f668 <TIM_OC4_SetConfig+0x148>)
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	d013      	beq.n	800f608 <TIM_OC4_SetConfig+0xe8>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	4a22      	ldr	r2, [pc, #136]	@ (800f66c <TIM_OC4_SetConfig+0x14c>)
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d00f      	beq.n	800f608 <TIM_OC4_SetConfig+0xe8>
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	4a21      	ldr	r2, [pc, #132]	@ (800f670 <TIM_OC4_SetConfig+0x150>)
 800f5ec:	4293      	cmp	r3, r2
 800f5ee:	d00b      	beq.n	800f608 <TIM_OC4_SetConfig+0xe8>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	4a20      	ldr	r2, [pc, #128]	@ (800f674 <TIM_OC4_SetConfig+0x154>)
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d007      	beq.n	800f608 <TIM_OC4_SetConfig+0xe8>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	4a1f      	ldr	r2, [pc, #124]	@ (800f678 <TIM_OC4_SetConfig+0x158>)
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d003      	beq.n	800f608 <TIM_OC4_SetConfig+0xe8>
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	4a1e      	ldr	r2, [pc, #120]	@ (800f67c <TIM_OC4_SetConfig+0x15c>)
 800f604:	4293      	cmp	r3, r2
 800f606:	d113      	bne.n	800f630 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f60e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f616:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	695b      	ldr	r3, [r3, #20]
 800f61c:	019b      	lsls	r3, r3, #6
 800f61e:	693a      	ldr	r2, [r7, #16]
 800f620:	4313      	orrs	r3, r2
 800f622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	699b      	ldr	r3, [r3, #24]
 800f628:	019b      	lsls	r3, r3, #6
 800f62a:	693a      	ldr	r2, [r7, #16]
 800f62c:	4313      	orrs	r3, r2
 800f62e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	693a      	ldr	r2, [r7, #16]
 800f634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	68fa      	ldr	r2, [r7, #12]
 800f63a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	685a      	ldr	r2, [r3, #4]
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	697a      	ldr	r2, [r7, #20]
 800f648:	621a      	str	r2, [r3, #32]
}
 800f64a:	bf00      	nop
 800f64c:	371c      	adds	r7, #28
 800f64e:	46bd      	mov	sp, r7
 800f650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f654:	4770      	bx	lr
 800f656:	bf00      	nop
 800f658:	40012c00 	.word	0x40012c00
 800f65c:	50012c00 	.word	0x50012c00
 800f660:	40013400 	.word	0x40013400
 800f664:	50013400 	.word	0x50013400
 800f668:	40014000 	.word	0x40014000
 800f66c:	50014000 	.word	0x50014000
 800f670:	40014400 	.word	0x40014400
 800f674:	50014400 	.word	0x50014400
 800f678:	40014800 	.word	0x40014800
 800f67c:	50014800 	.word	0x50014800

0800f680 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f680:	b480      	push	{r7}
 800f682:	b087      	sub	sp, #28
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6a1b      	ldr	r3, [r3, #32]
 800f68e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	6a1b      	ldr	r3, [r3, #32]
 800f694:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f6a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f6ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f6b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	68fa      	ldr	r2, [r7, #12]
 800f6ba:	4313      	orrs	r3, r2
 800f6bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f6c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	689b      	ldr	r3, [r3, #8]
 800f6ca:	041b      	lsls	r3, r3, #16
 800f6cc:	693a      	ldr	r2, [r7, #16]
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	4a21      	ldr	r2, [pc, #132]	@ (800f75c <TIM_OC5_SetConfig+0xdc>)
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	d023      	beq.n	800f722 <TIM_OC5_SetConfig+0xa2>
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	4a20      	ldr	r2, [pc, #128]	@ (800f760 <TIM_OC5_SetConfig+0xe0>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d01f      	beq.n	800f722 <TIM_OC5_SetConfig+0xa2>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	4a1f      	ldr	r2, [pc, #124]	@ (800f764 <TIM_OC5_SetConfig+0xe4>)
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d01b      	beq.n	800f722 <TIM_OC5_SetConfig+0xa2>
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	4a1e      	ldr	r2, [pc, #120]	@ (800f768 <TIM_OC5_SetConfig+0xe8>)
 800f6ee:	4293      	cmp	r3, r2
 800f6f0:	d017      	beq.n	800f722 <TIM_OC5_SetConfig+0xa2>
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	4a1d      	ldr	r2, [pc, #116]	@ (800f76c <TIM_OC5_SetConfig+0xec>)
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d013      	beq.n	800f722 <TIM_OC5_SetConfig+0xa2>
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	4a1c      	ldr	r2, [pc, #112]	@ (800f770 <TIM_OC5_SetConfig+0xf0>)
 800f6fe:	4293      	cmp	r3, r2
 800f700:	d00f      	beq.n	800f722 <TIM_OC5_SetConfig+0xa2>
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	4a1b      	ldr	r2, [pc, #108]	@ (800f774 <TIM_OC5_SetConfig+0xf4>)
 800f706:	4293      	cmp	r3, r2
 800f708:	d00b      	beq.n	800f722 <TIM_OC5_SetConfig+0xa2>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	4a1a      	ldr	r2, [pc, #104]	@ (800f778 <TIM_OC5_SetConfig+0xf8>)
 800f70e:	4293      	cmp	r3, r2
 800f710:	d007      	beq.n	800f722 <TIM_OC5_SetConfig+0xa2>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	4a19      	ldr	r2, [pc, #100]	@ (800f77c <TIM_OC5_SetConfig+0xfc>)
 800f716:	4293      	cmp	r3, r2
 800f718:	d003      	beq.n	800f722 <TIM_OC5_SetConfig+0xa2>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	4a18      	ldr	r2, [pc, #96]	@ (800f780 <TIM_OC5_SetConfig+0x100>)
 800f71e:	4293      	cmp	r3, r2
 800f720:	d109      	bne.n	800f736 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f728:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	695b      	ldr	r3, [r3, #20]
 800f72e:	021b      	lsls	r3, r3, #8
 800f730:	697a      	ldr	r2, [r7, #20]
 800f732:	4313      	orrs	r3, r2
 800f734:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	697a      	ldr	r2, [r7, #20]
 800f73a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	68fa      	ldr	r2, [r7, #12]
 800f740:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	685a      	ldr	r2, [r3, #4]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	693a      	ldr	r2, [r7, #16]
 800f74e:	621a      	str	r2, [r3, #32]
}
 800f750:	bf00      	nop
 800f752:	371c      	adds	r7, #28
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr
 800f75c:	40012c00 	.word	0x40012c00
 800f760:	50012c00 	.word	0x50012c00
 800f764:	40013400 	.word	0x40013400
 800f768:	50013400 	.word	0x50013400
 800f76c:	40014000 	.word	0x40014000
 800f770:	50014000 	.word	0x50014000
 800f774:	40014400 	.word	0x40014400
 800f778:	50014400 	.word	0x50014400
 800f77c:	40014800 	.word	0x40014800
 800f780:	50014800 	.word	0x50014800

0800f784 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f784:	b480      	push	{r7}
 800f786:	b087      	sub	sp, #28
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6a1b      	ldr	r3, [r3, #32]
 800f792:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6a1b      	ldr	r3, [r3, #32]
 800f798:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f7b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f7b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	021b      	lsls	r3, r3, #8
 800f7be:	68fa      	ldr	r2, [r7, #12]
 800f7c0:	4313      	orrs	r3, r2
 800f7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f7ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	689b      	ldr	r3, [r3, #8]
 800f7d0:	051b      	lsls	r3, r3, #20
 800f7d2:	693a      	ldr	r2, [r7, #16]
 800f7d4:	4313      	orrs	r3, r2
 800f7d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	4a22      	ldr	r2, [pc, #136]	@ (800f864 <TIM_OC6_SetConfig+0xe0>)
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d023      	beq.n	800f828 <TIM_OC6_SetConfig+0xa4>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	4a21      	ldr	r2, [pc, #132]	@ (800f868 <TIM_OC6_SetConfig+0xe4>)
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d01f      	beq.n	800f828 <TIM_OC6_SetConfig+0xa4>
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	4a20      	ldr	r2, [pc, #128]	@ (800f86c <TIM_OC6_SetConfig+0xe8>)
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d01b      	beq.n	800f828 <TIM_OC6_SetConfig+0xa4>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	4a1f      	ldr	r2, [pc, #124]	@ (800f870 <TIM_OC6_SetConfig+0xec>)
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d017      	beq.n	800f828 <TIM_OC6_SetConfig+0xa4>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	4a1e      	ldr	r2, [pc, #120]	@ (800f874 <TIM_OC6_SetConfig+0xf0>)
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d013      	beq.n	800f828 <TIM_OC6_SetConfig+0xa4>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	4a1d      	ldr	r2, [pc, #116]	@ (800f878 <TIM_OC6_SetConfig+0xf4>)
 800f804:	4293      	cmp	r3, r2
 800f806:	d00f      	beq.n	800f828 <TIM_OC6_SetConfig+0xa4>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	4a1c      	ldr	r2, [pc, #112]	@ (800f87c <TIM_OC6_SetConfig+0xf8>)
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d00b      	beq.n	800f828 <TIM_OC6_SetConfig+0xa4>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	4a1b      	ldr	r2, [pc, #108]	@ (800f880 <TIM_OC6_SetConfig+0xfc>)
 800f814:	4293      	cmp	r3, r2
 800f816:	d007      	beq.n	800f828 <TIM_OC6_SetConfig+0xa4>
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	4a1a      	ldr	r2, [pc, #104]	@ (800f884 <TIM_OC6_SetConfig+0x100>)
 800f81c:	4293      	cmp	r3, r2
 800f81e:	d003      	beq.n	800f828 <TIM_OC6_SetConfig+0xa4>
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	4a19      	ldr	r2, [pc, #100]	@ (800f888 <TIM_OC6_SetConfig+0x104>)
 800f824:	4293      	cmp	r3, r2
 800f826:	d109      	bne.n	800f83c <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f82e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	695b      	ldr	r3, [r3, #20]
 800f834:	029b      	lsls	r3, r3, #10
 800f836:	697a      	ldr	r2, [r7, #20]
 800f838:	4313      	orrs	r3, r2
 800f83a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	697a      	ldr	r2, [r7, #20]
 800f840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	68fa      	ldr	r2, [r7, #12]
 800f846:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	685a      	ldr	r2, [r3, #4]
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	693a      	ldr	r2, [r7, #16]
 800f854:	621a      	str	r2, [r3, #32]
}
 800f856:	bf00      	nop
 800f858:	371c      	adds	r7, #28
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr
 800f862:	bf00      	nop
 800f864:	40012c00 	.word	0x40012c00
 800f868:	50012c00 	.word	0x50012c00
 800f86c:	40013400 	.word	0x40013400
 800f870:	50013400 	.word	0x50013400
 800f874:	40014000 	.word	0x40014000
 800f878:	50014000 	.word	0x50014000
 800f87c:	40014400 	.word	0x40014400
 800f880:	50014400 	.word	0x50014400
 800f884:	40014800 	.word	0x40014800
 800f888:	50014800 	.word	0x50014800

0800f88c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f88c:	b480      	push	{r7}
 800f88e:	b087      	sub	sp, #28
 800f890:	af00      	add	r7, sp, #0
 800f892:	60f8      	str	r0, [r7, #12]
 800f894:	60b9      	str	r1, [r7, #8]
 800f896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	6a1b      	ldr	r3, [r3, #32]
 800f89c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	6a1b      	ldr	r3, [r3, #32]
 800f8a2:	f023 0201 	bic.w	r2, r3, #1
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	699b      	ldr	r3, [r3, #24]
 800f8ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f8b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	011b      	lsls	r3, r3, #4
 800f8bc:	693a      	ldr	r2, [r7, #16]
 800f8be:	4313      	orrs	r3, r2
 800f8c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	f023 030a 	bic.w	r3, r3, #10
 800f8c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f8ca:	697a      	ldr	r2, [r7, #20]
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	4313      	orrs	r3, r2
 800f8d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	693a      	ldr	r2, [r7, #16]
 800f8d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	697a      	ldr	r2, [r7, #20]
 800f8dc:	621a      	str	r2, [r3, #32]
}
 800f8de:	bf00      	nop
 800f8e0:	371c      	adds	r7, #28
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e8:	4770      	bx	lr

0800f8ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f8ea:	b480      	push	{r7}
 800f8ec:	b087      	sub	sp, #28
 800f8ee:	af00      	add	r7, sp, #0
 800f8f0:	60f8      	str	r0, [r7, #12]
 800f8f2:	60b9      	str	r1, [r7, #8]
 800f8f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	6a1b      	ldr	r3, [r3, #32]
 800f8fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	6a1b      	ldr	r3, [r3, #32]
 800f900:	f023 0210 	bic.w	r2, r3, #16
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	699b      	ldr	r3, [r3, #24]
 800f90c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f914:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	031b      	lsls	r3, r3, #12
 800f91a:	693a      	ldr	r2, [r7, #16]
 800f91c:	4313      	orrs	r3, r2
 800f91e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f926:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	011b      	lsls	r3, r3, #4
 800f92c:	697a      	ldr	r2, [r7, #20]
 800f92e:	4313      	orrs	r3, r2
 800f930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	693a      	ldr	r2, [r7, #16]
 800f936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	697a      	ldr	r2, [r7, #20]
 800f93c:	621a      	str	r2, [r3, #32]
}
 800f93e:	bf00      	nop
 800f940:	371c      	adds	r7, #28
 800f942:	46bd      	mov	sp, r7
 800f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f948:	4770      	bx	lr

0800f94a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f94a:	b480      	push	{r7}
 800f94c:	b085      	sub	sp, #20
 800f94e:	af00      	add	r7, sp, #0
 800f950:	6078      	str	r0, [r7, #4]
 800f952:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	689b      	ldr	r3, [r3, #8]
 800f958:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f964:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f966:	683a      	ldr	r2, [r7, #0]
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	4313      	orrs	r3, r2
 800f96c:	f043 0307 	orr.w	r3, r3, #7
 800f970:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	68fa      	ldr	r2, [r7, #12]
 800f976:	609a      	str	r2, [r3, #8]
}
 800f978:	bf00      	nop
 800f97a:	3714      	adds	r7, #20
 800f97c:	46bd      	mov	sp, r7
 800f97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f982:	4770      	bx	lr

0800f984 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f984:	b480      	push	{r7}
 800f986:	b087      	sub	sp, #28
 800f988:	af00      	add	r7, sp, #0
 800f98a:	60f8      	str	r0, [r7, #12]
 800f98c:	60b9      	str	r1, [r7, #8]
 800f98e:	607a      	str	r2, [r7, #4]
 800f990:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	689b      	ldr	r3, [r3, #8]
 800f996:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f99e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	021a      	lsls	r2, r3, #8
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	431a      	orrs	r2, r3
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	4313      	orrs	r3, r2
 800f9ac:	697a      	ldr	r2, [r7, #20]
 800f9ae:	4313      	orrs	r3, r2
 800f9b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	697a      	ldr	r2, [r7, #20]
 800f9b6:	609a      	str	r2, [r3, #8]
}
 800f9b8:	bf00      	nop
 800f9ba:	371c      	adds	r7, #28
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c2:	4770      	bx	lr

0800f9c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b085      	sub	sp, #20
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d101      	bne.n	800f9dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f9d8:	2302      	movs	r3, #2
 800f9da:	e097      	b.n	800fb0c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2201      	movs	r2, #1
 800f9e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2202      	movs	r2, #2
 800f9e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	685b      	ldr	r3, [r3, #4]
 800f9f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	689b      	ldr	r3, [r3, #8]
 800f9fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	4a45      	ldr	r2, [pc, #276]	@ (800fb18 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800fa02:	4293      	cmp	r3, r2
 800fa04:	d00e      	beq.n	800fa24 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	4a44      	ldr	r2, [pc, #272]	@ (800fb1c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800fa0c:	4293      	cmp	r3, r2
 800fa0e:	d009      	beq.n	800fa24 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	4a42      	ldr	r2, [pc, #264]	@ (800fb20 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d004      	beq.n	800fa24 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	4a41      	ldr	r2, [pc, #260]	@ (800fb24 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800fa20:	4293      	cmp	r3, r2
 800fa22:	d108      	bne.n	800fa36 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800fa2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	68fa      	ldr	r2, [r7, #12]
 800fa32:	4313      	orrs	r3, r2
 800fa34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800fa3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	68fa      	ldr	r2, [r7, #12]
 800fa48:	4313      	orrs	r3, r2
 800fa4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	68fa      	ldr	r2, [r7, #12]
 800fa52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	4a2f      	ldr	r2, [pc, #188]	@ (800fb18 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	d040      	beq.n	800fae0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	4a2e      	ldr	r2, [pc, #184]	@ (800fb1c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800fa64:	4293      	cmp	r3, r2
 800fa66:	d03b      	beq.n	800fae0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa70:	d036      	beq.n	800fae0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fa7a:	d031      	beq.n	800fae0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a29      	ldr	r2, [pc, #164]	@ (800fb28 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d02c      	beq.n	800fae0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	4a28      	ldr	r2, [pc, #160]	@ (800fb2c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d027      	beq.n	800fae0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	4a26      	ldr	r2, [pc, #152]	@ (800fb30 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d022      	beq.n	800fae0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	4a25      	ldr	r2, [pc, #148]	@ (800fb34 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d01d      	beq.n	800fae0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	4a23      	ldr	r2, [pc, #140]	@ (800fb38 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800faaa:	4293      	cmp	r3, r2
 800faac:	d018      	beq.n	800fae0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	4a22      	ldr	r2, [pc, #136]	@ (800fb3c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800fab4:	4293      	cmp	r3, r2
 800fab6:	d013      	beq.n	800fae0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4a18      	ldr	r2, [pc, #96]	@ (800fb20 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d00e      	beq.n	800fae0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	4a17      	ldr	r2, [pc, #92]	@ (800fb24 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800fac8:	4293      	cmp	r3, r2
 800faca:	d009      	beq.n	800fae0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	4a1b      	ldr	r2, [pc, #108]	@ (800fb40 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d004      	beq.n	800fae0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	4a1a      	ldr	r2, [pc, #104]	@ (800fb44 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800fadc:	4293      	cmp	r3, r2
 800fade:	d10c      	bne.n	800fafa <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fae6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	689b      	ldr	r3, [r3, #8]
 800faec:	68ba      	ldr	r2, [r7, #8]
 800faee:	4313      	orrs	r3, r2
 800faf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	68ba      	ldr	r2, [r7, #8]
 800faf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2201      	movs	r2, #1
 800fafe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2200      	movs	r2, #0
 800fb06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fb0a:	2300      	movs	r3, #0
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3714      	adds	r7, #20
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr
 800fb18:	40012c00 	.word	0x40012c00
 800fb1c:	50012c00 	.word	0x50012c00
 800fb20:	40013400 	.word	0x40013400
 800fb24:	50013400 	.word	0x50013400
 800fb28:	40000400 	.word	0x40000400
 800fb2c:	50000400 	.word	0x50000400
 800fb30:	40000800 	.word	0x40000800
 800fb34:	50000800 	.word	0x50000800
 800fb38:	40000c00 	.word	0x40000c00
 800fb3c:	50000c00 	.word	0x50000c00
 800fb40:	40014000 	.word	0x40014000
 800fb44:	50014000 	.word	0x50014000

0800fb48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d101      	bne.n	800fb5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fb56:	2301      	movs	r3, #1
 800fb58:	e042      	b.n	800fbe0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d106      	bne.n	800fb72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2200      	movs	r2, #0
 800fb68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f7f2 fbf3 	bl	8002358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2224      	movs	r2, #36	@ 0x24
 800fb76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	681a      	ldr	r2, [r3, #0]
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	f022 0201 	bic.w	r2, r2, #1
 800fb88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d002      	beq.n	800fb98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f000 fd02 	bl	801059c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f000 fb51 	bl	8010240 <UART_SetConfig>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	2b01      	cmp	r3, #1
 800fba2:	d101      	bne.n	800fba8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fba4:	2301      	movs	r3, #1
 800fba6:	e01b      	b.n	800fbe0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	685a      	ldr	r2, [r3, #4]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fbb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	689a      	ldr	r2, [r3, #8]
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fbc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	681a      	ldr	r2, [r3, #0]
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	f042 0201 	orr.w	r2, r2, #1
 800fbd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f000 fd81 	bl	80106e0 <UART_CheckIdleState>
 800fbde:	4603      	mov	r3, r0
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3708      	adds	r7, #8
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}

0800fbe8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b0ba      	sub	sp, #232	@ 0xe8
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	69db      	ldr	r3, [r3, #28]
 800fbf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	689b      	ldr	r3, [r3, #8]
 800fc0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fc0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800fc12:	f640 030f 	movw	r3, #2063	@ 0x80f
 800fc16:	4013      	ands	r3, r2
 800fc18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800fc1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d11b      	bne.n	800fc5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fc24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc28:	f003 0320 	and.w	r3, r3, #32
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d015      	beq.n	800fc5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fc30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc34:	f003 0320 	and.w	r3, r3, #32
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d105      	bne.n	800fc48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fc3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fc40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d009      	beq.n	800fc5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	f000 82cb 	beq.w	80101e8 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	4798      	blx	r3
      }
      return;
 800fc5a:	e2c5      	b.n	80101e8 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fc5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	f000 8123 	beq.w	800feac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fc66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fc6a:	4b8d      	ldr	r3, [pc, #564]	@ (800fea0 <HAL_UART_IRQHandler+0x2b8>)
 800fc6c:	4013      	ands	r3, r2
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d106      	bne.n	800fc80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fc72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800fc76:	4b8b      	ldr	r3, [pc, #556]	@ (800fea4 <HAL_UART_IRQHandler+0x2bc>)
 800fc78:	4013      	ands	r3, r2
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	f000 8116 	beq.w	800feac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fc80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc84:	f003 0301 	and.w	r3, r3, #1
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d011      	beq.n	800fcb0 <HAL_UART_IRQHandler+0xc8>
 800fc8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d00b      	beq.n	800fcb0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	2201      	movs	r2, #1
 800fc9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fca6:	f043 0201 	orr.w	r2, r3, #1
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fcb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fcb4:	f003 0302 	and.w	r3, r3, #2
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d011      	beq.n	800fce0 <HAL_UART_IRQHandler+0xf8>
 800fcbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fcc0:	f003 0301 	and.w	r3, r3, #1
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d00b      	beq.n	800fce0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	2202      	movs	r2, #2
 800fcce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fcd6:	f043 0204 	orr.w	r2, r3, #4
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fce4:	f003 0304 	and.w	r3, r3, #4
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d011      	beq.n	800fd10 <HAL_UART_IRQHandler+0x128>
 800fcec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fcf0:	f003 0301 	and.w	r3, r3, #1
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d00b      	beq.n	800fd10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	2204      	movs	r2, #4
 800fcfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd06:	f043 0202 	orr.w	r2, r3, #2
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fd10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd14:	f003 0308 	and.w	r3, r3, #8
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d017      	beq.n	800fd4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fd1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd20:	f003 0320 	and.w	r3, r3, #32
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d105      	bne.n	800fd34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fd28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fd2c:	4b5c      	ldr	r3, [pc, #368]	@ (800fea0 <HAL_UART_IRQHandler+0x2b8>)
 800fd2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d00b      	beq.n	800fd4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	2208      	movs	r2, #8
 800fd3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd42:	f043 0208 	orr.w	r2, r3, #8
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fd4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d012      	beq.n	800fd7e <HAL_UART_IRQHandler+0x196>
 800fd58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d00c      	beq.n	800fd7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fd6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd74:	f043 0220 	orr.w	r2, r3, #32
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	f000 8231 	beq.w	80101ec <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fd8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd8e:	f003 0320 	and.w	r3, r3, #32
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d013      	beq.n	800fdbe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fd96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd9a:	f003 0320 	and.w	r3, r3, #32
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d105      	bne.n	800fdae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fda2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fda6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d007      	beq.n	800fdbe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d003      	beq.n	800fdbe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fdc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	689b      	ldr	r3, [r3, #8]
 800fdce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdd2:	2b40      	cmp	r3, #64	@ 0x40
 800fdd4:	d005      	beq.n	800fde2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fdd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fdda:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d054      	beq.n	800fe8c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f000 fd93 	bl	801090e <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	689b      	ldr	r3, [r3, #8]
 800fdee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdf2:	2b40      	cmp	r3, #64	@ 0x40
 800fdf4:	d146      	bne.n	800fe84 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	3308      	adds	r3, #8
 800fdfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fe04:	e853 3f00 	ldrex	r3, [r3]
 800fe08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fe0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fe10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fe14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	3308      	adds	r3, #8
 800fe1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fe22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fe26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fe2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fe32:	e841 2300 	strex	r3, r2, [r1]
 800fe36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fe3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d1d9      	bne.n	800fdf6 <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d017      	beq.n	800fe7c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe52:	4a15      	ldr	r2, [pc, #84]	@ (800fea8 <HAL_UART_IRQHandler+0x2c0>)
 800fe54:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f7f5 fce3 	bl	8005828 <HAL_DMA_Abort_IT>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d019      	beq.n	800fe9c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fe76:	4610      	mov	r0, r2
 800fe78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe7a:	e00f      	b.n	800fe9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f000 f9c9 	bl	8010214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe82:	e00b      	b.n	800fe9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f000 f9c5 	bl	8010214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe8a:	e007      	b.n	800fe9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f000 f9c1 	bl	8010214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2200      	movs	r2, #0
 800fe96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800fe9a:	e1a7      	b.n	80101ec <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe9c:	bf00      	nop
    return;
 800fe9e:	e1a5      	b.n	80101ec <HAL_UART_IRQHandler+0x604>
 800fea0:	10000001 	.word	0x10000001
 800fea4:	04000120 	.word	0x04000120
 800fea8:	080109db 	.word	0x080109db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800feb0:	2b01      	cmp	r3, #1
 800feb2:	f040 8150 	bne.w	8010156 <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800feb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800feba:	f003 0310 	and.w	r3, r3, #16
 800febe:	2b00      	cmp	r3, #0
 800fec0:	f000 8149 	beq.w	8010156 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fec8:	f003 0310 	and.w	r3, r3, #16
 800fecc:	2b00      	cmp	r3, #0
 800fece:	f000 8142 	beq.w	8010156 <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	2210      	movs	r2, #16
 800fed8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	689b      	ldr	r3, [r3, #8]
 800fee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fee4:	2b40      	cmp	r3, #64	@ 0x40
 800fee6:	f040 80b8 	bne.w	801005a <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fef4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fef8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	f000 8177 	beq.w	80101f0 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ff08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	f080 816f 	bcs.w	80101f0 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ff18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff24:	2b81      	cmp	r3, #129	@ 0x81
 800ff26:	f000 8087 	beq.w	8010038 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ff36:	e853 3f00 	ldrex	r3, [r3]
 800ff3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ff3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ff42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ff46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	461a      	mov	r2, r3
 800ff50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ff54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ff58:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff5c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ff60:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ff64:	e841 2300 	strex	r3, r2, [r1]
 800ff68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ff6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d1da      	bne.n	800ff2a <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	3308      	adds	r3, #8
 800ff7a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ff7e:	e853 3f00 	ldrex	r3, [r3]
 800ff82:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ff84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ff86:	f023 0301 	bic.w	r3, r3, #1
 800ff8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	3308      	adds	r3, #8
 800ff94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ff98:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ff9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff9e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ffa0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ffa4:	e841 2300 	strex	r3, r2, [r1]
 800ffa8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ffaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d1e1      	bne.n	800ff74 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	3308      	adds	r3, #8
 800ffb6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ffba:	e853 3f00 	ldrex	r3, [r3]
 800ffbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ffc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ffc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ffc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	3308      	adds	r3, #8
 800ffd0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ffd4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ffd6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffd8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ffda:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ffdc:	e841 2300 	strex	r3, r2, [r1]
 800ffe0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ffe2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d1e3      	bne.n	800ffb0 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2220      	movs	r2, #32
 800ffec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2200      	movs	r2, #0
 800fff4:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fffe:	e853 3f00 	ldrex	r3, [r3]
 8010002:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010004:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010006:	f023 0310 	bic.w	r3, r3, #16
 801000a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	461a      	mov	r2, r3
 8010014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010018:	65bb      	str	r3, [r7, #88]	@ 0x58
 801001a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801001c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801001e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010020:	e841 2300 	strex	r3, r2, [r1]
 8010024:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010028:	2b00      	cmp	r3, #0
 801002a:	d1e4      	bne.n	800fff6 <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010032:	4618      	mov	r0, r3
 8010034:	f7f5 fb7c 	bl	8005730 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2202      	movs	r2, #2
 801003c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801004a:	b29b      	uxth	r3, r3
 801004c:	1ad3      	subs	r3, r2, r3
 801004e:	b29b      	uxth	r3, r3
 8010050:	4619      	mov	r1, r3
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f000 f8e8 	bl	8010228 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010058:	e0ca      	b.n	80101f0 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010066:	b29b      	uxth	r3, r3
 8010068:	1ad3      	subs	r3, r2, r3
 801006a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010074:	b29b      	uxth	r3, r3
 8010076:	2b00      	cmp	r3, #0
 8010078:	f000 80bc 	beq.w	80101f4 <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 801007c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010080:	2b00      	cmp	r3, #0
 8010082:	f000 80b7 	beq.w	80101f4 <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801008c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801008e:	e853 3f00 	ldrex	r3, [r3]
 8010092:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010096:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801009a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	461a      	mov	r2, r3
 80100a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80100a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80100aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80100ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80100b0:	e841 2300 	strex	r3, r2, [r1]
 80100b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80100b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d1e4      	bne.n	8010086 <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	3308      	adds	r3, #8
 80100c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100c6:	e853 3f00 	ldrex	r3, [r3]
 80100ca:	623b      	str	r3, [r7, #32]
   return(result);
 80100cc:	6a3b      	ldr	r3, [r7, #32]
 80100ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80100d2:	f023 0301 	bic.w	r3, r3, #1
 80100d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	3308      	adds	r3, #8
 80100e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80100e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80100e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80100ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100ec:	e841 2300 	strex	r3, r2, [r1]
 80100f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80100f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d1e1      	bne.n	80100bc <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2220      	movs	r2, #32
 80100fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2200      	movs	r2, #0
 8010104:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2200      	movs	r2, #0
 801010a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	e853 3f00 	ldrex	r3, [r3]
 8010118:	60fb      	str	r3, [r7, #12]
   return(result);
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	f023 0310 	bic.w	r3, r3, #16
 8010120:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	461a      	mov	r2, r3
 801012a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801012e:	61fb      	str	r3, [r7, #28]
 8010130:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010132:	69b9      	ldr	r1, [r7, #24]
 8010134:	69fa      	ldr	r2, [r7, #28]
 8010136:	e841 2300 	strex	r3, r2, [r1]
 801013a:	617b      	str	r3, [r7, #20]
   return(result);
 801013c:	697b      	ldr	r3, [r7, #20]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d1e4      	bne.n	801010c <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	2202      	movs	r2, #2
 8010146:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010148:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801014c:	4619      	mov	r1, r3
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f000 f86a 	bl	8010228 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010154:	e04e      	b.n	80101f4 <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801015a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801015e:	2b00      	cmp	r3, #0
 8010160:	d014      	beq.n	801018c <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801016a:	2b00      	cmp	r3, #0
 801016c:	d105      	bne.n	801017a <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801016e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010172:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010176:	2b00      	cmp	r3, #0
 8010178:	d008      	beq.n	801018c <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801017e:	2b00      	cmp	r3, #0
 8010180:	d03a      	beq.n	80101f8 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010186:	6878      	ldr	r0, [r7, #4]
 8010188:	4798      	blx	r3
    }
    return;
 801018a:	e035      	b.n	80101f8 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801018c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010194:	2b00      	cmp	r3, #0
 8010196:	d009      	beq.n	80101ac <HAL_UART_IRQHandler+0x5c4>
 8010198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801019c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d003      	beq.n	80101ac <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	f000 fc2e 	bl	8010a06 <UART_EndTransmit_IT>
    return;
 80101aa:	e026      	b.n	80101fa <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80101ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d009      	beq.n	80101cc <HAL_UART_IRQHandler+0x5e4>
 80101b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80101bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d003      	beq.n	80101cc <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f000 fc53 	bl	8010a70 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80101ca:	e016      	b.n	80101fa <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80101cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d010      	beq.n	80101fa <HAL_UART_IRQHandler+0x612>
 80101d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80101dc:	2b00      	cmp	r3, #0
 80101de:	da0c      	bge.n	80101fa <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f000 fc3b 	bl	8010a5c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80101e6:	e008      	b.n	80101fa <HAL_UART_IRQHandler+0x612>
      return;
 80101e8:	bf00      	nop
 80101ea:	e006      	b.n	80101fa <HAL_UART_IRQHandler+0x612>
    return;
 80101ec:	bf00      	nop
 80101ee:	e004      	b.n	80101fa <HAL_UART_IRQHandler+0x612>
      return;
 80101f0:	bf00      	nop
 80101f2:	e002      	b.n	80101fa <HAL_UART_IRQHandler+0x612>
      return;
 80101f4:	bf00      	nop
 80101f6:	e000      	b.n	80101fa <HAL_UART_IRQHandler+0x612>
    return;
 80101f8:	bf00      	nop
  }
}
 80101fa:	37e8      	adds	r7, #232	@ 0xe8
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}

08010200 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010200:	b480      	push	{r7}
 8010202:	b083      	sub	sp, #12
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010208:	bf00      	nop
 801020a:	370c      	adds	r7, #12
 801020c:	46bd      	mov	sp, r7
 801020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010212:	4770      	bx	lr

08010214 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010214:	b480      	push	{r7}
 8010216:	b083      	sub	sp, #12
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801021c:	bf00      	nop
 801021e:	370c      	adds	r7, #12
 8010220:	46bd      	mov	sp, r7
 8010222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010226:	4770      	bx	lr

08010228 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010228:	b480      	push	{r7}
 801022a:	b083      	sub	sp, #12
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	460b      	mov	r3, r1
 8010232:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010234:	bf00      	nop
 8010236:	370c      	adds	r7, #12
 8010238:	46bd      	mov	sp, r7
 801023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023e:	4770      	bx	lr

08010240 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010244:	b094      	sub	sp, #80	@ 0x50
 8010246:	af00      	add	r7, sp, #0
 8010248:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801024a:	2300      	movs	r3, #0
 801024c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8010250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010252:	681a      	ldr	r2, [r3, #0]
 8010254:	4b83      	ldr	r3, [pc, #524]	@ (8010464 <UART_SetConfig+0x224>)
 8010256:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801025a:	689a      	ldr	r2, [r3, #8]
 801025c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801025e:	691b      	ldr	r3, [r3, #16]
 8010260:	431a      	orrs	r2, r3
 8010262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010264:	695b      	ldr	r3, [r3, #20]
 8010266:	431a      	orrs	r2, r3
 8010268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801026a:	69db      	ldr	r3, [r3, #28]
 801026c:	4313      	orrs	r3, r2
 801026e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	497c      	ldr	r1, [pc, #496]	@ (8010468 <UART_SetConfig+0x228>)
 8010278:	4019      	ands	r1, r3
 801027a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801027c:	681a      	ldr	r2, [r3, #0]
 801027e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010280:	430b      	orrs	r3, r1
 8010282:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 801028e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010290:	68d9      	ldr	r1, [r3, #12]
 8010292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010294:	681a      	ldr	r2, [r3, #0]
 8010296:	ea40 0301 	orr.w	r3, r0, r1
 801029a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801029c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801029e:	699b      	ldr	r3, [r3, #24]
 80102a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80102a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102a4:	681a      	ldr	r2, [r3, #0]
 80102a6:	4b6f      	ldr	r3, [pc, #444]	@ (8010464 <UART_SetConfig+0x224>)
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d009      	beq.n	80102c0 <UART_SetConfig+0x80>
 80102ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102ae:	681a      	ldr	r2, [r3, #0]
 80102b0:	4b6e      	ldr	r3, [pc, #440]	@ (801046c <UART_SetConfig+0x22c>)
 80102b2:	429a      	cmp	r2, r3
 80102b4:	d004      	beq.n	80102c0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80102b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102b8:	6a1a      	ldr	r2, [r3, #32]
 80102ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102bc:	4313      	orrs	r3, r2
 80102be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80102c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	689b      	ldr	r3, [r3, #8]
 80102c6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80102ca:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80102ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102d0:	681a      	ldr	r2, [r3, #0]
 80102d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102d4:	430b      	orrs	r3, r1
 80102d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80102d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102de:	f023 000f 	bic.w	r0, r3, #15
 80102e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102e4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80102e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102e8:	681a      	ldr	r2, [r3, #0]
 80102ea:	ea40 0301 	orr.w	r3, r0, r1
 80102ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80102f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102f2:	681a      	ldr	r2, [r3, #0]
 80102f4:	4b5e      	ldr	r3, [pc, #376]	@ (8010470 <UART_SetConfig+0x230>)
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d102      	bne.n	8010300 <UART_SetConfig+0xc0>
 80102fa:	2301      	movs	r3, #1
 80102fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80102fe:	e032      	b.n	8010366 <UART_SetConfig+0x126>
 8010300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010302:	681a      	ldr	r2, [r3, #0]
 8010304:	4b5b      	ldr	r3, [pc, #364]	@ (8010474 <UART_SetConfig+0x234>)
 8010306:	429a      	cmp	r2, r3
 8010308:	d102      	bne.n	8010310 <UART_SetConfig+0xd0>
 801030a:	2302      	movs	r3, #2
 801030c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801030e:	e02a      	b.n	8010366 <UART_SetConfig+0x126>
 8010310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010312:	681a      	ldr	r2, [r3, #0]
 8010314:	4b58      	ldr	r3, [pc, #352]	@ (8010478 <UART_SetConfig+0x238>)
 8010316:	429a      	cmp	r2, r3
 8010318:	d102      	bne.n	8010320 <UART_SetConfig+0xe0>
 801031a:	2304      	movs	r3, #4
 801031c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801031e:	e022      	b.n	8010366 <UART_SetConfig+0x126>
 8010320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	4b55      	ldr	r3, [pc, #340]	@ (801047c <UART_SetConfig+0x23c>)
 8010326:	429a      	cmp	r2, r3
 8010328:	d102      	bne.n	8010330 <UART_SetConfig+0xf0>
 801032a:	2308      	movs	r3, #8
 801032c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801032e:	e01a      	b.n	8010366 <UART_SetConfig+0x126>
 8010330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010332:	681a      	ldr	r2, [r3, #0]
 8010334:	4b52      	ldr	r3, [pc, #328]	@ (8010480 <UART_SetConfig+0x240>)
 8010336:	429a      	cmp	r2, r3
 8010338:	d102      	bne.n	8010340 <UART_SetConfig+0x100>
 801033a:	2310      	movs	r3, #16
 801033c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801033e:	e012      	b.n	8010366 <UART_SetConfig+0x126>
 8010340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	4b4f      	ldr	r3, [pc, #316]	@ (8010484 <UART_SetConfig+0x244>)
 8010346:	429a      	cmp	r2, r3
 8010348:	d103      	bne.n	8010352 <UART_SetConfig+0x112>
 801034a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801034e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010350:	e009      	b.n	8010366 <UART_SetConfig+0x126>
 8010352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010354:	681a      	ldr	r2, [r3, #0]
 8010356:	4b43      	ldr	r3, [pc, #268]	@ (8010464 <UART_SetConfig+0x224>)
 8010358:	429a      	cmp	r2, r3
 801035a:	d102      	bne.n	8010362 <UART_SetConfig+0x122>
 801035c:	2320      	movs	r3, #32
 801035e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010360:	e001      	b.n	8010366 <UART_SetConfig+0x126>
 8010362:	2300      	movs	r3, #0
 8010364:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010368:	681a      	ldr	r2, [r3, #0]
 801036a:	4b3e      	ldr	r3, [pc, #248]	@ (8010464 <UART_SetConfig+0x224>)
 801036c:	429a      	cmp	r2, r3
 801036e:	d005      	beq.n	801037c <UART_SetConfig+0x13c>
 8010370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010372:	681a      	ldr	r2, [r3, #0]
 8010374:	4b3d      	ldr	r3, [pc, #244]	@ (801046c <UART_SetConfig+0x22c>)
 8010376:	429a      	cmp	r2, r3
 8010378:	f040 8088 	bne.w	801048c <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801037c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801037e:	2200      	movs	r2, #0
 8010380:	623b      	str	r3, [r7, #32]
 8010382:	627a      	str	r2, [r7, #36]	@ 0x24
 8010384:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8010388:	f7fb fdc2 	bl	800bf10 <HAL_RCCEx_GetPeriphCLKFreq>
 801038c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 801038e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010390:	2b00      	cmp	r3, #0
 8010392:	f000 80eb 	beq.w	801056c <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801039a:	4a3b      	ldr	r2, [pc, #236]	@ (8010488 <UART_SetConfig+0x248>)
 801039c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103a0:	461a      	mov	r2, r3
 80103a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80103a8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80103aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103ac:	685a      	ldr	r2, [r3, #4]
 80103ae:	4613      	mov	r3, r2
 80103b0:	005b      	lsls	r3, r3, #1
 80103b2:	4413      	add	r3, r2
 80103b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d305      	bcc.n	80103c6 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80103ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103bc:	685b      	ldr	r3, [r3, #4]
 80103be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80103c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d903      	bls.n	80103ce <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 80103c6:	2301      	movs	r3, #1
 80103c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80103cc:	e048      	b.n	8010460 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80103ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103d0:	2200      	movs	r2, #0
 80103d2:	61bb      	str	r3, [r7, #24]
 80103d4:	61fa      	str	r2, [r7, #28]
 80103d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103da:	4a2b      	ldr	r2, [pc, #172]	@ (8010488 <UART_SetConfig+0x248>)
 80103dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	2200      	movs	r2, #0
 80103e4:	613b      	str	r3, [r7, #16]
 80103e6:	617a      	str	r2, [r7, #20]
 80103e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80103ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80103f0:	f7ef ff60 	bl	80002b4 <__aeabi_uldivmod>
 80103f4:	4602      	mov	r2, r0
 80103f6:	460b      	mov	r3, r1
 80103f8:	4610      	mov	r0, r2
 80103fa:	4619      	mov	r1, r3
 80103fc:	f04f 0200 	mov.w	r2, #0
 8010400:	f04f 0300 	mov.w	r3, #0
 8010404:	020b      	lsls	r3, r1, #8
 8010406:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801040a:	0202      	lsls	r2, r0, #8
 801040c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801040e:	6849      	ldr	r1, [r1, #4]
 8010410:	0849      	lsrs	r1, r1, #1
 8010412:	2000      	movs	r0, #0
 8010414:	460c      	mov	r4, r1
 8010416:	4605      	mov	r5, r0
 8010418:	eb12 0804 	adds.w	r8, r2, r4
 801041c:	eb43 0905 	adc.w	r9, r3, r5
 8010420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010422:	685b      	ldr	r3, [r3, #4]
 8010424:	2200      	movs	r2, #0
 8010426:	60bb      	str	r3, [r7, #8]
 8010428:	60fa      	str	r2, [r7, #12]
 801042a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801042e:	4640      	mov	r0, r8
 8010430:	4649      	mov	r1, r9
 8010432:	f7ef ff3f 	bl	80002b4 <__aeabi_uldivmod>
 8010436:	4602      	mov	r2, r0
 8010438:	460b      	mov	r3, r1
 801043a:	4613      	mov	r3, r2
 801043c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801043e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010440:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010444:	d308      	bcc.n	8010458 <UART_SetConfig+0x218>
 8010446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010448:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801044c:	d204      	bcs.n	8010458 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 801044e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010454:	60da      	str	r2, [r3, #12]
 8010456:	e003      	b.n	8010460 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8010458:	2301      	movs	r3, #1
 801045a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 801045e:	e085      	b.n	801056c <UART_SetConfig+0x32c>
 8010460:	e084      	b.n	801056c <UART_SetConfig+0x32c>
 8010462:	bf00      	nop
 8010464:	46002400 	.word	0x46002400
 8010468:	cfff69f3 	.word	0xcfff69f3
 801046c:	56002400 	.word	0x56002400
 8010470:	40013800 	.word	0x40013800
 8010474:	40004400 	.word	0x40004400
 8010478:	40004800 	.word	0x40004800
 801047c:	40004c00 	.word	0x40004c00
 8010480:	40005000 	.word	0x40005000
 8010484:	40006400 	.word	0x40006400
 8010488:	080116a4 	.word	0x080116a4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801048c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801048e:	69db      	ldr	r3, [r3, #28]
 8010490:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010494:	d13c      	bne.n	8010510 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010496:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010498:	2200      	movs	r2, #0
 801049a:	603b      	str	r3, [r7, #0]
 801049c:	607a      	str	r2, [r7, #4]
 801049e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80104a2:	f7fb fd35 	bl	800bf10 <HAL_RCCEx_GetPeriphCLKFreq>
 80104a6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80104a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d05e      	beq.n	801056c <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80104ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104b2:	4a39      	ldr	r2, [pc, #228]	@ (8010598 <UART_SetConfig+0x358>)
 80104b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104b8:	461a      	mov	r2, r3
 80104ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80104c0:	005a      	lsls	r2, r3, #1
 80104c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104c4:	685b      	ldr	r3, [r3, #4]
 80104c6:	085b      	lsrs	r3, r3, #1
 80104c8:	441a      	add	r2, r3
 80104ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80104d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80104d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104d6:	2b0f      	cmp	r3, #15
 80104d8:	d916      	bls.n	8010508 <UART_SetConfig+0x2c8>
 80104da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80104e0:	d212      	bcs.n	8010508 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80104e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	f023 030f 	bic.w	r3, r3, #15
 80104ea:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80104ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104ee:	085b      	lsrs	r3, r3, #1
 80104f0:	b29b      	uxth	r3, r3
 80104f2:	f003 0307 	and.w	r3, r3, #7
 80104f6:	b29a      	uxth	r2, r3
 80104f8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80104fa:	4313      	orrs	r3, r2
 80104fc:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80104fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010504:	60da      	str	r2, [r3, #12]
 8010506:	e031      	b.n	801056c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8010508:	2301      	movs	r3, #1
 801050a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801050e:	e02d      	b.n	801056c <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010510:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010512:	2200      	movs	r2, #0
 8010514:	469a      	mov	sl, r3
 8010516:	4693      	mov	fp, r2
 8010518:	4650      	mov	r0, sl
 801051a:	4659      	mov	r1, fp
 801051c:	f7fb fcf8 	bl	800bf10 <HAL_RCCEx_GetPeriphCLKFreq>
 8010520:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8010522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010524:	2b00      	cmp	r3, #0
 8010526:	d021      	beq.n	801056c <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801052a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801052c:	4a1a      	ldr	r2, [pc, #104]	@ (8010598 <UART_SetConfig+0x358>)
 801052e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010532:	461a      	mov	r2, r3
 8010534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010536:	fbb3 f2f2 	udiv	r2, r3, r2
 801053a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	085b      	lsrs	r3, r3, #1
 8010540:	441a      	add	r2, r3
 8010542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010544:	685b      	ldr	r3, [r3, #4]
 8010546:	fbb2 f3f3 	udiv	r3, r2, r3
 801054a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801054c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801054e:	2b0f      	cmp	r3, #15
 8010550:	d909      	bls.n	8010566 <UART_SetConfig+0x326>
 8010552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010558:	d205      	bcs.n	8010566 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801055a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801055c:	b29a      	uxth	r2, r3
 801055e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	60da      	str	r2, [r3, #12]
 8010564:	e002      	b.n	801056c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8010566:	2301      	movs	r3, #1
 8010568:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801056c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801056e:	2201      	movs	r2, #1
 8010570:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010576:	2201      	movs	r2, #1
 8010578:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801057c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801057e:	2200      	movs	r2, #0
 8010580:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010584:	2200      	movs	r2, #0
 8010586:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010588:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 801058c:	4618      	mov	r0, r3
 801058e:	3750      	adds	r7, #80	@ 0x50
 8010590:	46bd      	mov	sp, r7
 8010592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010596:	bf00      	nop
 8010598:	080116a4 	.word	0x080116a4

0801059c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801059c:	b480      	push	{r7}
 801059e:	b083      	sub	sp, #12
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105a8:	f003 0308 	and.w	r3, r3, #8
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d00a      	beq.n	80105c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	685b      	ldr	r3, [r3, #4]
 80105b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	430a      	orrs	r2, r1
 80105c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105ca:	f003 0301 	and.w	r3, r3, #1
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d00a      	beq.n	80105e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	685b      	ldr	r3, [r3, #4]
 80105d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	430a      	orrs	r2, r1
 80105e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105ec:	f003 0302 	and.w	r3, r3, #2
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d00a      	beq.n	801060a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	685b      	ldr	r3, [r3, #4]
 80105fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	430a      	orrs	r2, r1
 8010608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801060e:	f003 0304 	and.w	r3, r3, #4
 8010612:	2b00      	cmp	r3, #0
 8010614:	d00a      	beq.n	801062c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	685b      	ldr	r3, [r3, #4]
 801061c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	430a      	orrs	r2, r1
 801062a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010630:	f003 0310 	and.w	r3, r3, #16
 8010634:	2b00      	cmp	r3, #0
 8010636:	d00a      	beq.n	801064e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	689b      	ldr	r3, [r3, #8]
 801063e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	430a      	orrs	r2, r1
 801064c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010652:	f003 0320 	and.w	r3, r3, #32
 8010656:	2b00      	cmp	r3, #0
 8010658:	d00a      	beq.n	8010670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	689b      	ldr	r3, [r3, #8]
 8010660:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	430a      	orrs	r2, r1
 801066e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010678:	2b00      	cmp	r3, #0
 801067a:	d01a      	beq.n	80106b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	685b      	ldr	r3, [r3, #4]
 8010682:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	430a      	orrs	r2, r1
 8010690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010696:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801069a:	d10a      	bne.n	80106b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	685b      	ldr	r3, [r3, #4]
 80106a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	430a      	orrs	r2, r1
 80106b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d00a      	beq.n	80106d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	430a      	orrs	r2, r1
 80106d2:	605a      	str	r2, [r3, #4]
  }
}
 80106d4:	bf00      	nop
 80106d6:	370c      	adds	r7, #12
 80106d8:	46bd      	mov	sp, r7
 80106da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106de:	4770      	bx	lr

080106e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b098      	sub	sp, #96	@ 0x60
 80106e4:	af02      	add	r7, sp, #8
 80106e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2200      	movs	r2, #0
 80106ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80106f0:	f7f2 fac2 	bl	8002c78 <HAL_GetTick>
 80106f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	f003 0308 	and.w	r3, r3, #8
 8010700:	2b08      	cmp	r3, #8
 8010702:	d12f      	bne.n	8010764 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010704:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010708:	9300      	str	r3, [sp, #0]
 801070a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801070c:	2200      	movs	r2, #0
 801070e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f000 f88e 	bl	8010834 <UART_WaitOnFlagUntilTimeout>
 8010718:	4603      	mov	r3, r0
 801071a:	2b00      	cmp	r3, #0
 801071c:	d022      	beq.n	8010764 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010726:	e853 3f00 	ldrex	r3, [r3]
 801072a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801072c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801072e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010732:	653b      	str	r3, [r7, #80]	@ 0x50
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	461a      	mov	r2, r3
 801073a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801073c:	647b      	str	r3, [r7, #68]	@ 0x44
 801073e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010740:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010742:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010744:	e841 2300 	strex	r3, r2, [r1]
 8010748:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801074a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801074c:	2b00      	cmp	r3, #0
 801074e:	d1e6      	bne.n	801071e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2220      	movs	r2, #32
 8010754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2200      	movs	r2, #0
 801075c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010760:	2303      	movs	r3, #3
 8010762:	e063      	b.n	801082c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	f003 0304 	and.w	r3, r3, #4
 801076e:	2b04      	cmp	r3, #4
 8010770:	d149      	bne.n	8010806 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010772:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010776:	9300      	str	r3, [sp, #0]
 8010778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801077a:	2200      	movs	r2, #0
 801077c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010780:	6878      	ldr	r0, [r7, #4]
 8010782:	f000 f857 	bl	8010834 <UART_WaitOnFlagUntilTimeout>
 8010786:	4603      	mov	r3, r0
 8010788:	2b00      	cmp	r3, #0
 801078a:	d03c      	beq.n	8010806 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010794:	e853 3f00 	ldrex	r3, [r3]
 8010798:	623b      	str	r3, [r7, #32]
   return(result);
 801079a:	6a3b      	ldr	r3, [r7, #32]
 801079c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80107a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	461a      	mov	r2, r3
 80107a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80107ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80107b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107b2:	e841 2300 	strex	r3, r2, [r1]
 80107b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80107b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d1e6      	bne.n	801078c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	3308      	adds	r3, #8
 80107c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107c6:	693b      	ldr	r3, [r7, #16]
 80107c8:	e853 3f00 	ldrex	r3, [r3]
 80107cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	f023 0301 	bic.w	r3, r3, #1
 80107d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	3308      	adds	r3, #8
 80107dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80107de:	61fa      	str	r2, [r7, #28]
 80107e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107e2:	69b9      	ldr	r1, [r7, #24]
 80107e4:	69fa      	ldr	r2, [r7, #28]
 80107e6:	e841 2300 	strex	r3, r2, [r1]
 80107ea:	617b      	str	r3, [r7, #20]
   return(result);
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d1e5      	bne.n	80107be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2220      	movs	r2, #32
 80107f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2200      	movs	r2, #0
 80107fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010802:	2303      	movs	r3, #3
 8010804:	e012      	b.n	801082c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2220      	movs	r2, #32
 801080a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2220      	movs	r2, #32
 8010812:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2200      	movs	r2, #0
 801081a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2200      	movs	r2, #0
 8010820:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2200      	movs	r2, #0
 8010826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801082a:	2300      	movs	r3, #0
}
 801082c:	4618      	mov	r0, r3
 801082e:	3758      	adds	r7, #88	@ 0x58
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b084      	sub	sp, #16
 8010838:	af00      	add	r7, sp, #0
 801083a:	60f8      	str	r0, [r7, #12]
 801083c:	60b9      	str	r1, [r7, #8]
 801083e:	603b      	str	r3, [r7, #0]
 8010840:	4613      	mov	r3, r2
 8010842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010844:	e04f      	b.n	80108e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010846:	69bb      	ldr	r3, [r7, #24]
 8010848:	f1b3 3fff 	cmp.w	r3, #4294967295
 801084c:	d04b      	beq.n	80108e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801084e:	f7f2 fa13 	bl	8002c78 <HAL_GetTick>
 8010852:	4602      	mov	r2, r0
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	1ad3      	subs	r3, r2, r3
 8010858:	69ba      	ldr	r2, [r7, #24]
 801085a:	429a      	cmp	r2, r3
 801085c:	d302      	bcc.n	8010864 <UART_WaitOnFlagUntilTimeout+0x30>
 801085e:	69bb      	ldr	r3, [r7, #24]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d101      	bne.n	8010868 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010864:	2303      	movs	r3, #3
 8010866:	e04e      	b.n	8010906 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	f003 0304 	and.w	r3, r3, #4
 8010872:	2b00      	cmp	r3, #0
 8010874:	d037      	beq.n	80108e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010876:	68bb      	ldr	r3, [r7, #8]
 8010878:	2b80      	cmp	r3, #128	@ 0x80
 801087a:	d034      	beq.n	80108e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	2b40      	cmp	r3, #64	@ 0x40
 8010880:	d031      	beq.n	80108e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	69db      	ldr	r3, [r3, #28]
 8010888:	f003 0308 	and.w	r3, r3, #8
 801088c:	2b08      	cmp	r3, #8
 801088e:	d110      	bne.n	80108b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	2208      	movs	r2, #8
 8010896:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010898:	68f8      	ldr	r0, [r7, #12]
 801089a:	f000 f838 	bl	801090e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	2208      	movs	r2, #8
 80108a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	2200      	movs	r2, #0
 80108aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80108ae:	2301      	movs	r3, #1
 80108b0:	e029      	b.n	8010906 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	69db      	ldr	r3, [r3, #28]
 80108b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80108bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80108c0:	d111      	bne.n	80108e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80108ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80108cc:	68f8      	ldr	r0, [r7, #12]
 80108ce:	f000 f81e 	bl	801090e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	2220      	movs	r2, #32
 80108d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	2200      	movs	r2, #0
 80108de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80108e2:	2303      	movs	r3, #3
 80108e4:	e00f      	b.n	8010906 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	69da      	ldr	r2, [r3, #28]
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	4013      	ands	r3, r2
 80108f0:	68ba      	ldr	r2, [r7, #8]
 80108f2:	429a      	cmp	r2, r3
 80108f4:	bf0c      	ite	eq
 80108f6:	2301      	moveq	r3, #1
 80108f8:	2300      	movne	r3, #0
 80108fa:	b2db      	uxtb	r3, r3
 80108fc:	461a      	mov	r2, r3
 80108fe:	79fb      	ldrb	r3, [r7, #7]
 8010900:	429a      	cmp	r2, r3
 8010902:	d0a0      	beq.n	8010846 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010904:	2300      	movs	r3, #0
}
 8010906:	4618      	mov	r0, r3
 8010908:	3710      	adds	r7, #16
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}

0801090e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801090e:	b480      	push	{r7}
 8010910:	b095      	sub	sp, #84	@ 0x54
 8010912:	af00      	add	r7, sp, #0
 8010914:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801091c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801091e:	e853 3f00 	ldrex	r3, [r3]
 8010922:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010926:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801092a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	461a      	mov	r2, r3
 8010932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010934:	643b      	str	r3, [r7, #64]	@ 0x40
 8010936:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010938:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801093a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801093c:	e841 2300 	strex	r3, r2, [r1]
 8010940:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010944:	2b00      	cmp	r3, #0
 8010946:	d1e6      	bne.n	8010916 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	3308      	adds	r3, #8
 801094e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010950:	6a3b      	ldr	r3, [r7, #32]
 8010952:	e853 3f00 	ldrex	r3, [r3]
 8010956:	61fb      	str	r3, [r7, #28]
   return(result);
 8010958:	69fb      	ldr	r3, [r7, #28]
 801095a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801095e:	f023 0301 	bic.w	r3, r3, #1
 8010962:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	3308      	adds	r3, #8
 801096a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801096c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801096e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010970:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010972:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010974:	e841 2300 	strex	r3, r2, [r1]
 8010978:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801097a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801097c:	2b00      	cmp	r3, #0
 801097e:	d1e3      	bne.n	8010948 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010984:	2b01      	cmp	r3, #1
 8010986:	d118      	bne.n	80109ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	e853 3f00 	ldrex	r3, [r3]
 8010994:	60bb      	str	r3, [r7, #8]
   return(result);
 8010996:	68bb      	ldr	r3, [r7, #8]
 8010998:	f023 0310 	bic.w	r3, r3, #16
 801099c:	647b      	str	r3, [r7, #68]	@ 0x44
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	461a      	mov	r2, r3
 80109a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109a6:	61bb      	str	r3, [r7, #24]
 80109a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109aa:	6979      	ldr	r1, [r7, #20]
 80109ac:	69ba      	ldr	r2, [r7, #24]
 80109ae:	e841 2300 	strex	r3, r2, [r1]
 80109b2:	613b      	str	r3, [r7, #16]
   return(result);
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d1e6      	bne.n	8010988 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2220      	movs	r2, #32
 80109be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2200      	movs	r2, #0
 80109c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2200      	movs	r2, #0
 80109cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80109ce:	bf00      	nop
 80109d0:	3754      	adds	r7, #84	@ 0x54
 80109d2:	46bd      	mov	sp, r7
 80109d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d8:	4770      	bx	lr

080109da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80109da:	b580      	push	{r7, lr}
 80109dc:	b084      	sub	sp, #16
 80109de:	af00      	add	r7, sp, #0
 80109e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80109e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	2200      	movs	r2, #0
 80109ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	2200      	movs	r2, #0
 80109f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80109f8:	68f8      	ldr	r0, [r7, #12]
 80109fa:	f7ff fc0b 	bl	8010214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109fe:	bf00      	nop
 8010a00:	3710      	adds	r7, #16
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}

08010a06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010a06:	b580      	push	{r7, lr}
 8010a08:	b088      	sub	sp, #32
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	e853 3f00 	ldrex	r3, [r3]
 8010a1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010a22:	61fb      	str	r3, [r7, #28]
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	461a      	mov	r2, r3
 8010a2a:	69fb      	ldr	r3, [r7, #28]
 8010a2c:	61bb      	str	r3, [r7, #24]
 8010a2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a30:	6979      	ldr	r1, [r7, #20]
 8010a32:	69ba      	ldr	r2, [r7, #24]
 8010a34:	e841 2300 	strex	r3, r2, [r1]
 8010a38:	613b      	str	r3, [r7, #16]
   return(result);
 8010a3a:	693b      	ldr	r3, [r7, #16]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d1e6      	bne.n	8010a0e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2220      	movs	r2, #32
 8010a44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f7ff fbd6 	bl	8010200 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a54:	bf00      	nop
 8010a56:	3720      	adds	r7, #32
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}

08010a5c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b083      	sub	sp, #12
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010a64:	bf00      	nop
 8010a66:	370c      	adds	r7, #12
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6e:	4770      	bx	lr

08010a70 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b083      	sub	sp, #12
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010a78:	bf00      	nop
 8010a7a:	370c      	adds	r7, #12
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a82:	4770      	bx	lr

08010a84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010a84:	b480      	push	{r7}
 8010a86:	b085      	sub	sp, #20
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010a92:	2b01      	cmp	r3, #1
 8010a94:	d101      	bne.n	8010a9a <HAL_UARTEx_DisableFifoMode+0x16>
 8010a96:	2302      	movs	r3, #2
 8010a98:	e027      	b.n	8010aea <HAL_UARTEx_DisableFifoMode+0x66>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2201      	movs	r2, #1
 8010a9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2224      	movs	r2, #36	@ 0x24
 8010aa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	681a      	ldr	r2, [r3, #0]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	f022 0201 	bic.w	r2, r2, #1
 8010ac0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010ac8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2200      	movs	r2, #0
 8010ace:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	68fa      	ldr	r2, [r7, #12]
 8010ad6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2220      	movs	r2, #32
 8010adc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010ae8:	2300      	movs	r3, #0
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3714      	adds	r7, #20
 8010aee:	46bd      	mov	sp, r7
 8010af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af4:	4770      	bx	lr

08010af6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010af6:	b580      	push	{r7, lr}
 8010af8:	b084      	sub	sp, #16
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	6078      	str	r0, [r7, #4]
 8010afe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010b06:	2b01      	cmp	r3, #1
 8010b08:	d101      	bne.n	8010b0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010b0a:	2302      	movs	r3, #2
 8010b0c:	e02d      	b.n	8010b6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2201      	movs	r2, #1
 8010b12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2224      	movs	r2, #36	@ 0x24
 8010b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	681a      	ldr	r2, [r3, #0]
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	f022 0201 	bic.w	r2, r2, #1
 8010b34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	689b      	ldr	r3, [r3, #8]
 8010b3c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	683a      	ldr	r2, [r7, #0]
 8010b46:	430a      	orrs	r2, r1
 8010b48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f000 f850 	bl	8010bf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	68fa      	ldr	r2, [r7, #12]
 8010b56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	2220      	movs	r2, #32
 8010b5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2200      	movs	r2, #0
 8010b64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010b68:	2300      	movs	r3, #0
}
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	3710      	adds	r7, #16
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}

08010b72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010b72:	b580      	push	{r7, lr}
 8010b74:	b084      	sub	sp, #16
 8010b76:	af00      	add	r7, sp, #0
 8010b78:	6078      	str	r0, [r7, #4]
 8010b7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010b82:	2b01      	cmp	r3, #1
 8010b84:	d101      	bne.n	8010b8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010b86:	2302      	movs	r3, #2
 8010b88:	e02d      	b.n	8010be6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2201      	movs	r2, #1
 8010b8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2224      	movs	r2, #36	@ 0x24
 8010b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	681a      	ldr	r2, [r3, #0]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	f022 0201 	bic.w	r2, r2, #1
 8010bb0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	689b      	ldr	r3, [r3, #8]
 8010bb8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	683a      	ldr	r2, [r7, #0]
 8010bc2:	430a      	orrs	r2, r1
 8010bc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010bc6:	6878      	ldr	r0, [r7, #4]
 8010bc8:	f000 f812 	bl	8010bf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	68fa      	ldr	r2, [r7, #12]
 8010bd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2220      	movs	r2, #32
 8010bd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2200      	movs	r2, #0
 8010be0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010be4:	2300      	movs	r3, #0
}
 8010be6:	4618      	mov	r0, r3
 8010be8:	3710      	adds	r7, #16
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}
	...

08010bf0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	b085      	sub	sp, #20
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d108      	bne.n	8010c12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2201      	movs	r2, #1
 8010c04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010c10:	e031      	b.n	8010c76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010c12:	2308      	movs	r3, #8
 8010c14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010c16:	2308      	movs	r3, #8
 8010c18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	689b      	ldr	r3, [r3, #8]
 8010c20:	0e5b      	lsrs	r3, r3, #25
 8010c22:	b2db      	uxtb	r3, r3
 8010c24:	f003 0307 	and.w	r3, r3, #7
 8010c28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	689b      	ldr	r3, [r3, #8]
 8010c30:	0f5b      	lsrs	r3, r3, #29
 8010c32:	b2db      	uxtb	r3, r3
 8010c34:	f003 0307 	and.w	r3, r3, #7
 8010c38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010c3a:	7bbb      	ldrb	r3, [r7, #14]
 8010c3c:	7b3a      	ldrb	r2, [r7, #12]
 8010c3e:	4911      	ldr	r1, [pc, #68]	@ (8010c84 <UARTEx_SetNbDataToProcess+0x94>)
 8010c40:	5c8a      	ldrb	r2, [r1, r2]
 8010c42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010c46:	7b3a      	ldrb	r2, [r7, #12]
 8010c48:	490f      	ldr	r1, [pc, #60]	@ (8010c88 <UARTEx_SetNbDataToProcess+0x98>)
 8010c4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010c4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c50:	b29a      	uxth	r2, r3
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010c58:	7bfb      	ldrb	r3, [r7, #15]
 8010c5a:	7b7a      	ldrb	r2, [r7, #13]
 8010c5c:	4909      	ldr	r1, [pc, #36]	@ (8010c84 <UARTEx_SetNbDataToProcess+0x94>)
 8010c5e:	5c8a      	ldrb	r2, [r1, r2]
 8010c60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010c64:	7b7a      	ldrb	r2, [r7, #13]
 8010c66:	4908      	ldr	r1, [pc, #32]	@ (8010c88 <UARTEx_SetNbDataToProcess+0x98>)
 8010c68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010c6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c6e:	b29a      	uxth	r2, r3
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010c76:	bf00      	nop
 8010c78:	3714      	adds	r7, #20
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c80:	4770      	bx	lr
 8010c82:	bf00      	nop
 8010c84:	080116bc 	.word	0x080116bc
 8010c88:	080116c4 	.word	0x080116c4

08010c8c <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b086      	sub	sp, #24
 8010c90:	af02      	add	r7, sp, #8
 8010c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010c94:	2300      	movs	r3, #0
 8010c96:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8010c98:	f7f1 ffee 	bl	8002c78 <HAL_GetTick>
 8010c9c:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d102      	bne.n	8010caa <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	73fb      	strb	r3, [r7, #15]
 8010ca8:	e137      	b.n	8010f1a <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	4a76      	ldr	r2, [pc, #472]	@ (8010e88 <HAL_XSPI_Init+0x1fc>)
 8010cb0:	4293      	cmp	r3, r2
 8010cb2:	d008      	beq.n	8010cc6 <HAL_XSPI_Init+0x3a>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	4a74      	ldr	r2, [pc, #464]	@ (8010e8c <HAL_XSPI_Init+0x200>)
 8010cba:	4293      	cmp	r3, r2
 8010cbc:	d003      	beq.n	8010cc6 <HAL_XSPI_Init+0x3a>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	4a73      	ldr	r2, [pc, #460]	@ (8010e90 <HAL_XSPI_Init+0x204>)
 8010cc4:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	4a72      	ldr	r2, [pc, #456]	@ (8010e94 <HAL_XSPI_Init+0x208>)
 8010ccc:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	4a6d      	ldr	r2, [pc, #436]	@ (8010e88 <HAL_XSPI_Init+0x1fc>)
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	d008      	beq.n	8010cea <HAL_XSPI_Init+0x5e>
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	4a6b      	ldr	r2, [pc, #428]	@ (8010e8c <HAL_XSPI_Init+0x200>)
 8010cde:	4293      	cmp	r3, r2
 8010ce0:	d003      	beq.n	8010cea <HAL_XSPI_Init+0x5e>
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	4a6a      	ldr	r2, [pc, #424]	@ (8010e90 <HAL_XSPI_Init+0x204>)
 8010ce8:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	4a66      	ldr	r2, [pc, #408]	@ (8010e88 <HAL_XSPI_Init+0x1fc>)
 8010cf0:	4293      	cmp	r3, r2
 8010cf2:	d008      	beq.n	8010d06 <HAL_XSPI_Init+0x7a>
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	4a64      	ldr	r2, [pc, #400]	@ (8010e8c <HAL_XSPI_Init+0x200>)
 8010cfa:	4293      	cmp	r3, r2
 8010cfc:	d003      	beq.n	8010d06 <HAL_XSPI_Init+0x7a>
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	4a63      	ldr	r2, [pc, #396]	@ (8010e90 <HAL_XSPI_Init+0x204>)
 8010d04:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	2200      	movs	r2, #0
 8010d0a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	f040 8102 	bne.w	8010f1a <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f7f0 ffac 	bl	8001c74 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8010d1c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8010d20:	6878      	ldr	r0, [r7, #4]
 8010d22:	f000 f8ff 	bl	8010f24 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	689a      	ldr	r2, [r3, #8]
 8010d2c:	4b5a      	ldr	r3, [pc, #360]	@ (8010e98 <HAL_XSPI_Init+0x20c>)
 8010d2e:	4013      	ands	r3, r2
 8010d30:	687a      	ldr	r2, [r7, #4]
 8010d32:	68d1      	ldr	r1, [r2, #12]
 8010d34:	687a      	ldr	r2, [r7, #4]
 8010d36:	6912      	ldr	r2, [r2, #16]
 8010d38:	0412      	lsls	r2, r2, #16
 8010d3a:	4311      	orrs	r1, r2
 8010d3c:	687a      	ldr	r2, [r7, #4]
 8010d3e:	6952      	ldr	r2, [r2, #20]
 8010d40:	3a01      	subs	r2, #1
 8010d42:	0212      	lsls	r2, r2, #8
 8010d44:	4311      	orrs	r1, r2
 8010d46:	687a      	ldr	r2, [r7, #4]
 8010d48:	69d2      	ldr	r2, [r2, #28]
 8010d4a:	4311      	orrs	r1, r2
 8010d4c:	687a      	ldr	r2, [r7, #4]
 8010d4e:	6812      	ldr	r2, [r2, #0]
 8010d50:	430b      	orrs	r3, r1
 8010d52:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	4a4b      	ldr	r2, [pc, #300]	@ (8010e88 <HAL_XSPI_Init+0x1fc>)
 8010d5a:	4293      	cmp	r3, r2
 8010d5c:	d00e      	beq.n	8010d7c <HAL_XSPI_Init+0xf0>
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	4a4a      	ldr	r2, [pc, #296]	@ (8010e8c <HAL_XSPI_Init+0x200>)
 8010d64:	4293      	cmp	r3, r2
 8010d66:	d009      	beq.n	8010d7c <HAL_XSPI_Init+0xf0>
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	4a48      	ldr	r2, [pc, #288]	@ (8010e90 <HAL_XSPI_Init+0x204>)
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d004      	beq.n	8010d7c <HAL_XSPI_Init+0xf0>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	4a49      	ldr	r2, [pc, #292]	@ (8010e9c <HAL_XSPI_Init+0x210>)
 8010d78:	4293      	cmp	r3, r2
 8010d7a:	d10a      	bne.n	8010d92 <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	689b      	ldr	r3, [r3, #8]
 8010d82:	f023 0108 	bic.w	r1, r3, #8
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	430a      	orrs	r2, r1
 8010d90:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	68db      	ldr	r3, [r3, #12]
 8010d98:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6a1a      	ldr	r2, [r3, #32]
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	430a      	orrs	r2, r1
 8010da6:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	691b      	ldr	r3, [r3, #16]
 8010dae:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010db6:	041a      	lsls	r2, r3, #16
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	430a      	orrs	r2, r1
 8010dbe:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	4a30      	ldr	r2, [pc, #192]	@ (8010e88 <HAL_XSPI_Init+0x1fc>)
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	d00e      	beq.n	8010de8 <HAL_XSPI_Init+0x15c>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	4a2f      	ldr	r2, [pc, #188]	@ (8010e8c <HAL_XSPI_Init+0x200>)
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	d009      	beq.n	8010de8 <HAL_XSPI_Init+0x15c>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	4a2d      	ldr	r2, [pc, #180]	@ (8010e90 <HAL_XSPI_Init+0x204>)
 8010dda:	4293      	cmp	r3, r2
 8010ddc:	d004      	beq.n	8010de8 <HAL_XSPI_Init+0x15c>
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	4a2e      	ldr	r2, [pc, #184]	@ (8010e9c <HAL_XSPI_Init+0x210>)
 8010de4:	4293      	cmp	r3, r2
 8010de6:	d10a      	bne.n	8010dfe <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	691b      	ldr	r3, [r3, #16]
 8010dee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	430a      	orrs	r2, r1
 8010dfc:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	687a      	ldr	r2, [r7, #4]
 8010e04:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010e06:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	685b      	ldr	r3, [r3, #4]
 8010e16:	3b01      	subs	r3, #1
 8010e18:	021a      	lsls	r2, r3, #8
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	430a      	orrs	r2, r1
 8010e20:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010e26:	9300      	str	r3, [sp, #0]
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	2120      	movs	r1, #32
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f000 f887 	bl	8010f42 <XSPI_WaitFlagStateUntilTimeout>
 8010e34:	4603      	mov	r3, r0
 8010e36:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010e38:	7bfb      	ldrb	r3, [r7, #15]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d16d      	bne.n	8010f1a <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	430a      	orrs	r2, r1
 8010e52:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	4a0e      	ldr	r2, [pc, #56]	@ (8010e94 <HAL_XSPI_Init+0x208>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d004      	beq.n	8010e68 <HAL_XSPI_Init+0x1dc>
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	4a0f      	ldr	r2, [pc, #60]	@ (8010ea0 <HAL_XSPI_Init+0x214>)
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d11d      	bne.n	8010ea4 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010e6c:	9300      	str	r3, [sp, #0]
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	2200      	movs	r2, #0
 8010e72:	2120      	movs	r1, #32
 8010e74:	6878      	ldr	r0, [r7, #4]
 8010e76:	f000 f864 	bl	8010f42 <XSPI_WaitFlagStateUntilTimeout>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8010e7e:	7bfb      	ldrb	r3, [r7, #15]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d00f      	beq.n	8010ea4 <HAL_XSPI_Init+0x218>
          {
            return status;
 8010e84:	7bfb      	ldrb	r3, [r7, #15]
 8010e86:	e049      	b.n	8010f1c <HAL_XSPI_Init+0x290>
 8010e88:	420d1400 	.word	0x420d1400
 8010e8c:	520d1400 	.word	0x520d1400
 8010e90:	420d2400 	.word	0x420d2400
 8010e94:	420d3400 	.word	0x420d3400
 8010e98:	f8e0c0fc 	.word	0xf8e0c0fc
 8010e9c:	520d2400 	.word	0x520d2400
 8010ea0:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	689a      	ldr	r2, [r3, #8]
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	430a      	orrs	r2, r1
 8010eb8:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010ec2:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ece:	431a      	orrs	r2, r3
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	430a      	orrs	r2, r1
 8010ed6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	681a      	ldr	r2, [r3, #0]
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	f042 0201 	orr.w	r2, r2, #1
 8010ee8:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	699b      	ldr	r3, [r3, #24]
 8010eee:	2b02      	cmp	r3, #2
 8010ef0:	d107      	bne.n	8010f02 <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	689a      	ldr	r2, [r3, #8]
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	f042 0202 	orr.w	r2, r2, #2
 8010f00:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010f0a:	d103      	bne.n	8010f14 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2201      	movs	r2, #1
 8010f10:	655a      	str	r2, [r3, #84]	@ 0x54
 8010f12:	e002      	b.n	8010f1a <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2202      	movs	r2, #2
 8010f18:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8010f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3710      	adds	r7, #16
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}

08010f24 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8010f24:	b480      	push	{r7}
 8010f26:	b083      	sub	sp, #12
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	683a      	ldr	r2, [r7, #0]
 8010f32:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 8010f34:	2300      	movs	r3, #0
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	370c      	adds	r7, #12
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f40:	4770      	bx	lr

08010f42 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8010f42:	b580      	push	{r7, lr}
 8010f44:	b084      	sub	sp, #16
 8010f46:	af00      	add	r7, sp, #0
 8010f48:	60f8      	str	r0, [r7, #12]
 8010f4a:	60b9      	str	r1, [r7, #8]
 8010f4c:	603b      	str	r3, [r7, #0]
 8010f4e:	4613      	mov	r3, r2
 8010f50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8010f52:	e01a      	b.n	8010f8a <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010f54:	69bb      	ldr	r3, [r7, #24]
 8010f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f5a:	d016      	beq.n	8010f8a <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010f5c:	f7f1 fe8c 	bl	8002c78 <HAL_GetTick>
 8010f60:	4602      	mov	r2, r0
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	1ad3      	subs	r3, r2, r3
 8010f66:	69ba      	ldr	r2, [r7, #24]
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	d302      	bcc.n	8010f72 <XSPI_WaitFlagStateUntilTimeout+0x30>
 8010f6c:	69bb      	ldr	r3, [r7, #24]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d10b      	bne.n	8010f8a <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f78:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f7e:	f043 0201 	orr.w	r2, r3, #1
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8010f86:	2303      	movs	r3, #3
 8010f88:	e00e      	b.n	8010fa8 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	6a1a      	ldr	r2, [r3, #32]
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	4013      	ands	r3, r2
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	bf14      	ite	ne
 8010f98:	2301      	movne	r3, #1
 8010f9a:	2300      	moveq	r3, #0
 8010f9c:	b2db      	uxtb	r3, r3
 8010f9e:	461a      	mov	r2, r3
 8010fa0:	79fb      	ldrb	r3, [r7, #7]
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d1d6      	bne.n	8010f54 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010fa6:	2300      	movs	r3, #0
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	3710      	adds	r7, #16
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}

08010fb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010fb0:	b084      	sub	sp, #16
 8010fb2:	b580      	push	{r7, lr}
 8010fb4:	b084      	sub	sp, #16
 8010fb6:	af00      	add	r7, sp, #0
 8010fb8:	6078      	str	r0, [r7, #4]
 8010fba:	f107 001c 	add.w	r0, r7, #28
 8010fbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8010fc2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010fc6:	2b03      	cmp	r3, #3
 8010fc8:	d105      	bne.n	8010fd6 <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	68db      	ldr	r3, [r3, #12]
 8010fce:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f000 fa8e 	bl	80114f8 <USB_CoreReset>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8010fe0:	7fbb      	ldrb	r3, [r7, #30]
 8010fe2:	2b01      	cmp	r3, #1
 8010fe4:	d10b      	bne.n	8010ffe <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	689b      	ldr	r3, [r3, #8]
 8010fea:	f043 0208 	orr.w	r2, r3, #8
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	689b      	ldr	r3, [r3, #8]
 8010ff6:	f043 0220 	orr.w	r2, r3, #32
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8010ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8011000:	4618      	mov	r0, r3
 8011002:	3710      	adds	r7, #16
 8011004:	46bd      	mov	sp, r7
 8011006:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801100a:	b004      	add	sp, #16
 801100c:	4770      	bx	lr

0801100e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801100e:	b480      	push	{r7}
 8011010:	b083      	sub	sp, #12
 8011012:	af00      	add	r7, sp, #0
 8011014:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	689b      	ldr	r3, [r3, #8]
 801101a:	f023 0201 	bic.w	r2, r3, #1
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011022:	2300      	movs	r3, #0
}
 8011024:	4618      	mov	r0, r3
 8011026:	370c      	adds	r7, #12
 8011028:	46bd      	mov	sp, r7
 801102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102e:	4770      	bx	lr

08011030 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b084      	sub	sp, #16
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
 8011038:	460b      	mov	r3, r1
 801103a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801103c:	2300      	movs	r3, #0
 801103e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	68db      	ldr	r3, [r3, #12]
 8011044:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801104c:	78fb      	ldrb	r3, [r7, #3]
 801104e:	2b01      	cmp	r3, #1
 8011050:	d115      	bne.n	801107e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	68db      	ldr	r3, [r3, #12]
 8011056:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801105e:	200a      	movs	r0, #10
 8011060:	f7f1 fe16 	bl	8002c90 <HAL_Delay>
      ms += 10U;
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	330a      	adds	r3, #10
 8011068:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f000 fa36 	bl	80114dc <USB_GetMode>
 8011070:	4603      	mov	r3, r0
 8011072:	2b01      	cmp	r3, #1
 8011074:	d01e      	beq.n	80110b4 <USB_SetCurrentMode+0x84>
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	2bc7      	cmp	r3, #199	@ 0xc7
 801107a:	d9f0      	bls.n	801105e <USB_SetCurrentMode+0x2e>
 801107c:	e01a      	b.n	80110b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801107e:	78fb      	ldrb	r3, [r7, #3]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d115      	bne.n	80110b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	68db      	ldr	r3, [r3, #12]
 8011088:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011090:	200a      	movs	r0, #10
 8011092:	f7f1 fdfd 	bl	8002c90 <HAL_Delay>
      ms += 10U;
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	330a      	adds	r3, #10
 801109a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f000 fa1d 	bl	80114dc <USB_GetMode>
 80110a2:	4603      	mov	r3, r0
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d005      	beq.n	80110b4 <USB_SetCurrentMode+0x84>
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80110ac:	d9f0      	bls.n	8011090 <USB_SetCurrentMode+0x60>
 80110ae:	e001      	b.n	80110b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80110b0:	2301      	movs	r3, #1
 80110b2:	e005      	b.n	80110c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	2bc8      	cmp	r3, #200	@ 0xc8
 80110b8:	d101      	bne.n	80110be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80110ba:	2301      	movs	r3, #1
 80110bc:	e000      	b.n	80110c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80110be:	2300      	movs	r3, #0
}
 80110c0:	4618      	mov	r0, r3
 80110c2:	3710      	adds	r7, #16
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}

080110c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80110c8:	b084      	sub	sp, #16
 80110ca:	b580      	push	{r7, lr}
 80110cc:	b086      	sub	sp, #24
 80110ce:	af00      	add	r7, sp, #0
 80110d0:	6078      	str	r0, [r7, #4]
 80110d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80110d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80110da:	2300      	movs	r3, #0
 80110dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80110e2:	2300      	movs	r3, #0
 80110e4:	613b      	str	r3, [r7, #16]
 80110e6:	e009      	b.n	80110fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80110e8:	687a      	ldr	r2, [r7, #4]
 80110ea:	693b      	ldr	r3, [r7, #16]
 80110ec:	3340      	adds	r3, #64	@ 0x40
 80110ee:	009b      	lsls	r3, r3, #2
 80110f0:	4413      	add	r3, r2
 80110f2:	2200      	movs	r2, #0
 80110f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80110f6:	693b      	ldr	r3, [r7, #16]
 80110f8:	3301      	adds	r3, #1
 80110fa:	613b      	str	r3, [r7, #16]
 80110fc:	693b      	ldr	r3, [r7, #16]
 80110fe:	2b0e      	cmp	r3, #14
 8011100:	d9f2      	bls.n	80110e8 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011106:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801110e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011112:	2b00      	cmp	r3, #0
 8011114:	d11c      	bne.n	8011150 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801111c:	685b      	ldr	r3, [r3, #4]
 801111e:	68fa      	ldr	r2, [r7, #12]
 8011120:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011124:	f043 0302 	orr.w	r3, r3, #2
 8011128:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801112e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801113a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011146:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	639a      	str	r2, [r3, #56]	@ 0x38
 801114e:	e011      	b.n	8011174 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011154:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011160:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801116c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801117a:	461a      	mov	r2, r3
 801117c:	2300      	movs	r3, #0
 801117e:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8011180:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8011184:	2b03      	cmp	r3, #3
 8011186:	d10d      	bne.n	80111a4 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011188:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801118c:	2b00      	cmp	r3, #0
 801118e:	d104      	bne.n	801119a <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011190:	2100      	movs	r1, #0
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f000 f968 	bl	8011468 <USB_SetDevSpeed>
 8011198:	e008      	b.n	80111ac <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801119a:	2101      	movs	r1, #1
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f000 f963 	bl	8011468 <USB_SetDevSpeed>
 80111a2:	e003      	b.n	80111ac <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80111a4:	2103      	movs	r1, #3
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	f000 f95e 	bl	8011468 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80111ac:	2110      	movs	r1, #16
 80111ae:	6878      	ldr	r0, [r7, #4]
 80111b0:	f000 f8fa 	bl	80113a8 <USB_FlushTxFifo>
 80111b4:	4603      	mov	r3, r0
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d001      	beq.n	80111be <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 80111ba:	2301      	movs	r3, #1
 80111bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f000 f924 	bl	801140c <USB_FlushRxFifo>
 80111c4:	4603      	mov	r3, r0
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d001      	beq.n	80111ce <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 80111ca:	2301      	movs	r3, #1
 80111cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80111d4:	461a      	mov	r2, r3
 80111d6:	2300      	movs	r3, #0
 80111d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80111e0:	461a      	mov	r2, r3
 80111e2:	2300      	movs	r3, #0
 80111e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80111ec:	461a      	mov	r2, r3
 80111ee:	2300      	movs	r3, #0
 80111f0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80111f2:	2300      	movs	r3, #0
 80111f4:	613b      	str	r3, [r7, #16]
 80111f6:	e043      	b.n	8011280 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80111f8:	693b      	ldr	r3, [r7, #16]
 80111fa:	015a      	lsls	r2, r3, #5
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	4413      	add	r3, r2
 8011200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801120a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801120e:	d118      	bne.n	8011242 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d10a      	bne.n	801122c <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011216:	693b      	ldr	r3, [r7, #16]
 8011218:	015a      	lsls	r2, r3, #5
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	4413      	add	r3, r2
 801121e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011222:	461a      	mov	r2, r3
 8011224:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011228:	6013      	str	r3, [r2, #0]
 801122a:	e013      	b.n	8011254 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	015a      	lsls	r2, r3, #5
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	4413      	add	r3, r2
 8011234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011238:	461a      	mov	r2, r3
 801123a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801123e:	6013      	str	r3, [r2, #0]
 8011240:	e008      	b.n	8011254 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011242:	693b      	ldr	r3, [r7, #16]
 8011244:	015a      	lsls	r2, r3, #5
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	4413      	add	r3, r2
 801124a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801124e:	461a      	mov	r2, r3
 8011250:	2300      	movs	r3, #0
 8011252:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011254:	693b      	ldr	r3, [r7, #16]
 8011256:	015a      	lsls	r2, r3, #5
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	4413      	add	r3, r2
 801125c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011260:	461a      	mov	r2, r3
 8011262:	2300      	movs	r3, #0
 8011264:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011266:	693b      	ldr	r3, [r7, #16]
 8011268:	015a      	lsls	r2, r3, #5
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	4413      	add	r3, r2
 801126e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011272:	461a      	mov	r2, r3
 8011274:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011278:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801127a:	693b      	ldr	r3, [r7, #16]
 801127c:	3301      	adds	r3, #1
 801127e:	613b      	str	r3, [r7, #16]
 8011280:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011284:	461a      	mov	r2, r3
 8011286:	693b      	ldr	r3, [r7, #16]
 8011288:	4293      	cmp	r3, r2
 801128a:	d3b5      	bcc.n	80111f8 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801128c:	2300      	movs	r3, #0
 801128e:	613b      	str	r3, [r7, #16]
 8011290:	e043      	b.n	801131a <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011292:	693b      	ldr	r3, [r7, #16]
 8011294:	015a      	lsls	r2, r3, #5
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	4413      	add	r3, r2
 801129a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80112a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80112a8:	d118      	bne.n	80112dc <USB_DevInit+0x214>
    {
      if (i == 0U)
 80112aa:	693b      	ldr	r3, [r7, #16]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d10a      	bne.n	80112c6 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80112b0:	693b      	ldr	r3, [r7, #16]
 80112b2:	015a      	lsls	r2, r3, #5
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	4413      	add	r3, r2
 80112b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112bc:	461a      	mov	r2, r3
 80112be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80112c2:	6013      	str	r3, [r2, #0]
 80112c4:	e013      	b.n	80112ee <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80112c6:	693b      	ldr	r3, [r7, #16]
 80112c8:	015a      	lsls	r2, r3, #5
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	4413      	add	r3, r2
 80112ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112d2:	461a      	mov	r2, r3
 80112d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80112d8:	6013      	str	r3, [r2, #0]
 80112da:	e008      	b.n	80112ee <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80112dc:	693b      	ldr	r3, [r7, #16]
 80112de:	015a      	lsls	r2, r3, #5
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	4413      	add	r3, r2
 80112e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112e8:	461a      	mov	r2, r3
 80112ea:	2300      	movs	r3, #0
 80112ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80112ee:	693b      	ldr	r3, [r7, #16]
 80112f0:	015a      	lsls	r2, r3, #5
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	4413      	add	r3, r2
 80112f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112fa:	461a      	mov	r2, r3
 80112fc:	2300      	movs	r3, #0
 80112fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011300:	693b      	ldr	r3, [r7, #16]
 8011302:	015a      	lsls	r2, r3, #5
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	4413      	add	r3, r2
 8011308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801130c:	461a      	mov	r2, r3
 801130e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011312:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	3301      	adds	r3, #1
 8011318:	613b      	str	r3, [r7, #16]
 801131a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801131e:	461a      	mov	r2, r3
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	4293      	cmp	r3, r2
 8011324:	d3b5      	bcc.n	8011292 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801132c:	691b      	ldr	r3, [r3, #16]
 801132e:	68fa      	ldr	r2, [r7, #12]
 8011330:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011338:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	2200      	movs	r2, #0
 801133e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8011346:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011348:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801134c:	2b00      	cmp	r3, #0
 801134e:	d105      	bne.n	801135c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	699b      	ldr	r3, [r3, #24]
 8011354:	f043 0210 	orr.w	r2, r3, #16
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	699a      	ldr	r2, [r3, #24]
 8011360:	4b10      	ldr	r3, [pc, #64]	@ (80113a4 <USB_DevInit+0x2dc>)
 8011362:	4313      	orrs	r3, r2
 8011364:	687a      	ldr	r2, [r7, #4]
 8011366:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011368:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801136c:	2b00      	cmp	r3, #0
 801136e:	d005      	beq.n	801137c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	699b      	ldr	r3, [r3, #24]
 8011374:	f043 0208 	orr.w	r2, r3, #8
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801137c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011380:	2b01      	cmp	r3, #1
 8011382:	d107      	bne.n	8011394 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	699b      	ldr	r3, [r3, #24]
 8011388:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801138c:	f043 0304 	orr.w	r3, r3, #4
 8011390:	687a      	ldr	r2, [r7, #4]
 8011392:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011394:	7dfb      	ldrb	r3, [r7, #23]
}
 8011396:	4618      	mov	r0, r3
 8011398:	3718      	adds	r7, #24
 801139a:	46bd      	mov	sp, r7
 801139c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80113a0:	b004      	add	sp, #16
 80113a2:	4770      	bx	lr
 80113a4:	803c3800 	.word	0x803c3800

080113a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80113a8:	b480      	push	{r7}
 80113aa:	b085      	sub	sp, #20
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
 80113b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80113b2:	2300      	movs	r3, #0
 80113b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	3301      	adds	r3, #1
 80113ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80113c2:	d901      	bls.n	80113c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80113c4:	2303      	movs	r3, #3
 80113c6:	e01b      	b.n	8011400 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	691b      	ldr	r3, [r3, #16]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	daf2      	bge.n	80113b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80113d0:	2300      	movs	r3, #0
 80113d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	019b      	lsls	r3, r3, #6
 80113d8:	f043 0220 	orr.w	r2, r3, #32
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	3301      	adds	r3, #1
 80113e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80113ec:	d901      	bls.n	80113f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80113ee:	2303      	movs	r3, #3
 80113f0:	e006      	b.n	8011400 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	691b      	ldr	r3, [r3, #16]
 80113f6:	f003 0320 	and.w	r3, r3, #32
 80113fa:	2b20      	cmp	r3, #32
 80113fc:	d0f0      	beq.n	80113e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80113fe:	2300      	movs	r3, #0
}
 8011400:	4618      	mov	r0, r3
 8011402:	3714      	adds	r7, #20
 8011404:	46bd      	mov	sp, r7
 8011406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140a:	4770      	bx	lr

0801140c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801140c:	b480      	push	{r7}
 801140e:	b085      	sub	sp, #20
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011414:	2300      	movs	r3, #0
 8011416:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	3301      	adds	r3, #1
 801141c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011424:	d901      	bls.n	801142a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011426:	2303      	movs	r3, #3
 8011428:	e018      	b.n	801145c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	691b      	ldr	r3, [r3, #16]
 801142e:	2b00      	cmp	r3, #0
 8011430:	daf2      	bge.n	8011418 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011432:	2300      	movs	r3, #0
 8011434:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	2210      	movs	r2, #16
 801143a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	3301      	adds	r3, #1
 8011440:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011448:	d901      	bls.n	801144e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801144a:	2303      	movs	r3, #3
 801144c:	e006      	b.n	801145c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	691b      	ldr	r3, [r3, #16]
 8011452:	f003 0310 	and.w	r3, r3, #16
 8011456:	2b10      	cmp	r3, #16
 8011458:	d0f0      	beq.n	801143c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801145a:	2300      	movs	r3, #0
}
 801145c:	4618      	mov	r0, r3
 801145e:	3714      	adds	r7, #20
 8011460:	46bd      	mov	sp, r7
 8011462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011466:	4770      	bx	lr

08011468 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011468:	b480      	push	{r7}
 801146a:	b085      	sub	sp, #20
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	460b      	mov	r3, r1
 8011472:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801147e:	681a      	ldr	r2, [r3, #0]
 8011480:	78fb      	ldrb	r3, [r7, #3]
 8011482:	68f9      	ldr	r1, [r7, #12]
 8011484:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011488:	4313      	orrs	r3, r2
 801148a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801148c:	2300      	movs	r3, #0
}
 801148e:	4618      	mov	r0, r3
 8011490:	3714      	adds	r7, #20
 8011492:	46bd      	mov	sp, r7
 8011494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011498:	4770      	bx	lr

0801149a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801149a:	b480      	push	{r7}
 801149c:	b085      	sub	sp, #20
 801149e:	af00      	add	r7, sp, #0
 80114a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	68fa      	ldr	r2, [r7, #12]
 80114b0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80114b4:	f023 0303 	bic.w	r3, r3, #3
 80114b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80114c0:	685b      	ldr	r3, [r3, #4]
 80114c2:	68fa      	ldr	r2, [r7, #12]
 80114c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80114c8:	f043 0302 	orr.w	r3, r3, #2
 80114cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80114ce:	2300      	movs	r3, #0
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	3714      	adds	r7, #20
 80114d4:	46bd      	mov	sp, r7
 80114d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114da:	4770      	bx	lr

080114dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80114dc:	b480      	push	{r7}
 80114de:	b083      	sub	sp, #12
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	695b      	ldr	r3, [r3, #20]
 80114e8:	f003 0301 	and.w	r3, r3, #1
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	370c      	adds	r7, #12
 80114f0:	46bd      	mov	sp, r7
 80114f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f6:	4770      	bx	lr

080114f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80114f8:	b480      	push	{r7}
 80114fa:	b085      	sub	sp, #20
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011500:	2300      	movs	r3, #0
 8011502:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	3301      	adds	r3, #1
 8011508:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011510:	d901      	bls.n	8011516 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011512:	2303      	movs	r3, #3
 8011514:	e01b      	b.n	801154e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	691b      	ldr	r3, [r3, #16]
 801151a:	2b00      	cmp	r3, #0
 801151c:	daf2      	bge.n	8011504 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801151e:	2300      	movs	r3, #0
 8011520:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	691b      	ldr	r3, [r3, #16]
 8011526:	f043 0201 	orr.w	r2, r3, #1
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	3301      	adds	r3, #1
 8011532:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801153a:	d901      	bls.n	8011540 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801153c:	2303      	movs	r3, #3
 801153e:	e006      	b.n	801154e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	691b      	ldr	r3, [r3, #16]
 8011544:	f003 0301 	and.w	r3, r3, #1
 8011548:	2b01      	cmp	r3, #1
 801154a:	d0f0      	beq.n	801152e <USB_CoreReset+0x36>

  return HAL_OK;
 801154c:	2300      	movs	r3, #0
}
 801154e:	4618      	mov	r0, r3
 8011550:	3714      	adds	r7, #20
 8011552:	46bd      	mov	sp, r7
 8011554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011558:	4770      	bx	lr

0801155a <memset>:
 801155a:	4402      	add	r2, r0
 801155c:	4603      	mov	r3, r0
 801155e:	4293      	cmp	r3, r2
 8011560:	d100      	bne.n	8011564 <memset+0xa>
 8011562:	4770      	bx	lr
 8011564:	f803 1b01 	strb.w	r1, [r3], #1
 8011568:	e7f9      	b.n	801155e <memset+0x4>
	...

0801156c <__libc_init_array>:
 801156c:	b570      	push	{r4, r5, r6, lr}
 801156e:	4d0d      	ldr	r5, [pc, #52]	@ (80115a4 <__libc_init_array+0x38>)
 8011570:	2600      	movs	r6, #0
 8011572:	4c0d      	ldr	r4, [pc, #52]	@ (80115a8 <__libc_init_array+0x3c>)
 8011574:	1b64      	subs	r4, r4, r5
 8011576:	10a4      	asrs	r4, r4, #2
 8011578:	42a6      	cmp	r6, r4
 801157a:	d109      	bne.n	8011590 <__libc_init_array+0x24>
 801157c:	4d0b      	ldr	r5, [pc, #44]	@ (80115ac <__libc_init_array+0x40>)
 801157e:	2600      	movs	r6, #0
 8011580:	4c0b      	ldr	r4, [pc, #44]	@ (80115b0 <__libc_init_array+0x44>)
 8011582:	f000 f817 	bl	80115b4 <_init>
 8011586:	1b64      	subs	r4, r4, r5
 8011588:	10a4      	asrs	r4, r4, #2
 801158a:	42a6      	cmp	r6, r4
 801158c:	d105      	bne.n	801159a <__libc_init_array+0x2e>
 801158e:	bd70      	pop	{r4, r5, r6, pc}
 8011590:	f855 3b04 	ldr.w	r3, [r5], #4
 8011594:	3601      	adds	r6, #1
 8011596:	4798      	blx	r3
 8011598:	e7ee      	b.n	8011578 <__libc_init_array+0xc>
 801159a:	f855 3b04 	ldr.w	r3, [r5], #4
 801159e:	3601      	adds	r6, #1
 80115a0:	4798      	blx	r3
 80115a2:	e7f2      	b.n	801158a <__libc_init_array+0x1e>
 80115a4:	080116d4 	.word	0x080116d4
 80115a8:	080116d4 	.word	0x080116d4
 80115ac:	080116d4 	.word	0x080116d4
 80115b0:	080116d8 	.word	0x080116d8

080115b4 <_init>:
 80115b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115b6:	bf00      	nop
 80115b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115ba:	bc08      	pop	{r3}
 80115bc:	469e      	mov	lr, r3
 80115be:	4770      	bx	lr

080115c0 <_fini>:
 80115c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115c2:	bf00      	nop
 80115c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115c6:	bc08      	pop	{r3}
 80115c8:	469e      	mov	lr, r3
 80115ca:	4770      	bx	lr
