
Prototype V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010970  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08010be4  08010be4  00011be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ce4  08010ce4  0001200c  2**0
                  CONTENTS
  4 .ARM          00000008  08010ce4  08010ce4  00011ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010cec  08010cec  0001200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010cec  08010cec  00011cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010cf0  08010cf0  00011cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08010cf4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e54  2000000c  08010d00  0001200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20000e60  08010d00  00012e60  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000318f3  00000000  00000000  00012042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cca  00000000  00000000  00043935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a70  00000000  00000000  00048600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000214a  00000000  00000000  0004b070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004730e  00000000  00000000  0004d1ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035986  00000000  00000000  000944c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bc939  00000000  00000000  000c9e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00286787  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc78  00000000  00000000  002867cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00292444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000000c 	.word	0x2000000c
 8000290:	00000000 	.word	0x00000000
 8000294:	08010bcc 	.word	0x08010bcc

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000010 	.word	0x20000010
 80002b0:	08010bcc 	.word	0x08010bcc

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f002 f951 	bl	8002878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f8d7 	bl	8000788 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005da:	f000 f941 	bl	8000860 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005de:	f000 f976 	bl	80008ce <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 fe93 	bl	800130c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005e6:	f000 fb71 	bl	8000ccc <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 80005ea:	f000 fb31 	bl	8000c50 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 80005ee:	f000 fba5 	bl	8000d3c <MX_HSPI1_Init>
  MX_I2C2_Init();
 80005f2:	f000 fc21 	bl	8000e38 <MX_I2C2_Init>
  MX_ICACHE_Init();
 80005f6:	f000 fc5f 	bl	8000eb8 <MX_ICACHE_Init>
  MX_LTDC_Init();
 80005fa:	f000 fc71 	bl	8000ee0 <MX_LTDC_Init>
  MX_RTC_Init();
 80005fe:	f000 fcef 	bl	8000fe0 <MX_RTC_Init>
  MX_TIM3_Init();
 8000602:	f000 fda7 	bl	8001154 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000606:	f000 f971 	bl	80008ec <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800060a:	f000 fe05 	bl	8001218 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 800060e:	f000 fd35 	bl	800107c <MX_SAI2_Init>
  MX_ADC4_Init();
 8000612:	f000 faa3 	bl	8000b5c <MX_ADC4_Init>
  MX_I2C1_Init();
 8000616:	f000 fbcf 	bl	8000db8 <MX_I2C1_Init>
  MX_USB_OTG_HS_PCD_Init();
 800061a:	f000 fe49 	bl	80012b0 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcGroup1, DIM(adcGroup1)); //Begins DMA transfer for first ADC
 800061e:	220d      	movs	r2, #13
 8000620:	4952      	ldr	r1, [pc, #328]	@ (800076c <main+0x1a0>)
 8000622:	4853      	ldr	r0, [pc, #332]	@ (8000770 <main+0x1a4>)
 8000624:	f003 f874 	bl	8003710 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc4, (uint16_t*)adcGroup4, DIM(adcGroup4)); //begins DMA transfer for fourth ADC
 8000628:	2202      	movs	r2, #2
 800062a:	4952      	ldr	r1, [pc, #328]	@ (8000774 <main+0x1a8>)
 800062c:	4852      	ldr	r0, [pc, #328]	@ (8000778 <main+0x1ac>)
 800062e:	f003 f86f 	bl	8003710 <HAL_ADC_Start_DMA>
  }

  HAL_Delay(10);
  */
  //HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pcmData, DIM(pcmData)); //Begins DMA transfer for PCM6260
  HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)dacData, DIM(dacData));
 8000632:	2202      	movs	r2, #2
 8000634:	4951      	ldr	r1, [pc, #324]	@ (800077c <main+0x1b0>)
 8000636:	4852      	ldr	r0, [pc, #328]	@ (8000780 <main+0x1b4>)
 8000638:	f00d fb5c 	bl	800dcf4 <HAL_SAI_Transmit_DMA>

  //Populates each channel in the channels struct with initializer values
  for(int i = 0; i < sizeof(channels); i++)
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	e083      	b.n	800074a <main+0x17e>
  {
	  for(int s = 0; s < sizeof(channels[i].channelData); s++)
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	e00d      	b.n	8000664 <main+0x98>
	  {
		  channels[i].channelData[s] = 0;
 8000648:	494e      	ldr	r1, [pc, #312]	@ (8000784 <main+0x1b8>)
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	4613      	mov	r3, r2
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	4413      	add	r3, r2
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	68ba      	ldr	r2, [r7, #8]
 8000656:	4413      	add	r3, r2
 8000658:	2200      	movs	r2, #0
 800065a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int s = 0; s < sizeof(channels[i].channelData); s++)
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	3301      	adds	r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	2b03      	cmp	r3, #3
 8000668:	d9ee      	bls.n	8000648 <main+0x7c>
	  }
	  channels[i].channelNum = i;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	b2d8      	uxtb	r0, r3
 800066e:	4945      	ldr	r1, [pc, #276]	@ (8000784 <main+0x1b8>)
 8000670:	68fa      	ldr	r2, [r7, #12]
 8000672:	4613      	mov	r3, r2
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	4413      	add	r3, r2
 8000678:	011b      	lsls	r3, r3, #4
 800067a:	440b      	add	r3, r1
 800067c:	3304      	adds	r3, #4
 800067e:	4602      	mov	r2, r0
 8000680:	701a      	strb	r2, [r3, #0]
	  channels[i].volume = 0.0;
 8000682:	4940      	ldr	r1, [pc, #256]	@ (8000784 <main+0x1b8>)
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	4613      	mov	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	011b      	lsls	r3, r3, #4
 800068e:	440b      	add	r3, r1
 8000690:	3308      	adds	r3, #8
 8000692:	f04f 0200 	mov.w	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
	  channels[i].LRPan = 0.0;
 8000698:	493a      	ldr	r1, [pc, #232]	@ (8000784 <main+0x1b8>)
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	4613      	mov	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4413      	add	r3, r2
 80006a2:	011b      	lsls	r3, r3, #4
 80006a4:	440b      	add	r3, r1
 80006a6:	330c      	adds	r3, #12
 80006a8:	f04f 0200 	mov.w	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
	  channels[i].reverbEnable = false;
 80006ae:	4935      	ldr	r1, [pc, #212]	@ (8000784 <main+0x1b8>)
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	011b      	lsls	r3, r3, #4
 80006ba:	440b      	add	r3, r1
 80006bc:	3310      	adds	r3, #16
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
	  channels[i].EQEnable = false;
 80006c2:	4930      	ldr	r1, [pc, #192]	@ (8000784 <main+0x1b8>)
 80006c4:	68fa      	ldr	r2, [r7, #12]
 80006c6:	4613      	mov	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	4413      	add	r3, r2
 80006cc:	011b      	lsls	r3, r3, #4
 80006ce:	440b      	add	r3, r1
 80006d0:	3311      	adds	r3, #17
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
	  channels[i].distortionEnable = false;
 80006d6:	492b      	ldr	r1, [pc, #172]	@ (8000784 <main+0x1b8>)
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	4613      	mov	r3, r2
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	4413      	add	r3, r2
 80006e0:	011b      	lsls	r3, r3, #4
 80006e2:	440b      	add	r3, r1
 80006e4:	3312      	adds	r3, #18
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
	  channels[i].reverbStrength = 0.0;
 80006ea:	4926      	ldr	r1, [pc, #152]	@ (8000784 <main+0x1b8>)
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	4613      	mov	r3, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	440b      	add	r3, r1
 80006f8:	3314      	adds	r3, #20
 80006fa:	f04f 0200 	mov.w	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
	  for(int r = 0; r < sizeof(channels[i].eqLevels);r++)
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	e010      	b.n	8000728 <main+0x15c>
	  {
		  channels[i].eqLevels[r] = 0.0;
 8000706:	491f      	ldr	r1, [pc, #124]	@ (8000784 <main+0x1b8>)
 8000708:	68fa      	ldr	r2, [r7, #12]
 800070a:	4613      	mov	r3, r2
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4413      	add	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	3306      	adds	r3, #6
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	440b      	add	r3, r1
 800071c:	f04f 0200 	mov.w	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
	  for(int r = 0; r < sizeof(channels[i].eqLevels);r++)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3301      	adds	r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b13      	cmp	r3, #19
 800072c:	d9eb      	bls.n	8000706 <main+0x13a>
	  }
	  channels[i].distortionStrength = 0.0;
 800072e:	4915      	ldr	r1, [pc, #84]	@ (8000784 <main+0x1b8>)
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	4613      	mov	r3, r2
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	4413      	add	r3, r2
 8000738:	011b      	lsls	r3, r3, #4
 800073a:	440b      	add	r3, r1
 800073c:	332c      	adds	r3, #44	@ 0x2c
 800073e:	f04f 0200 	mov.w	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < sizeof(channels); i++)
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3301      	adds	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 8000750:	f4ff af77 	bcc.w	8000642 <main+0x76>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dacData[1] = adcGroup1[0]<<8;
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <main+0x1a0>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	021b      	lsls	r3, r3, #8
 800075a:	4a08      	ldr	r2, [pc, #32]	@ (800077c <main+0x1b0>)
 800075c:	6053      	str	r3, [r2, #4]
	  dacData[0] = adcGroup1[0]<<8;
 800075e:	4b03      	ldr	r3, [pc, #12]	@ (800076c <main+0x1a0>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	021b      	lsls	r3, r3, #8
 8000764:	4a05      	ldr	r2, [pc, #20]	@ (800077c <main+0x1b0>)
 8000766:	6013      	str	r3, [r2, #0]
	  dacData[1] = adcGroup1[0]<<8;
 8000768:	bf00      	nop
 800076a:	e7f3      	b.n	8000754 <main+0x188>
 800076c:	20000d10 	.word	0x20000d10
 8000770:	20000028 	.word	0x20000028
 8000774:	20000d2c 	.word	0x20000d2c
 8000778:	200000b4 	.word	0x200000b4
 800077c:	20000d30 	.word	0x20000d30
 8000780:	200004b4 	.word	0x200004b4
 8000784:	20000d38 	.word	0x20000d38

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b09e      	sub	sp, #120	@ 0x78
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0318 	add.w	r3, r7, #24
 8000792:	2260      	movs	r2, #96	@ 0x60
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f010 f9eb 	bl	8010b72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	463b      	mov	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
 80007aa:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ac:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80007b0:	f008 fb5c 	bl	8008e6c <HAL_PWREx_ControlVoltageScaling>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x36>
  {
    Error_Handler();
 80007ba:	f000 fedd 	bl	8001578 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007be:	f008 fb45 	bl	8008e4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007c2:	4b26      	ldr	r3, [pc, #152]	@ (800085c <SystemClock_Config+0xd4>)
 80007c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80007c8:	4a24      	ldr	r2, [pc, #144]	@ (800085c <SystemClock_Config+0xd4>)
 80007ca:	f023 0318 	bic.w	r3, r3, #24
 80007ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80007d2:	2307      	movs	r3, #7
 80007d4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007dc:	2381      	movs	r3, #129	@ 0x81
 80007de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e6:	2310      	movs	r3, #16
 80007e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ea:	2302      	movs	r3, #2
 80007ec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ee:	2303      	movs	r3, #3
 80007f0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007fa:	2308      	movs	r3, #8
 80007fc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 80007fe:	2308      	movs	r3, #8
 8000800:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000802:	2302      	movs	r3, #2
 8000804:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800080a:	230c      	movs	r3, #12
 800080c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000812:	f107 0318 	add.w	r3, r7, #24
 8000816:	4618      	mov	r0, r3
 8000818:	f008 fc52 	bl	80090c0 <HAL_RCC_OscConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000822:	f000 fea9 	bl	8001578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000826:	231f      	movs	r3, #31
 8000828:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082a:	2303      	movs	r3, #3
 800082c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800083e:	463b      	mov	r3, r7
 8000840:	2103      	movs	r1, #3
 8000842:	4618      	mov	r0, r3
 8000844:	f009 fb18 	bl	8009e78 <HAL_RCC_ClockConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800084e:	f000 fe93 	bl	8001578 <Error_Handler>
  }
}
 8000852:	bf00      	nop
 8000854:	3778      	adds	r7, #120	@ 0x78
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	46020c00 	.word	0x46020c00

08000860 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b0b8      	sub	sp, #224	@ 0xe0
 8000864:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000866:	463b      	mov	r3, r7
 8000868:	22e0      	movs	r2, #224	@ 0xe0
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f010 f980 	bl	8010b72 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 8000872:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000876:	f04f 0301 	mov.w	r3, #1
 800087a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 800087e:	2300      	movs	r3, #0
 8000880:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 8000884:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000888:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 800088c:	2303      	movs	r3, #3
 800088e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 8000890:	2301      	movs	r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 8000894:	230c      	movs	r3, #12
 8000896:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 8000898:	2302      	movs	r3, #2
 800089a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 800089c:	2303      	movs	r3, #3
 800089e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 80008a0:	2304      	movs	r3, #4
 80008a2:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 80008a4:	230c      	movs	r3, #12
 80008a6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 80008a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 80008ae:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80008b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	4618      	mov	r0, r3
 80008b8:	f009 feae 	bl	800a618 <HAL_RCCEx_PeriphCLKConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 80008c2:	f000 fe59 	bl	8001578 <Error_Handler>
  }
}
 80008c6:	bf00      	nop
 80008c8:	37e0      	adds	r7, #224	@ 0xe0
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80008d2:	f008 fbb7 	bl	8009044 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80008d6:	2002      	movs	r0, #2
 80008d8:	f008 fb54 	bl	8008f84 <HAL_PWREx_ConfigSupply>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80008e2:	f000 fe49 	bl	8001578 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008f2:	463b      	mov	r3, r7
 80008f4:	2220      	movs	r2, #32
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f010 f93a 	bl	8010b72 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008fe:	4b88      	ldr	r3, [pc, #544]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000900:	4a88      	ldr	r2, [pc, #544]	@ (8000b24 <MX_ADC1_Init+0x238>)
 8000902:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000904:	4b86      	ldr	r3, [pc, #536]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000906:	2200      	movs	r2, #0
 8000908:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800090a:	4b85      	ldr	r3, [pc, #532]	@ (8000b20 <MX_ADC1_Init+0x234>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000910:	4b83      	ldr	r3, [pc, #524]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000916:	4b82      	ldr	r3, [pc, #520]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800091c:	4b80      	ldr	r3, [pc, #512]	@ (8000b20 <MX_ADC1_Init+0x234>)
 800091e:	2201      	movs	r2, #1
 8000920:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000922:	4b7f      	ldr	r3, [pc, #508]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000924:	2204      	movs	r2, #4
 8000926:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000928:	4b7d      	ldr	r3, [pc, #500]	@ (8000b20 <MX_ADC1_Init+0x234>)
 800092a:	2201      	movs	r2, #1
 800092c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800092e:	4b7c      	ldr	r3, [pc, #496]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000930:	2201      	movs	r2, #1
 8000932:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 8000936:	4b7a      	ldr	r3, [pc, #488]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000938:	220d      	movs	r2, #13
 800093a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800093c:	4b78      	ldr	r3, [pc, #480]	@ (8000b20 <MX_ADC1_Init+0x234>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000944:	4b76      	ldr	r3, [pc, #472]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000946:	2200      	movs	r2, #0
 8000948:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800094a:	4b75      	ldr	r3, [pc, #468]	@ (8000b20 <MX_ADC1_Init+0x234>)
 800094c:	2200      	movs	r2, #0
 800094e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000950:	4b73      	ldr	r3, [pc, #460]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000952:	2201      	movs	r2, #1
 8000954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000958:	4b71      	ldr	r3, [pc, #452]	@ (8000b20 <MX_ADC1_Init+0x234>)
 800095a:	2200      	movs	r2, #0
 800095c:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800095e:	4b70      	ldr	r3, [pc, #448]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000960:	2200      	movs	r2, #0
 8000962:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000964:	4b6e      	ldr	r3, [pc, #440]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000966:	2200      	movs	r2, #0
 8000968:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800096a:	4b6d      	ldr	r3, [pc, #436]	@ (8000b20 <MX_ADC1_Init+0x234>)
 800096c:	2203      	movs	r2, #3
 800096e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000970:	4b6b      	ldr	r3, [pc, #428]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000972:	2200      	movs	r2, #0
 8000974:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000978:	4869      	ldr	r0, [pc, #420]	@ (8000b20 <MX_ADC1_Init+0x234>)
 800097a:	f002 fbe1 	bl	8003140 <HAL_ADC_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000984:	f000 fdf8 	bl	8001578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000988:	4b67      	ldr	r3, [pc, #412]	@ (8000b28 <MX_ADC1_Init+0x23c>)
 800098a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800098c:	2306      	movs	r3, #6
 800098e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000994:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000998:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800099a:	2304      	movs	r3, #4
 800099c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	4619      	mov	r1, r3
 80009a6:	485e      	ldr	r0, [pc, #376]	@ (8000b20 <MX_ADC1_Init+0x234>)
 80009a8:	f003 faf8 	bl	8003f9c <HAL_ADC_ConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80009b2:	f000 fde1 	bl	8001578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009b6:	4b5d      	ldr	r3, [pc, #372]	@ (8000b2c <MX_ADC1_Init+0x240>)
 80009b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009ba:	230c      	movs	r3, #12
 80009bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009be:	463b      	mov	r3, r7
 80009c0:	4619      	mov	r1, r3
 80009c2:	4857      	ldr	r0, [pc, #348]	@ (8000b20 <MX_ADC1_Init+0x234>)
 80009c4:	f003 faea 	bl	8003f9c <HAL_ADC_ConfigChannel>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80009ce:	f000 fdd3 	bl	8001578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009d2:	4b57      	ldr	r3, [pc, #348]	@ (8000b30 <MX_ADC1_Init+0x244>)
 80009d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009d6:	2312      	movs	r3, #18
 80009d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009da:	463b      	mov	r3, r7
 80009dc:	4619      	mov	r1, r3
 80009de:	4850      	ldr	r0, [pc, #320]	@ (8000b20 <MX_ADC1_Init+0x234>)
 80009e0:	f003 fadc 	bl	8003f9c <HAL_ADC_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 80009ea:	f000 fdc5 	bl	8001578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009ee:	4b51      	ldr	r3, [pc, #324]	@ (8000b34 <MX_ADC1_Init+0x248>)
 80009f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009f2:	2318      	movs	r3, #24
 80009f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	4619      	mov	r1, r3
 80009fa:	4849      	ldr	r0, [pc, #292]	@ (8000b20 <MX_ADC1_Init+0x234>)
 80009fc:	f003 face 	bl	8003f9c <HAL_ADC_ConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000a06:	f000 fdb7 	bl	8001578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a0a:	4b4b      	ldr	r3, [pc, #300]	@ (8000b38 <MX_ADC1_Init+0x24c>)
 8000a0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a14:	463b      	mov	r3, r7
 8000a16:	4619      	mov	r1, r3
 8000a18:	4841      	ldr	r0, [pc, #260]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000a1a:	f003 fabf 	bl	8003f9c <HAL_ADC_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8000a24:	f000 fda8 	bl	8001578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a28:	4b44      	ldr	r3, [pc, #272]	@ (8000b3c <MX_ADC1_Init+0x250>)
 8000a2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a2c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000a30:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a32:	463b      	mov	r3, r7
 8000a34:	4619      	mov	r1, r3
 8000a36:	483a      	ldr	r0, [pc, #232]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000a38:	f003 fab0 	bl	8003f9c <HAL_ADC_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 8000a42:	f000 fd99 	bl	8001578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a46:	4b3e      	ldr	r3, [pc, #248]	@ (8000b40 <MX_ADC1_Init+0x254>)
 8000a48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000a4a:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000a4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a50:	463b      	mov	r3, r7
 8000a52:	4619      	mov	r1, r3
 8000a54:	4832      	ldr	r0, [pc, #200]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000a56:	f003 faa1 	bl	8003f9c <HAL_ADC_ConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_ADC1_Init+0x178>
  {
    Error_Handler();
 8000a60:	f000 fd8a 	bl	8001578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a64:	4b37      	ldr	r3, [pc, #220]	@ (8000b44 <MX_ADC1_Init+0x258>)
 8000a66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a68:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000a6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6e:	463b      	mov	r3, r7
 8000a70:	4619      	mov	r1, r3
 8000a72:	482b      	ldr	r0, [pc, #172]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000a74:	f003 fa92 	bl	8003f9c <HAL_ADC_ConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 8000a7e:	f000 fd7b 	bl	8001578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a82:	4b31      	ldr	r3, [pc, #196]	@ (8000b48 <MX_ADC1_Init+0x25c>)
 8000a84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000a86:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000a8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4823      	ldr	r0, [pc, #140]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000a92:	f003 fa83 	bl	8003f9c <HAL_ADC_ConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC1_Init+0x1b4>
  {
    Error_Handler();
 8000a9c:	f000 fd6c 	bl	8001578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000aa0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b4c <MX_ADC1_Init+0x260>)
 8000aa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000aa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aa8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4619      	mov	r1, r3
 8000aae:	481c      	ldr	r0, [pc, #112]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000ab0:	f003 fa74 	bl	8003f9c <HAL_ADC_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_ADC1_Init+0x1d2>
  {
    Error_Handler();
 8000aba:	f000 fd5d 	bl	8001578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000abe:	4b24      	ldr	r3, [pc, #144]	@ (8000b50 <MX_ADC1_Init+0x264>)
 8000ac0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000ac2:	f240 2306 	movw	r3, #518	@ 0x206
 8000ac6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4619      	mov	r1, r3
 8000acc:	4814      	ldr	r0, [pc, #80]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000ace:	f003 fa65 	bl	8003f9c <HAL_ADC_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_ADC1_Init+0x1f0>
  {
    Error_Handler();
 8000ad8:	f000 fd4e 	bl	8001578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <MX_ADC1_Init+0x268>)
 8000ade:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000ae0:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000ae4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480d      	ldr	r0, [pc, #52]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000aec:	f003 fa56 	bl	8003f9c <HAL_ADC_ConfigChannel>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8000af6:	f000 fd3f 	bl	8001578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_ADC1_Init+0x26c>)
 8000afc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000afe:	f240 2312 	movw	r3, #530	@ 0x212
 8000b02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b04:	463b      	mov	r3, r7
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <MX_ADC1_Init+0x234>)
 8000b0a:	f003 fa47 	bl	8003f9c <HAL_ADC_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_ADC1_Init+0x22c>
  {
    Error_Handler();
 8000b14:	f000 fd30 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	3720      	adds	r7, #32
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000028 	.word	0x20000028
 8000b24:	42028000 	.word	0x42028000
 8000b28:	04000002 	.word	0x04000002
 8000b2c:	08000004 	.word	0x08000004
 8000b30:	0c000008 	.word	0x0c000008
 8000b34:	10000010 	.word	0x10000010
 8000b38:	14000020 	.word	0x14000020
 8000b3c:	1c000080 	.word	0x1c000080
 8000b40:	20000100 	.word	0x20000100
 8000b44:	2a000400 	.word	0x2a000400
 8000b48:	2e000800 	.word	0x2e000800
 8000b4c:	32001000 	.word	0x32001000
 8000b50:	3e008000 	.word	0x3e008000
 8000b54:	42010000 	.word	0x42010000
 8000b58:	ce080000 	.word	0xce080000

08000b5c <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b62:	463b      	mov	r3, r7
 8000b64:	2220      	movs	r2, #32
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f010 f802 	bl	8010b72 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000b6e:	4b34      	ldr	r3, [pc, #208]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000b70:	4a34      	ldr	r2, [pc, #208]	@ (8000c44 <MX_ADC4_Init+0xe8>)
 8000b72:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b74:	4b32      	ldr	r3, [pc, #200]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000b7a:	4b31      	ldr	r3, [pc, #196]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000b7c:	2204      	movs	r2, #4
 8000b7e:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b80:	4b2f      	ldr	r3, [pc, #188]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8000b86:	4b2e      	ldr	r3, [pc, #184]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000b88:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000b8c:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000b90:	2204      	movs	r2, #4
 8000b92:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8000b94:	4b2a      	ldr	r3, [pc, #168]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000b9a:	4b29      	ldr	r3, [pc, #164]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000ba0:	4b27      	ldr	r3, [pc, #156]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8000ba8:	4b25      	ldr	r3, [pc, #148]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000baa:	2202      	movs	r2, #2
 8000bac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bae:	4b24      	ldr	r3, [pc, #144]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bb4:	4b22      	ldr	r3, [pc, #136]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000bba:	4b21      	ldr	r3, [pc, #132]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000bc4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000bc8:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bca:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000be4:	4816      	ldr	r0, [pc, #88]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000be6:	f002 faab 	bl	8003140 <HAL_ADC_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8000bf0:	f000 fcc2 	bl	8001578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <MX_ADC4_Init+0xec>)
 8000bf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c00:	2304      	movs	r3, #4
 8000c02:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c08:	463b      	mov	r3, r7
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480c      	ldr	r0, [pc, #48]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000c0e:	f003 f9c5 	bl	8003f9c <HAL_ADC_ConfigChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_ADC4_Init+0xc0>
  {
    Error_Handler();
 8000c18:	f000 fcae 	bl	8001578 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <MX_ADC4_Init+0xf0>)
 8000c1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8000c20:	2304      	movs	r3, #4
 8000c22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c24:	463b      	mov	r3, r7
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <MX_ADC4_Init+0xe4>)
 8000c2a:	f003 f9b7 	bl	8003f9c <HAL_ADC_ConfigChannel>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_ADC4_Init+0xdc>
  {
    Error_Handler();
 8000c34:	f000 fca0 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	3720      	adds	r7, #32
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200000b4 	.word	0x200000b4
 8000c44:	46021000 	.word	0x46021000
 8000c48:	1c000080 	.word	0x1c000080
 8000c4c:	20000100 	.word	0x20000100

08000c50 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <MX_DMA2D_Init+0x74>)
 8000c56:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc8 <MX_DMA2D_Init+0x78>)
 8000c58:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <MX_DMA2D_Init+0x74>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000c60:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <MX_DMA2D_Init+0x74>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000c66:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <MX_DMA2D_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <MX_DMA2D_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000c72:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <MX_DMA2D_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <MX_DMA2D_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <MX_DMA2D_Init+0x74>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <MX_DMA2D_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <MX_DMA2D_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <MX_DMA2D_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc4 <MX_DMA2D_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000c9c:	4809      	ldr	r0, [pc, #36]	@ (8000cc4 <MX_DMA2D_Init+0x74>)
 8000c9e:	f005 f907 	bl	8005eb0 <HAL_DMA2D_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000ca8:	f000 fc66 	bl	8001578 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000cac:	2101      	movs	r1, #1
 8000cae:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <MX_DMA2D_Init+0x74>)
 8000cb0:	f005 f960 	bl	8005f74 <HAL_DMA2D_ConfigLayer>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000cba:	f000 fc5d 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	2000026c 	.word	0x2000026c
 8000cc8:	4002b000 	.word	0x4002b000

08000ccc <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000cd2:	4b19      	ldr	r3, [pc, #100]	@ (8000d38 <MX_GPDMA1_Init+0x6c>)
 8000cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cd8:	4a17      	ldr	r2, [pc, #92]	@ (8000d38 <MX_GPDMA1_Init+0x6c>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000ce2:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <MX_GPDMA1_Init+0x6c>)
 8000ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	201d      	movs	r0, #29
 8000cf6:	f004 f97d 	bl	8004ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000cfa:	201d      	movs	r0, #29
 8000cfc:	f004 f994 	bl	8005028 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	201e      	movs	r0, #30
 8000d06:	f004 f975 	bl	8004ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000d0a:	201e      	movs	r0, #30
 8000d0c:	f004 f98c 	bl	8005028 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	201f      	movs	r0, #31
 8000d16:	f004 f96d 	bl	8004ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000d1a:	201f      	movs	r0, #31
 8000d1c:	f004 f984 	bl	8005028 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	2020      	movs	r0, #32
 8000d26:	f004 f965 	bl	8004ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8000d2a:	2020      	movs	r0, #32
 8000d2c:	f004 f97c 	bl	8005028 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	46020c00 	.word	0x46020c00

08000d3c <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 8000d40:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <MX_HSPI1_Init+0x74>)
 8000d42:	4a1c      	ldr	r2, [pc, #112]	@ (8000db4 <MX_HSPI1_Init+0x78>)
 8000d44:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 8000d46:	4b1a      	ldr	r3, [pc, #104]	@ (8000db0 <MX_HSPI1_Init+0x74>)
 8000d48:	2204      	movs	r2, #4
 8000d4a:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000d4c:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <MX_HSPI1_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000d52:	4b17      	ldr	r3, [pc, #92]	@ (8000db0 <MX_HSPI1_Init+0x74>)
 8000d54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000d58:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <MX_HSPI1_Init+0x74>)
 8000d5c:	221a      	movs	r2, #26
 8000d5e:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 8000d60:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <MX_HSPI1_Init+0x74>)
 8000d62:	2202      	movs	r2, #2
 8000d64:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000d66:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <MX_HSPI1_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000d6c:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <MX_HSPI1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000d72:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <MX_HSPI1_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8000d78:	4b0d      	ldr	r3, [pc, #52]	@ (8000db0 <MX_HSPI1_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <MX_HSPI1_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <MX_HSPI1_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000d8a:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <MX_HSPI1_Init+0x74>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8000d90:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <MX_HSPI1_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8000d96:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <MX_HSPI1_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8000d9c:	4804      	ldr	r0, [pc, #16]	@ (8000db0 <MX_HSPI1_Init+0x74>)
 8000d9e:	f00f fa81 	bl	80102a4 <HAL_XSPI_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8000da8:	f000 fbe6 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200002d4 	.word	0x200002d4
 8000db4:	420d3400 	.word	0x420d3400

08000db8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8000e30 <MX_I2C1_Init+0x78>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e34 <MX_I2C1_Init+0x7c>)
 8000dc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dce:	4b17      	ldr	r3, [pc, #92]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dda:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000de0:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de6:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000df2:	480e      	ldr	r0, [pc, #56]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000df4:	f006 fc44 	bl	8007680 <HAL_I2C_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dfe:	f000 fbbb 	bl	8001578 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4809      	ldr	r0, [pc, #36]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000e06:	f007 fae6 	bl	80083d6 <HAL_I2CEx_ConfigAnalogFilter>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e10:	f000 fbb2 	bl	8001578 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e14:	2100      	movs	r1, #0
 8000e16:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <MX_I2C1_Init+0x74>)
 8000e18:	f007 fb28 	bl	800846c <HAL_I2CEx_ConfigDigitalFilter>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e22:	f000 fba9 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000334 	.word	0x20000334
 8000e30:	40005400 	.word	0x40005400
 8000e34:	20a0c4df 	.word	0x20a0c4df

08000e38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8000eb0 <MX_I2C2_Init+0x78>)
 8000e40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e44:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb4 <MX_I2C2_Init+0x7c>)
 8000e46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e48:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e4e:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e54:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e5a:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e60:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e66:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e72:	480e      	ldr	r0, [pc, #56]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e74:	f006 fc04 	bl	8007680 <HAL_I2C_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e7e:	f000 fb7b 	bl	8001578 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e82:	2100      	movs	r1, #0
 8000e84:	4809      	ldr	r0, [pc, #36]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e86:	f007 faa6 	bl	80083d6 <HAL_I2CEx_ConfigAnalogFilter>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e90:	f000 fb72 	bl	8001578 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e94:	2100      	movs	r1, #0
 8000e96:	4805      	ldr	r0, [pc, #20]	@ (8000eac <MX_I2C2_Init+0x74>)
 8000e98:	f007 fae8 	bl	800846c <HAL_I2CEx_ConfigDigitalFilter>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ea2:	f000 fb69 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000388 	.word	0x20000388
 8000eb0:	40005800 	.word	0x40005800
 8000eb4:	20a0c4df 	.word	0x20a0c4df

08000eb8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f007 fb21 	bl	8008504 <HAL_ICACHE_ConfigAssociativityMode>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000ec8:	f000 fb56 	bl	8001578 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000ecc:	f007 fb3a 	bl	8008544 <HAL_ICACHE_Enable>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000ed6:	f000 fb4f 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08e      	sub	sp, #56	@ 0x38
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2234      	movs	r2, #52	@ 0x34
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f00f fe40 	bl	8010b72 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ef2:	4b39      	ldr	r3, [pc, #228]	@ (8000fd8 <MX_LTDC_Init+0xf8>)
 8000ef4:	4a39      	ldr	r2, [pc, #228]	@ (8000fdc <MX_LTDC_Init+0xfc>)
 8000ef6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ef8:	4b37      	ldr	r3, [pc, #220]	@ (8000fd8 <MX_LTDC_Init+0xf8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000efe:	4b36      	ldr	r3, [pc, #216]	@ (8000fd8 <MX_LTDC_Init+0xf8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f04:	4b34      	ldr	r3, [pc, #208]	@ (8000fd8 <MX_LTDC_Init+0xf8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f0a:	4b33      	ldr	r3, [pc, #204]	@ (8000fd8 <MX_LTDC_Init+0xf8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8000f10:	4b31      	ldr	r3, [pc, #196]	@ (8000fd8 <MX_LTDC_Init+0xf8>)
 8000f12:	2203      	movs	r2, #3
 8000f14:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f16:	4b30      	ldr	r3, [pc, #192]	@ (8000fd8 <MX_LTDC_Init+0xf8>)
 8000f18:	2203      	movs	r2, #3
 8000f1a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8000f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd8 <MX_LTDC_Init+0xf8>)
 8000f1e:	220b      	movs	r2, #11
 8000f20:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000f22:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd8 <MX_LTDC_Init+0xf8>)
 8000f24:	220b      	movs	r2, #11
 8000f26:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8000f28:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd8 <MX_LTDC_Init+0xf8>)
 8000f2a:	f240 322b 	movw	r2, #811	@ 0x32b
 8000f2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8000f30:	4b29      	ldr	r3, [pc, #164]	@ (8000fd8 <MX_LTDC_Init+0xf8>)
 8000f32:	f240 12eb 	movw	r2, #491	@ 0x1eb
 8000f36:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8000f38:	4b27      	ldr	r3, [pc, #156]	@ (8000fd8 <MX_LTDC_Init+0xf8>)
 8000f3a:	f240 3233 	movw	r2, #819	@ 0x333
 8000f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8000f40:	4b25      	ldr	r3, [pc, #148]	@ (8000fd8 <MX_LTDC_Init+0xf8>)
 8000f42:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000f46:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f48:	4b23      	ldr	r3, [pc, #140]	@ (8000fd8 <MX_LTDC_Init+0xf8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f50:	4b21      	ldr	r3, [pc, #132]	@ (8000fd8 <MX_LTDC_Init+0xf8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd8 <MX_LTDC_Init+0xf8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f60:	481d      	ldr	r0, [pc, #116]	@ (8000fd8 <MX_LTDC_Init+0xf8>)
 8000f62:	f007 faff 	bl	8008564 <HAL_LTDC_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000f6c:	f000 fb04 	bl	8001578 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8000f74:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000f78:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000f7e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000f82:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000f84:	2301      	movs	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000f88:	23ff      	movs	r3, #255	@ 0xff
 8000f8a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000f90:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f94:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f96:	2307      	movs	r3, #7
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	@ (8000fd8 <MX_LTDC_Init+0xf8>)
 8000fc0:	f007 fc62 	bl	8008888 <HAL_LTDC_ConfigLayer>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8000fca:	f000 fad5 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	3738      	adds	r7, #56	@ 0x38
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200003dc 	.word	0x200003dc
 8000fdc:	40016800 	.word	0x40016800

08000fe0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
 8000ff4:	615a      	str	r2, [r3, #20]
 8000ff6:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8001074 <MX_RTC_Init+0x94>)
 8000ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8001078 <MX_RTC_Init+0x98>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8001074 <MX_RTC_Init+0x94>)
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001004:	4b1b      	ldr	r3, [pc, #108]	@ (8001074 <MX_RTC_Init+0x94>)
 8001006:	227f      	movs	r2, #127	@ 0x7f
 8001008:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800100a:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <MX_RTC_Init+0x94>)
 800100c:	22ff      	movs	r2, #255	@ 0xff
 800100e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001010:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <MX_RTC_Init+0x94>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001016:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <MX_RTC_Init+0x94>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800101c:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <MX_RTC_Init+0x94>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001022:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <MX_RTC_Init+0x94>)
 8001024:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001028:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800102a:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <MX_RTC_Init+0x94>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001030:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <MX_RTC_Init+0x94>)
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001036:	480f      	ldr	r0, [pc, #60]	@ (8001074 <MX_RTC_Init+0x94>)
 8001038:	f00c faea 	bl	800d610 <HAL_RTC_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001042:	f000 fa99 	bl	8001578 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	4619      	mov	r1, r3
 800105a:	4806      	ldr	r0, [pc, #24]	@ (8001074 <MX_RTC_Init+0x94>)
 800105c:	f00c fc06 	bl	800d86c <HAL_RTCEx_PrivilegeModeSet>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8001066:	f000 fa87 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	3720      	adds	r7, #32
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000484 	.word	0x20000484
 8001078:	46007800 	.word	0x46007800

0800107c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001080:	4b2f      	ldr	r3, [pc, #188]	@ (8001140 <MX_SAI2_Init+0xc4>)
 8001082:	4a30      	ldr	r2, [pc, #192]	@ (8001144 <MX_SAI2_Init+0xc8>)
 8001084:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001086:	4b2e      	ldr	r3, [pc, #184]	@ (8001140 <MX_SAI2_Init+0xc4>)
 8001088:	2200      	movs	r2, #0
 800108a:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800108c:	4b2c      	ldr	r3, [pc, #176]	@ (8001140 <MX_SAI2_Init+0xc4>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001092:	4b2b      	ldr	r3, [pc, #172]	@ (8001140 <MX_SAI2_Init+0xc4>)
 8001094:	2200      	movs	r2, #0
 8001096:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001098:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <MX_SAI2_Init+0xc4>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800109e:	4b28      	ldr	r3, [pc, #160]	@ (8001140 <MX_SAI2_Init+0xc4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 80010a4:	4b26      	ldr	r3, [pc, #152]	@ (8001140 <MX_SAI2_Init+0xc4>)
 80010a6:	4a28      	ldr	r2, [pc, #160]	@ (8001148 <MX_SAI2_Init+0xcc>)
 80010a8:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010aa:	4b25      	ldr	r3, [pc, #148]	@ (8001140 <MX_SAI2_Init+0xc4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 80010b0:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <MX_SAI2_Init+0xc4>)
 80010b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010b6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80010b8:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <MX_SAI2_Init+0xc4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80010be:	4b20      	ldr	r3, [pc, #128]	@ (8001140 <MX_SAI2_Init+0xc4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 80010c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001140 <MX_SAI2_Init+0xc4>)
 80010c6:	2210      	movs	r2, #16
 80010c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80010ca:	2302      	movs	r3, #2
 80010cc:	2202      	movs	r2, #2
 80010ce:	2101      	movs	r1, #1
 80010d0:	481b      	ldr	r0, [pc, #108]	@ (8001140 <MX_SAI2_Init+0xc4>)
 80010d2:	f00c fbf9 	bl	800d8c8 <HAL_SAI_InitProtocol>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_SAI2_Init+0x64>
  {
    Error_Handler();
 80010dc:	f000 fa4c 	bl	8001578 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <MX_SAI2_Init+0xd0>)
 80010e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001150 <MX_SAI2_Init+0xd4>)
 80010e4:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 80010e6:	4b19      	ldr	r3, [pc, #100]	@ (800114c <MX_SAI2_Init+0xd0>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 80010ec:	4b17      	ldr	r3, [pc, #92]	@ (800114c <MX_SAI2_Init+0xd0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010f2:	4b16      	ldr	r3, [pc, #88]	@ (800114c <MX_SAI2_Init+0xd0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80010f8:	4b14      	ldr	r3, [pc, #80]	@ (800114c <MX_SAI2_Init+0xd0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 80010fe:	4b13      	ldr	r3, [pc, #76]	@ (800114c <MX_SAI2_Init+0xd0>)
 8001100:	2202      	movs	r2, #2
 8001102:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 8001104:	4b11      	ldr	r3, [pc, #68]	@ (800114c <MX_SAI2_Init+0xd0>)
 8001106:	4a10      	ldr	r2, [pc, #64]	@ (8001148 <MX_SAI2_Init+0xcc>)
 8001108:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800110a:	4b10      	ldr	r3, [pc, #64]	@ (800114c <MX_SAI2_Init+0xd0>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001110:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <MX_SAI2_Init+0xd0>)
 8001112:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001116:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <MX_SAI2_Init+0xd0>)
 800111a:	2200      	movs	r2, #0
 800111c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <MX_SAI2_Init+0xd0>)
 8001120:	2200      	movs	r2, #0
 8001122:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001124:	2308      	movs	r3, #8
 8001126:	2202      	movs	r2, #2
 8001128:	2100      	movs	r1, #0
 800112a:	4808      	ldr	r0, [pc, #32]	@ (800114c <MX_SAI2_Init+0xd0>)
 800112c:	f00c fbcc 	bl	800d8c8 <HAL_SAI_InitProtocol>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_SAI2_Init+0xbe>
  {
    Error_Handler();
 8001136:	f000 fa1f 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200004b4 	.word	0x200004b4
 8001144:	40015804 	.word	0x40015804
 8001148:	00017700 	.word	0x00017700
 800114c:	2000054c 	.word	0x2000054c
 8001150:	40015824 	.word	0x40015824

08001154 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	@ 0x28
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001166:	463b      	mov	r3, r7
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
 8001174:	615a      	str	r2, [r3, #20]
 8001176:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001178:	4b25      	ldr	r3, [pc, #148]	@ (8001210 <MX_TIM3_Init+0xbc>)
 800117a:	4a26      	ldr	r2, [pc, #152]	@ (8001214 <MX_TIM3_Init+0xc0>)
 800117c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 800117e:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <MX_TIM3_Init+0xbc>)
 8001180:	22a0      	movs	r2, #160	@ 0xa0
 8001182:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001184:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <MX_TIM3_Init+0xbc>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800118a:	4b21      	ldr	r3, [pc, #132]	@ (8001210 <MX_TIM3_Init+0xbc>)
 800118c:	2264      	movs	r2, #100	@ 0x64
 800118e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001190:	4b1f      	ldr	r3, [pc, #124]	@ (8001210 <MX_TIM3_Init+0xbc>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001196:	4b1e      	ldr	r3, [pc, #120]	@ (8001210 <MX_TIM3_Init+0xbc>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800119c:	481c      	ldr	r0, [pc, #112]	@ (8001210 <MX_TIM3_Init+0xbc>)
 800119e:	f00d f8d5 	bl	800e34c <HAL_TIM_PWM_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80011a8:	f000 f9e6 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	4815      	ldr	r0, [pc, #84]	@ (8001210 <MX_TIM3_Init+0xbc>)
 80011bc:	f00d ff0e 	bl	800efdc <HAL_TIMEx_MasterConfigSynchronization>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80011c6:	f000 f9d7 	bl	8001578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ca:	2360      	movs	r3, #96	@ 0x60
 80011cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 80011ce:	234b      	movs	r3, #75	@ 0x4b
 80011d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011da:	463b      	mov	r3, r7
 80011dc:	220c      	movs	r2, #12
 80011de:	4619      	mov	r1, r3
 80011e0:	480b      	ldr	r0, [pc, #44]	@ (8001210 <MX_TIM3_Init+0xbc>)
 80011e2:	f00d f90b 	bl	800e3fc <HAL_TIM_PWM_ConfigChannel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80011ec:	f000 f9c4 	bl	8001578 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 80011f0:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <MX_TIM3_Init+0xbc>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	69da      	ldr	r2, [r3, #28]
 80011f6:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <MX_TIM3_Init+0xbc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011fe:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001200:	4803      	ldr	r0, [pc, #12]	@ (8001210 <MX_TIM3_Init+0xbc>)
 8001202:	f000 ff3d 	bl	8002080 <HAL_TIM_MspPostInit>

}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	@ 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000074c 	.word	0x2000074c
 8001214:	40000400 	.word	0x40000400

08001218 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800121c:	4b22      	ldr	r3, [pc, #136]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 800121e:	4a23      	ldr	r2, [pc, #140]	@ (80012ac <MX_USART1_UART_Init+0x94>)
 8001220:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001222:	4b21      	ldr	r3, [pc, #132]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 8001224:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001228:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800122a:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001230:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800123c:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 800123e:	220c      	movs	r2, #12
 8001240:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001242:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800124e:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001254:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125a:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 800125c:	2200      	movs	r2, #0
 800125e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001260:	4811      	ldr	r0, [pc, #68]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 8001262:	f00d ff7d 	bl	800f160 <HAL_UART_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800126c:	f000 f984 	bl	8001578 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001270:	2100      	movs	r1, #0
 8001272:	480d      	ldr	r0, [pc, #52]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 8001274:	f00e ff4b 	bl	801010e <HAL_UARTEx_SetTxFifoThreshold>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800127e:	f000 f97b 	bl	8001578 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001282:	2100      	movs	r1, #0
 8001284:	4808      	ldr	r0, [pc, #32]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 8001286:	f00e ff80 	bl	801018a <HAL_UARTEx_SetRxFifoThreshold>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001290:	f000 f972 	bl	8001578 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	@ (80012a8 <MX_USART1_UART_Init+0x90>)
 8001296:	f00e ff01 	bl	801009c <HAL_UARTEx_DisableFifoMode>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012a0:	f000 f96a 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000798 	.word	0x20000798
 80012ac:	40013800 	.word	0x40013800

080012b0 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80012b4:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80012b6:	4a14      	ldr	r2, [pc, #80]	@ (8001308 <MX_USB_OTG_HS_PCD_Init+0x58>)
 80012b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80012ba:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80012bc:	2209      	movs	r2, #9
 80012be:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80012c0:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80012c8:	2203      	movs	r2, #3
 80012ca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80012cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80012d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80012da:	2200      	movs	r2, #0
 80012dc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	@ (8001304 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80012f2:	f007 fc7a 	bl	8008bea <HAL_PCD_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 80012fc:	f000 f93c 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2000082c 	.word	0x2000082c
 8001308:	42040000 	.word	0x42040000

0800130c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08e      	sub	sp, #56	@ 0x38
 8001310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001312:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001322:	4b8c      	ldr	r3, [pc, #560]	@ (8001554 <MX_GPIO_Init+0x248>)
 8001324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001328:	4a8a      	ldr	r2, [pc, #552]	@ (8001554 <MX_GPIO_Init+0x248>)
 800132a:	f043 0310 	orr.w	r3, r3, #16
 800132e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001332:	4b88      	ldr	r3, [pc, #544]	@ (8001554 <MX_GPIO_Init+0x248>)
 8001334:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	623b      	str	r3, [r7, #32]
 800133e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001340:	4b84      	ldr	r3, [pc, #528]	@ (8001554 <MX_GPIO_Init+0x248>)
 8001342:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001346:	4a83      	ldr	r2, [pc, #524]	@ (8001554 <MX_GPIO_Init+0x248>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001350:	4b80      	ldr	r3, [pc, #512]	@ (8001554 <MX_GPIO_Init+0x248>)
 8001352:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800135e:	4b7d      	ldr	r3, [pc, #500]	@ (8001554 <MX_GPIO_Init+0x248>)
 8001360:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001364:	4a7b      	ldr	r2, [pc, #492]	@ (8001554 <MX_GPIO_Init+0x248>)
 8001366:	f043 0320 	orr.w	r3, r3, #32
 800136a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800136e:	4b79      	ldr	r3, [pc, #484]	@ (8001554 <MX_GPIO_Init+0x248>)
 8001370:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001374:	f003 0320 	and.w	r3, r3, #32
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137c:	4b75      	ldr	r3, [pc, #468]	@ (8001554 <MX_GPIO_Init+0x248>)
 800137e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001382:	4a74      	ldr	r2, [pc, #464]	@ (8001554 <MX_GPIO_Init+0x248>)
 8001384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001388:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800138c:	4b71      	ldr	r3, [pc, #452]	@ (8001554 <MX_GPIO_Init+0x248>)
 800138e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	4b6e      	ldr	r3, [pc, #440]	@ (8001554 <MX_GPIO_Init+0x248>)
 800139c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013a0:	4a6c      	ldr	r2, [pc, #432]	@ (8001554 <MX_GPIO_Init+0x248>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001554 <MX_GPIO_Init+0x248>)
 80013ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b8:	4b66      	ldr	r3, [pc, #408]	@ (8001554 <MX_GPIO_Init+0x248>)
 80013ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013be:	4a65      	ldr	r2, [pc, #404]	@ (8001554 <MX_GPIO_Init+0x248>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013c8:	4b62      	ldr	r3, [pc, #392]	@ (8001554 <MX_GPIO_Init+0x248>)
 80013ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001554 <MX_GPIO_Init+0x248>)
 80013d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013dc:	4a5d      	ldr	r2, [pc, #372]	@ (8001554 <MX_GPIO_Init+0x248>)
 80013de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001554 <MX_GPIO_Init+0x248>)
 80013e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f4:	4b57      	ldr	r3, [pc, #348]	@ (8001554 <MX_GPIO_Init+0x248>)
 80013f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013fa:	4a56      	ldr	r2, [pc, #344]	@ (8001554 <MX_GPIO_Init+0x248>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001404:	4b53      	ldr	r3, [pc, #332]	@ (8001554 <MX_GPIO_Init+0x248>)
 8001406:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001412:	4b50      	ldr	r3, [pc, #320]	@ (8001554 <MX_GPIO_Init+0x248>)
 8001414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001418:	4a4e      	ldr	r2, [pc, #312]	@ (8001554 <MX_GPIO_Init+0x248>)
 800141a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800141e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001422:	4b4c      	ldr	r3, [pc, #304]	@ (8001554 <MX_GPIO_Init+0x248>)
 8001424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	2104      	movs	r1, #4
 8001434:	4848      	ldr	r0, [pc, #288]	@ (8001558 <MX_GPIO_Init+0x24c>)
 8001436:	f006 f8cf 	bl	80075d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	2110      	movs	r1, #16
 800143e:	4846      	ldr	r0, [pc, #280]	@ (8001558 <MX_GPIO_Init+0x24c>)
 8001440:	f006 f8ca 	bl	80075d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	2114      	movs	r1, #20
 8001448:	4844      	ldr	r0, [pc, #272]	@ (800155c <MX_GPIO_Init+0x250>)
 800144a:	f006 f8c5 	bl	80075d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 800144e:	2314      	movs	r3, #20
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800145e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	483c      	ldr	r0, [pc, #240]	@ (8001558 <MX_GPIO_Init+0x24c>)
 8001466:	f005 fedf 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 800146a:	2320      	movs	r3, #32
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800146e:	4b3c      	ldr	r3, [pc, #240]	@ (8001560 <MX_GPIO_Init+0x254>)
 8001470:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800147a:	4619      	mov	r1, r3
 800147c:	4836      	ldr	r0, [pc, #216]	@ (8001558 <MX_GPIO_Init+0x24c>)
 800147e:	f005 fed3 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 8001482:	2302      	movs	r3, #2
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001486:	4b37      	ldr	r3, [pc, #220]	@ (8001564 <MX_GPIO_Init+0x258>)
 8001488:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001492:	4619      	mov	r1, r3
 8001494:	4834      	ldr	r0, [pc, #208]	@ (8001568 <MX_GPIO_Init+0x25c>)
 8001496:	f005 fec7 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 800149a:	2310      	movs	r3, #16
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800149e:	4b33      	ldr	r3, [pc, #204]	@ (800156c <MX_GPIO_Init+0x260>)
 80014a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	482e      	ldr	r0, [pc, #184]	@ (8001568 <MX_GPIO_Init+0x25c>)
 80014ae:	f005 febb 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 80014b2:	2314      	movs	r3, #20
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c6:	4619      	mov	r1, r3
 80014c8:	4824      	ldr	r0, [pc, #144]	@ (800155c <MX_GPIO_Init+0x250>)
 80014ca:	f005 fead 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 80014ce:	2380      	movs	r3, #128	@ 0x80
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014de:	4619      	mov	r1, r3
 80014e0:	481e      	ldr	r0, [pc, #120]	@ (800155c <MX_GPIO_Init+0x250>)
 80014e2:	f005 fea1 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 80014e6:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f8:	4619      	mov	r1, r3
 80014fa:	481d      	ldr	r0, [pc, #116]	@ (8001570 <MX_GPIO_Init+0x264>)
 80014fc:	f005 fe94 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 8001500:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001506:	2300      	movs	r3, #0
 8001508:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001512:	4619      	mov	r1, r3
 8001514:	4817      	ldr	r0, [pc, #92]	@ (8001574 <MX_GPIO_Init+0x268>)
 8001516:	f005 fe87 	bl	8007228 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	200c      	movs	r0, #12
 8001520:	f003 fd68 	bl	8004ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001524:	200c      	movs	r0, #12
 8001526:	f003 fd7f 	bl	8005028 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	200f      	movs	r0, #15
 8001530:	f003 fd60 	bl	8004ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001534:	200f      	movs	r0, #15
 8001536:	f003 fd77 	bl	8005028 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2010      	movs	r0, #16
 8001540:	f003 fd58 	bl	8004ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8001544:	2010      	movs	r0, #16
 8001546:	f003 fd6f 	bl	8005028 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800154a:	bf00      	nop
 800154c:	3738      	adds	r7, #56	@ 0x38
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	46020c00 	.word	0x46020c00
 8001558:	42021000 	.word	0x42021000
 800155c:	42020c00 	.word	0x42020c00
 8001560:	10110000 	.word	0x10110000
 8001564:	10310000 	.word	0x10310000
 8001568:	42020000 	.word	0x42020000
 800156c:	10210000 	.word	0x10210000
 8001570:	42021800 	.word	0x42021800
 8001574:	42020400 	.word	0x42020400

08001578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
}
 800157e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <Error_Handler+0x8>

08001584 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <HAL_MspInit+0x30>)
 800158c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001590:	4a08      	ldr	r2, [pc, #32]	@ (80015b4 <HAL_MspInit+0x30>)
 8001592:	f043 0304 	orr.w	r3, r3, #4
 8001596:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800159a:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <HAL_MspInit+0x30>)
 800159c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 80015a8:	f007 fd5c 	bl	8009064 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	46020c00 	.word	0x46020c00

080015b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b0e0      	sub	sp, #384	@ 0x180
 80015bc:	af00      	add	r7, sp, #0
 80015be:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80015c2:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80015c6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80015dc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80015e0:	4618      	mov	r0, r3
 80015e2:	23e0      	movs	r3, #224	@ 0xe0
 80015e4:	461a      	mov	r2, r3
 80015e6:	2100      	movs	r1, #0
 80015e8:	f00f fac3 	bl	8010b72 <memset>
  if(hadc->Instance==ADC1)
 80015ec:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80015f0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a9d      	ldr	r2, [pc, #628]	@ (8001870 <HAL_ADC_MspInit+0x2b8>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	f040 814a 	bne.w	8001894 <HAL_ADC_MspInit+0x2dc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001600:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001604:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001608:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001614:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001618:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800161c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001620:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001624:	f107 0320 	add.w	r3, r7, #32
 8001628:	4618      	mov	r0, r3
 800162a:	f008 fff5 	bl	800a618 <HAL_RCCEx_PeriphCLKConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8001634:	f7ff ffa0 	bl	8001578 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001638:	4b8e      	ldr	r3, [pc, #568]	@ (8001874 <HAL_ADC_MspInit+0x2bc>)
 800163a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800163e:	4a8d      	ldr	r2, [pc, #564]	@ (8001874 <HAL_ADC_MspInit+0x2bc>)
 8001640:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001644:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001648:	4b8a      	ldr	r3, [pc, #552]	@ (8001874 <HAL_ADC_MspInit+0x2bc>)
 800164a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800164e:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001652:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001656:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001660:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001664:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001666:	4b83      	ldr	r3, [pc, #524]	@ (8001874 <HAL_ADC_MspInit+0x2bc>)
 8001668:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800166c:	4a81      	ldr	r2, [pc, #516]	@ (8001874 <HAL_ADC_MspInit+0x2bc>)
 800166e:	f043 0304 	orr.w	r3, r3, #4
 8001672:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001676:	4b7f      	ldr	r3, [pc, #508]	@ (8001874 <HAL_ADC_MspInit+0x2bc>)
 8001678:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800167c:	f003 0204 	and.w	r2, r3, #4
 8001680:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001684:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800168e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001692:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	4b77      	ldr	r3, [pc, #476]	@ (8001874 <HAL_ADC_MspInit+0x2bc>)
 8001696:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800169a:	4a76      	ldr	r2, [pc, #472]	@ (8001874 <HAL_ADC_MspInit+0x2bc>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016a4:	4b73      	ldr	r3, [pc, #460]	@ (8001874 <HAL_ADC_MspInit+0x2bc>)
 80016a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016aa:	f003 0201 	and.w	r2, r3, #1
 80016ae:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80016b2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80016bc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80016c0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001874 <HAL_ADC_MspInit+0x2bc>)
 80016c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016c8:	4a6a      	ldr	r2, [pc, #424]	@ (8001874 <HAL_ADC_MspInit+0x2bc>)
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016d2:	4b68      	ldr	r3, [pc, #416]	@ (8001874 <HAL_ADC_MspInit+0x2bc>)
 80016d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016d8:	f003 0202 	and.w	r2, r3, #2
 80016dc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80016e0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80016ea:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80016ee:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 80016f0:	230f      	movs	r3, #15
 80016f2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f6:	2303      	movs	r3, #3
 80016f8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001702:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001706:	4619      	mov	r1, r3
 8001708:	485b      	ldr	r0, [pc, #364]	@ (8001878 <HAL_ADC_MspInit+0x2c0>)
 800170a:	f005 fd8d 	bl	8007228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 800170e:	23ed      	movs	r3, #237	@ 0xed
 8001710:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001714:	2303      	movs	r3, #3
 8001716:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001724:	4619      	mov	r1, r3
 8001726:	4855      	ldr	r0, [pc, #340]	@ (800187c <HAL_ADC_MspInit+0x2c4>)
 8001728:	f005 fd7e 	bl	8007228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 800172c:	2303      	movs	r3, #3
 800172e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001732:	2303      	movs	r3, #3
 8001734:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001742:	4619      	mov	r1, r3
 8001744:	484e      	ldr	r0, [pc, #312]	@ (8001880 <HAL_ADC_MspInit+0x2c8>)
 8001746:	f005 fd6f 	bl	8007228 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800174a:	2321      	movs	r3, #33	@ 0x21
 800174c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8001750:	2300      	movs	r3, #0
 8001752:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001756:	2300      	movs	r3, #0
 8001758:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800175c:	2300      	movs	r3, #0
 800175e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001762:	2300      	movs	r3, #0
 8001764:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001768:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800176c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001770:	2301      	movs	r3, #1
 8001772:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001776:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800177a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcBurstLength = 1;
 800177e:	2301      	movs	r3, #1
 8001780:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.DestBurstLength = 1;
 8001784:	2301      	movs	r3, #1
 8001786:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 800178a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800178e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001792:	2300      	movs	r3, #0
 8001794:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001798:	2300      	movs	r3, #0
 800179a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800179e:	2300      	movs	r3, #0
 80017a0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80017b0:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80017b4:	4933      	ldr	r1, [pc, #204]	@ (8001884 <HAL_ADC_MspInit+0x2cc>)
 80017b6:	4618      	mov	r0, r3
 80017b8:	f004 fe4a 	bl	8006450 <HAL_DMAEx_List_BuildNode>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_ADC_MspInit+0x20e>
    {
      Error_Handler();
 80017c2:	f7ff fed9 	bl	8001578 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80017c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001884 <HAL_ADC_MspInit+0x2cc>)
 80017c8:	2100      	movs	r1, #0
 80017ca:	482f      	ldr	r0, [pc, #188]	@ (8001888 <HAL_ADC_MspInit+0x2d0>)
 80017cc:	f004 fe6c 	bl	80064a8 <HAL_DMAEx_List_InsertNode>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_ADC_MspInit+0x222>
    {
      Error_Handler();
 80017d6:	f7ff fecf 	bl	8001578 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 80017da:	482b      	ldr	r0, [pc, #172]	@ (8001888 <HAL_ADC_MspInit+0x2d0>)
 80017dc:	f004 ff2d 	bl	800663a <HAL_DMAEx_List_SetCircularMode>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_ADC_MspInit+0x232>
    {
      Error_Handler();
 80017e6:	f7ff fec7 	bl	8001578 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80017ea:	4b28      	ldr	r3, [pc, #160]	@ (800188c <HAL_ADC_MspInit+0x2d4>)
 80017ec:	4a28      	ldr	r2, [pc, #160]	@ (8001890 <HAL_ADC_MspInit+0x2d8>)
 80017ee:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80017f0:	4b26      	ldr	r3, [pc, #152]	@ (800188c <HAL_ADC_MspInit+0x2d4>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80017f6:	4b25      	ldr	r3, [pc, #148]	@ (800188c <HAL_ADC_MspInit+0x2d4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80017fc:	4b23      	ldr	r3, [pc, #140]	@ (800188c <HAL_ADC_MspInit+0x2d4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001802:	4b22      	ldr	r3, [pc, #136]	@ (800188c <HAL_ADC_MspInit+0x2d4>)
 8001804:	2200      	movs	r2, #0
 8001806:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001808:	4b20      	ldr	r3, [pc, #128]	@ (800188c <HAL_ADC_MspInit+0x2d4>)
 800180a:	2281      	movs	r2, #129	@ 0x81
 800180c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 800180e:	481f      	ldr	r0, [pc, #124]	@ (800188c <HAL_ADC_MspInit+0x2d4>)
 8001810:	f004 fc5e 	bl	80060d0 <HAL_DMAEx_List_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_ADC_MspInit+0x266>
    {
      Error_Handler();
 800181a:	f7ff fead 	bl	8001578 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 800181e:	491a      	ldr	r1, [pc, #104]	@ (8001888 <HAL_ADC_MspInit+0x2d0>)
 8001820:	481a      	ldr	r0, [pc, #104]	@ (800188c <HAL_ADC_MspInit+0x2d4>)
 8001822:	f004 ff6b 	bl	80066fc <HAL_DMAEx_List_LinkQ>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_ADC_MspInit+0x278>
    {
      Error_Handler();
 800182c:	f7ff fea4 	bl	8001578 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8001830:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001834:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a14      	ldr	r2, [pc, #80]	@ (800188c <HAL_ADC_MspInit+0x2d4>)
 800183c:	671a      	str	r2, [r3, #112]	@ 0x70
 800183e:	4a13      	ldr	r2, [pc, #76]	@ (800188c <HAL_ADC_MspInit+0x2d4>)
 8001840:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001844:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 800184c:	2110      	movs	r1, #16
 800184e:	480f      	ldr	r0, [pc, #60]	@ (800188c <HAL_ADC_MspInit+0x2d4>)
 8001850:	f004 f84c 	bl	80058ec <HAL_DMA_ConfigChannelAttributes>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_ADC_MspInit+0x2a6>
    {
      Error_Handler();
 800185a:	f7ff fe8d 	bl	8001578 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	2025      	movs	r0, #37	@ 0x25
 8001864:	f003 fbc6 	bl	8004ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001868:	2025      	movs	r0, #37	@ 0x25
 800186a:	f003 fbdd 	bl	8005028 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 800186e:	e0bf      	b.n	80019f0 <HAL_ADC_MspInit+0x438>
 8001870:	42028000 	.word	0x42028000
 8001874:	46020c00 	.word	0x46020c00
 8001878:	42020800 	.word	0x42020800
 800187c:	42020000 	.word	0x42020000
 8001880:	42020400 	.word	0x42020400
 8001884:	20000140 	.word	0x20000140
 8001888:	20000164 	.word	0x20000164
 800188c:	2000017c 	.word	0x2000017c
 8001890:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 8001894:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001898:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a56      	ldr	r2, [pc, #344]	@ (80019fc <HAL_ADC_MspInit+0x444>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	f040 80a4 	bne.w	80019f0 <HAL_ADC_MspInit+0x438>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80018a8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018ac:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 80018b0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80018bc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018c0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80018c4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018c8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018cc:	f107 0320 	add.w	r3, r7, #32
 80018d0:	4618      	mov	r0, r3
 80018d2:	f008 fea1 	bl	800a618 <HAL_RCCEx_PeriphCLKConfig>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <HAL_ADC_MspInit+0x328>
      Error_Handler();
 80018dc:	f7ff fe4c 	bl	8001578 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 80018e0:	4b47      	ldr	r3, [pc, #284]	@ (8001a00 <HAL_ADC_MspInit+0x448>)
 80018e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018e6:	4a46      	ldr	r2, [pc, #280]	@ (8001a00 <HAL_ADC_MspInit+0x448>)
 80018e8:	f043 0320 	orr.w	r3, r3, #32
 80018ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80018f0:	4b43      	ldr	r3, [pc, #268]	@ (8001a00 <HAL_ADC_MspInit+0x448>)
 80018f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018f6:	f003 0220 	and.w	r2, r3, #32
 80018fa:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018fe:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001908:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800190c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800190e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a00 <HAL_ADC_MspInit+0x448>)
 8001910:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001914:	4a3a      	ldr	r2, [pc, #232]	@ (8001a00 <HAL_ADC_MspInit+0x448>)
 8001916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800191a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800191e:	4b38      	ldr	r3, [pc, #224]	@ (8001a00 <HAL_ADC_MspInit+0x448>)
 8001920:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001924:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001928:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800192c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001936:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800193a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 800193c:	2303      	movs	r3, #3
 800193e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001942:	2303      	movs	r3, #3
 8001944:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800194e:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001952:	4619      	mov	r1, r3
 8001954:	482b      	ldr	r0, [pc, #172]	@ (8001a04 <HAL_ADC_MspInit+0x44c>)
 8001956:	f005 fc67 	bl	8007228 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 800195a:	4b2b      	ldr	r3, [pc, #172]	@ (8001a08 <HAL_ADC_MspInit+0x450>)
 800195c:	4a2b      	ldr	r2, [pc, #172]	@ (8001a0c <HAL_ADC_MspInit+0x454>)
 800195e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8001960:	4b29      	ldr	r3, [pc, #164]	@ (8001a08 <HAL_ADC_MspInit+0x450>)
 8001962:	2201      	movs	r2, #1
 8001964:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001966:	4b28      	ldr	r3, [pc, #160]	@ (8001a08 <HAL_ADC_MspInit+0x450>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800196c:	4b26      	ldr	r3, [pc, #152]	@ (8001a08 <HAL_ADC_MspInit+0x450>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001972:	4b25      	ldr	r3, [pc, #148]	@ (8001a08 <HAL_ADC_MspInit+0x450>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001978:	4b23      	ldr	r3, [pc, #140]	@ (8001a08 <HAL_ADC_MspInit+0x450>)
 800197a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800197e:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001980:	4b21      	ldr	r3, [pc, #132]	@ (8001a08 <HAL_ADC_MspInit+0x450>)
 8001982:	2201      	movs	r2, #1
 8001984:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001986:	4b20      	ldr	r3, [pc, #128]	@ (8001a08 <HAL_ADC_MspInit+0x450>)
 8001988:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800198c:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800198e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a08 <HAL_ADC_MspInit+0x450>)
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001994:	4b1c      	ldr	r3, [pc, #112]	@ (8001a08 <HAL_ADC_MspInit+0x450>)
 8001996:	2201      	movs	r2, #1
 8001998:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 800199a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <HAL_ADC_MspInit+0x450>)
 800199c:	2201      	movs	r2, #1
 800199e:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80019a0:	4b19      	ldr	r3, [pc, #100]	@ (8001a08 <HAL_ADC_MspInit+0x450>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80019a6:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <HAL_ADC_MspInit+0x450>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 80019ac:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <HAL_ADC_MspInit+0x450>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 80019b2:	4815      	ldr	r0, [pc, #84]	@ (8001a08 <HAL_ADC_MspInit+0x450>)
 80019b4:	f003 fbfa 	bl	80051ac <HAL_DMA_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_ADC_MspInit+0x40a>
      Error_Handler();
 80019be:	f7ff fddb 	bl	8001578 <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 80019c2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80019c6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001a08 <HAL_ADC_MspInit+0x450>)
 80019ce:	671a      	str	r2, [r3, #112]	@ 0x70
 80019d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a08 <HAL_ADC_MspInit+0x450>)
 80019d2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80019d6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 80019de:	2110      	movs	r1, #16
 80019e0:	4809      	ldr	r0, [pc, #36]	@ (8001a08 <HAL_ADC_MspInit+0x450>)
 80019e2:	f003 ff83 	bl	80058ec <HAL_DMA_ConfigChannelAttributes>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_ADC_MspInit+0x438>
      Error_Handler();
 80019ec:	f7ff fdc4 	bl	8001578 <Error_Handler>
}
 80019f0:	bf00      	nop
 80019f2:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	46021000 	.word	0x46021000
 8001a00:	46020c00 	.word	0x46020c00
 8001a04:	42021800 	.word	0x42021800
 8001a08:	200001f4 	.word	0x200001f4
 8001a0c:	40020150 	.word	0x40020150

08001a10 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a4c <HAL_DMA2D_MspInit+0x3c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d10e      	bne.n	8001a40 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001a22:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <HAL_DMA2D_MspInit+0x40>)
 8001a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a28:	4a09      	ldr	r2, [pc, #36]	@ (8001a50 <HAL_DMA2D_MspInit+0x40>)
 8001a2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a2e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001a32:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <HAL_DMA2D_MspInit+0x40>)
 8001a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	4002b000 	.word	0x4002b000
 8001a50:	46020c00 	.word	0x46020c00

08001a54 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	@ 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a2a      	ldr	r2, [pc, #168]	@ (8001b1c <HAL_XSPI_MspInit+0xc8>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d14d      	bne.n	8001b12 <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 8001a76:	4b2a      	ldr	r3, [pc, #168]	@ (8001b20 <HAL_XSPI_MspInit+0xcc>)
 8001a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a7c:	4a28      	ldr	r2, [pc, #160]	@ (8001b20 <HAL_XSPI_MspInit+0xcc>)
 8001a7e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a86:	4b26      	ldr	r3, [pc, #152]	@ (8001b20 <HAL_XSPI_MspInit+0xcc>)
 8001a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a94:	4b22      	ldr	r3, [pc, #136]	@ (8001b20 <HAL_XSPI_MspInit+0xcc>)
 8001a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a9a:	4a21      	ldr	r2, [pc, #132]	@ (8001b20 <HAL_XSPI_MspInit+0xcc>)
 8001a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aa0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b20 <HAL_XSPI_MspInit+0xcc>)
 8001aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b20 <HAL_XSPI_MspInit+0xcc>)
 8001ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ab8:	4a19      	ldr	r2, [pc, #100]	@ (8001b20 <HAL_XSPI_MspInit+0xcc>)
 8001aba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001abe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ac2:	4b17      	ldr	r3, [pc, #92]	@ (8001b20 <HAL_XSPI_MspInit+0xcc>)
 8001ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001ad0:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8001ad4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001ae2:	2308      	movs	r3, #8
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	480d      	ldr	r0, [pc, #52]	@ (8001b24 <HAL_XSPI_MspInit+0xd0>)
 8001aee:	f005 fb9b 	bl	8007228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001af2:	230f      	movs	r3, #15
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001b02:	2308      	movs	r3, #8
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4806      	ldr	r0, [pc, #24]	@ (8001b28 <HAL_XSPI_MspInit+0xd4>)
 8001b0e:	f005 fb8b 	bl	8007228 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8001b12:	bf00      	nop
 8001b14:	3728      	adds	r7, #40	@ 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	420d3400 	.word	0x420d3400
 8001b20:	46020c00 	.word	0x46020c00
 8001b24:	42021c00 	.word	0x42021c00
 8001b28:	42022000 	.word	0x42022000

08001b2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b0c4      	sub	sp, #272	@ 0x110
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b3a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b4c:	f107 0318 	add.w	r3, r7, #24
 8001b50:	22e0      	movs	r2, #224	@ 0xe0
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f00f f80c 	bl	8010b72 <memset>
  if(hi2c->Instance==I2C1)
 8001b5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a63      	ldr	r2, [pc, #396]	@ (8001cf4 <HAL_I2C_MspInit+0x1c8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d14f      	bne.n	8001c0c <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b6c:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b7e:	f107 0318 	add.w	r3, r7, #24
 8001b82:	4618      	mov	r0, r3
 8001b84:	f008 fd48 	bl	800a618 <HAL_RCCEx_PeriphCLKConfig>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001b8e:	f7ff fcf3 	bl	8001578 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b92:	4b59      	ldr	r3, [pc, #356]	@ (8001cf8 <HAL_I2C_MspInit+0x1cc>)
 8001b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b98:	4a57      	ldr	r2, [pc, #348]	@ (8001cf8 <HAL_I2C_MspInit+0x1cc>)
 8001b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ba2:	4b55      	ldr	r3, [pc, #340]	@ (8001cf8 <HAL_I2C_MspInit+0x1cc>)
 8001ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001bb0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001bb4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb8:	2312      	movs	r3, #18
 8001bba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bca:	2304      	movs	r3, #4
 8001bcc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bd0:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4849      	ldr	r0, [pc, #292]	@ (8001cfc <HAL_I2C_MspInit+0x1d0>)
 8001bd8:	f005 fb26 	bl	8007228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bdc:	4b46      	ldr	r3, [pc, #280]	@ (8001cf8 <HAL_I2C_MspInit+0x1cc>)
 8001bde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001be2:	4a45      	ldr	r2, [pc, #276]	@ (8001cf8 <HAL_I2C_MspInit+0x1cc>)
 8001be4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001be8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001bec:	4b42      	ldr	r3, [pc, #264]	@ (8001cf8 <HAL_I2C_MspInit+0x1cc>)
 8001bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001bf2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001bf6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bfa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c04:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001c08:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c0a:	e06e      	b.n	8001cea <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8001c0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c10:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a39      	ldr	r2, [pc, #228]	@ (8001d00 <HAL_I2C_MspInit+0x1d4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d165      	bne.n	8001cea <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c1e:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c30:	f107 0318 	add.w	r3, r7, #24
 8001c34:	4618      	mov	r0, r3
 8001c36:	f008 fcef 	bl	800a618 <HAL_RCCEx_PeriphCLKConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8001c40:	f7ff fc9a 	bl	8001578 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c44:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf8 <HAL_I2C_MspInit+0x1cc>)
 8001c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8001cf8 <HAL_I2C_MspInit+0x1cc>)
 8001c4c:	f043 0320 	orr.w	r3, r3, #32
 8001c50:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c54:	4b28      	ldr	r3, [pc, #160]	@ (8001cf8 <HAL_I2C_MspInit+0x1cc>)
 8001c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c5a:	f003 0220 	and.w	r2, r3, #32
 8001c5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c70:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c72:	2303      	movs	r3, #3
 8001c74:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c78:	2312      	movs	r3, #18
 8001c7a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c90:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001c94:	4619      	mov	r1, r3
 8001c96:	481b      	ldr	r0, [pc, #108]	@ (8001d04 <HAL_I2C_MspInit+0x1d8>)
 8001c98:	f005 fac6 	bl	8007228 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c9c:	4b16      	ldr	r3, [pc, #88]	@ (8001cf8 <HAL_I2C_MspInit+0x1cc>)
 8001c9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ca2:	4a15      	ldr	r2, [pc, #84]	@ (8001cf8 <HAL_I2C_MspInit+0x1cc>)
 8001ca4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ca8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001cac:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <HAL_I2C_MspInit+0x1cc>)
 8001cae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001cb2:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001cc8:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2100      	movs	r1, #0
 8001cce:	2039      	movs	r0, #57	@ 0x39
 8001cd0:	f003 f990 	bl	8004ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001cd4:	2039      	movs	r0, #57	@ 0x39
 8001cd6:	f003 f9a7 	bl	8005028 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2100      	movs	r1, #0
 8001cde:	203a      	movs	r0, #58	@ 0x3a
 8001ce0:	f003 f988 	bl	8004ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001ce4:	203a      	movs	r0, #58	@ 0x3a
 8001ce6:	f003 f99f 	bl	8005028 <HAL_NVIC_EnableIRQ>
}
 8001cea:	bf00      	nop
 8001cec:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40005400 	.word	0x40005400
 8001cf8:	46020c00 	.word	0x46020c00
 8001cfc:	42021800 	.word	0x42021800
 8001d00:	40005800 	.word	0x40005800
 8001d04:	42021400 	.word	0x42021400

08001d08 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b0c6      	sub	sp, #280	@ 0x118
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d12:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d16:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d28:	f107 0320 	add.w	r3, r7, #32
 8001d2c:	22e0      	movs	r2, #224	@ 0xe0
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f00e ff1e 	bl	8010b72 <memset>
  if(hltdc->Instance==LTDC)
 8001d36:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d3a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a92      	ldr	r2, [pc, #584]	@ (8001f8c <HAL_LTDC_MspInit+0x284>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	f040 811b 	bne.w	8001f80 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0302 	mov.w	r3, #2
 8001d52:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8001d60:	2304      	movs	r3, #4
 8001d62:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8001d64:	2332      	movs	r3, #50	@ 0x32
 8001d66:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8001d70:	2308      	movs	r3, #8
 8001d72:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8001d7c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001d80:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d82:	f107 0320 	add.w	r3, r7, #32
 8001d86:	4618      	mov	r0, r3
 8001d88:	f008 fc46 	bl	800a618 <HAL_RCCEx_PeriphCLKConfig>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8001d92:	f7ff fbf1 	bl	8001578 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d96:	4b7e      	ldr	r3, [pc, #504]	@ (8001f90 <HAL_LTDC_MspInit+0x288>)
 8001d98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d9c:	4a7c      	ldr	r2, [pc, #496]	@ (8001f90 <HAL_LTDC_MspInit+0x288>)
 8001d9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001da2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001da6:	4b7a      	ldr	r3, [pc, #488]	@ (8001f90 <HAL_LTDC_MspInit+0x288>)
 8001da8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001dac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db4:	4b76      	ldr	r3, [pc, #472]	@ (8001f90 <HAL_LTDC_MspInit+0x288>)
 8001db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dba:	4a75      	ldr	r2, [pc, #468]	@ (8001f90 <HAL_LTDC_MspInit+0x288>)
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001dc4:	4b72      	ldr	r3, [pc, #456]	@ (8001f90 <HAL_LTDC_MspInit+0x288>)
 8001dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dca:	f003 0202 	and.w	r2, r3, #2
 8001dce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001dd2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ddc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001de0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001de2:	4b6b      	ldr	r3, [pc, #428]	@ (8001f90 <HAL_LTDC_MspInit+0x288>)
 8001de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001de8:	4a69      	ldr	r2, [pc, #420]	@ (8001f90 <HAL_LTDC_MspInit+0x288>)
 8001dea:	f043 0310 	orr.w	r3, r3, #16
 8001dee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001df2:	4b67      	ldr	r3, [pc, #412]	@ (8001f90 <HAL_LTDC_MspInit+0x288>)
 8001df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001df8:	f003 0210 	and.w	r2, r3, #16
 8001dfc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e0e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e10:	4b5f      	ldr	r3, [pc, #380]	@ (8001f90 <HAL_LTDC_MspInit+0x288>)
 8001e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e16:	4a5e      	ldr	r2, [pc, #376]	@ (8001f90 <HAL_LTDC_MspInit+0x288>)
 8001e18:	f043 0308 	orr.w	r3, r3, #8
 8001e1c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e20:	4b5b      	ldr	r3, [pc, #364]	@ (8001f90 <HAL_LTDC_MspInit+0x288>)
 8001e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e26:	f003 0208 	and.w	r2, r3, #8
 8001e2a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e3c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3e:	4b54      	ldr	r3, [pc, #336]	@ (8001f90 <HAL_LTDC_MspInit+0x288>)
 8001e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e44:	4a52      	ldr	r2, [pc, #328]	@ (8001f90 <HAL_LTDC_MspInit+0x288>)
 8001e46:	f043 0304 	orr.w	r3, r3, #4
 8001e4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e4e:	4b50      	ldr	r3, [pc, #320]	@ (8001f90 <HAL_LTDC_MspInit+0x288>)
 8001e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e54:	f003 0204 	and.w	r2, r3, #4
 8001e58:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e5c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e6a:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8001e84:	2308      	movs	r3, #8
 8001e86:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4840      	ldr	r0, [pc, #256]	@ (8001f94 <HAL_LTDC_MspInit+0x28c>)
 8001e92:	f005 f9c9 	bl	8007228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e96:	f64f 7381 	movw	r3, #65409	@ 0xff81
 8001e9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8001eb0:	2308      	movs	r3, #8
 8001eb2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eb6:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4836      	ldr	r0, [pc, #216]	@ (8001f98 <HAL_LTDC_MspInit+0x290>)
 8001ebe:	f005 f9b3 	bl	8007228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001ec2:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 8001ec6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8001edc:	2308      	movs	r3, #8
 8001ede:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ee2:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	482c      	ldr	r0, [pc, #176]	@ (8001f9c <HAL_LTDC_MspInit+0x294>)
 8001eea:	f005 f99d 	bl	8007228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eee:	23c0      	movs	r3, #192	@ 0xc0
 8001ef0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8001f06:	2307      	movs	r3, #7
 8001f08:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001f10:	4619      	mov	r1, r3
 8001f12:	4823      	ldr	r0, [pc, #140]	@ (8001fa0 <HAL_LTDC_MspInit+0x298>)
 8001f14:	f005 f988 	bl	8007228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f18:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8001f32:	2308      	movs	r3, #8
 8001f34:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f38:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4818      	ldr	r0, [pc, #96]	@ (8001fa0 <HAL_LTDC_MspInit+0x298>)
 8001f40:	f005 f972 	bl	8007228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f48:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8001f5e:	2307      	movs	r3, #7
 8001f60:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f64:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001f68:	4619      	mov	r1, r3
 8001f6a:	480a      	ldr	r0, [pc, #40]	@ (8001f94 <HAL_LTDC_MspInit+0x28c>)
 8001f6c:	f005 f95c 	bl	8007228 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001f70:	2200      	movs	r2, #0
 8001f72:	2100      	movs	r1, #0
 8001f74:	2087      	movs	r0, #135	@ 0x87
 8001f76:	f003 f83d 	bl	8004ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001f7a:	2087      	movs	r0, #135	@ 0x87
 8001f7c:	f003 f854 	bl	8005028 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001f80:	bf00      	nop
 8001f82:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40016800 	.word	0x40016800
 8001f90:	46020c00 	.word	0x46020c00
 8001f94:	42020400 	.word	0x42020400
 8001f98:	42021000 	.word	0x42021000
 8001f9c:	42020c00 	.word	0x42020c00
 8001fa0:	42020800 	.word	0x42020800

08001fa4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b0bc      	sub	sp, #240	@ 0xf0
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fac:	f107 0310 	add.w	r3, r7, #16
 8001fb0:	22e0      	movs	r2, #224	@ 0xe0
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f00e fddc 	bl	8010b72 <memset>
  if(hrtc->Instance==RTC)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a1d      	ldr	r2, [pc, #116]	@ (8002034 <HAL_RTC_MspInit+0x90>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d132      	bne.n	800202a <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001fc4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001fd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd8:	f107 0310 	add.w	r3, r7, #16
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f008 fb1b 	bl	800a618 <HAL_RCCEx_PeriphCLKConfig>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001fe8:	f7ff fac6 	bl	8001578 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001fec:	4b12      	ldr	r3, [pc, #72]	@ (8002038 <HAL_RTC_MspInit+0x94>)
 8001fee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ff2:	4a11      	ldr	r2, [pc, #68]	@ (8002038 <HAL_RTC_MspInit+0x94>)
 8001ff4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ff8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <HAL_RTC_MspInit+0x94>)
 8001ffe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002002:	4a0d      	ldr	r2, [pc, #52]	@ (8002038 <HAL_RTC_MspInit+0x94>)
 8002004:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002008:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800200c:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <HAL_RTC_MspInit+0x94>)
 800200e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002012:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 800201a:	4b07      	ldr	r3, [pc, #28]	@ (8002038 <HAL_RTC_MspInit+0x94>)
 800201c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002020:	4a05      	ldr	r2, [pc, #20]	@ (8002038 <HAL_RTC_MspInit+0x94>)
 8002022:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002026:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800202a:	bf00      	nop
 800202c:	37f0      	adds	r7, #240	@ 0xf0
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	46007800 	.word	0x46007800
 8002038:	46020c00 	.word	0x46020c00

0800203c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0b      	ldr	r2, [pc, #44]	@ (8002078 <HAL_TIM_PWM_MspInit+0x3c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d10e      	bne.n	800206c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800204e:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <HAL_TIM_PWM_MspInit+0x40>)
 8002050:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002054:	4a09      	ldr	r2, [pc, #36]	@ (800207c <HAL_TIM_PWM_MspInit+0x40>)
 8002056:	f043 0302 	orr.w	r3, r3, #2
 800205a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800205e:	4b07      	ldr	r3, [pc, #28]	@ (800207c <HAL_TIM_PWM_MspInit+0x40>)
 8002060:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	40000400 	.word	0x40000400
 800207c:	46020c00 	.word	0x46020c00

08002080 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a12      	ldr	r2, [pc, #72]	@ (80020e8 <HAL_TIM_MspPostInit+0x68>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d11e      	bne.n	80020e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020a2:	4b12      	ldr	r3, [pc, #72]	@ (80020ec <HAL_TIM_MspPostInit+0x6c>)
 80020a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020a8:	4a10      	ldr	r2, [pc, #64]	@ (80020ec <HAL_TIM_MspPostInit+0x6c>)
 80020aa:	f043 0310 	orr.w	r3, r3, #16
 80020ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020b2:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <HAL_TIM_MspPostInit+0x6c>)
 80020b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 80020c0:	2340      	movs	r3, #64	@ 0x40
 80020c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020d0:	2302      	movs	r3, #2
 80020d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80020d4:	f107 030c 	add.w	r3, r7, #12
 80020d8:	4619      	mov	r1, r3
 80020da:	4805      	ldr	r0, [pc, #20]	@ (80020f0 <HAL_TIM_MspPostInit+0x70>)
 80020dc:	f005 f8a4 	bl	8007228 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020e0:	bf00      	nop
 80020e2:	3720      	adds	r7, #32
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40000400 	.word	0x40000400
 80020ec:	46020c00 	.word	0x46020c00
 80020f0:	42021000 	.word	0x42021000

080020f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b0c2      	sub	sp, #264	@ 0x108
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80020fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002102:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002114:	f107 0310 	add.w	r3, r7, #16
 8002118:	22e0      	movs	r2, #224	@ 0xe0
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f00e fd28 	bl	8010b72 <memset>
  if(huart->Instance==USART1)
 8002122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002126:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a2f      	ldr	r2, [pc, #188]	@ (80021ec <HAL_UART_MspInit+0xf8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d155      	bne.n	80021e0 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002134:	f04f 0201 	mov.w	r2, #1
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002140:	2300      	movs	r3, #0
 8002142:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002144:	f107 0310 	add.w	r3, r7, #16
 8002148:	4618      	mov	r0, r3
 800214a:	f008 fa65 	bl	800a618 <HAL_RCCEx_PeriphCLKConfig>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8002154:	f7ff fa10 	bl	8001578 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002158:	4b25      	ldr	r3, [pc, #148]	@ (80021f0 <HAL_UART_MspInit+0xfc>)
 800215a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800215e:	4a24      	ldr	r2, [pc, #144]	@ (80021f0 <HAL_UART_MspInit+0xfc>)
 8002160:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002164:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002168:	4b21      	ldr	r3, [pc, #132]	@ (80021f0 <HAL_UART_MspInit+0xfc>)
 800216a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800216e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002176:	4b1e      	ldr	r3, [pc, #120]	@ (80021f0 <HAL_UART_MspInit+0xfc>)
 8002178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800217c:	4a1c      	ldr	r2, [pc, #112]	@ (80021f0 <HAL_UART_MspInit+0xfc>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002186:	4b1a      	ldr	r3, [pc, #104]	@ (80021f0 <HAL_UART_MspInit+0xfc>)
 8002188:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800218c:	f003 0201 	and.w	r2, r3, #1
 8002190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002194:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800219e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021a2:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021a4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80021a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021be:	2307      	movs	r3, #7
 80021c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80021c8:	4619      	mov	r1, r3
 80021ca:	480a      	ldr	r0, [pc, #40]	@ (80021f4 <HAL_UART_MspInit+0x100>)
 80021cc:	f005 f82c 	bl	8007228 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2100      	movs	r1, #0
 80021d4:	203d      	movs	r0, #61	@ 0x3d
 80021d6:	f002 ff0d 	bl	8004ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021da:	203d      	movs	r0, #61	@ 0x3d
 80021dc:	f002 ff24 	bl	8005028 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80021e0:	bf00      	nop
 80021e2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40013800 	.word	0x40013800
 80021f0:	46020c00 	.word	0x46020c00
 80021f4:	42020000 	.word	0x42020000

080021f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b0be      	sub	sp, #248	@ 0xf8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002200:	f107 0318 	add.w	r3, r7, #24
 8002204:	22e0      	movs	r2, #224	@ 0xe0
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f00e fcb2 	bl	8010b72 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a3a      	ldr	r2, [pc, #232]	@ (80022fc <HAL_PCD_MspInit+0x104>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d16d      	bne.n	80022f4 <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002218:	4b39      	ldr	r3, [pc, #228]	@ (8002300 <HAL_PCD_MspInit+0x108>)
 800221a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800221e:	4a38      	ldr	r2, [pc, #224]	@ (8002300 <HAL_PCD_MspInit+0x108>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002228:	4b35      	ldr	r3, [pc, #212]	@ (8002300 <HAL_PCD_MspInit+0x108>)
 800222a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	f04f 0308 	mov.w	r3, #8
 800223e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 8002242:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002246:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800224a:	f107 0318 	add.w	r3, r7, #24
 800224e:	4618      	mov	r0, r3
 8002250:	f008 f9e2 	bl	800a618 <HAL_RCCEx_PeriphCLKConfig>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 800225a:	f7ff f98d 	bl	8001578 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 800225e:	200c      	movs	r0, #12
 8002260:	f000 fc08 	bl	8002a74 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002264:	4b26      	ldr	r3, [pc, #152]	@ (8002300 <HAL_PCD_MspInit+0x108>)
 8002266:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800226a:	4a25      	ldr	r2, [pc, #148]	@ (8002300 <HAL_PCD_MspInit+0x108>)
 800226c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002270:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002274:	4b22      	ldr	r3, [pc, #136]	@ (8002300 <HAL_PCD_MspInit+0x108>)
 8002276:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800227a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8002282:	4b1f      	ldr	r3, [pc, #124]	@ (8002300 <HAL_PCD_MspInit+0x108>)
 8002284:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002288:	4a1d      	ldr	r2, [pc, #116]	@ (8002300 <HAL_PCD_MspInit+0x108>)
 800228a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800228e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002292:	4b1b      	ldr	r3, [pc, #108]	@ (8002300 <HAL_PCD_MspInit+0x108>)
 8002294:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a0:	4b17      	ldr	r3, [pc, #92]	@ (8002300 <HAL_PCD_MspInit+0x108>)
 80022a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d11b      	bne.n	80022e6 <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ae:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <HAL_PCD_MspInit+0x108>)
 80022b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022b4:	4a12      	ldr	r2, [pc, #72]	@ (8002300 <HAL_PCD_MspInit+0x108>)
 80022b6:	f043 0304 	orr.w	r3, r3, #4
 80022ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80022be:	4b10      	ldr	r3, [pc, #64]	@ (8002300 <HAL_PCD_MspInit+0x108>)
 80022c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80022cc:	f006 feaa 	bl	8009024 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 80022d0:	f006 fed8 	bl	8009084 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002300 <HAL_PCD_MspInit+0x108>)
 80022d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022da:	4a09      	ldr	r2, [pc, #36]	@ (8002300 <HAL_PCD_MspInit+0x108>)
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80022e4:	e003      	b.n	80022ee <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80022e6:	f006 fe9d 	bl	8009024 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 80022ea:	f006 fecb 	bl	8009084 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 80022ee:	2001      	movs	r0, #1
 80022f0:	f000 fbac 	bl	8002a4c <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 80022f4:	bf00      	nop
 80022f6:	37f8      	adds	r7, #248	@ 0xf8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	42040000 	.word	0x42040000
 8002300:	46020c00 	.word	0x46020c00

08002304 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b0a4      	sub	sp, #144	@ 0x90
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4ab8      	ldr	r2, [pc, #736]	@ (80025f4 <HAL_SAI_MspInit+0x2f0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	f040 80b5 	bne.w	8002482 <HAL_SAI_MspInit+0x17e>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002318:	4bb7      	ldr	r3, [pc, #732]	@ (80025f8 <HAL_SAI_MspInit+0x2f4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10e      	bne.n	800233e <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002320:	4bb6      	ldr	r3, [pc, #728]	@ (80025fc <HAL_SAI_MspInit+0x2f8>)
 8002322:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002326:	4ab5      	ldr	r2, [pc, #724]	@ (80025fc <HAL_SAI_MspInit+0x2f8>)
 8002328:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800232c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002330:	4bb2      	ldr	r3, [pc, #712]	@ (80025fc <HAL_SAI_MspInit+0x2f8>)
 8002332:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 800233e:	4bae      	ldr	r3, [pc, #696]	@ (80025f8 <HAL_SAI_MspInit+0x2f4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	3301      	adds	r3, #1
 8002344:	4aac      	ldr	r2, [pc, #688]	@ (80025f8 <HAL_SAI_MspInit+0x2f4>)
 8002346:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002348:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800234c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234e:	2302      	movs	r3, #2
 8002350:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002360:	230d      	movs	r3, #13
 8002362:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002366:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800236a:	4619      	mov	r1, r3
 800236c:	48a4      	ldr	r0, [pc, #656]	@ (8002600 <HAL_SAI_MspInit+0x2fc>)
 800236e:	f004 ff5b 	bl	8007228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002372:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002376:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800238a:	230d      	movs	r3, #13
 800238c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002390:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002394:	4619      	mov	r1, r3
 8002396:	489b      	ldr	r0, [pc, #620]	@ (8002604 <HAL_SAI_MspInit+0x300>)
 8002398:	f004 ff46 	bl	8007228 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800239c:	2321      	movs	r3, #33	@ 0x21
 800239e:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 80023a0:	2326      	movs	r3, #38	@ 0x26
 80023a2:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023ac:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 80023ae:	2308      	movs	r3, #8
 80023b0:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 80023b2:	2300      	movs	r3, #0
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80023b6:	2302      	movs	r3, #2
 80023b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80023ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 80023c0:	2301      	movs	r3, #1
 80023c2:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 80023c4:	2301      	movs	r3, #1
 80023c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80023cc:	2300      	movs	r3, #0
 80023ce:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80023d4:	2300      	movs	r3, #0
 80023d6:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80023d8:	2300      	movs	r3, #0
 80023da:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80023dc:	2300      	movs	r3, #0
 80023de:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 80023e0:	f107 0310 	add.w	r3, r7, #16
 80023e4:	4988      	ldr	r1, [pc, #544]	@ (8002608 <HAL_SAI_MspInit+0x304>)
 80023e6:	4618      	mov	r0, r3
 80023e8:	f004 f832 	bl	8006450 <HAL_DMAEx_List_BuildNode>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_SAI_MspInit+0xf2>
    {
      Error_Handler();
 80023f2:	f7ff f8c1 	bl	8001578 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 80023f6:	4a84      	ldr	r2, [pc, #528]	@ (8002608 <HAL_SAI_MspInit+0x304>)
 80023f8:	2100      	movs	r1, #0
 80023fa:	4884      	ldr	r0, [pc, #528]	@ (800260c <HAL_SAI_MspInit+0x308>)
 80023fc:	f004 f854 	bl	80064a8 <HAL_DMAEx_List_InsertNode>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_SAI_MspInit+0x106>
    {
      Error_Handler();
 8002406:	f7ff f8b7 	bl	8001578 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 800240a:	4880      	ldr	r0, [pc, #512]	@ (800260c <HAL_SAI_MspInit+0x308>)
 800240c:	f004 f915 	bl	800663a <HAL_DMAEx_List_SetCircularMode>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_SAI_MspInit+0x116>
    {
      Error_Handler();
 8002416:	f7ff f8af 	bl	8001578 <Error_Handler>
    }

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 800241a:	4b7d      	ldr	r3, [pc, #500]	@ (8002610 <HAL_SAI_MspInit+0x30c>)
 800241c:	4a7d      	ldr	r2, [pc, #500]	@ (8002614 <HAL_SAI_MspInit+0x310>)
 800241e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8002420:	4b7b      	ldr	r3, [pc, #492]	@ (8002610 <HAL_SAI_MspInit+0x30c>)
 8002422:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002426:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002428:	4b79      	ldr	r3, [pc, #484]	@ (8002610 <HAL_SAI_MspInit+0x30c>)
 800242a:	2200      	movs	r2, #0
 800242c:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800242e:	4b78      	ldr	r3, [pc, #480]	@ (8002610 <HAL_SAI_MspInit+0x30c>)
 8002430:	2200      	movs	r2, #0
 8002432:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002434:	4b76      	ldr	r3, [pc, #472]	@ (8002610 <HAL_SAI_MspInit+0x30c>)
 8002436:	2200      	movs	r2, #0
 8002438:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800243a:	4b75      	ldr	r3, [pc, #468]	@ (8002610 <HAL_SAI_MspInit+0x30c>)
 800243c:	2281      	movs	r2, #129	@ 0x81
 800243e:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8002440:	4873      	ldr	r0, [pc, #460]	@ (8002610 <HAL_SAI_MspInit+0x30c>)
 8002442:	f003 fe45 	bl	80060d0 <HAL_DMAEx_List_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_SAI_MspInit+0x14c>
    {
      Error_Handler();
 800244c:	f7ff f894 	bl	8001578 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 8002450:	496e      	ldr	r1, [pc, #440]	@ (800260c <HAL_SAI_MspInit+0x308>)
 8002452:	486f      	ldr	r0, [pc, #444]	@ (8002610 <HAL_SAI_MspInit+0x30c>)
 8002454:	f004 f952 	bl	80066fc <HAL_DMAEx_List_LinkQ>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_SAI_MspInit+0x15e>
    {
      Error_Handler();
 800245e:	f7ff f88b 	bl	8001578 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmatx, handle_GPDMA1_Channel3);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a6a      	ldr	r2, [pc, #424]	@ (8002610 <HAL_SAI_MspInit+0x30c>)
 8002466:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800246a:	4a69      	ldr	r2, [pc, #420]	@ (8002610 <HAL_SAI_MspInit+0x30c>)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002470:	2110      	movs	r1, #16
 8002472:	4867      	ldr	r0, [pc, #412]	@ (8002610 <HAL_SAI_MspInit+0x30c>)
 8002474:	f003 fa3a 	bl	80058ec <HAL_DMA_ConfigChannelAttributes>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_SAI_MspInit+0x17e>
    {
      Error_Handler();
 800247e:	f7ff f87b 	bl	8001578 <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a64      	ldr	r2, [pc, #400]	@ (8002618 <HAL_SAI_MspInit+0x314>)
 8002488:	4293      	cmp	r3, r2
 800248a:	f040 80ec 	bne.w	8002666 <HAL_SAI_MspInit+0x362>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800248e:	4b5a      	ldr	r3, [pc, #360]	@ (80025f8 <HAL_SAI_MspInit+0x2f4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10e      	bne.n	80024b4 <HAL_SAI_MspInit+0x1b0>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002496:	4b59      	ldr	r3, [pc, #356]	@ (80025fc <HAL_SAI_MspInit+0x2f8>)
 8002498:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800249c:	4a57      	ldr	r2, [pc, #348]	@ (80025fc <HAL_SAI_MspInit+0x2f8>)
 800249e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024a2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80024a6:	4b55      	ldr	r3, [pc, #340]	@ (80025fc <HAL_SAI_MspInit+0x2f8>)
 80024a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80024ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 80024b4:	4b50      	ldr	r3, [pc, #320]	@ (80025f8 <HAL_SAI_MspInit+0x2f4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3301      	adds	r3, #1
 80024ba:	4a4f      	ldr	r2, [pc, #316]	@ (80025f8 <HAL_SAI_MspInit+0x2f4>)
 80024bc:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c4:	2302      	movs	r3, #2
 80024c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d0:	2303      	movs	r3, #3
 80024d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80024d6:	230d      	movs	r3, #13
 80024d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024dc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80024e0:	4619      	mov	r1, r3
 80024e2:	484e      	ldr	r0, [pc, #312]	@ (800261c <HAL_SAI_MspInit+0x318>)
 80024e4:	f004 fea0 	bl	8007228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024e8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80024ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fa:	2303      	movs	r3, #3
 80024fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002500:	230d      	movs	r3, #13
 8002502:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002506:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800250a:	4619      	mov	r1, r3
 800250c:	4844      	ldr	r0, [pc, #272]	@ (8002620 <HAL_SAI_MspInit+0x31c>)
 800250e:	f004 fe8b 	bl	8007228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002512:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002516:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002524:	2300      	movs	r3, #0
 8002526:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800252a:	230d      	movs	r3, #13
 800252c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002530:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002534:	4619      	mov	r1, r3
 8002536:	483a      	ldr	r0, [pc, #232]	@ (8002620 <HAL_SAI_MspInit+0x31c>)
 8002538:	f004 fe76 	bl	8007228 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800253c:	2321      	movs	r3, #33	@ 0x21
 800253e:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 8002540:	2327      	movs	r3, #39	@ 0x27
 8002542:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002544:	2300      	movs	r3, #0
 8002546:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800254c:	2300      	movs	r3, #0
 800254e:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002550:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002554:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002556:	2302      	movs	r3, #2
 8002558:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 800255a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800255e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 8002560:	2301      	movs	r3, #1
 8002562:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 8002564:	2301      	movs	r3, #1
 8002566:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002568:	2300      	movs	r3, #0
 800256a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800256c:	2300      	movs	r3, #0
 800256e:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002570:	2300      	movs	r3, #0
 8002572:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002574:	2300      	movs	r3, #0
 8002576:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002578:	2300      	movs	r3, #0
 800257a:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800257c:	2300      	movs	r3, #0
 800257e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8002580:	f107 0310 	add.w	r3, r7, #16
 8002584:	4927      	ldr	r1, [pc, #156]	@ (8002624 <HAL_SAI_MspInit+0x320>)
 8002586:	4618      	mov	r0, r3
 8002588:	f003 ff62 	bl	8006450 <HAL_DMAEx_List_BuildNode>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_SAI_MspInit+0x292>
    {
      Error_Handler();
 8002592:	f7fe fff1 	bl	8001578 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8002596:	4a23      	ldr	r2, [pc, #140]	@ (8002624 <HAL_SAI_MspInit+0x320>)
 8002598:	2100      	movs	r1, #0
 800259a:	4823      	ldr	r0, [pc, #140]	@ (8002628 <HAL_SAI_MspInit+0x324>)
 800259c:	f003 ff84 	bl	80064a8 <HAL_DMAEx_List_InsertNode>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_SAI_MspInit+0x2a6>
    {
      Error_Handler();
 80025a6:	f7fe ffe7 	bl	8001578 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 80025aa:	481f      	ldr	r0, [pc, #124]	@ (8002628 <HAL_SAI_MspInit+0x324>)
 80025ac:	f004 f845 	bl	800663a <HAL_DMAEx_List_SetCircularMode>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_SAI_MspInit+0x2b6>
    {
      Error_Handler();
 80025b6:	f7fe ffdf 	bl	8001578 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80025ba:	4b1c      	ldr	r3, [pc, #112]	@ (800262c <HAL_SAI_MspInit+0x328>)
 80025bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002630 <HAL_SAI_MspInit+0x32c>)
 80025be:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 80025c0:	4b1a      	ldr	r3, [pc, #104]	@ (800262c <HAL_SAI_MspInit+0x328>)
 80025c2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80025c6:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80025c8:	4b18      	ldr	r3, [pc, #96]	@ (800262c <HAL_SAI_MspInit+0x328>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80025ce:	4b17      	ldr	r3, [pc, #92]	@ (800262c <HAL_SAI_MspInit+0x328>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80025d4:	4b15      	ldr	r3, [pc, #84]	@ (800262c <HAL_SAI_MspInit+0x328>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80025da:	4b14      	ldr	r3, [pc, #80]	@ (800262c <HAL_SAI_MspInit+0x328>)
 80025dc:	2281      	movs	r2, #129	@ 0x81
 80025de:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80025e0:	4812      	ldr	r0, [pc, #72]	@ (800262c <HAL_SAI_MspInit+0x328>)
 80025e2:	f003 fd75 	bl	80060d0 <HAL_DMAEx_List_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d023      	beq.n	8002634 <HAL_SAI_MspInit+0x330>
    {
      Error_Handler();
 80025ec:	f7fe ffc4 	bl	8001578 <Error_Handler>
 80025f0:	e020      	b.n	8002634 <HAL_SAI_MspInit+0x330>
 80025f2:	bf00      	nop
 80025f4:	40015804 	.word	0x40015804
 80025f8:	20000e58 	.word	0x20000e58
 80025fc:	46020c00 	.word	0x46020c00
 8002600:	42020400 	.word	0x42020400
 8002604:	42021800 	.word	0x42021800
 8002608:	200005e4 	.word	0x200005e4
 800260c:	20000608 	.word	0x20000608
 8002610:	20000620 	.word	0x20000620
 8002614:	400201d0 	.word	0x400201d0
 8002618:	40015824 	.word	0x40015824
 800261c:	42020000 	.word	0x42020000
 8002620:	42020800 	.word	0x42020800
 8002624:	20000698 	.word	0x20000698
 8002628:	200006bc 	.word	0x200006bc
 800262c:	200006d4 	.word	0x200006d4
 8002630:	400200d0 	.word	0x400200d0
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8002634:	490e      	ldr	r1, [pc, #56]	@ (8002670 <HAL_SAI_MspInit+0x36c>)
 8002636:	480f      	ldr	r0, [pc, #60]	@ (8002674 <HAL_SAI_MspInit+0x370>)
 8002638:	f004 f860 	bl	80066fc <HAL_DMAEx_List_LinkQ>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_SAI_MspInit+0x342>
    {
      Error_Handler();
 8002642:	f7fe ff99 	bl	8001578 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a0a      	ldr	r2, [pc, #40]	@ (8002674 <HAL_SAI_MspInit+0x370>)
 800264a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800264e:	4a09      	ldr	r2, [pc, #36]	@ (8002674 <HAL_SAI_MspInit+0x370>)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002654:	2110      	movs	r1, #16
 8002656:	4807      	ldr	r0, [pc, #28]	@ (8002674 <HAL_SAI_MspInit+0x370>)
 8002658:	f003 f948 	bl	80058ec <HAL_DMA_ConfigChannelAttributes>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_SAI_MspInit+0x362>
    {
      Error_Handler();
 8002662:	f7fe ff89 	bl	8001578 <Error_Handler>
    }

    }
}
 8002666:	bf00      	nop
 8002668:	3790      	adds	r7, #144	@ 0x90
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	200006bc 	.word	0x200006bc
 8002674:	200006d4 	.word	0x200006d4

08002678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800267c:	bf00      	nop
 800267e:	e7fd      	b.n	800267c <NMI_Handler+0x4>

08002680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002684:	bf00      	nop
 8002686:	e7fd      	b.n	8002684 <HardFault_Handler+0x4>

08002688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800268c:	bf00      	nop
 800268e:	e7fd      	b.n	800268c <MemManage_Handler+0x4>

08002690 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <BusFault_Handler+0x4>

08002698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800269c:	bf00      	nop
 800269e:	e7fd      	b.n	800269c <UsageFault_Handler+0x4>

080026a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ce:	f000 f979 	bl	80029c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 80026da:	2002      	movs	r0, #2
 80026dc:	f004 ff94 	bl	8007608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 80026e8:	2010      	movs	r0, #16
 80026ea:	f004 ff8d 	bl	8007608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 80026f6:	2020      	movs	r0, #32
 80026f8:	f004 ff86 	bl	8007608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}

08002700 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8002704:	4802      	ldr	r0, [pc, #8]	@ (8002710 <GPDMA1_Channel0_IRQHandler+0x10>)
 8002706:	f002 ff82 	bl	800560e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	2000017c 	.word	0x2000017c

08002714 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8002718:	4802      	ldr	r0, [pc, #8]	@ (8002724 <GPDMA1_Channel1_IRQHandler+0x10>)
 800271a:	f002 ff78 	bl	800560e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200006d4 	.word	0x200006d4

08002728 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 800272c:	4802      	ldr	r0, [pc, #8]	@ (8002738 <GPDMA1_Channel2_IRQHandler+0x10>)
 800272e:	f002 ff6e 	bl	800560e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	200001f4 	.word	0x200001f4

0800273c <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8002740:	4802      	ldr	r0, [pc, #8]	@ (800274c <GPDMA1_Channel3_IRQHandler+0x10>)
 8002742:	f002 ff64 	bl	800560e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000620 	.word	0x20000620

08002750 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002754:	4802      	ldr	r0, [pc, #8]	@ (8002760 <ADC1_2_IRQHandler+0x10>)
 8002756:	f001 f925 	bl	80039a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000028 	.word	0x20000028

08002764 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002768:	4802      	ldr	r0, [pc, #8]	@ (8002774 <I2C2_EV_IRQHandler+0x10>)
 800276a:	f005 f824 	bl	80077b6 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000388 	.word	0x20000388

08002778 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800277c:	4802      	ldr	r0, [pc, #8]	@ (8002788 <I2C2_ER_IRQHandler+0x10>)
 800277e:	f005 f834 	bl	80077ea <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000388 	.word	0x20000388

0800278c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002790:	4802      	ldr	r0, [pc, #8]	@ (800279c <USART1_IRQHandler+0x10>)
 8002792:	f00c fd35 	bl	800f200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000798 	.word	0x20000798

080027a0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80027a4:	4802      	ldr	r0, [pc, #8]	@ (80027b0 <LTDC_IRQHandler+0x10>)
 80027a6:	f005 ffad 	bl	8008704 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200003dc 	.word	0x200003dc

080027b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80027b8:	4b18      	ldr	r3, [pc, #96]	@ (800281c <SystemInit+0x68>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027be:	4a17      	ldr	r2, [pc, #92]	@ (800281c <SystemInit+0x68>)
 80027c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80027c8:	4b15      	ldr	r3, [pc, #84]	@ (8002820 <SystemInit+0x6c>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80027ce:	4b14      	ldr	r3, [pc, #80]	@ (8002820 <SystemInit+0x6c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80027d4:	4b12      	ldr	r3, [pc, #72]	@ (8002820 <SystemInit+0x6c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80027da:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <SystemInit+0x6c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80027e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002820 <SystemInit+0x6c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002820 <SystemInit+0x6c>)
 80027e6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80027ea:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80027ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80027f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002820 <SystemInit+0x6c>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80027f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <SystemInit+0x6c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a09      	ldr	r2, [pc, #36]	@ (8002820 <SystemInit+0x6c>)
 80027fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002800:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002802:	4b07      	ldr	r3, [pc, #28]	@ (8002820 <SystemInit+0x6c>)
 8002804:	2200      	movs	r2, #0
 8002806:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002808:	4b04      	ldr	r3, [pc, #16]	@ (800281c <SystemInit+0x68>)
 800280a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800280e:	609a      	str	r2, [r3, #8]
  #endif
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	e000ed00 	.word	0xe000ed00
 8002820:	46020c00 	.word	0x46020c00

08002824 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002824:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800285c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002828:	f7ff ffc4 	bl	80027b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800282c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800282e:	e003      	b.n	8002838 <LoopCopyDataInit>

08002830 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002830:	4b0b      	ldr	r3, [pc, #44]	@ (8002860 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002832:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002834:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002836:	3104      	adds	r1, #4

08002838 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002838:	480a      	ldr	r0, [pc, #40]	@ (8002864 <LoopForever+0xa>)
	ldr	r3, =_edata
 800283a:	4b0b      	ldr	r3, [pc, #44]	@ (8002868 <LoopForever+0xe>)
	adds	r2, r0, r1
 800283c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800283e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002840:	d3f6      	bcc.n	8002830 <CopyDataInit>
	ldr	r2, =_sbss
 8002842:	4a0a      	ldr	r2, [pc, #40]	@ (800286c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002844:	e002      	b.n	800284c <LoopFillZerobss>

08002846 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002846:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002848:	f842 3b04 	str.w	r3, [r2], #4

0800284c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800284c:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <LoopForever+0x16>)
	cmp	r2, r3
 800284e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002850:	d3f9      	bcc.n	8002846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002852:	f00e f997 	bl	8010b84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002856:	f7fd feb9 	bl	80005cc <main>

0800285a <LoopForever>:

LoopForever:
    b LoopForever
 800285a:	e7fe      	b.n	800285a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800285c:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 8002860:	08010cf4 	.word	0x08010cf4
	ldr	r0, =_sdata
 8002864:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002868:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800286c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002870:	20000e60 	.word	0x20000e60

08002874 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002874:	e7fe      	b.n	8002874 <ADC4_IRQHandler>
	...

08002878 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800287c:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <HAL_Init+0x50>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a11      	ldr	r2, [pc, #68]	@ (80028c8 <HAL_Init+0x50>)
 8002882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002888:	2003      	movs	r0, #3
 800288a:	f002 fba8 	bl	8004fde <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800288e:	f007 fce5 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 8002892:	4602      	mov	r2, r0
 8002894:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <HAL_Init+0x54>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	490c      	ldr	r1, [pc, #48]	@ (80028d0 <HAL_Init+0x58>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
 80028a4:	4a0b      	ldr	r2, [pc, #44]	@ (80028d4 <HAL_Init+0x5c>)
 80028a6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80028a8:	2004      	movs	r0, #4
 80028aa:	f002 fbed 	bl	8005088 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028ae:	200f      	movs	r0, #15
 80028b0:	f000 f812 	bl	80028d8 <HAL_InitTick>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e002      	b.n	80028c4 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028be:	f7fe fe61 	bl	8001584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40022000 	.word	0x40022000
 80028cc:	46020c00 	.word	0x46020c00
 80028d0:	08010be4 	.word	0x08010be4
 80028d4:	20000000 	.word	0x20000000

080028d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80028e4:	4b33      	ldr	r3, [pc, #204]	@ (80029b4 <HAL_InitTick+0xdc>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e05c      	b.n	80029aa <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80028f0:	4b31      	ldr	r3, [pc, #196]	@ (80029b8 <HAL_InitTick+0xe0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d10c      	bne.n	8002916 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80028fc:	4b2f      	ldr	r3, [pc, #188]	@ (80029bc <HAL_InitTick+0xe4>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b2c      	ldr	r3, [pc, #176]	@ (80029b4 <HAL_InitTick+0xdc>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	4619      	mov	r1, r3
 8002906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800290a:	fbb3 f3f1 	udiv	r3, r3, r1
 800290e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	e037      	b.n	8002986 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002916:	f002 fc0f 	bl	8005138 <HAL_SYSTICK_GetCLKSourceConfig>
 800291a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d023      	beq.n	800296a <HAL_InitTick+0x92>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d82d      	bhi.n	8002984 <HAL_InitTick+0xac>
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_InitTick+0x5e>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d00d      	beq.n	8002950 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002934:	e026      	b.n	8002984 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002936:	4b21      	ldr	r3, [pc, #132]	@ (80029bc <HAL_InitTick+0xe4>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	4b1e      	ldr	r3, [pc, #120]	@ (80029b4 <HAL_InitTick+0xdc>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	4619      	mov	r1, r3
 8002940:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002944:	fbb3 f3f1 	udiv	r3, r3, r1
 8002948:	fbb2 f3f3 	udiv	r3, r2, r3
 800294c:	60fb      	str	r3, [r7, #12]
        break;
 800294e:	e01a      	b.n	8002986 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002950:	4b18      	ldr	r3, [pc, #96]	@ (80029b4 <HAL_InitTick+0xdc>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800295a:	fbb3 f3f2 	udiv	r3, r3, r2
 800295e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002962:	fbb2 f3f3 	udiv	r3, r2, r3
 8002966:	60fb      	str	r3, [r7, #12]
        break;
 8002968:	e00d      	b.n	8002986 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800296a:	4b12      	ldr	r3, [pc, #72]	@ (80029b4 <HAL_InitTick+0xdc>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002974:	fbb3 f3f2 	udiv	r3, r3, r2
 8002978:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800297c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002980:	60fb      	str	r3, [r7, #12]
        break;
 8002982:	e000      	b.n	8002986 <HAL_InitTick+0xae>
        break;
 8002984:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f002 fb5c 	bl	8005044 <HAL_SYSTICK_Config>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e009      	b.n	80029aa <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002996:	2200      	movs	r2, #0
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	f04f 30ff 	mov.w	r0, #4294967295
 800299e:	f002 fb29 	bl	8004ff4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80029a2:	4a07      	ldr	r2, [pc, #28]	@ (80029c0 <HAL_InitTick+0xe8>)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000008 	.word	0x20000008
 80029b8:	e000e010 	.word	0xe000e010
 80029bc:	20000000 	.word	0x20000000
 80029c0:	20000004 	.word	0x20000004

080029c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029c8:	4b06      	ldr	r3, [pc, #24]	@ (80029e4 <HAL_IncTick+0x20>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <HAL_IncTick+0x24>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4413      	add	r3, r2
 80029d4:	4a04      	ldr	r2, [pc, #16]	@ (80029e8 <HAL_IncTick+0x24>)
 80029d6:	6013      	str	r3, [r2, #0]
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000008 	.word	0x20000008
 80029e8:	20000e5c 	.word	0x20000e5c

080029ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return uwTick;
 80029f0:	4b03      	ldr	r3, [pc, #12]	@ (8002a00 <HAL_GetTick+0x14>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000e5c 	.word	0x20000e5c

08002a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a0c:	f7ff ffee 	bl	80029ec <HAL_GetTick>
 8002a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d005      	beq.n	8002a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a48 <HAL_Delay+0x44>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4413      	add	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a2a:	bf00      	nop
 8002a2c:	f7ff ffde 	bl	80029ec <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d8f7      	bhi.n	8002a2c <HAL_Delay+0x28>
  {
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000008 	.word	0x20000008

08002a4c <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8002a54:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a58:	f023 0201 	bic.w	r2, r3, #1
 8002a5c:	4904      	ldr	r1, [pc, #16]	@ (8002a70 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	46000400 	.word	0x46000400

08002a74 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8002a7c:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a80:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8002a84:	4904      	ldr	r1, [pc, #16]	@ (8002a98 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	46000400 	.word	0x46000400

08002a9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	609a      	str	r2, [r3, #8]
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a0a      	ldr	r2, [pc, #40]	@ (8002b40 <LL_ADC_SetResolution+0x3c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d104      	bne.n	8002b24 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f023 020c 	bic.w	r2, r3, #12
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	60da      	str	r2, [r3, #12]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	46021000 	.word	0x46021000

08002b44 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3360      	adds	r3, #96	@ 0x60
 8002b56:	461a      	mov	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	430b      	orrs	r3, r1
 8002b74:	431a      	orrs	r2, r3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002b7a:	bf00      	nop
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b085      	sub	sp, #20
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3360      	adds	r3, #96	@ 0x60
 8002b94:	461a      	mov	r2, r3
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b087      	sub	sp, #28
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3360      	adds	r3, #96	@ 0x60
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	601a      	str	r2, [r3, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	3360      	adds	r3, #96	@ 0x60
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	601a      	str	r2, [r3, #0]
}
 8002c12:	bf00      	nop
 8002c14:	371c      	adds	r7, #28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b087      	sub	sp, #28
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3360      	adds	r3, #96	@ 0x60
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	601a      	str	r2, [r3, #0]
}
 8002c48:	bf00      	nop
 8002c4a:	371c      	adds	r7, #28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c62:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c66:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	2a00      	cmp	r2, #0
 8002c7e:	d002      	beq.n	8002c86 <LL_ADC_SetGainCompensation+0x32>
 8002c80:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002c84:	e000      	b.n	8002c88 <LL_ADC_SetGainCompensation+0x34>
 8002c86:	2200      	movs	r2, #0
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b085      	sub	sp, #20
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2107      	movs	r1, #7
 8002cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	401a      	ands	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002ccc:	bf00      	nop
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b089      	sub	sp, #36	@ 0x24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4a2b      	ldr	r2, [pc, #172]	@ (8002dbc <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d020      	beq.n	8002d56 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3330      	adds	r3, #48	@ 0x30
 8002d18:	461a      	mov	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	0a1b      	lsrs	r3, r3, #8
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	f003 030c 	and.w	r3, r3, #12
 8002d24:	4413      	add	r3, r2
 8002d26:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f003 031f 	and.w	r3, r3, #31
 8002d32:	211f      	movs	r1, #31
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	0e9b      	lsrs	r3, r3, #26
 8002d40:	f003 011f 	and.w	r1, r3, #31
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f003 031f 	and.w	r3, r3, #31
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002d54:	e02b      	b.n	8002dae <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	210f      	movs	r1, #15
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	401a      	ands	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d104      	bne.n	8002d7e <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	0e9b      	lsrs	r3, r3, #26
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	e010      	b.n	8002da0 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	613b      	str	r3, [r7, #16]
  return result;
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8002d94:	2320      	movs	r3, #32
 8002d96:	e003      	b.n	8002da0 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	f001 011f 	and.w	r1, r1, #31
 8002da6:	408b      	lsls	r3, r1
 8002da8:	431a      	orrs	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002dae:	bf00      	nop
 8002db0:	3724      	adds	r7, #36	@ 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	46021000 	.word	0x46021000

08002dc0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d107      	bne.n	8002de4 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	0e9b      	lsrs	r3, r3, #26
 8002dd8:	f003 031f 	and.w	r3, r3, #31
 8002ddc:	2201      	movs	r2, #1
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	e015      	b.n	8002e10 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	60fb      	str	r3, [r7, #12]
  return result;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8002dfa:	2320      	movs	r3, #32
 8002dfc:	e003      	b.n	8002e06 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	fab3 f383 	clz	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e1a:	bf00      	nop
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	0e9b      	lsrs	r3, r3, #26
 8002e38:	f003 031f 	and.w	r3, r3, #31
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	401a      	ands	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f003 0303 	and.w	r3, r3, #3
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e7e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b08b      	sub	sp, #44	@ 0x2c
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4a2d      	ldr	r2, [pc, #180]	@ (8002f5c <LL_ADC_SetChannelSamplingTime+0xc4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d042      	beq.n	8002f32 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d104      	bne.n	8002ec0 <LL_ADC_SetChannelSamplingTime+0x28>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	0e9b      	lsrs	r3, r3, #26
 8002eba:	f003 021f 	and.w	r2, r3, #31
 8002ebe:	e011      	b.n	8002ee4 <LL_ADC_SetChannelSamplingTime+0x4c>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	fa93 f3a3 	rbit	r3, r3
 8002eca:	617b      	str	r3, [r7, #20]
  return result;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8002ed6:	2320      	movs	r3, #32
 8002ed8:	e003      	b.n	8002ee2 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	fab3 f383 	clz	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	0e5b      	lsrs	r3, r3, #25
 8002ee8:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002eec:	460b      	mov	r3, r1
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	1ad2      	subs	r2, r2, r3
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4413      	add	r3, r2
 8002efc:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	3314      	adds	r3, #20
 8002f02:	461a      	mov	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	0e5b      	lsrs	r3, r3, #25
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	4413      	add	r3, r2
 8002f10:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	2107      	movs	r1, #7
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	401a      	ands	r2, r3
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8002f30:	e00e      	b.n	8002f50 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	021b      	lsls	r3, r3, #8
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	401a      	ands	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	0219      	lsls	r1, r3, #8
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	400b      	ands	r3, r1
 8002f46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	615a      	str	r2, [r3, #20]
}
 8002f50:	bf00      	nop
 8002f52:	372c      	adds	r7, #44	@ 0x2c
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	46021000 	.word	0x46021000

08002f60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0318 	and.w	r3, r3, #24
 8002f82:	4908      	ldr	r1, [pc, #32]	@ (8002fa4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f84:	40d9      	lsrs	r1, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	400b      	ands	r3, r1
 8002f8a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	000fffff 	.word	0x000fffff

08002fa8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 031f 	and.w	r3, r3, #31
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002ff0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6093      	str	r3, [r2, #8]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003018:	d101      	bne.n	800301e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800303c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003040:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	609a      	str	r2, [r3, #8]
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003064:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003068:	d101      	bne.n	800306e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800308c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003090:	f043 0201 	orr.w	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	609a      	str	r2, [r3, #8]
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <LL_ADC_IsEnabled+0x18>
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <LL_ADC_IsEnabled+0x1a>
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030da:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030de:	f043 0204 	orr.w	r2, r3, #4
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	609a      	str	r2, [r3, #8]
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b04      	cmp	r3, #4
 8003104:	d101      	bne.n	800310a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b08      	cmp	r3, #8
 800312a:	d101      	bne.n	8003130 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b08b      	sub	sp, #44	@ 0x2c
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 800314e:	2300      	movs	r3, #0
 8003150:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e2ce      	b.n	80036fe <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a95      	ldr	r2, [pc, #596]	@ (80033c4 <HAL_ADC_Init+0x284>)
 800316e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7fe fa1d 	bl	80015b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff ff37 	bl	8003004 <LL_ADC_IsDeepPowerDownEnabled>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d004      	beq.n	80031a6 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff ff1d 	bl	8002fe0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff ff52 	bl	8003054 <LL_ADC_IsInternalRegulatorEnabled>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d115      	bne.n	80031e2 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff ff36 	bl	800302c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031c0:	4b81      	ldr	r3, [pc, #516]	@ (80033c8 <HAL_ADC_Init+0x288>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	099b      	lsrs	r3, r3, #6
 80031c6:	4a81      	ldr	r2, [pc, #516]	@ (80033cc <HAL_ADC_Init+0x28c>)
 80031c8:	fba2 2303 	umull	r2, r3, r2, r3
 80031cc:	099b      	lsrs	r3, r3, #6
 80031ce:	3301      	adds	r3, #1
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80031d4:	e002      	b.n	80031dc <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	3b01      	subs	r3, #1
 80031da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f9      	bne.n	80031d6 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff ff34 	bl	8003054 <LL_ADC_IsInternalRegulatorEnabled>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10e      	bne.n	8003210 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031f6:	f043 0210 	orr.w	r2, r3, #16
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003202:	f043 0201 	orr.w	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff6c 	bl	80030f2 <LL_ADC_REG_IsConversionOngoing>
 800321a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	2b00      	cmp	r3, #0
 8003226:	f040 825f 	bne.w	80036e8 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2b00      	cmp	r3, #0
 800322e:	f040 825b 	bne.w	80036e8 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003236:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800323a:	f043 0202 	orr.w	r2, r3, #2
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff ff2c 	bl	80030a4 <LL_ADC_IsEnabled>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d14f      	bne.n	80032f2 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a5b      	ldr	r2, [pc, #364]	@ (80033c4 <HAL_ADC_Init+0x284>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d037      	beq.n	80032cc <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a5b      	ldr	r2, [pc, #364]	@ (80033d0 <HAL_ADC_Init+0x290>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d004      	beq.n	8003270 <HAL_ADC_Init+0x130>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a5a      	ldr	r2, [pc, #360]	@ (80033d4 <HAL_ADC_Init+0x294>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d10e      	bne.n	800328e <HAL_ADC_Init+0x14e>
 8003270:	4857      	ldr	r0, [pc, #348]	@ (80033d0 <HAL_ADC_Init+0x290>)
 8003272:	f7ff ff17 	bl	80030a4 <LL_ADC_IsEnabled>
 8003276:	4604      	mov	r4, r0
 8003278:	4856      	ldr	r0, [pc, #344]	@ (80033d4 <HAL_ADC_Init+0x294>)
 800327a:	f7ff ff13 	bl	80030a4 <LL_ADC_IsEnabled>
 800327e:	4603      	mov	r3, r0
 8003280:	4323      	orrs	r3, r4
 8003282:	2b00      	cmp	r3, #0
 8003284:	bf0c      	ite	eq
 8003286:	2301      	moveq	r3, #1
 8003288:	2300      	movne	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	e008      	b.n	80032a0 <HAL_ADC_Init+0x160>
 800328e:	484d      	ldr	r0, [pc, #308]	@ (80033c4 <HAL_ADC_Init+0x284>)
 8003290:	f7ff ff08 	bl	80030a4 <LL_ADC_IsEnabled>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	bf0c      	ite	eq
 800329a:	2301      	moveq	r3, #1
 800329c:	2300      	movne	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d026      	beq.n	80032f2 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a49      	ldr	r2, [pc, #292]	@ (80033d0 <HAL_ADC_Init+0x290>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d004      	beq.n	80032b8 <HAL_ADC_Init+0x178>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a48      	ldr	r2, [pc, #288]	@ (80033d4 <HAL_ADC_Init+0x294>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d101      	bne.n	80032bc <HAL_ADC_Init+0x17c>
 80032b8:	4a47      	ldr	r2, [pc, #284]	@ (80033d8 <HAL_ADC_Init+0x298>)
 80032ba:	e000      	b.n	80032be <HAL_ADC_Init+0x17e>
 80032bc:	4a47      	ldr	r2, [pc, #284]	@ (80033dc <HAL_ADC_Init+0x29c>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4619      	mov	r1, r3
 80032c4:	4610      	mov	r0, r2
 80032c6:	f7ff fbe9 	bl	8002a9c <LL_ADC_SetCommonClock>
 80032ca:	e012      	b.n	80032f2 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f7ff fc14 	bl	8002b04 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80032dc:	4b3f      	ldr	r3, [pc, #252]	@ (80033dc <HAL_ADC_Init+0x29c>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80032ec:	493b      	ldr	r1, [pc, #236]	@ (80033dc <HAL_ADC_Init+0x29c>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a33      	ldr	r2, [pc, #204]	@ (80033c4 <HAL_ADC_Init+0x284>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d010      	beq.n	800331e <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003302:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003308:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800330e:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003316:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003318:	4313      	orrs	r3, r2
 800331a:	623b      	str	r3, [r7, #32]
 800331c:	e035      	b.n	800338a <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	7f1b      	ldrb	r3, [r3, #28]
 8003322:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800332a:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800332c:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003332:	2a00      	cmp	r2, #0
 8003334:	d002      	beq.n	800333c <HAL_ADC_Init+0x1fc>
 8003336:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800333a:	e000      	b.n	800333e <HAL_ADC_Init+0x1fe>
 800333c:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800333e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003344:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	2b00      	cmp	r3, #0
 800334c:	da04      	bge.n	8003358 <HAL_ADC_Init+0x218>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003356:	e001      	b.n	800335c <HAL_ADC_Init+0x21c>
 8003358:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 800335c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	491b      	ldr	r1, [pc, #108]	@ (80033d0 <HAL_ADC_Init+0x290>)
 8003364:	428b      	cmp	r3, r1
 8003366:	d004      	beq.n	8003372 <HAL_ADC_Init+0x232>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4919      	ldr	r1, [pc, #100]	@ (80033d4 <HAL_ADC_Init+0x294>)
 800336e:	428b      	cmp	r3, r1
 8003370:	d103      	bne.n	800337a <HAL_ADC_Init+0x23a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003378:	e003      	b.n	8003382 <HAL_ADC_Init+0x242>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003380:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003382:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003384:	6a3a      	ldr	r2, [r7, #32]
 8003386:	4313      	orrs	r3, r2
 8003388:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003390:	2b01      	cmp	r3, #1
 8003392:	d131      	bne.n	80033f8 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0a      	ldr	r2, [pc, #40]	@ (80033c4 <HAL_ADC_Init+0x284>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d007      	beq.n	80033ae <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a2:	3b01      	subs	r3, #1
 80033a4:	045b      	lsls	r3, r3, #17
 80033a6:	6a3a      	ldr	r2, [r7, #32]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	623b      	str	r3, [r7, #32]
 80033ac:	e024      	b.n	80033f8 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d113      	bne.n	80033e0 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033be:	623b      	str	r3, [r7, #32]
 80033c0:	e01a      	b.n	80033f8 <HAL_ADC_Init+0x2b8>
 80033c2:	bf00      	nop
 80033c4:	46021000 	.word	0x46021000
 80033c8:	20000000 	.word	0x20000000
 80033cc:	053e2d63 	.word	0x053e2d63
 80033d0:	42028000 	.word	0x42028000
 80033d4:	42028100 	.word	0x42028100
 80033d8:	42028300 	.word	0x42028300
 80033dc:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033e4:	f043 0220 	orr.w	r2, r3, #32
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033f0:	f043 0201 	orr.w	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a75      	ldr	r2, [pc, #468]	@ (80035d4 <HAL_ADC_Init+0x494>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d018      	beq.n	8003434 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800340e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003416:	4313      	orrs	r3, r2
 8003418:	6a3a      	ldr	r2, [r7, #32]
 800341a:	4313      	orrs	r3, r2
 800341c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	4b6c      	ldr	r3, [pc, #432]	@ (80035d8 <HAL_ADC_Init+0x498>)
 8003426:	4013      	ands	r3, r2
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6812      	ldr	r2, [r2, #0]
 800342c:	6a39      	ldr	r1, [r7, #32]
 800342e:	430b      	orrs	r3, r1
 8003430:	60d3      	str	r3, [r2, #12]
 8003432:	e031      	b.n	8003498 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003438:	2b00      	cmp	r3, #0
 800343a:	d009      	beq.n	8003450 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003440:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003448:	4313      	orrs	r3, r2
 800344a:	6a3a      	ldr	r2, [r7, #32]
 800344c:	4313      	orrs	r3, r2
 800344e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	4b61      	ldr	r3, [pc, #388]	@ (80035dc <HAL_ADC_Init+0x49c>)
 8003458:	4013      	ands	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6812      	ldr	r2, [r2, #0]
 800345e:	6a39      	ldr	r1, [r7, #32]
 8003460:	430b      	orrs	r3, r1
 8003462:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1a      	ldr	r2, [r3, #32]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a4d      	ldr	r2, [pc, #308]	@ (80035d4 <HAL_ADC_Init+0x494>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	f000 80a4 	beq.w	80035ec <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff fe22 	bl	80030f2 <LL_ADC_REG_IsConversionOngoing>
 80034ae:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fe2f 	bl	8003118 <LL_ADC_INJ_IsConversionOngoing>
 80034ba:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d166      	bne.n	8003590 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d163      	bne.n	8003590 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	7f1b      	ldrb	r3, [r3, #28]
 80034cc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4943      	ldr	r1, [pc, #268]	@ (80035e0 <HAL_ADC_Init+0x4a0>)
 80034d4:	428b      	cmp	r3, r1
 80034d6:	d004      	beq.n	80034e2 <HAL_ADC_Init+0x3a2>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4941      	ldr	r1, [pc, #260]	@ (80035e4 <HAL_ADC_Init+0x4a4>)
 80034de:	428b      	cmp	r3, r1
 80034e0:	d102      	bne.n	80034e8 <HAL_ADC_Init+0x3a8>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e6:	e002      	b.n	80034ee <HAL_ADC_Init+0x3ae>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ec:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034ee:	4313      	orrs	r3, r2
 80034f0:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034fc:	f023 0303 	bic.w	r3, r3, #3
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	6a39      	ldr	r1, [r7, #32]
 8003506:	430b      	orrs	r3, r1
 8003508:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	4619      	mov	r1, r3
 800351c:	4610      	mov	r0, r2
 800351e:	f7ff fb99 	bl	8002c54 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003528:	2b01      	cmp	r3, #1
 800352a:	d11e      	bne.n	800356a <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003530:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	4b2b      	ldr	r3, [pc, #172]	@ (80035e8 <HAL_ADC_Init+0x4a8>)
 800353a:	4013      	ands	r3, r2
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003540:	0411      	lsls	r1, r2, #16
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003546:	4311      	orrs	r1, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800354c:	4311      	orrs	r1, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003552:	4311      	orrs	r1, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003558:	0892      	lsrs	r2, r2, #2
 800355a:	430a      	orrs	r2, r1
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	611a      	str	r2, [r3, #16]
 8003568:	e007      	b.n	800357a <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0201 	bic.w	r2, r2, #1
 8003578:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d10c      	bne.n	80035b2 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359e:	f023 010f 	bic.w	r1, r3, #15
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a6:	1e5a      	subs	r2, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80035b0:	e007      	b.n	80035c2 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 020f 	bic.w	r2, r2, #15
 80035c0:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035c6:	f023 0303 	bic.w	r3, r3, #3
 80035ca:	f043 0201 	orr.w	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80035d2:	e092      	b.n	80036fa <HAL_ADC_Init+0x5ba>
 80035d4:	46021000 	.word	0x46021000
 80035d8:	fff0c013 	.word	0xfff0c013
 80035dc:	ffde800d 	.word	0xffde800d
 80035e0:	42028000 	.word	0x42028000
 80035e4:	42028100 	.word	0x42028100
 80035e8:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d111      	bne.n	800361a <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80035fe:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8003604:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800360a:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	4313      	orrs	r3, r2
 8003610:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	4b39      	ldr	r3, [pc, #228]	@ (8003708 <HAL_ADC_Init+0x5c8>)
 8003622:	4013      	ands	r3, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	69f9      	ldr	r1, [r7, #28]
 800362a:	430b      	orrs	r3, r1
 800362c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003636:	461a      	mov	r2, r3
 8003638:	2100      	movs	r1, #0
 800363a:	f7ff fb2e 	bl	8002c9a <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003646:	461a      	mov	r2, r3
 8003648:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 800364c:	f7ff fb25 	bl	8002c9a <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d108      	bne.n	800366a <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f062 020f 	orn	r2, r2, #15
 8003666:	629a      	str	r2, [r3, #40]	@ 0x28
 8003668:	e018      	b.n	800369c <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003672:	d113      	bne.n	800369c <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367e:	3b01      	subs	r3, #1
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	f003 031c 	and.w	r3, r3, #28
 8003686:	f06f 020f 	mvn.w	r2, #15
 800368a:	fa02 f103 	lsl.w	r1, r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	4b1a      	ldr	r3, [pc, #104]	@ (800370c <HAL_ADC_Init+0x5cc>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	6a3a      	ldr	r2, [r7, #32]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d10b      	bne.n	80036c4 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036b6:	f023 0303 	bic.w	r3, r3, #3
 80036ba:	f043 0201 	orr.w	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80036c2:	e01a      	b.n	80036fa <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036c8:	f023 0312 	bic.w	r3, r3, #18
 80036cc:	f043 0210 	orr.w	r2, r3, #16
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036d8:	f043 0201 	orr.w	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80036e6:	e008      	b.n	80036fa <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036ec:	f043 0210 	orr.w	r2, r3, #16
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 80036fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80036fe:	4618      	mov	r0, r3
 8003700:	372c      	adds	r7, #44	@ 0x2c
 8003702:	46bd      	mov	sp, r7
 8003704:	bd90      	pop	{r4, r7, pc}
 8003706:	bf00      	nop
 8003708:	f7fffc02 	.word	0xf7fffc02
 800370c:	833ffff3 	.word	0x833ffff3

08003710 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b0a2      	sub	sp, #136	@ 0x88
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a98      	ldr	r2, [pc, #608]	@ (8003984 <HAL_ADC_Start_DMA+0x274>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d004      	beq.n	8003730 <HAL_ADC_Start_DMA+0x20>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a97      	ldr	r2, [pc, #604]	@ (8003988 <HAL_ADC_Start_DMA+0x278>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d101      	bne.n	8003734 <HAL_ADC_Start_DMA+0x24>
 8003730:	4b96      	ldr	r3, [pc, #600]	@ (800398c <HAL_ADC_Start_DMA+0x27c>)
 8003732:	e000      	b.n	8003736 <HAL_ADC_Start_DMA+0x26>
 8003734:	4b96      	ldr	r3, [pc, #600]	@ (8003990 <HAL_ADC_Start_DMA+0x280>)
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff fc36 	bl	8002fa8 <LL_ADC_GetMultimode>
 800373c:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff fcd5 	bl	80030f2 <LL_ADC_REG_IsConversionOngoing>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	f040 8111 	bne.w	8003972 <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_ADC_Start_DMA+0x4e>
 800375a:	2302      	movs	r3, #2
 800375c:	e10e      	b.n	800397c <HAL_ADC_Start_DMA+0x26c>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003766:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003768:	2b00      	cmp	r3, #0
 800376a:	d006      	beq.n	800377a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800376c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800376e:	2b05      	cmp	r3, #5
 8003770:	d003      	beq.n	800377a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003772:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003774:	2b09      	cmp	r3, #9
 8003776:	f040 80f4 	bne.w	8003962 <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f001 fa2c 	bl	8004bd8 <ADC_Enable>
 8003780:	4603      	mov	r3, r0
 8003782:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003786:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800378a:	2b00      	cmp	r3, #0
 800378c:	f040 80e4 	bne.w	8003958 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003794:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a7a      	ldr	r2, [pc, #488]	@ (8003994 <HAL_ADC_Start_DMA+0x284>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d026      	beq.n	80037fc <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a75      	ldr	r2, [pc, #468]	@ (8003988 <HAL_ADC_Start_DMA+0x278>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d002      	beq.n	80037be <HAL_ADC_Start_DMA+0xae>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	e000      	b.n	80037c0 <HAL_ADC_Start_DMA+0xb0>
 80037be:	4b71      	ldr	r3, [pc, #452]	@ (8003984 <HAL_ADC_Start_DMA+0x274>)
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d002      	beq.n	80037ce <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d105      	bne.n	80037da <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037d2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d006      	beq.n	80037f4 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037ea:	f023 0206 	bic.w	r2, r3, #6
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80037f2:	e006      	b.n	8003802 <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80037fa:	e002      	b.n	8003802 <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003806:	4a64      	ldr	r2, [pc, #400]	@ (8003998 <HAL_ADC_Start_DMA+0x288>)
 8003808:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380e:	4a63      	ldr	r2, [pc, #396]	@ (800399c <HAL_ADC_Start_DMA+0x28c>)
 8003810:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003816:	4a62      	ldr	r2, [pc, #392]	@ (80039a0 <HAL_ADC_Start_DMA+0x290>)
 8003818:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	221c      	movs	r2, #28
 8003820:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 0210 	orr.w	r2, r2, #16
 8003838:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a55      	ldr	r2, [pc, #340]	@ (8003994 <HAL_ADC_Start_DMA+0x284>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d107      	bne.n	8003854 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800385a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800385e:	2b00      	cmp	r3, #0
 8003860:	d04f      	beq.n	8003902 <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003868:	2b00      	cmp	r3, #0
 800386a:	d046      	beq.n	80038fa <HAL_ADC_Start_DMA+0x1ea>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d040      	beq.n	80038fa <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800387c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	f107 0310 	add.w	r3, r7, #16
 8003884:	4611      	mov	r1, r2
 8003886:	4618      	mov	r0, r3
 8003888:	f002 fdf8 	bl	800647c <HAL_DMAEx_List_GetNodeConfig>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e072      	b.n	800397c <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003898:	2b02      	cmp	r3, #2
 800389a:	d104      	bne.n	80038a6 <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038a4:	e00a      	b.n	80038bc <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80038a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d104      	bne.n	80038b6 <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038b4:	e002      	b.n	80038bc <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80038c8:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ec:	4618      	mov	r0, r3
 80038ee:	f002 fd1b 	bl	8006328 <HAL_DMAEx_List_Start_IT>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80038f8:	e028      	b.n	800394c <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003900:	e024      	b.n	800394c <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b02      	cmp	r3, #2
 800390a:	d104      	bne.n	8003916 <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003914:	e00c      	b.n	8003930 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d104      	bne.n	800392a <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003928:	e002      	b.n	8003930 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3340      	adds	r3, #64	@ 0x40
 800393a:	4619      	mov	r1, r3
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003942:	f001 fd5f 	bl	8005404 <HAL_DMA_Start_IT>
 8003946:	4603      	mov	r3, r0
 8003948:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff fbba 	bl	80030ca <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003956:	e00f      	b.n	8003978 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 8003960:	e00a      	b.n	8003978 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8003970:	e002      	b.n	8003978 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003972:	2302      	movs	r3, #2
 8003974:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 8003978:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800397c:	4618      	mov	r0, r3
 800397e:	3788      	adds	r7, #136	@ 0x88
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	42028000 	.word	0x42028000
 8003988:	42028100 	.word	0x42028100
 800398c:	42028300 	.word	0x42028300
 8003990:	46021300 	.word	0x46021300
 8003994:	46021000 	.word	0x46021000
 8003998:	08004d0d 	.word	0x08004d0d
 800399c:	08004de5 	.word	0x08004de5
 80039a0:	08004e01 	.word	0x08004e01

080039a4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08a      	sub	sp, #40	@ 0x28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80039ac:	2300      	movs	r3, #0
 80039ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a77      	ldr	r2, [pc, #476]	@ (8003ba4 <HAL_ADC_IRQHandler+0x200>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d004      	beq.n	80039d4 <HAL_ADC_IRQHandler+0x30>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a76      	ldr	r2, [pc, #472]	@ (8003ba8 <HAL_ADC_IRQHandler+0x204>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d101      	bne.n	80039d8 <HAL_ADC_IRQHandler+0x34>
 80039d4:	4b75      	ldr	r3, [pc, #468]	@ (8003bac <HAL_ADC_IRQHandler+0x208>)
 80039d6:	e000      	b.n	80039da <HAL_ADC_IRQHandler+0x36>
 80039d8:	4b75      	ldr	r3, [pc, #468]	@ (8003bb0 <HAL_ADC_IRQHandler+0x20c>)
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff fae4 	bl	8002fa8 <LL_ADC_GetMultimode>
 80039e0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d017      	beq.n	8003a1c <HAL_ADC_IRQHandler+0x78>
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d012      	beq.n	8003a1c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039fa:	f003 0310 	and.w	r3, r3, #16
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d105      	bne.n	8003a0e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a06:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f001 fa2e 	bl	8004e70 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2202      	movs	r2, #2
 8003a1a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d004      	beq.n	8003a30 <HAL_ADC_IRQHandler+0x8c>
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10b      	bne.n	8003a48 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 80d1 	beq.w	8003bde <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 80cb 	beq.w	8003bde <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d105      	bne.n	8003a60 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a58:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a53      	ldr	r2, [pc, #332]	@ (8003bb4 <HAL_ADC_IRQHandler+0x210>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d06c      	beq.n	8003b44 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff f932 	bl	8002cd8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 80aa 	beq.w	8003bd0 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a49      	ldr	r2, [pc, #292]	@ (8003ba8 <HAL_ADC_IRQHandler+0x204>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d002      	beq.n	8003a8c <HAL_ADC_IRQHandler+0xe8>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	e000      	b.n	8003a8e <HAL_ADC_IRQHandler+0xea>
 8003a8c:	4b45      	ldr	r3, [pc, #276]	@ (8003ba4 <HAL_ADC_IRQHandler+0x200>)
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6812      	ldr	r2, [r2, #0]
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d008      	beq.n	8003aa8 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	2b05      	cmp	r3, #5
 8003aa0:	d002      	beq.n	8003aa8 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b09      	cmp	r3, #9
 8003aa6:	d104      	bne.n	8003ab2 <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	623b      	str	r3, [r7, #32]
 8003ab0:	e00c      	b.n	8003acc <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a3c      	ldr	r2, [pc, #240]	@ (8003ba8 <HAL_ADC_IRQHandler+0x204>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d002      	beq.n	8003ac2 <HAL_ADC_IRQHandler+0x11e>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	e000      	b.n	8003ac4 <HAL_ADC_IRQHandler+0x120>
 8003ac2:	4b38      	ldr	r3, [pc, #224]	@ (8003ba4 <HAL_ADC_IRQHandler+0x200>)
 8003ac4:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d17c      	bne.n	8003bd0 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d175      	bne.n	8003bd0 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff fb02 	bl	80030f2 <LL_ADC_REG_IsConversionOngoing>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d11a      	bne.n	8003b2a <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 020c 	bic.w	r2, r2, #12
 8003b02:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d159      	bne.n	8003bd0 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b20:	f043 0201 	orr.w	r2, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	679a      	str	r2, [r3, #120]	@ 0x78
 8003b28:	e052      	b.n	8003bd0 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b2e:	f043 0210 	orr.w	r2, r3, #16
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b3a:	f043 0201 	orr.w	r2, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003b42:	e045      	b.n	8003bd0 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff f8c5 	bl	8002cd8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d03d      	beq.n	8003bd0 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d138      	bne.n	8003bd0 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d131      	bne.n	8003bd0 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff fabe 	bl	80030f2 <LL_ADC_REG_IsConversionOngoing>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d11d      	bne.n	8003bb8 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 020c 	bic.w	r2, r2, #12
 8003b8a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	f043 0201 	orr.w	r2, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	679a      	str	r2, [r3, #120]	@ 0x78
 8003ba0:	e016      	b.n	8003bd0 <HAL_ADC_IRQHandler+0x22c>
 8003ba2:	bf00      	nop
 8003ba4:	42028000 	.word	0x42028000
 8003ba8:	42028100 	.word	0x42028100
 8003bac:	42028300 	.word	0x42028300
 8003bb0:	46021300 	.word	0x46021300
 8003bb4:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bbc:	f043 0220 	orr.w	r2, r3, #32
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bc8:	f043 0201 	orr.w	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f99d 	bl	8003f10 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	220c      	movs	r2, #12
 8003bdc:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a8c      	ldr	r2, [pc, #560]	@ (8003e14 <HAL_ADC_IRQHandler+0x470>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	f000 8095 	beq.w	8003d14 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d004      	beq.n	8003bfe <HAL_ADC_IRQHandler+0x25a>
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10a      	bne.n	8003c14 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8085 	beq.w	8003d14 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d07f      	beq.n	8003d14 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d105      	bne.n	8003c2c <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c24:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff f91e 	bl	8002e72 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003c36:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff f84b 	bl	8002cd8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c42:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a73      	ldr	r2, [pc, #460]	@ (8003e18 <HAL_ADC_IRQHandler+0x474>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d002      	beq.n	8003c54 <HAL_ADC_IRQHandler+0x2b0>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	e000      	b.n	8003c56 <HAL_ADC_IRQHandler+0x2b2>
 8003c54:	4b71      	ldr	r3, [pc, #452]	@ (8003e1c <HAL_ADC_IRQHandler+0x478>)
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d008      	beq.n	8003c70 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2b06      	cmp	r3, #6
 8003c68:	d002      	beq.n	8003c70 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b07      	cmp	r3, #7
 8003c6e:	d104      	bne.n	8003c7a <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	623b      	str	r3, [r7, #32]
 8003c78:	e00c      	b.n	8003c94 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a66      	ldr	r2, [pc, #408]	@ (8003e18 <HAL_ADC_IRQHandler+0x474>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d002      	beq.n	8003c8a <HAL_ADC_IRQHandler+0x2e6>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	e000      	b.n	8003c8c <HAL_ADC_IRQHandler+0x2e8>
 8003c8a:	4b64      	ldr	r3, [pc, #400]	@ (8003e1c <HAL_ADC_IRQHandler+0x478>)
 8003c8c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d035      	beq.n	8003d06 <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <HAL_ADC_IRQHandler+0x310>
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d02d      	beq.n	8003d06 <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d128      	bne.n	8003d06 <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cbe:	2b40      	cmp	r3, #64	@ 0x40
 8003cc0:	d121      	bne.n	8003d06 <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff fa26 	bl	8003118 <LL_ADC_INJ_IsConversionOngoing>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d119      	bne.n	8003d06 <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ce0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ce6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d105      	bne.n	8003d06 <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cfe:	f043 0201 	orr.w	r2, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f001 f894 	bl	8004e34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2260      	movs	r2, #96	@ 0x60
 8003d12:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d011      	beq.n	8003d42 <HAL_ADC_IRQHandler+0x39e>
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00c      	beq.n	8003d42 <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d2c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f8ff 	bl	8003f38 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2280      	movs	r2, #128	@ 0x80
 8003d40:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d012      	beq.n	8003d72 <HAL_ADC_IRQHandler+0x3ce>
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00d      	beq.n	8003d72 <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d5a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f001 f870 	bl	8004e48 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d70:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d012      	beq.n	8003da2 <HAL_ADC_IRQHandler+0x3fe>
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00d      	beq.n	8003da2 <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d8a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f001 f862 	bl	8004e5c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003da0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f003 0310 	and.w	r3, r3, #16
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d05d      	beq.n	8003e68 <HAL_ADC_IRQHandler+0x4c4>
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d058      	beq.n	8003e68 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d102      	bne.n	8003dc4 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc2:	e03b      	b.n	8003e3c <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a12      	ldr	r2, [pc, #72]	@ (8003e14 <HAL_ADC_IRQHandler+0x470>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d02c      	beq.n	8003e28 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d015      	beq.n	8003e00 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a10      	ldr	r2, [pc, #64]	@ (8003e1c <HAL_ADC_IRQHandler+0x478>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d004      	beq.n	8003de8 <HAL_ADC_IRQHandler+0x444>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a0d      	ldr	r2, [pc, #52]	@ (8003e18 <HAL_ADC_IRQHandler+0x474>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d101      	bne.n	8003dec <HAL_ADC_IRQHandler+0x448>
 8003de8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e20 <HAL_ADC_IRQHandler+0x47c>)
 8003dea:	e000      	b.n	8003dee <HAL_ADC_IRQHandler+0x44a>
 8003dec:	4b0d      	ldr	r3, [pc, #52]	@ (8003e24 <HAL_ADC_IRQHandler+0x480>)
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff f8e8 	bl	8002fc4 <LL_ADC_GetMultiDMATransfer>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d020      	beq.n	8003e3c <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dfe:	e01d      	b.n	8003e3c <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d016      	beq.n	8003e3c <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e12:	e013      	b.n	8003e3c <HAL_ADC_IRQHandler+0x498>
 8003e14:	46021000 	.word	0x46021000
 8003e18:	42028100 	.word	0x42028100
 8003e1c:	42028000 	.word	0x42028000
 8003e20:	42028300 	.word	0x42028300
 8003e24:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff f812 	bl	8002e56 <LL_ADC_REG_GetDMATransfer>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d10e      	bne.n	8003e60 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e46:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e52:	f043 0202 	orr.w	r2, r3, #2
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f876 	bl	8003f4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2210      	movs	r2, #16
 8003e66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d01b      	beq.n	8003eaa <HAL_ADC_IRQHandler+0x506>
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d016      	beq.n	8003eaa <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d105      	bne.n	8003e94 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e8c:	f043 0201 	orr.w	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f877 	bl	8003f88 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0201 	bic.w	r2, r2, #1
 8003ea8:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a17      	ldr	r2, [pc, #92]	@ (8003f0c <HAL_ADC_IRQHandler+0x568>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d126      	bne.n	8003f02 <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00c      	beq.n	8003ed8 <HAL_ADC_IRQHandler+0x534>
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f849 	bl	8003f60 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ed6:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00f      	beq.n	8003f02 <HAL_ADC_IRQHandler+0x55e>
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f841 	bl	8003f74 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f00:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003f02:	bf00      	nop
 8003f04:	3728      	adds	r7, #40	@ 0x28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	46021000 	.word	0x46021000

08003f10 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003f9c:	b590      	push	{r4, r7, lr}
 8003f9e:	b0b7      	sub	sp, #220	@ 0xdc
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4aa8      	ldr	r2, [pc, #672]	@ (8004258 <HAL_ADC_ConfigChannel+0x2bc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d103      	bne.n	8003fc2 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d102      	bne.n	8003fd2 <HAL_ADC_ConfigChannel+0x36>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	f000 bdfe 	b.w	8004bce <HAL_ADC_ConfigChannel+0xc32>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff f887 	bl	80030f2 <LL_ADC_REG_IsConversionOngoing>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f040 85c1 	bne.w	8004b6e <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a99      	ldr	r2, [pc, #612]	@ (8004258 <HAL_ADC_ConfigChannel+0x2bc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	f000 8409 	beq.w	800480a <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d108      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x7a>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	0e9b      	lsrs	r3, r3, #26
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	2201      	movs	r2, #1
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	e01d      	b.n	8004052 <HAL_ADC_ConfigChannel+0xb6>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004022:	fa93 f3a3 	rbit	r3, r3
 8004026:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800402a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800402e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004032:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 800403a:	2320      	movs	r3, #32
 800403c:	e004      	b.n	8004048 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 800403e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004042:	fab3 f383 	clz	r3, r3
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	2201      	movs	r2, #1
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6812      	ldr	r2, [r2, #0]
 8004056:	69d1      	ldr	r1, [r2, #28]
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	430b      	orrs	r3, r1
 800405e:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	6859      	ldr	r1, [r3, #4]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	f7fe fe47 	bl	8002d00 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff f83b 	bl	80030f2 <LL_ADC_REG_IsConversionOngoing>
 800407c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff f847 	bl	8003118 <LL_ADC_INJ_IsConversionOngoing>
 800408a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800408e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004092:	2b00      	cmp	r3, #0
 8004094:	f040 81df 	bne.w	8004456 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004098:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800409c:	2b00      	cmp	r3, #0
 800409e:	f040 81da 	bne.w	8004456 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6819      	ldr	r1, [r3, #0]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f7fe fef2 	bl	8002e98 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	695a      	ldr	r2, [r3, #20]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	089b      	lsrs	r3, r3, #2
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d046      	beq.n	8004164 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6919      	ldr	r1, [r3, #16]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040e6:	f7fe fd2d 	bl	8002b44 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6919      	ldr	r1, [r3, #16]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f7fe fd5b 	bl	8002bb2 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	7e9b      	ldrb	r3, [r3, #26]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d11e      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004110:	2b00      	cmp	r3, #0
 8004112:	d102      	bne.n	800411a <HAL_ADC_ConfigChannel+0x17e>
 8004114:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004118:	e000      	b.n	800411c <HAL_ADC_ConfigChannel+0x180>
 800411a:	2300      	movs	r3, #0
 800411c:	461a      	mov	r2, r3
 800411e:	f7fe fd7e 	bl	8002c1e <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800412e:	2b01      	cmp	r3, #1
 8004130:	d102      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x19c>
 8004132:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004136:	e000      	b.n	800413a <HAL_ADC_ConfigChannel+0x19e>
 8004138:	2300      	movs	r3, #0
 800413a:	461a      	mov	r2, r3
 800413c:	f7fe fd54 	bl	8002be8 <LL_ADC_SetOffsetSignedSaturation>
 8004140:	e189      	b.n	8004456 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	2200      	movs	r2, #0
 800414c:	4619      	mov	r1, r3
 800414e:	f7fe fd66 	bl	8002c1e <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2200      	movs	r2, #0
 800415c:	4619      	mov	r1, r3
 800415e:	f7fe fd43 	bl	8002be8 <LL_ADC_SetOffsetSignedSaturation>
 8004162:	e178      	b.n	8004456 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2100      	movs	r1, #0
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe fd0b 	bl	8002b86 <LL_ADC_GetOffsetChannel>
 8004170:	4603      	mov	r3, r0
 8004172:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x1f4>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2100      	movs	r1, #0
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe fd00 	bl	8002b86 <LL_ADC_GetOffsetChannel>
 8004186:	4603      	mov	r3, r0
 8004188:	0e9b      	lsrs	r3, r3, #26
 800418a:	f003 021f 	and.w	r2, r3, #31
 800418e:	e01e      	b.n	80041ce <HAL_ADC_ConfigChannel+0x232>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2100      	movs	r1, #0
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe fcf5 	bl	8002b86 <LL_ADC_GetOffsetChannel>
 800419c:	4603      	mov	r3, r0
 800419e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80041ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80041b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 80041be:	2320      	movs	r3, #32
 80041c0:	e004      	b.n	80041cc <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 80041c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d105      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x24a>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	0e9b      	lsrs	r3, r3, #26
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	e018      	b.n	8004218 <HAL_ADC_ConfigChannel+0x27c>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041f2:	fa93 f3a3 	rbit	r3, r3
 80041f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80041fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004202:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 800420a:	2320      	movs	r3, #32
 800420c:	e004      	b.n	8004218 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 800420e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004212:	fab3 f383 	clz	r3, r3
 8004216:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004218:	429a      	cmp	r2, r3
 800421a:	d107      	bne.n	800422c <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	2300      	movs	r3, #0
 8004226:	2100      	movs	r1, #0
 8004228:	f7fe fc8c 	bl	8002b44 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2101      	movs	r1, #1
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe fca7 	bl	8002b86 <LL_ADC_GetOffsetChannel>
 8004238:	4603      	mov	r3, r0
 800423a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10c      	bne.n	800425c <HAL_ADC_ConfigChannel+0x2c0>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2101      	movs	r1, #1
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe fc9c 	bl	8002b86 <LL_ADC_GetOffsetChannel>
 800424e:	4603      	mov	r3, r0
 8004250:	0e9b      	lsrs	r3, r3, #26
 8004252:	f003 021f 	and.w	r2, r3, #31
 8004256:	e020      	b.n	800429a <HAL_ADC_ConfigChannel+0x2fe>
 8004258:	46021000 	.word	0x46021000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2101      	movs	r1, #1
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe fc8f 	bl	8002b86 <LL_ADC_GetOffsetChannel>
 8004268:	4603      	mov	r3, r0
 800426a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004272:	fa93 f3a3 	rbit	r3, r3
 8004276:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800427a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800427e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004282:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 800428a:	2320      	movs	r3, #32
 800428c:	e004      	b.n	8004298 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 800428e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004292:	fab3 f383 	clz	r3, r3
 8004296:	b2db      	uxtb	r3, r3
 8004298:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d105      	bne.n	80042b2 <HAL_ADC_ConfigChannel+0x316>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	0e9b      	lsrs	r3, r3, #26
 80042ac:	f003 031f 	and.w	r3, r3, #31
 80042b0:	e018      	b.n	80042e4 <HAL_ADC_ConfigChannel+0x348>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042be:	fa93 f3a3 	rbit	r3, r3
 80042c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80042c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80042ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 80042d6:	2320      	movs	r3, #32
 80042d8:	e004      	b.n	80042e4 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 80042da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042de:	fab3 f383 	clz	r3, r3
 80042e2:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d107      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	2300      	movs	r3, #0
 80042f2:	2101      	movs	r1, #1
 80042f4:	f7fe fc26 	bl	8002b44 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2102      	movs	r1, #2
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fe fc41 	bl	8002b86 <LL_ADC_GetOffsetChannel>
 8004304:	4603      	mov	r3, r0
 8004306:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x388>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2102      	movs	r1, #2
 8004314:	4618      	mov	r0, r3
 8004316:	f7fe fc36 	bl	8002b86 <LL_ADC_GetOffsetChannel>
 800431a:	4603      	mov	r3, r0
 800431c:	0e9b      	lsrs	r3, r3, #26
 800431e:	f003 021f 	and.w	r2, r3, #31
 8004322:	e01a      	b.n	800435a <HAL_ADC_ConfigChannel+0x3be>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2102      	movs	r1, #2
 800432a:	4618      	mov	r0, r3
 800432c:	f7fe fc2b 	bl	8002b86 <LL_ADC_GetOffsetChannel>
 8004330:	4603      	mov	r3, r0
 8004332:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004334:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004336:	fa93 f3a3 	rbit	r3, r3
 800433a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800433c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800433e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004342:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800434a:	2320      	movs	r3, #32
 800434c:	e004      	b.n	8004358 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 800434e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	b2db      	uxtb	r3, r3
 8004358:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d105      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x3d6>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	0e9b      	lsrs	r3, r3, #26
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	e011      	b.n	8004396 <HAL_ADC_ConfigChannel+0x3fa>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004378:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800437a:	fa93 f3a3 	rbit	r3, r3
 800437e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004382:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004384:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800438a:	2320      	movs	r3, #32
 800438c:	e003      	b.n	8004396 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800438e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004390:	fab3 f383 	clz	r3, r3
 8004394:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004396:	429a      	cmp	r2, r3
 8004398:	d107      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	2300      	movs	r3, #0
 80043a4:	2102      	movs	r1, #2
 80043a6:	f7fe fbcd 	bl	8002b44 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2103      	movs	r1, #3
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fe fbe8 	bl	8002b86 <LL_ADC_GetOffsetChannel>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10a      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x43a>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2103      	movs	r1, #3
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fe fbdd 	bl	8002b86 <LL_ADC_GetOffsetChannel>
 80043cc:	4603      	mov	r3, r0
 80043ce:	0e9b      	lsrs	r3, r3, #26
 80043d0:	f003 021f 	and.w	r2, r3, #31
 80043d4:	e017      	b.n	8004406 <HAL_ADC_ConfigChannel+0x46a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2103      	movs	r1, #3
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fe fbd2 	bl	8002b86 <LL_ADC_GetOffsetChannel>
 80043e2:	4603      	mov	r3, r0
 80043e4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043e8:	fa93 f3a3 	rbit	r3, r3
 80043ec:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80043ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043f0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80043f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 80043f8:	2320      	movs	r3, #32
 80043fa:	e003      	b.n	8004404 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 80043fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d105      	bne.n	800441e <HAL_ADC_ConfigChannel+0x482>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	0e9b      	lsrs	r3, r3, #26
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	e011      	b.n	8004442 <HAL_ADC_ConfigChannel+0x4a6>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004424:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004426:	fa93 f3a3 	rbit	r3, r3
 800442a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800442c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800442e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004430:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 8004436:	2320      	movs	r3, #32
 8004438:	e003      	b.n	8004442 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 800443a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800443c:	fab3 f383 	clz	r3, r3
 8004440:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004442:	429a      	cmp	r2, r3
 8004444:	d107      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	2300      	movs	r3, #0
 8004450:	2103      	movs	r1, #3
 8004452:	f7fe fb77 	bl	8002b44 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f7fe fe22 	bl	80030a4 <LL_ADC_IsEnabled>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	f040 83ad 	bne.w	8004bc2 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	6819      	ldr	r1, [r3, #0]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	461a      	mov	r2, r3
 8004476:	f7fe fd73 	bl	8002f60 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004482:	f040 80d6 	bne.w	8004632 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10b      	bne.n	80044aa <HAL_ADC_ConfigChannel+0x50e>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	0e9b      	lsrs	r3, r3, #26
 8004498:	3301      	adds	r3, #1
 800449a:	f003 031f 	and.w	r3, r3, #31
 800449e:	2b09      	cmp	r3, #9
 80044a0:	bf94      	ite	ls
 80044a2:	2301      	movls	r3, #1
 80044a4:	2300      	movhi	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	e019      	b.n	80044de <HAL_ADC_ConfigChannel+0x542>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044b2:	fa93 f3a3 	rbit	r3, r3
 80044b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80044b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044ba:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80044bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80044c2:	2320      	movs	r3, #32
 80044c4:	e003      	b.n	80044ce <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80044c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044c8:	fab3 f383 	clz	r3, r3
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	3301      	adds	r3, #1
 80044d0:	f003 031f 	and.w	r3, r3, #31
 80044d4:	2b09      	cmp	r3, #9
 80044d6:	bf94      	ite	ls
 80044d8:	2301      	movls	r3, #1
 80044da:	2300      	movhi	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d04d      	beq.n	800457e <HAL_ADC_ConfigChannel+0x5e2>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d107      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x562>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	0e9b      	lsrs	r3, r3, #26
 80044f4:	3301      	adds	r3, #1
 80044f6:	069b      	lsls	r3, r3, #26
 80044f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044fc:	e015      	b.n	800452a <HAL_ADC_ConfigChannel+0x58e>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004504:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004506:	fa93 f3a3 	rbit	r3, r3
 800450a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800450c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800450e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004516:	2320      	movs	r3, #32
 8004518:	e003      	b.n	8004522 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800451a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800451c:	fab3 f383 	clz	r3, r3
 8004520:	b2db      	uxtb	r3, r3
 8004522:	3301      	adds	r3, #1
 8004524:	069b      	lsls	r3, r3, #26
 8004526:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d109      	bne.n	800454a <HAL_ADC_ConfigChannel+0x5ae>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	0e9b      	lsrs	r3, r3, #26
 800453c:	3301      	adds	r3, #1
 800453e:	f003 031f 	and.w	r3, r3, #31
 8004542:	2101      	movs	r1, #1
 8004544:	fa01 f303 	lsl.w	r3, r1, r3
 8004548:	e017      	b.n	800457a <HAL_ADC_ConfigChannel+0x5de>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004552:	fa93 f3a3 	rbit	r3, r3
 8004556:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800455c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8004562:	2320      	movs	r3, #32
 8004564:	e003      	b.n	800456e <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 8004566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004568:	fab3 f383 	clz	r3, r3
 800456c:	b2db      	uxtb	r3, r3
 800456e:	3301      	adds	r3, #1
 8004570:	f003 031f 	and.w	r3, r3, #31
 8004574:	2101      	movs	r1, #1
 8004576:	fa01 f303 	lsl.w	r3, r1, r3
 800457a:	4313      	orrs	r3, r2
 800457c:	e04e      	b.n	800461c <HAL_ADC_ConfigChannel+0x680>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d107      	bne.n	800459a <HAL_ADC_ConfigChannel+0x5fe>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	0e9b      	lsrs	r3, r3, #26
 8004590:	3301      	adds	r3, #1
 8004592:	069b      	lsls	r3, r3, #26
 8004594:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004598:	e015      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x62a>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a2:	fa93 f3a3 	rbit	r3, r3
 80045a6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80045a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80045ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80045b2:	2320      	movs	r3, #32
 80045b4:	e003      	b.n	80045be <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80045b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b8:	fab3 f383 	clz	r3, r3
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	3301      	adds	r3, #1
 80045c0:	069b      	lsls	r3, r3, #26
 80045c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <HAL_ADC_ConfigChannel+0x64a>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	0e9b      	lsrs	r3, r3, #26
 80045d8:	3301      	adds	r3, #1
 80045da:	f003 031f 	and.w	r3, r3, #31
 80045de:	2101      	movs	r1, #1
 80045e0:	fa01 f303 	lsl.w	r3, r1, r3
 80045e4:	e017      	b.n	8004616 <HAL_ADC_ConfigChannel+0x67a>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	fa93 f3a3 	rbit	r3, r3
 80045f2:	61bb      	str	r3, [r7, #24]
  return result;
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 80045fe:	2320      	movs	r3, #32
 8004600:	e003      	b.n	800460a <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	fab3 f383 	clz	r3, r3
 8004608:	b2db      	uxtb	r3, r3
 800460a:	3301      	adds	r3, #1
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	2101      	movs	r1, #1
 8004612:	fa01 f303 	lsl.w	r3, r1, r3
 8004616:	4313      	orrs	r3, r2
 8004618:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800461c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	461a      	mov	r2, r3
 800462a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800462e:	f7fe fc33 	bl	8002e98 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	f280 82c3 	bge.w	8004bc2 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a92      	ldr	r2, [pc, #584]	@ (800488c <HAL_ADC_ConfigChannel+0x8f0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d004      	beq.n	8004650 <HAL_ADC_ConfigChannel+0x6b4>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a91      	ldr	r2, [pc, #580]	@ (8004890 <HAL_ADC_ConfigChannel+0x8f4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d101      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x6b8>
 8004650:	4b90      	ldr	r3, [pc, #576]	@ (8004894 <HAL_ADC_ConfigChannel+0x8f8>)
 8004652:	e000      	b.n	8004656 <HAL_ADC_ConfigChannel+0x6ba>
 8004654:	4b90      	ldr	r3, [pc, #576]	@ (8004898 <HAL_ADC_ConfigChannel+0x8fc>)
 8004656:	4618      	mov	r0, r3
 8004658:	f7fe fa46 	bl	8002ae8 <LL_ADC_GetCommonPathInternalCh>
 800465c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a89      	ldr	r2, [pc, #548]	@ (800488c <HAL_ADC_ConfigChannel+0x8f0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d004      	beq.n	8004674 <HAL_ADC_ConfigChannel+0x6d8>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a88      	ldr	r2, [pc, #544]	@ (8004890 <HAL_ADC_ConfigChannel+0x8f4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d10e      	bne.n	8004692 <HAL_ADC_ConfigChannel+0x6f6>
 8004674:	4885      	ldr	r0, [pc, #532]	@ (800488c <HAL_ADC_ConfigChannel+0x8f0>)
 8004676:	f7fe fd15 	bl	80030a4 <LL_ADC_IsEnabled>
 800467a:	4604      	mov	r4, r0
 800467c:	4884      	ldr	r0, [pc, #528]	@ (8004890 <HAL_ADC_ConfigChannel+0x8f4>)
 800467e:	f7fe fd11 	bl	80030a4 <LL_ADC_IsEnabled>
 8004682:	4603      	mov	r3, r0
 8004684:	4323      	orrs	r3, r4
 8004686:	2b00      	cmp	r3, #0
 8004688:	bf0c      	ite	eq
 800468a:	2301      	moveq	r3, #1
 800468c:	2300      	movne	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	e008      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x708>
 8004692:	4882      	ldr	r0, [pc, #520]	@ (800489c <HAL_ADC_ConfigChannel+0x900>)
 8004694:	f7fe fd06 	bl	80030a4 <LL_ADC_IsEnabled>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	bf0c      	ite	eq
 800469e:	2301      	moveq	r3, #1
 80046a0:	2300      	movne	r3, #0
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 80a6 	beq.w	80047f6 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a7c      	ldr	r2, [pc, #496]	@ (80048a0 <HAL_ADC_ConfigChannel+0x904>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d13c      	bne.n	800472e <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d136      	bne.n	800472e <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a71      	ldr	r2, [pc, #452]	@ (800488c <HAL_ADC_ConfigChannel+0x8f0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00a      	beq.n	80046e0 <HAL_ADC_ConfigChannel+0x744>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a70      	ldr	r2, [pc, #448]	@ (8004890 <HAL_ADC_ConfigChannel+0x8f4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d005      	beq.n	80046e0 <HAL_ADC_ConfigChannel+0x744>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a70      	ldr	r2, [pc, #448]	@ (800489c <HAL_ADC_ConfigChannel+0x900>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	f040 826e 	bne.w	8004bbc <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a69      	ldr	r2, [pc, #420]	@ (800488c <HAL_ADC_ConfigChannel+0x8f0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d004      	beq.n	80046f4 <HAL_ADC_ConfigChannel+0x758>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a68      	ldr	r2, [pc, #416]	@ (8004890 <HAL_ADC_ConfigChannel+0x8f4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d101      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x75c>
 80046f4:	4a67      	ldr	r2, [pc, #412]	@ (8004894 <HAL_ADC_ConfigChannel+0x8f8>)
 80046f6:	e000      	b.n	80046fa <HAL_ADC_ConfigChannel+0x75e>
 80046f8:	4a67      	ldr	r2, [pc, #412]	@ (8004898 <HAL_ADC_ConfigChannel+0x8fc>)
 80046fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004702:	4619      	mov	r1, r3
 8004704:	4610      	mov	r0, r2
 8004706:	f7fe f9dc 	bl	8002ac2 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800470a:	4b66      	ldr	r3, [pc, #408]	@ (80048a4 <HAL_ADC_ConfigChannel+0x908>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	099b      	lsrs	r3, r3, #6
 8004710:	4a65      	ldr	r2, [pc, #404]	@ (80048a8 <HAL_ADC_ConfigChannel+0x90c>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	099b      	lsrs	r3, r3, #6
 8004718:	3301      	adds	r3, #1
 800471a:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 800471c:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800471e:	e002      	b.n	8004726 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	3b01      	subs	r3, #1
 8004724:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f9      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800472c:	e246      	b.n	8004bbc <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a5e      	ldr	r2, [pc, #376]	@ (80048ac <HAL_ADC_ConfigChannel+0x910>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d12b      	bne.n	8004790 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004738:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800473c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004740:	2b00      	cmp	r3, #0
 8004742:	d125      	bne.n	8004790 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a50      	ldr	r2, [pc, #320]	@ (800488c <HAL_ADC_ConfigChannel+0x8f0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00a      	beq.n	8004764 <HAL_ADC_ConfigChannel+0x7c8>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a4f      	ldr	r2, [pc, #316]	@ (8004890 <HAL_ADC_ConfigChannel+0x8f4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d005      	beq.n	8004764 <HAL_ADC_ConfigChannel+0x7c8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a4f      	ldr	r2, [pc, #316]	@ (800489c <HAL_ADC_ConfigChannel+0x900>)
 800475e:	4293      	cmp	r3, r2
 8004760:	f040 822e 	bne.w	8004bc0 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a48      	ldr	r2, [pc, #288]	@ (800488c <HAL_ADC_ConfigChannel+0x8f0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d004      	beq.n	8004778 <HAL_ADC_ConfigChannel+0x7dc>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a47      	ldr	r2, [pc, #284]	@ (8004890 <HAL_ADC_ConfigChannel+0x8f4>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d101      	bne.n	800477c <HAL_ADC_ConfigChannel+0x7e0>
 8004778:	4a46      	ldr	r2, [pc, #280]	@ (8004894 <HAL_ADC_ConfigChannel+0x8f8>)
 800477a:	e000      	b.n	800477e <HAL_ADC_ConfigChannel+0x7e2>
 800477c:	4a46      	ldr	r2, [pc, #280]	@ (8004898 <HAL_ADC_ConfigChannel+0x8fc>)
 800477e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004782:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f7fe f99a 	bl	8002ac2 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800478e:	e217      	b.n	8004bc0 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a46      	ldr	r2, [pc, #280]	@ (80048b0 <HAL_ADC_ConfigChannel+0x914>)
 8004796:	4293      	cmp	r3, r2
 8004798:	f040 8213 	bne.w	8004bc2 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800479c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f040 820c 	bne.w	8004bc2 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a37      	ldr	r2, [pc, #220]	@ (800488c <HAL_ADC_ConfigChannel+0x8f0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00a      	beq.n	80047ca <HAL_ADC_ConfigChannel+0x82e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a35      	ldr	r2, [pc, #212]	@ (8004890 <HAL_ADC_ConfigChannel+0x8f4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d005      	beq.n	80047ca <HAL_ADC_ConfigChannel+0x82e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a36      	ldr	r2, [pc, #216]	@ (800489c <HAL_ADC_ConfigChannel+0x900>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	f040 81fc 	bne.w	8004bc2 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a2f      	ldr	r2, [pc, #188]	@ (800488c <HAL_ADC_ConfigChannel+0x8f0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d004      	beq.n	80047de <HAL_ADC_ConfigChannel+0x842>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a2d      	ldr	r2, [pc, #180]	@ (8004890 <HAL_ADC_ConfigChannel+0x8f4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d101      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x846>
 80047de:	4a2d      	ldr	r2, [pc, #180]	@ (8004894 <HAL_ADC_ConfigChannel+0x8f8>)
 80047e0:	e000      	b.n	80047e4 <HAL_ADC_ConfigChannel+0x848>
 80047e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004898 <HAL_ADC_ConfigChannel+0x8fc>)
 80047e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047ec:	4619      	mov	r1, r3
 80047ee:	4610      	mov	r0, r2
 80047f0:	f7fe f967 	bl	8002ac2 <LL_ADC_SetCommonPathInternalCh>
 80047f4:	e1e5      	b.n	8004bc2 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047fa:	f043 0220 	orr.w	r2, r3, #32
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004808:	e1db      	b.n	8004bc2 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b02      	cmp	r3, #2
 8004818:	f000 811b 	beq.w	8004a52 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004824:	d004      	beq.n	8004830 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800482a:	4a22      	ldr	r2, [pc, #136]	@ (80048b4 <HAL_ADC_ConfigChannel+0x918>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d107      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004838:	4618      	mov	r0, r3
 800483a:	f7fe fac1 	bl	8002dc0 <LL_ADC_REG_SetSequencerChAdd>
 800483e:	e059      	b.n	80048f4 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f003 031f 	and.w	r3, r3, #31
 800484e:	210f      	movs	r1, #15
 8004850:	fa01 f303 	lsl.w	r3, r1, r3
 8004854:	43db      	mvns	r3, r3
 8004856:	401a      	ands	r2, r3
 8004858:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800485c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d105      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x8d4>
 8004864:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004868:	0e9b      	lsrs	r3, r3, #26
 800486a:	f003 031f 	and.w	r3, r3, #31
 800486e:	e027      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x924>
 8004870:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004874:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	fa93 f3a3 	rbit	r3, r3
 800487c:	60fb      	str	r3, [r7, #12]
  return result;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d117      	bne.n	80048b8 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8004888:	2320      	movs	r3, #32
 800488a:	e019      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x924>
 800488c:	42028000 	.word	0x42028000
 8004890:	42028100 	.word	0x42028100
 8004894:	42028300 	.word	0x42028300
 8004898:	46021300 	.word	0x46021300
 800489c:	46021000 	.word	0x46021000
 80048a0:	ce080000 	.word	0xce080000
 80048a4:	20000000 	.word	0x20000000
 80048a8:	053e2d63 	.word	0x053e2d63
 80048ac:	ca040000 	.word	0xca040000
 80048b0:	80000001 	.word	0x80000001
 80048b4:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	fab3 f383 	clz	r3, r3
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	6839      	ldr	r1, [r7, #0]
 80048c2:	6849      	ldr	r1, [r1, #4]
 80048c4:	f001 011f 	and.w	r1, r1, #31
 80048c8:	408b      	lsls	r3, r1
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	089b      	lsrs	r3, r3, #2
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048de:	429a      	cmp	r2, r3
 80048e0:	d808      	bhi.n	80048f4 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80048ee:	4619      	mov	r1, r3
 80048f0:	f7fe fa06 	bl	8002d00 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6818      	ldr	r0, [r3, #0]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	461a      	mov	r2, r3
 80048fe:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004902:	f7fe fac9 	bl	8002e98 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	f280 8159 	bge.w	8004bc2 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a9b      	ldr	r2, [pc, #620]	@ (8004b84 <HAL_ADC_ConfigChannel+0xbe8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d004      	beq.n	8004924 <HAL_ADC_ConfigChannel+0x988>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a9a      	ldr	r2, [pc, #616]	@ (8004b88 <HAL_ADC_ConfigChannel+0xbec>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d101      	bne.n	8004928 <HAL_ADC_ConfigChannel+0x98c>
 8004924:	4b99      	ldr	r3, [pc, #612]	@ (8004b8c <HAL_ADC_ConfigChannel+0xbf0>)
 8004926:	e000      	b.n	800492a <HAL_ADC_ConfigChannel+0x98e>
 8004928:	4b99      	ldr	r3, [pc, #612]	@ (8004b90 <HAL_ADC_ConfigChannel+0xbf4>)
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe f8dc 	bl	8002ae8 <LL_ADC_GetCommonPathInternalCh>
 8004930:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a96      	ldr	r2, [pc, #600]	@ (8004b94 <HAL_ADC_ConfigChannel+0xbf8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d12b      	bne.n	8004996 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800493e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004942:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d125      	bne.n	8004996 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a8d      	ldr	r2, [pc, #564]	@ (8004b84 <HAL_ADC_ConfigChannel+0xbe8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d004      	beq.n	800495e <HAL_ADC_ConfigChannel+0x9c2>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a8b      	ldr	r2, [pc, #556]	@ (8004b88 <HAL_ADC_ConfigChannel+0xbec>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d101      	bne.n	8004962 <HAL_ADC_ConfigChannel+0x9c6>
 800495e:	4a8b      	ldr	r2, [pc, #556]	@ (8004b8c <HAL_ADC_ConfigChannel+0xbf0>)
 8004960:	e000      	b.n	8004964 <HAL_ADC_ConfigChannel+0x9c8>
 8004962:	4a8b      	ldr	r2, [pc, #556]	@ (8004b90 <HAL_ADC_ConfigChannel+0xbf4>)
 8004964:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004968:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800496c:	4619      	mov	r1, r3
 800496e:	4610      	mov	r0, r2
 8004970:	f7fe f8a7 	bl	8002ac2 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004974:	4b88      	ldr	r3, [pc, #544]	@ (8004b98 <HAL_ADC_ConfigChannel+0xbfc>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	099b      	lsrs	r3, r3, #6
 800497a:	4a88      	ldr	r2, [pc, #544]	@ (8004b9c <HAL_ADC_ConfigChannel+0xc00>)
 800497c:	fba2 2303 	umull	r2, r3, r2, r3
 8004980:	099b      	lsrs	r3, r3, #6
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004986:	e002      	b.n	800498e <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	3b01      	subs	r3, #1
 800498c:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1f9      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004994:	e045      	b.n	8004a22 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a81      	ldr	r2, [pc, #516]	@ (8004ba0 <HAL_ADC_ConfigChannel+0xc04>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d11b      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80049a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d115      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a74      	ldr	r2, [pc, #464]	@ (8004b84 <HAL_ADC_ConfigChannel+0xbe8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d004      	beq.n	80049c0 <HAL_ADC_ConfigChannel+0xa24>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a73      	ldr	r2, [pc, #460]	@ (8004b88 <HAL_ADC_ConfigChannel+0xbec>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d101      	bne.n	80049c4 <HAL_ADC_ConfigChannel+0xa28>
 80049c0:	4a72      	ldr	r2, [pc, #456]	@ (8004b8c <HAL_ADC_ConfigChannel+0xbf0>)
 80049c2:	e000      	b.n	80049c6 <HAL_ADC_ConfigChannel+0xa2a>
 80049c4:	4a72      	ldr	r2, [pc, #456]	@ (8004b90 <HAL_ADC_ConfigChannel+0xbf4>)
 80049c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049ce:	4619      	mov	r1, r3
 80049d0:	4610      	mov	r0, r2
 80049d2:	f7fe f876 	bl	8002ac2 <LL_ADC_SetCommonPathInternalCh>
 80049d6:	e024      	b.n	8004a22 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a71      	ldr	r2, [pc, #452]	@ (8004ba4 <HAL_ADC_ConfigChannel+0xc08>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d11f      	bne.n	8004a22 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d115      	bne.n	8004a1a <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a64      	ldr	r2, [pc, #400]	@ (8004b84 <HAL_ADC_ConfigChannel+0xbe8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d004      	beq.n	8004a02 <HAL_ADC_ConfigChannel+0xa66>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a62      	ldr	r2, [pc, #392]	@ (8004b88 <HAL_ADC_ConfigChannel+0xbec>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d101      	bne.n	8004a06 <HAL_ADC_ConfigChannel+0xa6a>
 8004a02:	4a62      	ldr	r2, [pc, #392]	@ (8004b8c <HAL_ADC_ConfigChannel+0xbf0>)
 8004a04:	e000      	b.n	8004a08 <HAL_ADC_ConfigChannel+0xa6c>
 8004a06:	4a62      	ldr	r2, [pc, #392]	@ (8004b90 <HAL_ADC_ConfigChannel+0xbf4>)
 8004a08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a10:	4619      	mov	r1, r3
 8004a12:	4610      	mov	r0, r2
 8004a14:	f7fe f855 	bl	8002ac2 <LL_ADC_SetCommonPathInternalCh>
 8004a18:	e003      	b.n	8004a22 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a62      	ldr	r2, [pc, #392]	@ (8004ba8 <HAL_ADC_ConfigChannel+0xc0c>)
 8004a20:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a61      	ldr	r2, [pc, #388]	@ (8004bac <HAL_ADC_ConfigChannel+0xc10>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	f040 80ca 	bne.w	8004bc2 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f040 80c3 	bne.w	8004bc2 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f042 0201 	orr.w	r2, r2, #1
 8004a4c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004a50:	e0b7      	b.n	8004bc2 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a5a:	d004      	beq.n	8004a66 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004a60:	4a53      	ldr	r2, [pc, #332]	@ (8004bb0 <HAL_ADC_ConfigChannel+0xc14>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d106      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fe f9d9 	bl	8002e26 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f280 80a2 	bge.w	8004bc2 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a40      	ldr	r2, [pc, #256]	@ (8004b84 <HAL_ADC_ConfigChannel+0xbe8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <HAL_ADC_ConfigChannel+0xaf6>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a3e      	ldr	r2, [pc, #248]	@ (8004b88 <HAL_ADC_ConfigChannel+0xbec>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d101      	bne.n	8004a96 <HAL_ADC_ConfigChannel+0xafa>
 8004a92:	4b3e      	ldr	r3, [pc, #248]	@ (8004b8c <HAL_ADC_ConfigChannel+0xbf0>)
 8004a94:	e000      	b.n	8004a98 <HAL_ADC_ConfigChannel+0xafc>
 8004a96:	4b3e      	ldr	r3, [pc, #248]	@ (8004b90 <HAL_ADC_ConfigChannel+0xbf4>)
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fe f825 	bl	8002ae8 <LL_ADC_GetCommonPathInternalCh>
 8004a9e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a43      	ldr	r2, [pc, #268]	@ (8004bb4 <HAL_ADC_ConfigChannel+0xc18>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d115      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a34      	ldr	r2, [pc, #208]	@ (8004b84 <HAL_ADC_ConfigChannel+0xbe8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_ADC_ConfigChannel+0xb24>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a33      	ldr	r2, [pc, #204]	@ (8004b88 <HAL_ADC_ConfigChannel+0xbec>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d101      	bne.n	8004ac4 <HAL_ADC_ConfigChannel+0xb28>
 8004ac0:	4a32      	ldr	r2, [pc, #200]	@ (8004b8c <HAL_ADC_ConfigChannel+0xbf0>)
 8004ac2:	e000      	b.n	8004ac6 <HAL_ADC_ConfigChannel+0xb2a>
 8004ac4:	4a32      	ldr	r2, [pc, #200]	@ (8004b90 <HAL_ADC_ConfigChannel+0xbf4>)
 8004ac6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004aca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f7fd fff6 	bl	8002ac2 <LL_ADC_SetCommonPathInternalCh>
 8004ad6:	e034      	b.n	8004b42 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a36      	ldr	r2, [pc, #216]	@ (8004bb8 <HAL_ADC_ConfigChannel+0xc1c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d115      	bne.n	8004b0e <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a27      	ldr	r2, [pc, #156]	@ (8004b84 <HAL_ADC_ConfigChannel+0xbe8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d004      	beq.n	8004af6 <HAL_ADC_ConfigChannel+0xb5a>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a25      	ldr	r2, [pc, #148]	@ (8004b88 <HAL_ADC_ConfigChannel+0xbec>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d101      	bne.n	8004afa <HAL_ADC_ConfigChannel+0xb5e>
 8004af6:	4a25      	ldr	r2, [pc, #148]	@ (8004b8c <HAL_ADC_ConfigChannel+0xbf0>)
 8004af8:	e000      	b.n	8004afc <HAL_ADC_ConfigChannel+0xb60>
 8004afa:	4a25      	ldr	r2, [pc, #148]	@ (8004b90 <HAL_ADC_ConfigChannel+0xbf4>)
 8004afc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b04:	4619      	mov	r1, r3
 8004b06:	4610      	mov	r0, r2
 8004b08:	f7fd ffdb 	bl	8002ac2 <LL_ADC_SetCommonPathInternalCh>
 8004b0c:	e019      	b.n	8004b42 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a24      	ldr	r2, [pc, #144]	@ (8004ba4 <HAL_ADC_ConfigChannel+0xc08>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d114      	bne.n	8004b42 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a19      	ldr	r2, [pc, #100]	@ (8004b84 <HAL_ADC_ConfigChannel+0xbe8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d004      	beq.n	8004b2c <HAL_ADC_ConfigChannel+0xb90>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a18      	ldr	r2, [pc, #96]	@ (8004b88 <HAL_ADC_ConfigChannel+0xbec>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d101      	bne.n	8004b30 <HAL_ADC_ConfigChannel+0xb94>
 8004b2c:	4a17      	ldr	r2, [pc, #92]	@ (8004b8c <HAL_ADC_ConfigChannel+0xbf0>)
 8004b2e:	e000      	b.n	8004b32 <HAL_ADC_ConfigChannel+0xb96>
 8004b30:	4a17      	ldr	r2, [pc, #92]	@ (8004b90 <HAL_ADC_ConfigChannel+0xbf4>)
 8004b32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b36:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	f7fd ffc0 	bl	8002ac2 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a19      	ldr	r2, [pc, #100]	@ (8004bac <HAL_ADC_ConfigChannel+0xc10>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d13a      	bne.n	8004bc2 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d134      	bne.n	8004bc2 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 0201 	orr.w	r2, r2, #1
 8004b68:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004b6c:	e029      	b.n	8004bc2 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b72:	f043 0220 	orr.w	r2, r3, #32
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004b80:	e01f      	b.n	8004bc2 <HAL_ADC_ConfigChannel+0xc26>
 8004b82:	bf00      	nop
 8004b84:	42028000 	.word	0x42028000
 8004b88:	42028100 	.word	0x42028100
 8004b8c:	42028300 	.word	0x42028300
 8004b90:	46021300 	.word	0x46021300
 8004b94:	b6002000 	.word	0xb6002000
 8004b98:	20000000 	.word	0x20000000
 8004b9c:	053e2d63 	.word	0x053e2d63
 8004ba0:	ba004000 	.word	0xba004000
 8004ba4:	80000001 	.word	0x80000001
 8004ba8:	b2001000 	.word	0xb2001000
 8004bac:	d7200000 	.word	0xd7200000
 8004bb0:	80000010 	.word	0x80000010
 8004bb4:	ce080000 	.word	0xce080000
 8004bb8:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bbc:	bf00      	nop
 8004bbe:	e000      	b.n	8004bc2 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bc0:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004bca:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	37dc      	adds	r7, #220	@ 0xdc
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd90      	pop	{r4, r7, pc}
 8004bd6:	bf00      	nop

08004bd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fe fa5d 	bl	80030a4 <LL_ADC_IsEnabled>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d17b      	bne.n	8004ce8 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	4b3f      	ldr	r3, [pc, #252]	@ (8004cf4 <ADC_Enable+0x11c>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00d      	beq.n	8004c1a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c02:	f043 0210 	orr.w	r2, r3, #16
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c0e:	f043 0201 	orr.w	r2, r3, #1
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e067      	b.n	8004cea <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fe fa28 	bl	800307c <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d004      	beq.n	8004c3e <ADC_Enable+0x66>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a2f      	ldr	r2, [pc, #188]	@ (8004cf8 <ADC_Enable+0x120>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d054      	beq.n	8004ce8 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004c3e:	f7fd fed5 	bl	80029ec <HAL_GetTick>
 8004c42:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a2c      	ldr	r2, [pc, #176]	@ (8004cfc <ADC_Enable+0x124>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d004      	beq.n	8004c58 <ADC_Enable+0x80>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a2b      	ldr	r2, [pc, #172]	@ (8004d00 <ADC_Enable+0x128>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d101      	bne.n	8004c5c <ADC_Enable+0x84>
 8004c58:	4b2a      	ldr	r3, [pc, #168]	@ (8004d04 <ADC_Enable+0x12c>)
 8004c5a:	e000      	b.n	8004c5e <ADC_Enable+0x86>
 8004c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8004d08 <ADC_Enable+0x130>)
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fe f9a2 	bl	8002fa8 <LL_ADC_GetMultimode>
 8004c64:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a25      	ldr	r2, [pc, #148]	@ (8004d00 <ADC_Enable+0x128>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d002      	beq.n	8004c76 <ADC_Enable+0x9e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	e000      	b.n	8004c78 <ADC_Enable+0xa0>
 8004c76:	4b21      	ldr	r3, [pc, #132]	@ (8004cfc <ADC_Enable+0x124>)
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6812      	ldr	r2, [r2, #0]
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d02c      	beq.n	8004cda <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d130      	bne.n	8004ce8 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c86:	e028      	b.n	8004cda <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fe fa09 	bl	80030a4 <LL_ADC_IsEnabled>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d104      	bne.n	8004ca2 <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fe f9ed 	bl	800307c <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ca2:	f7fd fea3 	bl	80029ec <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d914      	bls.n	8004cda <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d00d      	beq.n	8004cda <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cc2:	f043 0210 	orr.w	r2, r3, #16
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cce:	f043 0201 	orr.w	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e007      	b.n	8004cea <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d1cf      	bne.n	8004c88 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	8000003f 	.word	0x8000003f
 8004cf8:	46021000 	.word	0x46021000
 8004cfc:	42028000 	.word	0x42028000
 8004d00:	42028100 	.word	0x42028100
 8004d04:	42028300 	.word	0x42028300
 8004d08:	46021300 	.word	0x46021300

08004d0c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d1e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d14b      	bne.n	8004dbe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d2a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d021      	beq.n	8004d84 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fd ffc7 	bl	8002cd8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d032      	beq.n	8004db6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d12b      	bne.n	8004db6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d62:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d11f      	bne.n	8004db6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d7a:	f043 0201 	orr.w	r2, r3, #1
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	679a      	str	r2, [r3, #120]	@ 0x78
 8004d82:	e018      	b.n	8004db6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d111      	bne.n	8004db6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d96:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004da2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d105      	bne.n	8004db6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dae:	f043 0201 	orr.w	r2, r3, #1
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f7ff f8aa 	bl	8003f10 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004dbc:	e00e      	b.n	8004ddc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dc2:	f003 0310 	and.w	r3, r3, #16
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7ff f8be 	bl	8003f4c <HAL_ADC_ErrorCallback>
}
 8004dd0:	e004      	b.n	8004ddc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	4798      	blx	r3
}
 8004ddc:	bf00      	nop
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f7ff f896 	bl	8003f24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e1e:	f043 0204 	orr.w	r2, r3, #4
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f7ff f890 	bl	8003f4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e2c:	bf00      	nop
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e94:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004eac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004eb6:	4a04      	ldr	r2, [pc, #16]	@ (8004ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	60d3      	str	r3, [r2, #12]
}
 8004ebc:	bf00      	nop
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	e000ed00 	.word	0xe000ed00

08004ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ed0:	4b04      	ldr	r3, [pc, #16]	@ (8004ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	0a1b      	lsrs	r3, r3, #8
 8004ed6:	f003 0307 	and.w	r3, r3, #7
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	e000ed00 	.word	0xe000ed00

08004ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	db0b      	blt.n	8004f12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004efa:	88fb      	ldrh	r3, [r7, #6]
 8004efc:	f003 021f 	and.w	r2, r3, #31
 8004f00:	4907      	ldr	r1, [pc, #28]	@ (8004f20 <__NVIC_EnableIRQ+0x38>)
 8004f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f06:	095b      	lsrs	r3, r3, #5
 8004f08:	2001      	movs	r0, #1
 8004f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	e000e100 	.word	0xe000e100

08004f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	6039      	str	r1, [r7, #0]
 8004f2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	db0a      	blt.n	8004f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	490c      	ldr	r1, [pc, #48]	@ (8004f70 <__NVIC_SetPriority+0x4c>)
 8004f3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f42:	0112      	lsls	r2, r2, #4
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	440b      	add	r3, r1
 8004f48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f4c:	e00a      	b.n	8004f64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	4908      	ldr	r1, [pc, #32]	@ (8004f74 <__NVIC_SetPriority+0x50>)
 8004f54:	88fb      	ldrh	r3, [r7, #6]
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	3b04      	subs	r3, #4
 8004f5c:	0112      	lsls	r2, r2, #4
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	440b      	add	r3, r1
 8004f62:	761a      	strb	r2, [r3, #24]
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	e000e100 	.word	0xe000e100
 8004f74:	e000ed00 	.word	0xe000ed00

08004f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b089      	sub	sp, #36	@ 0x24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f1c3 0307 	rsb	r3, r3, #7
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	bf28      	it	cs
 8004f96:	2304      	movcs	r3, #4
 8004f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	2b06      	cmp	r3, #6
 8004fa0:	d902      	bls.n	8004fa8 <NVIC_EncodePriority+0x30>
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	3b03      	subs	r3, #3
 8004fa6:	e000      	b.n	8004faa <NVIC_EncodePriority+0x32>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fac:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	43da      	mvns	r2, r3
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	401a      	ands	r2, r3
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fca:	43d9      	mvns	r1, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fd0:	4313      	orrs	r3, r2
         );
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3724      	adds	r7, #36	@ 0x24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff ff4c 	bl	8004e84 <__NVIC_SetPriorityGrouping>
}
 8004fec:	bf00      	nop
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005002:	f7ff ff63 	bl	8004ecc <__NVIC_GetPriorityGrouping>
 8005006:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	68b9      	ldr	r1, [r7, #8]
 800500c:	6978      	ldr	r0, [r7, #20]
 800500e:	f7ff ffb3 	bl	8004f78 <NVIC_EncodePriority>
 8005012:	4602      	mov	r2, r0
 8005014:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005018:	4611      	mov	r1, r2
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff ff82 	bl	8004f24 <__NVIC_SetPriority>
}
 8005020:	bf00      	nop
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	4603      	mov	r3, r0
 8005030:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff ff56 	bl	8004ee8 <__NVIC_EnableIRQ>
}
 800503c:	bf00      	nop
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3b01      	subs	r3, #1
 8005050:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005054:	d301      	bcc.n	800505a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8005056:	2301      	movs	r3, #1
 8005058:	e00d      	b.n	8005076 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800505a:	4a0a      	ldr	r2, [pc, #40]	@ (8005084 <HAL_SYSTICK_Config+0x40>)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3b01      	subs	r3, #1
 8005060:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8005062:	4b08      	ldr	r3, [pc, #32]	@ (8005084 <HAL_SYSTICK_Config+0x40>)
 8005064:	2200      	movs	r2, #0
 8005066:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8005068:	4b06      	ldr	r3, [pc, #24]	@ (8005084 <HAL_SYSTICK_Config+0x40>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a05      	ldr	r2, [pc, #20]	@ (8005084 <HAL_SYSTICK_Config+0x40>)
 800506e:	f043 0303 	orr.w	r3, r3, #3
 8005072:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	e000e010 	.word	0xe000e010

08005088 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b04      	cmp	r3, #4
 8005094:	d844      	bhi.n	8005120 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005096:	a201      	add	r2, pc, #4	@ (adr r2, 800509c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509c:	080050bf 	.word	0x080050bf
 80050a0:	080050dd 	.word	0x080050dd
 80050a4:	080050ff 	.word	0x080050ff
 80050a8:	08005121 	.word	0x08005121
 80050ac:	080050b1 	.word	0x080050b1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80050b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005130 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005130 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80050b6:	f043 0304 	orr.w	r3, r3, #4
 80050ba:	6013      	str	r3, [r2, #0]
      break;
 80050bc:	e031      	b.n	8005122 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80050be:	4b1c      	ldr	r3, [pc, #112]	@ (8005130 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005130 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80050c4:	f023 0304 	bic.w	r3, r3, #4
 80050c8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80050ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005134 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80050cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050d0:	4a18      	ldr	r2, [pc, #96]	@ (8005134 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80050d2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80050d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80050da:	e022      	b.n	8005122 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80050dc:	4b14      	ldr	r3, [pc, #80]	@ (8005130 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a13      	ldr	r2, [pc, #76]	@ (8005130 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80050e2:	f023 0304 	bic.w	r3, r3, #4
 80050e6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80050e8:	4b12      	ldr	r3, [pc, #72]	@ (8005134 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80050ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050ee:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80050f2:	4a10      	ldr	r2, [pc, #64]	@ (8005134 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80050f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80050f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80050fc:	e011      	b.n	8005122 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80050fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005130 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a0b      	ldr	r2, [pc, #44]	@ (8005130 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005104:	f023 0304 	bic.w	r3, r3, #4
 8005108:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800510a:	4b0a      	ldr	r3, [pc, #40]	@ (8005134 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800510c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005110:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005114:	4a07      	ldr	r2, [pc, #28]	@ (8005134 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005116:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800511a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800511e:	e000      	b.n	8005122 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8005120:	bf00      	nop
  }
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	e000e010 	.word	0xe000e010
 8005134:	46020c00 	.word	0x46020c00

08005138 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800513e:	4b19      	ldr	r3, [pc, #100]	@ (80051a4 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800514a:	2304      	movs	r3, #4
 800514c:	607b      	str	r3, [r7, #4]
 800514e:	e021      	b.n	8005194 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8005150:	4b15      	ldr	r3, [pc, #84]	@ (80051a8 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8005152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005156:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800515a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005162:	d011      	beq.n	8005188 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800516a:	d810      	bhi.n	800518e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d004      	beq.n	800517c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005178:	d003      	beq.n	8005182 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800517a:	e008      	b.n	800518e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800517c:	2300      	movs	r3, #0
 800517e:	607b      	str	r3, [r7, #4]
        break;
 8005180:	e008      	b.n	8005194 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8005182:	2301      	movs	r3, #1
 8005184:	607b      	str	r3, [r7, #4]
        break;
 8005186:	e005      	b.n	8005194 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005188:	2302      	movs	r3, #2
 800518a:	607b      	str	r3, [r7, #4]
        break;
 800518c:	e002      	b.n	8005194 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800518e:	2300      	movs	r3, #0
 8005190:	607b      	str	r3, [r7, #4]
        break;
 8005192:	bf00      	nop
    }
  }
  return systick_source;
 8005194:	687b      	ldr	r3, [r7, #4]
}
 8005196:	4618      	mov	r0, r3
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	e000e010 	.word	0xe000e010
 80051a8:	46020c00 	.word	0x46020c00

080051ac <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80051b4:	f7fd fc1a 	bl	80029ec <HAL_GetTick>
 80051b8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e0db      	b.n	800537c <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a6e      	ldr	r2, [pc, #440]	@ (8005384 <HAL_DMA_Init+0x1d8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	f000 809f 	beq.w	800530e <HAL_DMA_Init+0x162>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a6c      	ldr	r2, [pc, #432]	@ (8005388 <HAL_DMA_Init+0x1dc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	f000 8099 	beq.w	800530e <HAL_DMA_Init+0x162>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a6a      	ldr	r2, [pc, #424]	@ (800538c <HAL_DMA_Init+0x1e0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	f000 8093 	beq.w	800530e <HAL_DMA_Init+0x162>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a68      	ldr	r2, [pc, #416]	@ (8005390 <HAL_DMA_Init+0x1e4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	f000 808d 	beq.w	800530e <HAL_DMA_Init+0x162>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a66      	ldr	r2, [pc, #408]	@ (8005394 <HAL_DMA_Init+0x1e8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	f000 8087 	beq.w	800530e <HAL_DMA_Init+0x162>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a64      	ldr	r2, [pc, #400]	@ (8005398 <HAL_DMA_Init+0x1ec>)
 8005206:	4293      	cmp	r3, r2
 8005208:	f000 8081 	beq.w	800530e <HAL_DMA_Init+0x162>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a62      	ldr	r2, [pc, #392]	@ (800539c <HAL_DMA_Init+0x1f0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d07b      	beq.n	800530e <HAL_DMA_Init+0x162>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a61      	ldr	r2, [pc, #388]	@ (80053a0 <HAL_DMA_Init+0x1f4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d076      	beq.n	800530e <HAL_DMA_Init+0x162>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a5f      	ldr	r2, [pc, #380]	@ (80053a4 <HAL_DMA_Init+0x1f8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d071      	beq.n	800530e <HAL_DMA_Init+0x162>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a5e      	ldr	r2, [pc, #376]	@ (80053a8 <HAL_DMA_Init+0x1fc>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d06c      	beq.n	800530e <HAL_DMA_Init+0x162>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a5c      	ldr	r2, [pc, #368]	@ (80053ac <HAL_DMA_Init+0x200>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d067      	beq.n	800530e <HAL_DMA_Init+0x162>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a5b      	ldr	r2, [pc, #364]	@ (80053b0 <HAL_DMA_Init+0x204>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d062      	beq.n	800530e <HAL_DMA_Init+0x162>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a59      	ldr	r2, [pc, #356]	@ (80053b4 <HAL_DMA_Init+0x208>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d05d      	beq.n	800530e <HAL_DMA_Init+0x162>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a58      	ldr	r2, [pc, #352]	@ (80053b8 <HAL_DMA_Init+0x20c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d058      	beq.n	800530e <HAL_DMA_Init+0x162>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a56      	ldr	r2, [pc, #344]	@ (80053bc <HAL_DMA_Init+0x210>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d053      	beq.n	800530e <HAL_DMA_Init+0x162>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a55      	ldr	r2, [pc, #340]	@ (80053c0 <HAL_DMA_Init+0x214>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d04e      	beq.n	800530e <HAL_DMA_Init+0x162>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a53      	ldr	r2, [pc, #332]	@ (80053c4 <HAL_DMA_Init+0x218>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d049      	beq.n	800530e <HAL_DMA_Init+0x162>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a52      	ldr	r2, [pc, #328]	@ (80053c8 <HAL_DMA_Init+0x21c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d044      	beq.n	800530e <HAL_DMA_Init+0x162>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a50      	ldr	r2, [pc, #320]	@ (80053cc <HAL_DMA_Init+0x220>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d03f      	beq.n	800530e <HAL_DMA_Init+0x162>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a4f      	ldr	r2, [pc, #316]	@ (80053d0 <HAL_DMA_Init+0x224>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d03a      	beq.n	800530e <HAL_DMA_Init+0x162>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a4d      	ldr	r2, [pc, #308]	@ (80053d4 <HAL_DMA_Init+0x228>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d035      	beq.n	800530e <HAL_DMA_Init+0x162>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a4c      	ldr	r2, [pc, #304]	@ (80053d8 <HAL_DMA_Init+0x22c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d030      	beq.n	800530e <HAL_DMA_Init+0x162>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a4a      	ldr	r2, [pc, #296]	@ (80053dc <HAL_DMA_Init+0x230>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d02b      	beq.n	800530e <HAL_DMA_Init+0x162>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a49      	ldr	r2, [pc, #292]	@ (80053e0 <HAL_DMA_Init+0x234>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d026      	beq.n	800530e <HAL_DMA_Init+0x162>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a47      	ldr	r2, [pc, #284]	@ (80053e4 <HAL_DMA_Init+0x238>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d021      	beq.n	800530e <HAL_DMA_Init+0x162>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a46      	ldr	r2, [pc, #280]	@ (80053e8 <HAL_DMA_Init+0x23c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d01c      	beq.n	800530e <HAL_DMA_Init+0x162>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a44      	ldr	r2, [pc, #272]	@ (80053ec <HAL_DMA_Init+0x240>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d017      	beq.n	800530e <HAL_DMA_Init+0x162>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a43      	ldr	r2, [pc, #268]	@ (80053f0 <HAL_DMA_Init+0x244>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d012      	beq.n	800530e <HAL_DMA_Init+0x162>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a41      	ldr	r2, [pc, #260]	@ (80053f4 <HAL_DMA_Init+0x248>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00d      	beq.n	800530e <HAL_DMA_Init+0x162>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a40      	ldr	r2, [pc, #256]	@ (80053f8 <HAL_DMA_Init+0x24c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d008      	beq.n	800530e <HAL_DMA_Init+0x162>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a3e      	ldr	r2, [pc, #248]	@ (80053fc <HAL_DMA_Init+0x250>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d003      	beq.n	800530e <HAL_DMA_Init+0x162>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a3d      	ldr	r2, [pc, #244]	@ (8005400 <HAL_DMA_Init+0x254>)
 800530c:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2202      	movs	r2, #2
 800531a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695a      	ldr	r2, [r3, #20]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0206 	orr.w	r2, r2, #6
 800532c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800532e:	e00f      	b.n	8005350 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005330:	f7fd fb5c 	bl	80029ec <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b05      	cmp	r3, #5
 800533c:	d908      	bls.n	8005350 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2210      	movs	r2, #16
 8005342:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2203      	movs	r2, #3
 8005348:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e015      	b.n	800537c <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e8      	bne.n	8005330 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fb26 	bl	80059b0 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40020050 	.word	0x40020050
 8005388:	50020050 	.word	0x50020050
 800538c:	400200d0 	.word	0x400200d0
 8005390:	500200d0 	.word	0x500200d0
 8005394:	40020150 	.word	0x40020150
 8005398:	50020150 	.word	0x50020150
 800539c:	400201d0 	.word	0x400201d0
 80053a0:	500201d0 	.word	0x500201d0
 80053a4:	40020250 	.word	0x40020250
 80053a8:	50020250 	.word	0x50020250
 80053ac:	400202d0 	.word	0x400202d0
 80053b0:	500202d0 	.word	0x500202d0
 80053b4:	40020350 	.word	0x40020350
 80053b8:	50020350 	.word	0x50020350
 80053bc:	400203d0 	.word	0x400203d0
 80053c0:	500203d0 	.word	0x500203d0
 80053c4:	40020450 	.word	0x40020450
 80053c8:	50020450 	.word	0x50020450
 80053cc:	400204d0 	.word	0x400204d0
 80053d0:	500204d0 	.word	0x500204d0
 80053d4:	40020550 	.word	0x40020550
 80053d8:	50020550 	.word	0x50020550
 80053dc:	400205d0 	.word	0x400205d0
 80053e0:	500205d0 	.word	0x500205d0
 80053e4:	40020650 	.word	0x40020650
 80053e8:	50020650 	.word	0x50020650
 80053ec:	400206d0 	.word	0x400206d0
 80053f0:	500206d0 	.word	0x500206d0
 80053f4:	40020750 	.word	0x40020750
 80053f8:	50020750 	.word	0x50020750
 80053fc:	400207d0 	.word	0x400207d0
 8005400:	500207d0 	.word	0x500207d0

08005404 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e04f      	b.n	80054bc <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <HAL_DMA_Start_IT+0x26>
 8005426:	2302      	movs	r3, #2
 8005428:	e048      	b.n	80054bc <HAL_DMA_Start_IT+0xb8>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b01      	cmp	r3, #1
 800543c:	d136      	bne.n	80054ac <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2202      	movs	r2, #2
 8005442:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	68b9      	ldr	r1, [r7, #8]
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 fa86 	bl	8005964 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695a      	ldr	r2, [r3, #20]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8005466:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800546c:	2b00      	cmp	r3, #0
 800546e:	d007      	beq.n	8005480 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695a      	ldr	r2, [r3, #20]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800547e:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005484:	2b00      	cmp	r3, #0
 8005486:	d007      	beq.n	8005498 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	695a      	ldr	r2, [r3, #20]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005496:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695a      	ldr	r2, [r3, #20]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0201 	orr.w	r2, r2, #1
 80054a6:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	e007      	b.n	80054bc <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2240      	movs	r2, #64	@ 0x40
 80054b0:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80054cc:	f7fd fa8e 	bl	80029ec <HAL_GetTick>
 80054d0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e06b      	b.n	80055b4 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d008      	beq.n	80054fa <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e05c      	b.n	80055b4 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	695a      	ldr	r2, [r3, #20]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0204 	orr.w	r2, r2, #4
 8005508:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2205      	movs	r2, #5
 800550e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005512:	e020      	b.n	8005556 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005514:	f7fd fa6a 	bl	80029ec <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b05      	cmp	r3, #5
 8005520:	d919      	bls.n	8005556 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005526:	f043 0210 	orr.w	r2, r3, #16
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2203      	movs	r2, #3
 8005532:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800553a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005546:	2201      	movs	r2, #1
 8005548:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e02e      	b.n	80055b4 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0d7      	beq.n	8005514 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695a      	ldr	r2, [r3, #20]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0202 	orr.w	r2, r2, #2
 8005572:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2204      	movs	r2, #4
 8005578:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005584:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005596:	2b00      	cmp	r3, #0
 8005598:	d007      	beq.n	80055aa <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800559e:	2201      	movs	r2, #1
 80055a0:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2200      	movs	r2, #0
 80055a8:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e019      	b.n	8005602 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d004      	beq.n	80055e4 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2220      	movs	r2, #32
 80055de:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e00e      	b.n	8005602 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2204      	movs	r2, #4
 80055e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6812      	ldr	r2, [r2, #0]
 80055f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80055fa:	f043 0304 	orr.w	r3, r3, #4
 80055fe:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b086      	sub	sp, #24
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800561e:	f023 030f 	bic.w	r3, r3, #15
 8005622:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800562c:	3b50      	subs	r3, #80	@ 0x50
 800562e:	09db      	lsrs	r3, r3, #7
 8005630:	f003 031f 	and.w	r3, r3, #31
 8005634:	2201      	movs	r2, #1
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	4013      	ands	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 813b 	beq.w	80058c4 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005658:	2b00      	cmp	r3, #0
 800565a:	d011      	beq.n	8005680 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005672:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005678:	f043 0201 	orr.w	r2, r3, #1
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800568a:	2b00      	cmp	r3, #0
 800568c:	d011      	beq.n	80056b2 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00a      	beq.n	80056b2 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056a4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056aa:	f043 0202 	orr.w	r2, r3, #2
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d011      	beq.n	80056e4 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80056d6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056dc:	f043 0204 	orr.w	r2, r3, #4
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d011      	beq.n	8005716 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005708:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800570e:	f043 0208 	orr.w	r2, r3, #8
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005720:	2b00      	cmp	r3, #0
 8005722:	d013      	beq.n	800574c <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00c      	beq.n	800574c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800573a:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d04c      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d045      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005770:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b04      	cmp	r3, #4
 800577c:	d12e      	bne.n	80057dc <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	695a      	ldr	r2, [r3, #20]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800578c:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695a      	ldr	r2, [r3, #20]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0202 	orr.w	r2, r2, #2
 800579c:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d007      	beq.n	80057c2 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057b6:	2201      	movs	r2, #1
 80057b8:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2200      	movs	r2, #0
 80057c0:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d07a      	beq.n	80058c8 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	4798      	blx	r3
        }

        return;
 80057da:	e075      	b.n	80058c8 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2205      	movs	r2, #5
 80057e0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d039      	beq.n	8005876 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800580c:	2b00      	cmp	r3, #0
 800580e:	d032      	beq.n	8005876 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005818:	2b00      	cmp	r3, #0
 800581a:	d012      	beq.n	8005842 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005822:	2b00      	cmp	r3, #0
 8005824:	d116      	bne.n	8005854 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800582c:	2b00      	cmp	r3, #0
 800582e:	d111      	bne.n	8005854 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800583c:	2201      	movs	r2, #1
 800583e:	731a      	strb	r2, [r3, #12]
 8005840:	e008      	b.n	8005854 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005848:	2b00      	cmp	r3, #0
 800584a:	d103      	bne.n	8005854 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800585c:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587a:	2b00      	cmp	r3, #0
 800587c:	d025      	beq.n	80058ca <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695a      	ldr	r2, [r3, #20]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0202 	orr.w	r2, r2, #2
 800588c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800589a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058a6:	2201      	movs	r2, #1
 80058a8:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d007      	beq.n	80058ca <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	4798      	blx	r3
 80058c2:	e002      	b.n	80058ca <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80058c4:	bf00      	nop
 80058c6:	e000      	b.n	80058ca <HAL_DMA_IRQHandler+0x2bc>
        return;
 80058c8:	bf00      	nop
    }
  }
}
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80058de:	b2db      	uxtb	r3, r3
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e02b      	b.n	8005958 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005908:	f023 030f 	bic.w	r3, r3, #15
 800590c:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005916:	3b50      	subs	r3, #80	@ 0x50
 8005918:	09db      	lsrs	r3, r3, #7
 800591a:	f003 031f 	and.w	r3, r3, #31
 800591e:	2201      	movs	r2, #1
 8005920:	fa02 f303 	lsl.w	r3, r2, r3
 8005924:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	2b00      	cmp	r3, #0
 800592e:	d012      	beq.n	8005956 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	f003 0311 	and.w	r3, r3, #17
 8005936:	2b11      	cmp	r3, #17
 8005938:	d106      	bne.n	8005948 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	431a      	orrs	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	605a      	str	r2, [r3, #4]
 8005946:	e006      	b.n	8005956 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	43db      	mvns	r3, r3
 8005950:	401a      	ands	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005978:	0c1b      	lsrs	r3, r3, #16
 800597a:	041b      	lsls	r3, r3, #16
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	b291      	uxth	r1, r2
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	6812      	ldr	r2, [r2, #0]
 8005984:	430b      	orrs	r3, r1
 8005986:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005990:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80059a2:	bf00      	nop
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
	...

080059b0 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695a      	ldr	r2, [r3, #20]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	431a      	orrs	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a53      	ldr	r2, [pc, #332]	@ (8005b3c <DMA_Init+0x18c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	f000 80a0 	beq.w	8005b36 <DMA_Init+0x186>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a51      	ldr	r2, [pc, #324]	@ (8005b40 <DMA_Init+0x190>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	f000 809a 	beq.w	8005b36 <DMA_Init+0x186>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a4f      	ldr	r2, [pc, #316]	@ (8005b44 <DMA_Init+0x194>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	f000 8094 	beq.w	8005b36 <DMA_Init+0x186>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a4d      	ldr	r2, [pc, #308]	@ (8005b48 <DMA_Init+0x198>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	f000 808e 	beq.w	8005b36 <DMA_Init+0x186>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a4b      	ldr	r2, [pc, #300]	@ (8005b4c <DMA_Init+0x19c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	f000 8088 	beq.w	8005b36 <DMA_Init+0x186>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a49      	ldr	r2, [pc, #292]	@ (8005b50 <DMA_Init+0x1a0>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	f000 8082 	beq.w	8005b36 <DMA_Init+0x186>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a47      	ldr	r2, [pc, #284]	@ (8005b54 <DMA_Init+0x1a4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d07c      	beq.n	8005b36 <DMA_Init+0x186>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a45      	ldr	r2, [pc, #276]	@ (8005b58 <DMA_Init+0x1a8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d077      	beq.n	8005b36 <DMA_Init+0x186>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a44      	ldr	r2, [pc, #272]	@ (8005b5c <DMA_Init+0x1ac>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d072      	beq.n	8005b36 <DMA_Init+0x186>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a42      	ldr	r2, [pc, #264]	@ (8005b60 <DMA_Init+0x1b0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d06d      	beq.n	8005b36 <DMA_Init+0x186>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a41      	ldr	r2, [pc, #260]	@ (8005b64 <DMA_Init+0x1b4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d068      	beq.n	8005b36 <DMA_Init+0x186>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a3f      	ldr	r2, [pc, #252]	@ (8005b68 <DMA_Init+0x1b8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d063      	beq.n	8005b36 <DMA_Init+0x186>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a3e      	ldr	r2, [pc, #248]	@ (8005b6c <DMA_Init+0x1bc>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d05e      	beq.n	8005b36 <DMA_Init+0x186>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a3c      	ldr	r2, [pc, #240]	@ (8005b70 <DMA_Init+0x1c0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d059      	beq.n	8005b36 <DMA_Init+0x186>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a3b      	ldr	r2, [pc, #236]	@ (8005b74 <DMA_Init+0x1c4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d054      	beq.n	8005b36 <DMA_Init+0x186>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a39      	ldr	r2, [pc, #228]	@ (8005b78 <DMA_Init+0x1c8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d04f      	beq.n	8005b36 <DMA_Init+0x186>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a38      	ldr	r2, [pc, #224]	@ (8005b7c <DMA_Init+0x1cc>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d04a      	beq.n	8005b36 <DMA_Init+0x186>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a36      	ldr	r2, [pc, #216]	@ (8005b80 <DMA_Init+0x1d0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d045      	beq.n	8005b36 <DMA_Init+0x186>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a35      	ldr	r2, [pc, #212]	@ (8005b84 <DMA_Init+0x1d4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d040      	beq.n	8005b36 <DMA_Init+0x186>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a33      	ldr	r2, [pc, #204]	@ (8005b88 <DMA_Init+0x1d8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d03b      	beq.n	8005b36 <DMA_Init+0x186>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a32      	ldr	r2, [pc, #200]	@ (8005b8c <DMA_Init+0x1dc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d036      	beq.n	8005b36 <DMA_Init+0x186>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a30      	ldr	r2, [pc, #192]	@ (8005b90 <DMA_Init+0x1e0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d031      	beq.n	8005b36 <DMA_Init+0x186>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a2f      	ldr	r2, [pc, #188]	@ (8005b94 <DMA_Init+0x1e4>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d02c      	beq.n	8005b36 <DMA_Init+0x186>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8005b98 <DMA_Init+0x1e8>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d027      	beq.n	8005b36 <DMA_Init+0x186>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a2c      	ldr	r2, [pc, #176]	@ (8005b9c <DMA_Init+0x1ec>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d022      	beq.n	8005b36 <DMA_Init+0x186>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a2a      	ldr	r2, [pc, #168]	@ (8005ba0 <DMA_Init+0x1f0>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d01d      	beq.n	8005b36 <DMA_Init+0x186>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a29      	ldr	r2, [pc, #164]	@ (8005ba4 <DMA_Init+0x1f4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d018      	beq.n	8005b36 <DMA_Init+0x186>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a27      	ldr	r2, [pc, #156]	@ (8005ba8 <DMA_Init+0x1f8>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d013      	beq.n	8005b36 <DMA_Init+0x186>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a26      	ldr	r2, [pc, #152]	@ (8005bac <DMA_Init+0x1fc>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00e      	beq.n	8005b36 <DMA_Init+0x186>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a24      	ldr	r2, [pc, #144]	@ (8005bb0 <DMA_Init+0x200>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d009      	beq.n	8005b36 <DMA_Init+0x186>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a23      	ldr	r2, [pc, #140]	@ (8005bb4 <DMA_Init+0x204>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d004      	beq.n	8005b36 <DMA_Init+0x186>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a21      	ldr	r2, [pc, #132]	@ (8005bb8 <DMA_Init+0x208>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d142      	bne.n	8005bbc <DMA_Init+0x20c>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e041      	b.n	8005bbe <DMA_Init+0x20e>
 8005b3a:	bf00      	nop
 8005b3c:	40020050 	.word	0x40020050
 8005b40:	50020050 	.word	0x50020050
 8005b44:	400200d0 	.word	0x400200d0
 8005b48:	500200d0 	.word	0x500200d0
 8005b4c:	40020150 	.word	0x40020150
 8005b50:	50020150 	.word	0x50020150
 8005b54:	400201d0 	.word	0x400201d0
 8005b58:	500201d0 	.word	0x500201d0
 8005b5c:	40020250 	.word	0x40020250
 8005b60:	50020250 	.word	0x50020250
 8005b64:	400202d0 	.word	0x400202d0
 8005b68:	500202d0 	.word	0x500202d0
 8005b6c:	40020350 	.word	0x40020350
 8005b70:	50020350 	.word	0x50020350
 8005b74:	400203d0 	.word	0x400203d0
 8005b78:	500203d0 	.word	0x500203d0
 8005b7c:	40020450 	.word	0x40020450
 8005b80:	50020450 	.word	0x50020450
 8005b84:	400204d0 	.word	0x400204d0
 8005b88:	500204d0 	.word	0x500204d0
 8005b8c:	40020550 	.word	0x40020550
 8005b90:	50020550 	.word	0x50020550
 8005b94:	400205d0 	.word	0x400205d0
 8005b98:	500205d0 	.word	0x500205d0
 8005b9c:	40020650 	.word	0x40020650
 8005ba0:	50020650 	.word	0x50020650
 8005ba4:	400206d0 	.word	0x400206d0
 8005ba8:	500206d0 	.word	0x500206d0
 8005bac:	40020750 	.word	0x40020750
 8005bb0:	50020750 	.word	0x50020750
 8005bb4:	400207d0 	.word	0x400207d0
 8005bb8:	500207d0 	.word	0x500207d0
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d012      	beq.n	8005be8 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	051b      	lsls	r3, r3, #20
 8005bce:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005bd2:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005be0:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bee:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c1a:	f040 80b0 	bne.w	8005d7e <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a82      	ldr	r2, [pc, #520]	@ (8005e2c <DMA_Init+0x47c>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	f000 80a0 	beq.w	8005d6a <DMA_Init+0x3ba>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a80      	ldr	r2, [pc, #512]	@ (8005e30 <DMA_Init+0x480>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	f000 809a 	beq.w	8005d6a <DMA_Init+0x3ba>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a7e      	ldr	r2, [pc, #504]	@ (8005e34 <DMA_Init+0x484>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	f000 8094 	beq.w	8005d6a <DMA_Init+0x3ba>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a7c      	ldr	r2, [pc, #496]	@ (8005e38 <DMA_Init+0x488>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	f000 808e 	beq.w	8005d6a <DMA_Init+0x3ba>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a7a      	ldr	r2, [pc, #488]	@ (8005e3c <DMA_Init+0x48c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	f000 8088 	beq.w	8005d6a <DMA_Init+0x3ba>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a78      	ldr	r2, [pc, #480]	@ (8005e40 <DMA_Init+0x490>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	f000 8082 	beq.w	8005d6a <DMA_Init+0x3ba>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a76      	ldr	r2, [pc, #472]	@ (8005e44 <DMA_Init+0x494>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d07c      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a74      	ldr	r2, [pc, #464]	@ (8005e48 <DMA_Init+0x498>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d077      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a73      	ldr	r2, [pc, #460]	@ (8005e4c <DMA_Init+0x49c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d072      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a71      	ldr	r2, [pc, #452]	@ (8005e50 <DMA_Init+0x4a0>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d06d      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a70      	ldr	r2, [pc, #448]	@ (8005e54 <DMA_Init+0x4a4>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d068      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a6e      	ldr	r2, [pc, #440]	@ (8005e58 <DMA_Init+0x4a8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d063      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a6d      	ldr	r2, [pc, #436]	@ (8005e5c <DMA_Init+0x4ac>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d05e      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a6b      	ldr	r2, [pc, #428]	@ (8005e60 <DMA_Init+0x4b0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d059      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a6a      	ldr	r2, [pc, #424]	@ (8005e64 <DMA_Init+0x4b4>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d054      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a68      	ldr	r2, [pc, #416]	@ (8005e68 <DMA_Init+0x4b8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d04f      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a67      	ldr	r2, [pc, #412]	@ (8005e6c <DMA_Init+0x4bc>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d04a      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a65      	ldr	r2, [pc, #404]	@ (8005e70 <DMA_Init+0x4c0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d045      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a64      	ldr	r2, [pc, #400]	@ (8005e74 <DMA_Init+0x4c4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d040      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a62      	ldr	r2, [pc, #392]	@ (8005e78 <DMA_Init+0x4c8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d03b      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a61      	ldr	r2, [pc, #388]	@ (8005e7c <DMA_Init+0x4cc>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d036      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a5f      	ldr	r2, [pc, #380]	@ (8005e80 <DMA_Init+0x4d0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d031      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a5e      	ldr	r2, [pc, #376]	@ (8005e84 <DMA_Init+0x4d4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d02c      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a5c      	ldr	r2, [pc, #368]	@ (8005e88 <DMA_Init+0x4d8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d027      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a5b      	ldr	r2, [pc, #364]	@ (8005e8c <DMA_Init+0x4dc>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d022      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a59      	ldr	r2, [pc, #356]	@ (8005e90 <DMA_Init+0x4e0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d01d      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a58      	ldr	r2, [pc, #352]	@ (8005e94 <DMA_Init+0x4e4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d018      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a56      	ldr	r2, [pc, #344]	@ (8005e98 <DMA_Init+0x4e8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d013      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a55      	ldr	r2, [pc, #340]	@ (8005e9c <DMA_Init+0x4ec>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d00e      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a53      	ldr	r2, [pc, #332]	@ (8005ea0 <DMA_Init+0x4f0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d009      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a52      	ldr	r2, [pc, #328]	@ (8005ea4 <DMA_Init+0x4f4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d004      	beq.n	8005d6a <DMA_Init+0x3ba>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a50      	ldr	r2, [pc, #320]	@ (8005ea8 <DMA_Init+0x4f8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d101      	bne.n	8005d6e <DMA_Init+0x3be>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e000      	b.n	8005d70 <DMA_Init+0x3c0>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00d      	beq.n	8005d90 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	e008      	b.n	8005d90 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d86:	d103      	bne.n	8005d90 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d8e:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d96:	4b45      	ldr	r3, [pc, #276]	@ (8005eac <DMA_Init+0x4fc>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6812      	ldr	r2, [r2, #0]
 8005d9e:	68f9      	ldr	r1, [r7, #12]
 8005da0:	430b      	orrs	r3, r1
 8005da2:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2200      	movs	r2, #0
 8005daa:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a36      	ldr	r2, [pc, #216]	@ (8005e8c <DMA_Init+0x4dc>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d022      	beq.n	8005dfc <DMA_Init+0x44c>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a35      	ldr	r2, [pc, #212]	@ (8005e90 <DMA_Init+0x4e0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d01d      	beq.n	8005dfc <DMA_Init+0x44c>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a33      	ldr	r2, [pc, #204]	@ (8005e94 <DMA_Init+0x4e4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d018      	beq.n	8005dfc <DMA_Init+0x44c>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a32      	ldr	r2, [pc, #200]	@ (8005e98 <DMA_Init+0x4e8>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d013      	beq.n	8005dfc <DMA_Init+0x44c>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a30      	ldr	r2, [pc, #192]	@ (8005e9c <DMA_Init+0x4ec>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00e      	beq.n	8005dfc <DMA_Init+0x44c>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a2f      	ldr	r2, [pc, #188]	@ (8005ea0 <DMA_Init+0x4f0>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d009      	beq.n	8005dfc <DMA_Init+0x44c>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a2d      	ldr	r2, [pc, #180]	@ (8005ea4 <DMA_Init+0x4f4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d004      	beq.n	8005dfc <DMA_Init+0x44c>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a2c      	ldr	r2, [pc, #176]	@ (8005ea8 <DMA_Init+0x4f8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d101      	bne.n	8005e00 <DMA_Init+0x450>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <DMA_Init+0x452>
 8005e00:	2300      	movs	r3, #0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d007      	beq.n	8005e16 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2200      	movs	r2, #0
 8005e14:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005e1e:	bf00      	nop
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	40020050 	.word	0x40020050
 8005e30:	50020050 	.word	0x50020050
 8005e34:	400200d0 	.word	0x400200d0
 8005e38:	500200d0 	.word	0x500200d0
 8005e3c:	40020150 	.word	0x40020150
 8005e40:	50020150 	.word	0x50020150
 8005e44:	400201d0 	.word	0x400201d0
 8005e48:	500201d0 	.word	0x500201d0
 8005e4c:	40020250 	.word	0x40020250
 8005e50:	50020250 	.word	0x50020250
 8005e54:	400202d0 	.word	0x400202d0
 8005e58:	500202d0 	.word	0x500202d0
 8005e5c:	40020350 	.word	0x40020350
 8005e60:	50020350 	.word	0x50020350
 8005e64:	400203d0 	.word	0x400203d0
 8005e68:	500203d0 	.word	0x500203d0
 8005e6c:	40020450 	.word	0x40020450
 8005e70:	50020450 	.word	0x50020450
 8005e74:	400204d0 	.word	0x400204d0
 8005e78:	500204d0 	.word	0x500204d0
 8005e7c:	40020550 	.word	0x40020550
 8005e80:	50020550 	.word	0x50020550
 8005e84:	400205d0 	.word	0x400205d0
 8005e88:	500205d0 	.word	0x500205d0
 8005e8c:	40020650 	.word	0x40020650
 8005e90:	50020650 	.word	0x50020650
 8005e94:	400206d0 	.word	0x400206d0
 8005e98:	500206d0 	.word	0x500206d0
 8005e9c:	40020750 	.word	0x40020750
 8005ea0:	50020750 	.word	0x50020750
 8005ea4:	400207d0 	.word	0x400207d0
 8005ea8:	500207d0 	.word	0x500207d0
 8005eac:	3c803180 	.word	0x3c803180

08005eb0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e053      	b.n	8005f6a <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d106      	bne.n	8005edc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7fb fd9a 	bl	8001a10 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005eee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	6851      	ldr	r1, [r2, #4]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	69d2      	ldr	r2, [r2, #28]
 8005efa:	4311      	orrs	r1, r2
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6812      	ldr	r2, [r2, #0]
 8005f00:	430b      	orrs	r3, r1
 8005f02:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f0a:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8005f0e:	f023 0301 	bic.w	r3, r3, #1
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6891      	ldr	r1, [r2, #8]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	6992      	ldr	r2, [r2, #24]
 8005f1a:	4311      	orrs	r1, r2
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	6812      	ldr	r2, [r2, #0]
 8005f20:	430b      	orrs	r3, r1
 8005f22:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2a:	0c1b      	lsrs	r3, r3, #16
 8005f2c:	041b      	lsls	r3, r3, #16
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	68d1      	ldr	r1, [r2, #12]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	6812      	ldr	r2, [r2, #0]
 8005f36:	430b      	orrs	r3, r1
 8005f38:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f40:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	051a      	lsls	r2, r3, #20
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	055b      	lsls	r3, r3, #21
 8005f50:	431a      	orrs	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d101      	bne.n	8005f98 <HAL_DMA2D_ConfigLayer+0x24>
 8005f94:	2302      	movs	r3, #2
 8005f96:	e092      	b.n	80060be <HAL_DMA2D_ConfigLayer+0x14a>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	4613      	mov	r3, r2
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	1a9b      	subs	r3, r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	3328      	adds	r3, #40	@ 0x28
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	041b      	lsls	r3, r3, #16
 8005fc4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005fcc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005fd8:	4b3c      	ldr	r3, [pc, #240]	@ (80060cc <HAL_DMA2D_ConfigLayer+0x158>)
 8005fda:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	2b0a      	cmp	r3, #10
 8005fe2:	d003      	beq.n	8005fec <HAL_DMA2D_ConfigLayer+0x78>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	2b09      	cmp	r3, #9
 8005fea:	d107      	bne.n	8005ffc <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	613b      	str	r3, [r7, #16]
 8005ffa:	e005      	b.n	8006008 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	061b      	lsls	r3, r3, #24
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d120      	bne.n	8006050 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	43db      	mvns	r3, r3
 8006018:	ea02 0103 	and.w	r1, r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	430a      	orrs	r2, r1
 8006024:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	6812      	ldr	r2, [r2, #0]
 800602e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2b0a      	cmp	r3, #10
 8006036:	d003      	beq.n	8006040 <HAL_DMA2D_ConfigLayer+0xcc>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2b09      	cmp	r3, #9
 800603e:	d135      	bne.n	80060ac <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800604c:	629a      	str	r2, [r3, #40]	@ 0x28
 800604e:	e02d      	b.n	80060ac <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	2b0b      	cmp	r3, #11
 8006056:	d109      	bne.n	800606c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	049b      	lsls	r3, r3, #18
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	4313      	orrs	r3, r2
 8006062:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 800606a:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	69da      	ldr	r2, [r3, #28]
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	43db      	mvns	r3, r3
 8006076:	ea02 0103 	and.w	r1, r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	430a      	orrs	r2, r1
 8006082:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	6812      	ldr	r2, [r2, #0]
 800608c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	2b0a      	cmp	r3, #10
 8006094:	d003      	beq.n	800609e <HAL_DMA2D_ConfigLayer+0x12a>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2b09      	cmp	r3, #9
 800609c:	d106      	bne.n	80060ac <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80060aa:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	ff33000f 	.word	0xff33000f

080060d0 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80060d8:	f7fc fc88 	bl	80029ec <HAL_GetTick>
 80060dc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e0db      	b.n	80062a0 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a6e      	ldr	r2, [pc, #440]	@ (80062a8 <HAL_DMAEx_List_Init+0x1d8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	f000 809f 	beq.w	8006232 <HAL_DMAEx_List_Init+0x162>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a6c      	ldr	r2, [pc, #432]	@ (80062ac <HAL_DMAEx_List_Init+0x1dc>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	f000 8099 	beq.w	8006232 <HAL_DMAEx_List_Init+0x162>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a6a      	ldr	r2, [pc, #424]	@ (80062b0 <HAL_DMAEx_List_Init+0x1e0>)
 8006106:	4293      	cmp	r3, r2
 8006108:	f000 8093 	beq.w	8006232 <HAL_DMAEx_List_Init+0x162>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a68      	ldr	r2, [pc, #416]	@ (80062b4 <HAL_DMAEx_List_Init+0x1e4>)
 8006112:	4293      	cmp	r3, r2
 8006114:	f000 808d 	beq.w	8006232 <HAL_DMAEx_List_Init+0x162>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a66      	ldr	r2, [pc, #408]	@ (80062b8 <HAL_DMAEx_List_Init+0x1e8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	f000 8087 	beq.w	8006232 <HAL_DMAEx_List_Init+0x162>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a64      	ldr	r2, [pc, #400]	@ (80062bc <HAL_DMAEx_List_Init+0x1ec>)
 800612a:	4293      	cmp	r3, r2
 800612c:	f000 8081 	beq.w	8006232 <HAL_DMAEx_List_Init+0x162>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a62      	ldr	r2, [pc, #392]	@ (80062c0 <HAL_DMAEx_List_Init+0x1f0>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d07b      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a61      	ldr	r2, [pc, #388]	@ (80062c4 <HAL_DMAEx_List_Init+0x1f4>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d076      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a5f      	ldr	r2, [pc, #380]	@ (80062c8 <HAL_DMAEx_List_Init+0x1f8>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d071      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a5e      	ldr	r2, [pc, #376]	@ (80062cc <HAL_DMAEx_List_Init+0x1fc>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d06c      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a5c      	ldr	r2, [pc, #368]	@ (80062d0 <HAL_DMAEx_List_Init+0x200>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d067      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a5b      	ldr	r2, [pc, #364]	@ (80062d4 <HAL_DMAEx_List_Init+0x204>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d062      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a59      	ldr	r2, [pc, #356]	@ (80062d8 <HAL_DMAEx_List_Init+0x208>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d05d      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a58      	ldr	r2, [pc, #352]	@ (80062dc <HAL_DMAEx_List_Init+0x20c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d058      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a56      	ldr	r2, [pc, #344]	@ (80062e0 <HAL_DMAEx_List_Init+0x210>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d053      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a55      	ldr	r2, [pc, #340]	@ (80062e4 <HAL_DMAEx_List_Init+0x214>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d04e      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a53      	ldr	r2, [pc, #332]	@ (80062e8 <HAL_DMAEx_List_Init+0x218>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d049      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a52      	ldr	r2, [pc, #328]	@ (80062ec <HAL_DMAEx_List_Init+0x21c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d044      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a50      	ldr	r2, [pc, #320]	@ (80062f0 <HAL_DMAEx_List_Init+0x220>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d03f      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a4f      	ldr	r2, [pc, #316]	@ (80062f4 <HAL_DMAEx_List_Init+0x224>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d03a      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a4d      	ldr	r2, [pc, #308]	@ (80062f8 <HAL_DMAEx_List_Init+0x228>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d035      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a4c      	ldr	r2, [pc, #304]	@ (80062fc <HAL_DMAEx_List_Init+0x22c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d030      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a4a      	ldr	r2, [pc, #296]	@ (8006300 <HAL_DMAEx_List_Init+0x230>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d02b      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a49      	ldr	r2, [pc, #292]	@ (8006304 <HAL_DMAEx_List_Init+0x234>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d026      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a47      	ldr	r2, [pc, #284]	@ (8006308 <HAL_DMAEx_List_Init+0x238>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d021      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a46      	ldr	r2, [pc, #280]	@ (800630c <HAL_DMAEx_List_Init+0x23c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d01c      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a44      	ldr	r2, [pc, #272]	@ (8006310 <HAL_DMAEx_List_Init+0x240>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d017      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a43      	ldr	r2, [pc, #268]	@ (8006314 <HAL_DMAEx_List_Init+0x244>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d012      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a41      	ldr	r2, [pc, #260]	@ (8006318 <HAL_DMAEx_List_Init+0x248>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d00d      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a40      	ldr	r2, [pc, #256]	@ (800631c <HAL_DMAEx_List_Init+0x24c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d008      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a3e      	ldr	r2, [pc, #248]	@ (8006320 <HAL_DMAEx_List_Init+0x250>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d003      	beq.n	8006232 <HAL_DMAEx_List_Init+0x162>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a3d      	ldr	r2, [pc, #244]	@ (8006324 <HAL_DMAEx_List_Init+0x254>)
 8006230:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2202      	movs	r2, #2
 800623e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	695a      	ldr	r2, [r3, #20]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f042 0206 	orr.w	r2, r2, #6
 8006250:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006252:	e00f      	b.n	8006274 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8006254:	f7fc fbca 	bl	80029ec <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	2b05      	cmp	r3, #5
 8006260:	d908      	bls.n	8006274 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2210      	movs	r2, #16
 8006266:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2203      	movs	r2, #3
 800626c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e015      	b.n	80062a0 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1e8      	bne.n	8006254 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fae0 	bl	8006848 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	40020050 	.word	0x40020050
 80062ac:	50020050 	.word	0x50020050
 80062b0:	400200d0 	.word	0x400200d0
 80062b4:	500200d0 	.word	0x500200d0
 80062b8:	40020150 	.word	0x40020150
 80062bc:	50020150 	.word	0x50020150
 80062c0:	400201d0 	.word	0x400201d0
 80062c4:	500201d0 	.word	0x500201d0
 80062c8:	40020250 	.word	0x40020250
 80062cc:	50020250 	.word	0x50020250
 80062d0:	400202d0 	.word	0x400202d0
 80062d4:	500202d0 	.word	0x500202d0
 80062d8:	40020350 	.word	0x40020350
 80062dc:	50020350 	.word	0x50020350
 80062e0:	400203d0 	.word	0x400203d0
 80062e4:	500203d0 	.word	0x500203d0
 80062e8:	40020450 	.word	0x40020450
 80062ec:	50020450 	.word	0x50020450
 80062f0:	400204d0 	.word	0x400204d0
 80062f4:	500204d0 	.word	0x500204d0
 80062f8:	40020550 	.word	0x40020550
 80062fc:	50020550 	.word	0x50020550
 8006300:	400205d0 	.word	0x400205d0
 8006304:	500205d0 	.word	0x500205d0
 8006308:	40020650 	.word	0x40020650
 800630c:	50020650 	.word	0x50020650
 8006310:	400206d0 	.word	0x400206d0
 8006314:	500206d0 	.word	0x500206d0
 8006318:	40020750 	.word	0x40020750
 800631c:	50020750 	.word	0x50020750
 8006320:	400207d0 	.word	0x400207d0
 8006324:	500207d0 	.word	0x500207d0

08006328 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_DMAEx_List_Start_IT+0x16>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e082      	b.n	8006448 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006348:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006354:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8006356:	7dfb      	ldrb	r3, [r7, #23]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d005      	beq.n	8006368 <HAL_DMAEx_List_Start_IT+0x40>
 800635c:	7dfb      	ldrb	r3, [r7, #23]
 800635e:	2b02      	cmp	r3, #2
 8006360:	d16a      	bne.n	8006438 <HAL_DMAEx_List_Start_IT+0x110>
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d067      	beq.n	8006438 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b01      	cmp	r3, #1
 8006372:	d157      	bne.n	8006424 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800637a:	2b01      	cmp	r3, #1
 800637c:	d101      	bne.n	8006382 <HAL_DMAEx_List_Start_IT+0x5a>
 800637e:	2302      	movs	r3, #2
 8006380:	e062      	b.n	8006448 <HAL_DMAEx_List_Start_IT+0x120>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2202      	movs	r2, #2
 800638e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006396:	2202      	movs	r2, #2
 8006398:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063a4:	2200      	movs	r2, #0
 80063a6:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	695a      	ldr	r2, [r3, #20]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80063b6:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d007      	beq.n	80063d0 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695a      	ldr	r2, [r3, #20]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063ce:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d007      	beq.n	80063e8 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	695a      	ldr	r2, [r3, #20]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063e6:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f107 010c 	add.w	r1, r7, #12
 80063f2:	2200      	movs	r2, #0
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 fe47 	bl	8007088 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4619      	mov	r1, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	0c0b      	lsrs	r3, r1, #16
 8006408:	041b      	lsls	r3, r3, #16
 800640a:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	461a      	mov	r2, r3
 8006414:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006418:	4013      	ands	r3, r2
 800641a:	68f9      	ldr	r1, [r7, #12]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6812      	ldr	r2, [r2, #0]
 8006420:	430b      	orrs	r3, r1
 8006422:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	695a      	ldr	r2, [r3, #20]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0201 	orr.w	r2, r2, #1
 8006432:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
 8006436:	e007      	b.n	8006448 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2240      	movs	r2, #64	@ 0x40
 800643c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
}
 8006448:	4618      	mov	r0, r3
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <HAL_DMAEx_List_BuildNode+0x16>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e004      	b.n	8006474 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fb43 	bl	8006af8 <DMA_List_BuildNode>

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <HAL_DMAEx_List_GetNodeConfig+0x16>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e004      	b.n	80064a0 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fc7f 	bl	8006d9c <DMA_List_GetNodeConfig>

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08c      	sub	sp, #48	@ 0x30
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_DMAEx_List_InsertNode+0x18>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e0b6      	b.n	8006632 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d104      	bne.n	80064d6 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2204      	movs	r2, #4
 80064d0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e0ad      	b.n	8006632 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	68b9      	ldr	r1, [r7, #8]
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fd66 	bl	8006fb0 <DMA_List_CheckNodesBaseAddresses>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d004      	beq.n	80064f4 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2205      	movs	r2, #5
 80064ee:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e09e      	b.n	8006632 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	68b9      	ldr	r1, [r7, #8]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 fd87 	bl	8007010 <DMA_List_CheckNodesTypes>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d004      	beq.n	8006512 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2204      	movs	r2, #4
 800650c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e08f      	b.n	8006632 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2202      	movs	r2, #2
 8006516:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800651e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006522:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006526:	4619      	mov	r1, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fdad 	bl	8007088 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d11a      	bne.n	800656c <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d106      	bne.n	800654a <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	609a      	str	r2, [r3, #8]
 8006548:	e06c      	b.n	8006624 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006556:	4013      	ands	r3, r2
 8006558:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800655a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800655c:	4319      	orrs	r1, r3
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2202      	movs	r2, #2
 8006568:	609a      	str	r2, [r3, #8]
 800656a:	e05b      	b.n	8006624 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10f      	bne.n	8006592 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	461a      	mov	r2, r3
 8006578:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800657c:	4013      	ands	r3, r2
 800657e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006580:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006582:	4319      	orrs	r1, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	e043      	b.n	800661a <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8006592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006594:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8006596:	f107 0314 	add.w	r3, r7, #20
 800659a:	461a      	mov	r2, r3
 800659c:	68b9      	ldr	r1, [r7, #8]
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 fda2 	bl	80070e8 <DMA_List_FindNode>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d132      	bne.n	8006610 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80065aa:	69fa      	ldr	r2, [r7, #28]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d11a      	bne.n	80065ea <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00b      	beq.n	80065d4 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	461a      	mov	r2, r3
 80065c2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80065c6:	4013      	ands	r3, r2
 80065c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065cc:	4319      	orrs	r1, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80065da:	4013      	ands	r3, r2
 80065dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065e0:	4319      	orrs	r1, r3
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80065e8:	e017      	b.n	800661a <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 80065ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006600:	4013      	ands	r3, r2
 8006602:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006604:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006606:	4319      	orrs	r1, r3
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800660e:	e004      	b.n	800661a <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2206      	movs	r2, #6
 8006614:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e00b      	b.n	8006632 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2201      	movs	r2, #1
 800662e:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3730      	adds	r7, #48	@ 0x30
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b08a      	sub	sp, #40	@ 0x28
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e052      	b.n	80066f2 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d104      	bne.n	800665e <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e049      	b.n	80066f2 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00c      	beq.n	8006680 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	429a      	cmp	r2, r3
 8006670:	d101      	bne.n	8006676 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	e03d      	b.n	80066f2 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2204      	movs	r2, #4
 800667a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e038      	b.n	80066f2 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d104      	bne.n	8006692 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2204      	movs	r2, #4
 800668c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e02f      	b.n	80066f2 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2202      	movs	r2, #2
 8006696:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f107 0220 	add.w	r2, r7, #32
 80066a6:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fcec 	bl	8007088 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80066b4:	f107 030c 	add.w	r3, r7, #12
 80066b8:	461a      	mov	r2, r3
 80066ba:	2100      	movs	r1, #0
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fd13 	bl	80070e8 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80066cc:	4013      	ands	r3, r2
 80066ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	4610      	mov	r0, r2
 80066d4:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80066d6:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80066d8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3728      	adds	r7, #40	@ 0x28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <HAL_DMAEx_List_LinkQ+0x16>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e072      	b.n	80067fc <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800671c:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b02      	cmp	r3, #2
 8006728:	d002      	beq.n	8006730 <HAL_DMAEx_List_LinkQ+0x34>
 800672a:	7bfb      	ldrb	r3, [r7, #15]
 800672c:	2b05      	cmp	r3, #5
 800672e:	d108      	bne.n	8006742 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2240      	movs	r2, #64	@ 0x40
 8006734:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e05c      	b.n	80067fc <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	7b1b      	ldrb	r3, [r3, #12]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d104      	bne.n	8006756 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2201      	movs	r2, #1
 8006750:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e052      	b.n	80067fc <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a2b      	ldr	r2, [pc, #172]	@ (8006808 <HAL_DMAEx_List_LinkQ+0x10c>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d022      	beq.n	80067a6 <HAL_DMAEx_List_LinkQ+0xaa>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a29      	ldr	r2, [pc, #164]	@ (800680c <HAL_DMAEx_List_LinkQ+0x110>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d01d      	beq.n	80067a6 <HAL_DMAEx_List_LinkQ+0xaa>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a28      	ldr	r2, [pc, #160]	@ (8006810 <HAL_DMAEx_List_LinkQ+0x114>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d018      	beq.n	80067a6 <HAL_DMAEx_List_LinkQ+0xaa>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a26      	ldr	r2, [pc, #152]	@ (8006814 <HAL_DMAEx_List_LinkQ+0x118>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d013      	beq.n	80067a6 <HAL_DMAEx_List_LinkQ+0xaa>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a25      	ldr	r2, [pc, #148]	@ (8006818 <HAL_DMAEx_List_LinkQ+0x11c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d00e      	beq.n	80067a6 <HAL_DMAEx_List_LinkQ+0xaa>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a23      	ldr	r2, [pc, #140]	@ (800681c <HAL_DMAEx_List_LinkQ+0x120>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d009      	beq.n	80067a6 <HAL_DMAEx_List_LinkQ+0xaa>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a22      	ldr	r2, [pc, #136]	@ (8006820 <HAL_DMAEx_List_LinkQ+0x124>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d004      	beq.n	80067a6 <HAL_DMAEx_List_LinkQ+0xaa>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a20      	ldr	r2, [pc, #128]	@ (8006824 <HAL_DMAEx_List_LinkQ+0x128>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d101      	bne.n	80067aa <HAL_DMAEx_List_LinkQ+0xae>
 80067a6:	2301      	movs	r3, #1
 80067a8:	e000      	b.n	80067ac <HAL_DMAEx_List_LinkQ+0xb0>
 80067aa:	2300      	movs	r3, #0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10b      	bne.n	80067c8 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d004      	beq.n	80067c8 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2203      	movs	r2, #3
 80067c2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e019      	b.n	80067fc <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067cc:	2b81      	cmp	r3, #129	@ 0x81
 80067ce:	d108      	bne.n	80067e2 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10d      	bne.n	80067f4 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2204      	movs	r2, #4
 80067dc:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e00c      	b.n	80067fc <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d004      	beq.n	80067f4 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2204      	movs	r2, #4
 80067ee:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e003      	b.n	80067fc <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	40020650 	.word	0x40020650
 800680c:	50020650 	.word	0x50020650
 8006810:	400206d0 	.word	0x400206d0
 8006814:	500206d0 	.word	0x500206d0
 8006818:	40020750 	.word	0x40020750
 800681c:	50020750 	.word	0x50020750
 8006820:	400207d0 	.word	0x400207d0
 8006824:	500207d0 	.word	0x500207d0

08006828 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	0c1b      	lsrs	r3, r3, #16
 8006838:	b2db      	uxtb	r3, r3
}
 800683a:	4618      	mov	r0, r3
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
	...

08006848 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006858:	4313      	orrs	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a85      	ldr	r2, [pc, #532]	@ (8006a78 <DMA_List_Init+0x230>)
 8006862:	4293      	cmp	r3, r2
 8006864:	f000 80a0 	beq.w	80069a8 <DMA_List_Init+0x160>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a83      	ldr	r2, [pc, #524]	@ (8006a7c <DMA_List_Init+0x234>)
 800686e:	4293      	cmp	r3, r2
 8006870:	f000 809a 	beq.w	80069a8 <DMA_List_Init+0x160>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a81      	ldr	r2, [pc, #516]	@ (8006a80 <DMA_List_Init+0x238>)
 800687a:	4293      	cmp	r3, r2
 800687c:	f000 8094 	beq.w	80069a8 <DMA_List_Init+0x160>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a7f      	ldr	r2, [pc, #508]	@ (8006a84 <DMA_List_Init+0x23c>)
 8006886:	4293      	cmp	r3, r2
 8006888:	f000 808e 	beq.w	80069a8 <DMA_List_Init+0x160>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a7d      	ldr	r2, [pc, #500]	@ (8006a88 <DMA_List_Init+0x240>)
 8006892:	4293      	cmp	r3, r2
 8006894:	f000 8088 	beq.w	80069a8 <DMA_List_Init+0x160>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a7b      	ldr	r2, [pc, #492]	@ (8006a8c <DMA_List_Init+0x244>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	f000 8082 	beq.w	80069a8 <DMA_List_Init+0x160>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a79      	ldr	r2, [pc, #484]	@ (8006a90 <DMA_List_Init+0x248>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d07c      	beq.n	80069a8 <DMA_List_Init+0x160>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a78      	ldr	r2, [pc, #480]	@ (8006a94 <DMA_List_Init+0x24c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d077      	beq.n	80069a8 <DMA_List_Init+0x160>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a76      	ldr	r2, [pc, #472]	@ (8006a98 <DMA_List_Init+0x250>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d072      	beq.n	80069a8 <DMA_List_Init+0x160>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a75      	ldr	r2, [pc, #468]	@ (8006a9c <DMA_List_Init+0x254>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d06d      	beq.n	80069a8 <DMA_List_Init+0x160>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a73      	ldr	r2, [pc, #460]	@ (8006aa0 <DMA_List_Init+0x258>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d068      	beq.n	80069a8 <DMA_List_Init+0x160>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a72      	ldr	r2, [pc, #456]	@ (8006aa4 <DMA_List_Init+0x25c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d063      	beq.n	80069a8 <DMA_List_Init+0x160>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a70      	ldr	r2, [pc, #448]	@ (8006aa8 <DMA_List_Init+0x260>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d05e      	beq.n	80069a8 <DMA_List_Init+0x160>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a6f      	ldr	r2, [pc, #444]	@ (8006aac <DMA_List_Init+0x264>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d059      	beq.n	80069a8 <DMA_List_Init+0x160>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a6d      	ldr	r2, [pc, #436]	@ (8006ab0 <DMA_List_Init+0x268>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d054      	beq.n	80069a8 <DMA_List_Init+0x160>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a6c      	ldr	r2, [pc, #432]	@ (8006ab4 <DMA_List_Init+0x26c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d04f      	beq.n	80069a8 <DMA_List_Init+0x160>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a6a      	ldr	r2, [pc, #424]	@ (8006ab8 <DMA_List_Init+0x270>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d04a      	beq.n	80069a8 <DMA_List_Init+0x160>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a69      	ldr	r2, [pc, #420]	@ (8006abc <DMA_List_Init+0x274>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d045      	beq.n	80069a8 <DMA_List_Init+0x160>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a67      	ldr	r2, [pc, #412]	@ (8006ac0 <DMA_List_Init+0x278>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d040      	beq.n	80069a8 <DMA_List_Init+0x160>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a66      	ldr	r2, [pc, #408]	@ (8006ac4 <DMA_List_Init+0x27c>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d03b      	beq.n	80069a8 <DMA_List_Init+0x160>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a64      	ldr	r2, [pc, #400]	@ (8006ac8 <DMA_List_Init+0x280>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d036      	beq.n	80069a8 <DMA_List_Init+0x160>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a63      	ldr	r2, [pc, #396]	@ (8006acc <DMA_List_Init+0x284>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d031      	beq.n	80069a8 <DMA_List_Init+0x160>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a61      	ldr	r2, [pc, #388]	@ (8006ad0 <DMA_List_Init+0x288>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d02c      	beq.n	80069a8 <DMA_List_Init+0x160>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a60      	ldr	r2, [pc, #384]	@ (8006ad4 <DMA_List_Init+0x28c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d027      	beq.n	80069a8 <DMA_List_Init+0x160>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a5e      	ldr	r2, [pc, #376]	@ (8006ad8 <DMA_List_Init+0x290>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d022      	beq.n	80069a8 <DMA_List_Init+0x160>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a5d      	ldr	r2, [pc, #372]	@ (8006adc <DMA_List_Init+0x294>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d01d      	beq.n	80069a8 <DMA_List_Init+0x160>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a5b      	ldr	r2, [pc, #364]	@ (8006ae0 <DMA_List_Init+0x298>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d018      	beq.n	80069a8 <DMA_List_Init+0x160>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a5a      	ldr	r2, [pc, #360]	@ (8006ae4 <DMA_List_Init+0x29c>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d013      	beq.n	80069a8 <DMA_List_Init+0x160>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a58      	ldr	r2, [pc, #352]	@ (8006ae8 <DMA_List_Init+0x2a0>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d00e      	beq.n	80069a8 <DMA_List_Init+0x160>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a57      	ldr	r2, [pc, #348]	@ (8006aec <DMA_List_Init+0x2a4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d009      	beq.n	80069a8 <DMA_List_Init+0x160>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a55      	ldr	r2, [pc, #340]	@ (8006af0 <DMA_List_Init+0x2a8>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d004      	beq.n	80069a8 <DMA_List_Init+0x160>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a54      	ldr	r2, [pc, #336]	@ (8006af4 <DMA_List_Init+0x2ac>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d101      	bne.n	80069ac <DMA_List_Init+0x164>
 80069a8:	2301      	movs	r3, #1
 80069aa:	e000      	b.n	80069ae <DMA_List_Init+0x166>
 80069ac:	2300      	movs	r3, #0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d004      	beq.n	80069bc <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	430a      	orrs	r2, r1
 80069ce:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2200      	movs	r2, #0
 80069d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80069e0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2200      	movs	r2, #0
 80069e8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2200      	movs	r2, #0
 80069f0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2200      	movs	r2, #0
 80069f8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a36      	ldr	r2, [pc, #216]	@ (8006ad8 <DMA_List_Init+0x290>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d022      	beq.n	8006a4a <DMA_List_Init+0x202>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a34      	ldr	r2, [pc, #208]	@ (8006adc <DMA_List_Init+0x294>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d01d      	beq.n	8006a4a <DMA_List_Init+0x202>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a33      	ldr	r2, [pc, #204]	@ (8006ae0 <DMA_List_Init+0x298>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d018      	beq.n	8006a4a <DMA_List_Init+0x202>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a31      	ldr	r2, [pc, #196]	@ (8006ae4 <DMA_List_Init+0x29c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d013      	beq.n	8006a4a <DMA_List_Init+0x202>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a30      	ldr	r2, [pc, #192]	@ (8006ae8 <DMA_List_Init+0x2a0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00e      	beq.n	8006a4a <DMA_List_Init+0x202>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a2e      	ldr	r2, [pc, #184]	@ (8006aec <DMA_List_Init+0x2a4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d009      	beq.n	8006a4a <DMA_List_Init+0x202>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a2d      	ldr	r2, [pc, #180]	@ (8006af0 <DMA_List_Init+0x2a8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d004      	beq.n	8006a4a <DMA_List_Init+0x202>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a2b      	ldr	r2, [pc, #172]	@ (8006af4 <DMA_List_Init+0x2ac>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d101      	bne.n	8006a4e <DMA_List_Init+0x206>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e000      	b.n	8006a50 <DMA_List_Init+0x208>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d007      	beq.n	8006a64 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2200      	movs	r2, #0
 8006a62:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006a6c:	bf00      	nop
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	40020050 	.word	0x40020050
 8006a7c:	50020050 	.word	0x50020050
 8006a80:	400200d0 	.word	0x400200d0
 8006a84:	500200d0 	.word	0x500200d0
 8006a88:	40020150 	.word	0x40020150
 8006a8c:	50020150 	.word	0x50020150
 8006a90:	400201d0 	.word	0x400201d0
 8006a94:	500201d0 	.word	0x500201d0
 8006a98:	40020250 	.word	0x40020250
 8006a9c:	50020250 	.word	0x50020250
 8006aa0:	400202d0 	.word	0x400202d0
 8006aa4:	500202d0 	.word	0x500202d0
 8006aa8:	40020350 	.word	0x40020350
 8006aac:	50020350 	.word	0x50020350
 8006ab0:	400203d0 	.word	0x400203d0
 8006ab4:	500203d0 	.word	0x500203d0
 8006ab8:	40020450 	.word	0x40020450
 8006abc:	50020450 	.word	0x50020450
 8006ac0:	400204d0 	.word	0x400204d0
 8006ac4:	500204d0 	.word	0x500204d0
 8006ac8:	40020550 	.word	0x40020550
 8006acc:	50020550 	.word	0x50020550
 8006ad0:	400205d0 	.word	0x400205d0
 8006ad4:	500205d0 	.word	0x500205d0
 8006ad8:	40020650 	.word	0x40020650
 8006adc:	50020650 	.word	0x50020650
 8006ae0:	400206d0 	.word	0x400206d0
 8006ae4:	500206d0 	.word	0x500206d0
 8006ae8:	40020750 	.word	0x40020750
 8006aec:	50020750 	.word	0x50020750
 8006af0:	400207d0 	.word	0x400207d0
 8006af4:	500207d0 	.word	0x500207d0

08006af8 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006b0a:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8006b10:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006b16:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8006b1c:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0320 	and.w	r3, r3, #32
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d017      	beq.n	8006b5e <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3a:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b40:	3b01      	subs	r3, #1
 8006b42:	051b      	lsls	r3, r3, #20
 8006b44:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006b48:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	011b      	lsls	r3, r3, #4
 8006b52:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006b56:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6859      	ldr	r1, [r3, #4]
 8006b66:	f240 237f 	movw	r3, #639	@ 0x27f
 8006b6a:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b7a:	d10c      	bne.n	8006b96 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0320 	and.w	r3, r3, #32
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d011      	beq.n	8006bac <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	605a      	str	r2, [r3, #4]
 8006b94:	e00a      	b.n	8006bac <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b9e:	d105      	bne.n	8006bac <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00f      	beq.n	8006bd4 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc0:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bc6:	041b      	lsls	r3, r3, #16
 8006bc8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006bcc:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d04e      	beq.n	8006c88 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	0419      	lsls	r1, r3, #16
 8006bf6:	4b67      	ldr	r3, [pc, #412]	@ (8006d94 <DMA_List_BuildNode+0x29c>)
 8006bf8:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	da06      	bge.n	8006c16 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	609a      	str	r2, [r3, #8]
 8006c14:	e005      	b.n	8006c22 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	da06      	bge.n	8006c38 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	609a      	str	r2, [r3, #8]
 8006c36:	e005      	b.n	8006c44 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	da06      	bge.n	8006c5a <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	609a      	str	r2, [r3, #8]
 8006c58:	e005      	b.n	8006c66 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	da06      	bge.n	8006c7c <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	609a      	str	r2, [r3, #8]
 8006c7a:	e005      	b.n	8006c88 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d059      	beq.n	8006d58 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	da09      	bge.n	8006cc0 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cb0:	425b      	negs	r3, r3
 8006cb2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	615a      	str	r2, [r3, #20]
 8006cbe:	e005      	b.n	8006ccc <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cc4:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	da0d      	bge.n	8006cf0 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd8:	425b      	negs	r3, r3
 8006cda:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	695a      	ldr	r2, [r3, #20]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	0419      	lsls	r1, r3, #16
 8006ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8006d98 <DMA_List_BuildNode+0x2a0>)
 8006ce6:	400b      	ands	r3, r1
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	615a      	str	r2, [r3, #20]
 8006cee:	e009      	b.n	8006d04 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cf8:	0419      	lsls	r1, r3, #16
 8006cfa:	4b27      	ldr	r3, [pc, #156]	@ (8006d98 <DMA_List_BuildNode+0x2a0>)
 8006cfc:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	da08      	bge.n	8006d1e <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d10:	425b      	negs	r3, r3
 8006d12:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	619a      	str	r2, [r3, #24]
 8006d1c:	e004      	b.n	8006d28 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d22:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	da0b      	bge.n	8006d48 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d34:	425b      	negs	r3, r3
 8006d36:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006d40:	431a      	orrs	r2, r3
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	619a      	str	r2, [r3, #24]
 8006d46:	e007      	b.n	8006d58 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d50:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006d52:	431a      	orrs	r2, r3
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d006      	beq.n	8006d7a <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8006d78:	e005      	b.n	8006d86 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	621a      	str	r2, [r3, #32]
}
 8006d86:	bf00      	nop
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	07ff0000 	.word	0x07ff0000
 8006d98:	1fff0000 	.word	0x1fff0000

08006d9c <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0208 	and.w	r2, r3, #8
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0203 	and.w	r2, r3, #3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8006de4:	091b      	lsrs	r3, r3, #4
 8006de6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dea:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8006df4:	0d1b      	lsrs	r3, r3, #20
 8006df6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dfa:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	4b66      	ldr	r3, [pc, #408]	@ (8006fac <DMA_List_GetNodeConfig+0x210>)
 8006e12:	4013      	ands	r3, r2
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d008      	beq.n	8006e42 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e36:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e3e:	60da      	str	r2, [r3, #12]
 8006e40:	e013      	b.n	8006e6a <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d004      	beq.n	8006e64 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006e60:	60da      	str	r2, [r3, #12]
 8006e62:	e002      	b.n	8006e6a <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8006e92:	0c1b      	lsrs	r3, r3, #16
 8006e94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d008      	beq.n	8006ed0 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	0c1b      	lsrs	r3, r3, #16
 8006ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ec8:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006ece:	e002      	b.n	8006ed6 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	68da      	ldr	r2, [r3, #12]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	691a      	ldr	r2, [r3, #16]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d04a      	beq.n	8006f88 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006efc:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8006efe:	89fa      	ldrh	r2, [r7, #14]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	695b      	ldr	r3, [r3, #20]
 8006f08:	0c1b      	lsrs	r3, r3, #16
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f10:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8006f12:	89fa      	ldrh	r2, [r7, #14]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d004      	beq.n	8006f2e <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f28:	425a      	negs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d004      	beq.n	8006f44 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f3e:	425a      	negs	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8006f4a:	89fa      	ldrh	r2, [r7, #14]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	0c1b      	lsrs	r3, r3, #16
 8006f56:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8006f58:	89fa      	ldrh	r2, [r7, #14]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d004      	beq.n	8006f74 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f6e:	425a      	negs	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	da11      	bge.n	8006fa0 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f80:	425a      	negs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8006f86:	e00b      	b.n	8006fa0 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006fa0:	bf00      	nop
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	0c002000 	.word	0x0c002000

08006fb0 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b087      	sub	sp, #28
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	431a      	orrs	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	0c1b      	lsrs	r3, r3, #16
 8006fc8:	041b      	lsls	r3, r3, #16
 8006fca:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	617b      	str	r3, [r7, #20]
 8006fda:	e00a      	b.n	8006ff2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	617b      	str	r3, [r7, #20]
 8006fe6:	e004      	b.n	8006ff2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	0c1b      	lsrs	r3, r3, #16
 8006ff6:	041b      	lsls	r3, r3, #16
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d001      	beq.n	8007002 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e000      	b.n	8007004 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	371c      	adds	r7, #28
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d004      	beq.n	8007030 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	b2db      	uxtb	r3, r3
 800702c:	617b      	str	r3, [r7, #20]
 800702e:	e00e      	b.n	800704e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d004      	beq.n	8007040 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	b2db      	uxtb	r3, r3
 800703c:	617b      	str	r3, [r7, #20]
 800703e:	e006      	b.n	800704e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	b2db      	uxtb	r3, r3
 800704c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d007      	beq.n	8007064 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	6a1b      	ldr	r3, [r3, #32]
 8007058:	b2db      	uxtb	r3, r3
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	429a      	cmp	r2, r3
 800705e:	d001      	beq.n	8007064 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8007060:	2302      	movs	r3, #2
 8007062:	e00b      	b.n	800707c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d007      	beq.n	800707a <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	b2db      	uxtb	r3, r3
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	429a      	cmp	r2, r3
 8007074:	d001      	beq.n	800707a <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8007076:	2303      	movs	r3, #3
 8007078:	e000      	b.n	800707c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	371c      	adds	r7, #28
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00c      	beq.n	80070ba <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d002      	beq.n	80070ac <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	4a0d      	ldr	r2, [pc, #52]	@ (80070e0 <DMA_List_GetCLLRNodeInfo+0x58>)
 80070aa:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00f      	beq.n	80070d2 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2207      	movs	r2, #7
 80070b6:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80070b8:	e00b      	b.n	80070d2 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	4a08      	ldr	r2, [pc, #32]	@ (80070e4 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80070c4:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d002      	beq.n	80070d2 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2205      	movs	r2, #5
 80070d0:	601a      	str	r2, [r3, #0]
}
 80070d2:	bf00      	nop
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	fe010000 	.word	0xfe010000
 80070e4:	f8010000 	.word	0xf8010000

080070e8 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b089      	sub	sp, #36	@ 0x24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d142      	bne.n	8007192 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 800710c:	e01d      	b.n	800714a <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d107      	bne.n	8007124 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	461a      	mov	r2, r3
 800711a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800711e:	4013      	ands	r3, r2
 8007120:	61bb      	str	r3, [r7, #24]
 8007122:	e00f      	b.n	8007144 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	0c1b      	lsrs	r3, r3, #16
 800712e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	4413      	add	r3, r2
 8007134:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800713c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007140:	4013      	ands	r3, r2
 8007142:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	3301      	adds	r3, #1
 8007148:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	69fa      	ldr	r2, [r7, #28]
 8007150:	429a      	cmp	r2, r3
 8007152:	d3dc      	bcc.n	800710e <DMA_List_FindNode+0x26>
 8007154:	e029      	b.n	80071aa <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d107      	bne.n	800716c <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	461a      	mov	r2, r3
 8007162:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007166:	4013      	ands	r3, r2
 8007168:	61bb      	str	r3, [r7, #24]
 800716a:	e00f      	b.n	800718c <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	0c1b      	lsrs	r3, r3, #16
 8007176:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	4413      	add	r3, r2
 800717c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007184:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007188:	4013      	ands	r3, r2
 800718a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	3301      	adds	r3, #1
 8007190:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	69fa      	ldr	r2, [r7, #28]
 8007198:	429a      	cmp	r2, r3
 800719a:	d206      	bcs.n	80071aa <DMA_List_FindNode+0xc2>
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80071a2:	4013      	ands	r3, r2
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d1d5      	bne.n	8007156 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d008      	beq.n	80071c2 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80071b6:	4013      	ands	r3, r2
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d001      	beq.n	80071c2 <DMA_List_FindNode+0xda>
    {
      return 1U;
 80071be:	2301      	movs	r3, #1
 80071c0:	e02b      	b.n	800721a <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	69fa      	ldr	r2, [r7, #28]
 80071c6:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	0c1b      	lsrs	r3, r3, #16
 80071ce:	041b      	lsls	r3, r3, #16
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	431a      	orrs	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	0c1b      	lsrs	r3, r3, #16
 80071de:	041b      	lsls	r3, r3, #16
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	431a      	orrs	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	461a      	mov	r2, r3
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00f      	beq.n	8007218 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	461a      	mov	r2, r3
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007204:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8007208:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	0c1b      	lsrs	r3, r3, #16
 8007210:	041b      	lsls	r3, r3, #16
 8007212:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3724      	adds	r7, #36	@ 0x24
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
	...

08007228 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007228:	b480      	push	{r7}
 800722a:	b089      	sub	sp, #36	@ 0x24
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800723a:	e1ba      	b.n	80075b2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	2101      	movs	r1, #1
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	fa01 f303 	lsl.w	r3, r1, r3
 8007248:	4013      	ands	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 81aa 	beq.w	80075ac <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a55      	ldr	r2, [pc, #340]	@ (80073b0 <HAL_GPIO_Init+0x188>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d15d      	bne.n	800731c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8007266:	2201      	movs	r2, #1
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	fa02 f303 	lsl.w	r3, r2, r3
 800726e:	43db      	mvns	r3, r3
 8007270:	69fa      	ldr	r2, [r7, #28]
 8007272:	4013      	ands	r3, r2
 8007274:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f003 0201 	and.w	r2, r3, #1
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	fa02 f303 	lsl.w	r3, r2, r3
 8007284:	69fa      	ldr	r2, [r7, #28]
 8007286:	4313      	orrs	r3, r2
 8007288:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8007290:	4a48      	ldr	r2, [pc, #288]	@ (80073b4 <HAL_GPIO_Init+0x18c>)
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007298:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800729a:	4a46      	ldr	r2, [pc, #280]	@ (80073b4 <HAL_GPIO_Init+0x18c>)
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	00db      	lsls	r3, r3, #3
 80072a0:	4413      	add	r3, r2
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	08da      	lsrs	r2, r3, #3
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	3208      	adds	r2, #8
 80072ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	220f      	movs	r2, #15
 80072be:	fa02 f303 	lsl.w	r3, r2, r3
 80072c2:	43db      	mvns	r3, r3
 80072c4:	69fa      	ldr	r2, [r7, #28]
 80072c6:	4013      	ands	r3, r2
 80072c8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	f003 0307 	and.w	r3, r3, #7
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	220b      	movs	r2, #11
 80072d4:	fa02 f303 	lsl.w	r3, r2, r3
 80072d8:	69fa      	ldr	r2, [r7, #28]
 80072da:	4313      	orrs	r3, r2
 80072dc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	08da      	lsrs	r2, r3, #3
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	3208      	adds	r2, #8
 80072e6:	69f9      	ldr	r1, [r7, #28]
 80072e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	2203      	movs	r2, #3
 80072f8:	fa02 f303 	lsl.w	r3, r2, r3
 80072fc:	43db      	mvns	r3, r3
 80072fe:	69fa      	ldr	r2, [r7, #28]
 8007300:	4013      	ands	r3, r2
 8007302:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	2202      	movs	r2, #2
 800730a:	fa02 f303 	lsl.w	r3, r2, r3
 800730e:	69fa      	ldr	r2, [r7, #28]
 8007310:	4313      	orrs	r3, r2
 8007312:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	69fa      	ldr	r2, [r7, #28]
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	e067      	b.n	80073ec <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	2b02      	cmp	r3, #2
 8007322:	d003      	beq.n	800732c <HAL_GPIO_Init+0x104>
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	2b12      	cmp	r3, #18
 800732a:	d145      	bne.n	80073b8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	08da      	lsrs	r2, r3, #3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3208      	adds	r2, #8
 8007334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007338:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f003 0307 	and.w	r3, r3, #7
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	220f      	movs	r2, #15
 8007344:	fa02 f303 	lsl.w	r3, r2, r3
 8007348:	43db      	mvns	r3, r3
 800734a:	69fa      	ldr	r2, [r7, #28]
 800734c:	4013      	ands	r3, r2
 800734e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	f003 020f 	and.w	r2, r3, #15
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f003 0307 	and.w	r3, r3, #7
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	fa02 f303 	lsl.w	r3, r2, r3
 8007364:	69fa      	ldr	r2, [r7, #28]
 8007366:	4313      	orrs	r3, r2
 8007368:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	08da      	lsrs	r2, r3, #3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	3208      	adds	r2, #8
 8007372:	69f9      	ldr	r1, [r7, #28]
 8007374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	005b      	lsls	r3, r3, #1
 8007382:	2203      	movs	r2, #3
 8007384:	fa02 f303 	lsl.w	r3, r2, r3
 8007388:	43db      	mvns	r3, r3
 800738a:	69fa      	ldr	r2, [r7, #28]
 800738c:	4013      	ands	r3, r2
 800738e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f003 0203 	and.w	r2, r3, #3
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	fa02 f303 	lsl.w	r3, r2, r3
 80073a0:	69fa      	ldr	r2, [r7, #28]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	69fa      	ldr	r2, [r7, #28]
 80073aa:	601a      	str	r2, [r3, #0]
 80073ac:	e01e      	b.n	80073ec <HAL_GPIO_Init+0x1c4>
 80073ae:	bf00      	nop
 80073b0:	46020000 	.word	0x46020000
 80073b4:	08010c3c 	.word	0x08010c3c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	005b      	lsls	r3, r3, #1
 80073c2:	2203      	movs	r2, #3
 80073c4:	fa02 f303 	lsl.w	r3, r2, r3
 80073c8:	43db      	mvns	r3, r3
 80073ca:	69fa      	ldr	r2, [r7, #28]
 80073cc:	4013      	ands	r3, r2
 80073ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f003 0203 	and.w	r2, r3, #3
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	fa02 f303 	lsl.w	r3, r2, r3
 80073e0:	69fa      	ldr	r2, [r7, #28]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	69fa      	ldr	r2, [r7, #28]
 80073ea:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d00b      	beq.n	800740c <HAL_GPIO_Init+0x1e4>
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d007      	beq.n	800740c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007400:	2b11      	cmp	r3, #17
 8007402:	d003      	beq.n	800740c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	2b12      	cmp	r3, #18
 800740a:	d130      	bne.n	800746e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	2203      	movs	r2, #3
 8007418:	fa02 f303 	lsl.w	r3, r2, r3
 800741c:	43db      	mvns	r3, r3
 800741e:	69fa      	ldr	r2, [r7, #28]
 8007420:	4013      	ands	r3, r2
 8007422:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	68da      	ldr	r2, [r3, #12]
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	005b      	lsls	r3, r3, #1
 800742c:	fa02 f303 	lsl.w	r3, r2, r3
 8007430:	69fa      	ldr	r2, [r7, #28]
 8007432:	4313      	orrs	r3, r2
 8007434:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	69fa      	ldr	r2, [r7, #28]
 800743a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8007442:	2201      	movs	r2, #1
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	fa02 f303 	lsl.w	r3, r2, r3
 800744a:	43db      	mvns	r3, r3
 800744c:	69fa      	ldr	r2, [r7, #28]
 800744e:	4013      	ands	r3, r2
 8007450:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	091b      	lsrs	r3, r3, #4
 8007458:	f003 0201 	and.w	r2, r3, #1
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	fa02 f303 	lsl.w	r3, r2, r3
 8007462:	69fa      	ldr	r2, [r7, #28]
 8007464:	4313      	orrs	r3, r2
 8007466:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	69fa      	ldr	r2, [r7, #28]
 800746c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	2b03      	cmp	r3, #3
 8007474:	d017      	beq.n	80074a6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	2203      	movs	r2, #3
 8007482:	fa02 f303 	lsl.w	r3, r2, r3
 8007486:	43db      	mvns	r3, r3
 8007488:	69fa      	ldr	r2, [r7, #28]
 800748a:	4013      	ands	r3, r2
 800748c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	689a      	ldr	r2, [r3, #8]
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	fa02 f303 	lsl.w	r3, r2, r3
 800749a:	69fa      	ldr	r2, [r7, #28]
 800749c:	4313      	orrs	r3, r2
 800749e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	69fa      	ldr	r2, [r7, #28]
 80074a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d07c      	beq.n	80075ac <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80074b2:	4a47      	ldr	r2, [pc, #284]	@ (80075d0 <HAL_GPIO_Init+0x3a8>)
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	089b      	lsrs	r3, r3, #2
 80074b8:	3318      	adds	r3, #24
 80074ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074be:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f003 0303 	and.w	r3, r3, #3
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	220f      	movs	r2, #15
 80074ca:	fa02 f303 	lsl.w	r3, r2, r3
 80074ce:	43db      	mvns	r3, r3
 80074d0:	69fa      	ldr	r2, [r7, #28]
 80074d2:	4013      	ands	r3, r2
 80074d4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	0a9a      	lsrs	r2, r3, #10
 80074da:	4b3e      	ldr	r3, [pc, #248]	@ (80075d4 <HAL_GPIO_Init+0x3ac>)
 80074dc:	4013      	ands	r3, r2
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	f002 0203 	and.w	r2, r2, #3
 80074e4:	00d2      	lsls	r2, r2, #3
 80074e6:	4093      	lsls	r3, r2
 80074e8:	69fa      	ldr	r2, [r7, #28]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80074ee:	4938      	ldr	r1, [pc, #224]	@ (80075d0 <HAL_GPIO_Init+0x3a8>)
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	089b      	lsrs	r3, r3, #2
 80074f4:	3318      	adds	r3, #24
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80074fc:	4b34      	ldr	r3, [pc, #208]	@ (80075d0 <HAL_GPIO_Init+0x3a8>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	43db      	mvns	r3, r3
 8007506:	69fa      	ldr	r2, [r7, #28]
 8007508:	4013      	ands	r3, r2
 800750a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007518:	69fa      	ldr	r2, [r7, #28]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	4313      	orrs	r3, r2
 800751e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8007520:	4a2b      	ldr	r2, [pc, #172]	@ (80075d0 <HAL_GPIO_Init+0x3a8>)
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007526:	4b2a      	ldr	r3, [pc, #168]	@ (80075d0 <HAL_GPIO_Init+0x3a8>)
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	43db      	mvns	r3, r3
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	4013      	ands	r3, r2
 8007534:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8007542:	69fa      	ldr	r2, [r7, #28]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4313      	orrs	r3, r2
 8007548:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800754a:	4a21      	ldr	r2, [pc, #132]	@ (80075d0 <HAL_GPIO_Init+0x3a8>)
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007550:	4b1f      	ldr	r3, [pc, #124]	@ (80075d0 <HAL_GPIO_Init+0x3a8>)
 8007552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007556:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	43db      	mvns	r3, r3
 800755c:	69fa      	ldr	r2, [r7, #28]
 800755e:	4013      	ands	r3, r2
 8007560:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800756e:	69fa      	ldr	r2, [r7, #28]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4313      	orrs	r3, r2
 8007574:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8007576:	4a16      	ldr	r2, [pc, #88]	@ (80075d0 <HAL_GPIO_Init+0x3a8>)
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800757e:	4b14      	ldr	r3, [pc, #80]	@ (80075d0 <HAL_GPIO_Init+0x3a8>)
 8007580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007584:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	43db      	mvns	r3, r3
 800758a:	69fa      	ldr	r2, [r7, #28]
 800758c:	4013      	ands	r3, r2
 800758e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800759c:	69fa      	ldr	r2, [r7, #28]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80075a4:	4a0a      	ldr	r2, [pc, #40]	@ (80075d0 <HAL_GPIO_Init+0x3a8>)
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	3301      	adds	r3, #1
 80075b0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	fa22 f303 	lsr.w	r3, r2, r3
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f47f ae3d 	bne.w	800723c <HAL_GPIO_Init+0x14>
  }
}
 80075c2:	bf00      	nop
 80075c4:	bf00      	nop
 80075c6:	3724      	adds	r7, #36	@ 0x24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	46022000 	.word	0x46022000
 80075d4:	002f7f7f 	.word	0x002f7f7f

080075d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	460b      	mov	r3, r1
 80075e2:	807b      	strh	r3, [r7, #2]
 80075e4:	4613      	mov	r3, r2
 80075e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80075e8:	787b      	ldrb	r3, [r7, #1]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80075ee:	887a      	ldrh	r2, [r7, #2]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80075f4:	e002      	b.n	80075fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80075f6:	887a      	ldrh	r2, [r7, #2]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	4603      	mov	r3, r0
 8007610:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8007612:	4b0f      	ldr	r3, [pc, #60]	@ (8007650 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	88fb      	ldrh	r3, [r7, #6]
 8007618:	4013      	ands	r3, r2
 800761a:	2b00      	cmp	r3, #0
 800761c:	d006      	beq.n	800762c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800761e:	4a0c      	ldr	r2, [pc, #48]	@ (8007650 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007620:	88fb      	ldrh	r3, [r7, #6]
 8007622:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8007624:	88fb      	ldrh	r3, [r7, #6]
 8007626:	4618      	mov	r0, r3
 8007628:	f000 f814 	bl	8007654 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800762c:	4b08      	ldr	r3, [pc, #32]	@ (8007650 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800762e:	691a      	ldr	r2, [r3, #16]
 8007630:	88fb      	ldrh	r3, [r7, #6]
 8007632:	4013      	ands	r3, r2
 8007634:	2b00      	cmp	r3, #0
 8007636:	d006      	beq.n	8007646 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007638:	4a05      	ldr	r2, [pc, #20]	@ (8007650 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800763a:	88fb      	ldrh	r3, [r7, #6]
 800763c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800763e:	88fb      	ldrh	r3, [r7, #6]
 8007640:	4618      	mov	r0, r3
 8007642:	f000 f812 	bl	800766a <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007646:	bf00      	nop
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	46022000 	.word	0x46022000

08007654 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	4603      	mov	r3, r0
 800765c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	4603      	mov	r3, r0
 8007672:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e08d      	b.n	80077ae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d106      	bne.n	80076ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7fa fa40 	bl	8001b2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2224      	movs	r2, #36	@ 0x24
 80076b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 0201 	bic.w	r2, r2, #1
 80076c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80076d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	689a      	ldr	r2, [r3, #8]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80076e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d107      	bne.n	80076fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	689a      	ldr	r2, [r3, #8]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076f6:	609a      	str	r2, [r3, #8]
 80076f8:	e006      	b.n	8007708 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	689a      	ldr	r2, [r3, #8]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007706:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	2b02      	cmp	r3, #2
 800770e:	d108      	bne.n	8007722 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	685a      	ldr	r2, [r3, #4]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800771e:	605a      	str	r2, [r3, #4]
 8007720:	e007      	b.n	8007732 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007730:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	6812      	ldr	r2, [r2, #0]
 800773c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007740:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007744:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68da      	ldr	r2, [r3, #12]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007754:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	691a      	ldr	r2, [r3, #16]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	430a      	orrs	r2, r1
 800776e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	69d9      	ldr	r1, [r3, #28]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a1a      	ldr	r2, [r3, #32]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f042 0201 	orr.w	r2, r2, #1
 800778e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2220      	movs	r2, #32
 800779a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d005      	beq.n	80077e2 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	68f9      	ldr	r1, [r7, #12]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	4798      	blx	r3
  }
}
 80077e2:	bf00      	nop
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b086      	sub	sp, #24
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00f      	beq.n	800782c <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00a      	beq.n	800782c <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800781a:	f043 0201 	orr.w	r2, r3, #1
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800782a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00f      	beq.n	8007856 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00a      	beq.n	8007856 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007844:	f043 0208 	orr.w	r2, r3, #8
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007854:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00f      	beq.n	8007880 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800786e:	f043 0202 	orr.w	r2, r3, #2
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800787e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007884:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f003 030b 	and.w	r3, r3, #11
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8007890:	68f9      	ldr	r1, [r7, #12]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fbe8 	bl	8008068 <I2C_ITError>
  }
}
 8007898:	bf00      	nop
 800789a:	3718      	adds	r7, #24
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	460b      	mov	r3, r1
 80078d2:	70fb      	strb	r3, [r7, #3]
 80078d4:	4613      	mov	r3, r2
 80078d6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007930:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800793c:	2b01      	cmp	r3, #1
 800793e:	d101      	bne.n	8007944 <I2C_Slave_ISR_IT+0x24>
 8007940:	2302      	movs	r3, #2
 8007942:	e0e2      	b.n	8007b0a <I2C_Slave_ISR_IT+0x1ea>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	f003 0320 	and.w	r3, r3, #32
 8007952:	2b00      	cmp	r3, #0
 8007954:	d009      	beq.n	800796a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800795c:	2b00      	cmp	r3, #0
 800795e:	d004      	beq.n	800796a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007960:	6939      	ldr	r1, [r7, #16]
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 f9b6 	bl	8007cd4 <I2C_ITSlaveCplt>
 8007968:	e0ca      	b.n	8007b00 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	f003 0310 	and.w	r3, r3, #16
 8007970:	2b00      	cmp	r3, #0
 8007972:	d04b      	beq.n	8007a0c <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800797a:	2b00      	cmp	r3, #0
 800797c:	d046      	beq.n	8007a0c <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007982:	b29b      	uxth	r3, r3
 8007984:	2b00      	cmp	r3, #0
 8007986:	d128      	bne.n	80079da <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b28      	cmp	r3, #40	@ 0x28
 8007992:	d108      	bne.n	80079a6 <I2C_Slave_ISR_IT+0x86>
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800799a:	d104      	bne.n	80079a6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800799c:	6939      	ldr	r1, [r7, #16]
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 fb0e 	bl	8007fc0 <I2C_ITListenCplt>
 80079a4:	e031      	b.n	8007a0a <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b29      	cmp	r3, #41	@ 0x29
 80079b0:	d10e      	bne.n	80079d0 <I2C_Slave_ISR_IT+0xb0>
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80079b8:	d00a      	beq.n	80079d0 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2210      	movs	r2, #16
 80079c0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 fc67 	bl	8008296 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 f926 	bl	8007c1a <I2C_ITSlaveSeqCplt>
 80079ce:	e01c      	b.n	8007a0a <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2210      	movs	r2, #16
 80079d6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80079d8:	e08f      	b.n	8007afa <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2210      	movs	r2, #16
 80079e0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079e6:	f043 0204 	orr.w	r2, r3, #4
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d003      	beq.n	80079fc <I2C_Slave_ISR_IT+0xdc>
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079fa:	d17e      	bne.n	8007afa <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a00:	4619      	mov	r1, r3
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 fb30 	bl	8008068 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007a08:	e077      	b.n	8007afa <I2C_Slave_ISR_IT+0x1da>
 8007a0a:	e076      	b.n	8007afa <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	f003 0304 	and.w	r3, r3, #4
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d02f      	beq.n	8007a76 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d02a      	beq.n	8007a76 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d018      	beq.n	8007a5c <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a34:	b2d2      	uxtb	r2, r2
 8007a36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a46:	3b01      	subs	r3, #1
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d14b      	bne.n	8007afe <I2C_Slave_ISR_IT+0x1de>
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007a6c:	d047      	beq.n	8007afe <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f000 f8d3 	bl	8007c1a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007a74:	e043      	b.n	8007afe <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f003 0308 	and.w	r3, r3, #8
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d009      	beq.n	8007a94 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d004      	beq.n	8007a94 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007a8a:	6939      	ldr	r1, [r7, #16]
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 f840 	bl	8007b12 <I2C_ITAddrCplt>
 8007a92:	e035      	b.n	8007b00 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d030      	beq.n	8007b00 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d02b      	beq.n	8007b00 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d018      	beq.n	8007ae4 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab6:	781a      	ldrb	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ada:	3b01      	subs	r3, #1
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007ae2:	e00d      	b.n	8007b00 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007aea:	d002      	beq.n	8007af2 <I2C_Slave_ISR_IT+0x1d2>
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d106      	bne.n	8007b00 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 f891 	bl	8007c1a <I2C_ITSlaveSeqCplt>
 8007af8:	e002      	b.n	8007b00 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8007afa:	bf00      	nop
 8007afc:	e000      	b.n	8007b00 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8007afe:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b084      	sub	sp, #16
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007b28:	2b28      	cmp	r3, #40	@ 0x28
 8007b2a:	d16a      	bne.n	8007c02 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	0c1b      	lsrs	r3, r3, #16
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	0c1b      	lsrs	r3, r3, #16
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007b4a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b58:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007b66:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d138      	bne.n	8007be2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007b70:	897b      	ldrh	r3, [r7, #10]
 8007b72:	09db      	lsrs	r3, r3, #7
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	89bb      	ldrh	r3, [r7, #12]
 8007b78:	4053      	eors	r3, r2
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	f003 0306 	and.w	r3, r3, #6
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d11c      	bne.n	8007bbe <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007b84:	897b      	ldrh	r3, [r7, #10]
 8007b86:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b8c:	1c5a      	adds	r2, r3, #1
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d13b      	bne.n	8007c12 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2208      	movs	r2, #8
 8007ba6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007bb0:	89ba      	ldrh	r2, [r7, #12]
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7ff fe86 	bl	80078c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007bbc:	e029      	b.n	8007c12 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007bbe:	893b      	ldrh	r3, [r7, #8]
 8007bc0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007bc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fba7 	bl	800831a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007bd4:	89ba      	ldrh	r2, [r7, #12]
 8007bd6:	7bfb      	ldrb	r3, [r7, #15]
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7ff fe74 	bl	80078c8 <HAL_I2C_AddrCallback>
}
 8007be0:	e017      	b.n	8007c12 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007be2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fb97 	bl	800831a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007bf4:	89ba      	ldrh	r2, [r7, #12]
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7ff fe64 	bl	80078c8 <HAL_I2C_AddrCallback>
}
 8007c00:	e007      	b.n	8007c12 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2208      	movs	r2, #8
 8007c08:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007c12:	bf00      	nop
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b084      	sub	sp, #16
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d008      	beq.n	8007c4e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	e00c      	b.n	8007c68 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d007      	beq.n	8007c68 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007c66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b29      	cmp	r3, #41	@ 0x29
 8007c72:	d112      	bne.n	8007c9a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2228      	movs	r2, #40	@ 0x28
 8007c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2221      	movs	r2, #33	@ 0x21
 8007c80:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007c82:	2101      	movs	r1, #1
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fb48 	bl	800831a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7ff fe04 	bl	80078a0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007c98:	e017      	b.n	8007cca <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ca4:	d111      	bne.n	8007cca <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2228      	movs	r2, #40	@ 0x28
 8007caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2222      	movs	r2, #34	@ 0x22
 8007cb2:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007cb4:	2102      	movs	r1, #2
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fb2f 	bl	800831a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7ff fdf5 	bl	80078b4 <HAL_I2C_SlaveRxCpltCallback>
}
 8007cca:	bf00      	nop
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
	...

08007cd4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007cd4:	b590      	push	{r4, r7, lr}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cee:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cf6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007d00:	7afb      	ldrb	r3, [r7, #11]
 8007d02:	2b21      	cmp	r3, #33	@ 0x21
 8007d04:	d002      	beq.n	8007d0c <I2C_ITSlaveCplt+0x38>
 8007d06:	7afb      	ldrb	r3, [r7, #11]
 8007d08:	2b29      	cmp	r3, #41	@ 0x29
 8007d0a:	d108      	bne.n	8007d1e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007d0c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fb02 	bl	800831a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2221      	movs	r2, #33	@ 0x21
 8007d1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d1c:	e019      	b.n	8007d52 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007d1e:	7afb      	ldrb	r3, [r7, #11]
 8007d20:	2b22      	cmp	r3, #34	@ 0x22
 8007d22:	d002      	beq.n	8007d2a <I2C_ITSlaveCplt+0x56>
 8007d24:	7afb      	ldrb	r3, [r7, #11]
 8007d26:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d28:	d108      	bne.n	8007d3c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007d2a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 faf3 	bl	800831a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2222      	movs	r2, #34	@ 0x22
 8007d38:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d3a:	e00a      	b.n	8007d52 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007d3c:	7afb      	ldrb	r3, [r7, #11]
 8007d3e:	2b28      	cmp	r3, #40	@ 0x28
 8007d40:	d107      	bne.n	8007d52 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007d42:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fae7 	bl	800831a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d60:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6859      	ldr	r1, [r3, #4]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	4b92      	ldr	r3, [pc, #584]	@ (8007fb8 <I2C_ITSlaveCplt+0x2e4>)
 8007d6e:	400b      	ands	r3, r1
 8007d70:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fa8f 	bl	8008296 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d01c      	beq.n	8007dbc <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007d90:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d031      	beq.n	8007dfe <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007da2:	b29c      	uxth	r4, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fe fd3d 	bl	8006828 <HAL_DMAEx_GetFifoLevel>
 8007dae:	4603      	mov	r3, r0
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	4423      	add	r3, r4
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007dba:	e020      	b.n	8007dfe <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d01b      	beq.n	8007dfe <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007dd4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00f      	beq.n	8007dfe <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007de6:	b29c      	uxth	r4, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fe fd1b 	bl	8006828 <HAL_DMAEx_GetFifoLevel>
 8007df2:	4603      	mov	r3, r0
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	4423      	add	r3, r4
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	f003 0304 	and.w	r3, r3, #4
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d020      	beq.n	8007e4a <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f023 0304 	bic.w	r3, r3, #4
 8007e0e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e1a:	b2d2      	uxtb	r2, r2
 8007e1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e22:	1c5a      	adds	r2, r3, #1
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00c      	beq.n	8007e4a <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e34:	3b01      	subs	r3, #1
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	3b01      	subs	r3, #1
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d005      	beq.n	8007e60 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e58:	f043 0204 	orr.w	r2, r3, #4
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f003 0310 	and.w	r3, r3, #16
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d049      	beq.n	8007efe <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d044      	beq.n	8007efe <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d128      	bne.n	8007ed0 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b28      	cmp	r3, #40	@ 0x28
 8007e88:	d108      	bne.n	8007e9c <I2C_ITSlaveCplt+0x1c8>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e90:	d104      	bne.n	8007e9c <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007e92:	6979      	ldr	r1, [r7, #20]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f893 	bl	8007fc0 <I2C_ITListenCplt>
 8007e9a:	e030      	b.n	8007efe <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b29      	cmp	r3, #41	@ 0x29
 8007ea6:	d10e      	bne.n	8007ec6 <I2C_ITSlaveCplt+0x1f2>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007eae:	d00a      	beq.n	8007ec6 <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2210      	movs	r2, #16
 8007eb6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f9ec 	bl	8008296 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7ff feab 	bl	8007c1a <I2C_ITSlaveSeqCplt>
 8007ec4:	e01b      	b.n	8007efe <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2210      	movs	r2, #16
 8007ecc:	61da      	str	r2, [r3, #28]
 8007ece:	e016      	b.n	8007efe <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2210      	movs	r2, #16
 8007ed6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007edc:	f043 0204 	orr.w	r2, r3, #4
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <I2C_ITSlaveCplt+0x21e>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ef0:	d105      	bne.n	8007efe <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f8b5 	bl	8008068 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d010      	beq.n	8007f36 <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f8a4 	bl	8008068 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b28      	cmp	r3, #40	@ 0x28
 8007f2a:	d141      	bne.n	8007fb0 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007f2c:	6979      	ldr	r1, [r7, #20]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f846 	bl	8007fc0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007f34:	e03c      	b.n	8007fb0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f3e:	d014      	beq.n	8007f6a <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7ff fe6a 	bl	8007c1a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a1c      	ldr	r2, [pc, #112]	@ (8007fbc <I2C_ITSlaveCplt+0x2e8>)
 8007f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2220      	movs	r2, #32
 8007f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7ff fcbe 	bl	80078e4 <HAL_I2C_ListenCpltCallback>
}
 8007f68:	e022      	b.n	8007fb0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b22      	cmp	r3, #34	@ 0x22
 8007f74:	d10e      	bne.n	8007f94 <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2220      	movs	r2, #32
 8007f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7ff fc91 	bl	80078b4 <HAL_I2C_SlaveRxCpltCallback>
}
 8007f92:	e00d      	b.n	8007fb0 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2220      	movs	r2, #32
 8007f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7ff fc78 	bl	80078a0 <HAL_I2C_SlaveTxCpltCallback>
}
 8007fb0:	bf00      	nop
 8007fb2:	371c      	adds	r7, #28
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd90      	pop	{r4, r7, pc}
 8007fb8:	fe00e800 	.word	0xfe00e800
 8007fbc:	ffff0000 	.word	0xffff0000

08007fc0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a25      	ldr	r2, [pc, #148]	@ (8008064 <I2C_ITListenCplt+0xa4>)
 8007fce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	f003 0304 	and.w	r3, r3, #4
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d022      	beq.n	800803c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008000:	b2d2      	uxtb	r2, r2
 8008002:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008008:	1c5a      	adds	r2, r3, #1
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008012:	2b00      	cmp	r3, #0
 8008014:	d012      	beq.n	800803c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800801a:	3b01      	subs	r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008026:	b29b      	uxth	r3, r3
 8008028:	3b01      	subs	r3, #1
 800802a:	b29a      	uxth	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008034:	f043 0204 	orr.w	r2, r3, #4
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800803c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f96a 	bl	800831a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2210      	movs	r2, #16
 800804c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7ff fc44 	bl	80078e4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800805c:	bf00      	nop
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	ffff0000 	.word	0xffff0000

08008068 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008078:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a6d      	ldr	r2, [pc, #436]	@ (800823c <I2C_ITError+0x1d4>)
 8008086:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	431a      	orrs	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	2b28      	cmp	r3, #40	@ 0x28
 800809e:	d005      	beq.n	80080ac <I2C_ITError+0x44>
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	2b29      	cmp	r3, #41	@ 0x29
 80080a4:	d002      	beq.n	80080ac <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80080a6:	7bfb      	ldrb	r3, [r7, #15]
 80080a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80080aa:	d10b      	bne.n	80080c4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80080ac:	2103      	movs	r1, #3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f933 	bl	800831a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2228      	movs	r2, #40	@ 0x28
 80080b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a60      	ldr	r2, [pc, #384]	@ (8008240 <I2C_ITError+0x1d8>)
 80080c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80080c2:	e030      	b.n	8008126 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80080c4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f926 	bl	800831a <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f8e1 	bl	8008296 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b60      	cmp	r3, #96	@ 0x60
 80080de:	d01f      	beq.n	8008120 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2220      	movs	r2, #32
 80080e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	f003 0320 	and.w	r3, r3, #32
 80080f2:	2b20      	cmp	r3, #32
 80080f4:	d114      	bne.n	8008120 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	f003 0310 	and.w	r3, r3, #16
 8008100:	2b10      	cmp	r3, #16
 8008102:	d109      	bne.n	8008118 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2210      	movs	r2, #16
 800810a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008110:	f043 0204 	orr.w	r2, r3, #4
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2220      	movs	r2, #32
 800811e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800812a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008130:	2b00      	cmp	r3, #0
 8008132:	d039      	beq.n	80081a8 <I2C_ITError+0x140>
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	2b11      	cmp	r3, #17
 8008138:	d002      	beq.n	8008140 <I2C_ITError+0xd8>
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	2b21      	cmp	r3, #33	@ 0x21
 800813e:	d133      	bne.n	80081a8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800814a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800814e:	d107      	bne.n	8008160 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800815e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008164:	4618      	mov	r0, r3
 8008166:	f7fd fbb3 	bl	80058d0 <HAL_DMA_GetState>
 800816a:	4603      	mov	r3, r0
 800816c:	2b01      	cmp	r3, #1
 800816e:	d017      	beq.n	80081a0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008174:	4a33      	ldr	r2, [pc, #204]	@ (8008244 <I2C_ITError+0x1dc>)
 8008176:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008184:	4618      	mov	r0, r3
 8008186:	f7fd fa19 	bl	80055bc <HAL_DMA_Abort_IT>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d04d      	beq.n	800822c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008194:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800819a:	4610      	mov	r0, r2
 800819c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800819e:	e045      	b.n	800822c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f851 	bl	8008248 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80081a6:	e041      	b.n	800822c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d039      	beq.n	8008224 <I2C_ITError+0x1bc>
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2b12      	cmp	r3, #18
 80081b4:	d002      	beq.n	80081bc <I2C_ITError+0x154>
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2b22      	cmp	r3, #34	@ 0x22
 80081ba:	d133      	bne.n	8008224 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80081c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081ca:	d107      	bne.n	80081dc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80081da:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7fd fb75 	bl	80058d0 <HAL_DMA_GetState>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d017      	beq.n	800821c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081f0:	4a14      	ldr	r2, [pc, #80]	@ (8008244 <I2C_ITError+0x1dc>)
 80081f2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008200:	4618      	mov	r0, r3
 8008202:	f7fd f9db 	bl	80055bc <HAL_DMA_Abort_IT>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d011      	beq.n	8008230 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008216:	4610      	mov	r0, r2
 8008218:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800821a:	e009      	b.n	8008230 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f813 	bl	8008248 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008222:	e005      	b.n	8008230 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f80f 	bl	8008248 <I2C_TreatErrorCallback>
  }
}
 800822a:	e002      	b.n	8008232 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800822c:	bf00      	nop
 800822e:	e000      	b.n	8008232 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008230:	bf00      	nop
}
 8008232:	bf00      	nop
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	ffff0000 	.word	0xffff0000
 8008240:	08007921 	.word	0x08007921
 8008244:	080082df 	.word	0x080082df

08008248 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b60      	cmp	r3, #96	@ 0x60
 800825a:	d10e      	bne.n	800827a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2220      	movs	r2, #32
 8008260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff fb4a 	bl	800790c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008278:	e009      	b.n	800828e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f7ff fb35 	bl	80078f8 <HAL_I2C_ErrorCallback>
}
 800828e:	bf00      	nop
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008296:	b480      	push	{r7}
 8008298:	b083      	sub	sp, #12
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d103      	bne.n	80082b4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2200      	movs	r2, #0
 80082b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d007      	beq.n	80082d2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	699a      	ldr	r2, [r3, #24]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f042 0201 	orr.w	r2, r2, #1
 80082d0:	619a      	str	r2, [r3, #24]
  }
}
 80082d2:	bf00      	nop
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b084      	sub	sp, #16
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082ea:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d003      	beq.n	80082fc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f8:	2200      	movs	r2, #0
 80082fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008300:	2b00      	cmp	r3, #0
 8008302:	d003      	beq.n	800830c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008308:	2200      	movs	r2, #0
 800830a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f7ff ff9b 	bl	8008248 <I2C_TreatErrorCallback>
}
 8008312:	bf00      	nop
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800831a:	b480      	push	{r7}
 800831c:	b085      	sub	sp, #20
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	460b      	mov	r3, r1
 8008324:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008326:	2300      	movs	r3, #0
 8008328:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800832a:	887b      	ldrh	r3, [r7, #2]
 800832c:	f003 0301 	and.w	r3, r3, #1
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00f      	beq.n	8008354 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800833a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008342:	b2db      	uxtb	r3, r3
 8008344:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008348:	2b28      	cmp	r3, #40	@ 0x28
 800834a:	d003      	beq.n	8008354 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008352:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008354:	887b      	ldrh	r3, [r7, #2]
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00f      	beq.n	800837e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008364:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800836c:	b2db      	uxtb	r3, r3
 800836e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008372:	2b28      	cmp	r3, #40	@ 0x28
 8008374:	d003      	beq.n	800837e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800837c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800837e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008382:	2b00      	cmp	r3, #0
 8008384:	da03      	bge.n	800838e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800838c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800838e:	887b      	ldrh	r3, [r7, #2]
 8008390:	2b10      	cmp	r3, #16
 8008392:	d103      	bne.n	800839c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800839a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800839c:	887b      	ldrh	r3, [r7, #2]
 800839e:	2b20      	cmp	r3, #32
 80083a0:	d103      	bne.n	80083aa <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f043 0320 	orr.w	r3, r3, #32
 80083a8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80083aa:	887b      	ldrh	r3, [r7, #2]
 80083ac:	2b40      	cmp	r3, #64	@ 0x40
 80083ae:	d103      	bne.n	80083b8 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083b6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6819      	ldr	r1, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	43da      	mvns	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	400a      	ands	r2, r1
 80083c8:	601a      	str	r2, [r3, #0]
}
 80083ca:	bf00      	nop
 80083cc:	3714      	adds	r7, #20
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b083      	sub	sp, #12
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b20      	cmp	r3, #32
 80083ea:	d138      	bne.n	800845e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d101      	bne.n	80083fa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80083f6:	2302      	movs	r3, #2
 80083f8:	e032      	b.n	8008460 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2224      	movs	r2, #36	@ 0x24
 8008406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f022 0201 	bic.w	r2, r2, #1
 8008418:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008428:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	6819      	ldr	r1, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	683a      	ldr	r2, [r7, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f042 0201 	orr.w	r2, r2, #1
 8008448:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2220      	movs	r2, #32
 800844e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	e000      	b.n	8008460 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800845e:	2302      	movs	r3, #2
  }
}
 8008460:	4618      	mov	r0, r3
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800847c:	b2db      	uxtb	r3, r3
 800847e:	2b20      	cmp	r3, #32
 8008480:	d139      	bne.n	80084f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008488:	2b01      	cmp	r3, #1
 800848a:	d101      	bne.n	8008490 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800848c:	2302      	movs	r3, #2
 800848e:	e033      	b.n	80084f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2224      	movs	r2, #36	@ 0x24
 800849c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f022 0201 	bic.w	r2, r2, #1
 80084ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80084be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	021b      	lsls	r3, r3, #8
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f042 0201 	orr.w	r2, r2, #1
 80084e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2220      	movs	r2, #32
 80084e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	e000      	b.n	80084f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80084f6:	2302      	movs	r3, #2
  }
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800850c:	2300      	movs	r3, #0
 800850e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8008510:	4b0b      	ldr	r3, [pc, #44]	@ (8008540 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0301 	and.w	r3, r3, #1
 8008518:	2b00      	cmp	r3, #0
 800851a:	d002      	beq.n	8008522 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	73fb      	strb	r3, [r7, #15]
 8008520:	e007      	b.n	8008532 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8008522:	4b07      	ldr	r3, [pc, #28]	@ (8008540 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f023 0204 	bic.w	r2, r3, #4
 800852a:	4905      	ldr	r1, [pc, #20]	@ (8008540 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4313      	orrs	r3, r2
 8008530:	600b      	str	r3, [r1, #0]
  }

  return status;
 8008532:	7bfb      	ldrb	r3, [r7, #15]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	40030400 	.word	0x40030400

08008544 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8008544:	b480      	push	{r7}
 8008546:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8008548:	4b05      	ldr	r3, [pc, #20]	@ (8008560 <HAL_ICACHE_Enable+0x1c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a04      	ldr	r2, [pc, #16]	@ (8008560 <HAL_ICACHE_Enable+0x1c>)
 800854e:	f043 0301 	orr.w	r3, r3, #1
 8008552:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr
 8008560:	40030400 	.word	0x40030400

08008564 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e0bf      	b.n	80086f6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	d106      	bne.n	8008590 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7f9 fbbc 	bl	8001d08 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2202      	movs	r2, #2
 8008594:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	699a      	ldr	r2, [r3, #24]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80085a6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6999      	ldr	r1, [r3, #24]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80085bc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	430a      	orrs	r2, r1
 80085ca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6899      	ldr	r1, [r3, #8]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	4b4a      	ldr	r3, [pc, #296]	@ (8008700 <HAL_LTDC_Init+0x19c>)
 80085d8:	400b      	ands	r3, r1
 80085da:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	695b      	ldr	r3, [r3, #20]
 80085e0:	041b      	lsls	r3, r3, #16
 80085e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6899      	ldr	r1, [r3, #8]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	699a      	ldr	r2, [r3, #24]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	431a      	orrs	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68d9      	ldr	r1, [r3, #12]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	4b3e      	ldr	r3, [pc, #248]	@ (8008700 <HAL_LTDC_Init+0x19c>)
 8008606:	400b      	ands	r3, r1
 8008608:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	041b      	lsls	r3, r3, #16
 8008610:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68d9      	ldr	r1, [r3, #12]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a1a      	ldr	r2, [r3, #32]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	431a      	orrs	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	430a      	orrs	r2, r1
 8008626:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6919      	ldr	r1, [r3, #16]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	4b33      	ldr	r3, [pc, #204]	@ (8008700 <HAL_LTDC_Init+0x19c>)
 8008634:	400b      	ands	r3, r1
 8008636:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800863c:	041b      	lsls	r3, r3, #16
 800863e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6919      	ldr	r1, [r3, #16]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	431a      	orrs	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	430a      	orrs	r2, r1
 8008654:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	6959      	ldr	r1, [r3, #20]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	4b27      	ldr	r3, [pc, #156]	@ (8008700 <HAL_LTDC_Init+0x19c>)
 8008662:	400b      	ands	r3, r1
 8008664:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866a:	041b      	lsls	r3, r3, #16
 800866c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	6959      	ldr	r1, [r3, #20]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	431a      	orrs	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	430a      	orrs	r2, r1
 8008682:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800868a:	021b      	lsls	r3, r3, #8
 800868c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008694:	041b      	lsls	r3, r3, #16
 8008696:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80086a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80086ba:	431a      	orrs	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	430a      	orrs	r2, r1
 80086c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f042 0206 	orr.w	r2, r2, #6
 80086d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	699a      	ldr	r2, [r3, #24]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f042 0201 	orr.w	r2, r2, #1
 80086e2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	f000f800 	.word	0xf000f800

08008704 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008712:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800871a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f003 0304 	and.w	r3, r3, #4
 8008722:	2b00      	cmp	r3, #0
 8008724:	d023      	beq.n	800876e <HAL_LTDC_IRQHandler+0x6a>
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	f003 0304 	and.w	r3, r3, #4
 800872c:	2b00      	cmp	r3, #0
 800872e:	d01e      	beq.n	800876e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f022 0204 	bic.w	r2, r2, #4
 800873e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2204      	movs	r2, #4
 8008746:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800874e:	f043 0201 	orr.w	r2, r3, #1
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2204      	movs	r2, #4
 800875c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f86f 	bl	800884c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f003 0302 	and.w	r3, r3, #2
 8008774:	2b00      	cmp	r3, #0
 8008776:	d023      	beq.n	80087c0 <HAL_LTDC_IRQHandler+0xbc>
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	f003 0302 	and.w	r3, r3, #2
 800877e:	2b00      	cmp	r3, #0
 8008780:	d01e      	beq.n	80087c0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f022 0202 	bic.w	r2, r2, #2
 8008790:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2202      	movs	r2, #2
 8008798:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80087a0:	f043 0202 	orr.w	r2, r3, #2
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2204      	movs	r2, #4
 80087ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f846 	bl	800884c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d01b      	beq.n	8008802 <HAL_LTDC_IRQHandler+0xfe>
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d016      	beq.n	8008802 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f022 0201 	bic.w	r2, r2, #1
 80087e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2201      	movs	r2, #1
 80087ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f82f 	bl	8008860 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f003 0308 	and.w	r3, r3, #8
 8008808:	2b00      	cmp	r3, #0
 800880a:	d01b      	beq.n	8008844 <HAL_LTDC_IRQHandler+0x140>
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	f003 0308 	and.w	r3, r3, #8
 8008812:	2b00      	cmp	r3, #0
 8008814:	d016      	beq.n	8008844 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f022 0208 	bic.w	r2, r2, #8
 8008824:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2208      	movs	r2, #8
 800882c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f818 	bl	8008874 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008844:	bf00      	nop
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008888:	b5b0      	push	{r4, r5, r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800889a:	2b01      	cmp	r3, #1
 800889c:	d101      	bne.n	80088a2 <HAL_LTDC_ConfigLayer+0x1a>
 800889e:	2302      	movs	r3, #2
 80088a0:	e02c      	b.n	80088fc <HAL_LTDC_ConfigLayer+0x74>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2202      	movs	r2, #2
 80088ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2134      	movs	r1, #52	@ 0x34
 80088b8:	fb01 f303 	mul.w	r3, r1, r3
 80088bc:	4413      	add	r3, r2
 80088be:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	4614      	mov	r4, r2
 80088c6:	461d      	mov	r5, r3
 80088c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	68b9      	ldr	r1, [r7, #8]
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f000 f811 	bl	8008904 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2201      	movs	r2, #1
 80088e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bdb0      	pop	{r4, r5, r7, pc}

08008904 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008904:	b480      	push	{r7}
 8008906:	b089      	sub	sp, #36	@ 0x24
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	0c1b      	lsrs	r3, r3, #16
 800891c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008920:	4413      	add	r3, r2
 8008922:	041b      	lsls	r3, r3, #16
 8008924:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	01db      	lsls	r3, r3, #7
 8008930:	4413      	add	r3, r2
 8008932:	3384      	adds	r3, #132	@ 0x84
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	6812      	ldr	r2, [r2, #0]
 800893a:	4611      	mov	r1, r2
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	01d2      	lsls	r2, r2, #7
 8008940:	440a      	add	r2, r1
 8008942:	3284      	adds	r2, #132	@ 0x84
 8008944:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8008948:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	0c1b      	lsrs	r3, r3, #16
 8008956:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800895a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800895c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4619      	mov	r1, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	01db      	lsls	r3, r3, #7
 8008968:	440b      	add	r3, r1
 800896a:	3384      	adds	r3, #132	@ 0x84
 800896c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008972:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	68da      	ldr	r2, [r3, #12]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008982:	4413      	add	r3, r2
 8008984:	041b      	lsls	r3, r3, #16
 8008986:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	461a      	mov	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	01db      	lsls	r3, r3, #7
 8008992:	4413      	add	r3, r2
 8008994:	3384      	adds	r3, #132	@ 0x84
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	6812      	ldr	r2, [r2, #0]
 800899c:	4611      	mov	r1, r2
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	01d2      	lsls	r2, r2, #7
 80089a2:	440a      	add	r2, r1
 80089a4:	3284      	adds	r2, #132	@ 0x84
 80089a6:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80089aa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	689a      	ldr	r2, [r3, #8]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089ba:	4413      	add	r3, r2
 80089bc:	1c5a      	adds	r2, r3, #1
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4619      	mov	r1, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	01db      	lsls	r3, r3, #7
 80089c8:	440b      	add	r3, r1
 80089ca:	3384      	adds	r3, #132	@ 0x84
 80089cc:	4619      	mov	r1, r3
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	461a      	mov	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	01db      	lsls	r3, r3, #7
 80089de:	4413      	add	r3, r2
 80089e0:	3384      	adds	r3, #132	@ 0x84
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	6812      	ldr	r2, [r2, #0]
 80089e8:	4611      	mov	r1, r2
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	01d2      	lsls	r2, r2, #7
 80089ee:	440a      	add	r2, r1
 80089f0:	3284      	adds	r2, #132	@ 0x84
 80089f2:	f023 0307 	bic.w	r3, r3, #7
 80089f6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	461a      	mov	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	01db      	lsls	r3, r3, #7
 8008a02:	4413      	add	r3, r2
 8008a04:	3384      	adds	r3, #132	@ 0x84
 8008a06:	461a      	mov	r2, r3
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008a14:	021b      	lsls	r3, r3, #8
 8008a16:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008a1e:	041b      	lsls	r3, r3, #16
 8008a20:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	061b      	lsls	r3, r3, #24
 8008a28:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008a30:	461a      	mov	r2, r3
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	431a      	orrs	r2, r3
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	431a      	orrs	r2, r3
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4619      	mov	r1, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	01db      	lsls	r3, r3, #7
 8008a44:	440b      	add	r3, r1
 8008a46:	3384      	adds	r3, #132	@ 0x84
 8008a48:	4619      	mov	r1, r3
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	461a      	mov	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	01db      	lsls	r3, r3, #7
 8008a5a:	4413      	add	r3, r2
 8008a5c:	3384      	adds	r3, #132	@ 0x84
 8008a5e:	695b      	ldr	r3, [r3, #20]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	6812      	ldr	r2, [r2, #0]
 8008a64:	4611      	mov	r1, r2
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	01d2      	lsls	r2, r2, #7
 8008a6a:	440a      	add	r2, r1
 8008a6c:	3284      	adds	r2, #132	@ 0x84
 8008a6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008a72:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	01db      	lsls	r3, r3, #7
 8008a7e:	4413      	add	r3, r2
 8008a80:	3384      	adds	r3, #132	@ 0x84
 8008a82:	461a      	mov	r2, r3
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	01db      	lsls	r3, r3, #7
 8008a94:	4413      	add	r3, r2
 8008a96:	3384      	adds	r3, #132	@ 0x84
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	6812      	ldr	r2, [r2, #0]
 8008a9e:	4611      	mov	r1, r2
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	01d2      	lsls	r2, r2, #7
 8008aa4:	440a      	add	r2, r1
 8008aa6:	3284      	adds	r2, #132	@ 0x84
 8008aa8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008aac:	f023 0307 	bic.w	r3, r3, #7
 8008ab0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	69da      	ldr	r2, [r3, #28]
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	68f9      	ldr	r1, [r7, #12]
 8008abc:	6809      	ldr	r1, [r1, #0]
 8008abe:	4608      	mov	r0, r1
 8008ac0:	6879      	ldr	r1, [r7, #4]
 8008ac2:	01c9      	lsls	r1, r1, #7
 8008ac4:	4401      	add	r1, r0
 8008ac6:	3184      	adds	r1, #132	@ 0x84
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	01db      	lsls	r3, r3, #7
 8008ad6:	4413      	add	r3, r2
 8008ad8:	3384      	adds	r3, #132	@ 0x84
 8008ada:	461a      	mov	r2, r3
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d102      	bne.n	8008af0 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8008aea:	2304      	movs	r3, #4
 8008aec:	61fb      	str	r3, [r7, #28]
 8008aee:	e01b      	b.n	8008b28 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d102      	bne.n	8008afe <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8008af8:	2303      	movs	r3, #3
 8008afa:	61fb      	str	r3, [r7, #28]
 8008afc:	e014      	b.n	8008b28 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	2b04      	cmp	r3, #4
 8008b04:	d00b      	beq.n	8008b1e <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d007      	beq.n	8008b1e <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008b12:	2b03      	cmp	r3, #3
 8008b14:	d003      	beq.n	8008b1e <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008b1a:	2b07      	cmp	r3, #7
 8008b1c:	d102      	bne.n	8008b24 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8008b1e:	2302      	movs	r3, #2
 8008b20:	61fb      	str	r3, [r7, #28]
 8008b22:	e001      	b.n	8008b28 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8008b24:	2301      	movs	r3, #1
 8008b26:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	01db      	lsls	r3, r3, #7
 8008b32:	4413      	add	r3, r2
 8008b34:	3384      	adds	r3, #132	@ 0x84
 8008b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	6812      	ldr	r2, [r2, #0]
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	01d2      	lsls	r2, r2, #7
 8008b42:	440a      	add	r2, r1
 8008b44:	3284      	adds	r2, #132	@ 0x84
 8008b46:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008b4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b50:	69fa      	ldr	r2, [r7, #28]
 8008b52:	fb02 f303 	mul.w	r3, r2, r3
 8008b56:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	6859      	ldr	r1, [r3, #4]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	1acb      	subs	r3, r1, r3
 8008b62:	69f9      	ldr	r1, [r7, #28]
 8008b64:	fb01 f303 	mul.w	r3, r1, r3
 8008b68:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008b6a:	68f9      	ldr	r1, [r7, #12]
 8008b6c:	6809      	ldr	r1, [r1, #0]
 8008b6e:	4608      	mov	r0, r1
 8008b70:	6879      	ldr	r1, [r7, #4]
 8008b72:	01c9      	lsls	r1, r1, #7
 8008b74:	4401      	add	r1, r0
 8008b76:	3184      	adds	r1, #132	@ 0x84
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	461a      	mov	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	01db      	lsls	r3, r3, #7
 8008b86:	4413      	add	r3, r2
 8008b88:	3384      	adds	r3, #132	@ 0x84
 8008b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	6812      	ldr	r2, [r2, #0]
 8008b90:	4611      	mov	r1, r2
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	01d2      	lsls	r2, r2, #7
 8008b96:	440a      	add	r2, r1
 8008b98:	3284      	adds	r2, #132	@ 0x84
 8008b9a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008b9e:	f023 0307 	bic.w	r3, r3, #7
 8008ba2:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	01db      	lsls	r3, r3, #7
 8008bae:	4413      	add	r3, r2
 8008bb0:	3384      	adds	r3, #132	@ 0x84
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	01db      	lsls	r3, r3, #7
 8008bc4:	4413      	add	r3, r2
 8008bc6:	3384      	adds	r3, #132	@ 0x84
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	6812      	ldr	r2, [r2, #0]
 8008bce:	4611      	mov	r1, r2
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	01d2      	lsls	r2, r2, #7
 8008bd4:	440a      	add	r2, r1
 8008bd6:	3284      	adds	r2, #132	@ 0x84
 8008bd8:	f043 0301 	orr.w	r3, r3, #1
 8008bdc:	6013      	str	r3, [r2, #0]
}
 8008bde:	bf00      	nop
 8008be0:	3724      	adds	r7, #36	@ 0x24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b086      	sub	sp, #24
 8008bee:	af02      	add	r7, sp, #8
 8008bf0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d101      	bne.n	8008bfc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e0fe      	b.n	8008dfa <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d106      	bne.n	8008c16 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7f9 faf1 	bl	80021f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2203      	movs	r2, #3
 8008c1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f007 fcff 	bl	8010626 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6818      	ldr	r0, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	7c1a      	ldrb	r2, [r3, #16]
 8008c30:	f88d 2000 	strb.w	r2, [sp]
 8008c34:	3304      	adds	r3, #4
 8008c36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c38:	f007 fcc6 	bl	80105c8 <USB_CoreInit>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d005      	beq.n	8008c4e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2202      	movs	r2, #2
 8008c46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e0d5      	b.n	8008dfa <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2100      	movs	r1, #0
 8008c54:	4618      	mov	r0, r3
 8008c56:	f007 fcf7 	bl	8010648 <USB_SetCurrentMode>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d005      	beq.n	8008c6c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2202      	movs	r2, #2
 8008c64:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e0c6      	b.n	8008dfa <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	73fb      	strb	r3, [r7, #15]
 8008c70:	e04a      	b.n	8008d08 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008c72:	7bfa      	ldrb	r2, [r7, #15]
 8008c74:	6879      	ldr	r1, [r7, #4]
 8008c76:	4613      	mov	r3, r2
 8008c78:	00db      	lsls	r3, r3, #3
 8008c7a:	4413      	add	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	440b      	add	r3, r1
 8008c80:	3315      	adds	r3, #21
 8008c82:	2201      	movs	r2, #1
 8008c84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008c86:	7bfa      	ldrb	r2, [r7, #15]
 8008c88:	6879      	ldr	r1, [r7, #4]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	00db      	lsls	r3, r3, #3
 8008c8e:	4413      	add	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	440b      	add	r3, r1
 8008c94:	3314      	adds	r3, #20
 8008c96:	7bfa      	ldrb	r2, [r7, #15]
 8008c98:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008c9a:	7bfa      	ldrb	r2, [r7, #15]
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
 8008c9e:	b298      	uxth	r0, r3
 8008ca0:	6879      	ldr	r1, [r7, #4]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	00db      	lsls	r3, r3, #3
 8008ca6:	4413      	add	r3, r2
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	440b      	add	r3, r1
 8008cac:	332e      	adds	r3, #46	@ 0x2e
 8008cae:	4602      	mov	r2, r0
 8008cb0:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008cb2:	7bfa      	ldrb	r2, [r7, #15]
 8008cb4:	6879      	ldr	r1, [r7, #4]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	00db      	lsls	r3, r3, #3
 8008cba:	4413      	add	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	440b      	add	r3, r1
 8008cc0:	3318      	adds	r3, #24
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008cc6:	7bfa      	ldrb	r2, [r7, #15]
 8008cc8:	6879      	ldr	r1, [r7, #4]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	00db      	lsls	r3, r3, #3
 8008cce:	4413      	add	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	440b      	add	r3, r1
 8008cd4:	331c      	adds	r3, #28
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008cda:	7bfa      	ldrb	r2, [r7, #15]
 8008cdc:	6879      	ldr	r1, [r7, #4]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	00db      	lsls	r3, r3, #3
 8008ce2:	4413      	add	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	440b      	add	r3, r1
 8008ce8:	3320      	adds	r3, #32
 8008cea:	2200      	movs	r2, #0
 8008cec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008cee:	7bfa      	ldrb	r2, [r7, #15]
 8008cf0:	6879      	ldr	r1, [r7, #4]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	00db      	lsls	r3, r3, #3
 8008cf6:	4413      	add	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	440b      	add	r3, r1
 8008cfc:	3324      	adds	r3, #36	@ 0x24
 8008cfe:	2200      	movs	r2, #0
 8008d00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d02:	7bfb      	ldrb	r3, [r7, #15]
 8008d04:	3301      	adds	r3, #1
 8008d06:	73fb      	strb	r3, [r7, #15]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	791b      	ldrb	r3, [r3, #4]
 8008d0c:	7bfa      	ldrb	r2, [r7, #15]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d3af      	bcc.n	8008c72 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d12:	2300      	movs	r3, #0
 8008d14:	73fb      	strb	r3, [r7, #15]
 8008d16:	e044      	b.n	8008da2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008d18:	7bfa      	ldrb	r2, [r7, #15]
 8008d1a:	6879      	ldr	r1, [r7, #4]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	00db      	lsls	r3, r3, #3
 8008d20:	4413      	add	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	440b      	add	r3, r1
 8008d26:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008d2e:	7bfa      	ldrb	r2, [r7, #15]
 8008d30:	6879      	ldr	r1, [r7, #4]
 8008d32:	4613      	mov	r3, r2
 8008d34:	00db      	lsls	r3, r3, #3
 8008d36:	4413      	add	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	440b      	add	r3, r1
 8008d3c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008d40:	7bfa      	ldrb	r2, [r7, #15]
 8008d42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008d44:	7bfa      	ldrb	r2, [r7, #15]
 8008d46:	6879      	ldr	r1, [r7, #4]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	00db      	lsls	r3, r3, #3
 8008d4c:	4413      	add	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	440b      	add	r3, r1
 8008d52:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008d56:	2200      	movs	r2, #0
 8008d58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008d5a:	7bfa      	ldrb	r2, [r7, #15]
 8008d5c:	6879      	ldr	r1, [r7, #4]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	00db      	lsls	r3, r3, #3
 8008d62:	4413      	add	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	440b      	add	r3, r1
 8008d68:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008d70:	7bfa      	ldrb	r2, [r7, #15]
 8008d72:	6879      	ldr	r1, [r7, #4]
 8008d74:	4613      	mov	r3, r2
 8008d76:	00db      	lsls	r3, r3, #3
 8008d78:	4413      	add	r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	440b      	add	r3, r1
 8008d7e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008d86:	7bfa      	ldrb	r2, [r7, #15]
 8008d88:	6879      	ldr	r1, [r7, #4]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	00db      	lsls	r3, r3, #3
 8008d8e:	4413      	add	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	440b      	add	r3, r1
 8008d94:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008d98:	2200      	movs	r2, #0
 8008d9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	73fb      	strb	r3, [r7, #15]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	791b      	ldrb	r3, [r3, #4]
 8008da6:	7bfa      	ldrb	r2, [r7, #15]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d3b5      	bcc.n	8008d18 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6818      	ldr	r0, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	7c1a      	ldrb	r2, [r3, #16]
 8008db4:	f88d 2000 	strb.w	r2, [sp]
 8008db8:	3304      	adds	r3, #4
 8008dba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008dbc:	f007 fc90 	bl	80106e0 <USB_DevInit>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d005      	beq.n	8008dd2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2202      	movs	r2, #2
 8008dca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e013      	b.n	8008dfa <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	7b1b      	ldrb	r3, [r3, #12]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d102      	bne.n	8008dee <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f80a 	bl	8008e02 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f007 fe5d 	bl	8010ab2 <USB_DevDisconnect>

  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b085      	sub	sp, #20
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e34:	f043 0303 	orr.w	r3, r3, #3
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
	...

08008e4c <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008e50:	4b05      	ldr	r3, [pc, #20]	@ (8008e68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e54:	4a04      	ldr	r2, [pc, #16]	@ (8008e68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008e56:	f043 0301 	orr.w	r3, r3, #1
 8008e5a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8008e5c:	bf00      	nop
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	46020800 	.word	0x46020800

08008e6c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8008e74:	4b39      	ldr	r3, [pc, #228]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008e7c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d10b      	bne.n	8008e9e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e8c:	d905      	bls.n	8008e9a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008e8e:	4b33      	ldr	r3, [pc, #204]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	4a32      	ldr	r2, [pc, #200]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e98:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	e057      	b.n	8008f4e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ea4:	d90a      	bls.n	8008ebc <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8008ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	4a2a      	ldr	r2, [pc, #168]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008eb8:	60d3      	str	r3, [r2, #12]
 8008eba:	e007      	b.n	8008ecc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8008ebc:	4b27      	ldr	r3, [pc, #156]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8008ec4:	4925      	ldr	r1, [pc, #148]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008ecc:	4b24      	ldr	r3, [pc, #144]	@ (8008f60 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a24      	ldr	r2, [pc, #144]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ed6:	099b      	lsrs	r3, r3, #6
 8008ed8:	2232      	movs	r2, #50	@ 0x32
 8008eda:	fb02 f303 	mul.w	r3, r2, r3
 8008ede:	4a21      	ldr	r2, [pc, #132]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee4:	099b      	lsrs	r3, r3, #6
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8008eea:	e002      	b.n	8008ef2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8008ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d102      	bne.n	8008f04 <HAL_PWREx_ControlVoltageScaling+0x98>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1f3      	bne.n	8008eec <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d01b      	beq.n	8008f42 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008f0a:	4b15      	ldr	r3, [pc, #84]	@ (8008f60 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a15      	ldr	r2, [pc, #84]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008f10:	fba2 2303 	umull	r2, r3, r2, r3
 8008f14:	099b      	lsrs	r3, r3, #6
 8008f16:	2232      	movs	r2, #50	@ 0x32
 8008f18:	fb02 f303 	mul.w	r3, r2, r3
 8008f1c:	4a11      	ldr	r2, [pc, #68]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f22:	099b      	lsrs	r3, r3, #6
 8008f24:	3301      	adds	r3, #1
 8008f26:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008f28:	e002      	b.n	8008f30 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008f30:	4b0a      	ldr	r3, [pc, #40]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d102      	bne.n	8008f42 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1f3      	bne.n	8008f2a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d101      	bne.n	8008f4c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e000      	b.n	8008f4e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3714      	adds	r7, #20
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	46020800 	.word	0x46020800
 8008f60:	20000000 	.word	0x20000000
 8008f64:	10624dd3 	.word	0x10624dd3

08008f68 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8008f6c:	4b04      	ldr	r3, [pc, #16]	@ (8008f80 <HAL_PWREx_GetVoltageRange+0x18>)
 8008f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	46020800 	.word	0x46020800

08008f84 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008f8c:	4b22      	ldr	r3, [pc, #136]	@ (8009018 <HAL_PWREx_ConfigSupply+0x94>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a22      	ldr	r2, [pc, #136]	@ (800901c <HAL_PWREx_ConfigSupply+0x98>)
 8008f92:	fba2 2303 	umull	r2, r3, r2, r3
 8008f96:	099b      	lsrs	r3, r3, #6
 8008f98:	2232      	movs	r2, #50	@ 0x32
 8008f9a:	fb02 f303 	mul.w	r3, r2, r3
 8008f9e:	4a1f      	ldr	r2, [pc, #124]	@ (800901c <HAL_PWREx_ConfigSupply+0x98>)
 8008fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa4:	099b      	lsrs	r3, r3, #6
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d113      	bne.n	8008fd8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8008fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8009020 <HAL_PWREx_ConfigSupply+0x9c>)
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8009020 <HAL_PWREx_ConfigSupply+0x9c>)
 8008fb6:	f023 0302 	bic.w	r3, r3, #2
 8008fba:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008fbc:	e002      	b.n	8008fc4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008fc4:	4b16      	ldr	r3, [pc, #88]	@ (8009020 <HAL_PWREx_ConfigSupply+0x9c>)
 8008fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fc8:	f003 0302 	and.w	r3, r3, #2
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d116      	bne.n	8008ffe <HAL_PWREx_ConfigSupply+0x7a>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1f3      	bne.n	8008fbe <HAL_PWREx_ConfigSupply+0x3a>
 8008fd6:	e012      	b.n	8008ffe <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8008fd8:	4b11      	ldr	r3, [pc, #68]	@ (8009020 <HAL_PWREx_ConfigSupply+0x9c>)
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	4a10      	ldr	r2, [pc, #64]	@ (8009020 <HAL_PWREx_ConfigSupply+0x9c>)
 8008fde:	f043 0302 	orr.w	r3, r3, #2
 8008fe2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008fe4:	e002      	b.n	8008fec <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008fec:	4b0c      	ldr	r3, [pc, #48]	@ (8009020 <HAL_PWREx_ConfigSupply+0x9c>)
 8008fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ff0:	f003 0302 	and.w	r3, r3, #2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d102      	bne.n	8008ffe <HAL_PWREx_ConfigSupply+0x7a>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1f3      	bne.n	8008fe6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e000      	b.n	800900a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	20000000 	.word	0x20000000
 800901c:	10624dd3 	.word	0x10624dd3
 8009020:	46020800 	.word	0x46020800

08009024 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009024:	b480      	push	{r7}
 8009026:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8009028:	4b05      	ldr	r3, [pc, #20]	@ (8009040 <HAL_PWREx_EnableVddUSB+0x1c>)
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	4a04      	ldr	r2, [pc, #16]	@ (8009040 <HAL_PWREx_EnableVddUSB+0x1c>)
 800902e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009032:	6113      	str	r3, [r2, #16]
}
 8009034:	bf00      	nop
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	46020800 	.word	0x46020800

08009044 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8009044:	b480      	push	{r7}
 8009046:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8009048:	4b05      	ldr	r3, [pc, #20]	@ (8009060 <HAL_PWREx_EnableVddIO2+0x1c>)
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	4a04      	ldr	r2, [pc, #16]	@ (8009060 <HAL_PWREx_EnableVddIO2+0x1c>)
 800904e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009052:	6113      	str	r3, [r2, #16]
}
 8009054:	bf00      	nop
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	46020800 	.word	0x46020800

08009064 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8009064:	b480      	push	{r7}
 8009066:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8009068:	4b05      	ldr	r3, [pc, #20]	@ (8009080 <HAL_PWREx_EnableVddA+0x1c>)
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	4a04      	ldr	r2, [pc, #16]	@ (8009080 <HAL_PWREx_EnableVddA+0x1c>)
 800906e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009072:	6113      	str	r3, [r2, #16]
}
 8009074:	bf00      	nop
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	46020800 	.word	0x46020800

08009084 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 800908a:	f7ff ff6d 	bl	8008f68 <HAL_PWREx_GetVoltageRange>
 800908e:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009096:	d003      	beq.n	80090a0 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800909e:	d107      	bne.n	80090b0 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 80090a0:	4b06      	ldr	r3, [pc, #24]	@ (80090bc <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	4a05      	ldr	r2, [pc, #20]	@ (80090bc <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80090a6:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 80090aa:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	e000      	b.n	80090b2 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	46020800 	.word	0x46020800

080090c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b08e      	sub	sp, #56	@ 0x38
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80090c8:	2300      	movs	r3, #0
 80090ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d102      	bne.n	80090da <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	f000 bec8 	b.w	8009e6a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090da:	4b99      	ldr	r3, [pc, #612]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	f003 030c 	and.w	r3, r3, #12
 80090e2:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80090e4:	4b96      	ldr	r3, [pc, #600]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 80090e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e8:	f003 0303 	and.w	r3, r3, #3
 80090ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f003 0310 	and.w	r3, r3, #16
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f000 816c 	beq.w	80093d4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80090fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d007      	beq.n	8009112 <HAL_RCC_OscConfig+0x52>
 8009102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009104:	2b0c      	cmp	r3, #12
 8009106:	f040 80de 	bne.w	80092c6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800910a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800910c:	2b01      	cmp	r3, #1
 800910e:	f040 80da 	bne.w	80092c6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	69db      	ldr	r3, [r3, #28]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d102      	bne.n	8009120 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	f000 bea5 	b.w	8009e6a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009124:	4b86      	ldr	r3, [pc, #536]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d004      	beq.n	800913a <HAL_RCC_OscConfig+0x7a>
 8009130:	4b83      	ldr	r3, [pc, #524]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009138:	e005      	b.n	8009146 <HAL_RCC_OscConfig+0x86>
 800913a:	4b81      	ldr	r3, [pc, #516]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 800913c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009140:	041b      	lsls	r3, r3, #16
 8009142:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009146:	4293      	cmp	r3, r2
 8009148:	d255      	bcs.n	80091f6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800914a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10a      	bne.n	8009166 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009154:	4618      	mov	r0, r3
 8009156:	f001 f9d9 	bl	800a50c <RCC_SetFlashLatencyFromMSIRange>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d002      	beq.n	8009166 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	f000 be82 	b.w	8009e6a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009166:	4b76      	ldr	r3, [pc, #472]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	4a75      	ldr	r2, [pc, #468]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 800916c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009170:	6093      	str	r3, [r2, #8]
 8009172:	4b73      	ldr	r3, [pc, #460]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800917e:	4970      	ldr	r1, [pc, #448]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 8009180:	4313      	orrs	r3, r2
 8009182:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009188:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800918c:	d309      	bcc.n	80091a2 <HAL_RCC_OscConfig+0xe2>
 800918e:	4b6c      	ldr	r3, [pc, #432]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	f023 021f 	bic.w	r2, r3, #31
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a1b      	ldr	r3, [r3, #32]
 800919a:	4969      	ldr	r1, [pc, #420]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 800919c:	4313      	orrs	r3, r2
 800919e:	60cb      	str	r3, [r1, #12]
 80091a0:	e07e      	b.n	80092a0 <HAL_RCC_OscConfig+0x1e0>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	da0a      	bge.n	80091c0 <HAL_RCC_OscConfig+0x100>
 80091aa:	4b65      	ldr	r3, [pc, #404]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	015b      	lsls	r3, r3, #5
 80091b8:	4961      	ldr	r1, [pc, #388]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	60cb      	str	r3, [r1, #12]
 80091be:	e06f      	b.n	80092a0 <HAL_RCC_OscConfig+0x1e0>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091c8:	d30a      	bcc.n	80091e0 <HAL_RCC_OscConfig+0x120>
 80091ca:	4b5d      	ldr	r3, [pc, #372]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	029b      	lsls	r3, r3, #10
 80091d8:	4959      	ldr	r1, [pc, #356]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 80091da:	4313      	orrs	r3, r2
 80091dc:	60cb      	str	r3, [r1, #12]
 80091de:	e05f      	b.n	80092a0 <HAL_RCC_OscConfig+0x1e0>
 80091e0:	4b57      	ldr	r3, [pc, #348]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	03db      	lsls	r3, r3, #15
 80091ee:	4954      	ldr	r1, [pc, #336]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 80091f0:	4313      	orrs	r3, r2
 80091f2:	60cb      	str	r3, [r1, #12]
 80091f4:	e054      	b.n	80092a0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80091f6:	4b52      	ldr	r3, [pc, #328]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	4a51      	ldr	r2, [pc, #324]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 80091fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009200:	6093      	str	r3, [r2, #8]
 8009202:	4b4f      	ldr	r3, [pc, #316]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800920e:	494c      	ldr	r1, [pc, #304]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 8009210:	4313      	orrs	r3, r2
 8009212:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009218:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800921c:	d309      	bcc.n	8009232 <HAL_RCC_OscConfig+0x172>
 800921e:	4b48      	ldr	r3, [pc, #288]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	f023 021f 	bic.w	r2, r3, #31
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a1b      	ldr	r3, [r3, #32]
 800922a:	4945      	ldr	r1, [pc, #276]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 800922c:	4313      	orrs	r3, r2
 800922e:	60cb      	str	r3, [r1, #12]
 8009230:	e028      	b.n	8009284 <HAL_RCC_OscConfig+0x1c4>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009236:	2b00      	cmp	r3, #0
 8009238:	da0a      	bge.n	8009250 <HAL_RCC_OscConfig+0x190>
 800923a:	4b41      	ldr	r3, [pc, #260]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	015b      	lsls	r3, r3, #5
 8009248:	493d      	ldr	r1, [pc, #244]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 800924a:	4313      	orrs	r3, r2
 800924c:	60cb      	str	r3, [r1, #12]
 800924e:	e019      	b.n	8009284 <HAL_RCC_OscConfig+0x1c4>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009258:	d30a      	bcc.n	8009270 <HAL_RCC_OscConfig+0x1b0>
 800925a:	4b39      	ldr	r3, [pc, #228]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a1b      	ldr	r3, [r3, #32]
 8009266:	029b      	lsls	r3, r3, #10
 8009268:	4935      	ldr	r1, [pc, #212]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 800926a:	4313      	orrs	r3, r2
 800926c:	60cb      	str	r3, [r1, #12]
 800926e:	e009      	b.n	8009284 <HAL_RCC_OscConfig+0x1c4>
 8009270:	4b33      	ldr	r3, [pc, #204]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a1b      	ldr	r3, [r3, #32]
 800927c:	03db      	lsls	r3, r3, #15
 800927e:	4930      	ldr	r1, [pc, #192]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 8009280:	4313      	orrs	r3, r2
 8009282:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10a      	bne.n	80092a0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800928e:	4618      	mov	r0, r3
 8009290:	f001 f93c 	bl	800a50c <RCC_SetFlashLatencyFromMSIRange>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d002      	beq.n	80092a0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	f000 bde5 	b.w	8009e6a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80092a0:	f001 f8de 	bl	800a460 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80092a4:	4b27      	ldr	r3, [pc, #156]	@ (8009344 <HAL_RCC_OscConfig+0x284>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7f9 fb15 	bl	80028d8 <HAL_InitTick>
 80092ae:	4603      	mov	r3, r0
 80092b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80092b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f000 808a 	beq.w	80093d2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80092be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092c2:	f000 bdd2 	b.w	8009e6a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d066      	beq.n	800939c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80092ce:	4b1c      	ldr	r3, [pc, #112]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a1b      	ldr	r2, [pc, #108]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 80092d4:	f043 0301 	orr.w	r3, r3, #1
 80092d8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80092da:	f7f9 fb87 	bl	80029ec <HAL_GetTick>
 80092de:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80092e0:	e009      	b.n	80092f6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80092e2:	f7f9 fb83 	bl	80029ec <HAL_GetTick>
 80092e6:	4602      	mov	r2, r0
 80092e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d902      	bls.n	80092f6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	f000 bdba 	b.w	8009e6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80092f6:	4b12      	ldr	r3, [pc, #72]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 0304 	and.w	r3, r3, #4
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d0ef      	beq.n	80092e2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009302:	4b0f      	ldr	r3, [pc, #60]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	4a0e      	ldr	r2, [pc, #56]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 8009308:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800930c:	6093      	str	r3, [r2, #8]
 800930e:	4b0c      	ldr	r3, [pc, #48]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800931a:	4909      	ldr	r1, [pc, #36]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 800931c:	4313      	orrs	r3, r2
 800931e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009324:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009328:	d30e      	bcc.n	8009348 <HAL_RCC_OscConfig+0x288>
 800932a:	4b05      	ldr	r3, [pc, #20]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	f023 021f 	bic.w	r2, r3, #31
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a1b      	ldr	r3, [r3, #32]
 8009336:	4902      	ldr	r1, [pc, #8]	@ (8009340 <HAL_RCC_OscConfig+0x280>)
 8009338:	4313      	orrs	r3, r2
 800933a:	60cb      	str	r3, [r1, #12]
 800933c:	e04a      	b.n	80093d4 <HAL_RCC_OscConfig+0x314>
 800933e:	bf00      	nop
 8009340:	46020c00 	.word	0x46020c00
 8009344:	20000004 	.word	0x20000004
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800934c:	2b00      	cmp	r3, #0
 800934e:	da0a      	bge.n	8009366 <HAL_RCC_OscConfig+0x2a6>
 8009350:	4b98      	ldr	r3, [pc, #608]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6a1b      	ldr	r3, [r3, #32]
 800935c:	015b      	lsls	r3, r3, #5
 800935e:	4995      	ldr	r1, [pc, #596]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009360:	4313      	orrs	r3, r2
 8009362:	60cb      	str	r3, [r1, #12]
 8009364:	e036      	b.n	80093d4 <HAL_RCC_OscConfig+0x314>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800936a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800936e:	d30a      	bcc.n	8009386 <HAL_RCC_OscConfig+0x2c6>
 8009370:	4b90      	ldr	r3, [pc, #576]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	029b      	lsls	r3, r3, #10
 800937e:	498d      	ldr	r1, [pc, #564]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009380:	4313      	orrs	r3, r2
 8009382:	60cb      	str	r3, [r1, #12]
 8009384:	e026      	b.n	80093d4 <HAL_RCC_OscConfig+0x314>
 8009386:	4b8b      	ldr	r3, [pc, #556]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a1b      	ldr	r3, [r3, #32]
 8009392:	03db      	lsls	r3, r3, #15
 8009394:	4987      	ldr	r1, [pc, #540]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009396:	4313      	orrs	r3, r2
 8009398:	60cb      	str	r3, [r1, #12]
 800939a:	e01b      	b.n	80093d4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800939c:	4b85      	ldr	r3, [pc, #532]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a84      	ldr	r2, [pc, #528]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 80093a2:	f023 0301 	bic.w	r3, r3, #1
 80093a6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80093a8:	f7f9 fb20 	bl	80029ec <HAL_GetTick>
 80093ac:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80093ae:	e009      	b.n	80093c4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80093b0:	f7f9 fb1c 	bl	80029ec <HAL_GetTick>
 80093b4:	4602      	mov	r2, r0
 80093b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d902      	bls.n	80093c4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80093be:	2303      	movs	r3, #3
 80093c0:	f000 bd53 	b.w	8009e6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80093c4:	4b7b      	ldr	r3, [pc, #492]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 0304 	and.w	r3, r3, #4
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1ef      	bne.n	80093b0 <HAL_RCC_OscConfig+0x2f0>
 80093d0:	e000      	b.n	80093d4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80093d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 0301 	and.w	r3, r3, #1
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 808b 	beq.w	80094f8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80093e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e4:	2b08      	cmp	r3, #8
 80093e6:	d005      	beq.n	80093f4 <HAL_RCC_OscConfig+0x334>
 80093e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ea:	2b0c      	cmp	r3, #12
 80093ec:	d109      	bne.n	8009402 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80093ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f0:	2b03      	cmp	r3, #3
 80093f2:	d106      	bne.n	8009402 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d17d      	bne.n	80094f8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	f000 bd34 	b.w	8009e6a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800940a:	d106      	bne.n	800941a <HAL_RCC_OscConfig+0x35a>
 800940c:	4b69      	ldr	r3, [pc, #420]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a68      	ldr	r2, [pc, #416]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009412:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009416:	6013      	str	r3, [r2, #0]
 8009418:	e041      	b.n	800949e <HAL_RCC_OscConfig+0x3de>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009422:	d112      	bne.n	800944a <HAL_RCC_OscConfig+0x38a>
 8009424:	4b63      	ldr	r3, [pc, #396]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a62      	ldr	r2, [pc, #392]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 800942a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800942e:	6013      	str	r3, [r2, #0]
 8009430:	4b60      	ldr	r3, [pc, #384]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a5f      	ldr	r2, [pc, #380]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009436:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800943a:	6013      	str	r3, [r2, #0]
 800943c:	4b5d      	ldr	r3, [pc, #372]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a5c      	ldr	r2, [pc, #368]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009442:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009446:	6013      	str	r3, [r2, #0]
 8009448:	e029      	b.n	800949e <HAL_RCC_OscConfig+0x3de>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8009452:	d112      	bne.n	800947a <HAL_RCC_OscConfig+0x3ba>
 8009454:	4b57      	ldr	r3, [pc, #348]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a56      	ldr	r2, [pc, #344]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 800945a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800945e:	6013      	str	r3, [r2, #0]
 8009460:	4b54      	ldr	r3, [pc, #336]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a53      	ldr	r2, [pc, #332]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800946a:	6013      	str	r3, [r2, #0]
 800946c:	4b51      	ldr	r3, [pc, #324]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a50      	ldr	r2, [pc, #320]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009476:	6013      	str	r3, [r2, #0]
 8009478:	e011      	b.n	800949e <HAL_RCC_OscConfig+0x3de>
 800947a:	4b4e      	ldr	r3, [pc, #312]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a4d      	ldr	r2, [pc, #308]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009480:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009484:	6013      	str	r3, [r2, #0]
 8009486:	4b4b      	ldr	r3, [pc, #300]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a4a      	ldr	r2, [pc, #296]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 800948c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009490:	6013      	str	r3, [r2, #0]
 8009492:	4b48      	ldr	r3, [pc, #288]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a47      	ldr	r2, [pc, #284]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009498:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800949c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d014      	beq.n	80094d0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80094a6:	f7f9 faa1 	bl	80029ec <HAL_GetTick>
 80094aa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80094ac:	e009      	b.n	80094c2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80094ae:	f7f9 fa9d 	bl	80029ec <HAL_GetTick>
 80094b2:	4602      	mov	r2, r0
 80094b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	2b64      	cmp	r3, #100	@ 0x64
 80094ba:	d902      	bls.n	80094c2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	f000 bcd4 	b.w	8009e6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80094c2:	4b3c      	ldr	r3, [pc, #240]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d0ef      	beq.n	80094ae <HAL_RCC_OscConfig+0x3ee>
 80094ce:	e013      	b.n	80094f8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80094d0:	f7f9 fa8c 	bl	80029ec <HAL_GetTick>
 80094d4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80094d6:	e009      	b.n	80094ec <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80094d8:	f7f9 fa88 	bl	80029ec <HAL_GetTick>
 80094dc:	4602      	mov	r2, r0
 80094de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e0:	1ad3      	subs	r3, r2, r3
 80094e2:	2b64      	cmp	r3, #100	@ 0x64
 80094e4:	d902      	bls.n	80094ec <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	f000 bcbf 	b.w	8009e6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80094ec:	4b31      	ldr	r3, [pc, #196]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1ef      	bne.n	80094d8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 0302 	and.w	r3, r3, #2
 8009500:	2b00      	cmp	r3, #0
 8009502:	d05f      	beq.n	80095c4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009506:	2b04      	cmp	r3, #4
 8009508:	d005      	beq.n	8009516 <HAL_RCC_OscConfig+0x456>
 800950a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950c:	2b0c      	cmp	r3, #12
 800950e:	d114      	bne.n	800953a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009512:	2b02      	cmp	r3, #2
 8009514:	d111      	bne.n	800953a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d102      	bne.n	8009524 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	f000 bca3 	b.w	8009e6a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009524:	4b23      	ldr	r3, [pc, #140]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009526:	691b      	ldr	r3, [r3, #16]
 8009528:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	041b      	lsls	r3, r3, #16
 8009532:	4920      	ldr	r1, [pc, #128]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009534:	4313      	orrs	r3, r2
 8009536:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009538:	e044      	b.n	80095c4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d024      	beq.n	800958c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8009542:	4b1c      	ldr	r3, [pc, #112]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a1b      	ldr	r2, [pc, #108]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800954c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800954e:	f7f9 fa4d 	bl	80029ec <HAL_GetTick>
 8009552:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009554:	e009      	b.n	800956a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009556:	f7f9 fa49 	bl	80029ec <HAL_GetTick>
 800955a:	4602      	mov	r2, r0
 800955c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	2b02      	cmp	r3, #2
 8009562:	d902      	bls.n	800956a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009564:	2303      	movs	r3, #3
 8009566:	f000 bc80 	b.w	8009e6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800956a:	4b12      	ldr	r3, [pc, #72]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009572:	2b00      	cmp	r3, #0
 8009574:	d0ef      	beq.n	8009556 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009576:	4b0f      	ldr	r3, [pc, #60]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	041b      	lsls	r3, r3, #16
 8009584:	490b      	ldr	r1, [pc, #44]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009586:	4313      	orrs	r3, r2
 8009588:	610b      	str	r3, [r1, #16]
 800958a:	e01b      	b.n	80095c4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800958c:	4b09      	ldr	r3, [pc, #36]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a08      	ldr	r2, [pc, #32]	@ (80095b4 <HAL_RCC_OscConfig+0x4f4>)
 8009592:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009596:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009598:	f7f9 fa28 	bl	80029ec <HAL_GetTick>
 800959c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800959e:	e00b      	b.n	80095b8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095a0:	f7f9 fa24 	bl	80029ec <HAL_GetTick>
 80095a4:	4602      	mov	r2, r0
 80095a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d904      	bls.n	80095b8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80095ae:	2303      	movs	r3, #3
 80095b0:	f000 bc5b 	b.w	8009e6a <HAL_RCC_OscConfig+0xdaa>
 80095b4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80095b8:	4baf      	ldr	r3, [pc, #700]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1ed      	bne.n	80095a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f003 0308 	and.w	r3, r3, #8
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 80c8 	beq.w	8009762 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80095d2:	2300      	movs	r3, #0
 80095d4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80095d8:	4ba7      	ldr	r3, [pc, #668]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 80095da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80095de:	f003 0304 	and.w	r3, r3, #4
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d111      	bne.n	800960a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095e6:	4ba4      	ldr	r3, [pc, #656]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 80095e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80095ec:	4aa2      	ldr	r2, [pc, #648]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 80095ee:	f043 0304 	orr.w	r3, r3, #4
 80095f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80095f6:	4ba0      	ldr	r3, [pc, #640]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 80095f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80095fc:	f003 0304 	and.w	r3, r3, #4
 8009600:	617b      	str	r3, [r7, #20]
 8009602:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8009604:	2301      	movs	r3, #1
 8009606:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800960a:	4b9c      	ldr	r3, [pc, #624]	@ (800987c <HAL_RCC_OscConfig+0x7bc>)
 800960c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d119      	bne.n	800964a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009616:	4b99      	ldr	r3, [pc, #612]	@ (800987c <HAL_RCC_OscConfig+0x7bc>)
 8009618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800961a:	4a98      	ldr	r2, [pc, #608]	@ (800987c <HAL_RCC_OscConfig+0x7bc>)
 800961c:	f043 0301 	orr.w	r3, r3, #1
 8009620:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009622:	f7f9 f9e3 	bl	80029ec <HAL_GetTick>
 8009626:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009628:	e009      	b.n	800963e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800962a:	f7f9 f9df 	bl	80029ec <HAL_GetTick>
 800962e:	4602      	mov	r2, r0
 8009630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	2b02      	cmp	r3, #2
 8009636:	d902      	bls.n	800963e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8009638:	2303      	movs	r3, #3
 800963a:	f000 bc16 	b.w	8009e6a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800963e:	4b8f      	ldr	r3, [pc, #572]	@ (800987c <HAL_RCC_OscConfig+0x7bc>)
 8009640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009642:	f003 0301 	and.w	r3, r3, #1
 8009646:	2b00      	cmp	r3, #0
 8009648:	d0ef      	beq.n	800962a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d05f      	beq.n	8009712 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8009652:	4b89      	ldr	r3, [pc, #548]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 8009654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009658:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	699a      	ldr	r2, [r3, #24]
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009664:	429a      	cmp	r2, r3
 8009666:	d037      	beq.n	80096d8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009668:	6a3b      	ldr	r3, [r7, #32]
 800966a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800966e:	2b00      	cmp	r3, #0
 8009670:	d006      	beq.n	8009680 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8009672:	6a3b      	ldr	r3, [r7, #32]
 8009674:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	e3f4      	b.n	8009e6a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8009680:	6a3b      	ldr	r3, [r7, #32]
 8009682:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009686:	2b00      	cmp	r3, #0
 8009688:	d01b      	beq.n	80096c2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800968a:	4b7b      	ldr	r3, [pc, #492]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 800968c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009690:	4a79      	ldr	r2, [pc, #484]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 8009692:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009696:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800969a:	f7f9 f9a7 	bl	80029ec <HAL_GetTick>
 800969e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80096a0:	e008      	b.n	80096b4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096a2:	f7f9 f9a3 	bl	80029ec <HAL_GetTick>
 80096a6:	4602      	mov	r2, r0
 80096a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	2b05      	cmp	r3, #5
 80096ae:	d901      	bls.n	80096b4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80096b0:	2303      	movs	r3, #3
 80096b2:	e3da      	b.n	8009e6a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80096b4:	4b70      	ldr	r3, [pc, #448]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 80096b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1ef      	bne.n	80096a2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80096c2:	4b6d      	ldr	r3, [pc, #436]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 80096c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096c8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	4969      	ldr	r1, [pc, #420]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80096d8:	4b67      	ldr	r3, [pc, #412]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 80096da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096de:	4a66      	ldr	r2, [pc, #408]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 80096e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80096e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80096e8:	f7f9 f980 	bl	80029ec <HAL_GetTick>
 80096ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80096ee:	e008      	b.n	8009702 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096f0:	f7f9 f97c 	bl	80029ec <HAL_GetTick>
 80096f4:	4602      	mov	r2, r0
 80096f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	2b05      	cmp	r3, #5
 80096fc:	d901      	bls.n	8009702 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80096fe:	2303      	movs	r3, #3
 8009700:	e3b3      	b.n	8009e6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009702:	4b5d      	ldr	r3, [pc, #372]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 8009704:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800970c:	2b00      	cmp	r3, #0
 800970e:	d0ef      	beq.n	80096f0 <HAL_RCC_OscConfig+0x630>
 8009710:	e01b      	b.n	800974a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8009712:	4b59      	ldr	r3, [pc, #356]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 8009714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009718:	4a57      	ldr	r2, [pc, #348]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 800971a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800971e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009722:	f7f9 f963 	bl	80029ec <HAL_GetTick>
 8009726:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009728:	e008      	b.n	800973c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800972a:	f7f9 f95f 	bl	80029ec <HAL_GetTick>
 800972e:	4602      	mov	r2, r0
 8009730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	2b05      	cmp	r3, #5
 8009736:	d901      	bls.n	800973c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8009738:	2303      	movs	r3, #3
 800973a:	e396      	b.n	8009e6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800973c:	4b4e      	ldr	r3, [pc, #312]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 800973e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009742:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1ef      	bne.n	800972a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800974a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800974e:	2b01      	cmp	r3, #1
 8009750:	d107      	bne.n	8009762 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009752:	4b49      	ldr	r3, [pc, #292]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 8009754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009758:	4a47      	ldr	r2, [pc, #284]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 800975a:	f023 0304 	bic.w	r3, r3, #4
 800975e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 0304 	and.w	r3, r3, #4
 800976a:	2b00      	cmp	r3, #0
 800976c:	f000 8111 	beq.w	8009992 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8009770:	2300      	movs	r3, #0
 8009772:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009776:	4b40      	ldr	r3, [pc, #256]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 8009778:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800977c:	f003 0304 	and.w	r3, r3, #4
 8009780:	2b00      	cmp	r3, #0
 8009782:	d111      	bne.n	80097a8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009784:	4b3c      	ldr	r3, [pc, #240]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 8009786:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800978a:	4a3b      	ldr	r2, [pc, #236]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 800978c:	f043 0304 	orr.w	r3, r3, #4
 8009790:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009794:	4b38      	ldr	r3, [pc, #224]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 8009796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800979a:	f003 0304 	and.w	r3, r3, #4
 800979e:	613b      	str	r3, [r7, #16]
 80097a0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80097a2:	2301      	movs	r3, #1
 80097a4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80097a8:	4b34      	ldr	r3, [pc, #208]	@ (800987c <HAL_RCC_OscConfig+0x7bc>)
 80097aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ac:	f003 0301 	and.w	r3, r3, #1
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d118      	bne.n	80097e6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80097b4:	4b31      	ldr	r3, [pc, #196]	@ (800987c <HAL_RCC_OscConfig+0x7bc>)
 80097b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b8:	4a30      	ldr	r2, [pc, #192]	@ (800987c <HAL_RCC_OscConfig+0x7bc>)
 80097ba:	f043 0301 	orr.w	r3, r3, #1
 80097be:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80097c0:	f7f9 f914 	bl	80029ec <HAL_GetTick>
 80097c4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80097c6:	e008      	b.n	80097da <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097c8:	f7f9 f910 	bl	80029ec <HAL_GetTick>
 80097cc:	4602      	mov	r2, r0
 80097ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d901      	bls.n	80097da <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80097d6:	2303      	movs	r3, #3
 80097d8:	e347      	b.n	8009e6a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80097da:	4b28      	ldr	r3, [pc, #160]	@ (800987c <HAL_RCC_OscConfig+0x7bc>)
 80097dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d0f0      	beq.n	80097c8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d01f      	beq.n	8009832 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d010      	beq.n	8009820 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80097fe:	4b1e      	ldr	r3, [pc, #120]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 8009800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009804:	4a1c      	ldr	r2, [pc, #112]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 8009806:	f043 0304 	orr.w	r3, r3, #4
 800980a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800980e:	4b1a      	ldr	r3, [pc, #104]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 8009810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009814:	4a18      	ldr	r2, [pc, #96]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 8009816:	f043 0301 	orr.w	r3, r3, #1
 800981a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800981e:	e018      	b.n	8009852 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009820:	4b15      	ldr	r3, [pc, #84]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 8009822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009826:	4a14      	ldr	r2, [pc, #80]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 8009828:	f043 0301 	orr.w	r3, r3, #1
 800982c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009830:	e00f      	b.n	8009852 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009832:	4b11      	ldr	r3, [pc, #68]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 8009834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009838:	4a0f      	ldr	r2, [pc, #60]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 800983a:	f023 0301 	bic.w	r3, r3, #1
 800983e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009842:	4b0d      	ldr	r3, [pc, #52]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 8009844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009848:	4a0b      	ldr	r2, [pc, #44]	@ (8009878 <HAL_RCC_OscConfig+0x7b8>)
 800984a:	f023 0304 	bic.w	r3, r3, #4
 800984e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d057      	beq.n	800990a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800985a:	f7f9 f8c7 	bl	80029ec <HAL_GetTick>
 800985e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009860:	e00e      	b.n	8009880 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009862:	f7f9 f8c3 	bl	80029ec <HAL_GetTick>
 8009866:	4602      	mov	r2, r0
 8009868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009870:	4293      	cmp	r3, r2
 8009872:	d905      	bls.n	8009880 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8009874:	2303      	movs	r3, #3
 8009876:	e2f8      	b.n	8009e6a <HAL_RCC_OscConfig+0xdaa>
 8009878:	46020c00 	.word	0x46020c00
 800987c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009880:	4b9c      	ldr	r3, [pc, #624]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 8009882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009886:	f003 0302 	and.w	r3, r3, #2
 800988a:	2b00      	cmp	r3, #0
 800988c:	d0e9      	beq.n	8009862 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009896:	2b00      	cmp	r3, #0
 8009898:	d01b      	beq.n	80098d2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800989a:	4b96      	ldr	r3, [pc, #600]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 800989c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098a0:	4a94      	ldr	r2, [pc, #592]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 80098a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80098aa:	e00a      	b.n	80098c2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098ac:	f7f9 f89e 	bl	80029ec <HAL_GetTick>
 80098b0:	4602      	mov	r2, r0
 80098b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d901      	bls.n	80098c2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80098be:	2303      	movs	r3, #3
 80098c0:	e2d3      	b.n	8009e6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80098c2:	4b8c      	ldr	r3, [pc, #560]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 80098c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d0ed      	beq.n	80098ac <HAL_RCC_OscConfig+0x7ec>
 80098d0:	e053      	b.n	800997a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80098d2:	4b88      	ldr	r3, [pc, #544]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 80098d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098d8:	4a86      	ldr	r2, [pc, #536]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 80098da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80098e2:	e00a      	b.n	80098fa <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098e4:	f7f9 f882 	bl	80029ec <HAL_GetTick>
 80098e8:	4602      	mov	r2, r0
 80098ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ec:	1ad3      	subs	r3, r2, r3
 80098ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d901      	bls.n	80098fa <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e2b7      	b.n	8009e6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80098fa:	4b7e      	ldr	r3, [pc, #504]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 80098fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009900:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1ed      	bne.n	80098e4 <HAL_RCC_OscConfig+0x824>
 8009908:	e037      	b.n	800997a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800990a:	f7f9 f86f 	bl	80029ec <HAL_GetTick>
 800990e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009910:	e00a      	b.n	8009928 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009912:	f7f9 f86b 	bl	80029ec <HAL_GetTick>
 8009916:	4602      	mov	r2, r0
 8009918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009920:	4293      	cmp	r3, r2
 8009922:	d901      	bls.n	8009928 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8009924:	2303      	movs	r3, #3
 8009926:	e2a0      	b.n	8009e6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009928:	4b72      	ldr	r3, [pc, #456]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 800992a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800992e:	f003 0302 	and.w	r3, r3, #2
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1ed      	bne.n	8009912 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8009936:	4b6f      	ldr	r3, [pc, #444]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 8009938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800993c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009940:	2b00      	cmp	r3, #0
 8009942:	d01a      	beq.n	800997a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009944:	4b6b      	ldr	r3, [pc, #428]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 8009946:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800994a:	4a6a      	ldr	r2, [pc, #424]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 800994c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009950:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009954:	e00a      	b.n	800996c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009956:	f7f9 f849 	bl	80029ec <HAL_GetTick>
 800995a:	4602      	mov	r2, r0
 800995c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995e:	1ad3      	subs	r3, r2, r3
 8009960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009964:	4293      	cmp	r3, r2
 8009966:	d901      	bls.n	800996c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8009968:	2303      	movs	r3, #3
 800996a:	e27e      	b.n	8009e6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800996c:	4b61      	ldr	r3, [pc, #388]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 800996e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009972:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1ed      	bne.n	8009956 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800997a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800997e:	2b01      	cmp	r3, #1
 8009980:	d107      	bne.n	8009992 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009982:	4b5c      	ldr	r3, [pc, #368]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 8009984:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009988:	4a5a      	ldr	r2, [pc, #360]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 800998a:	f023 0304 	bic.w	r3, r3, #4
 800998e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 0320 	and.w	r3, r3, #32
 800999a:	2b00      	cmp	r3, #0
 800999c:	d036      	beq.n	8009a0c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d019      	beq.n	80099da <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80099a6:	4b53      	ldr	r3, [pc, #332]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a52      	ldr	r2, [pc, #328]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 80099ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80099b0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80099b2:	f7f9 f81b 	bl	80029ec <HAL_GetTick>
 80099b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80099b8:	e008      	b.n	80099cc <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80099ba:	f7f9 f817 	bl	80029ec <HAL_GetTick>
 80099be:	4602      	mov	r2, r0
 80099c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c2:	1ad3      	subs	r3, r2, r3
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d901      	bls.n	80099cc <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80099c8:	2303      	movs	r3, #3
 80099ca:	e24e      	b.n	8009e6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80099cc:	4b49      	ldr	r3, [pc, #292]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d0f0      	beq.n	80099ba <HAL_RCC_OscConfig+0x8fa>
 80099d8:	e018      	b.n	8009a0c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80099da:	4b46      	ldr	r3, [pc, #280]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a45      	ldr	r2, [pc, #276]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 80099e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80099e4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80099e6:	f7f9 f801 	bl	80029ec <HAL_GetTick>
 80099ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80099ec:	e008      	b.n	8009a00 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80099ee:	f7f8 fffd 	bl	80029ec <HAL_GetTick>
 80099f2:	4602      	mov	r2, r0
 80099f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d901      	bls.n	8009a00 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80099fc:	2303      	movs	r3, #3
 80099fe:	e234      	b.n	8009e6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009a00:	4b3c      	ldr	r3, [pc, #240]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1f0      	bne.n	80099ee <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d036      	beq.n	8009a86 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d019      	beq.n	8009a54 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8009a20:	4b34      	ldr	r3, [pc, #208]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a33      	ldr	r2, [pc, #204]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 8009a26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009a2a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009a2c:	f7f8 ffde 	bl	80029ec <HAL_GetTick>
 8009a30:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009a32:	e008      	b.n	8009a46 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009a34:	f7f8 ffda 	bl	80029ec <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d901      	bls.n	8009a46 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	e211      	b.n	8009e6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009a46:	4b2b      	ldr	r3, [pc, #172]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d0f0      	beq.n	8009a34 <HAL_RCC_OscConfig+0x974>
 8009a52:	e018      	b.n	8009a86 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8009a54:	4b27      	ldr	r3, [pc, #156]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a26      	ldr	r2, [pc, #152]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 8009a5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a5e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009a60:	f7f8 ffc4 	bl	80029ec <HAL_GetTick>
 8009a64:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009a66:	e008      	b.n	8009a7a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009a68:	f7f8 ffc0 	bl	80029ec <HAL_GetTick>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a70:	1ad3      	subs	r3, r2, r3
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d901      	bls.n	8009a7a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e1f7      	b.n	8009e6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1f0      	bne.n	8009a68 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d07f      	beq.n	8009b92 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d062      	beq.n	8009b60 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8009a9a:	4b16      	ldr	r3, [pc, #88]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	4a15      	ldr	r2, [pc, #84]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 8009aa0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009aa4:	6093      	str	r3, [r2, #8]
 8009aa6:	4b13      	ldr	r3, [pc, #76]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab2:	4910      	ldr	r1, [pc, #64]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009abc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009ac0:	d309      	bcc.n	8009ad6 <HAL_RCC_OscConfig+0xa16>
 8009ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	f023 021f 	bic.w	r2, r3, #31
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	4909      	ldr	r1, [pc, #36]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	60cb      	str	r3, [r1, #12]
 8009ad4:	e02a      	b.n	8009b2c <HAL_RCC_OscConfig+0xa6c>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	da0c      	bge.n	8009af8 <HAL_RCC_OscConfig+0xa38>
 8009ade:	4b05      	ldr	r3, [pc, #20]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	015b      	lsls	r3, r3, #5
 8009aec:	4901      	ldr	r1, [pc, #4]	@ (8009af4 <HAL_RCC_OscConfig+0xa34>)
 8009aee:	4313      	orrs	r3, r2
 8009af0:	60cb      	str	r3, [r1, #12]
 8009af2:	e01b      	b.n	8009b2c <HAL_RCC_OscConfig+0xa6c>
 8009af4:	46020c00 	.word	0x46020c00
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b00:	d30a      	bcc.n	8009b18 <HAL_RCC_OscConfig+0xa58>
 8009b02:	4ba1      	ldr	r3, [pc, #644]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a1b      	ldr	r3, [r3, #32]
 8009b0e:	029b      	lsls	r3, r3, #10
 8009b10:	499d      	ldr	r1, [pc, #628]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009b12:	4313      	orrs	r3, r2
 8009b14:	60cb      	str	r3, [r1, #12]
 8009b16:	e009      	b.n	8009b2c <HAL_RCC_OscConfig+0xa6c>
 8009b18:	4b9b      	ldr	r3, [pc, #620]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a1b      	ldr	r3, [r3, #32]
 8009b24:	03db      	lsls	r3, r3, #15
 8009b26:	4998      	ldr	r1, [pc, #608]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8009b2c:	4b96      	ldr	r3, [pc, #600]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a95      	ldr	r2, [pc, #596]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009b32:	f043 0310 	orr.w	r3, r3, #16
 8009b36:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009b38:	f7f8 ff58 	bl	80029ec <HAL_GetTick>
 8009b3c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8009b3e:	e008      	b.n	8009b52 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009b40:	f7f8 ff54 	bl	80029ec <HAL_GetTick>
 8009b44:	4602      	mov	r2, r0
 8009b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d901      	bls.n	8009b52 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	e18b      	b.n	8009e6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8009b52:	4b8d      	ldr	r3, [pc, #564]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f003 0320 	and.w	r3, r3, #32
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d0f0      	beq.n	8009b40 <HAL_RCC_OscConfig+0xa80>
 8009b5e:	e018      	b.n	8009b92 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8009b60:	4b89      	ldr	r3, [pc, #548]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a88      	ldr	r2, [pc, #544]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009b66:	f023 0310 	bic.w	r3, r3, #16
 8009b6a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009b6c:	f7f8 ff3e 	bl	80029ec <HAL_GetTick>
 8009b70:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009b72:	e008      	b.n	8009b86 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009b74:	f7f8 ff3a 	bl	80029ec <HAL_GetTick>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d901      	bls.n	8009b86 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8009b82:	2303      	movs	r3, #3
 8009b84:	e171      	b.n	8009e6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009b86:	4b80      	ldr	r3, [pc, #512]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0320 	and.w	r3, r3, #32
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1f0      	bne.n	8009b74 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f000 8166 	beq.w	8009e68 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009ba2:	4b79      	ldr	r3, [pc, #484]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009ba4:	69db      	ldr	r3, [r3, #28]
 8009ba6:	f003 030c 	and.w	r3, r3, #12
 8009baa:	2b0c      	cmp	r3, #12
 8009bac:	f000 80f2 	beq.w	8009d94 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	f040 80c5 	bne.w	8009d44 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009bba:	4b73      	ldr	r3, [pc, #460]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a72      	ldr	r2, [pc, #456]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009bc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009bc4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009bc6:	f7f8 ff11 	bl	80029ec <HAL_GetTick>
 8009bca:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009bcc:	e008      	b.n	8009be0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bce:	f7f8 ff0d 	bl	80029ec <HAL_GetTick>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd6:	1ad3      	subs	r3, r2, r3
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d901      	bls.n	8009be0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	e144      	b.n	8009e6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009be0:	4b69      	ldr	r3, [pc, #420]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1f0      	bne.n	8009bce <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009bec:	4b66      	ldr	r3, [pc, #408]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009bf2:	f003 0304 	and.w	r3, r3, #4
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d111      	bne.n	8009c1e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8009bfa:	4b63      	ldr	r3, [pc, #396]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c00:	4a61      	ldr	r2, [pc, #388]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009c02:	f043 0304 	orr.w	r3, r3, #4
 8009c06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c10:	f003 0304 	and.w	r3, r3, #4
 8009c14:	60fb      	str	r3, [r7, #12]
 8009c16:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8009c1e:	4b5b      	ldr	r3, [pc, #364]	@ (8009d8c <HAL_RCC_OscConfig+0xccc>)
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009c26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009c2a:	d102      	bne.n	8009c32 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009c32:	4b56      	ldr	r3, [pc, #344]	@ (8009d8c <HAL_RCC_OscConfig+0xccc>)
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	4a55      	ldr	r2, [pc, #340]	@ (8009d8c <HAL_RCC_OscConfig+0xccc>)
 8009c38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009c3c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8009c3e:	4b52      	ldr	r3, [pc, #328]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c46:	f023 0303 	bic.w	r3, r3, #3
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009c52:	3a01      	subs	r2, #1
 8009c54:	0212      	lsls	r2, r2, #8
 8009c56:	4311      	orrs	r1, r2
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009c5c:	430a      	orrs	r2, r1
 8009c5e:	494a      	ldr	r1, [pc, #296]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009c60:	4313      	orrs	r3, r2
 8009c62:	628b      	str	r3, [r1, #40]	@ 0x28
 8009c64:	4b48      	ldr	r3, [pc, #288]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009c66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c68:	4b49      	ldr	r3, [pc, #292]	@ (8009d90 <HAL_RCC_OscConfig+0xcd0>)
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009c70:	3a01      	subs	r2, #1
 8009c72:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009c7a:	3a01      	subs	r2, #1
 8009c7c:	0252      	lsls	r2, r2, #9
 8009c7e:	b292      	uxth	r2, r2
 8009c80:	4311      	orrs	r1, r2
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009c86:	3a01      	subs	r2, #1
 8009c88:	0412      	lsls	r2, r2, #16
 8009c8a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009c8e:	4311      	orrs	r1, r2
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009c94:	3a01      	subs	r2, #1
 8009c96:	0612      	lsls	r2, r2, #24
 8009c98:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009c9c:	430a      	orrs	r2, r1
 8009c9e:	493a      	ldr	r1, [pc, #232]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8009ca4:	4b38      	ldr	r3, [pc, #224]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ca8:	4a37      	ldr	r2, [pc, #220]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009caa:	f023 0310 	bic.w	r3, r3, #16
 8009cae:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009cb4:	4a34      	ldr	r2, [pc, #208]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009cb6:	00db      	lsls	r3, r3, #3
 8009cb8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8009cba:	4b33      	ldr	r3, [pc, #204]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cbe:	4a32      	ldr	r2, [pc, #200]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009cc0:	f043 0310 	orr.w	r3, r3, #16
 8009cc4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8009cc6:	4b30      	ldr	r3, [pc, #192]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cca:	f023 020c 	bic.w	r2, r3, #12
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cd2:	492d      	ldr	r1, [pc, #180]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8009cd8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d105      	bne.n	8009cec <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009ce0:	4b2a      	ldr	r3, [pc, #168]	@ (8009d8c <HAL_RCC_OscConfig+0xccc>)
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	4a29      	ldr	r2, [pc, #164]	@ (8009d8c <HAL_RCC_OscConfig+0xccc>)
 8009ce6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009cea:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8009cec:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d107      	bne.n	8009d04 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8009cf4:	4b24      	ldr	r3, [pc, #144]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009cfa:	4a23      	ldr	r2, [pc, #140]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009cfc:	f023 0304 	bic.w	r3, r3, #4
 8009d00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8009d04:	4b20      	ldr	r3, [pc, #128]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a1f      	ldr	r2, [pc, #124]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009d0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009d0e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009d10:	f7f8 fe6c 	bl	80029ec <HAL_GetTick>
 8009d14:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009d16:	e008      	b.n	8009d2a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d18:	f7f8 fe68 	bl	80029ec <HAL_GetTick>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d901      	bls.n	8009d2a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	e09f      	b.n	8009e6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009d2a:	4b17      	ldr	r3, [pc, #92]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d0f0      	beq.n	8009d18 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009d36:	4b14      	ldr	r3, [pc, #80]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d3a:	4a13      	ldr	r2, [pc, #76]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009d3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009d40:	6293      	str	r3, [r2, #40]	@ 0x28
 8009d42:	e091      	b.n	8009e68 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009d44:	4b10      	ldr	r3, [pc, #64]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a0f      	ldr	r2, [pc, #60]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009d4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009d4e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009d50:	f7f8 fe4c 	bl	80029ec <HAL_GetTick>
 8009d54:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009d56:	e008      	b.n	8009d6a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d58:	f7f8 fe48 	bl	80029ec <HAL_GetTick>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d901      	bls.n	8009d6a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e07f      	b.n	8009e6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009d6a:	4b07      	ldr	r3, [pc, #28]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1f0      	bne.n	8009d58 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8009d76:	4b04      	ldr	r3, [pc, #16]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d7a:	4a03      	ldr	r2, [pc, #12]	@ (8009d88 <HAL_RCC_OscConfig+0xcc8>)
 8009d7c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8009d80:	f023 0303 	bic.w	r3, r3, #3
 8009d84:	6293      	str	r3, [r2, #40]	@ 0x28
 8009d86:	e06f      	b.n	8009e68 <HAL_RCC_OscConfig+0xda8>
 8009d88:	46020c00 	.word	0x46020c00
 8009d8c:	46020800 	.word	0x46020800
 8009d90:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8009d94:	4b37      	ldr	r3, [pc, #220]	@ (8009e74 <HAL_RCC_OscConfig+0xdb4>)
 8009d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d98:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009d9a:	4b36      	ldr	r3, [pc, #216]	@ (8009e74 <HAL_RCC_OscConfig+0xdb4>)
 8009d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d9e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d039      	beq.n	8009e1c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	f003 0203 	and.w	r2, r3, #3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d132      	bne.n	8009e1c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	0a1b      	lsrs	r3, r3, #8
 8009dba:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dc2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d129      	bne.n	8009e1c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d122      	bne.n	8009e1c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009de0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d11a      	bne.n	8009e1c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	0a5b      	lsrs	r3, r3, #9
 8009dea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009df2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d111      	bne.n	8009e1c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	0c1b      	lsrs	r3, r3, #16
 8009dfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e04:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d108      	bne.n	8009e1c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	0e1b      	lsrs	r3, r3, #24
 8009e0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e16:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d001      	beq.n	8009e20 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e024      	b.n	8009e6a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8009e20:	4b14      	ldr	r3, [pc, #80]	@ (8009e74 <HAL_RCC_OscConfig+0xdb4>)
 8009e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e24:	08db      	lsrs	r3, r3, #3
 8009e26:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d01a      	beq.n	8009e68 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8009e32:	4b10      	ldr	r3, [pc, #64]	@ (8009e74 <HAL_RCC_OscConfig+0xdb4>)
 8009e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e36:	4a0f      	ldr	r2, [pc, #60]	@ (8009e74 <HAL_RCC_OscConfig+0xdb4>)
 8009e38:	f023 0310 	bic.w	r3, r3, #16
 8009e3c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e3e:	f7f8 fdd5 	bl	80029ec <HAL_GetTick>
 8009e42:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8009e44:	bf00      	nop
 8009e46:	f7f8 fdd1 	bl	80029ec <HAL_GetTick>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d0f9      	beq.n	8009e46 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e56:	4a07      	ldr	r2, [pc, #28]	@ (8009e74 <HAL_RCC_OscConfig+0xdb4>)
 8009e58:	00db      	lsls	r3, r3, #3
 8009e5a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8009e5c:	4b05      	ldr	r3, [pc, #20]	@ (8009e74 <HAL_RCC_OscConfig+0xdb4>)
 8009e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e60:	4a04      	ldr	r2, [pc, #16]	@ (8009e74 <HAL_RCC_OscConfig+0xdb4>)
 8009e62:	f043 0310 	orr.w	r3, r3, #16
 8009e66:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3738      	adds	r7, #56	@ 0x38
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	46020c00 	.word	0x46020c00

08009e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b086      	sub	sp, #24
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d101      	bne.n	8009e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e1d9      	b.n	800a240 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009e8c:	4b9b      	ldr	r3, [pc, #620]	@ (800a0fc <HAL_RCC_ClockConfig+0x284>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 030f 	and.w	r3, r3, #15
 8009e94:	683a      	ldr	r2, [r7, #0]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d910      	bls.n	8009ebc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e9a:	4b98      	ldr	r3, [pc, #608]	@ (800a0fc <HAL_RCC_ClockConfig+0x284>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f023 020f 	bic.w	r2, r3, #15
 8009ea2:	4996      	ldr	r1, [pc, #600]	@ (800a0fc <HAL_RCC_ClockConfig+0x284>)
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009eaa:	4b94      	ldr	r3, [pc, #592]	@ (800a0fc <HAL_RCC_ClockConfig+0x284>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f003 030f 	and.w	r3, r3, #15
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d001      	beq.n	8009ebc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e1c1      	b.n	800a240 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 0310 	and.w	r3, r3, #16
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d010      	beq.n	8009eea <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	695a      	ldr	r2, [r3, #20]
 8009ecc:	4b8c      	ldr	r3, [pc, #560]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 8009ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d908      	bls.n	8009eea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8009ed8:	4b89      	ldr	r3, [pc, #548]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 8009eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009edc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	695b      	ldr	r3, [r3, #20]
 8009ee4:	4986      	ldr	r1, [pc, #536]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f003 0308 	and.w	r3, r3, #8
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d012      	beq.n	8009f1c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	691a      	ldr	r2, [r3, #16]
 8009efa:	4b81      	ldr	r3, [pc, #516]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	091b      	lsrs	r3, r3, #4
 8009f00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d909      	bls.n	8009f1c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8009f08:	4b7d      	ldr	r3, [pc, #500]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	011b      	lsls	r3, r3, #4
 8009f16:	497a      	ldr	r1, [pc, #488]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f003 0304 	and.w	r3, r3, #4
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d010      	beq.n	8009f4a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	68da      	ldr	r2, [r3, #12]
 8009f2c:	4b74      	ldr	r3, [pc, #464]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 8009f2e:	6a1b      	ldr	r3, [r3, #32]
 8009f30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d908      	bls.n	8009f4a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8009f38:	4b71      	ldr	r3, [pc, #452]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 8009f3a:	6a1b      	ldr	r3, [r3, #32]
 8009f3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	496e      	ldr	r1, [pc, #440]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 8009f46:	4313      	orrs	r3, r2
 8009f48:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 0302 	and.w	r3, r3, #2
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d010      	beq.n	8009f78 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	689a      	ldr	r2, [r3, #8]
 8009f5a:	4b69      	ldr	r3, [pc, #420]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	f003 030f 	and.w	r3, r3, #15
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d908      	bls.n	8009f78 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8009f66:	4b66      	ldr	r3, [pc, #408]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	f023 020f 	bic.w	r2, r3, #15
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	4963      	ldr	r1, [pc, #396]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 8009f74:	4313      	orrs	r3, r2
 8009f76:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 0301 	and.w	r3, r3, #1
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 80d2 	beq.w	800a12a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8009f86:	2300      	movs	r3, #0
 8009f88:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	2b03      	cmp	r3, #3
 8009f90:	d143      	bne.n	800a01a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f92:	4b5b      	ldr	r3, [pc, #364]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 8009f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f98:	f003 0304 	and.w	r3, r3, #4
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d110      	bne.n	8009fc2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009fa0:	4b57      	ldr	r3, [pc, #348]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 8009fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009fa6:	4a56      	ldr	r2, [pc, #344]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 8009fa8:	f043 0304 	orr.w	r3, r3, #4
 8009fac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009fb0:	4b53      	ldr	r3, [pc, #332]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 8009fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009fb6:	f003 0304 	and.w	r3, r3, #4
 8009fba:	60bb      	str	r3, [r7, #8]
 8009fbc:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8009fc2:	f7f8 fd13 	bl	80029ec <HAL_GetTick>
 8009fc6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8009fc8:	4b4e      	ldr	r3, [pc, #312]	@ (800a104 <HAL_RCC_ClockConfig+0x28c>)
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00f      	beq.n	8009ff4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009fd4:	e008      	b.n	8009fe8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8009fd6:	f7f8 fd09 	bl	80029ec <HAL_GetTick>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d901      	bls.n	8009fe8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	e12b      	b.n	800a240 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009fe8:	4b46      	ldr	r3, [pc, #280]	@ (800a104 <HAL_RCC_ClockConfig+0x28c>)
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d0f0      	beq.n	8009fd6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009ff4:	7dfb      	ldrb	r3, [r7, #23]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d107      	bne.n	800a00a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8009ffa:	4b41      	ldr	r3, [pc, #260]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 8009ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a000:	4a3f      	ldr	r2, [pc, #252]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 800a002:	f023 0304 	bic.w	r3, r3, #4
 800a006:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a00a:	4b3d      	ldr	r3, [pc, #244]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a012:	2b00      	cmp	r3, #0
 800a014:	d121      	bne.n	800a05a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e112      	b.n	800a240 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d107      	bne.n	800a032 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a022:	4b37      	ldr	r3, [pc, #220]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d115      	bne.n	800a05a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e106      	b.n	800a240 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d107      	bne.n	800a04a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a03a:	4b31      	ldr	r3, [pc, #196]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 0304 	and.w	r3, r3, #4
 800a042:	2b00      	cmp	r3, #0
 800a044:	d109      	bne.n	800a05a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e0fa      	b.n	800a240 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a04a:	4b2d      	ldr	r3, [pc, #180]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a052:	2b00      	cmp	r3, #0
 800a054:	d101      	bne.n	800a05a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	e0f2      	b.n	800a240 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800a05a:	4b29      	ldr	r3, [pc, #164]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 800a05c:	69db      	ldr	r3, [r3, #28]
 800a05e:	f023 0203 	bic.w	r2, r3, #3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	4926      	ldr	r1, [pc, #152]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 800a068:	4313      	orrs	r3, r2
 800a06a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800a06c:	f7f8 fcbe 	bl	80029ec <HAL_GetTick>
 800a070:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	2b03      	cmp	r3, #3
 800a078:	d112      	bne.n	800a0a0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a07a:	e00a      	b.n	800a092 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a07c:	f7f8 fcb6 	bl	80029ec <HAL_GetTick>
 800a080:	4602      	mov	r2, r0
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	1ad3      	subs	r3, r2, r3
 800a086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d901      	bls.n	800a092 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800a08e:	2303      	movs	r3, #3
 800a090:	e0d6      	b.n	800a240 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a092:	4b1b      	ldr	r3, [pc, #108]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 800a094:	69db      	ldr	r3, [r3, #28]
 800a096:	f003 030c 	and.w	r3, r3, #12
 800a09a:	2b0c      	cmp	r3, #12
 800a09c:	d1ee      	bne.n	800a07c <HAL_RCC_ClockConfig+0x204>
 800a09e:	e044      	b.n	800a12a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	d112      	bne.n	800a0ce <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a0a8:	e00a      	b.n	800a0c0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0aa:	f7f8 fc9f 	bl	80029ec <HAL_GetTick>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d901      	bls.n	800a0c0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	e0bf      	b.n	800a240 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a0c0:	4b0f      	ldr	r3, [pc, #60]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 800a0c2:	69db      	ldr	r3, [r3, #28]
 800a0c4:	f003 030c 	and.w	r3, r3, #12
 800a0c8:	2b08      	cmp	r3, #8
 800a0ca:	d1ee      	bne.n	800a0aa <HAL_RCC_ClockConfig+0x232>
 800a0cc:	e02d      	b.n	800a12a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d123      	bne.n	800a11e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a0d6:	e00a      	b.n	800a0ee <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0d8:	f7f8 fc88 	bl	80029ec <HAL_GetTick>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d901      	bls.n	800a0ee <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800a0ea:	2303      	movs	r3, #3
 800a0ec:	e0a8      	b.n	800a240 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a0ee:	4b04      	ldr	r3, [pc, #16]	@ (800a100 <HAL_RCC_ClockConfig+0x288>)
 800a0f0:	69db      	ldr	r3, [r3, #28]
 800a0f2:	f003 030c 	and.w	r3, r3, #12
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d1ee      	bne.n	800a0d8 <HAL_RCC_ClockConfig+0x260>
 800a0fa:	e016      	b.n	800a12a <HAL_RCC_ClockConfig+0x2b2>
 800a0fc:	40022000 	.word	0x40022000
 800a100:	46020c00 	.word	0x46020c00
 800a104:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a108:	f7f8 fc70 	bl	80029ec <HAL_GetTick>
 800a10c:	4602      	mov	r2, r0
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a116:	4293      	cmp	r3, r2
 800a118:	d901      	bls.n	800a11e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800a11a:	2303      	movs	r3, #3
 800a11c:	e090      	b.n	800a240 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a11e:	4b4a      	ldr	r3, [pc, #296]	@ (800a248 <HAL_RCC_ClockConfig+0x3d0>)
 800a120:	69db      	ldr	r3, [r3, #28]
 800a122:	f003 030c 	and.w	r3, r3, #12
 800a126:	2b04      	cmp	r3, #4
 800a128:	d1ee      	bne.n	800a108 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f003 0302 	and.w	r3, r3, #2
 800a132:	2b00      	cmp	r3, #0
 800a134:	d010      	beq.n	800a158 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	689a      	ldr	r2, [r3, #8]
 800a13a:	4b43      	ldr	r3, [pc, #268]	@ (800a248 <HAL_RCC_ClockConfig+0x3d0>)
 800a13c:	6a1b      	ldr	r3, [r3, #32]
 800a13e:	f003 030f 	and.w	r3, r3, #15
 800a142:	429a      	cmp	r2, r3
 800a144:	d208      	bcs.n	800a158 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a146:	4b40      	ldr	r3, [pc, #256]	@ (800a248 <HAL_RCC_ClockConfig+0x3d0>)
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	f023 020f 	bic.w	r2, r3, #15
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	493d      	ldr	r1, [pc, #244]	@ (800a248 <HAL_RCC_ClockConfig+0x3d0>)
 800a154:	4313      	orrs	r3, r2
 800a156:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a158:	4b3c      	ldr	r3, [pc, #240]	@ (800a24c <HAL_RCC_ClockConfig+0x3d4>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f003 030f 	and.w	r3, r3, #15
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	429a      	cmp	r2, r3
 800a164:	d210      	bcs.n	800a188 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a166:	4b39      	ldr	r3, [pc, #228]	@ (800a24c <HAL_RCC_ClockConfig+0x3d4>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f023 020f 	bic.w	r2, r3, #15
 800a16e:	4937      	ldr	r1, [pc, #220]	@ (800a24c <HAL_RCC_ClockConfig+0x3d4>)
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	4313      	orrs	r3, r2
 800a174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a176:	4b35      	ldr	r3, [pc, #212]	@ (800a24c <HAL_RCC_ClockConfig+0x3d4>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f003 030f 	and.w	r3, r3, #15
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	429a      	cmp	r2, r3
 800a182:	d001      	beq.n	800a188 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	e05b      	b.n	800a240 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f003 0304 	and.w	r3, r3, #4
 800a190:	2b00      	cmp	r3, #0
 800a192:	d010      	beq.n	800a1b6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	68da      	ldr	r2, [r3, #12]
 800a198:	4b2b      	ldr	r3, [pc, #172]	@ (800a248 <HAL_RCC_ClockConfig+0x3d0>)
 800a19a:	6a1b      	ldr	r3, [r3, #32]
 800a19c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d208      	bcs.n	800a1b6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a1a4:	4b28      	ldr	r3, [pc, #160]	@ (800a248 <HAL_RCC_ClockConfig+0x3d0>)
 800a1a6:	6a1b      	ldr	r3, [r3, #32]
 800a1a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	4925      	ldr	r1, [pc, #148]	@ (800a248 <HAL_RCC_ClockConfig+0x3d0>)
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f003 0308 	and.w	r3, r3, #8
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d012      	beq.n	800a1e8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	691a      	ldr	r2, [r3, #16]
 800a1c6:	4b20      	ldr	r3, [pc, #128]	@ (800a248 <HAL_RCC_ClockConfig+0x3d0>)
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	091b      	lsrs	r3, r3, #4
 800a1cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d209      	bcs.n	800a1e8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a1d4:	4b1c      	ldr	r3, [pc, #112]	@ (800a248 <HAL_RCC_ClockConfig+0x3d0>)
 800a1d6:	6a1b      	ldr	r3, [r3, #32]
 800a1d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	011b      	lsls	r3, r3, #4
 800a1e2:	4919      	ldr	r1, [pc, #100]	@ (800a248 <HAL_RCC_ClockConfig+0x3d0>)
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f003 0310 	and.w	r3, r3, #16
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d010      	beq.n	800a216 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	695a      	ldr	r2, [r3, #20]
 800a1f8:	4b13      	ldr	r3, [pc, #76]	@ (800a248 <HAL_RCC_ClockConfig+0x3d0>)
 800a1fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a200:	429a      	cmp	r2, r3
 800a202:	d208      	bcs.n	800a216 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800a204:	4b10      	ldr	r3, [pc, #64]	@ (800a248 <HAL_RCC_ClockConfig+0x3d0>)
 800a206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a208:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	695b      	ldr	r3, [r3, #20]
 800a210:	490d      	ldr	r1, [pc, #52]	@ (800a248 <HAL_RCC_ClockConfig+0x3d0>)
 800a212:	4313      	orrs	r3, r2
 800a214:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a216:	f000 f821 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800a21a:	4602      	mov	r2, r0
 800a21c:	4b0a      	ldr	r3, [pc, #40]	@ (800a248 <HAL_RCC_ClockConfig+0x3d0>)
 800a21e:	6a1b      	ldr	r3, [r3, #32]
 800a220:	f003 030f 	and.w	r3, r3, #15
 800a224:	490a      	ldr	r1, [pc, #40]	@ (800a250 <HAL_RCC_ClockConfig+0x3d8>)
 800a226:	5ccb      	ldrb	r3, [r1, r3]
 800a228:	fa22 f303 	lsr.w	r3, r2, r3
 800a22c:	4a09      	ldr	r2, [pc, #36]	@ (800a254 <HAL_RCC_ClockConfig+0x3dc>)
 800a22e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a230:	4b09      	ldr	r3, [pc, #36]	@ (800a258 <HAL_RCC_ClockConfig+0x3e0>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4618      	mov	r0, r3
 800a236:	f7f8 fb4f 	bl	80028d8 <HAL_InitTick>
 800a23a:	4603      	mov	r3, r0
 800a23c:	73fb      	strb	r3, [r7, #15]

  return status;
 800a23e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3718      	adds	r7, #24
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	46020c00 	.word	0x46020c00
 800a24c:	40022000 	.word	0x40022000
 800a250:	08010be4 	.word	0x08010be4
 800a254:	20000000 	.word	0x20000000
 800a258:	20000004 	.word	0x20000004

0800a25c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b08b      	sub	sp, #44	@ 0x2c
 800a260:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800a262:	2300      	movs	r3, #0
 800a264:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800a266:	2300      	movs	r3, #0
 800a268:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a26a:	4b78      	ldr	r3, [pc, #480]	@ (800a44c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a26c:	69db      	ldr	r3, [r3, #28]
 800a26e:	f003 030c 	and.w	r3, r3, #12
 800a272:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a274:	4b75      	ldr	r3, [pc, #468]	@ (800a44c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a278:	f003 0303 	and.w	r3, r3, #3
 800a27c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d005      	beq.n	800a290 <HAL_RCC_GetSysClockFreq+0x34>
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	2b0c      	cmp	r3, #12
 800a288:	d121      	bne.n	800a2ce <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d11e      	bne.n	800a2ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800a290:	4b6e      	ldr	r3, [pc, #440]	@ (800a44c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d107      	bne.n	800a2ac <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800a29c:	4b6b      	ldr	r3, [pc, #428]	@ (800a44c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a29e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a2a2:	0b1b      	lsrs	r3, r3, #12
 800a2a4:	f003 030f 	and.w	r3, r3, #15
 800a2a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2aa:	e005      	b.n	800a2b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800a2ac:	4b67      	ldr	r3, [pc, #412]	@ (800a44c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	0f1b      	lsrs	r3, r3, #28
 800a2b2:	f003 030f 	and.w	r3, r3, #15
 800a2b6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a2b8:	4a65      	ldr	r2, [pc, #404]	@ (800a450 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2c0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d110      	bne.n	800a2ea <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ca:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a2cc:	e00d      	b.n	800a2ea <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a2ce:	4b5f      	ldr	r3, [pc, #380]	@ (800a44c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a2d0:	69db      	ldr	r3, [r3, #28]
 800a2d2:	f003 030c 	and.w	r3, r3, #12
 800a2d6:	2b04      	cmp	r3, #4
 800a2d8:	d102      	bne.n	800a2e0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a2da:	4b5e      	ldr	r3, [pc, #376]	@ (800a454 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800a2dc:	623b      	str	r3, [r7, #32]
 800a2de:	e004      	b.n	800a2ea <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	2b08      	cmp	r3, #8
 800a2e4:	d101      	bne.n	800a2ea <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a2e6:	4b5b      	ldr	r3, [pc, #364]	@ (800a454 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800a2e8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	2b0c      	cmp	r3, #12
 800a2ee:	f040 80a5 	bne.w	800a43c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a2f2:	4b56      	ldr	r3, [pc, #344]	@ (800a44c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a2f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f6:	f003 0303 	and.w	r3, r3, #3
 800a2fa:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a2fc:	4b53      	ldr	r3, [pc, #332]	@ (800a44c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a2fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a300:	0a1b      	lsrs	r3, r3, #8
 800a302:	f003 030f 	and.w	r3, r3, #15
 800a306:	3301      	adds	r3, #1
 800a308:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a30a:	4b50      	ldr	r3, [pc, #320]	@ (800a44c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a30c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a30e:	091b      	lsrs	r3, r3, #4
 800a310:	f003 0301 	and.w	r3, r3, #1
 800a314:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a316:	4b4d      	ldr	r3, [pc, #308]	@ (800a44c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a31a:	08db      	lsrs	r3, r3, #3
 800a31c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	fb02 f303 	mul.w	r3, r2, r3
 800a326:	ee07 3a90 	vmov	s15, r3
 800a32a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a32e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	2b02      	cmp	r3, #2
 800a336:	d003      	beq.n	800a340 <HAL_RCC_GetSysClockFreq+0xe4>
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	d022      	beq.n	800a384 <HAL_RCC_GetSysClockFreq+0x128>
 800a33e:	e043      	b.n	800a3c8 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	ee07 3a90 	vmov	s15, r3
 800a346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a34a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800a458 <HAL_RCC_GetSysClockFreq+0x1fc>
 800a34e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a352:	4b3e      	ldr	r3, [pc, #248]	@ (800a44c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a35a:	ee07 3a90 	vmov	s15, r3
 800a35e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a362:	ed97 6a01 	vldr	s12, [r7, #4]
 800a366:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800a45c <HAL_RCC_GetSysClockFreq+0x200>
 800a36a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a36e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a376:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a37a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a37e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a382:	e046      	b.n	800a412 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	ee07 3a90 	vmov	s15, r3
 800a38a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a38e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800a458 <HAL_RCC_GetSysClockFreq+0x1fc>
 800a392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a396:	4b2d      	ldr	r3, [pc, #180]	@ (800a44c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a39a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a39e:	ee07 3a90 	vmov	s15, r3
 800a3a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a3a6:	ed97 6a01 	vldr	s12, [r7, #4]
 800a3aa:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800a45c <HAL_RCC_GetSysClockFreq+0x200>
 800a3ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a3b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a3b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a3be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3c6:	e024      	b.n	800a412 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ca:	ee07 3a90 	vmov	s15, r3
 800a3ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	ee07 3a90 	vmov	s15, r3
 800a3d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3e0:	4b1a      	ldr	r3, [pc, #104]	@ (800a44c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a3e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3e8:	ee07 3a90 	vmov	s15, r3
 800a3ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a3f0:	ed97 6a01 	vldr	s12, [r7, #4]
 800a3f4:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800a45c <HAL_RCC_GetSysClockFreq+0x200>
 800a3f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a3fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a400:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a404:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a40c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a410:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800a412:	4b0e      	ldr	r3, [pc, #56]	@ (800a44c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a416:	0e1b      	lsrs	r3, r3, #24
 800a418:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a41c:	3301      	adds	r3, #1
 800a41e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	ee07 3a90 	vmov	s15, r3
 800a426:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a42a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a42e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a436:	ee17 3a90 	vmov	r3, s15
 800a43a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800a43c:	6a3b      	ldr	r3, [r7, #32]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	372c      	adds	r7, #44	@ 0x2c
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr
 800a44a:	bf00      	nop
 800a44c:	46020c00 	.word	0x46020c00
 800a450:	08010bfc 	.word	0x08010bfc
 800a454:	00f42400 	.word	0x00f42400
 800a458:	4b742400 	.word	0x4b742400
 800a45c:	46000000 	.word	0x46000000

0800a460 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a464:	f7ff fefa 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800a468:	4602      	mov	r2, r0
 800a46a:	4b07      	ldr	r3, [pc, #28]	@ (800a488 <HAL_RCC_GetHCLKFreq+0x28>)
 800a46c:	6a1b      	ldr	r3, [r3, #32]
 800a46e:	f003 030f 	and.w	r3, r3, #15
 800a472:	4906      	ldr	r1, [pc, #24]	@ (800a48c <HAL_RCC_GetHCLKFreq+0x2c>)
 800a474:	5ccb      	ldrb	r3, [r1, r3]
 800a476:	fa22 f303 	lsr.w	r3, r2, r3
 800a47a:	4a05      	ldr	r2, [pc, #20]	@ (800a490 <HAL_RCC_GetHCLKFreq+0x30>)
 800a47c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800a47e:	4b04      	ldr	r3, [pc, #16]	@ (800a490 <HAL_RCC_GetHCLKFreq+0x30>)
 800a480:	681b      	ldr	r3, [r3, #0]
}
 800a482:	4618      	mov	r0, r3
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	46020c00 	.word	0x46020c00
 800a48c:	08010be4 	.word	0x08010be4
 800a490:	20000000 	.word	0x20000000

0800a494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800a498:	f7ff ffe2 	bl	800a460 <HAL_RCC_GetHCLKFreq>
 800a49c:	4602      	mov	r2, r0
 800a49e:	4b05      	ldr	r3, [pc, #20]	@ (800a4b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a4a0:	6a1b      	ldr	r3, [r3, #32]
 800a4a2:	091b      	lsrs	r3, r3, #4
 800a4a4:	f003 0307 	and.w	r3, r3, #7
 800a4a8:	4903      	ldr	r1, [pc, #12]	@ (800a4b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a4aa:	5ccb      	ldrb	r3, [r1, r3]
 800a4ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	46020c00 	.word	0x46020c00
 800a4b8:	08010bf4 	.word	0x08010bf4

0800a4bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800a4c0:	f7ff ffce 	bl	800a460 <HAL_RCC_GetHCLKFreq>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	4b05      	ldr	r3, [pc, #20]	@ (800a4dc <HAL_RCC_GetPCLK2Freq+0x20>)
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
 800a4ca:	0a1b      	lsrs	r3, r3, #8
 800a4cc:	f003 0307 	and.w	r3, r3, #7
 800a4d0:	4903      	ldr	r1, [pc, #12]	@ (800a4e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a4d2:	5ccb      	ldrb	r3, [r1, r3]
 800a4d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	46020c00 	.word	0x46020c00
 800a4e0:	08010bf4 	.word	0x08010bf4

0800a4e4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800a4e8:	f7ff ffba 	bl	800a460 <HAL_RCC_GetHCLKFreq>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	4b05      	ldr	r3, [pc, #20]	@ (800a504 <HAL_RCC_GetPCLK3Freq+0x20>)
 800a4f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4f2:	091b      	lsrs	r3, r3, #4
 800a4f4:	f003 0307 	and.w	r3, r3, #7
 800a4f8:	4903      	ldr	r1, [pc, #12]	@ (800a508 <HAL_RCC_GetPCLK3Freq+0x24>)
 800a4fa:	5ccb      	ldrb	r3, [r1, r3]
 800a4fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a500:	4618      	mov	r0, r3
 800a502:	bd80      	pop	{r7, pc}
 800a504:	46020c00 	.word	0x46020c00
 800a508:	08010bf4 	.word	0x08010bf4

0800a50c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b086      	sub	sp, #24
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a514:	4b3e      	ldr	r3, [pc, #248]	@ (800a610 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a516:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a51a:	f003 0304 	and.w	r3, r3, #4
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d003      	beq.n	800a52a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a522:	f7fe fd21 	bl	8008f68 <HAL_PWREx_GetVoltageRange>
 800a526:	6178      	str	r0, [r7, #20]
 800a528:	e019      	b.n	800a55e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a52a:	4b39      	ldr	r3, [pc, #228]	@ (800a610 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a52c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a530:	4a37      	ldr	r2, [pc, #220]	@ (800a610 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a532:	f043 0304 	orr.w	r3, r3, #4
 800a536:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a53a:	4b35      	ldr	r3, [pc, #212]	@ (800a610 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a53c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a540:	f003 0304 	and.w	r3, r3, #4
 800a544:	60fb      	str	r3, [r7, #12]
 800a546:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a548:	f7fe fd0e 	bl	8008f68 <HAL_PWREx_GetVoltageRange>
 800a54c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a54e:	4b30      	ldr	r3, [pc, #192]	@ (800a610 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a550:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a554:	4a2e      	ldr	r2, [pc, #184]	@ (800a610 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a556:	f023 0304 	bic.w	r3, r3, #4
 800a55a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a564:	d003      	beq.n	800a56e <RCC_SetFlashLatencyFromMSIRange+0x62>
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a56c:	d109      	bne.n	800a582 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a574:	d202      	bcs.n	800a57c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800a576:	2301      	movs	r3, #1
 800a578:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800a57a:	e033      	b.n	800a5e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800a57c:	2300      	movs	r3, #0
 800a57e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800a580:	e030      	b.n	800a5e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a588:	d208      	bcs.n	800a59c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a590:	d102      	bne.n	800a598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800a592:	2303      	movs	r3, #3
 800a594:	613b      	str	r3, [r7, #16]
 800a596:	e025      	b.n	800a5e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	e035      	b.n	800a608 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5a2:	d90f      	bls.n	800a5c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d109      	bne.n	800a5be <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a5b0:	d902      	bls.n	800a5b8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	613b      	str	r3, [r7, #16]
 800a5b6:	e015      	b.n	800a5e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	613b      	str	r3, [r7, #16]
 800a5bc:	e012      	b.n	800a5e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800a5be:	2300      	movs	r3, #0
 800a5c0:	613b      	str	r3, [r7, #16]
 800a5c2:	e00f      	b.n	800a5e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5ca:	d109      	bne.n	800a5e0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5d2:	d102      	bne.n	800a5da <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	613b      	str	r3, [r7, #16]
 800a5d8:	e004      	b.n	800a5e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800a5da:	2302      	movs	r3, #2
 800a5dc:	613b      	str	r3, [r7, #16]
 800a5de:	e001      	b.n	800a5e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a5e4:	4b0b      	ldr	r3, [pc, #44]	@ (800a614 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f023 020f 	bic.w	r2, r3, #15
 800a5ec:	4909      	ldr	r1, [pc, #36]	@ (800a614 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800a5f4:	4b07      	ldr	r3, [pc, #28]	@ (800a614 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 030f 	and.w	r3, r3, #15
 800a5fc:	693a      	ldr	r2, [r7, #16]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d001      	beq.n	800a606 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	e000      	b.n	800a608 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3718      	adds	r7, #24
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	46020c00 	.word	0x46020c00
 800a614:	40022000 	.word	0x40022000

0800a618 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800a618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a61c:	b0c8      	sub	sp, #288	@ 0x120
 800a61e:	af00      	add	r7, sp, #0
 800a620:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a624:	2300      	movs	r3, #0
 800a626:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a62a:	2300      	movs	r3, #0
 800a62c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a638:	f002 0401 	and.w	r4, r2, #1
 800a63c:	2500      	movs	r5, #0
 800a63e:	ea54 0305 	orrs.w	r3, r4, r5
 800a642:	d00b      	beq.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800a644:	4bd5      	ldr	r3, [pc, #852]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a64a:	f023 0103 	bic.w	r1, r3, #3
 800a64e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a654:	4ad1      	ldr	r2, [pc, #836]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a656:	430b      	orrs	r3, r1
 800a658:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a65c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a664:	f002 0802 	and.w	r8, r2, #2
 800a668:	f04f 0900 	mov.w	r9, #0
 800a66c:	ea58 0309 	orrs.w	r3, r8, r9
 800a670:	d00b      	beq.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800a672:	4bca      	ldr	r3, [pc, #808]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a678:	f023 010c 	bic.w	r1, r3, #12
 800a67c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a682:	4ac6      	ldr	r2, [pc, #792]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a684:	430b      	orrs	r3, r1
 800a686:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a68a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a692:	f002 0a04 	and.w	sl, r2, #4
 800a696:	f04f 0b00 	mov.w	fp, #0
 800a69a:	ea5a 030b 	orrs.w	r3, sl, fp
 800a69e:	d00b      	beq.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800a6a0:	4bbe      	ldr	r3, [pc, #760]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a6a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a6a6:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a6aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6b0:	4aba      	ldr	r2, [pc, #744]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a6b2:	430b      	orrs	r3, r1
 800a6b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a6b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	f002 0308 	and.w	r3, r2, #8
 800a6c4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a6ce:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	d00b      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800a6d8:	4bb0      	ldr	r3, [pc, #704]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a6da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a6de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a6e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6e8:	4aac      	ldr	r2, [pc, #688]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a6ea:	430b      	orrs	r3, r1
 800a6ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a6f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f8:	f002 0310 	and.w	r3, r2, #16
 800a6fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a700:	2300      	movs	r3, #0
 800a702:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a706:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a70a:	460b      	mov	r3, r1
 800a70c:	4313      	orrs	r3, r2
 800a70e:	d00b      	beq.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800a710:	4ba2      	ldr	r3, [pc, #648]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a716:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a71a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a71e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a720:	4a9e      	ldr	r2, [pc, #632]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a722:	430b      	orrs	r3, r1
 800a724:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a728:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a730:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a734:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a738:	2300      	movs	r3, #0
 800a73a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a73e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a742:	460b      	mov	r3, r1
 800a744:	4313      	orrs	r3, r2
 800a746:	d00b      	beq.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800a748:	4b94      	ldr	r3, [pc, #592]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a74a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a74e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a752:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a756:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a758:	4a90      	ldr	r2, [pc, #576]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a75a:	430b      	orrs	r3, r1
 800a75c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a760:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a768:	f002 0320 	and.w	r3, r2, #32
 800a76c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a770:	2300      	movs	r3, #0
 800a772:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a776:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a77a:	460b      	mov	r3, r1
 800a77c:	4313      	orrs	r3, r2
 800a77e:	d00b      	beq.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800a780:	4b86      	ldr	r3, [pc, #536]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a782:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a786:	f023 0107 	bic.w	r1, r3, #7
 800a78a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a78e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a790:	4a82      	ldr	r2, [pc, #520]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a792:	430b      	orrs	r3, r1
 800a794:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a798:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a7a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a7ae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	d00b      	beq.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800a7b8:	4b78      	ldr	r3, [pc, #480]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a7ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a7be:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800a7c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7c8:	4a74      	ldr	r2, [pc, #464]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a7ca:	430b      	orrs	r3, r1
 800a7cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a7d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a7dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a7e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	d00b      	beq.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800a7f0:	4b6a      	ldr	r3, [pc, #424]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a7f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a7f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a7fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a800:	4a66      	ldr	r2, [pc, #408]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a802:	430b      	orrs	r3, r1
 800a804:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a808:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a810:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800a814:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a818:	2300      	movs	r3, #0
 800a81a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a81e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a822:	460b      	mov	r3, r1
 800a824:	4313      	orrs	r3, r2
 800a826:	d00b      	beq.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800a828:	4b5c      	ldr	r3, [pc, #368]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a82a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a82e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a832:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a838:	4a58      	ldr	r2, [pc, #352]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a83a:	430b      	orrs	r3, r1
 800a83c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a840:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a848:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a84c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a850:	2300      	movs	r3, #0
 800a852:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a856:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a85a:	460b      	mov	r3, r1
 800a85c:	4313      	orrs	r3, r2
 800a85e:	d00b      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800a860:	4b4e      	ldr	r3, [pc, #312]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a866:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800a86a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a86e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a870:	4a4a      	ldr	r2, [pc, #296]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a872:	430b      	orrs	r3, r1
 800a874:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800a878:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a880:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a884:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a888:	2300      	movs	r3, #0
 800a88a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a88e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a892:	460b      	mov	r3, r1
 800a894:	4313      	orrs	r3, r2
 800a896:	d00b      	beq.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800a898:	4b40      	ldr	r3, [pc, #256]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a89a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a89e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800a8a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8a8:	4a3c      	ldr	r2, [pc, #240]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a8aa:	430b      	orrs	r3, r1
 800a8ac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800a8b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a8bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a8c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	d00c      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800a8d0:	4b32      	ldr	r3, [pc, #200]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a8d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a8d6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800a8da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8e2:	4a2e      	ldr	r2, [pc, #184]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a8e4:	430b      	orrs	r3, r1
 800a8e6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a8ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f2:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800a8f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a900:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a904:	460b      	mov	r3, r1
 800a906:	4313      	orrs	r3, r2
 800a908:	d00c      	beq.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800a90a:	4b24      	ldr	r3, [pc, #144]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a90c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a910:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800a914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a918:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a91c:	4a1f      	ldr	r2, [pc, #124]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a91e:	430b      	orrs	r3, r1
 800a920:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a924:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a930:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a934:	2300      	movs	r3, #0
 800a936:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a93a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a93e:	460b      	mov	r3, r1
 800a940:	4313      	orrs	r3, r2
 800a942:	d00c      	beq.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800a944:	4b15      	ldr	r3, [pc, #84]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a94a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800a94e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a956:	4a11      	ldr	r2, [pc, #68]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a958:	430b      	orrs	r3, r1
 800a95a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800a95e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a966:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a96a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a96e:	2300      	movs	r3, #0
 800a970:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a974:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a978:	460b      	mov	r3, r1
 800a97a:	4313      	orrs	r3, r2
 800a97c:	d010      	beq.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800a97e:	4b07      	ldr	r3, [pc, #28]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a980:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a984:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a98c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a990:	4a02      	ldr	r2, [pc, #8]	@ (800a99c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a992:	430b      	orrs	r3, r1
 800a994:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800a998:	e002      	b.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800a99a:	bf00      	nop
 800a99c:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a9a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a8:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a9ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a9b6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	d04c      	beq.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800a9c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a9c8:	2b80      	cmp	r3, #128	@ 0x80
 800a9ca:	d02d      	beq.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a9cc:	2b80      	cmp	r3, #128	@ 0x80
 800a9ce:	d827      	bhi.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800a9d0:	2b60      	cmp	r3, #96	@ 0x60
 800a9d2:	d02b      	beq.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a9d4:	2b60      	cmp	r3, #96	@ 0x60
 800a9d6:	d823      	bhi.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800a9d8:	2b40      	cmp	r3, #64	@ 0x40
 800a9da:	d006      	beq.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800a9dc:	2b40      	cmp	r3, #64	@ 0x40
 800a9de:	d81f      	bhi.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d009      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a9e4:	2b20      	cmp	r3, #32
 800a9e6:	d011      	beq.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800a9e8:	e01a      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a9ea:	4bc0      	ldr	r3, [pc, #768]	@ (800acec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a9ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ee:	4abf      	ldr	r2, [pc, #764]	@ (800acec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800a9f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a9f4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a9f6:	e01a      	b.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a9f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9fc:	3308      	adds	r3, #8
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f002 fcd6 	bl	800d3b0 <RCCEx_PLL2_Config>
 800aa04:	4603      	mov	r3, r0
 800aa06:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800aa0a:	e010      	b.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800aa0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa10:	332c      	adds	r3, #44	@ 0x2c
 800aa12:	4618      	mov	r0, r3
 800aa14:	f002 fd64 	bl	800d4e0 <RCCEx_PLL3_Config>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800aa1e:	e006      	b.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa20:	2301      	movs	r3, #1
 800aa22:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800aa26:	e002      	b.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800aa28:	bf00      	nop
 800aa2a:	e000      	b.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800aa2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa2e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d10d      	bne.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800aa36:	4bad      	ldr	r3, [pc, #692]	@ (800acec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aa38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aa3c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800aa40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa48:	4aa8      	ldr	r2, [pc, #672]	@ (800acec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aa4a:	430b      	orrs	r3, r1
 800aa4c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800aa50:	e003      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa52:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800aa56:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800aa5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa62:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800aa66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aa70:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800aa74:	460b      	mov	r3, r1
 800aa76:	4313      	orrs	r3, r2
 800aa78:	d053      	beq.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800aa7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aa82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa86:	d033      	beq.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800aa88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa8c:	d82c      	bhi.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800aa8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa92:	d02f      	beq.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800aa94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa98:	d826      	bhi.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800aa9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa9e:	d008      	beq.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800aaa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aaa4:	d820      	bhi.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00a      	beq.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800aaaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aaae:	d011      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800aab0:	e01a      	b.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aab2:	4b8e      	ldr	r3, [pc, #568]	@ (800acec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aab6:	4a8d      	ldr	r2, [pc, #564]	@ (800acec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aabc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800aabe:	e01a      	b.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800aac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aac4:	3308      	adds	r3, #8
 800aac6:	4618      	mov	r0, r3
 800aac8:	f002 fc72 	bl	800d3b0 <RCCEx_PLL2_Config>
 800aacc:	4603      	mov	r3, r0
 800aace:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800aad2:	e010      	b.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800aad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aad8:	332c      	adds	r3, #44	@ 0x2c
 800aada:	4618      	mov	r0, r3
 800aadc:	f002 fd00 	bl	800d4e0 <RCCEx_PLL3_Config>
 800aae0:	4603      	mov	r3, r0
 800aae2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800aae6:	e006      	b.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800aaee:	e002      	b.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800aaf0:	bf00      	nop
 800aaf2:	e000      	b.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800aaf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaf6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d10d      	bne.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800aafe:	4b7b      	ldr	r3, [pc, #492]	@ (800acec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ab00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ab04:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800ab08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab10:	4a76      	ldr	r2, [pc, #472]	@ (800acec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ab12:	430b      	orrs	r3, r1
 800ab14:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ab18:	e003      	b.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab1a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ab1e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800ab22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ab2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ab32:	2300      	movs	r3, #0
 800ab34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ab38:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	d046      	beq.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800ab42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ab4a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800ab4e:	d028      	beq.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800ab50:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800ab54:	d821      	bhi.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800ab56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab5a:	d022      	beq.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800ab5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab60:	d81b      	bhi.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800ab62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ab66:	d01c      	beq.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800ab68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ab6c:	d815      	bhi.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800ab6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab72:	d008      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800ab74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab78:	d80f      	bhi.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d011      	beq.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800ab7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab82:	d00e      	beq.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800ab84:	e009      	b.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ab86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab8a:	3308      	adds	r3, #8
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f002 fc0f 	bl	800d3b0 <RCCEx_PLL2_Config>
 800ab92:	4603      	mov	r3, r0
 800ab94:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ab98:	e004      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800aba0:	e000      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800aba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aba4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d10d      	bne.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800abac:	4b4f      	ldr	r3, [pc, #316]	@ (800acec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800abae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800abb2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800abb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800abbe:	4a4b      	ldr	r2, [pc, #300]	@ (800acec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800abc0:	430b      	orrs	r3, r1
 800abc2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800abc6:	e003      	b.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abc8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800abcc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800abd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800abdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800abe0:	2300      	movs	r3, #0
 800abe2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800abe6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800abea:	460b      	mov	r3, r1
 800abec:	4313      	orrs	r3, r2
 800abee:	d03f      	beq.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800abf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800abf8:	2b04      	cmp	r3, #4
 800abfa:	d81e      	bhi.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x622>
 800abfc:	a201      	add	r2, pc, #4	@ (adr r2, 800ac04 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800abfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac02:	bf00      	nop
 800ac04:	0800ac43 	.word	0x0800ac43
 800ac08:	0800ac19 	.word	0x0800ac19
 800ac0c:	0800ac27 	.word	0x0800ac27
 800ac10:	0800ac43 	.word	0x0800ac43
 800ac14:	0800ac43 	.word	0x0800ac43
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ac18:	4b34      	ldr	r3, [pc, #208]	@ (800acec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac1c:	4a33      	ldr	r2, [pc, #204]	@ (800acec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac22:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800ac24:	e00e      	b.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ac26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac2a:	332c      	adds	r3, #44	@ 0x2c
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f002 fc57 	bl	800d4e0 <RCCEx_PLL3_Config>
 800ac32:	4603      	mov	r3, r0
 800ac34:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ac38:	e004      	b.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ac40:	e000      	b.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800ac42:	bf00      	nop
    }
    if (ret == HAL_OK)
 800ac44:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d10d      	bne.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800ac4c:	4b27      	ldr	r3, [pc, #156]	@ (800acec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ac52:	f023 0107 	bic.w	r1, r3, #7
 800ac56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac5e:	4a23      	ldr	r2, [pc, #140]	@ (800acec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac60:	430b      	orrs	r3, r1
 800ac62:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ac66:	e003      	b.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac68:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ac6c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800ac70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac78:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ac7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ac7e:	2300      	movs	r3, #0
 800ac80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ac82:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ac86:	460b      	mov	r3, r1
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	d04c      	beq.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800ac8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ac94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ac98:	d02a      	beq.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800ac9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ac9e:	d821      	bhi.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800aca0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aca4:	d026      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800aca6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800acaa:	d81b      	bhi.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800acac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acb0:	d00e      	beq.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800acb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acb6:	d815      	bhi.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d01d      	beq.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800acbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acc0:	d110      	bne.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800acc2:	4b0a      	ldr	r3, [pc, #40]	@ (800acec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800acc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acc6:	4a09      	ldr	r2, [pc, #36]	@ (800acec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800acc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800accc:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800acce:	e014      	b.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800acd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acd4:	332c      	adds	r3, #44	@ 0x2c
 800acd6:	4618      	mov	r0, r3
 800acd8:	f002 fc02 	bl	800d4e0 <RCCEx_PLL3_Config>
 800acdc:	4603      	mov	r3, r0
 800acde:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ace2:	e00a      	b.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800acea:	e006      	b.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800acec:	46020c00 	.word	0x46020c00
        break;
 800acf0:	bf00      	nop
 800acf2:	e002      	b.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800acf4:	bf00      	nop
 800acf6:	e000      	b.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800acf8:	bf00      	nop
    }
    if (ret == HAL_OK)
 800acfa:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d10d      	bne.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800ad02:	4baf      	ldr	r3, [pc, #700]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ad04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ad08:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800ad0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ad14:	4aaa      	ldr	r2, [pc, #680]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ad16:	430b      	orrs	r3, r1
 800ad18:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800ad1c:	e003      	b.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad1e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ad22:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ad26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ad32:	673b      	str	r3, [r7, #112]	@ 0x70
 800ad34:	2300      	movs	r3, #0
 800ad36:	677b      	str	r3, [r7, #116]	@ 0x74
 800ad38:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	f000 80b5 	beq.w	800aeae <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ad44:	2300      	movs	r3, #0
 800ad46:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ad4a:	4b9d      	ldr	r3, [pc, #628]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ad4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad50:	f003 0304 	and.w	r3, r3, #4
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d113      	bne.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad58:	4b99      	ldr	r3, [pc, #612]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ad5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad5e:	4a98      	ldr	r2, [pc, #608]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ad60:	f043 0304 	orr.w	r3, r3, #4
 800ad64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800ad68:	4b95      	ldr	r3, [pc, #596]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ad6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad6e:	f003 0304 	and.w	r3, r3, #4
 800ad72:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800ad76:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800ad80:	4b90      	ldr	r3, [pc, #576]	@ (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800ad82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad84:	4a8f      	ldr	r2, [pc, #572]	@ (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800ad86:	f043 0301 	orr.w	r3, r3, #1
 800ad8a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ad8c:	f7f7 fe2e 	bl	80029ec <HAL_GetTick>
 800ad90:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800ad94:	e00b      	b.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad96:	f7f7 fe29 	bl	80029ec <HAL_GetTick>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ada0:	1ad3      	subs	r3, r2, r3
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d903      	bls.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800ada6:	2303      	movs	r3, #3
 800ada8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800adac:	e005      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800adae:	4b85      	ldr	r3, [pc, #532]	@ (800afc4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800adb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adb2:	f003 0301 	and.w	r3, r3, #1
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d0ed      	beq.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800adba:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d165      	bne.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800adc2:	4b7f      	ldr	r3, [pc, #508]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800adc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800adc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800adcc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800add0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800add4:	2b00      	cmp	r3, #0
 800add6:	d023      	beq.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800add8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800addc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800ade0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d01b      	beq.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ade8:	4b75      	ldr	r3, [pc, #468]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800adea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800adee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800adf2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800adf6:	4b72      	ldr	r3, [pc, #456]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800adf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800adfc:	4a70      	ldr	r2, [pc, #448]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800adfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ae06:	4b6e      	ldr	r3, [pc, #440]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ae08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae0c:	4a6c      	ldr	r2, [pc, #432]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ae0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ae16:	4a6a      	ldr	r2, [pc, #424]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ae18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ae1c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ae20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ae24:	f003 0301 	and.w	r3, r3, #1
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d019      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae2c:	f7f7 fdde 	bl	80029ec <HAL_GetTick>
 800ae30:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ae34:	e00d      	b.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae36:	f7f7 fdd9 	bl	80029ec <HAL_GetTick>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae40:	1ad2      	subs	r2, r2, r3
 800ae42:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d903      	bls.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800ae4a:	2303      	movs	r3, #3
 800ae4c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800ae50:	e006      	b.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ae52:	4b5b      	ldr	r3, [pc, #364]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ae54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae58:	f003 0302 	and.w	r3, r3, #2
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d0ea      	beq.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800ae60:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d10d      	bne.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800ae68:	4b55      	ldr	r3, [pc, #340]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ae6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ae72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae76:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800ae7a:	4a51      	ldr	r2, [pc, #324]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ae7c:	430b      	orrs	r3, r1
 800ae7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800ae82:	e008      	b.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ae84:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ae88:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800ae8c:	e003      	b.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae8e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ae92:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ae96:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d107      	bne.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ae9e:	4b48      	ldr	r3, [pc, #288]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800aea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aea4:	4a46      	ldr	r2, [pc, #280]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800aea6:	f023 0304 	bic.w	r3, r3, #4
 800aeaa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800aeae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb6:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800aeba:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aebc:	2300      	movs	r3, #0
 800aebe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aec0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800aec4:	460b      	mov	r3, r1
 800aec6:	4313      	orrs	r3, r2
 800aec8:	d042      	beq.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800aeca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aece:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800aed2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800aed6:	d022      	beq.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x906>
 800aed8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800aedc:	d81b      	bhi.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800aede:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aee2:	d011      	beq.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800aee4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aee8:	d815      	bhi.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d019      	beq.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800aeee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aef2:	d110      	bne.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800aef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aef8:	3308      	adds	r3, #8
 800aefa:	4618      	mov	r0, r3
 800aefc:	f002 fa58 	bl	800d3b0 <RCCEx_PLL2_Config>
 800af00:	4603      	mov	r3, r0
 800af02:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800af06:	e00d      	b.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af08:	4b2d      	ldr	r3, [pc, #180]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800af0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af0c:	4a2c      	ldr	r2, [pc, #176]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800af0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af12:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800af14:	e006      	b.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800af16:	2301      	movs	r3, #1
 800af18:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800af1c:	e002      	b.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800af1e:	bf00      	nop
 800af20:	e000      	b.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800af22:	bf00      	nop
    }
    if (ret == HAL_OK)
 800af24:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10d      	bne.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800af2c:	4b24      	ldr	r3, [pc, #144]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800af2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af32:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800af36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800af3e:	4a20      	ldr	r2, [pc, #128]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800af40:	430b      	orrs	r3, r1
 800af42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800af46:	e003      	b.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af48:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800af4c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800af50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800af5c:	663b      	str	r3, [r7, #96]	@ 0x60
 800af5e:	2300      	movs	r3, #0
 800af60:	667b      	str	r3, [r7, #100]	@ 0x64
 800af62:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800af66:	460b      	mov	r3, r1
 800af68:	4313      	orrs	r3, r2
 800af6a:	d031      	beq.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800af6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800af74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af78:	d00b      	beq.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800af7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af7e:	d804      	bhi.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800af80:	2b00      	cmp	r3, #0
 800af82:	d008      	beq.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800af84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af88:	d007      	beq.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800af90:	e004      	b.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800af92:	bf00      	nop
 800af94:	e002      	b.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800af96:	bf00      	nop
 800af98:	e000      	b.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800af9a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800af9c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d111      	bne.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800afa4:	4b06      	ldr	r3, [pc, #24]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800afa6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800afaa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800afae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800afb6:	4a02      	ldr	r2, [pc, #8]	@ (800afc0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800afb8:	430b      	orrs	r3, r1
 800afba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800afbe:	e007      	b.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800afc0:	46020c00 	.word	0x46020c00
 800afc4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afc8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800afcc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800afd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd8:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800afdc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800afde:	2300      	movs	r3, #0
 800afe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800afe2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800afe6:	460b      	mov	r3, r1
 800afe8:	4313      	orrs	r3, r2
 800afea:	d00c      	beq.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800afec:	4bb2      	ldr	r3, [pc, #712]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800afee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aff2:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800aff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800affa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800affe:	4aae      	ldr	r2, [pc, #696]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b000:	430b      	orrs	r3, r1
 800b002:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800b006:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b012:	653b      	str	r3, [r7, #80]	@ 0x50
 800b014:	2300      	movs	r3, #0
 800b016:	657b      	str	r3, [r7, #84]	@ 0x54
 800b018:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b01c:	460b      	mov	r3, r1
 800b01e:	4313      	orrs	r3, r2
 800b020:	d019      	beq.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800b022:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b026:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b02a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b02e:	d105      	bne.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b030:	4ba1      	ldr	r3, [pc, #644]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b034:	4aa0      	ldr	r2, [pc, #640]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b03a:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800b03c:	4b9e      	ldr	r3, [pc, #632]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b03e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b042:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b046:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b04a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b04e:	4a9a      	ldr	r2, [pc, #616]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b050:	430b      	orrs	r3, r1
 800b052:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b062:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b064:	2300      	movs	r3, #0
 800b066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b068:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b06c:	460b      	mov	r3, r1
 800b06e:	4313      	orrs	r3, r2
 800b070:	d00c      	beq.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b072:	4b91      	ldr	r3, [pc, #580]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b078:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b07c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b080:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b084:	4a8c      	ldr	r2, [pc, #560]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b086:	430b      	orrs	r3, r1
 800b088:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800b08c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b094:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b098:	643b      	str	r3, [r7, #64]	@ 0x40
 800b09a:	2300      	movs	r3, #0
 800b09c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b09e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	d00c      	beq.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800b0a8:	4b83      	ldr	r3, [pc, #524]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b0aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b0ae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b0b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b0ba:	4a7f      	ldr	r2, [pc, #508]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b0bc:	430b      	orrs	r3, r1
 800b0be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800b0c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ca:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b0ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0d4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b0d8:	460b      	mov	r3, r1
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	d00c      	beq.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800b0de:	4b76      	ldr	r3, [pc, #472]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b0e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b0e4:	f023 0118 	bic.w	r1, r3, #24
 800b0e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0ec:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b0f0:	4a71      	ldr	r2, [pc, #452]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b0f2:	430b      	orrs	r3, r1
 800b0f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b0f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b100:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800b104:	633b      	str	r3, [r7, #48]	@ 0x30
 800b106:	2300      	movs	r3, #0
 800b108:	637b      	str	r3, [r7, #52]	@ 0x34
 800b10a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b10e:	460b      	mov	r3, r1
 800b110:	4313      	orrs	r3, r2
 800b112:	d032      	beq.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800b114:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b118:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b11c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b120:	d105      	bne.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b122:	4b65      	ldr	r3, [pc, #404]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b126:	4a64      	ldr	r2, [pc, #400]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b12c:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800b12e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b132:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b136:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b13a:	d108      	bne.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b13c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b140:	3308      	adds	r3, #8
 800b142:	4618      	mov	r0, r3
 800b144:	f002 f934 	bl	800d3b0 <RCCEx_PLL2_Config>
 800b148:	4603      	mov	r3, r0
 800b14a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800b14e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b152:	2b00      	cmp	r3, #0
 800b154:	d10d      	bne.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800b156:	4b58      	ldr	r3, [pc, #352]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b158:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b15c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b164:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b168:	4a53      	ldr	r2, [pc, #332]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b16a:	430b      	orrs	r3, r1
 800b16c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b170:	e003      	b.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b172:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b176:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800b17a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b182:	2100      	movs	r1, #0
 800b184:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b186:	f003 0301 	and.w	r3, r3, #1
 800b18a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b18c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b190:	460b      	mov	r3, r1
 800b192:	4313      	orrs	r3, r2
 800b194:	d04a      	beq.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800b196:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b19a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b19e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b1a2:	d01e      	beq.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800b1a4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b1a8:	d825      	bhi.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800b1aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b1ae:	d00e      	beq.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800b1b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b1b4:	d81f      	bhi.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d021      	beq.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800b1ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b1be:	d11a      	bne.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1c0:	4b3d      	ldr	r3, [pc, #244]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b1c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1c4:	4a3c      	ldr	r2, [pc, #240]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b1c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b1ca:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b1cc:	e018      	b.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b1ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1d2:	3308      	adds	r3, #8
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f002 f8eb 	bl	800d3b0 <RCCEx_PLL2_Config>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b1e0:	e00e      	b.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b1e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1e6:	332c      	adds	r3, #44	@ 0x2c
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f002 f979 	bl	800d4e0 <RCCEx_PLL3_Config>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b1f4:	e004      	b.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b1fc:	e000      	b.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800b1fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b200:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10d      	bne.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800b208:	4b2b      	ldr	r3, [pc, #172]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b20a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b20e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b212:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b216:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b21a:	4927      	ldr	r1, [pc, #156]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b21c:	4313      	orrs	r3, r2
 800b21e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b222:	e003      	b.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b224:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b228:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800b22c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b234:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800b238:	623b      	str	r3, [r7, #32]
 800b23a:	2300      	movs	r3, #0
 800b23c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b23e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b242:	460b      	mov	r3, r1
 800b244:	4313      	orrs	r3, r2
 800b246:	d03d      	beq.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800b248:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b250:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b254:	d00e      	beq.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800b256:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b25a:	d815      	bhi.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d017      	beq.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b260:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b264:	d110      	bne.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b266:	4b14      	ldr	r3, [pc, #80]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b26a:	4a13      	ldr	r2, [pc, #76]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b26c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b270:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800b272:	e00e      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b274:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b278:	3308      	adds	r3, #8
 800b27a:	4618      	mov	r0, r3
 800b27c:	f002 f898 	bl	800d3b0 <RCCEx_PLL2_Config>
 800b280:	4603      	mov	r3, r0
 800b282:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800b286:	e004      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800b288:	2301      	movs	r3, #1
 800b28a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b28e:	e000      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b290:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b292:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b296:	2b00      	cmp	r3, #0
 800b298:	d110      	bne.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800b29a:	4b07      	ldr	r3, [pc, #28]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b29c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b2a0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b2a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2ac:	4902      	ldr	r1, [pc, #8]	@ (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800b2b4:	e006      	b.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800b2b6:	bf00      	nop
 800b2b8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2bc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b2c0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800b2c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2cc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b2d0:	61bb      	str	r3, [r7, #24]
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	61fb      	str	r3, [r7, #28]
 800b2d6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b2da:	460b      	mov	r3, r1
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	d00c      	beq.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800b2e0:	4b68      	ldr	r3, [pc, #416]	@ (800b484 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b2e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b2e6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800b2ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b2f2:	4964      	ldr	r1, [pc, #400]	@ (800b484 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b2fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b302:	2100      	movs	r1, #0
 800b304:	6139      	str	r1, [r7, #16]
 800b306:	f003 0302 	and.w	r3, r3, #2
 800b30a:	617b      	str	r3, [r7, #20]
 800b30c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b310:	460b      	mov	r3, r1
 800b312:	4313      	orrs	r3, r2
 800b314:	d036      	beq.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800b316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b31a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00c      	beq.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800b322:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b326:	d113      	bne.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b328:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b32c:	3308      	adds	r3, #8
 800b32e:	4618      	mov	r0, r3
 800b330:	f002 f83e 	bl	800d3b0 <RCCEx_PLL2_Config>
 800b334:	4603      	mov	r3, r0
 800b336:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800b33a:	e00d      	b.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b33c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b340:	332c      	adds	r3, #44	@ 0x2c
 800b342:	4618      	mov	r0, r3
 800b344:	f002 f8cc 	bl	800d4e0 <RCCEx_PLL3_Config>
 800b348:	4603      	mov	r3, r0
 800b34a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800b34e:	e003      	b.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b356:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b358:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10d      	bne.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800b360:	4b48      	ldr	r3, [pc, #288]	@ (800b484 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b362:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b366:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800b36a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b36e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b372:	4944      	ldr	r1, [pc, #272]	@ (800b484 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b374:	4313      	orrs	r3, r2
 800b376:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b37a:	e003      	b.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b37c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b380:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800b384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	2100      	movs	r1, #0
 800b38e:	60b9      	str	r1, [r7, #8]
 800b390:	f003 0304 	and.w	r3, r3, #4
 800b394:	60fb      	str	r3, [r7, #12]
 800b396:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b39a:	460b      	mov	r3, r1
 800b39c:	4313      	orrs	r3, r2
 800b39e:	d024      	beq.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800b3a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d108      	bne.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b3ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3b0:	332c      	adds	r3, #44	@ 0x2c
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f002 f894 	bl	800d4e0 <RCCEx_PLL3_Config>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800b3be:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d10d      	bne.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800b3c6:	4b2f      	ldr	r3, [pc, #188]	@ (800b484 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b3c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b3cc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800b3d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b3d8:	492a      	ldr	r1, [pc, #168]	@ (800b484 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b3e0:	e003      	b.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3e2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b3e6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800b3ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f2:	2100      	movs	r1, #0
 800b3f4:	6039      	str	r1, [r7, #0]
 800b3f6:	f003 0308 	and.w	r3, r3, #8
 800b3fa:	607b      	str	r3, [r7, #4]
 800b3fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b400:	460b      	mov	r3, r1
 800b402:	4313      	orrs	r3, r2
 800b404:	d036      	beq.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800b406:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b40a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b40e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b412:	d00d      	beq.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800b414:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b418:	d811      	bhi.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800b41a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b41e:	d012      	beq.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800b420:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b424:	d80b      	bhi.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00d      	beq.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800b42a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b42e:	d106      	bne.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b430:	4b14      	ldr	r3, [pc, #80]	@ (800b484 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b434:	4a13      	ldr	r2, [pc, #76]	@ (800b484 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b43a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800b43c:	e004      	b.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800b43e:	2301      	movs	r3, #1
 800b440:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b444:	e000      	b.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800b446:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b448:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d10d      	bne.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800b450:	4b0c      	ldr	r3, [pc, #48]	@ (800b484 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b452:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b456:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800b45a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b45e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b462:	4908      	ldr	r1, [pc, #32]	@ (800b484 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b464:	4313      	orrs	r3, r2
 800b466:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b46a:	e003      	b.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b46c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b470:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800b474:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800b478:	4618      	mov	r0, r3
 800b47a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800b47e:	46bd      	mov	sp, r7
 800b480:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b484:	46020c00 	.word	0x46020c00

0800b488 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b488:	b480      	push	{r7}
 800b48a:	b089      	sub	sp, #36	@ 0x24
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800b490:	4ba6      	ldr	r3, [pc, #664]	@ (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b498:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800b49a:	4ba4      	ldr	r3, [pc, #656]	@ (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b49c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b49e:	f003 0303 	and.w	r3, r3, #3
 800b4a2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b4a4:	4ba1      	ldr	r3, [pc, #644]	@ (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b4a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a8:	0a1b      	lsrs	r3, r3, #8
 800b4aa:	f003 030f 	and.w	r3, r3, #15
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800b4b2:	4b9e      	ldr	r3, [pc, #632]	@ (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b4b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4b6:	091b      	lsrs	r3, r3, #4
 800b4b8:	f003 0301 	and.w	r3, r3, #1
 800b4bc:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800b4be:	4b9b      	ldr	r3, [pc, #620]	@ (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b4c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4c2:	08db      	lsrs	r3, r3, #3
 800b4c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	fb02 f303 	mul.w	r3, r2, r3
 800b4ce:	ee07 3a90 	vmov	s15, r3
 800b4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4d6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	2b03      	cmp	r3, #3
 800b4de:	d062      	beq.n	800b5a6 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	2b03      	cmp	r3, #3
 800b4e4:	f200 8081 	bhi.w	800b5ea <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d024      	beq.n	800b538 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	2b02      	cmp	r3, #2
 800b4f2:	d17a      	bne.n	800b5ea <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	ee07 3a90 	vmov	s15, r3
 800b4fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4fe:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800b730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800b502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b506:	4b89      	ldr	r3, [pc, #548]	@ (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b50a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b50e:	ee07 3a90 	vmov	s15, r3
 800b512:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b516:	ed97 6a02 	vldr	s12, [r7, #8]
 800b51a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800b734 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b51e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b522:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b52a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b52e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b532:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b536:	e08f      	b.n	800b658 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b538:	4b7c      	ldr	r3, [pc, #496]	@ (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b540:	2b00      	cmp	r3, #0
 800b542:	d005      	beq.n	800b550 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800b544:	4b79      	ldr	r3, [pc, #484]	@ (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	0f1b      	lsrs	r3, r3, #28
 800b54a:	f003 030f 	and.w	r3, r3, #15
 800b54e:	e006      	b.n	800b55e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800b550:	4b76      	ldr	r3, [pc, #472]	@ (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b552:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b556:	041b      	lsls	r3, r3, #16
 800b558:	0f1b      	lsrs	r3, r3, #28
 800b55a:	f003 030f 	and.w	r3, r3, #15
 800b55e:	4a76      	ldr	r2, [pc, #472]	@ (800b738 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800b560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b564:	ee07 3a90 	vmov	s15, r3
 800b568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	ee07 3a90 	vmov	s15, r3
 800b572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b57a:	69bb      	ldr	r3, [r7, #24]
 800b57c:	ee07 3a90 	vmov	s15, r3
 800b580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b584:	ed97 6a02 	vldr	s12, [r7, #8]
 800b588:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800b734 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b58c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b590:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b594:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b598:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b59c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5a4:	e058      	b.n	800b658 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	ee07 3a90 	vmov	s15, r3
 800b5ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5b0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800b5b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5b8:	4b5c      	ldr	r3, [pc, #368]	@ (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b5ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5c0:	ee07 3a90 	vmov	s15, r3
 800b5c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5c8:	ed97 6a02 	vldr	s12, [r7, #8]
 800b5cc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800b734 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b5d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b5d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b5e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5e8:	e036      	b.n	800b658 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b5ea:	4b50      	ldr	r3, [pc, #320]	@ (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d005      	beq.n	800b602 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800b5f6:	4b4d      	ldr	r3, [pc, #308]	@ (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	0f1b      	lsrs	r3, r3, #28
 800b5fc:	f003 030f 	and.w	r3, r3, #15
 800b600:	e006      	b.n	800b610 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800b602:	4b4a      	ldr	r3, [pc, #296]	@ (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b604:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b608:	041b      	lsls	r3, r3, #16
 800b60a:	0f1b      	lsrs	r3, r3, #28
 800b60c:	f003 030f 	and.w	r3, r3, #15
 800b610:	4a49      	ldr	r2, [pc, #292]	@ (800b738 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800b612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b616:	ee07 3a90 	vmov	s15, r3
 800b61a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	ee07 3a90 	vmov	s15, r3
 800b624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b62c:	69bb      	ldr	r3, [r7, #24]
 800b62e:	ee07 3a90 	vmov	s15, r3
 800b632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b636:	ed97 6a02 	vldr	s12, [r7, #8]
 800b63a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800b734 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b63e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b64a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b64e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b652:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b656:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800b658:	4b34      	ldr	r3, [pc, #208]	@ (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b65a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b65c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b660:	2b00      	cmp	r3, #0
 800b662:	d017      	beq.n	800b694 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b664:	4b31      	ldr	r3, [pc, #196]	@ (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b668:	0a5b      	lsrs	r3, r3, #9
 800b66a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b66e:	ee07 3a90 	vmov	s15, r3
 800b672:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800b676:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b67a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b67e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b68a:	ee17 2a90 	vmov	r2, s15
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	601a      	str	r2, [r3, #0]
 800b692:	e002      	b.n	800b69a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800b69a:	4b24      	ldr	r3, [pc, #144]	@ (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b69c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b69e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d017      	beq.n	800b6d6 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b6a6:	4b21      	ldr	r3, [pc, #132]	@ (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b6a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6aa:	0c1b      	lsrs	r3, r3, #16
 800b6ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6b0:	ee07 3a90 	vmov	s15, r3
 800b6b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800b6b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6bc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b6c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6cc:	ee17 2a90 	vmov	r2, s15
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	605a      	str	r2, [r3, #4]
 800b6d4:	e002      	b.n	800b6dc <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800b6dc:	4b13      	ldr	r3, [pc, #76]	@ (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b6de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d017      	beq.n	800b718 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b6e8:	4b10      	ldr	r3, [pc, #64]	@ (800b72c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b6ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6ec:	0e1b      	lsrs	r3, r3, #24
 800b6ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6f2:	ee07 3a90 	vmov	s15, r3
 800b6f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800b6fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6fe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b702:	edd7 6a07 	vldr	s13, [r7, #28]
 800b706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b70a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b70e:	ee17 2a90 	vmov	r2, s15
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b716:	e002      	b.n	800b71e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2200      	movs	r2, #0
 800b71c:	609a      	str	r2, [r3, #8]
}
 800b71e:	bf00      	nop
 800b720:	3724      	adds	r7, #36	@ 0x24
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	46020c00 	.word	0x46020c00
 800b730:	4b742400 	.word	0x4b742400
 800b734:	46000000 	.word	0x46000000
 800b738:	08010bfc 	.word	0x08010bfc

0800b73c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b089      	sub	sp, #36	@ 0x24
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800b744:	4ba6      	ldr	r3, [pc, #664]	@ (800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b74c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800b74e:	4ba4      	ldr	r3, [pc, #656]	@ (800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b752:	f003 0303 	and.w	r3, r3, #3
 800b756:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800b758:	4ba1      	ldr	r3, [pc, #644]	@ (800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b75a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b75c:	0a1b      	lsrs	r3, r3, #8
 800b75e:	f003 030f 	and.w	r3, r3, #15
 800b762:	3301      	adds	r3, #1
 800b764:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800b766:	4b9e      	ldr	r3, [pc, #632]	@ (800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b76a:	091b      	lsrs	r3, r3, #4
 800b76c:	f003 0301 	and.w	r3, r3, #1
 800b770:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800b772:	4b9b      	ldr	r3, [pc, #620]	@ (800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b776:	08db      	lsrs	r3, r3, #3
 800b778:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	fb02 f303 	mul.w	r3, r2, r3
 800b782:	ee07 3a90 	vmov	s15, r3
 800b786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b78a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	2b03      	cmp	r3, #3
 800b792:	d062      	beq.n	800b85a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	2b03      	cmp	r3, #3
 800b798:	f200 8081 	bhi.w	800b89e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d024      	beq.n	800b7ec <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	2b02      	cmp	r3, #2
 800b7a6:	d17a      	bne.n	800b89e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	ee07 3a90 	vmov	s15, r3
 800b7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7b2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800b9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800b7b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ba:	4b89      	ldr	r3, [pc, #548]	@ (800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b7bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7c2:	ee07 3a90 	vmov	s15, r3
 800b7c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7ce:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800b9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800b7d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b7d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7de:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7ea:	e08f      	b.n	800b90c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800b7ec:	4b7c      	ldr	r3, [pc, #496]	@ (800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b7ee:	689b      	ldr	r3, [r3, #8]
 800b7f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d005      	beq.n	800b804 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800b7f8:	4b79      	ldr	r3, [pc, #484]	@ (800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b7fa:	689b      	ldr	r3, [r3, #8]
 800b7fc:	0f1b      	lsrs	r3, r3, #28
 800b7fe:	f003 030f 	and.w	r3, r3, #15
 800b802:	e006      	b.n	800b812 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800b804:	4b76      	ldr	r3, [pc, #472]	@ (800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b806:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b80a:	041b      	lsls	r3, r3, #16
 800b80c:	0f1b      	lsrs	r3, r3, #28
 800b80e:	f003 030f 	and.w	r3, r3, #15
 800b812:	4a76      	ldr	r2, [pc, #472]	@ (800b9ec <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800b814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b818:	ee07 3a90 	vmov	s15, r3
 800b81c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	ee07 3a90 	vmov	s15, r3
 800b826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b82a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	ee07 3a90 	vmov	s15, r3
 800b834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b838:	ed97 6a02 	vldr	s12, [r7, #8]
 800b83c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800b9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800b840:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b844:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b848:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b84c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800b850:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b854:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b858:	e058      	b.n	800b90c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	ee07 3a90 	vmov	s15, r3
 800b860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b864:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800b868:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b86c:	4b5c      	ldr	r3, [pc, #368]	@ (800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b86e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b874:	ee07 3a90 	vmov	s15, r3
 800b878:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800b87c:	ed97 6a02 	vldr	s12, [r7, #8]
 800b880:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800b9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800b884:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b888:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800b88c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b890:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b894:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b898:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b89c:	e036      	b.n	800b90c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800b89e:	4b50      	ldr	r3, [pc, #320]	@ (800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d005      	beq.n	800b8b6 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800b8aa:	4b4d      	ldr	r3, [pc, #308]	@ (800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b8ac:	689b      	ldr	r3, [r3, #8]
 800b8ae:	0f1b      	lsrs	r3, r3, #28
 800b8b0:	f003 030f 	and.w	r3, r3, #15
 800b8b4:	e006      	b.n	800b8c4 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800b8b6:	4b4a      	ldr	r3, [pc, #296]	@ (800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b8b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b8bc:	041b      	lsls	r3, r3, #16
 800b8be:	0f1b      	lsrs	r3, r3, #28
 800b8c0:	f003 030f 	and.w	r3, r3, #15
 800b8c4:	4a49      	ldr	r2, [pc, #292]	@ (800b9ec <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800b8c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8ca:	ee07 3a90 	vmov	s15, r3
 800b8ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	ee07 3a90 	vmov	s15, r3
 800b8d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	ee07 3a90 	vmov	s15, r3
 800b8e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800b8ee:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800b9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800b8f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800b902:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b906:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b90a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800b90c:	4b34      	ldr	r3, [pc, #208]	@ (800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b90e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b914:	2b00      	cmp	r3, #0
 800b916:	d017      	beq.n	800b948 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b918:	4b31      	ldr	r3, [pc, #196]	@ (800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b91a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b91c:	0a5b      	lsrs	r3, r3, #9
 800b91e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b922:	ee07 3a90 	vmov	s15, r3
 800b926:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800b92a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b92e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b932:	edd7 6a07 	vldr	s13, [r7, #28]
 800b936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b93a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b93e:	ee17 2a90 	vmov	r2, s15
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	601a      	str	r2, [r3, #0]
 800b946:	e002      	b.n	800b94e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800b94e:	4b24      	ldr	r3, [pc, #144]	@ (800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b956:	2b00      	cmp	r3, #0
 800b958:	d017      	beq.n	800b98a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b95a:	4b21      	ldr	r3, [pc, #132]	@ (800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b95c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b95e:	0c1b      	lsrs	r3, r3, #16
 800b960:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b964:	ee07 3a90 	vmov	s15, r3
 800b968:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800b96c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b970:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b974:	edd7 6a07 	vldr	s13, [r7, #28]
 800b978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b97c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b980:	ee17 2a90 	vmov	r2, s15
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	605a      	str	r2, [r3, #4]
 800b988:	e002      	b.n	800b990 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2200      	movs	r2, #0
 800b98e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800b990:	4b13      	ldr	r3, [pc, #76]	@ (800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b994:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d017      	beq.n	800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b99c:	4b10      	ldr	r3, [pc, #64]	@ (800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b99e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9a0:	0e1b      	lsrs	r3, r3, #24
 800b9a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9a6:	ee07 3a90 	vmov	s15, r3
 800b9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800b9ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b9b2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b9b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9c2:	ee17 2a90 	vmov	r2, s15
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b9ca:	e002      	b.n	800b9d2 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	609a      	str	r2, [r3, #8]
}
 800b9d2:	bf00      	nop
 800b9d4:	3724      	adds	r7, #36	@ 0x24
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr
 800b9de:	bf00      	nop
 800b9e0:	46020c00 	.word	0x46020c00
 800b9e4:	4b742400 	.word	0x4b742400
 800b9e8:	46000000 	.word	0x46000000
 800b9ec:	08010bfc 	.word	0x08010bfc

0800b9f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b089      	sub	sp, #36	@ 0x24
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800b9f8:	4ba6      	ldr	r3, [pc, #664]	@ (800bc94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800b9fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba00:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800ba02:	4ba4      	ldr	r3, [pc, #656]	@ (800bc94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ba04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba06:	f003 0303 	and.w	r3, r3, #3
 800ba0a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800ba0c:	4ba1      	ldr	r3, [pc, #644]	@ (800bc94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ba0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba10:	0a1b      	lsrs	r3, r3, #8
 800ba12:	f003 030f 	and.w	r3, r3, #15
 800ba16:	3301      	adds	r3, #1
 800ba18:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800ba1a:	4b9e      	ldr	r3, [pc, #632]	@ (800bc94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ba1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba1e:	091b      	lsrs	r3, r3, #4
 800ba20:	f003 0301 	and.w	r3, r3, #1
 800ba24:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800ba26:	4b9b      	ldr	r3, [pc, #620]	@ (800bc94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ba28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba2a:	08db      	lsrs	r3, r3, #3
 800ba2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba30:	68fa      	ldr	r2, [r7, #12]
 800ba32:	fb02 f303 	mul.w	r3, r2, r3
 800ba36:	ee07 3a90 	vmov	s15, r3
 800ba3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba3e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	2b03      	cmp	r3, #3
 800ba46:	d062      	beq.n	800bb0e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	2b03      	cmp	r3, #3
 800ba4c:	f200 8081 	bhi.w	800bb52 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d024      	beq.n	800baa0 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	2b02      	cmp	r3, #2
 800ba5a:	d17a      	bne.n	800bb52 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	ee07 3a90 	vmov	s15, r3
 800ba62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba66:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800bc98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800ba6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba6e:	4b89      	ldr	r3, [pc, #548]	@ (800bc94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ba70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba76:	ee07 3a90 	vmov	s15, r3
 800ba7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba7e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba82:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800bc9c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ba86:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ba8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba92:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ba96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba9a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800ba9e:	e08f      	b.n	800bbc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800baa0:	4b7c      	ldr	r3, [pc, #496]	@ (800bc94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d005      	beq.n	800bab8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800baac:	4b79      	ldr	r3, [pc, #484]	@ (800bc94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	0f1b      	lsrs	r3, r3, #28
 800bab2:	f003 030f 	and.w	r3, r3, #15
 800bab6:	e006      	b.n	800bac6 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800bab8:	4b76      	ldr	r3, [pc, #472]	@ (800bc94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800baba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800babe:	041b      	lsls	r3, r3, #16
 800bac0:	0f1b      	lsrs	r3, r3, #28
 800bac2:	f003 030f 	and.w	r3, r3, #15
 800bac6:	4a76      	ldr	r2, [pc, #472]	@ (800bca0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800bac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bacc:	ee07 3a90 	vmov	s15, r3
 800bad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	ee07 3a90 	vmov	s15, r3
 800bada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	ee07 3a90 	vmov	s15, r3
 800bae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baec:	ed97 6a02 	vldr	s12, [r7, #8]
 800baf0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800bc9c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800baf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bafc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb00:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bb04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb0c:	e058      	b.n	800bbc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	ee07 3a90 	vmov	s15, r3
 800bb14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb18:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bc98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800bb1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb20:	4b5c      	ldr	r3, [pc, #368]	@ (800bc94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bb22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb28:	ee07 3a90 	vmov	s15, r3
 800bb2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb30:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb34:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bc9c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800bb38:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bb3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb44:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bb48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb50:	e036      	b.n	800bbc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bb52:	4b50      	ldr	r3, [pc, #320]	@ (800bc94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d005      	beq.n	800bb6a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800bb5e:	4b4d      	ldr	r3, [pc, #308]	@ (800bc94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	0f1b      	lsrs	r3, r3, #28
 800bb64:	f003 030f 	and.w	r3, r3, #15
 800bb68:	e006      	b.n	800bb78 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800bb6a:	4b4a      	ldr	r3, [pc, #296]	@ (800bc94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bb6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bb70:	041b      	lsls	r3, r3, #16
 800bb72:	0f1b      	lsrs	r3, r3, #28
 800bb74:	f003 030f 	and.w	r3, r3, #15
 800bb78:	4a49      	ldr	r2, [pc, #292]	@ (800bca0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800bb7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb7e:	ee07 3a90 	vmov	s15, r3
 800bb82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	ee07 3a90 	vmov	s15, r3
 800bb8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	ee07 3a90 	vmov	s15, r3
 800bb9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb9e:	ed97 6a02 	vldr	s12, [r7, #8]
 800bba2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800bc9c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800bba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bbb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bbbe:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800bbc0:	4b34      	ldr	r3, [pc, #208]	@ (800bc94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bbc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d017      	beq.n	800bbfc <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bbcc:	4b31      	ldr	r3, [pc, #196]	@ (800bc94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bbce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbd0:	0a5b      	lsrs	r3, r3, #9
 800bbd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbd6:	ee07 3a90 	vmov	s15, r3
 800bbda:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800bbde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bbe2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bbe6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbf2:	ee17 2a90 	vmov	r2, s15
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	601a      	str	r2, [r3, #0]
 800bbfa:	e002      	b.n	800bc02 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800bc02:	4b24      	ldr	r3, [pc, #144]	@ (800bc94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bc04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d017      	beq.n	800bc3e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bc0e:	4b21      	ldr	r3, [pc, #132]	@ (800bc94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bc10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc12:	0c1b      	lsrs	r3, r3, #16
 800bc14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc18:	ee07 3a90 	vmov	s15, r3
 800bc1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800bc20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc24:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bc28:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc34:	ee17 2a90 	vmov	r2, s15
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	605a      	str	r2, [r3, #4]
 800bc3c:	e002      	b.n	800bc44 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800bc44:	4b13      	ldr	r3, [pc, #76]	@ (800bc94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bc46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d017      	beq.n	800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bc50:	4b10      	ldr	r3, [pc, #64]	@ (800bc94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bc52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc54:	0e1b      	lsrs	r3, r3, #24
 800bc56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc5a:	ee07 3a90 	vmov	s15, r3
 800bc5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800bc62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc66:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bc6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc76:	ee17 2a90 	vmov	r2, s15
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bc7e:	e002      	b.n	800bc86 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	609a      	str	r2, [r3, #8]
}
 800bc86:	bf00      	nop
 800bc88:	3724      	adds	r7, #36	@ 0x24
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr
 800bc92:	bf00      	nop
 800bc94:	46020c00 	.word	0x46020c00
 800bc98:	4b742400 	.word	0x4b742400
 800bc9c:	46000000 	.word	0x46000000
 800bca0:	08010bfc 	.word	0x08010bfc

0800bca4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b08e      	sub	sp, #56	@ 0x38
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800bcae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcb2:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800bcb6:	430b      	orrs	r3, r1
 800bcb8:	d145      	bne.n	800bd46 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800bcba:	4ba7      	ldr	r3, [pc, #668]	@ (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bcbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bcc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bcc4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800bcc6:	4ba4      	ldr	r3, [pc, #656]	@ (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bcc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bccc:	f003 0302 	and.w	r3, r3, #2
 800bcd0:	2b02      	cmp	r3, #2
 800bcd2:	d108      	bne.n	800bce6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800bcd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcda:	d104      	bne.n	800bce6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800bcdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bce0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bce2:	f001 bb5a 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800bce6:	4b9c      	ldr	r3, [pc, #624]	@ (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bce8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bcec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bcf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bcf4:	d114      	bne.n	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800bcf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bcfc:	d110      	bne.n	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bcfe:	4b96      	ldr	r3, [pc, #600]	@ (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bd00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bd04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bd08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd0c:	d103      	bne.n	800bd16 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800bd0e:	23fa      	movs	r3, #250	@ 0xfa
 800bd10:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bd12:	f001 bb42 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800bd16:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bd1a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bd1c:	f001 bb3d 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800bd20:	4b8d      	ldr	r3, [pc, #564]	@ (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd2c:	d107      	bne.n	800bd3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800bd2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bd34:	d103      	bne.n	800bd3e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800bd36:	4b89      	ldr	r3, [pc, #548]	@ (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800bd38:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd3a:	f001 bb2e 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd42:	f001 bb2a 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bd46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd4a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800bd4e:	430b      	orrs	r3, r1
 800bd50:	d151      	bne.n	800bdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800bd52:	4b81      	ldr	r3, [pc, #516]	@ (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bd54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bd58:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800bd5c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd60:	2b80      	cmp	r3, #128	@ 0x80
 800bd62:	d035      	beq.n	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800bd64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd66:	2b80      	cmp	r3, #128	@ 0x80
 800bd68:	d841      	bhi.n	800bdee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800bd6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd6c:	2b60      	cmp	r3, #96	@ 0x60
 800bd6e:	d02a      	beq.n	800bdc6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800bd70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd72:	2b60      	cmp	r3, #96	@ 0x60
 800bd74:	d83b      	bhi.n	800bdee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800bd76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd78:	2b40      	cmp	r3, #64	@ 0x40
 800bd7a:	d009      	beq.n	800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bd7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd7e:	2b40      	cmp	r3, #64	@ 0x40
 800bd80:	d835      	bhi.n	800bdee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800bd82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d00c      	beq.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800bd88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd8a:	2b20      	cmp	r3, #32
 800bd8c:	d012      	beq.n	800bdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800bd8e:	e02e      	b.n	800bdee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7ff fb77 	bl	800b488 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bd9e:	f001 bafc 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bda2:	f107 0318 	add.w	r3, r7, #24
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7ff fcc8 	bl	800b73c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800bdac:	69bb      	ldr	r3, [r7, #24]
 800bdae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bdb0:	f001 baf3 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdb4:	f107 030c 	add.w	r3, r7, #12
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7ff fe19 	bl	800b9f0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bdc2:	f001 baea 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800bdc6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800bdca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bdcc:	f001 bae5 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bdd0:	4b61      	ldr	r3, [pc, #388]	@ (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bdd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bddc:	d103      	bne.n	800bde6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800bdde:	4b60      	ldr	r3, [pc, #384]	@ (800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bde0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bde2:	f001 bada 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bde6:	2300      	movs	r3, #0
 800bde8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bdea:	f001 bad6 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bdf2:	f001 bad2 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800bdf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdfa:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800bdfe:	430b      	orrs	r3, r1
 800be00:	d158      	bne.n	800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800be02:	4b55      	ldr	r3, [pc, #340]	@ (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800be04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800be08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800be0c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800be0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be14:	d03b      	beq.n	800be8e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800be16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be1c:	d846      	bhi.n	800beac <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800be1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be24:	d02e      	beq.n	800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800be26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be2c:	d83e      	bhi.n	800beac <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800be2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be34:	d00b      	beq.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800be36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be3c:	d836      	bhi.n	800beac <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800be3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be40:	2b00      	cmp	r3, #0
 800be42:	d00d      	beq.n	800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800be44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be4a:	d012      	beq.n	800be72 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800be4c:	e02e      	b.n	800beac <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be52:	4618      	mov	r0, r3
 800be54:	f7ff fb18 	bl	800b488 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800be58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800be5c:	f001 ba9d 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be60:	f107 0318 	add.w	r3, r7, #24
 800be64:	4618      	mov	r0, r3
 800be66:	f7ff fc69 	bl	800b73c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800be6e:	f001 ba94 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be72:	f107 030c 	add.w	r3, r7, #12
 800be76:	4618      	mov	r0, r3
 800be78:	f7ff fdba 	bl	800b9f0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800be80:	f001 ba8b 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800be84:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800be88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800be8a:	f001 ba86 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800be8e:	4b32      	ldr	r3, [pc, #200]	@ (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be9a:	d103      	bne.n	800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800be9c:	4b30      	ldr	r3, [pc, #192]	@ (800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800be9e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bea0:	f001 ba7b 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bea4:	2300      	movs	r3, #0
 800bea6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bea8:	f001 ba77 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800beac:	2300      	movs	r3, #0
 800beae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800beb0:	f001 ba73 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800beb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beb8:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800bebc:	430b      	orrs	r3, r1
 800bebe:	d126      	bne.n	800bf0e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800bec0:	4b25      	ldr	r3, [pc, #148]	@ (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bec2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bec6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800beca:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800becc:	4b22      	ldr	r3, [pc, #136]	@ (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bed4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bed8:	d106      	bne.n	800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800beda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d103      	bne.n	800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800bee0:	4b1f      	ldr	r3, [pc, #124]	@ (800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bee2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bee4:	f001 ba59 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800bee8:	4b1b      	ldr	r3, [pc, #108]	@ (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bef4:	d107      	bne.n	800bf06 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800bef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800befc:	d103      	bne.n	800bf06 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800befe:	4b19      	ldr	r3, [pc, #100]	@ (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800bf00:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf02:	f001 ba4a 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800bf06:	2300      	movs	r3, #0
 800bf08:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf0a:	f001 ba46 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800bf0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf12:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800bf16:	430b      	orrs	r3, r1
 800bf18:	d16e      	bne.n	800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800bf1a:	4b0f      	ldr	r3, [pc, #60]	@ (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bf1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf20:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800bf24:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800bf26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf28:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800bf2c:	d03d      	beq.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf30:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800bf34:	d85c      	bhi.n	800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800bf36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf3c:	d014      	beq.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800bf3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf44:	d854      	bhi.n	800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800bf46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d01f      	beq.n	800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800bf4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bf52:	d012      	beq.n	800bf7a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800bf54:	e04c      	b.n	800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800bf56:	bf00      	nop
 800bf58:	46020c00 	.word	0x46020c00
 800bf5c:	0007a120 	.word	0x0007a120
 800bf60:	00f42400 	.word	0x00f42400
 800bf64:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7ff fa8b 	bl	800b488 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bf76:	f001 ba10 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf7a:	f107 0318 	add.w	r3, r7, #24
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7ff fbdc 	bl	800b73c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bf88:	f001 ba07 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800bf8c:	4ba7      	ldr	r3, [pc, #668]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bf94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf98:	d103      	bne.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800bf9a:	4ba5      	ldr	r3, [pc, #660]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800bf9c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bf9e:	f001 b9fc 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bfa6:	f001 b9f8 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bfaa:	4ba0      	ldr	r3, [pc, #640]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f003 0320 	and.w	r3, r3, #32
 800bfb2:	2b20      	cmp	r3, #32
 800bfb4:	d118      	bne.n	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bfb6:	4b9d      	ldr	r3, [pc, #628]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d005      	beq.n	800bfce <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800bfc2:	4b9a      	ldr	r3, [pc, #616]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	0e1b      	lsrs	r3, r3, #24
 800bfc8:	f003 030f 	and.w	r3, r3, #15
 800bfcc:	e006      	b.n	800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800bfce:	4b97      	ldr	r3, [pc, #604]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800bfd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bfd4:	041b      	lsls	r3, r3, #16
 800bfd6:	0e1b      	lsrs	r3, r3, #24
 800bfd8:	f003 030f 	and.w	r3, r3, #15
 800bfdc:	4a95      	ldr	r2, [pc, #596]	@ (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bfde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfe2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bfe4:	f001 b9d9 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bfec:	f001 b9d5 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800bff0:	2300      	movs	r3, #0
 800bff2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bff4:	f001 b9d1 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bffc:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800c000:	430b      	orrs	r3, r1
 800c002:	d17f      	bne.n	800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c004:	4b89      	ldr	r3, [pc, #548]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c006:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c00a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c00e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800c010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c012:	2b00      	cmp	r3, #0
 800c014:	d165      	bne.n	800c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c016:	4b85      	ldr	r3, [pc, #532]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c01c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c020:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800c022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c024:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c028:	d034      	beq.n	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800c02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c02c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c030:	d853      	bhi.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c034:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c038:	d00b      	beq.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800c03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c03c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c040:	d84b      	bhi.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c044:	2b00      	cmp	r3, #0
 800c046:	d016      	beq.n	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800c048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c04a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c04e:	d009      	beq.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800c050:	e043      	b.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c056:	4618      	mov	r0, r3
 800c058:	f7ff fa16 	bl	800b488 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c05e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c060:	f001 b99b 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c064:	f107 0318 	add.w	r3, r7, #24
 800c068:	4618      	mov	r0, r3
 800c06a:	f7ff fb67 	bl	800b73c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c06e:	69fb      	ldr	r3, [r7, #28]
 800c070:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c072:	f001 b992 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c076:	4b6d      	ldr	r3, [pc, #436]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c07e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c082:	d103      	bne.n	800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800c084:	4b6a      	ldr	r3, [pc, #424]	@ (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c086:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c088:	f001 b987 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c08c:	2300      	movs	r3, #0
 800c08e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c090:	f001 b983 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c094:	4b65      	ldr	r3, [pc, #404]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f003 0320 	and.w	r3, r3, #32
 800c09c:	2b20      	cmp	r3, #32
 800c09e:	d118      	bne.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c0a0:	4b62      	ldr	r3, [pc, #392]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c0a2:	689b      	ldr	r3, [r3, #8]
 800c0a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d005      	beq.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800c0ac:	4b5f      	ldr	r3, [pc, #380]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c0ae:	689b      	ldr	r3, [r3, #8]
 800c0b0:	0e1b      	lsrs	r3, r3, #24
 800c0b2:	f003 030f 	and.w	r3, r3, #15
 800c0b6:	e006      	b.n	800c0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c0b8:	4b5c      	ldr	r3, [pc, #368]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c0ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c0be:	041b      	lsls	r3, r3, #16
 800c0c0:	0e1b      	lsrs	r3, r3, #24
 800c0c2:	f003 030f 	and.w	r3, r3, #15
 800c0c6:	4a5b      	ldr	r2, [pc, #364]	@ (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c0c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0cc:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c0ce:	f001 b964 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c0d6:	f001 b960 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c0de:	f001 b95c 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c0e8:	d108      	bne.n	800c0fc <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7ff f9ca 	bl	800b488 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0f8:	f001 b94f 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800c100:	f001 b94b 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800c104:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c108:	1e51      	subs	r1, r2, #1
 800c10a:	430b      	orrs	r3, r1
 800c10c:	d136      	bne.n	800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c10e:	4b47      	ldr	r3, [pc, #284]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c114:	f003 0303 	and.w	r3, r3, #3
 800c118:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800c11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d104      	bne.n	800c12a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800c120:	f7fe f9cc 	bl	800a4bc <HAL_RCC_GetPCLK2Freq>
 800c124:	6378      	str	r0, [r7, #52]	@ 0x34
 800c126:	f001 b938 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800c12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d104      	bne.n	800c13a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c130:	f7fe f894 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800c134:	6378      	str	r0, [r7, #52]	@ 0x34
 800c136:	f001 b930 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800c13a:	4b3c      	ldr	r3, [pc, #240]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c146:	d106      	bne.n	800c156 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800c148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c14a:	2b02      	cmp	r3, #2
 800c14c:	d103      	bne.n	800c156 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800c14e:	4b3a      	ldr	r3, [pc, #232]	@ (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c150:	637b      	str	r3, [r7, #52]	@ 0x34
 800c152:	f001 b922 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800c156:	4b35      	ldr	r3, [pc, #212]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c15c:	f003 0302 	and.w	r3, r3, #2
 800c160:	2b02      	cmp	r3, #2
 800c162:	d107      	bne.n	800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800c164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c166:	2b03      	cmp	r3, #3
 800c168:	d104      	bne.n	800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800c16a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c16e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c170:	f001 b913 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800c174:	2300      	movs	r3, #0
 800c176:	637b      	str	r3, [r7, #52]	@ 0x34
 800c178:	f001 b90f 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800c17c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c180:	1e91      	subs	r1, r2, #2
 800c182:	430b      	orrs	r3, r1
 800c184:	d136      	bne.n	800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c186:	4b29      	ldr	r3, [pc, #164]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c18c:	f003 030c 	and.w	r3, r3, #12
 800c190:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800c192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c194:	2b00      	cmp	r3, #0
 800c196:	d104      	bne.n	800c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c198:	f7fe f97c 	bl	800a494 <HAL_RCC_GetPCLK1Freq>
 800c19c:	6378      	str	r0, [r7, #52]	@ 0x34
 800c19e:	f001 b8fc 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1a4:	2b04      	cmp	r3, #4
 800c1a6:	d104      	bne.n	800c1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c1a8:	f7fe f858 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800c1ac:	6378      	str	r0, [r7, #52]	@ 0x34
 800c1ae:	f001 b8f4 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800c1b2:	4b1e      	ldr	r3, [pc, #120]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c1ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1be:	d106      	bne.n	800c1ce <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1c2:	2b08      	cmp	r3, #8
 800c1c4:	d103      	bne.n	800c1ce <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800c1c6:	4b1c      	ldr	r3, [pc, #112]	@ (800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c1c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1ca:	f001 b8e6 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800c1ce:	4b17      	ldr	r3, [pc, #92]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c1d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c1d4:	f003 0302 	and.w	r3, r3, #2
 800c1d8:	2b02      	cmp	r3, #2
 800c1da:	d107      	bne.n	800c1ec <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800c1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1de:	2b0c      	cmp	r3, #12
 800c1e0:	d104      	bne.n	800c1ec <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800c1e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c1e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1e8:	f001 b8d7 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1f0:	f001 b8d3 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800c1f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1f8:	1f11      	subs	r1, r2, #4
 800c1fa:	430b      	orrs	r3, r1
 800c1fc:	d13f      	bne.n	800c27e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800c1fe:	4b0b      	ldr	r3, [pc, #44]	@ (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c204:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c208:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800c20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d104      	bne.n	800c21a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c210:	f7fe f940 	bl	800a494 <HAL_RCC_GetPCLK1Freq>
 800c214:	6378      	str	r0, [r7, #52]	@ 0x34
 800c216:	f001 b8c0 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800c21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c21c:	2b10      	cmp	r3, #16
 800c21e:	d10d      	bne.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c220:	f7fe f81c 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800c224:	6378      	str	r0, [r7, #52]	@ 0x34
 800c226:	f001 b8b8 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c22a:	bf00      	nop
 800c22c:	46020c00 	.word	0x46020c00
 800c230:	02dc6c00 	.word	0x02dc6c00
 800c234:	08010bfc 	.word	0x08010bfc
 800c238:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800c23c:	4ba8      	ldr	r3, [pc, #672]	@ (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c248:	d106      	bne.n	800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800c24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c24c:	2b20      	cmp	r3, #32
 800c24e:	d103      	bne.n	800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800c250:	4ba4      	ldr	r3, [pc, #656]	@ (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c252:	637b      	str	r3, [r7, #52]	@ 0x34
 800c254:	f001 b8a1 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800c258:	4ba1      	ldr	r3, [pc, #644]	@ (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c25a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c25e:	f003 0302 	and.w	r3, r3, #2
 800c262:	2b02      	cmp	r3, #2
 800c264:	d107      	bne.n	800c276 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c268:	2b30      	cmp	r3, #48	@ 0x30
 800c26a:	d104      	bne.n	800c276 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800c26c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c270:	637b      	str	r3, [r7, #52]	@ 0x34
 800c272:	f001 b892 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800c276:	2300      	movs	r3, #0
 800c278:	637b      	str	r3, [r7, #52]	@ 0x34
 800c27a:	f001 b88e 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800c27e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c282:	f1a2 0108 	sub.w	r1, r2, #8
 800c286:	430b      	orrs	r3, r1
 800c288:	d136      	bne.n	800c2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800c28a:	4b95      	ldr	r3, [pc, #596]	@ (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c28c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c290:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c294:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800c296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d104      	bne.n	800c2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c29c:	f7fe f8fa 	bl	800a494 <HAL_RCC_GetPCLK1Freq>
 800c2a0:	6378      	str	r0, [r7, #52]	@ 0x34
 800c2a2:	f001 b87a 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800c2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2a8:	2b40      	cmp	r3, #64	@ 0x40
 800c2aa:	d104      	bne.n	800c2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c2ac:	f7fd ffd6 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800c2b0:	6378      	str	r0, [r7, #52]	@ 0x34
 800c2b2:	f001 b872 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800c2b6:	4b8a      	ldr	r3, [pc, #552]	@ (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c2be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2c2:	d106      	bne.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800c2c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c6:	2b80      	cmp	r3, #128	@ 0x80
 800c2c8:	d103      	bne.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800c2ca:	4b86      	ldr	r3, [pc, #536]	@ (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c2cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2ce:	f001 b864 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800c2d2:	4b83      	ldr	r3, [pc, #524]	@ (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c2d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c2d8:	f003 0302 	and.w	r3, r3, #2
 800c2dc:	2b02      	cmp	r3, #2
 800c2de:	d107      	bne.n	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800c2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e2:	2bc0      	cmp	r3, #192	@ 0xc0
 800c2e4:	d104      	bne.n	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800c2e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c2ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2ec:	f001 b855 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2f4:	f001 b851 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800c2f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2fc:	f1a2 0110 	sub.w	r1, r2, #16
 800c300:	430b      	orrs	r3, r1
 800c302:	d139      	bne.n	800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800c304:	4b76      	ldr	r3, [pc, #472]	@ (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c30a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c30e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800c310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c312:	2b00      	cmp	r3, #0
 800c314:	d104      	bne.n	800c320 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c316:	f7fe f8bd 	bl	800a494 <HAL_RCC_GetPCLK1Freq>
 800c31a:	6378      	str	r0, [r7, #52]	@ 0x34
 800c31c:	f001 b83d 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800c320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c326:	d104      	bne.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c328:	f7fd ff98 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800c32c:	6378      	str	r0, [r7, #52]	@ 0x34
 800c32e:	f001 b834 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800c332:	4b6b      	ldr	r3, [pc, #428]	@ (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c33a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c33e:	d107      	bne.n	800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800c340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c342:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c346:	d103      	bne.n	800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800c348:	4b66      	ldr	r3, [pc, #408]	@ (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c34a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c34c:	f001 b825 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800c350:	4b63      	ldr	r3, [pc, #396]	@ (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c352:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c356:	f003 0302 	and.w	r3, r3, #2
 800c35a:	2b02      	cmp	r3, #2
 800c35c:	d108      	bne.n	800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800c35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c360:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c364:	d104      	bne.n	800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800c366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c36a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c36c:	f001 b815 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800c370:	2300      	movs	r3, #0
 800c372:	637b      	str	r3, [r7, #52]	@ 0x34
 800c374:	f001 b811 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800c378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c37c:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800c380:	430b      	orrs	r3, r1
 800c382:	d139      	bne.n	800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800c384:	4b56      	ldr	r3, [pc, #344]	@ (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c386:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c38a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c38e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800c390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c392:	2b00      	cmp	r3, #0
 800c394:	d104      	bne.n	800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c396:	f7fe f87d 	bl	800a494 <HAL_RCC_GetPCLK1Freq>
 800c39a:	6378      	str	r0, [r7, #52]	@ 0x34
 800c39c:	f000 bffd 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800c3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3a6:	d104      	bne.n	800c3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c3a8:	f7fd ff58 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800c3ac:	6378      	str	r0, [r7, #52]	@ 0x34
 800c3ae:	f000 bff4 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800c3b2:	4b4b      	ldr	r3, [pc, #300]	@ (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3be:	d107      	bne.n	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800c3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c3c6:	d103      	bne.n	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800c3c8:	4b46      	ldr	r3, [pc, #280]	@ (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c3ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3cc:	f000 bfe5 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800c3d0:	4b43      	ldr	r3, [pc, #268]	@ (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c3d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c3d6:	f003 0302 	and.w	r3, r3, #2
 800c3da:	2b02      	cmp	r3, #2
 800c3dc:	d108      	bne.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800c3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c3e4:	d104      	bne.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800c3e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c3ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3ec:	f000 bfd5 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3f4:	f000 bfd1 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800c3f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3fc:	f1a2 0120 	sub.w	r1, r2, #32
 800c400:	430b      	orrs	r3, r1
 800c402:	d158      	bne.n	800c4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800c404:	4b36      	ldr	r3, [pc, #216]	@ (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c406:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c40a:	f003 0307 	and.w	r3, r3, #7
 800c40e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800c410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c412:	2b00      	cmp	r3, #0
 800c414:	d104      	bne.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800c416:	f7fe f865 	bl	800a4e4 <HAL_RCC_GetPCLK3Freq>
 800c41a:	6378      	str	r0, [r7, #52]	@ 0x34
 800c41c:	f000 bfbd 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800c420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c422:	2b01      	cmp	r3, #1
 800c424:	d104      	bne.n	800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c426:	f7fd ff19 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800c42a:	6378      	str	r0, [r7, #52]	@ 0x34
 800c42c:	f000 bfb5 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800c430:	4b2b      	ldr	r3, [pc, #172]	@ (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c438:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c43c:	d106      	bne.n	800c44c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800c43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c440:	2b02      	cmp	r3, #2
 800c442:	d103      	bne.n	800c44c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800c444:	4b27      	ldr	r3, [pc, #156]	@ (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c446:	637b      	str	r3, [r7, #52]	@ 0x34
 800c448:	f000 bfa7 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800c44c:	4b24      	ldr	r3, [pc, #144]	@ (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c44e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c452:	f003 0302 	and.w	r3, r3, #2
 800c456:	2b02      	cmp	r3, #2
 800c458:	d107      	bne.n	800c46a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800c45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c45c:	2b03      	cmp	r3, #3
 800c45e:	d104      	bne.n	800c46a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800c460:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c464:	637b      	str	r3, [r7, #52]	@ 0x34
 800c466:	f000 bf98 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800c46a:	4b1d      	ldr	r3, [pc, #116]	@ (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f003 0320 	and.w	r3, r3, #32
 800c472:	2b20      	cmp	r3, #32
 800c474:	d11b      	bne.n	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800c476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c478:	2b04      	cmp	r3, #4
 800c47a:	d118      	bne.n	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c47c:	4b18      	ldr	r3, [pc, #96]	@ (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c47e:	689b      	ldr	r3, [r3, #8]
 800c480:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c484:	2b00      	cmp	r3, #0
 800c486:	d005      	beq.n	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800c488:	4b15      	ldr	r3, [pc, #84]	@ (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	0e1b      	lsrs	r3, r3, #24
 800c48e:	f003 030f 	and.w	r3, r3, #15
 800c492:	e006      	b.n	800c4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800c494:	4b12      	ldr	r3, [pc, #72]	@ (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c496:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c49a:	041b      	lsls	r3, r3, #16
 800c49c:	0e1b      	lsrs	r3, r3, #24
 800c49e:	f003 030f 	and.w	r3, r3, #15
 800c4a2:	4a11      	ldr	r2, [pc, #68]	@ (800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800c4a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4aa:	f000 bf76 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4b2:	f000 bf72 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800c4b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4ba:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800c4be:	430b      	orrs	r3, r1
 800c4c0:	d172      	bne.n	800c5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800c4c2:	4b07      	ldr	r3, [pc, #28]	@ (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c4c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c4c8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c4cc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800c4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4d4:	d10a      	bne.n	800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c4d6:	f7fd fec1 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800c4da:	6378      	str	r0, [r7, #52]	@ 0x34
 800c4dc:	f000 bf5d 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c4e0:	46020c00 	.word	0x46020c00
 800c4e4:	00f42400 	.word	0x00f42400
 800c4e8:	08010bfc 	.word	0x08010bfc
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800c4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4f2:	d108      	bne.n	800c506 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4f4:	f107 0318 	add.w	r3, r7, #24
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7ff f91f 	bl	800b73c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800c4fe:	6a3b      	ldr	r3, [r7, #32]
 800c500:	637b      	str	r3, [r7, #52]	@ 0x34
 800c502:	f000 bf4a 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800c506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d104      	bne.n	800c516 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800c50c:	f7fd ffa8 	bl	800a460 <HAL_RCC_GetHCLKFreq>
 800c510:	6378      	str	r0, [r7, #52]	@ 0x34
 800c512:	f000 bf42 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800c516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c518:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800c51c:	d122      	bne.n	800c564 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c51e:	4bb0      	ldr	r3, [pc, #704]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f003 0320 	and.w	r3, r3, #32
 800c526:	2b20      	cmp	r3, #32
 800c528:	d118      	bne.n	800c55c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c52a:	4bad      	ldr	r3, [pc, #692]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c52c:	689b      	ldr	r3, [r3, #8]
 800c52e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c532:	2b00      	cmp	r3, #0
 800c534:	d005      	beq.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800c536:	4baa      	ldr	r3, [pc, #680]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	0e1b      	lsrs	r3, r3, #24
 800c53c:	f003 030f 	and.w	r3, r3, #15
 800c540:	e006      	b.n	800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800c542:	4ba7      	ldr	r3, [pc, #668]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c544:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c548:	041b      	lsls	r3, r3, #16
 800c54a:	0e1b      	lsrs	r3, r3, #24
 800c54c:	f003 030f 	and.w	r3, r3, #15
 800c550:	4aa4      	ldr	r2, [pc, #656]	@ (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800c552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c556:	637b      	str	r3, [r7, #52]	@ 0x34
 800c558:	f000 bf1f 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800c55c:	2300      	movs	r3, #0
 800c55e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c560:	f000 bf1b 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800c564:	4b9e      	ldr	r3, [pc, #632]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c56c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c570:	d107      	bne.n	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800c572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c574:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c578:	d103      	bne.n	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800c57a:	4b9b      	ldr	r3, [pc, #620]	@ (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800c57c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c57e:	f000 bf0c 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800c582:	4b97      	ldr	r3, [pc, #604]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c58a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c58e:	d107      	bne.n	800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800c590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c592:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c596:	d103      	bne.n	800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800c598:	4b93      	ldr	r3, [pc, #588]	@ (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800c59a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c59c:	f000 befd 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5a4:	f000 bef9 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800c5a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5ac:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800c5b0:	430b      	orrs	r3, r1
 800c5b2:	d158      	bne.n	800c666 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800c5b4:	4b8a      	ldr	r3, [pc, #552]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c5b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c5ba:	f003 0307 	and.w	r3, r3, #7
 800c5be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c2:	2b04      	cmp	r3, #4
 800c5c4:	d84b      	bhi.n	800c65e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800c5c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800c5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5cc:	0800c605 	.word	0x0800c605
 800c5d0:	0800c5e1 	.word	0x0800c5e1
 800c5d4:	0800c5f3 	.word	0x0800c5f3
 800c5d8:	0800c60f 	.word	0x0800c60f
 800c5dc:	0800c619 	.word	0x0800c619
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7fe ff4f 	bl	800b488 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c5ee:	f000 bed4 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5f2:	f107 030c 	add.w	r3, r7, #12
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7ff f9fa 	bl	800b9f0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c600:	f000 becb 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800c604:	f7fd ff2c 	bl	800a460 <HAL_RCC_GetHCLKFreq>
 800c608:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c60a:	f000 bec6 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c60e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c612:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c614:	f000 bec1 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c618:	4b71      	ldr	r3, [pc, #452]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f003 0320 	and.w	r3, r3, #32
 800c620:	2b20      	cmp	r3, #32
 800c622:	d118      	bne.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c624:	4b6e      	ldr	r3, [pc, #440]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c626:	689b      	ldr	r3, [r3, #8]
 800c628:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d005      	beq.n	800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800c630:	4b6b      	ldr	r3, [pc, #428]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	0e1b      	lsrs	r3, r3, #24
 800c636:	f003 030f 	and.w	r3, r3, #15
 800c63a:	e006      	b.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800c63c:	4b68      	ldr	r3, [pc, #416]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c63e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c642:	041b      	lsls	r3, r3, #16
 800c644:	0e1b      	lsrs	r3, r3, #24
 800c646:	f003 030f 	and.w	r3, r3, #15
 800c64a:	4a66      	ldr	r2, [pc, #408]	@ (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800c64c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c650:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c652:	f000 bea2 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c656:	2300      	movs	r3, #0
 800c658:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c65a:	f000 be9e 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c65e:	2300      	movs	r3, #0
 800c660:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c662:	f000 be9a 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800c666:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c66a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800c66e:	430b      	orrs	r3, r1
 800c670:	d167      	bne.n	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800c672:	4b5b      	ldr	r3, [pc, #364]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c674:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c678:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800c67c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c680:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c684:	d036      	beq.n	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800c686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c688:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c68c:	d855      	bhi.n	800c73a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800c68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c690:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c694:	d029      	beq.n	800c6ea <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800c696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c698:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c69c:	d84d      	bhi.n	800c73a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800c69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6a4:	d013      	beq.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800c6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6ac:	d845      	bhi.n	800c73a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800c6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d015      	beq.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800c6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c6ba:	d13e      	bne.n	800c73a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7fe fee1 	bl	800b488 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6ca:	f000 be66 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6ce:	f107 030c 	add.w	r3, r7, #12
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7ff f98c 	bl	800b9f0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6dc:	f000 be5d 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800c6e0:	f7fd febe 	bl	800a460 <HAL_RCC_GetHCLKFreq>
 800c6e4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c6e6:	f000 be58 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c6ea:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c6ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6f0:	f000 be53 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c6f4:	4b3a      	ldr	r3, [pc, #232]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 0320 	and.w	r3, r3, #32
 800c6fc:	2b20      	cmp	r3, #32
 800c6fe:	d118      	bne.n	800c732 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c700:	4b37      	ldr	r3, [pc, #220]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c702:	689b      	ldr	r3, [r3, #8]
 800c704:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d005      	beq.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800c70c:	4b34      	ldr	r3, [pc, #208]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	0e1b      	lsrs	r3, r3, #24
 800c712:	f003 030f 	and.w	r3, r3, #15
 800c716:	e006      	b.n	800c726 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c718:	4b31      	ldr	r3, [pc, #196]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c71a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c71e:	041b      	lsls	r3, r3, #16
 800c720:	0e1b      	lsrs	r3, r3, #24
 800c722:	f003 030f 	and.w	r3, r3, #15
 800c726:	4a2f      	ldr	r2, [pc, #188]	@ (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800c728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c72c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c72e:	f000 be34 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c732:	2300      	movs	r3, #0
 800c734:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c736:	f000 be30 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c73a:	2300      	movs	r3, #0
 800c73c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c73e:	f000 be2c 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800c742:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c746:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800c74a:	430b      	orrs	r3, r1
 800c74c:	d152      	bne.n	800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800c74e:	4b24      	ldr	r3, [pc, #144]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c754:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c758:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800c75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d104      	bne.n	800c76a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c760:	f7fd fe98 	bl	800a494 <HAL_RCC_GetPCLK1Freq>
 800c764:	6378      	str	r0, [r7, #52]	@ 0x34
 800c766:	f000 be18 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800c76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c76c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c770:	d104      	bne.n	800c77c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c772:	f7fd fd73 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800c776:	6378      	str	r0, [r7, #52]	@ 0x34
 800c778:	f000 be0f 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800c77c:	4b18      	ldr	r3, [pc, #96]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c788:	d107      	bne.n	800c79a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800c78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c78c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c790:	d103      	bne.n	800c79a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800c792:	4b15      	ldr	r3, [pc, #84]	@ (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800c794:	637b      	str	r3, [r7, #52]	@ 0x34
 800c796:	f000 be00 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800c79a:	4b11      	ldr	r3, [pc, #68]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f003 0320 	and.w	r3, r3, #32
 800c7a2:	2b20      	cmp	r3, #32
 800c7a4:	d122      	bne.n	800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800c7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c7ac:	d11e      	bne.n	800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c7ae:	4b0c      	ldr	r3, [pc, #48]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d005      	beq.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800c7ba:	4b09      	ldr	r3, [pc, #36]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	0e1b      	lsrs	r3, r3, #24
 800c7c0:	f003 030f 	and.w	r3, r3, #15
 800c7c4:	e006      	b.n	800c7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800c7c6:	4b06      	ldr	r3, [pc, #24]	@ (800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c7c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c7cc:	041b      	lsls	r3, r3, #16
 800c7ce:	0e1b      	lsrs	r3, r3, #24
 800c7d0:	f003 030f 	and.w	r3, r3, #15
 800c7d4:	4a03      	ldr	r2, [pc, #12]	@ (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800c7d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7da:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7dc:	f000 bddd 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c7e0:	46020c00 	.word	0x46020c00
 800c7e4:	08010bfc 	.word	0x08010bfc
 800c7e8:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7f0:	f000 bdd3 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800c7f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7f8:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800c7fc:	430b      	orrs	r3, r1
 800c7fe:	d14c      	bne.n	800c89a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800c800:	4ba8      	ldr	r3, [pc, #672]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c806:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c80a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800c80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d104      	bne.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c812:	f7fd fe3f 	bl	800a494 <HAL_RCC_GetPCLK1Freq>
 800c816:	6378      	str	r0, [r7, #52]	@ 0x34
 800c818:	f000 bdbf 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800c81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c81e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c822:	d104      	bne.n	800c82e <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c824:	f7fd fd1a 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800c828:	6378      	str	r0, [r7, #52]	@ 0x34
 800c82a:	f000 bdb6 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800c82e:	4b9d      	ldr	r3, [pc, #628]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c83a:	d107      	bne.n	800c84c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800c83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c83e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c842:	d103      	bne.n	800c84c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800c844:	4b98      	ldr	r3, [pc, #608]	@ (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800c846:	637b      	str	r3, [r7, #52]	@ 0x34
 800c848:	f000 bda7 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800c84c:	4b95      	ldr	r3, [pc, #596]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f003 0320 	and.w	r3, r3, #32
 800c854:	2b20      	cmp	r3, #32
 800c856:	d11c      	bne.n	800c892 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800c858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c85a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c85e:	d118      	bne.n	800c892 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c860:	4b90      	ldr	r3, [pc, #576]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d005      	beq.n	800c878 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800c86c:	4b8d      	ldr	r3, [pc, #564]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c86e:	689b      	ldr	r3, [r3, #8]
 800c870:	0e1b      	lsrs	r3, r3, #24
 800c872:	f003 030f 	and.w	r3, r3, #15
 800c876:	e006      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800c878:	4b8a      	ldr	r3, [pc, #552]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c87a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c87e:	041b      	lsls	r3, r3, #16
 800c880:	0e1b      	lsrs	r3, r3, #24
 800c882:	f003 030f 	and.w	r3, r3, #15
 800c886:	4a89      	ldr	r2, [pc, #548]	@ (800caac <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800c888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c88c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c88e:	f000 bd84 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800c892:	2300      	movs	r3, #0
 800c894:	637b      	str	r3, [r7, #52]	@ 0x34
 800c896:	f000 bd80 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800c89a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c89e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800c8a2:	430b      	orrs	r3, r1
 800c8a4:	d158      	bne.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800c8a6:	4b7f      	ldr	r3, [pc, #508]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c8a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c8ac:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c8b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b4:	2bc0      	cmp	r3, #192	@ 0xc0
 800c8b6:	d028      	beq.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800c8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ba:	2bc0      	cmp	r3, #192	@ 0xc0
 800c8bc:	d848      	bhi.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800c8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c0:	2b80      	cmp	r3, #128	@ 0x80
 800c8c2:	d00e      	beq.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800c8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c6:	2b80      	cmp	r3, #128	@ 0x80
 800c8c8:	d842      	bhi.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800c8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d003      	beq.n	800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800c8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d2:	2b40      	cmp	r3, #64	@ 0x40
 800c8d4:	d014      	beq.n	800c900 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800c8d6:	e03b      	b.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800c8d8:	f7fd fe04 	bl	800a4e4 <HAL_RCC_GetPCLK3Freq>
 800c8dc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c8de:	f000 bd5c 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c8e2:	4b70      	ldr	r3, [pc, #448]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c8ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c8ee:	d103      	bne.n	800c8f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800c8f0:	4b6d      	ldr	r3, [pc, #436]	@ (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800c8f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c8f4:	f000 bd51 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8fc:	f000 bd4d 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800c900:	f7fd fcac 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800c904:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c906:	f000 bd48 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c90a:	4b66      	ldr	r3, [pc, #408]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f003 0320 	and.w	r3, r3, #32
 800c912:	2b20      	cmp	r3, #32
 800c914:	d118      	bne.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c916:	4b63      	ldr	r3, [pc, #396]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c918:	689b      	ldr	r3, [r3, #8]
 800c91a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d005      	beq.n	800c92e <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800c922:	4b60      	ldr	r3, [pc, #384]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c924:	689b      	ldr	r3, [r3, #8]
 800c926:	0e1b      	lsrs	r3, r3, #24
 800c928:	f003 030f 	and.w	r3, r3, #15
 800c92c:	e006      	b.n	800c93c <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800c92e:	4b5d      	ldr	r3, [pc, #372]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c930:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c934:	041b      	lsls	r3, r3, #16
 800c936:	0e1b      	lsrs	r3, r3, #24
 800c938:	f003 030f 	and.w	r3, r3, #15
 800c93c:	4a5b      	ldr	r2, [pc, #364]	@ (800caac <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800c93e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c942:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c944:	f000 bd29 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c948:	2300      	movs	r3, #0
 800c94a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c94c:	f000 bd25 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800c950:	2300      	movs	r3, #0
 800c952:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c954:	f000 bd21 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800c958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c95c:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800c960:	430b      	orrs	r3, r1
 800c962:	d14c      	bne.n	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800c964:	4b4f      	ldr	r3, [pc, #316]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c96a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c96e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800c970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c972:	2b00      	cmp	r3, #0
 800c974:	d104      	bne.n	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c976:	f7fd fd8d 	bl	800a494 <HAL_RCC_GetPCLK1Freq>
 800c97a:	6378      	str	r0, [r7, #52]	@ 0x34
 800c97c:	f000 bd0d 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800c980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c982:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c986:	d104      	bne.n	800c992 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c988:	f7fd fc68 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800c98c:	6378      	str	r0, [r7, #52]	@ 0x34
 800c98e:	f000 bd04 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800c992:	4b44      	ldr	r3, [pc, #272]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c99a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c99e:	d107      	bne.n	800c9b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800c9a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c9a6:	d103      	bne.n	800c9b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800c9a8:	4b3f      	ldr	r3, [pc, #252]	@ (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800c9aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9ac:	f000 bcf5 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800c9b0:	4b3c      	ldr	r3, [pc, #240]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f003 0320 	and.w	r3, r3, #32
 800c9b8:	2b20      	cmp	r3, #32
 800c9ba:	d11c      	bne.n	800c9f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800c9bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9be:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c9c2:	d118      	bne.n	800c9f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c9c4:	4b37      	ldr	r3, [pc, #220]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c9c6:	689b      	ldr	r3, [r3, #8]
 800c9c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d005      	beq.n	800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800c9d0:	4b34      	ldr	r3, [pc, #208]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	0e1b      	lsrs	r3, r3, #24
 800c9d6:	f003 030f 	and.w	r3, r3, #15
 800c9da:	e006      	b.n	800c9ea <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800c9dc:	4b31      	ldr	r3, [pc, #196]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c9de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c9e2:	041b      	lsls	r3, r3, #16
 800c9e4:	0e1b      	lsrs	r3, r3, #24
 800c9e6:	f003 030f 	and.w	r3, r3, #15
 800c9ea:	4a30      	ldr	r2, [pc, #192]	@ (800caac <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800c9ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9f2:	f000 bcd2 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9fa:	f000 bcce 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800c9fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca02:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800ca06:	430b      	orrs	r3, r1
 800ca08:	d152      	bne.n	800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800ca0a:	4b26      	ldr	r3, [pc, #152]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ca0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ca10:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800ca14:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800ca16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d104      	bne.n	800ca26 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ca1c:	f7fd fd3a 	bl	800a494 <HAL_RCC_GetPCLK1Freq>
 800ca20:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca22:	f000 bcba 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800ca26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ca2c:	d104      	bne.n	800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ca2e:	f7fd fc15 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800ca32:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca34:	f000 bcb1 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800ca38:	4b1a      	ldr	r3, [pc, #104]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca44:	d107      	bne.n	800ca56 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800ca46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ca4c:	d103      	bne.n	800ca56 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800ca4e:	4b16      	ldr	r3, [pc, #88]	@ (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ca50:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca52:	f000 bca2 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800ca56:	4b13      	ldr	r3, [pc, #76]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f003 0320 	and.w	r3, r3, #32
 800ca5e:	2b20      	cmp	r3, #32
 800ca60:	d11c      	bne.n	800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800ca62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca64:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ca68:	d118      	bne.n	800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ca6a:	4b0e      	ldr	r3, [pc, #56]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ca6c:	689b      	ldr	r3, [r3, #8]
 800ca6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d005      	beq.n	800ca82 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800ca76:	4b0b      	ldr	r3, [pc, #44]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ca78:	689b      	ldr	r3, [r3, #8]
 800ca7a:	0e1b      	lsrs	r3, r3, #24
 800ca7c:	f003 030f 	and.w	r3, r3, #15
 800ca80:	e006      	b.n	800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800ca82:	4b08      	ldr	r3, [pc, #32]	@ (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ca84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ca88:	041b      	lsls	r3, r3, #16
 800ca8a:	0e1b      	lsrs	r3, r3, #24
 800ca8c:	f003 030f 	and.w	r3, r3, #15
 800ca90:	4a06      	ldr	r2, [pc, #24]	@ (800caac <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800ca92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca96:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca98:	f000 bc7f 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800caa0:	f000 bc7b 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800caa4:	46020c00 	.word	0x46020c00
 800caa8:	00f42400 	.word	0x00f42400
 800caac:	08010bfc 	.word	0x08010bfc
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800cab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cab4:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800cab8:	430b      	orrs	r3, r1
 800caba:	d14c      	bne.n	800cb56 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800cabc:	4ba6      	ldr	r3, [pc, #664]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cabe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cac2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800cac6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800cac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d104      	bne.n	800cad8 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cace:	f7fd fce1 	bl	800a494 <HAL_RCC_GetPCLK1Freq>
 800cad2:	6378      	str	r0, [r7, #52]	@ 0x34
 800cad4:	f000 bc61 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800cad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cada:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cade:	d104      	bne.n	800caea <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cae0:	f7fd fbbc 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800cae4:	6378      	str	r0, [r7, #52]	@ 0x34
 800cae6:	f000 bc58 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800caea:	4b9b      	ldr	r3, [pc, #620]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800caf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800caf6:	d107      	bne.n	800cb08 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800caf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cafa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cafe:	d103      	bne.n	800cb08 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800cb00:	4b96      	ldr	r3, [pc, #600]	@ (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800cb02:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb04:	f000 bc49 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800cb08:	4b93      	ldr	r3, [pc, #588]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f003 0320 	and.w	r3, r3, #32
 800cb10:	2b20      	cmp	r3, #32
 800cb12:	d11c      	bne.n	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800cb14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb16:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800cb1a:	d118      	bne.n	800cb4e <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cb1c:	4b8e      	ldr	r3, [pc, #568]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cb1e:	689b      	ldr	r3, [r3, #8]
 800cb20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d005      	beq.n	800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800cb28:	4b8b      	ldr	r3, [pc, #556]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	0e1b      	lsrs	r3, r3, #24
 800cb2e:	f003 030f 	and.w	r3, r3, #15
 800cb32:	e006      	b.n	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800cb34:	4b88      	ldr	r3, [pc, #544]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cb36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cb3a:	041b      	lsls	r3, r3, #16
 800cb3c:	0e1b      	lsrs	r3, r3, #24
 800cb3e:	f003 030f 	and.w	r3, r3, #15
 800cb42:	4a87      	ldr	r2, [pc, #540]	@ (800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800cb44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb48:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb4a:	f000 bc26 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb52:	f000 bc22 	b.w	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800cb56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb5a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800cb5e:	430b      	orrs	r3, r1
 800cb60:	d164      	bne.n	800cc2c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800cb62:	4b7d      	ldr	r3, [pc, #500]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cb64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cb68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cb6c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d120      	bne.n	800cbb6 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cb74:	4b78      	ldr	r3, [pc, #480]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f003 0320 	and.w	r3, r3, #32
 800cb7c:	2b20      	cmp	r3, #32
 800cb7e:	d117      	bne.n	800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cb80:	4b75      	ldr	r3, [pc, #468]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cb82:	689b      	ldr	r3, [r3, #8]
 800cb84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d005      	beq.n	800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800cb8c:	4b72      	ldr	r3, [pc, #456]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cb8e:	689b      	ldr	r3, [r3, #8]
 800cb90:	0e1b      	lsrs	r3, r3, #24
 800cb92:	f003 030f 	and.w	r3, r3, #15
 800cb96:	e006      	b.n	800cba6 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800cb98:	4b6f      	ldr	r3, [pc, #444]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cb9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cb9e:	041b      	lsls	r3, r3, #16
 800cba0:	0e1b      	lsrs	r3, r3, #24
 800cba2:	f003 030f 	and.w	r3, r3, #15
 800cba6:	4a6e      	ldr	r2, [pc, #440]	@ (800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800cba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbac:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbae:	e3f4      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbb4:	e3f1      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800cbb6:	4b68      	ldr	r3, [pc, #416]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cbb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cbbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cbc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cbc4:	d112      	bne.n	800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800cbc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbcc:	d10e      	bne.n	800cbec <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cbce:	4b62      	ldr	r3, [pc, #392]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cbd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cbd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cbd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cbdc:	d102      	bne.n	800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800cbde:	23fa      	movs	r3, #250	@ 0xfa
 800cbe0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cbe2:	e3da      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800cbe4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800cbe8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cbea:	e3d6      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800cbec:	4b5a      	ldr	r3, [pc, #360]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cbf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cbf8:	d106      	bne.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc00:	d102      	bne.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800cc02:	4b56      	ldr	r3, [pc, #344]	@ (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800cc04:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc06:	e3c8      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800cc08:	4b53      	ldr	r3, [pc, #332]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cc0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cc0e:	f003 0302 	and.w	r3, r3, #2
 800cc12:	2b02      	cmp	r3, #2
 800cc14:	d107      	bne.n	800cc26 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800cc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc1c:	d103      	bne.n	800cc26 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800cc1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc22:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc24:	e3b9      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800cc26:	2300      	movs	r3, #0
 800cc28:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc2a:	e3b6      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800cc2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc30:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800cc34:	430b      	orrs	r3, r1
 800cc36:	d164      	bne.n	800cd02 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800cc38:	4b47      	ldr	r3, [pc, #284]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cc3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cc3e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cc42:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800cc44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d120      	bne.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cc4a:	4b43      	ldr	r3, [pc, #268]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f003 0320 	and.w	r3, r3, #32
 800cc52:	2b20      	cmp	r3, #32
 800cc54:	d117      	bne.n	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cc56:	4b40      	ldr	r3, [pc, #256]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cc58:	689b      	ldr	r3, [r3, #8]
 800cc5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d005      	beq.n	800cc6e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800cc62:	4b3d      	ldr	r3, [pc, #244]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cc64:	689b      	ldr	r3, [r3, #8]
 800cc66:	0e1b      	lsrs	r3, r3, #24
 800cc68:	f003 030f 	and.w	r3, r3, #15
 800cc6c:	e006      	b.n	800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800cc6e:	4b3a      	ldr	r3, [pc, #232]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cc70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cc74:	041b      	lsls	r3, r3, #16
 800cc76:	0e1b      	lsrs	r3, r3, #24
 800cc78:	f003 030f 	and.w	r3, r3, #15
 800cc7c:	4a38      	ldr	r2, [pc, #224]	@ (800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800cc7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc82:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc84:	e389      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800cc86:	2300      	movs	r3, #0
 800cc88:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc8a:	e386      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800cc8c:	4b32      	ldr	r3, [pc, #200]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cc8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cc92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cc96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cc9a:	d112      	bne.n	800ccc2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800cc9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cca2:	d10e      	bne.n	800ccc2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cca4:	4b2c      	ldr	r3, [pc, #176]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cca6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ccaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ccae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ccb2:	d102      	bne.n	800ccba <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800ccb4:	23fa      	movs	r3, #250	@ 0xfa
 800ccb6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ccb8:	e36f      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800ccba:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ccbe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ccc0:	e36b      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800ccc2:	4b25      	ldr	r3, [pc, #148]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ccca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ccce:	d106      	bne.n	800ccde <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800ccd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ccd6:	d102      	bne.n	800ccde <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800ccd8:	4b20      	ldr	r3, [pc, #128]	@ (800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800ccda:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccdc:	e35d      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800ccde:	4b1e      	ldr	r3, [pc, #120]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cce4:	f003 0302 	and.w	r3, r3, #2
 800cce8:	2b02      	cmp	r3, #2
 800ccea:	d107      	bne.n	800ccfc <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800ccec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ccf2:	d103      	bne.n	800ccfc <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800ccf4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ccf8:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccfa:	e34e      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd00:	e34b      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800cd02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd06:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800cd0a:	430b      	orrs	r3, r1
 800cd0c:	d14e      	bne.n	800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800cd0e:	4b12      	ldr	r3, [pc, #72]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cd14:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800cd18:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d103      	bne.n	800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cd20:	f7fd fbb8 	bl	800a494 <HAL_RCC_GetPCLK1Freq>
 800cd24:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd26:	e338      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800cd28:	4b0b      	ldr	r3, [pc, #44]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cd2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd36:	d119      	bne.n	800cd6c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800cd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cd3e:	d115      	bne.n	800cd6c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cd40:	4b05      	ldr	r3, [pc, #20]	@ (800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cd46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd4e:	d109      	bne.n	800cd64 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800cd50:	23fa      	movs	r3, #250	@ 0xfa
 800cd52:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cd54:	e321      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cd56:	bf00      	nop
 800cd58:	46020c00 	.word	0x46020c00
 800cd5c:	00f42400 	.word	0x00f42400
 800cd60:	08010bfc 	.word	0x08010bfc
      }
      else
      {
        frequency = LSI_VALUE;
 800cd64:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800cd68:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cd6a:	e316      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800cd6c:	4ba8      	ldr	r3, [pc, #672]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd78:	d106      	bne.n	800cd88 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800cd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd7c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800cd80:	d102      	bne.n	800cd88 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800cd82:	4ba4      	ldr	r3, [pc, #656]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800cd84:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd86:	e308      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800cd88:	4ba1      	ldr	r3, [pc, #644]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cd8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cd8e:	f003 0302 	and.w	r3, r3, #2
 800cd92:	2b02      	cmp	r3, #2
 800cd94:	d107      	bne.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800cd96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd98:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800cd9c:	d103      	bne.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800cd9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cda2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cda4:	e2f9      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800cda6:	2300      	movs	r3, #0
 800cda8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdaa:	e2f6      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800cdac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdb0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800cdb4:	430b      	orrs	r3, r1
 800cdb6:	d12d      	bne.n	800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800cdb8:	4b95      	ldr	r3, [pc, #596]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cdba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cdbe:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800cdc2:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800cdc4:	4b92      	ldr	r3, [pc, #584]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cdcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cdd0:	d105      	bne.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800cdd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d102      	bne.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800cdd8:	4b8e      	ldr	r3, [pc, #568]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800cdda:	637b      	str	r3, [r7, #52]	@ 0x34
 800cddc:	e2dd      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800cdde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cde4:	d107      	bne.n	800cdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cde6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fe fb4c 	bl	800b488 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdf4:	e2d1      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800cdf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cdfc:	d107      	bne.n	800ce0e <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdfe:	f107 0318 	add.w	r3, r7, #24
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7fe fc9a 	bl	800b73c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800ce08:	69bb      	ldr	r3, [r7, #24]
 800ce0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce0c:	e2c5      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce12:	e2c2      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800ce14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce18:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800ce1c:	430b      	orrs	r3, r1
 800ce1e:	d156      	bne.n	800cece <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800ce20:	4b7b      	ldr	r3, [pc, #492]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ce22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ce26:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800ce2a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800ce2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ce32:	d028      	beq.n	800ce86 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800ce34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ce3a:	d845      	bhi.n	800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800ce3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ce42:	d013      	beq.n	800ce6c <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800ce44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ce4a:	d83d      	bhi.n	800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800ce4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d004      	beq.n	800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800ce52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ce58:	d004      	beq.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800ce5a:	e035      	b.n	800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800ce5c:	f7fd fb2e 	bl	800a4bc <HAL_RCC_GetPCLK2Freq>
 800ce60:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ce62:	e29a      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ce64:	f7fd f9fa 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800ce68:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ce6a:	e296      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ce6c:	4b68      	ldr	r3, [pc, #416]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce78:	d102      	bne.n	800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800ce7a:	4b66      	ldr	r3, [pc, #408]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800ce7c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ce7e:	e28c      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ce80:	2300      	movs	r3, #0
 800ce82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce84:	e289      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ce86:	4b62      	ldr	r3, [pc, #392]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f003 0320 	and.w	r3, r3, #32
 800ce8e:	2b20      	cmp	r3, #32
 800ce90:	d117      	bne.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ce92:	4b5f      	ldr	r3, [pc, #380]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ce94:	689b      	ldr	r3, [r3, #8]
 800ce96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d005      	beq.n	800ceaa <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800ce9e:	4b5c      	ldr	r3, [pc, #368]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	0e1b      	lsrs	r3, r3, #24
 800cea4:	f003 030f 	and.w	r3, r3, #15
 800cea8:	e006      	b.n	800ceb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800ceaa:	4b59      	ldr	r3, [pc, #356]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ceac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ceb0:	041b      	lsls	r3, r3, #16
 800ceb2:	0e1b      	lsrs	r3, r3, #24
 800ceb4:	f003 030f 	and.w	r3, r3, #15
 800ceb8:	4a57      	ldr	r2, [pc, #348]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800ceba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cebe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cec0:	e26b      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cec2:	2300      	movs	r3, #0
 800cec4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cec6:	e268      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800cec8:	2300      	movs	r3, #0
 800ceca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cecc:	e265      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800cece:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ced2:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800ced6:	430b      	orrs	r3, r1
 800ced8:	d156      	bne.n	800cf88 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800ceda:	4b4d      	ldr	r3, [pc, #308]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cedc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cee0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cee4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800cee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ceec:	d028      	beq.n	800cf40 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800ceee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cef4:	d845      	bhi.n	800cf82 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800cef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cefc:	d013      	beq.n	800cf26 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800cefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf04:	d83d      	bhi.n	800cf82 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800cf06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d004      	beq.n	800cf16 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800cf0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf12:	d004      	beq.n	800cf1e <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800cf14:	e035      	b.n	800cf82 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800cf16:	f7fd fabd 	bl	800a494 <HAL_RCC_GetPCLK1Freq>
 800cf1a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cf1c:	e23d      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800cf1e:	f7fd f99d 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800cf22:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cf24:	e239      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cf26:	4b3a      	ldr	r3, [pc, #232]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf32:	d102      	bne.n	800cf3a <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800cf34:	4b37      	ldr	r3, [pc, #220]	@ (800d014 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800cf36:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cf38:	e22f      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf3e:	e22c      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cf40:	4b33      	ldr	r3, [pc, #204]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f003 0320 	and.w	r3, r3, #32
 800cf48:	2b20      	cmp	r3, #32
 800cf4a:	d117      	bne.n	800cf7c <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cf4c:	4b30      	ldr	r3, [pc, #192]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d005      	beq.n	800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800cf58:	4b2d      	ldr	r3, [pc, #180]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	0e1b      	lsrs	r3, r3, #24
 800cf5e:	f003 030f 	and.w	r3, r3, #15
 800cf62:	e006      	b.n	800cf72 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800cf64:	4b2a      	ldr	r3, [pc, #168]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cf66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cf6a:	041b      	lsls	r3, r3, #16
 800cf6c:	0e1b      	lsrs	r3, r3, #24
 800cf6e:	f003 030f 	and.w	r3, r3, #15
 800cf72:	4a29      	ldr	r2, [pc, #164]	@ (800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800cf74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf78:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cf7a:	e20e      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf80:	e20b      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800cf82:	2300      	movs	r3, #0
 800cf84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf86:	e208      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800cf88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf8c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800cf90:	430b      	orrs	r3, r1
 800cf92:	d17c      	bne.n	800d08e <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800cf94:	4b1e      	ldr	r3, [pc, #120]	@ (800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cf96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cf9a:	f003 0318 	and.w	r3, r3, #24
 800cf9e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800cfa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfa2:	2b18      	cmp	r3, #24
 800cfa4:	d870      	bhi.n	800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800cfa6:	a201      	add	r2, pc, #4	@ (adr r2, 800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800cfa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfac:	0800d01d 	.word	0x0800d01d
 800cfb0:	0800d089 	.word	0x0800d089
 800cfb4:	0800d089 	.word	0x0800d089
 800cfb8:	0800d089 	.word	0x0800d089
 800cfbc:	0800d089 	.word	0x0800d089
 800cfc0:	0800d089 	.word	0x0800d089
 800cfc4:	0800d089 	.word	0x0800d089
 800cfc8:	0800d089 	.word	0x0800d089
 800cfcc:	0800d025 	.word	0x0800d025
 800cfd0:	0800d089 	.word	0x0800d089
 800cfd4:	0800d089 	.word	0x0800d089
 800cfd8:	0800d089 	.word	0x0800d089
 800cfdc:	0800d089 	.word	0x0800d089
 800cfe0:	0800d089 	.word	0x0800d089
 800cfe4:	0800d089 	.word	0x0800d089
 800cfe8:	0800d089 	.word	0x0800d089
 800cfec:	0800d02d 	.word	0x0800d02d
 800cff0:	0800d089 	.word	0x0800d089
 800cff4:	0800d089 	.word	0x0800d089
 800cff8:	0800d089 	.word	0x0800d089
 800cffc:	0800d089 	.word	0x0800d089
 800d000:	0800d089 	.word	0x0800d089
 800d004:	0800d089 	.word	0x0800d089
 800d008:	0800d089 	.word	0x0800d089
 800d00c:	0800d047 	.word	0x0800d047
 800d010:	46020c00 	.word	0x46020c00
 800d014:	00f42400 	.word	0x00f42400
 800d018:	08010bfc 	.word	0x08010bfc
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800d01c:	f7fd fa62 	bl	800a4e4 <HAL_RCC_GetPCLK3Freq>
 800d020:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d022:	e1ba      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d024:	f7fd f91a 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800d028:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d02a:	e1b6      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d02c:	4b9f      	ldr	r3, [pc, #636]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d034:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d038:	d102      	bne.n	800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800d03a:	4b9d      	ldr	r3, [pc, #628]	@ (800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d03c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d03e:	e1ac      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d040:	2300      	movs	r3, #0
 800d042:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d044:	e1a9      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d046:	4b99      	ldr	r3, [pc, #612]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f003 0320 	and.w	r3, r3, #32
 800d04e:	2b20      	cmp	r3, #32
 800d050:	d117      	bne.n	800d082 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d052:	4b96      	ldr	r3, [pc, #600]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d054:	689b      	ldr	r3, [r3, #8]
 800d056:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d005      	beq.n	800d06a <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800d05e:	4b93      	ldr	r3, [pc, #588]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d060:	689b      	ldr	r3, [r3, #8]
 800d062:	0e1b      	lsrs	r3, r3, #24
 800d064:	f003 030f 	and.w	r3, r3, #15
 800d068:	e006      	b.n	800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800d06a:	4b90      	ldr	r3, [pc, #576]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d06c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d070:	041b      	lsls	r3, r3, #16
 800d072:	0e1b      	lsrs	r3, r3, #24
 800d074:	f003 030f 	and.w	r3, r3, #15
 800d078:	4a8e      	ldr	r2, [pc, #568]	@ (800d2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d07a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d07e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d080:	e18b      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d082:	2300      	movs	r3, #0
 800d084:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d086:	e188      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d088:	2300      	movs	r3, #0
 800d08a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d08c:	e185      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800d08e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d092:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800d096:	430b      	orrs	r3, r1
 800d098:	d155      	bne.n	800d146 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800d09a:	4b84      	ldr	r3, [pc, #528]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d09c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d0a0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d0a4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d0ac:	d013      	beq.n	800d0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800d0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d0b4:	d844      	bhi.n	800d140 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d0bc:	d013      	beq.n	800d0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800d0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d0c4:	d83c      	bhi.n	800d140 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d014      	beq.n	800d0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800d0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d0d2:	d014      	beq.n	800d0fe <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800d0d4:	e034      	b.n	800d140 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0d6:	f107 0318 	add.w	r3, r7, #24
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7fe fb2e 	bl	800b73c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d0e0:	69fb      	ldr	r3, [r7, #28]
 800d0e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d0e4:	e159      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d0e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7fe f9cc 	bl	800b488 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d0f4:	e151      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d0f6:	f7fd f8b1 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800d0fa:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d0fc:	e14d      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d0fe:	4b6b      	ldr	r3, [pc, #428]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f003 0320 	and.w	r3, r3, #32
 800d106:	2b20      	cmp	r3, #32
 800d108:	d117      	bne.n	800d13a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d10a:	4b68      	ldr	r3, [pc, #416]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d10c:	689b      	ldr	r3, [r3, #8]
 800d10e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d112:	2b00      	cmp	r3, #0
 800d114:	d005      	beq.n	800d122 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800d116:	4b65      	ldr	r3, [pc, #404]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d118:	689b      	ldr	r3, [r3, #8]
 800d11a:	0e1b      	lsrs	r3, r3, #24
 800d11c:	f003 030f 	and.w	r3, r3, #15
 800d120:	e006      	b.n	800d130 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800d122:	4b62      	ldr	r3, [pc, #392]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d124:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d128:	041b      	lsls	r3, r3, #16
 800d12a:	0e1b      	lsrs	r3, r3, #24
 800d12c:	f003 030f 	and.w	r3, r3, #15
 800d130:	4a60      	ldr	r2, [pc, #384]	@ (800d2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d136:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d138:	e12f      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d13a:	2300      	movs	r3, #0
 800d13c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d13e:	e12c      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d140:	2300      	movs	r3, #0
 800d142:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d144:	e129      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800d146:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d14a:	1e59      	subs	r1, r3, #1
 800d14c:	ea52 0301 	orrs.w	r3, r2, r1
 800d150:	d13c      	bne.n	800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800d152:	4b56      	ldr	r3, [pc, #344]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d154:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d158:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800d15c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d160:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d164:	d027      	beq.n	800d1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800d166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d168:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d16c:	d82b      	bhi.n	800d1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d170:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d174:	d017      	beq.n	800d1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800d176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d178:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d17c:	d823      	bhi.n	800d1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d180:	2b00      	cmp	r3, #0
 800d182:	d004      	beq.n	800d18e <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800d184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d186:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d18a:	d004      	beq.n	800d196 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800d18c:	e01b      	b.n	800d1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d18e:	f7fd f865 	bl	800a25c <HAL_RCC_GetSysClockFreq>
 800d192:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d194:	e101      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7fe f974 	bl	800b488 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1a4:	e0f9      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1a6:	f107 0318 	add.w	r3, r7, #24
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7fe fac6 	bl	800b73c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1b4:	e0f1      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1b6:	f107 030c 	add.w	r3, r7, #12
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7fe fc18 	bl	800b9f0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1c4:	e0e9      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1ca:	e0e6      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800d1cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1d0:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800d1d4:	430b      	orrs	r3, r1
 800d1d6:	d131      	bne.n	800d23c <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800d1d8:	4b34      	ldr	r3, [pc, #208]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d1da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d1de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d1e2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800d1e4:	4b31      	ldr	r3, [pc, #196]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d1e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d1ea:	f003 0302 	and.w	r3, r3, #2
 800d1ee:	2b02      	cmp	r3, #2
 800d1f0:	d106      	bne.n	800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800d1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d103      	bne.n	800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800d1f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1fe:	e0cc      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800d200:	4b2a      	ldr	r3, [pc, #168]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d206:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d20a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d20e:	d112      	bne.n	800d236 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800d210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d212:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d216:	d10e      	bne.n	800d236 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d218:	4b24      	ldr	r3, [pc, #144]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d21a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d21e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d222:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d226:	d102      	bne.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800d228:	23fa      	movs	r3, #250	@ 0xfa
 800d22a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d22c:	e0b5      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d22e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d232:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d234:	e0b1      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800d236:	2300      	movs	r3, #0
 800d238:	637b      	str	r3, [r7, #52]	@ 0x34
 800d23a:	e0ae      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800d23c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d240:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d244:	430b      	orrs	r3, r1
 800d246:	d13b      	bne.n	800d2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800d248:	4b18      	ldr	r3, [pc, #96]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d24a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d24e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d252:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800d254:	4b15      	ldr	r3, [pc, #84]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d25c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d260:	d105      	bne.n	800d26e <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800d262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d264:	2b00      	cmp	r3, #0
 800d266:	d102      	bne.n	800d26e <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800d268:	4b13      	ldr	r3, [pc, #76]	@ (800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800d26a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d26c:	e095      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800d26e:	4b0f      	ldr	r3, [pc, #60]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d276:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d27a:	d106      	bne.n	800d28a <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800d27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d27e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d282:	d102      	bne.n	800d28a <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800d284:	4b0d      	ldr	r3, [pc, #52]	@ (800d2bc <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800d286:	637b      	str	r3, [r7, #52]	@ 0x34
 800d288:	e087      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800d28a:	4b08      	ldr	r3, [pc, #32]	@ (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d296:	d106      	bne.n	800d2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800d298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d29e:	d102      	bne.n	800d2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800d2a0:	4b03      	ldr	r3, [pc, #12]	@ (800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d2a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2a4:	e079      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2aa:	e076      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d2ac:	46020c00 	.word	0x46020c00
 800d2b0:	00f42400 	.word	0x00f42400
 800d2b4:	08010bfc 	.word	0x08010bfc
 800d2b8:	02dc6c00 	.word	0x02dc6c00
 800d2bc:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800d2c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2c4:	1e99      	subs	r1, r3, #2
 800d2c6:	ea52 0301 	orrs.w	r3, r2, r1
 800d2ca:	d120      	bne.n	800d30e <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800d2cc:	4b35      	ldr	r3, [pc, #212]	@ (800d3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d2ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d2d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d2d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d004      	beq.n	800d2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800d2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d2e4:	d008      	beq.n	800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800d2e6:	e00f      	b.n	800d308 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2e8:	f107 030c 	add.w	r3, r7, #12
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7fe fb7f 	bl	800b9f0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2f6:	e050      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2f8:	f107 0318 	add.w	r3, r7, #24
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7fe fa1d 	bl	800b73c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800d302:	6a3b      	ldr	r3, [r7, #32]
 800d304:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d306:	e048      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d308:	2300      	movs	r3, #0
 800d30a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d30c:	e045      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800d30e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d312:	f1a3 0108 	sub.w	r1, r3, #8
 800d316:	ea52 0301 	orrs.w	r3, r2, r1
 800d31a:	d13c      	bne.n	800d396 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800d31c:	4b21      	ldr	r3, [pc, #132]	@ (800d3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d31e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d322:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800d326:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800d328:	4b1e      	ldr	r3, [pc, #120]	@ (800d3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d330:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d334:	d105      	bne.n	800d342 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800d336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d102      	bne.n	800d342 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800d33c:	4b1a      	ldr	r3, [pc, #104]	@ (800d3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800d33e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d340:	e02b      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800d342:	4b18      	ldr	r3, [pc, #96]	@ (800d3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d34a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d34e:	d106      	bne.n	800d35e <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800d350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d352:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d356:	d102      	bne.n	800d35e <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800d358:	4b14      	ldr	r3, [pc, #80]	@ (800d3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800d35a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d35c:	e01d      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800d35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d364:	d107      	bne.n	800d376 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d366:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7fe f88c 	bl	800b488 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800d370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d372:	637b      	str	r3, [r7, #52]	@ 0x34
 800d374:	e011      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800d376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d378:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800d37c:	d108      	bne.n	800d390 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d37e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d382:	4618      	mov	r0, r3
 800d384:	f7fe f880 	bl	800b488 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800d388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d38a:	085b      	lsrs	r3, r3, #1
 800d38c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d38e:	e004      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800d390:	2300      	movs	r3, #0
 800d392:	637b      	str	r3, [r7, #52]	@ 0x34
 800d394:	e001      	b.n	800d39a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800d396:	2300      	movs	r3, #0
 800d398:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800d39a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3738      	adds	r7, #56	@ 0x38
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	46020c00 	.word	0x46020c00
 800d3a8:	00f42400 	.word	0x00f42400
 800d3ac:	007a1200 	.word	0x007a1200

0800d3b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b084      	sub	sp, #16
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800d3b8:	4b47      	ldr	r3, [pc, #284]	@ (800d4d8 <RCCEx_PLL2_Config+0x128>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4a46      	ldr	r2, [pc, #280]	@ (800d4d8 <RCCEx_PLL2_Config+0x128>)
 800d3be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d3c2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d3c4:	f7f5 fb12 	bl	80029ec <HAL_GetTick>
 800d3c8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d3ca:	e008      	b.n	800d3de <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d3cc:	f7f5 fb0e 	bl	80029ec <HAL_GetTick>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	1ad3      	subs	r3, r2, r3
 800d3d6:	2b02      	cmp	r3, #2
 800d3d8:	d901      	bls.n	800d3de <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d3da:	2303      	movs	r3, #3
 800d3dc:	e077      	b.n	800d4ce <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d3de:	4b3e      	ldr	r3, [pc, #248]	@ (800d4d8 <RCCEx_PLL2_Config+0x128>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d1f0      	bne.n	800d3cc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800d3ea:	4b3b      	ldr	r3, [pc, #236]	@ (800d4d8 <RCCEx_PLL2_Config+0x128>)
 800d3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3ee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800d3f2:	f023 0303 	bic.w	r3, r3, #3
 800d3f6:	687a      	ldr	r2, [r7, #4]
 800d3f8:	6811      	ldr	r1, [r2, #0]
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	6852      	ldr	r2, [r2, #4]
 800d3fe:	3a01      	subs	r2, #1
 800d400:	0212      	lsls	r2, r2, #8
 800d402:	430a      	orrs	r2, r1
 800d404:	4934      	ldr	r1, [pc, #208]	@ (800d4d8 <RCCEx_PLL2_Config+0x128>)
 800d406:	4313      	orrs	r3, r2
 800d408:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800d40a:	4b33      	ldr	r3, [pc, #204]	@ (800d4d8 <RCCEx_PLL2_Config+0x128>)
 800d40c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d40e:	4b33      	ldr	r3, [pc, #204]	@ (800d4dc <RCCEx_PLL2_Config+0x12c>)
 800d410:	4013      	ands	r3, r2
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	6892      	ldr	r2, [r2, #8]
 800d416:	3a01      	subs	r2, #1
 800d418:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800d41c:	687a      	ldr	r2, [r7, #4]
 800d41e:	68d2      	ldr	r2, [r2, #12]
 800d420:	3a01      	subs	r2, #1
 800d422:	0252      	lsls	r2, r2, #9
 800d424:	b292      	uxth	r2, r2
 800d426:	4311      	orrs	r1, r2
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	6912      	ldr	r2, [r2, #16]
 800d42c:	3a01      	subs	r2, #1
 800d42e:	0412      	lsls	r2, r2, #16
 800d430:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800d434:	4311      	orrs	r1, r2
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	6952      	ldr	r2, [r2, #20]
 800d43a:	3a01      	subs	r2, #1
 800d43c:	0612      	lsls	r2, r2, #24
 800d43e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800d442:	430a      	orrs	r2, r1
 800d444:	4924      	ldr	r1, [pc, #144]	@ (800d4d8 <RCCEx_PLL2_Config+0x128>)
 800d446:	4313      	orrs	r3, r2
 800d448:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800d44a:	4b23      	ldr	r3, [pc, #140]	@ (800d4d8 <RCCEx_PLL2_Config+0x128>)
 800d44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d44e:	f023 020c 	bic.w	r2, r3, #12
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	699b      	ldr	r3, [r3, #24]
 800d456:	4920      	ldr	r1, [pc, #128]	@ (800d4d8 <RCCEx_PLL2_Config+0x128>)
 800d458:	4313      	orrs	r3, r2
 800d45a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800d45c:	4b1e      	ldr	r3, [pc, #120]	@ (800d4d8 <RCCEx_PLL2_Config+0x128>)
 800d45e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6a1b      	ldr	r3, [r3, #32]
 800d464:	491c      	ldr	r1, [pc, #112]	@ (800d4d8 <RCCEx_PLL2_Config+0x128>)
 800d466:	4313      	orrs	r3, r2
 800d468:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800d46a:	4b1b      	ldr	r3, [pc, #108]	@ (800d4d8 <RCCEx_PLL2_Config+0x128>)
 800d46c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d46e:	4a1a      	ldr	r2, [pc, #104]	@ (800d4d8 <RCCEx_PLL2_Config+0x128>)
 800d470:	f023 0310 	bic.w	r3, r3, #16
 800d474:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d476:	4b18      	ldr	r3, [pc, #96]	@ (800d4d8 <RCCEx_PLL2_Config+0x128>)
 800d478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d47a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d47e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	69d2      	ldr	r2, [r2, #28]
 800d486:	00d2      	lsls	r2, r2, #3
 800d488:	4913      	ldr	r1, [pc, #76]	@ (800d4d8 <RCCEx_PLL2_Config+0x128>)
 800d48a:	4313      	orrs	r3, r2
 800d48c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800d48e:	4b12      	ldr	r3, [pc, #72]	@ (800d4d8 <RCCEx_PLL2_Config+0x128>)
 800d490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d492:	4a11      	ldr	r2, [pc, #68]	@ (800d4d8 <RCCEx_PLL2_Config+0x128>)
 800d494:	f043 0310 	orr.w	r3, r3, #16
 800d498:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800d49a:	4b0f      	ldr	r3, [pc, #60]	@ (800d4d8 <RCCEx_PLL2_Config+0x128>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	4a0e      	ldr	r2, [pc, #56]	@ (800d4d8 <RCCEx_PLL2_Config+0x128>)
 800d4a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d4a4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d4a6:	f7f5 faa1 	bl	80029ec <HAL_GetTick>
 800d4aa:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d4ac:	e008      	b.n	800d4c0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d4ae:	f7f5 fa9d 	bl	80029ec <HAL_GetTick>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	1ad3      	subs	r3, r2, r3
 800d4b8:	2b02      	cmp	r3, #2
 800d4ba:	d901      	bls.n	800d4c0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800d4bc:	2303      	movs	r3, #3
 800d4be:	e006      	b.n	800d4ce <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d4c0:	4b05      	ldr	r3, [pc, #20]	@ (800d4d8 <RCCEx_PLL2_Config+0x128>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d0f0      	beq.n	800d4ae <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800d4cc:	2300      	movs	r3, #0

}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3710      	adds	r7, #16
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	46020c00 	.word	0x46020c00
 800d4dc:	80800000 	.word	0x80800000

0800d4e0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b084      	sub	sp, #16
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800d4e8:	4b47      	ldr	r3, [pc, #284]	@ (800d608 <RCCEx_PLL3_Config+0x128>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4a46      	ldr	r2, [pc, #280]	@ (800d608 <RCCEx_PLL3_Config+0x128>)
 800d4ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d4f2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d4f4:	f7f5 fa7a 	bl	80029ec <HAL_GetTick>
 800d4f8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d4fa:	e008      	b.n	800d50e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d4fc:	f7f5 fa76 	bl	80029ec <HAL_GetTick>
 800d500:	4602      	mov	r2, r0
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	1ad3      	subs	r3, r2, r3
 800d506:	2b02      	cmp	r3, #2
 800d508:	d901      	bls.n	800d50e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d50a:	2303      	movs	r3, #3
 800d50c:	e077      	b.n	800d5fe <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d50e:	4b3e      	ldr	r3, [pc, #248]	@ (800d608 <RCCEx_PLL3_Config+0x128>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d516:	2b00      	cmp	r3, #0
 800d518:	d1f0      	bne.n	800d4fc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800d51a:	4b3b      	ldr	r3, [pc, #236]	@ (800d608 <RCCEx_PLL3_Config+0x128>)
 800d51c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d51e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800d522:	f023 0303 	bic.w	r3, r3, #3
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	6811      	ldr	r1, [r2, #0]
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	6852      	ldr	r2, [r2, #4]
 800d52e:	3a01      	subs	r2, #1
 800d530:	0212      	lsls	r2, r2, #8
 800d532:	430a      	orrs	r2, r1
 800d534:	4934      	ldr	r1, [pc, #208]	@ (800d608 <RCCEx_PLL3_Config+0x128>)
 800d536:	4313      	orrs	r3, r2
 800d538:	630b      	str	r3, [r1, #48]	@ 0x30
 800d53a:	4b33      	ldr	r3, [pc, #204]	@ (800d608 <RCCEx_PLL3_Config+0x128>)
 800d53c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d53e:	4b33      	ldr	r3, [pc, #204]	@ (800d60c <RCCEx_PLL3_Config+0x12c>)
 800d540:	4013      	ands	r3, r2
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	6892      	ldr	r2, [r2, #8]
 800d546:	3a01      	subs	r2, #1
 800d548:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	68d2      	ldr	r2, [r2, #12]
 800d550:	3a01      	subs	r2, #1
 800d552:	0252      	lsls	r2, r2, #9
 800d554:	b292      	uxth	r2, r2
 800d556:	4311      	orrs	r1, r2
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	6912      	ldr	r2, [r2, #16]
 800d55c:	3a01      	subs	r2, #1
 800d55e:	0412      	lsls	r2, r2, #16
 800d560:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800d564:	4311      	orrs	r1, r2
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	6952      	ldr	r2, [r2, #20]
 800d56a:	3a01      	subs	r2, #1
 800d56c:	0612      	lsls	r2, r2, #24
 800d56e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800d572:	430a      	orrs	r2, r1
 800d574:	4924      	ldr	r1, [pc, #144]	@ (800d608 <RCCEx_PLL3_Config+0x128>)
 800d576:	4313      	orrs	r3, r2
 800d578:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800d57a:	4b23      	ldr	r3, [pc, #140]	@ (800d608 <RCCEx_PLL3_Config+0x128>)
 800d57c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d57e:	f023 020c 	bic.w	r2, r3, #12
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	699b      	ldr	r3, [r3, #24]
 800d586:	4920      	ldr	r1, [pc, #128]	@ (800d608 <RCCEx_PLL3_Config+0x128>)
 800d588:	4313      	orrs	r3, r2
 800d58a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800d58c:	4b1e      	ldr	r3, [pc, #120]	@ (800d608 <RCCEx_PLL3_Config+0x128>)
 800d58e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6a1b      	ldr	r3, [r3, #32]
 800d594:	491c      	ldr	r1, [pc, #112]	@ (800d608 <RCCEx_PLL3_Config+0x128>)
 800d596:	4313      	orrs	r3, r2
 800d598:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800d59a:	4b1b      	ldr	r3, [pc, #108]	@ (800d608 <RCCEx_PLL3_Config+0x128>)
 800d59c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d59e:	4a1a      	ldr	r2, [pc, #104]	@ (800d608 <RCCEx_PLL3_Config+0x128>)
 800d5a0:	f023 0310 	bic.w	r3, r3, #16
 800d5a4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d5a6:	4b18      	ldr	r3, [pc, #96]	@ (800d608 <RCCEx_PLL3_Config+0x128>)
 800d5a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d5aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d5ae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	69d2      	ldr	r2, [r2, #28]
 800d5b6:	00d2      	lsls	r2, r2, #3
 800d5b8:	4913      	ldr	r1, [pc, #76]	@ (800d608 <RCCEx_PLL3_Config+0x128>)
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800d5be:	4b12      	ldr	r3, [pc, #72]	@ (800d608 <RCCEx_PLL3_Config+0x128>)
 800d5c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5c2:	4a11      	ldr	r2, [pc, #68]	@ (800d608 <RCCEx_PLL3_Config+0x128>)
 800d5c4:	f043 0310 	orr.w	r3, r3, #16
 800d5c8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800d5ca:	4b0f      	ldr	r3, [pc, #60]	@ (800d608 <RCCEx_PLL3_Config+0x128>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	4a0e      	ldr	r2, [pc, #56]	@ (800d608 <RCCEx_PLL3_Config+0x128>)
 800d5d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d5d4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d5d6:	f7f5 fa09 	bl	80029ec <HAL_GetTick>
 800d5da:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d5dc:	e008      	b.n	800d5f0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d5de:	f7f5 fa05 	bl	80029ec <HAL_GetTick>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	1ad3      	subs	r3, r2, r3
 800d5e8:	2b02      	cmp	r3, #2
 800d5ea:	d901      	bls.n	800d5f0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800d5ec:	2303      	movs	r3, #3
 800d5ee:	e006      	b.n	800d5fe <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d5f0:	4b05      	ldr	r3, [pc, #20]	@ (800d608 <RCCEx_PLL3_Config+0x128>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d0f0      	beq.n	800d5de <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800d5fc:	2300      	movs	r3, #0
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3710      	adds	r7, #16
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	46020c00 	.word	0x46020c00
 800d60c:	80800000 	.word	0x80800000

0800d610 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d618:	2301      	movs	r3, #1
 800d61a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d071      	beq.n	800d706 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d106      	bne.n	800d63c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2200      	movs	r2, #0
 800d632:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f7f4 fcb4 	bl	8001fa4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2202      	movs	r2, #2
 800d640:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d644:	4b32      	ldr	r3, [pc, #200]	@ (800d710 <HAL_RTC_Init+0x100>)
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	f003 0310 	and.w	r3, r3, #16
 800d64c:	2b10      	cmp	r3, #16
 800d64e:	d051      	beq.n	800d6f4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d650:	4b2f      	ldr	r3, [pc, #188]	@ (800d710 <HAL_RTC_Init+0x100>)
 800d652:	22ca      	movs	r2, #202	@ 0xca
 800d654:	625a      	str	r2, [r3, #36]	@ 0x24
 800d656:	4b2e      	ldr	r3, [pc, #184]	@ (800d710 <HAL_RTC_Init+0x100>)
 800d658:	2253      	movs	r2, #83	@ 0x53
 800d65a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f000 f88b 	bl	800d778 <RTC_EnterInitMode>
 800d662:	4603      	mov	r3, r0
 800d664:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d666:	7bfb      	ldrb	r3, [r7, #15]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d13f      	bne.n	800d6ec <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800d66c:	4b28      	ldr	r3, [pc, #160]	@ (800d710 <HAL_RTC_Init+0x100>)
 800d66e:	699b      	ldr	r3, [r3, #24]
 800d670:	4a27      	ldr	r2, [pc, #156]	@ (800d710 <HAL_RTC_Init+0x100>)
 800d672:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800d676:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d67a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800d67c:	4b24      	ldr	r3, [pc, #144]	@ (800d710 <HAL_RTC_Init+0x100>)
 800d67e:	699a      	ldr	r2, [r3, #24]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6859      	ldr	r1, [r3, #4]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	691b      	ldr	r3, [r3, #16]
 800d688:	4319      	orrs	r1, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	699b      	ldr	r3, [r3, #24]
 800d68e:	430b      	orrs	r3, r1
 800d690:	491f      	ldr	r1, [pc, #124]	@ (800d710 <HAL_RTC_Init+0x100>)
 800d692:	4313      	orrs	r3, r2
 800d694:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	68da      	ldr	r2, [r3, #12]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	689b      	ldr	r3, [r3, #8]
 800d69e:	041b      	lsls	r3, r3, #16
 800d6a0:	491b      	ldr	r1, [pc, #108]	@ (800d710 <HAL_RTC_Init+0x100>)
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800d6a6:	4b1a      	ldr	r3, [pc, #104]	@ (800d710 <HAL_RTC_Init+0x100>)
 800d6a8:	68db      	ldr	r3, [r3, #12]
 800d6aa:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6b6:	430b      	orrs	r3, r1
 800d6b8:	4915      	ldr	r1, [pc, #84]	@ (800d710 <HAL_RTC_Init+0x100>)
 800d6ba:	4313      	orrs	r3, r2
 800d6bc:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 f896 	bl	800d7f0 <RTC_ExitInitMode>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800d6c8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d10e      	bne.n	800d6ec <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800d6ce:	4b10      	ldr	r3, [pc, #64]	@ (800d710 <HAL_RTC_Init+0x100>)
 800d6d0:	699b      	ldr	r3, [r3, #24]
 800d6d2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6a19      	ldr	r1, [r3, #32]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	69db      	ldr	r3, [r3, #28]
 800d6de:	4319      	orrs	r1, r3
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	695b      	ldr	r3, [r3, #20]
 800d6e4:	430b      	orrs	r3, r1
 800d6e6:	490a      	ldr	r1, [pc, #40]	@ (800d710 <HAL_RTC_Init+0x100>)
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d6ec:	4b08      	ldr	r3, [pc, #32]	@ (800d710 <HAL_RTC_Init+0x100>)
 800d6ee:	22ff      	movs	r2, #255	@ 0xff
 800d6f0:	625a      	str	r2, [r3, #36]	@ 0x24
 800d6f2:	e001      	b.n	800d6f8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d6f8:	7bfb      	ldrb	r3, [r7, #15]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d103      	bne.n	800d706 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2201      	movs	r2, #1
 800d702:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800d706:	7bfb      	ldrb	r3, [r7, #15]
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3710      	adds	r7, #16
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}
 800d710:	46007800 	.word	0x46007800

0800d714 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800d71c:	4b15      	ldr	r3, [pc, #84]	@ (800d774 <HAL_RTC_WaitForSynchro+0x60>)
 800d71e:	68db      	ldr	r3, [r3, #12]
 800d720:	4a14      	ldr	r2, [pc, #80]	@ (800d774 <HAL_RTC_WaitForSynchro+0x60>)
 800d722:	f023 0320 	bic.w	r3, r3, #32
 800d726:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800d728:	f7f5 f960 	bl	80029ec <HAL_GetTick>
 800d72c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800d72e:	e013      	b.n	800d758 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d730:	f7f5 f95c 	bl	80029ec <HAL_GetTick>
 800d734:	4602      	mov	r2, r0
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d73e:	d90b      	bls.n	800d758 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800d740:	4b0c      	ldr	r3, [pc, #48]	@ (800d774 <HAL_RTC_WaitForSynchro+0x60>)
 800d742:	68db      	ldr	r3, [r3, #12]
 800d744:	f003 0320 	and.w	r3, r3, #32
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10c      	bne.n	800d766 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2203      	movs	r2, #3
 800d750:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800d754:	2303      	movs	r3, #3
 800d756:	e008      	b.n	800d76a <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800d758:	4b06      	ldr	r3, [pc, #24]	@ (800d774 <HAL_RTC_WaitForSynchro+0x60>)
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	f003 0320 	and.w	r3, r3, #32
 800d760:	2b00      	cmp	r3, #0
 800d762:	d0e5      	beq.n	800d730 <HAL_RTC_WaitForSynchro+0x1c>
 800d764:	e000      	b.n	800d768 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800d766:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800d768:	2300      	movs	r3, #0
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3710      	adds	r7, #16
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	46007800 	.word	0x46007800

0800d778 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b084      	sub	sp, #16
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d780:	2300      	movs	r3, #0
 800d782:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800d784:	4b19      	ldr	r3, [pc, #100]	@ (800d7ec <RTC_EnterInitMode+0x74>)
 800d786:	68db      	ldr	r3, [r3, #12]
 800d788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d128      	bne.n	800d7e2 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d790:	4b16      	ldr	r3, [pc, #88]	@ (800d7ec <RTC_EnterInitMode+0x74>)
 800d792:	68db      	ldr	r3, [r3, #12]
 800d794:	4a15      	ldr	r2, [pc, #84]	@ (800d7ec <RTC_EnterInitMode+0x74>)
 800d796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d79a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800d79c:	f7f5 f926 	bl	80029ec <HAL_GetTick>
 800d7a0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d7a2:	e013      	b.n	800d7cc <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d7a4:	f7f5 f922 	bl	80029ec <HAL_GetTick>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	1ad3      	subs	r3, r2, r3
 800d7ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d7b2:	d90b      	bls.n	800d7cc <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800d7b4:	4b0d      	ldr	r3, [pc, #52]	@ (800d7ec <RTC_EnterInitMode+0x74>)
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d10f      	bne.n	800d7e0 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800d7c0:	2303      	movs	r3, #3
 800d7c2:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2203      	movs	r2, #3
 800d7c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d7cc:	4b07      	ldr	r3, [pc, #28]	@ (800d7ec <RTC_EnterInitMode+0x74>)
 800d7ce:	68db      	ldr	r3, [r3, #12]
 800d7d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d104      	bne.n	800d7e2 <RTC_EnterInitMode+0x6a>
 800d7d8:	7bfb      	ldrb	r3, [r7, #15]
 800d7da:	2b03      	cmp	r3, #3
 800d7dc:	d1e2      	bne.n	800d7a4 <RTC_EnterInitMode+0x2c>
 800d7de:	e000      	b.n	800d7e2 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800d7e0:	bf00      	nop
        }
      }
    }
  }

  return status;
 800d7e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3710      	adds	r7, #16
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	46007800 	.word	0x46007800

0800d7f0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d7fc:	4b1a      	ldr	r3, [pc, #104]	@ (800d868 <RTC_ExitInitMode+0x78>)
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	4a19      	ldr	r2, [pc, #100]	@ (800d868 <RTC_ExitInitMode+0x78>)
 800d802:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d806:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d808:	4b17      	ldr	r3, [pc, #92]	@ (800d868 <RTC_ExitInitMode+0x78>)
 800d80a:	699b      	ldr	r3, [r3, #24]
 800d80c:	f003 0320 	and.w	r3, r3, #32
 800d810:	2b00      	cmp	r3, #0
 800d812:	d10c      	bne.n	800d82e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f7ff ff7d 	bl	800d714 <HAL_RTC_WaitForSynchro>
 800d81a:	4603      	mov	r3, r0
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d01e      	beq.n	800d85e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2203      	movs	r2, #3
 800d824:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800d828:	2303      	movs	r3, #3
 800d82a:	73fb      	strb	r3, [r7, #15]
 800d82c:	e017      	b.n	800d85e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d82e:	4b0e      	ldr	r3, [pc, #56]	@ (800d868 <RTC_ExitInitMode+0x78>)
 800d830:	699b      	ldr	r3, [r3, #24]
 800d832:	4a0d      	ldr	r2, [pc, #52]	@ (800d868 <RTC_ExitInitMode+0x78>)
 800d834:	f023 0320 	bic.w	r3, r3, #32
 800d838:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f7ff ff6a 	bl	800d714 <HAL_RTC_WaitForSynchro>
 800d840:	4603      	mov	r3, r0
 800d842:	2b00      	cmp	r3, #0
 800d844:	d005      	beq.n	800d852 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2203      	movs	r2, #3
 800d84a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800d84e:	2303      	movs	r3, #3
 800d850:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d852:	4b05      	ldr	r3, [pc, #20]	@ (800d868 <RTC_ExitInitMode+0x78>)
 800d854:	699b      	ldr	r3, [r3, #24]
 800d856:	4a04      	ldr	r2, [pc, #16]	@ (800d868 <RTC_ExitInitMode+0x78>)
 800d858:	f043 0320 	orr.w	r3, r3, #32
 800d85c:	6193      	str	r3, [r2, #24]
  }
  return status;
 800d85e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d860:	4618      	mov	r0, r3
 800d862:	3710      	adds	r7, #16
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	46007800 	.word	0x46007800

0800d86c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800d86c:	b480      	push	{r7}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	4910      	ldr	r1, [pc, #64]	@ (800d8c0 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800d880:	4313      	orrs	r3, r2
 800d882:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	689a      	ldr	r2, [r3, #8]
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	431a      	orrs	r2, r3
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	699b      	ldr	r3, [r3, #24]
 800d892:	490c      	ldr	r1, [pc, #48]	@ (800d8c4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800d894:	4313      	orrs	r3, r2
 800d896:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800d898:	4b0a      	ldr	r3, [pc, #40]	@ (800d8c4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800d89a:	6a1b      	ldr	r3, [r3, #32]
 800d89c:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	6919      	ldr	r1, [r3, #16]
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	695b      	ldr	r3, [r3, #20]
 800d8a8:	041b      	lsls	r3, r3, #16
 800d8aa:	430b      	orrs	r3, r1
 800d8ac:	4905      	ldr	r1, [pc, #20]	@ (800d8c4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800d8b2:	2300      	movs	r3, #0
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	370c      	adds	r7, #12
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr
 800d8c0:	46007800 	.word	0x46007800
 800d8c4:	46007c00 	.word	0x46007c00

0800d8c8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b086      	sub	sp, #24
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	60f8      	str	r0, [r7, #12]
 800d8d0:	60b9      	str	r1, [r7, #8]
 800d8d2:	607a      	str	r2, [r7, #4]
 800d8d4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	2b02      	cmp	r3, #2
 800d8da:	d904      	bls.n	800d8e6 <HAL_SAI_InitProtocol+0x1e>
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	3b03      	subs	r3, #3
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d812      	bhi.n	800d90a <HAL_SAI_InitProtocol+0x42>
 800d8e4:	e008      	b.n	800d8f8 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	687a      	ldr	r2, [r7, #4]
 800d8ea:	68b9      	ldr	r1, [r7, #8]
 800d8ec:	68f8      	ldr	r0, [r7, #12]
 800d8ee:	f000 fb21 	bl	800df34 <SAI_InitI2S>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	75fb      	strb	r3, [r7, #23]
      break;
 800d8f6:	e00b      	b.n	800d910 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	687a      	ldr	r2, [r7, #4]
 800d8fc:	68b9      	ldr	r1, [r7, #8]
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	f000 fbca 	bl	800e098 <SAI_InitPCM>
 800d904:	4603      	mov	r3, r0
 800d906:	75fb      	strb	r3, [r7, #23]
      break;
 800d908:	e002      	b.n	800d910 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800d90a:	2301      	movs	r3, #1
 800d90c:	75fb      	strb	r3, [r7, #23]
      break;
 800d90e:	bf00      	nop
  }

  if (status == HAL_OK)
 800d910:	7dfb      	ldrb	r3, [r7, #23]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d104      	bne.n	800d920 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	f000 f808 	bl	800d92c <HAL_SAI_Init>
 800d91c:	4603      	mov	r3, r0
 800d91e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800d920:	7dfb      	ldrb	r3, [r7, #23]
}
 800d922:	4618      	mov	r0, r3
 800d924:	3718      	adds	r7, #24
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
	...

0800d92c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b08a      	sub	sp, #40	@ 0x28
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d101      	bne.n	800d93e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800d93a:	2301      	movs	r3, #1
 800d93c:	e1ce      	b.n	800dcdc <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d944:	2b01      	cmp	r3, #1
 800d946:	d10e      	bne.n	800d966 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a83      	ldr	r2, [pc, #524]	@ (800db5c <HAL_SAI_Init+0x230>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d107      	bne.n	800d962 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800d956:	2b01      	cmp	r3, #1
 800d958:	d103      	bne.n	800d962 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d001      	beq.n	800d966 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800d962:	2301      	movs	r3, #1
 800d964:	e1ba      	b.n	800dcdc <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d106      	bne.n	800d980 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2200      	movs	r2, #0
 800d976:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f7f4 fcc2 	bl	8002304 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f000 fc43 	bl	800e20c <SAI_Disable>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d001      	beq.n	800d990 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800d98c:	2301      	movs	r3, #1
 800d98e:	e1a5      	b.n	800dcdc <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2202      	movs	r2, #2
 800d994:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	68db      	ldr	r3, [r3, #12]
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	d00c      	beq.n	800d9ba <HAL_SAI_Init+0x8e>
 800d9a0:	2b02      	cmp	r3, #2
 800d9a2:	d80d      	bhi.n	800d9c0 <HAL_SAI_Init+0x94>
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d002      	beq.n	800d9ae <HAL_SAI_Init+0x82>
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	d003      	beq.n	800d9b4 <HAL_SAI_Init+0x88>
 800d9ac:	e008      	b.n	800d9c0 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800d9b2:	e008      	b.n	800d9c6 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d9b4:	2310      	movs	r3, #16
 800d9b6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800d9b8:	e005      	b.n	800d9c6 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d9ba:	2320      	movs	r3, #32
 800d9bc:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800d9be:	e002      	b.n	800d9c6 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800d9c4:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	689b      	ldr	r3, [r3, #8]
 800d9ca:	2b03      	cmp	r3, #3
 800d9cc:	d81d      	bhi.n	800da0a <HAL_SAI_Init+0xde>
 800d9ce:	a201      	add	r2, pc, #4	@ (adr r2, 800d9d4 <HAL_SAI_Init+0xa8>)
 800d9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9d4:	0800d9e5 	.word	0x0800d9e5
 800d9d8:	0800d9eb 	.word	0x0800d9eb
 800d9dc:	0800d9f3 	.word	0x0800d9f3
 800d9e0:	0800d9fb 	.word	0x0800d9fb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	61fb      	str	r3, [r7, #28]
      break;
 800d9e8:	e012      	b.n	800da10 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d9ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d9ee:	61fb      	str	r3, [r7, #28]
      break;
 800d9f0:	e00e      	b.n	800da10 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d9f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d9f6:	61fb      	str	r3, [r7, #28]
      break;
 800d9f8:	e00a      	b.n	800da10 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d9fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d9fe:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800da00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da02:	f043 0301 	orr.w	r3, r3, #1
 800da06:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800da08:	e002      	b.n	800da10 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800da0a:	2300      	movs	r3, #0
 800da0c:	61fb      	str	r3, [r7, #28]
      break;
 800da0e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a51      	ldr	r2, [pc, #324]	@ (800db5c <HAL_SAI_Init+0x230>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d004      	beq.n	800da24 <HAL_SAI_Init+0xf8>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	4a50      	ldr	r2, [pc, #320]	@ (800db60 <HAL_SAI_Init+0x234>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d103      	bne.n	800da2c <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800da24:	4a4f      	ldr	r2, [pc, #316]	@ (800db64 <HAL_SAI_Init+0x238>)
 800da26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da28:	6013      	str	r3, [r2, #0]
 800da2a:	e002      	b.n	800da32 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800da2c:	4a4e      	ldr	r2, [pc, #312]	@ (800db68 <HAL_SAI_Init+0x23c>)
 800da2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da30:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6a1b      	ldr	r3, [r3, #32]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d077      	beq.n	800db2a <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4a47      	ldr	r2, [pc, #284]	@ (800db5c <HAL_SAI_Init+0x230>)
 800da40:	4293      	cmp	r3, r2
 800da42:	d004      	beq.n	800da4e <HAL_SAI_Init+0x122>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4a45      	ldr	r2, [pc, #276]	@ (800db60 <HAL_SAI_Init+0x234>)
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d107      	bne.n	800da5e <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800da4e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800da52:	f04f 0100 	mov.w	r1, #0
 800da56:	f7fe f925 	bl	800bca4 <HAL_RCCEx_GetPeriphCLKFreq>
 800da5a:	61b8      	str	r0, [r7, #24]
 800da5c:	e006      	b.n	800da6c <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800da5e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800da62:	f04f 0100 	mov.w	r1, #0
 800da66:	f7fe f91d 	bl	800bca4 <HAL_RCCEx_GetPeriphCLKFreq>
 800da6a:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	699b      	ldr	r3, [r3, #24]
 800da70:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800da74:	d120      	bne.n	800dab8 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da7a:	2b04      	cmp	r3, #4
 800da7c:	d102      	bne.n	800da84 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800da7e:	2340      	movs	r3, #64	@ 0x40
 800da80:	613b      	str	r3, [r7, #16]
 800da82:	e00a      	b.n	800da9a <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da88:	2b08      	cmp	r3, #8
 800da8a:	d103      	bne.n	800da94 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800da8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800da90:	613b      	str	r3, [r7, #16]
 800da92:	e002      	b.n	800da9a <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da98:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800da9a:	69ba      	ldr	r2, [r7, #24]
 800da9c:	4613      	mov	r3, r2
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	4413      	add	r3, r2
 800daa2:	005b      	lsls	r3, r3, #1
 800daa4:	4619      	mov	r1, r3
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a1b      	ldr	r3, [r3, #32]
 800daaa:	693a      	ldr	r2, [r7, #16]
 800daac:	fb02 f303 	mul.w	r3, r2, r3
 800dab0:	fbb1 f3f3 	udiv	r3, r1, r3
 800dab4:	617b      	str	r3, [r7, #20]
 800dab6:	e017      	b.n	800dae8 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dabc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dac0:	d101      	bne.n	800dac6 <HAL_SAI_Init+0x19a>
 800dac2:	2302      	movs	r3, #2
 800dac4:	e000      	b.n	800dac8 <HAL_SAI_Init+0x19c>
 800dac6:	2301      	movs	r3, #1
 800dac8:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800daca:	69ba      	ldr	r2, [r7, #24]
 800dacc:	4613      	mov	r3, r2
 800dace:	009b      	lsls	r3, r3, #2
 800dad0:	4413      	add	r3, r2
 800dad2:	005b      	lsls	r3, r3, #1
 800dad4:	4619      	mov	r1, r3
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6a1b      	ldr	r3, [r3, #32]
 800dada:	68fa      	ldr	r2, [r7, #12]
 800dadc:	fb02 f303 	mul.w	r3, r2, r3
 800dae0:	021b      	lsls	r3, r3, #8
 800dae2:	fbb1 f3f3 	udiv	r3, r1, r3
 800dae6:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	4a20      	ldr	r2, [pc, #128]	@ (800db6c <HAL_SAI_Init+0x240>)
 800daec:	fba2 2303 	umull	r2, r3, r2, r3
 800daf0:	08da      	lsrs	r2, r3, #3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800daf6:	6979      	ldr	r1, [r7, #20]
 800daf8:	4b1c      	ldr	r3, [pc, #112]	@ (800db6c <HAL_SAI_Init+0x240>)
 800dafa:	fba3 2301 	umull	r2, r3, r3, r1
 800dafe:	08da      	lsrs	r2, r3, #3
 800db00:	4613      	mov	r3, r2
 800db02:	009b      	lsls	r3, r3, #2
 800db04:	4413      	add	r3, r2
 800db06:	005b      	lsls	r3, r3, #1
 800db08:	1aca      	subs	r2, r1, r3
 800db0a:	2a08      	cmp	r2, #8
 800db0c:	d904      	bls.n	800db18 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db12:	1c5a      	adds	r2, r3, #1
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db1c:	2b04      	cmp	r3, #4
 800db1e:	d104      	bne.n	800db2a <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db24:	085a      	lsrs	r2, r3, #1
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d003      	beq.n	800db3a <HAL_SAI_Init+0x20e>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	2b02      	cmp	r3, #2
 800db38:	d109      	bne.n	800db4e <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d101      	bne.n	800db46 <HAL_SAI_Init+0x21a>
 800db42:	2300      	movs	r3, #0
 800db44:	e001      	b.n	800db4a <HAL_SAI_Init+0x21e>
 800db46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800db4a:	623b      	str	r3, [r7, #32]
 800db4c:	e012      	b.n	800db74 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db52:	2b01      	cmp	r3, #1
 800db54:	d10c      	bne.n	800db70 <HAL_SAI_Init+0x244>
 800db56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800db5a:	e00a      	b.n	800db72 <HAL_SAI_Init+0x246>
 800db5c:	40015404 	.word	0x40015404
 800db60:	40015424 	.word	0x40015424
 800db64:	40015400 	.word	0x40015400
 800db68:	40015800 	.word	0x40015800
 800db6c:	cccccccd 	.word	0xcccccccd
 800db70:	2300      	movs	r3, #0
 800db72:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	6819      	ldr	r1, [r3, #0]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	4b59      	ldr	r3, [pc, #356]	@ (800dce4 <HAL_SAI_Init+0x3b8>)
 800db80:	400b      	ands	r3, r1
 800db82:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	6819      	ldr	r1, [r3, #0]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	685a      	ldr	r2, [r3, #4]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db92:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800db98:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db9e:	431a      	orrs	r2, r3
 800dba0:	6a3b      	ldr	r3, [r7, #32]
 800dba2:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800dba4:	69fb      	ldr	r3, [r7, #28]
 800dba6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800dbac:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	695b      	ldr	r3, [r3, #20]
 800dbb2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dbb8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbbe:	051b      	lsls	r3, r3, #20
 800dbc0:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800dbc6:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	691b      	ldr	r3, [r3, #16]
 800dbcc:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	430a      	orrs	r2, r1
 800dbd4:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	687a      	ldr	r2, [r7, #4]
 800dbde:	6812      	ldr	r2, [r2, #0]
 800dbe0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800dbe4:	f023 030f 	bic.w	r3, r3, #15
 800dbe8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	6859      	ldr	r1, [r3, #4]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	69da      	ldr	r2, [r3, #28]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbf8:	431a      	orrs	r2, r3
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbfe:	431a      	orrs	r2, r3
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	430a      	orrs	r2, r1
 800dc06:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	6899      	ldr	r1, [r3, #8]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	4b35      	ldr	r3, [pc, #212]	@ (800dce8 <HAL_SAI_Init+0x3bc>)
 800dc14:	400b      	ands	r3, r1
 800dc16:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	6899      	ldr	r1, [r3, #8]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc22:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800dc28:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800dc2e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800dc34:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc3a:	3b01      	subs	r3, #1
 800dc3c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800dc3e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	430a      	orrs	r2, r1
 800dc46:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	68d9      	ldr	r1, [r3, #12]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681a      	ldr	r2, [r3, #0]
 800dc52:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800dc56:	400b      	ands	r3, r1
 800dc58:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	68d9      	ldr	r1, [r3, #12]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc68:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dc6e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800dc70:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc76:	3b01      	subs	r3, #1
 800dc78:	021b      	lsls	r3, r3, #8
 800dc7a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	430a      	orrs	r2, r1
 800dc82:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4a18      	ldr	r2, [pc, #96]	@ (800dcec <HAL_SAI_Init+0x3c0>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d119      	bne.n	800dcc2 <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800dc8e:	4b18      	ldr	r3, [pc, #96]	@ (800dcf0 <HAL_SAI_Init+0x3c4>)
 800dc90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc92:	4a17      	ldr	r2, [pc, #92]	@ (800dcf0 <HAL_SAI_Init+0x3c4>)
 800dc94:	f023 0301 	bic.w	r3, r3, #1
 800dc98:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d10e      	bne.n	800dcc2 <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcac:	3b01      	subs	r3, #1
 800dcae:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800dcb0:	490f      	ldr	r1, [pc, #60]	@ (800dcf0 <HAL_SAI_Init+0x3c4>)
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800dcb6:	4b0e      	ldr	r3, [pc, #56]	@ (800dcf0 <HAL_SAI_Init+0x3c4>)
 800dcb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcba:	4a0d      	ldr	r2, [pc, #52]	@ (800dcf0 <HAL_SAI_Init+0x3c4>)
 800dcbc:	f043 0301 	orr.w	r3, r3, #1
 800dcc0:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2201      	movs	r2, #1
 800dcce:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800dcda:	2300      	movs	r3, #0
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3728      	adds	r7, #40	@ 0x28
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	f005c010 	.word	0xf005c010
 800dce8:	fff88000 	.word	0xfff88000
 800dcec:	40015404 	.word	0x40015404
 800dcf0:	40015400 	.word	0x40015400

0800dcf4 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b088      	sub	sp, #32
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	4613      	mov	r3, r2
 800dd00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800dd02:	f7f4 fe73 	bl	80029ec <HAL_GetTick>
 800dd06:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d002      	beq.n	800dd14 <HAL_SAI_Transmit_DMA+0x20>
 800dd0e:	88fb      	ldrh	r3, [r7, #6]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d101      	bne.n	800dd18 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800dd14:	2301      	movs	r3, #1
 800dd16:	e0e4      	b.n	800dee2 <HAL_SAI_Transmit_DMA+0x1ee>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	f040 80dd 	bne.w	800dee0 <HAL_SAI_Transmit_DMA+0x1ec>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	d101      	bne.n	800dd34 <HAL_SAI_Transmit_DMA+0x40>
 800dd30:	2302      	movs	r3, #2
 800dd32:	e0d6      	b.n	800dee2 <HAL_SAI_Transmit_DMA+0x1ee>
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	2201      	movs	r2, #1
 800dd38:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	68ba      	ldr	r2, [r7, #8]
 800dd40:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	88fa      	ldrh	r2, [r7, #6]
 800dd46:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	88fa      	ldrh	r2, [r7, #6]
 800dd4e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2200      	movs	r2, #0
 800dd56:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2212      	movs	r2, #18
 800dd5e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd68:	4a60      	ldr	r2, [pc, #384]	@ (800deec <HAL_SAI_Transmit_DMA+0x1f8>)
 800dd6a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd72:	4a5f      	ldr	r2, [pc, #380]	@ (800def0 <HAL_SAI_Transmit_DMA+0x1fc>)
 800dd74:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd7c:	4a5d      	ldr	r2, [pc, #372]	@ (800def4 <HAL_SAI_Transmit_DMA+0x200>)
 800dd7e:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd86:	2200      	movs	r2, #0
 800dd88:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For transmission, the DMA source is data buffer.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dd8e:	2b40      	cmp	r3, #64	@ 0x40
 800dd90:	d106      	bne.n	800dda0 <HAL_SAI_Transmit_DMA+0xac>
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d102      	bne.n	800dda0 <HAL_SAI_Transmit_DMA+0xac>
    {
      dmaSrcSize = (uint32_t) Size;
 800dd9a:	88fb      	ldrh	r3, [r7, #6]
 800dd9c:	61bb      	str	r3, [r7, #24]
 800dd9e:	e00a      	b.n	800ddb6 <HAL_SAI_Transmit_DMA+0xc2>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dda4:	2b80      	cmp	r3, #128	@ 0x80
 800dda6:	d803      	bhi.n	800ddb0 <HAL_SAI_Transmit_DMA+0xbc>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800dda8:	88fb      	ldrh	r3, [r7, #6]
 800ddaa:	005b      	lsls	r3, r3, #1
 800ddac:	61bb      	str	r3, [r7, #24]
 800ddae:	e002      	b.n	800ddb6 <HAL_SAI_Transmit_DMA+0xc2>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800ddb0:	88fb      	ldrh	r3, [r7, #6]
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	61bb      	str	r3, [r7, #24]
    }

    /* Enable the Tx DMA Stream */
    if ((hsai->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d02d      	beq.n	800de22 <HAL_SAI_Transmit_DMA+0x12e>
    {
      if (hsai->hdmatx->LinkedListQueue != NULL)
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d021      	beq.n	800de16 <HAL_SAI_Transmit_DMA+0x122>
      {
        /* Set DMA data size */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	69ba      	ldr	r2, [r7, #24]
 800ddde:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f103 021c 	add.w	r2, r3, #28
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmatx);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7f8 fa8c 	bl	8006328 <HAL_DMAEx_List_Start_IT>
 800de10:	4603      	mov	r3, r0
 800de12:	77fb      	strb	r3, [r7, #31]
 800de14:	e014      	b.n	800de40 <HAL_SAI_Transmit_DMA+0x14c>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2200      	movs	r2, #0
 800de1a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800de1e:	2301      	movs	r3, #1
 800de20:	e05f      	b.n	800dee2 <HAL_SAI_Transmit_DMA+0x1ee>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, dmaSrcSize);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800de2c:	4619      	mov	r1, r3
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	331c      	adds	r3, #28
 800de34:	461a      	mov	r2, r3
 800de36:	69bb      	ldr	r3, [r7, #24]
 800de38:	f7f7 fae4 	bl	8005404 <HAL_DMA_Start_IT>
 800de3c:	4603      	mov	r3, r0
 800de3e:	77fb      	strb	r3, [r7, #31]
    }

    if (status != HAL_OK)
 800de40:	7ffb      	ldrb	r3, [r7, #31]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d005      	beq.n	800de52 <HAL_SAI_Transmit_DMA+0x15e>
    {
      __HAL_UNLOCK(hsai);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2200      	movs	r2, #0
 800de4a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800de4e:	2301      	movs	r3, #1
 800de50:	e047      	b.n	800dee2 <HAL_SAI_Transmit_DMA+0x1ee>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800de52:	2100      	movs	r1, #0
 800de54:	68f8      	ldr	r0, [r7, #12]
 800de56:	f000 f9a1 	bl	800e19c <SAI_InterruptFlag>
 800de5a:	4601      	mov	r1, r0
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	691a      	ldr	r2, [r3, #16]
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	430a      	orrs	r2, r1
 800de68:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800de78:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800de7a:	e015      	b.n	800dea8 <HAL_SAI_Transmit_DMA+0x1b4>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800de7c:	f7f4 fdb6 	bl	80029ec <HAL_GetTick>
 800de80:	4602      	mov	r2, r0
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	1ad3      	subs	r3, r2, r3
 800de86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800de8a:	d90d      	bls.n	800dea8 <HAL_SAI_Transmit_DMA+0x1b4>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800de92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	2200      	movs	r2, #0
 800dea0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800dea4:	2303      	movs	r3, #3
 800dea6:	e01c      	b.n	800dee2 <HAL_SAI_Transmit_DMA+0x1ee>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	695b      	ldr	r3, [r3, #20]
 800deae:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d0e2      	beq.n	800de7c <HAL_SAI_Transmit_DMA+0x188>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d107      	bne.n	800ded4 <HAL_SAI_Transmit_DMA+0x1e0>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ded2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2200      	movs	r2, #0
 800ded8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800dedc:	2300      	movs	r3, #0
 800dede:	e000      	b.n	800dee2 <HAL_SAI_Transmit_DMA+0x1ee>
  }
  else
  {
    return HAL_BUSY;
 800dee0:	2302      	movs	r3, #2
  }
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3720      	adds	r7, #32
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	0800e2df 	.word	0x0800e2df
 800def0:	0800e281 	.word	0x0800e281
 800def4:	0800e2fb 	.word	0x0800e2fb

0800def8 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800df00:	bf00      	nop
 800df02:	370c      	adds	r7, #12
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b083      	sub	sp, #12
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 800df14:	bf00      	nop
 800df16:	370c      	adds	r7, #12
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr

0800df20 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800df20:	b480      	push	{r7}
 800df22:	b083      	sub	sp, #12
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800df28:	bf00      	nop
 800df2a:	370c      	adds	r7, #12
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr

0800df34 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800df34:	b480      	push	{r7}
 800df36:	b087      	sub	sp, #28
 800df38:	af00      	add	r7, sp, #0
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	607a      	str	r2, [r7, #4]
 800df40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800df42:	2300      	movs	r3, #0
 800df44:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2200      	movs	r2, #0
 800df4a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2200      	movs	r2, #0
 800df50:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	685b      	ldr	r3, [r3, #4]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d003      	beq.n	800df62 <SAI_InitI2S+0x2e>
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	2b02      	cmp	r3, #2
 800df60:	d103      	bne.n	800df6a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2200      	movs	r2, #0
 800df66:	651a      	str	r2, [r3, #80]	@ 0x50
 800df68:	e002      	b.n	800df70 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2201      	movs	r2, #1
 800df6e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800df76:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800df7e:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	2200      	movs	r2, #0
 800df84:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	683a      	ldr	r2, [r7, #0]
 800df8a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	f003 0301 	and.w	r3, r3, #1
 800df92:	2b00      	cmp	r3, #0
 800df94:	d001      	beq.n	800df9a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800df96:	2301      	movs	r3, #1
 800df98:	e077      	b.n	800e08a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d107      	bne.n	800dfb0 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800dfac:	665a      	str	r2, [r3, #100]	@ 0x64
 800dfae:	e006      	b.n	800dfbe <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800dfb6:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2b03      	cmp	r3, #3
 800dfc2:	d84f      	bhi.n	800e064 <SAI_InitI2S+0x130>
 800dfc4:	a201      	add	r2, pc, #4	@ (adr r2, 800dfcc <SAI_InitI2S+0x98>)
 800dfc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfca:	bf00      	nop
 800dfcc:	0800dfdd 	.word	0x0800dfdd
 800dfd0:	0800dfff 	.word	0x0800dfff
 800dfd4:	0800e021 	.word	0x0800e021
 800dfd8:	0800e043 	.word	0x0800e043
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2280      	movs	r2, #128	@ 0x80
 800dfe0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	085b      	lsrs	r3, r3, #1
 800dfe6:	015a      	lsls	r2, r3, #5
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	085b      	lsrs	r3, r3, #1
 800dff0:	011a      	lsls	r2, r3, #4
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2240      	movs	r2, #64	@ 0x40
 800dffa:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800dffc:	e035      	b.n	800e06a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2280      	movs	r2, #128	@ 0x80
 800e002:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	085b      	lsrs	r3, r3, #1
 800e008:	019a      	lsls	r2, r3, #6
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	085b      	lsrs	r3, r3, #1
 800e012:	015a      	lsls	r2, r3, #5
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2280      	movs	r2, #128	@ 0x80
 800e01c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e01e:	e024      	b.n	800e06a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	22c0      	movs	r2, #192	@ 0xc0
 800e024:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	085b      	lsrs	r3, r3, #1
 800e02a:	019a      	lsls	r2, r3, #6
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	085b      	lsrs	r3, r3, #1
 800e034:	015a      	lsls	r2, r3, #5
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2280      	movs	r2, #128	@ 0x80
 800e03e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e040:	e013      	b.n	800e06a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	22e0      	movs	r2, #224	@ 0xe0
 800e046:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	085b      	lsrs	r3, r3, #1
 800e04c:	019a      	lsls	r2, r3, #6
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	085b      	lsrs	r3, r3, #1
 800e056:	015a      	lsls	r2, r3, #5
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2280      	movs	r2, #128	@ 0x80
 800e060:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e062:	e002      	b.n	800e06a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800e064:	2301      	movs	r3, #1
 800e066:	75fb      	strb	r3, [r7, #23]
      break;
 800e068:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	2b02      	cmp	r3, #2
 800e06e:	d10b      	bne.n	800e088 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2b01      	cmp	r3, #1
 800e074:	d102      	bne.n	800e07c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2210      	movs	r2, #16
 800e07a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2b02      	cmp	r3, #2
 800e080:	d102      	bne.n	800e088 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2208      	movs	r2, #8
 800e086:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800e088:	7dfb      	ldrb	r3, [r7, #23]
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	371c      	adds	r7, #28
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr
 800e096:	bf00      	nop

0800e098 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e098:	b480      	push	{r7}
 800e09a:	b087      	sub	sp, #28
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	60f8      	str	r0, [r7, #12]
 800e0a0:	60b9      	str	r1, [r7, #8]
 800e0a2:	607a      	str	r2, [r7, #4]
 800e0a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d003      	beq.n	800e0c6 <SAI_InitPCM+0x2e>
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	685b      	ldr	r3, [r3, #4]
 800e0c2:	2b02      	cmp	r3, #2
 800e0c4:	d103      	bne.n	800e0ce <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2201      	movs	r2, #1
 800e0ca:	651a      	str	r2, [r3, #80]	@ 0x50
 800e0cc:	e002      	b.n	800e0d4 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e0e0:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e0e8:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	683a      	ldr	r2, [r7, #0]
 800e0f4:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e0fc:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800e0fe:	68bb      	ldr	r3, [r7, #8]
 800e100:	2b04      	cmp	r3, #4
 800e102:	d103      	bne.n	800e10c <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	2201      	movs	r2, #1
 800e108:	659a      	str	r2, [r3, #88]	@ 0x58
 800e10a:	e002      	b.n	800e112 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	220d      	movs	r2, #13
 800e110:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b03      	cmp	r3, #3
 800e116:	d837      	bhi.n	800e188 <SAI_InitPCM+0xf0>
 800e118:	a201      	add	r2, pc, #4	@ (adr r2, 800e120 <SAI_InitPCM+0x88>)
 800e11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e11e:	bf00      	nop
 800e120:	0800e131 	.word	0x0800e131
 800e124:	0800e147 	.word	0x0800e147
 800e128:	0800e15d 	.word	0x0800e15d
 800e12c:	0800e173 	.word	0x0800e173
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2280      	movs	r2, #128	@ 0x80
 800e134:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	011a      	lsls	r2, r3, #4
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2240      	movs	r2, #64	@ 0x40
 800e142:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e144:	e023      	b.n	800e18e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2280      	movs	r2, #128	@ 0x80
 800e14a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	015a      	lsls	r2, r3, #5
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2280      	movs	r2, #128	@ 0x80
 800e158:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e15a:	e018      	b.n	800e18e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	22c0      	movs	r2, #192	@ 0xc0
 800e160:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	015a      	lsls	r2, r3, #5
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	2280      	movs	r2, #128	@ 0x80
 800e16e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e170:	e00d      	b.n	800e18e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	22e0      	movs	r2, #224	@ 0xe0
 800e176:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	015a      	lsls	r2, r3, #5
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2280      	movs	r2, #128	@ 0x80
 800e184:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e186:	e002      	b.n	800e18e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800e188:	2301      	movs	r3, #1
 800e18a:	75fb      	strb	r3, [r7, #23]
      break;
 800e18c:	bf00      	nop
  }

  return status;
 800e18e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e190:	4618      	mov	r0, r3
 800e192:	371c      	adds	r7, #28
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr

0800e19c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800e19c:	b480      	push	{r7}
 800e19e:	b085      	sub	sp, #20
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800e1ac:	78fb      	ldrb	r3, [r7, #3]
 800e1ae:	2b01      	cmp	r3, #1
 800e1b0:	d103      	bne.n	800e1ba <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	f043 0308 	orr.w	r3, r3, #8
 800e1b8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1be:	2b08      	cmp	r3, #8
 800e1c0:	d10b      	bne.n	800e1da <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e1c6:	2b03      	cmp	r3, #3
 800e1c8:	d003      	beq.n	800e1d2 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	d103      	bne.n	800e1da <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	f043 0310 	orr.w	r3, r3, #16
 800e1d8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	2b03      	cmp	r3, #3
 800e1e0:	d003      	beq.n	800e1ea <SAI_InterruptFlag+0x4e>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	2b02      	cmp	r3, #2
 800e1e8:	d104      	bne.n	800e1f4 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e1f0:	60fb      	str	r3, [r7, #12]
 800e1f2:	e003      	b.n	800e1fc <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f043 0304 	orr.w	r3, r3, #4
 800e1fa:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3714      	adds	r7, #20
 800e202:	46bd      	mov	sp, r7
 800e204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e208:	4770      	bx	lr
	...

0800e20c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800e20c:	b480      	push	{r7}
 800e20e:	b085      	sub	sp, #20
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800e214:	4b18      	ldr	r3, [pc, #96]	@ (800e278 <SAI_Disable+0x6c>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4a18      	ldr	r2, [pc, #96]	@ (800e27c <SAI_Disable+0x70>)
 800e21a:	fba2 2303 	umull	r2, r3, r2, r3
 800e21e:	0b1b      	lsrs	r3, r3, #12
 800e220:	009b      	lsls	r3, r3, #2
 800e222:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800e224:	2300      	movs	r3, #0
 800e226:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	681a      	ldr	r2, [r3, #0]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800e236:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d10a      	bne.n	800e254 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e244:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800e24e:	2303      	movs	r3, #3
 800e250:	72fb      	strb	r3, [r7, #11]
      break;
 800e252:	e009      	b.n	800e268 <SAI_Disable+0x5c>
    }
    count--;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	3b01      	subs	r3, #1
 800e258:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e264:	2b00      	cmp	r3, #0
 800e266:	d1e7      	bne.n	800e238 <SAI_Disable+0x2c>

  return status;
 800e268:	7afb      	ldrb	r3, [r7, #11]
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3714      	adds	r7, #20
 800e26e:	46bd      	mov	sp, r7
 800e270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e274:	4770      	bx	lr
 800e276:	bf00      	nop
 800e278:	20000000 	.word	0x20000000
 800e27c:	95cbec1b 	.word	0x95cbec1b

0800e280 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b084      	sub	sp, #16
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e28c:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e292:	2b81      	cmp	r3, #129	@ 0x81
 800e294:	d01c      	beq.n	800e2d0 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	2200      	movs	r2, #0
 800e29a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	681a      	ldr	r2, [r3, #0]
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800e2ac:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e2ae:	2100      	movs	r1, #0
 800e2b0:	68f8      	ldr	r0, [r7, #12]
 800e2b2:	f7ff ff73 	bl	800e19c <SAI_InterruptFlag>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	43d9      	mvns	r1, r3
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	691a      	ldr	r2, [r3, #16]
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	400a      	ands	r2, r1
 800e2c6:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800e2d0:	68f8      	ldr	r0, [r7, #12]
 800e2d2:	f7ff fe11 	bl	800def8 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e2d6:	bf00      	nop
 800e2d8:	3710      	adds	r7, #16
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}

0800e2de <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e2de:	b580      	push	{r7, lr}
 800e2e0:	b084      	sub	sp, #16
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e2ea:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800e2ec:	68f8      	ldr	r0, [r7, #12]
 800e2ee:	f7ff fe0d 	bl	800df0c <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e2f2:	bf00      	nop
 800e2f4:	3710      	adds	r7, #16
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}

0800e2fa <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e2fa:	b580      	push	{r7, lr}
 800e2fc:	b084      	sub	sp, #16
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e306:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e30e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	681a      	ldr	r2, [r3, #0]
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800e326:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	f7ff ff6f 	bl	800e20c <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2201      	movs	r2, #1
 800e332:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2200      	movs	r2, #0
 800e33a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800e33e:	68f8      	ldr	r0, [r7, #12]
 800e340:	f7ff fdee 	bl	800df20 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e344:	bf00      	nop
 800e346:	3710      	adds	r7, #16
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d101      	bne.n	800e35e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e35a:	2301      	movs	r3, #1
 800e35c:	e049      	b.n	800e3f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e364:	b2db      	uxtb	r3, r3
 800e366:	2b00      	cmp	r3, #0
 800e368:	d106      	bne.n	800e378 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2200      	movs	r2, #0
 800e36e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f7f3 fe62 	bl	800203c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2202      	movs	r2, #2
 800e37c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	3304      	adds	r3, #4
 800e388:	4619      	mov	r1, r3
 800e38a:	4610      	mov	r0, r2
 800e38c:	f000 f94a 	bl	800e624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2201      	movs	r2, #1
 800e394:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2201      	movs	r2, #1
 800e39c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e3f0:	2300      	movs	r3, #0
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3708      	adds	r7, #8
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
	...

0800e3fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b086      	sub	sp, #24
 800e400:	af00      	add	r7, sp, #0
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	60b9      	str	r1, [r7, #8]
 800e406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e408:	2300      	movs	r3, #0
 800e40a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e412:	2b01      	cmp	r3, #1
 800e414:	d101      	bne.n	800e41a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e416:	2302      	movs	r3, #2
 800e418:	e0ff      	b.n	800e61a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2201      	movs	r2, #1
 800e41e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2b14      	cmp	r3, #20
 800e426:	f200 80f0 	bhi.w	800e60a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e42a:	a201      	add	r2, pc, #4	@ (adr r2, 800e430 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e430:	0800e485 	.word	0x0800e485
 800e434:	0800e60b 	.word	0x0800e60b
 800e438:	0800e60b 	.word	0x0800e60b
 800e43c:	0800e60b 	.word	0x0800e60b
 800e440:	0800e4c5 	.word	0x0800e4c5
 800e444:	0800e60b 	.word	0x0800e60b
 800e448:	0800e60b 	.word	0x0800e60b
 800e44c:	0800e60b 	.word	0x0800e60b
 800e450:	0800e507 	.word	0x0800e507
 800e454:	0800e60b 	.word	0x0800e60b
 800e458:	0800e60b 	.word	0x0800e60b
 800e45c:	0800e60b 	.word	0x0800e60b
 800e460:	0800e547 	.word	0x0800e547
 800e464:	0800e60b 	.word	0x0800e60b
 800e468:	0800e60b 	.word	0x0800e60b
 800e46c:	0800e60b 	.word	0x0800e60b
 800e470:	0800e589 	.word	0x0800e589
 800e474:	0800e60b 	.word	0x0800e60b
 800e478:	0800e60b 	.word	0x0800e60b
 800e47c:	0800e60b 	.word	0x0800e60b
 800e480:	0800e5c9 	.word	0x0800e5c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	68b9      	ldr	r1, [r7, #8]
 800e48a:	4618      	mov	r0, r3
 800e48c:	f000 f9d0 	bl	800e830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	699a      	ldr	r2, [r3, #24]
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	f042 0208 	orr.w	r2, r2, #8
 800e49e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	699a      	ldr	r2, [r3, #24]
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f022 0204 	bic.w	r2, r2, #4
 800e4ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	6999      	ldr	r1, [r3, #24]
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	691a      	ldr	r2, [r3, #16]
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	430a      	orrs	r2, r1
 800e4c0:	619a      	str	r2, [r3, #24]
      break;
 800e4c2:	e0a5      	b.n	800e610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	68b9      	ldr	r1, [r7, #8]
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f000 fa72 	bl	800e9b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	699a      	ldr	r2, [r3, #24]
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e4de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	699a      	ldr	r2, [r3, #24]
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e4ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	6999      	ldr	r1, [r3, #24]
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	691b      	ldr	r3, [r3, #16]
 800e4fa:	021a      	lsls	r2, r3, #8
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	430a      	orrs	r2, r1
 800e502:	619a      	str	r2, [r3, #24]
      break;
 800e504:	e084      	b.n	800e610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	68b9      	ldr	r1, [r7, #8]
 800e50c:	4618      	mov	r0, r3
 800e50e:	f000 fb01 	bl	800eb14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	69da      	ldr	r2, [r3, #28]
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f042 0208 	orr.w	r2, r2, #8
 800e520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	69da      	ldr	r2, [r3, #28]
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	f022 0204 	bic.w	r2, r2, #4
 800e530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	69d9      	ldr	r1, [r3, #28]
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	691a      	ldr	r2, [r3, #16]
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	430a      	orrs	r2, r1
 800e542:	61da      	str	r2, [r3, #28]
      break;
 800e544:	e064      	b.n	800e610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	68b9      	ldr	r1, [r7, #8]
 800e54c:	4618      	mov	r0, r3
 800e54e:	f000 fb8f 	bl	800ec70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	69da      	ldr	r2, [r3, #28]
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	69da      	ldr	r2, [r3, #28]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	69d9      	ldr	r1, [r3, #28]
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	691b      	ldr	r3, [r3, #16]
 800e57c:	021a      	lsls	r2, r3, #8
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	430a      	orrs	r2, r1
 800e584:	61da      	str	r2, [r3, #28]
      break;
 800e586:	e043      	b.n	800e610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	68b9      	ldr	r1, [r7, #8]
 800e58e:	4618      	mov	r0, r3
 800e590:	f000 fc1e 	bl	800edd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f042 0208 	orr.w	r2, r2, #8
 800e5a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f022 0204 	bic.w	r2, r2, #4
 800e5b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	691a      	ldr	r2, [r3, #16]
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	430a      	orrs	r2, r1
 800e5c4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e5c6:	e023      	b.n	800e610 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	68b9      	ldr	r1, [r7, #8]
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f000 fc80 	bl	800eed4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e5e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e5f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	691b      	ldr	r3, [r3, #16]
 800e5fe:	021a      	lsls	r2, r3, #8
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	430a      	orrs	r2, r1
 800e606:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e608:	e002      	b.n	800e610 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e60a:	2301      	movs	r3, #1
 800e60c:	75fb      	strb	r3, [r7, #23]
      break;
 800e60e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2200      	movs	r2, #0
 800e614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e618:	7dfb      	ldrb	r3, [r7, #23]
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3718      	adds	r7, #24
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
 800e622:	bf00      	nop

0800e624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e624:	b480      	push	{r7}
 800e626:	b085      	sub	sp, #20
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	4a6e      	ldr	r2, [pc, #440]	@ (800e7f0 <TIM_Base_SetConfig+0x1cc>)
 800e638:	4293      	cmp	r3, r2
 800e63a:	d02b      	beq.n	800e694 <TIM_Base_SetConfig+0x70>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	4a6d      	ldr	r2, [pc, #436]	@ (800e7f4 <TIM_Base_SetConfig+0x1d0>)
 800e640:	4293      	cmp	r3, r2
 800e642:	d027      	beq.n	800e694 <TIM_Base_SetConfig+0x70>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e64a:	d023      	beq.n	800e694 <TIM_Base_SetConfig+0x70>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e652:	d01f      	beq.n	800e694 <TIM_Base_SetConfig+0x70>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	4a68      	ldr	r2, [pc, #416]	@ (800e7f8 <TIM_Base_SetConfig+0x1d4>)
 800e658:	4293      	cmp	r3, r2
 800e65a:	d01b      	beq.n	800e694 <TIM_Base_SetConfig+0x70>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	4a67      	ldr	r2, [pc, #412]	@ (800e7fc <TIM_Base_SetConfig+0x1d8>)
 800e660:	4293      	cmp	r3, r2
 800e662:	d017      	beq.n	800e694 <TIM_Base_SetConfig+0x70>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	4a66      	ldr	r2, [pc, #408]	@ (800e800 <TIM_Base_SetConfig+0x1dc>)
 800e668:	4293      	cmp	r3, r2
 800e66a:	d013      	beq.n	800e694 <TIM_Base_SetConfig+0x70>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	4a65      	ldr	r2, [pc, #404]	@ (800e804 <TIM_Base_SetConfig+0x1e0>)
 800e670:	4293      	cmp	r3, r2
 800e672:	d00f      	beq.n	800e694 <TIM_Base_SetConfig+0x70>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	4a64      	ldr	r2, [pc, #400]	@ (800e808 <TIM_Base_SetConfig+0x1e4>)
 800e678:	4293      	cmp	r3, r2
 800e67a:	d00b      	beq.n	800e694 <TIM_Base_SetConfig+0x70>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	4a63      	ldr	r2, [pc, #396]	@ (800e80c <TIM_Base_SetConfig+0x1e8>)
 800e680:	4293      	cmp	r3, r2
 800e682:	d007      	beq.n	800e694 <TIM_Base_SetConfig+0x70>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	4a62      	ldr	r2, [pc, #392]	@ (800e810 <TIM_Base_SetConfig+0x1ec>)
 800e688:	4293      	cmp	r3, r2
 800e68a:	d003      	beq.n	800e694 <TIM_Base_SetConfig+0x70>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	4a61      	ldr	r2, [pc, #388]	@ (800e814 <TIM_Base_SetConfig+0x1f0>)
 800e690:	4293      	cmp	r3, r2
 800e692:	d108      	bne.n	800e6a6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e69a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	685b      	ldr	r3, [r3, #4]
 800e6a0:	68fa      	ldr	r2, [r7, #12]
 800e6a2:	4313      	orrs	r3, r2
 800e6a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	4a51      	ldr	r2, [pc, #324]	@ (800e7f0 <TIM_Base_SetConfig+0x1cc>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d043      	beq.n	800e736 <TIM_Base_SetConfig+0x112>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	4a50      	ldr	r2, [pc, #320]	@ (800e7f4 <TIM_Base_SetConfig+0x1d0>)
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	d03f      	beq.n	800e736 <TIM_Base_SetConfig+0x112>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6bc:	d03b      	beq.n	800e736 <TIM_Base_SetConfig+0x112>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e6c4:	d037      	beq.n	800e736 <TIM_Base_SetConfig+0x112>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	4a4b      	ldr	r2, [pc, #300]	@ (800e7f8 <TIM_Base_SetConfig+0x1d4>)
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d033      	beq.n	800e736 <TIM_Base_SetConfig+0x112>
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	4a4a      	ldr	r2, [pc, #296]	@ (800e7fc <TIM_Base_SetConfig+0x1d8>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d02f      	beq.n	800e736 <TIM_Base_SetConfig+0x112>
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	4a49      	ldr	r2, [pc, #292]	@ (800e800 <TIM_Base_SetConfig+0x1dc>)
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d02b      	beq.n	800e736 <TIM_Base_SetConfig+0x112>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	4a48      	ldr	r2, [pc, #288]	@ (800e804 <TIM_Base_SetConfig+0x1e0>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d027      	beq.n	800e736 <TIM_Base_SetConfig+0x112>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	4a47      	ldr	r2, [pc, #284]	@ (800e808 <TIM_Base_SetConfig+0x1e4>)
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d023      	beq.n	800e736 <TIM_Base_SetConfig+0x112>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	4a46      	ldr	r2, [pc, #280]	@ (800e80c <TIM_Base_SetConfig+0x1e8>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d01f      	beq.n	800e736 <TIM_Base_SetConfig+0x112>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	4a45      	ldr	r2, [pc, #276]	@ (800e810 <TIM_Base_SetConfig+0x1ec>)
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	d01b      	beq.n	800e736 <TIM_Base_SetConfig+0x112>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4a44      	ldr	r2, [pc, #272]	@ (800e814 <TIM_Base_SetConfig+0x1f0>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d017      	beq.n	800e736 <TIM_Base_SetConfig+0x112>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	4a43      	ldr	r2, [pc, #268]	@ (800e818 <TIM_Base_SetConfig+0x1f4>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d013      	beq.n	800e736 <TIM_Base_SetConfig+0x112>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	4a42      	ldr	r2, [pc, #264]	@ (800e81c <TIM_Base_SetConfig+0x1f8>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d00f      	beq.n	800e736 <TIM_Base_SetConfig+0x112>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	4a41      	ldr	r2, [pc, #260]	@ (800e820 <TIM_Base_SetConfig+0x1fc>)
 800e71a:	4293      	cmp	r3, r2
 800e71c:	d00b      	beq.n	800e736 <TIM_Base_SetConfig+0x112>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	4a40      	ldr	r2, [pc, #256]	@ (800e824 <TIM_Base_SetConfig+0x200>)
 800e722:	4293      	cmp	r3, r2
 800e724:	d007      	beq.n	800e736 <TIM_Base_SetConfig+0x112>
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	4a3f      	ldr	r2, [pc, #252]	@ (800e828 <TIM_Base_SetConfig+0x204>)
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d003      	beq.n	800e736 <TIM_Base_SetConfig+0x112>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	4a3e      	ldr	r2, [pc, #248]	@ (800e82c <TIM_Base_SetConfig+0x208>)
 800e732:	4293      	cmp	r3, r2
 800e734:	d108      	bne.n	800e748 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e73c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	68db      	ldr	r3, [r3, #12]
 800e742:	68fa      	ldr	r2, [r7, #12]
 800e744:	4313      	orrs	r3, r2
 800e746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	695b      	ldr	r3, [r3, #20]
 800e752:	4313      	orrs	r3, r2
 800e754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	68fa      	ldr	r2, [r7, #12]
 800e75a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	689a      	ldr	r2, [r3, #8]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	681a      	ldr	r2, [r3, #0]
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	4a20      	ldr	r2, [pc, #128]	@ (800e7f0 <TIM_Base_SetConfig+0x1cc>)
 800e770:	4293      	cmp	r3, r2
 800e772:	d023      	beq.n	800e7bc <TIM_Base_SetConfig+0x198>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	4a1f      	ldr	r2, [pc, #124]	@ (800e7f4 <TIM_Base_SetConfig+0x1d0>)
 800e778:	4293      	cmp	r3, r2
 800e77a:	d01f      	beq.n	800e7bc <TIM_Base_SetConfig+0x198>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	4a24      	ldr	r2, [pc, #144]	@ (800e810 <TIM_Base_SetConfig+0x1ec>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d01b      	beq.n	800e7bc <TIM_Base_SetConfig+0x198>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	4a23      	ldr	r2, [pc, #140]	@ (800e814 <TIM_Base_SetConfig+0x1f0>)
 800e788:	4293      	cmp	r3, r2
 800e78a:	d017      	beq.n	800e7bc <TIM_Base_SetConfig+0x198>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	4a22      	ldr	r2, [pc, #136]	@ (800e818 <TIM_Base_SetConfig+0x1f4>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d013      	beq.n	800e7bc <TIM_Base_SetConfig+0x198>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	4a21      	ldr	r2, [pc, #132]	@ (800e81c <TIM_Base_SetConfig+0x1f8>)
 800e798:	4293      	cmp	r3, r2
 800e79a:	d00f      	beq.n	800e7bc <TIM_Base_SetConfig+0x198>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	4a20      	ldr	r2, [pc, #128]	@ (800e820 <TIM_Base_SetConfig+0x1fc>)
 800e7a0:	4293      	cmp	r3, r2
 800e7a2:	d00b      	beq.n	800e7bc <TIM_Base_SetConfig+0x198>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	4a1f      	ldr	r2, [pc, #124]	@ (800e824 <TIM_Base_SetConfig+0x200>)
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	d007      	beq.n	800e7bc <TIM_Base_SetConfig+0x198>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	4a1e      	ldr	r2, [pc, #120]	@ (800e828 <TIM_Base_SetConfig+0x204>)
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d003      	beq.n	800e7bc <TIM_Base_SetConfig+0x198>
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	4a1d      	ldr	r2, [pc, #116]	@ (800e82c <TIM_Base_SetConfig+0x208>)
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d103      	bne.n	800e7c4 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	691a      	ldr	r2, [r3, #16]
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	691b      	ldr	r3, [r3, #16]
 800e7ce:	f003 0301 	and.w	r3, r3, #1
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d105      	bne.n	800e7e2 <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	691b      	ldr	r3, [r3, #16]
 800e7da:	f023 0201 	bic.w	r2, r3, #1
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	611a      	str	r2, [r3, #16]
  }
}
 800e7e2:	bf00      	nop
 800e7e4:	3714      	adds	r7, #20
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ec:	4770      	bx	lr
 800e7ee:	bf00      	nop
 800e7f0:	40012c00 	.word	0x40012c00
 800e7f4:	50012c00 	.word	0x50012c00
 800e7f8:	40000400 	.word	0x40000400
 800e7fc:	50000400 	.word	0x50000400
 800e800:	40000800 	.word	0x40000800
 800e804:	50000800 	.word	0x50000800
 800e808:	40000c00 	.word	0x40000c00
 800e80c:	50000c00 	.word	0x50000c00
 800e810:	40013400 	.word	0x40013400
 800e814:	50013400 	.word	0x50013400
 800e818:	40014000 	.word	0x40014000
 800e81c:	50014000 	.word	0x50014000
 800e820:	40014400 	.word	0x40014400
 800e824:	50014400 	.word	0x50014400
 800e828:	40014800 	.word	0x40014800
 800e82c:	50014800 	.word	0x50014800

0800e830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e830:	b480      	push	{r7}
 800e832:	b087      	sub	sp, #28
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6a1b      	ldr	r3, [r3, #32]
 800e83e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6a1b      	ldr	r3, [r3, #32]
 800e844:	f023 0201 	bic.w	r2, r3, #1
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	699b      	ldr	r3, [r3, #24]
 800e856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e85e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f023 0303 	bic.w	r3, r3, #3
 800e86a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	68fa      	ldr	r2, [r7, #12]
 800e872:	4313      	orrs	r3, r2
 800e874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	f023 0302 	bic.w	r3, r3, #2
 800e87c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	689b      	ldr	r3, [r3, #8]
 800e882:	697a      	ldr	r2, [r7, #20]
 800e884:	4313      	orrs	r3, r2
 800e886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	4a40      	ldr	r2, [pc, #256]	@ (800e98c <TIM_OC1_SetConfig+0x15c>)
 800e88c:	4293      	cmp	r3, r2
 800e88e:	d023      	beq.n	800e8d8 <TIM_OC1_SetConfig+0xa8>
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	4a3f      	ldr	r2, [pc, #252]	@ (800e990 <TIM_OC1_SetConfig+0x160>)
 800e894:	4293      	cmp	r3, r2
 800e896:	d01f      	beq.n	800e8d8 <TIM_OC1_SetConfig+0xa8>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	4a3e      	ldr	r2, [pc, #248]	@ (800e994 <TIM_OC1_SetConfig+0x164>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d01b      	beq.n	800e8d8 <TIM_OC1_SetConfig+0xa8>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	4a3d      	ldr	r2, [pc, #244]	@ (800e998 <TIM_OC1_SetConfig+0x168>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d017      	beq.n	800e8d8 <TIM_OC1_SetConfig+0xa8>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	4a3c      	ldr	r2, [pc, #240]	@ (800e99c <TIM_OC1_SetConfig+0x16c>)
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	d013      	beq.n	800e8d8 <TIM_OC1_SetConfig+0xa8>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	4a3b      	ldr	r2, [pc, #236]	@ (800e9a0 <TIM_OC1_SetConfig+0x170>)
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	d00f      	beq.n	800e8d8 <TIM_OC1_SetConfig+0xa8>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	4a3a      	ldr	r2, [pc, #232]	@ (800e9a4 <TIM_OC1_SetConfig+0x174>)
 800e8bc:	4293      	cmp	r3, r2
 800e8be:	d00b      	beq.n	800e8d8 <TIM_OC1_SetConfig+0xa8>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	4a39      	ldr	r2, [pc, #228]	@ (800e9a8 <TIM_OC1_SetConfig+0x178>)
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d007      	beq.n	800e8d8 <TIM_OC1_SetConfig+0xa8>
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	4a38      	ldr	r2, [pc, #224]	@ (800e9ac <TIM_OC1_SetConfig+0x17c>)
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	d003      	beq.n	800e8d8 <TIM_OC1_SetConfig+0xa8>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	4a37      	ldr	r2, [pc, #220]	@ (800e9b0 <TIM_OC1_SetConfig+0x180>)
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	d10c      	bne.n	800e8f2 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	f023 0308 	bic.w	r3, r3, #8
 800e8de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	697a      	ldr	r2, [r7, #20]
 800e8e6:	4313      	orrs	r3, r2
 800e8e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	f023 0304 	bic.w	r3, r3, #4
 800e8f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	4a25      	ldr	r2, [pc, #148]	@ (800e98c <TIM_OC1_SetConfig+0x15c>)
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d023      	beq.n	800e942 <TIM_OC1_SetConfig+0x112>
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	4a24      	ldr	r2, [pc, #144]	@ (800e990 <TIM_OC1_SetConfig+0x160>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d01f      	beq.n	800e942 <TIM_OC1_SetConfig+0x112>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	4a23      	ldr	r2, [pc, #140]	@ (800e994 <TIM_OC1_SetConfig+0x164>)
 800e906:	4293      	cmp	r3, r2
 800e908:	d01b      	beq.n	800e942 <TIM_OC1_SetConfig+0x112>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	4a22      	ldr	r2, [pc, #136]	@ (800e998 <TIM_OC1_SetConfig+0x168>)
 800e90e:	4293      	cmp	r3, r2
 800e910:	d017      	beq.n	800e942 <TIM_OC1_SetConfig+0x112>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	4a21      	ldr	r2, [pc, #132]	@ (800e99c <TIM_OC1_SetConfig+0x16c>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d013      	beq.n	800e942 <TIM_OC1_SetConfig+0x112>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	4a20      	ldr	r2, [pc, #128]	@ (800e9a0 <TIM_OC1_SetConfig+0x170>)
 800e91e:	4293      	cmp	r3, r2
 800e920:	d00f      	beq.n	800e942 <TIM_OC1_SetConfig+0x112>
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	4a1f      	ldr	r2, [pc, #124]	@ (800e9a4 <TIM_OC1_SetConfig+0x174>)
 800e926:	4293      	cmp	r3, r2
 800e928:	d00b      	beq.n	800e942 <TIM_OC1_SetConfig+0x112>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	4a1e      	ldr	r2, [pc, #120]	@ (800e9a8 <TIM_OC1_SetConfig+0x178>)
 800e92e:	4293      	cmp	r3, r2
 800e930:	d007      	beq.n	800e942 <TIM_OC1_SetConfig+0x112>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	4a1d      	ldr	r2, [pc, #116]	@ (800e9ac <TIM_OC1_SetConfig+0x17c>)
 800e936:	4293      	cmp	r3, r2
 800e938:	d003      	beq.n	800e942 <TIM_OC1_SetConfig+0x112>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	4a1c      	ldr	r2, [pc, #112]	@ (800e9b0 <TIM_OC1_SetConfig+0x180>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	d111      	bne.n	800e966 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	695b      	ldr	r3, [r3, #20]
 800e956:	693a      	ldr	r2, [r7, #16]
 800e958:	4313      	orrs	r3, r2
 800e95a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	699b      	ldr	r3, [r3, #24]
 800e960:	693a      	ldr	r2, [r7, #16]
 800e962:	4313      	orrs	r3, r2
 800e964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	693a      	ldr	r2, [r7, #16]
 800e96a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	68fa      	ldr	r2, [r7, #12]
 800e970:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	685a      	ldr	r2, [r3, #4]
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	697a      	ldr	r2, [r7, #20]
 800e97e:	621a      	str	r2, [r3, #32]
}
 800e980:	bf00      	nop
 800e982:	371c      	adds	r7, #28
 800e984:	46bd      	mov	sp, r7
 800e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98a:	4770      	bx	lr
 800e98c:	40012c00 	.word	0x40012c00
 800e990:	50012c00 	.word	0x50012c00
 800e994:	40013400 	.word	0x40013400
 800e998:	50013400 	.word	0x50013400
 800e99c:	40014000 	.word	0x40014000
 800e9a0:	50014000 	.word	0x50014000
 800e9a4:	40014400 	.word	0x40014400
 800e9a8:	50014400 	.word	0x50014400
 800e9ac:	40014800 	.word	0x40014800
 800e9b0:	50014800 	.word	0x50014800

0800e9b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b087      	sub	sp, #28
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6a1b      	ldr	r3, [r3, #32]
 800e9c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6a1b      	ldr	r3, [r3, #32]
 800e9c8:	f023 0210 	bic.w	r2, r3, #16
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	685b      	ldr	r3, [r3, #4]
 800e9d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	699b      	ldr	r3, [r3, #24]
 800e9da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e9e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e9e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e9ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	021b      	lsls	r3, r3, #8
 800e9f6:	68fa      	ldr	r2, [r7, #12]
 800e9f8:	4313      	orrs	r3, r2
 800e9fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	f023 0320 	bic.w	r3, r3, #32
 800ea02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	689b      	ldr	r3, [r3, #8]
 800ea08:	011b      	lsls	r3, r3, #4
 800ea0a:	697a      	ldr	r2, [r7, #20]
 800ea0c:	4313      	orrs	r3, r2
 800ea0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	4a36      	ldr	r2, [pc, #216]	@ (800eaec <TIM_OC2_SetConfig+0x138>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d00b      	beq.n	800ea30 <TIM_OC2_SetConfig+0x7c>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	4a35      	ldr	r2, [pc, #212]	@ (800eaf0 <TIM_OC2_SetConfig+0x13c>)
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	d007      	beq.n	800ea30 <TIM_OC2_SetConfig+0x7c>
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	4a34      	ldr	r2, [pc, #208]	@ (800eaf4 <TIM_OC2_SetConfig+0x140>)
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d003      	beq.n	800ea30 <TIM_OC2_SetConfig+0x7c>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	4a33      	ldr	r2, [pc, #204]	@ (800eaf8 <TIM_OC2_SetConfig+0x144>)
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	d10d      	bne.n	800ea4c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ea36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	68db      	ldr	r3, [r3, #12]
 800ea3c:	011b      	lsls	r3, r3, #4
 800ea3e:	697a      	ldr	r2, [r7, #20]
 800ea40:	4313      	orrs	r3, r2
 800ea42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	4a27      	ldr	r2, [pc, #156]	@ (800eaec <TIM_OC2_SetConfig+0x138>)
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d023      	beq.n	800ea9c <TIM_OC2_SetConfig+0xe8>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	4a26      	ldr	r2, [pc, #152]	@ (800eaf0 <TIM_OC2_SetConfig+0x13c>)
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d01f      	beq.n	800ea9c <TIM_OC2_SetConfig+0xe8>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	4a25      	ldr	r2, [pc, #148]	@ (800eaf4 <TIM_OC2_SetConfig+0x140>)
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d01b      	beq.n	800ea9c <TIM_OC2_SetConfig+0xe8>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	4a24      	ldr	r2, [pc, #144]	@ (800eaf8 <TIM_OC2_SetConfig+0x144>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d017      	beq.n	800ea9c <TIM_OC2_SetConfig+0xe8>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	4a23      	ldr	r2, [pc, #140]	@ (800eafc <TIM_OC2_SetConfig+0x148>)
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d013      	beq.n	800ea9c <TIM_OC2_SetConfig+0xe8>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	4a22      	ldr	r2, [pc, #136]	@ (800eb00 <TIM_OC2_SetConfig+0x14c>)
 800ea78:	4293      	cmp	r3, r2
 800ea7a:	d00f      	beq.n	800ea9c <TIM_OC2_SetConfig+0xe8>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	4a21      	ldr	r2, [pc, #132]	@ (800eb04 <TIM_OC2_SetConfig+0x150>)
 800ea80:	4293      	cmp	r3, r2
 800ea82:	d00b      	beq.n	800ea9c <TIM_OC2_SetConfig+0xe8>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	4a20      	ldr	r2, [pc, #128]	@ (800eb08 <TIM_OC2_SetConfig+0x154>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d007      	beq.n	800ea9c <TIM_OC2_SetConfig+0xe8>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	4a1f      	ldr	r2, [pc, #124]	@ (800eb0c <TIM_OC2_SetConfig+0x158>)
 800ea90:	4293      	cmp	r3, r2
 800ea92:	d003      	beq.n	800ea9c <TIM_OC2_SetConfig+0xe8>
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	4a1e      	ldr	r2, [pc, #120]	@ (800eb10 <TIM_OC2_SetConfig+0x15c>)
 800ea98:	4293      	cmp	r3, r2
 800ea9a:	d113      	bne.n	800eac4 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ea9c:	693b      	ldr	r3, [r7, #16]
 800ea9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eaa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eaaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	695b      	ldr	r3, [r3, #20]
 800eab0:	009b      	lsls	r3, r3, #2
 800eab2:	693a      	ldr	r2, [r7, #16]
 800eab4:	4313      	orrs	r3, r2
 800eab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	699b      	ldr	r3, [r3, #24]
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	693a      	ldr	r2, [r7, #16]
 800eac0:	4313      	orrs	r3, r2
 800eac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	693a      	ldr	r2, [r7, #16]
 800eac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	68fa      	ldr	r2, [r7, #12]
 800eace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	685a      	ldr	r2, [r3, #4]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	697a      	ldr	r2, [r7, #20]
 800eadc:	621a      	str	r2, [r3, #32]
}
 800eade:	bf00      	nop
 800eae0:	371c      	adds	r7, #28
 800eae2:	46bd      	mov	sp, r7
 800eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae8:	4770      	bx	lr
 800eaea:	bf00      	nop
 800eaec:	40012c00 	.word	0x40012c00
 800eaf0:	50012c00 	.word	0x50012c00
 800eaf4:	40013400 	.word	0x40013400
 800eaf8:	50013400 	.word	0x50013400
 800eafc:	40014000 	.word	0x40014000
 800eb00:	50014000 	.word	0x50014000
 800eb04:	40014400 	.word	0x40014400
 800eb08:	50014400 	.word	0x50014400
 800eb0c:	40014800 	.word	0x40014800
 800eb10:	50014800 	.word	0x50014800

0800eb14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b087      	sub	sp, #28
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6a1b      	ldr	r3, [r3, #32]
 800eb22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6a1b      	ldr	r3, [r3, #32]
 800eb28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	69db      	ldr	r3, [r3, #28]
 800eb3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eb42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f023 0303 	bic.w	r3, r3, #3
 800eb4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	68fa      	ldr	r2, [r7, #12]
 800eb56:	4313      	orrs	r3, r2
 800eb58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eb60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	021b      	lsls	r3, r3, #8
 800eb68:	697a      	ldr	r2, [r7, #20]
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	4a35      	ldr	r2, [pc, #212]	@ (800ec48 <TIM_OC3_SetConfig+0x134>)
 800eb72:	4293      	cmp	r3, r2
 800eb74:	d00b      	beq.n	800eb8e <TIM_OC3_SetConfig+0x7a>
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	4a34      	ldr	r2, [pc, #208]	@ (800ec4c <TIM_OC3_SetConfig+0x138>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d007      	beq.n	800eb8e <TIM_OC3_SetConfig+0x7a>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	4a33      	ldr	r2, [pc, #204]	@ (800ec50 <TIM_OC3_SetConfig+0x13c>)
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d003      	beq.n	800eb8e <TIM_OC3_SetConfig+0x7a>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	4a32      	ldr	r2, [pc, #200]	@ (800ec54 <TIM_OC3_SetConfig+0x140>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d10d      	bne.n	800ebaa <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eb94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	68db      	ldr	r3, [r3, #12]
 800eb9a:	021b      	lsls	r3, r3, #8
 800eb9c:	697a      	ldr	r2, [r7, #20]
 800eb9e:	4313      	orrs	r3, r2
 800eba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4a26      	ldr	r2, [pc, #152]	@ (800ec48 <TIM_OC3_SetConfig+0x134>)
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d023      	beq.n	800ebfa <TIM_OC3_SetConfig+0xe6>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	4a25      	ldr	r2, [pc, #148]	@ (800ec4c <TIM_OC3_SetConfig+0x138>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d01f      	beq.n	800ebfa <TIM_OC3_SetConfig+0xe6>
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	4a24      	ldr	r2, [pc, #144]	@ (800ec50 <TIM_OC3_SetConfig+0x13c>)
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	d01b      	beq.n	800ebfa <TIM_OC3_SetConfig+0xe6>
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	4a23      	ldr	r2, [pc, #140]	@ (800ec54 <TIM_OC3_SetConfig+0x140>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d017      	beq.n	800ebfa <TIM_OC3_SetConfig+0xe6>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	4a22      	ldr	r2, [pc, #136]	@ (800ec58 <TIM_OC3_SetConfig+0x144>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d013      	beq.n	800ebfa <TIM_OC3_SetConfig+0xe6>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	4a21      	ldr	r2, [pc, #132]	@ (800ec5c <TIM_OC3_SetConfig+0x148>)
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d00f      	beq.n	800ebfa <TIM_OC3_SetConfig+0xe6>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	4a20      	ldr	r2, [pc, #128]	@ (800ec60 <TIM_OC3_SetConfig+0x14c>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d00b      	beq.n	800ebfa <TIM_OC3_SetConfig+0xe6>
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	4a1f      	ldr	r2, [pc, #124]	@ (800ec64 <TIM_OC3_SetConfig+0x150>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d007      	beq.n	800ebfa <TIM_OC3_SetConfig+0xe6>
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	4a1e      	ldr	r2, [pc, #120]	@ (800ec68 <TIM_OC3_SetConfig+0x154>)
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d003      	beq.n	800ebfa <TIM_OC3_SetConfig+0xe6>
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	4a1d      	ldr	r2, [pc, #116]	@ (800ec6c <TIM_OC3_SetConfig+0x158>)
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d113      	bne.n	800ec22 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ec00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ec08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	695b      	ldr	r3, [r3, #20]
 800ec0e:	011b      	lsls	r3, r3, #4
 800ec10:	693a      	ldr	r2, [r7, #16]
 800ec12:	4313      	orrs	r3, r2
 800ec14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	699b      	ldr	r3, [r3, #24]
 800ec1a:	011b      	lsls	r3, r3, #4
 800ec1c:	693a      	ldr	r2, [r7, #16]
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	693a      	ldr	r2, [r7, #16]
 800ec26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	68fa      	ldr	r2, [r7, #12]
 800ec2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	685a      	ldr	r2, [r3, #4]
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	697a      	ldr	r2, [r7, #20]
 800ec3a:	621a      	str	r2, [r3, #32]
}
 800ec3c:	bf00      	nop
 800ec3e:	371c      	adds	r7, #28
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr
 800ec48:	40012c00 	.word	0x40012c00
 800ec4c:	50012c00 	.word	0x50012c00
 800ec50:	40013400 	.word	0x40013400
 800ec54:	50013400 	.word	0x50013400
 800ec58:	40014000 	.word	0x40014000
 800ec5c:	50014000 	.word	0x50014000
 800ec60:	40014400 	.word	0x40014400
 800ec64:	50014400 	.word	0x50014400
 800ec68:	40014800 	.word	0x40014800
 800ec6c:	50014800 	.word	0x50014800

0800ec70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b087      	sub	sp, #28
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6a1b      	ldr	r3, [r3, #32]
 800ec7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6a1b      	ldr	r3, [r3, #32]
 800ec84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	69db      	ldr	r3, [r3, #28]
 800ec96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ec9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ecaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	021b      	lsls	r3, r3, #8
 800ecb2:	68fa      	ldr	r2, [r7, #12]
 800ecb4:	4313      	orrs	r3, r2
 800ecb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ecbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	689b      	ldr	r3, [r3, #8]
 800ecc4:	031b      	lsls	r3, r3, #12
 800ecc6:	697a      	ldr	r2, [r7, #20]
 800ecc8:	4313      	orrs	r3, r2
 800ecca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	4a36      	ldr	r2, [pc, #216]	@ (800eda8 <TIM_OC4_SetConfig+0x138>)
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	d00b      	beq.n	800ecec <TIM_OC4_SetConfig+0x7c>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	4a35      	ldr	r2, [pc, #212]	@ (800edac <TIM_OC4_SetConfig+0x13c>)
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d007      	beq.n	800ecec <TIM_OC4_SetConfig+0x7c>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	4a34      	ldr	r2, [pc, #208]	@ (800edb0 <TIM_OC4_SetConfig+0x140>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d003      	beq.n	800ecec <TIM_OC4_SetConfig+0x7c>
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	4a33      	ldr	r2, [pc, #204]	@ (800edb4 <TIM_OC4_SetConfig+0x144>)
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d10d      	bne.n	800ed08 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ecf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	68db      	ldr	r3, [r3, #12]
 800ecf8:	031b      	lsls	r3, r3, #12
 800ecfa:	697a      	ldr	r2, [r7, #20]
 800ecfc:	4313      	orrs	r3, r2
 800ecfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ed06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	4a27      	ldr	r2, [pc, #156]	@ (800eda8 <TIM_OC4_SetConfig+0x138>)
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	d023      	beq.n	800ed58 <TIM_OC4_SetConfig+0xe8>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	4a26      	ldr	r2, [pc, #152]	@ (800edac <TIM_OC4_SetConfig+0x13c>)
 800ed14:	4293      	cmp	r3, r2
 800ed16:	d01f      	beq.n	800ed58 <TIM_OC4_SetConfig+0xe8>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	4a25      	ldr	r2, [pc, #148]	@ (800edb0 <TIM_OC4_SetConfig+0x140>)
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	d01b      	beq.n	800ed58 <TIM_OC4_SetConfig+0xe8>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	4a24      	ldr	r2, [pc, #144]	@ (800edb4 <TIM_OC4_SetConfig+0x144>)
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d017      	beq.n	800ed58 <TIM_OC4_SetConfig+0xe8>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	4a23      	ldr	r2, [pc, #140]	@ (800edb8 <TIM_OC4_SetConfig+0x148>)
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	d013      	beq.n	800ed58 <TIM_OC4_SetConfig+0xe8>
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	4a22      	ldr	r2, [pc, #136]	@ (800edbc <TIM_OC4_SetConfig+0x14c>)
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d00f      	beq.n	800ed58 <TIM_OC4_SetConfig+0xe8>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	4a21      	ldr	r2, [pc, #132]	@ (800edc0 <TIM_OC4_SetConfig+0x150>)
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	d00b      	beq.n	800ed58 <TIM_OC4_SetConfig+0xe8>
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	4a20      	ldr	r2, [pc, #128]	@ (800edc4 <TIM_OC4_SetConfig+0x154>)
 800ed44:	4293      	cmp	r3, r2
 800ed46:	d007      	beq.n	800ed58 <TIM_OC4_SetConfig+0xe8>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	4a1f      	ldr	r2, [pc, #124]	@ (800edc8 <TIM_OC4_SetConfig+0x158>)
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d003      	beq.n	800ed58 <TIM_OC4_SetConfig+0xe8>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	4a1e      	ldr	r2, [pc, #120]	@ (800edcc <TIM_OC4_SetConfig+0x15c>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d113      	bne.n	800ed80 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ed5e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ed66:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	695b      	ldr	r3, [r3, #20]
 800ed6c:	019b      	lsls	r3, r3, #6
 800ed6e:	693a      	ldr	r2, [r7, #16]
 800ed70:	4313      	orrs	r3, r2
 800ed72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	699b      	ldr	r3, [r3, #24]
 800ed78:	019b      	lsls	r3, r3, #6
 800ed7a:	693a      	ldr	r2, [r7, #16]
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	693a      	ldr	r2, [r7, #16]
 800ed84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	68fa      	ldr	r2, [r7, #12]
 800ed8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	685a      	ldr	r2, [r3, #4]
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	697a      	ldr	r2, [r7, #20]
 800ed98:	621a      	str	r2, [r3, #32]
}
 800ed9a:	bf00      	nop
 800ed9c:	371c      	adds	r7, #28
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda4:	4770      	bx	lr
 800eda6:	bf00      	nop
 800eda8:	40012c00 	.word	0x40012c00
 800edac:	50012c00 	.word	0x50012c00
 800edb0:	40013400 	.word	0x40013400
 800edb4:	50013400 	.word	0x50013400
 800edb8:	40014000 	.word	0x40014000
 800edbc:	50014000 	.word	0x50014000
 800edc0:	40014400 	.word	0x40014400
 800edc4:	50014400 	.word	0x50014400
 800edc8:	40014800 	.word	0x40014800
 800edcc:	50014800 	.word	0x50014800

0800edd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b087      	sub	sp, #28
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6a1b      	ldr	r3, [r3, #32]
 800edde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6a1b      	ldr	r3, [r3, #32]
 800ede4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800edfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	68fa      	ldr	r2, [r7, #12]
 800ee0a:	4313      	orrs	r3, r2
 800ee0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ee14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	689b      	ldr	r3, [r3, #8]
 800ee1a:	041b      	lsls	r3, r3, #16
 800ee1c:	693a      	ldr	r2, [r7, #16]
 800ee1e:	4313      	orrs	r3, r2
 800ee20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	4a21      	ldr	r2, [pc, #132]	@ (800eeac <TIM_OC5_SetConfig+0xdc>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d023      	beq.n	800ee72 <TIM_OC5_SetConfig+0xa2>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	4a20      	ldr	r2, [pc, #128]	@ (800eeb0 <TIM_OC5_SetConfig+0xe0>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d01f      	beq.n	800ee72 <TIM_OC5_SetConfig+0xa2>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	4a1f      	ldr	r2, [pc, #124]	@ (800eeb4 <TIM_OC5_SetConfig+0xe4>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d01b      	beq.n	800ee72 <TIM_OC5_SetConfig+0xa2>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	4a1e      	ldr	r2, [pc, #120]	@ (800eeb8 <TIM_OC5_SetConfig+0xe8>)
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d017      	beq.n	800ee72 <TIM_OC5_SetConfig+0xa2>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	4a1d      	ldr	r2, [pc, #116]	@ (800eebc <TIM_OC5_SetConfig+0xec>)
 800ee46:	4293      	cmp	r3, r2
 800ee48:	d013      	beq.n	800ee72 <TIM_OC5_SetConfig+0xa2>
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	4a1c      	ldr	r2, [pc, #112]	@ (800eec0 <TIM_OC5_SetConfig+0xf0>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d00f      	beq.n	800ee72 <TIM_OC5_SetConfig+0xa2>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	4a1b      	ldr	r2, [pc, #108]	@ (800eec4 <TIM_OC5_SetConfig+0xf4>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d00b      	beq.n	800ee72 <TIM_OC5_SetConfig+0xa2>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	4a1a      	ldr	r2, [pc, #104]	@ (800eec8 <TIM_OC5_SetConfig+0xf8>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d007      	beq.n	800ee72 <TIM_OC5_SetConfig+0xa2>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	4a19      	ldr	r2, [pc, #100]	@ (800eecc <TIM_OC5_SetConfig+0xfc>)
 800ee66:	4293      	cmp	r3, r2
 800ee68:	d003      	beq.n	800ee72 <TIM_OC5_SetConfig+0xa2>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	4a18      	ldr	r2, [pc, #96]	@ (800eed0 <TIM_OC5_SetConfig+0x100>)
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d109      	bne.n	800ee86 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ee78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	695b      	ldr	r3, [r3, #20]
 800ee7e:	021b      	lsls	r3, r3, #8
 800ee80:	697a      	ldr	r2, [r7, #20]
 800ee82:	4313      	orrs	r3, r2
 800ee84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	697a      	ldr	r2, [r7, #20]
 800ee8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	68fa      	ldr	r2, [r7, #12]
 800ee90:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	685a      	ldr	r2, [r3, #4]
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	693a      	ldr	r2, [r7, #16]
 800ee9e:	621a      	str	r2, [r3, #32]
}
 800eea0:	bf00      	nop
 800eea2:	371c      	adds	r7, #28
 800eea4:	46bd      	mov	sp, r7
 800eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeaa:	4770      	bx	lr
 800eeac:	40012c00 	.word	0x40012c00
 800eeb0:	50012c00 	.word	0x50012c00
 800eeb4:	40013400 	.word	0x40013400
 800eeb8:	50013400 	.word	0x50013400
 800eebc:	40014000 	.word	0x40014000
 800eec0:	50014000 	.word	0x50014000
 800eec4:	40014400 	.word	0x40014400
 800eec8:	50014400 	.word	0x50014400
 800eecc:	40014800 	.word	0x40014800
 800eed0:	50014800 	.word	0x50014800

0800eed4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b087      	sub	sp, #28
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6a1b      	ldr	r3, [r3, #32]
 800eee2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6a1b      	ldr	r3, [r3, #32]
 800eee8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	685b      	ldr	r3, [r3, #4]
 800eef4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eefa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ef02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ef06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	021b      	lsls	r3, r3, #8
 800ef0e:	68fa      	ldr	r2, [r7, #12]
 800ef10:	4313      	orrs	r3, r2
 800ef12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ef14:	693b      	ldr	r3, [r7, #16]
 800ef16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ef1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	689b      	ldr	r3, [r3, #8]
 800ef20:	051b      	lsls	r3, r3, #20
 800ef22:	693a      	ldr	r2, [r7, #16]
 800ef24:	4313      	orrs	r3, r2
 800ef26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	4a22      	ldr	r2, [pc, #136]	@ (800efb4 <TIM_OC6_SetConfig+0xe0>)
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	d023      	beq.n	800ef78 <TIM_OC6_SetConfig+0xa4>
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	4a21      	ldr	r2, [pc, #132]	@ (800efb8 <TIM_OC6_SetConfig+0xe4>)
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d01f      	beq.n	800ef78 <TIM_OC6_SetConfig+0xa4>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	4a20      	ldr	r2, [pc, #128]	@ (800efbc <TIM_OC6_SetConfig+0xe8>)
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	d01b      	beq.n	800ef78 <TIM_OC6_SetConfig+0xa4>
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	4a1f      	ldr	r2, [pc, #124]	@ (800efc0 <TIM_OC6_SetConfig+0xec>)
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d017      	beq.n	800ef78 <TIM_OC6_SetConfig+0xa4>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	4a1e      	ldr	r2, [pc, #120]	@ (800efc4 <TIM_OC6_SetConfig+0xf0>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d013      	beq.n	800ef78 <TIM_OC6_SetConfig+0xa4>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	4a1d      	ldr	r2, [pc, #116]	@ (800efc8 <TIM_OC6_SetConfig+0xf4>)
 800ef54:	4293      	cmp	r3, r2
 800ef56:	d00f      	beq.n	800ef78 <TIM_OC6_SetConfig+0xa4>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	4a1c      	ldr	r2, [pc, #112]	@ (800efcc <TIM_OC6_SetConfig+0xf8>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d00b      	beq.n	800ef78 <TIM_OC6_SetConfig+0xa4>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	4a1b      	ldr	r2, [pc, #108]	@ (800efd0 <TIM_OC6_SetConfig+0xfc>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d007      	beq.n	800ef78 <TIM_OC6_SetConfig+0xa4>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	4a1a      	ldr	r2, [pc, #104]	@ (800efd4 <TIM_OC6_SetConfig+0x100>)
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	d003      	beq.n	800ef78 <TIM_OC6_SetConfig+0xa4>
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	4a19      	ldr	r2, [pc, #100]	@ (800efd8 <TIM_OC6_SetConfig+0x104>)
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d109      	bne.n	800ef8c <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ef7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	695b      	ldr	r3, [r3, #20]
 800ef84:	029b      	lsls	r3, r3, #10
 800ef86:	697a      	ldr	r2, [r7, #20]
 800ef88:	4313      	orrs	r3, r2
 800ef8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	697a      	ldr	r2, [r7, #20]
 800ef90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	68fa      	ldr	r2, [r7, #12]
 800ef96:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	685a      	ldr	r2, [r3, #4]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	693a      	ldr	r2, [r7, #16]
 800efa4:	621a      	str	r2, [r3, #32]
}
 800efa6:	bf00      	nop
 800efa8:	371c      	adds	r7, #28
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr
 800efb2:	bf00      	nop
 800efb4:	40012c00 	.word	0x40012c00
 800efb8:	50012c00 	.word	0x50012c00
 800efbc:	40013400 	.word	0x40013400
 800efc0:	50013400 	.word	0x50013400
 800efc4:	40014000 	.word	0x40014000
 800efc8:	50014000 	.word	0x50014000
 800efcc:	40014400 	.word	0x40014400
 800efd0:	50014400 	.word	0x50014400
 800efd4:	40014800 	.word	0x40014800
 800efd8:	50014800 	.word	0x50014800

0800efdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800efdc:	b480      	push	{r7}
 800efde:	b085      	sub	sp, #20
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
 800efe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800efec:	2b01      	cmp	r3, #1
 800efee:	d101      	bne.n	800eff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800eff0:	2302      	movs	r3, #2
 800eff2:	e097      	b.n	800f124 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2201      	movs	r2, #1
 800eff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2202      	movs	r2, #2
 800f000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	685b      	ldr	r3, [r3, #4]
 800f00a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	689b      	ldr	r3, [r3, #8]
 800f012:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4a45      	ldr	r2, [pc, #276]	@ (800f130 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d00e      	beq.n	800f03c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	4a44      	ldr	r2, [pc, #272]	@ (800f134 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800f024:	4293      	cmp	r3, r2
 800f026:	d009      	beq.n	800f03c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	4a42      	ldr	r2, [pc, #264]	@ (800f138 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800f02e:	4293      	cmp	r3, r2
 800f030:	d004      	beq.n	800f03c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	4a41      	ldr	r2, [pc, #260]	@ (800f13c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800f038:	4293      	cmp	r3, r2
 800f03a:	d108      	bne.n	800f04e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f042:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	4313      	orrs	r3, r2
 800f04c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800f054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f058:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	68fa      	ldr	r2, [r7, #12]
 800f060:	4313      	orrs	r3, r2
 800f062:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	68fa      	ldr	r2, [r7, #12]
 800f06a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	4a2f      	ldr	r2, [pc, #188]	@ (800f130 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800f072:	4293      	cmp	r3, r2
 800f074:	d040      	beq.n	800f0f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	4a2e      	ldr	r2, [pc, #184]	@ (800f134 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800f07c:	4293      	cmp	r3, r2
 800f07e:	d03b      	beq.n	800f0f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f088:	d036      	beq.n	800f0f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f092:	d031      	beq.n	800f0f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	4a29      	ldr	r2, [pc, #164]	@ (800f140 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d02c      	beq.n	800f0f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	4a28      	ldr	r2, [pc, #160]	@ (800f144 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	d027      	beq.n	800f0f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	4a26      	ldr	r2, [pc, #152]	@ (800f148 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	d022      	beq.n	800f0f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	4a25      	ldr	r2, [pc, #148]	@ (800f14c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d01d      	beq.n	800f0f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	4a23      	ldr	r2, [pc, #140]	@ (800f150 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d018      	beq.n	800f0f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	4a22      	ldr	r2, [pc, #136]	@ (800f154 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d013      	beq.n	800f0f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	4a18      	ldr	r2, [pc, #96]	@ (800f138 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d00e      	beq.n	800f0f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	4a17      	ldr	r2, [pc, #92]	@ (800f13c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	d009      	beq.n	800f0f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	4a1b      	ldr	r2, [pc, #108]	@ (800f158 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	d004      	beq.n	800f0f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	4a1a      	ldr	r2, [pc, #104]	@ (800f15c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800f0f4:	4293      	cmp	r3, r2
 800f0f6:	d10c      	bne.n	800f112 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f0fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	689b      	ldr	r3, [r3, #8]
 800f104:	68ba      	ldr	r2, [r7, #8]
 800f106:	4313      	orrs	r3, r2
 800f108:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	68ba      	ldr	r2, [r7, #8]
 800f110:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2201      	movs	r2, #1
 800f116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2200      	movs	r2, #0
 800f11e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f122:	2300      	movs	r3, #0
}
 800f124:	4618      	mov	r0, r3
 800f126:	3714      	adds	r7, #20
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr
 800f130:	40012c00 	.word	0x40012c00
 800f134:	50012c00 	.word	0x50012c00
 800f138:	40013400 	.word	0x40013400
 800f13c:	50013400 	.word	0x50013400
 800f140:	40000400 	.word	0x40000400
 800f144:	50000400 	.word	0x50000400
 800f148:	40000800 	.word	0x40000800
 800f14c:	50000800 	.word	0x50000800
 800f150:	40000c00 	.word	0x40000c00
 800f154:	50000c00 	.word	0x50000c00
 800f158:	40014000 	.word	0x40014000
 800f15c:	50014000 	.word	0x50014000

0800f160 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b082      	sub	sp, #8
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d101      	bne.n	800f172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f16e:	2301      	movs	r3, #1
 800f170:	e042      	b.n	800f1f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d106      	bne.n	800f18a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2200      	movs	r2, #0
 800f180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f7f2 ffb5 	bl	80020f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2224      	movs	r2, #36	@ 0x24
 800f18e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	681a      	ldr	r2, [r3, #0]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f022 0201 	bic.w	r2, r2, #1
 800f1a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d002      	beq.n	800f1b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f000 fd02 	bl	800fbb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f000 fb51 	bl	800f858 <UART_SetConfig>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	2b01      	cmp	r3, #1
 800f1ba:	d101      	bne.n	800f1c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f1bc:	2301      	movs	r3, #1
 800f1be:	e01b      	b.n	800f1f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	685a      	ldr	r2, [r3, #4]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f1ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	689a      	ldr	r2, [r3, #8]
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f1de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	681a      	ldr	r2, [r3, #0]
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f042 0201 	orr.w	r2, r2, #1
 800f1ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f000 fd81 	bl	800fcf8 <UART_CheckIdleState>
 800f1f6:	4603      	mov	r3, r0
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3708      	adds	r7, #8
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}

0800f200 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b0ba      	sub	sp, #232	@ 0xe8
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	69db      	ldr	r3, [r3, #28]
 800f20e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	689b      	ldr	r3, [r3, #8]
 800f222:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f226:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f22a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f22e:	4013      	ands	r3, r2
 800f230:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f234:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d11b      	bne.n	800f274 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f23c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f240:	f003 0320 	and.w	r3, r3, #32
 800f244:	2b00      	cmp	r3, #0
 800f246:	d015      	beq.n	800f274 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f24c:	f003 0320 	and.w	r3, r3, #32
 800f250:	2b00      	cmp	r3, #0
 800f252:	d105      	bne.n	800f260 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d009      	beq.n	800f274 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f264:	2b00      	cmp	r3, #0
 800f266:	f000 82cb 	beq.w	800f800 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	4798      	blx	r3
      }
      return;
 800f272:	e2c5      	b.n	800f800 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f274:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f278:	2b00      	cmp	r3, #0
 800f27a:	f000 8123 	beq.w	800f4c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f27e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f282:	4b8d      	ldr	r3, [pc, #564]	@ (800f4b8 <HAL_UART_IRQHandler+0x2b8>)
 800f284:	4013      	ands	r3, r2
 800f286:	2b00      	cmp	r3, #0
 800f288:	d106      	bne.n	800f298 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f28a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f28e:	4b8b      	ldr	r3, [pc, #556]	@ (800f4bc <HAL_UART_IRQHandler+0x2bc>)
 800f290:	4013      	ands	r3, r2
 800f292:	2b00      	cmp	r3, #0
 800f294:	f000 8116 	beq.w	800f4c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f29c:	f003 0301 	and.w	r3, r3, #1
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d011      	beq.n	800f2c8 <HAL_UART_IRQHandler+0xc8>
 800f2a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f2a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d00b      	beq.n	800f2c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	2201      	movs	r2, #1
 800f2b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2be:	f043 0201 	orr.w	r2, r3, #1
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f2c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f2cc:	f003 0302 	and.w	r3, r3, #2
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d011      	beq.n	800f2f8 <HAL_UART_IRQHandler+0xf8>
 800f2d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f2d8:	f003 0301 	and.w	r3, r3, #1
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d00b      	beq.n	800f2f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	2202      	movs	r2, #2
 800f2e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2ee:	f043 0204 	orr.w	r2, r3, #4
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f2f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f2fc:	f003 0304 	and.w	r3, r3, #4
 800f300:	2b00      	cmp	r3, #0
 800f302:	d011      	beq.n	800f328 <HAL_UART_IRQHandler+0x128>
 800f304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f308:	f003 0301 	and.w	r3, r3, #1
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d00b      	beq.n	800f328 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	2204      	movs	r2, #4
 800f316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f31e:	f043 0202 	orr.w	r2, r3, #2
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f32c:	f003 0308 	and.w	r3, r3, #8
 800f330:	2b00      	cmp	r3, #0
 800f332:	d017      	beq.n	800f364 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f338:	f003 0320 	and.w	r3, r3, #32
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d105      	bne.n	800f34c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f340:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f344:	4b5c      	ldr	r3, [pc, #368]	@ (800f4b8 <HAL_UART_IRQHandler+0x2b8>)
 800f346:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d00b      	beq.n	800f364 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	2208      	movs	r2, #8
 800f352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f35a:	f043 0208 	orr.w	r2, r3, #8
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f368:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d012      	beq.n	800f396 <HAL_UART_IRQHandler+0x196>
 800f370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f374:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d00c      	beq.n	800f396 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f384:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f38c:	f043 0220 	orr.w	r2, r3, #32
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	f000 8231 	beq.w	800f804 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f3a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3a6:	f003 0320 	and.w	r3, r3, #32
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d013      	beq.n	800f3d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f3ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f3b2:	f003 0320 	and.w	r3, r3, #32
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d105      	bne.n	800f3c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f3ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f3be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d007      	beq.n	800f3d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d003      	beq.n	800f3d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f3dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	689b      	ldr	r3, [r3, #8]
 800f3e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3ea:	2b40      	cmp	r3, #64	@ 0x40
 800f3ec:	d005      	beq.n	800f3fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f3ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f3f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d054      	beq.n	800f4a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f000 fd93 	bl	800ff26 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	689b      	ldr	r3, [r3, #8]
 800f406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f40a:	2b40      	cmp	r3, #64	@ 0x40
 800f40c:	d146      	bne.n	800f49c <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	3308      	adds	r3, #8
 800f414:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f418:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f41c:	e853 3f00 	ldrex	r3, [r3]
 800f420:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f424:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f428:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f42c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	3308      	adds	r3, #8
 800f436:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f43a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f43e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f442:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f446:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f44a:	e841 2300 	strex	r3, r2, [r1]
 800f44e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f456:	2b00      	cmp	r3, #0
 800f458:	d1d9      	bne.n	800f40e <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f460:	2b00      	cmp	r3, #0
 800f462:	d017      	beq.n	800f494 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f46a:	4a15      	ldr	r2, [pc, #84]	@ (800f4c0 <HAL_UART_IRQHandler+0x2c0>)
 800f46c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f474:	4618      	mov	r0, r3
 800f476:	f7f6 f8a1 	bl	80055bc <HAL_DMA_Abort_IT>
 800f47a:	4603      	mov	r3, r0
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d019      	beq.n	800f4b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f486:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f488:	687a      	ldr	r2, [r7, #4]
 800f48a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800f48e:	4610      	mov	r0, r2
 800f490:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f492:	e00f      	b.n	800f4b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f000 f9c9 	bl	800f82c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f49a:	e00b      	b.n	800f4b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f000 f9c5 	bl	800f82c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4a2:	e007      	b.n	800f4b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f000 f9c1 	bl	800f82c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800f4b2:	e1a7      	b.n	800f804 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4b4:	bf00      	nop
    return;
 800f4b6:	e1a5      	b.n	800f804 <HAL_UART_IRQHandler+0x604>
 800f4b8:	10000001 	.word	0x10000001
 800f4bc:	04000120 	.word	0x04000120
 800f4c0:	0800fff3 	.word	0x0800fff3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f4c8:	2b01      	cmp	r3, #1
 800f4ca:	f040 8150 	bne.w	800f76e <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f4ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f4d2:	f003 0310 	and.w	r3, r3, #16
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	f000 8149 	beq.w	800f76e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f4dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f4e0:	f003 0310 	and.w	r3, r3, #16
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	f000 8142 	beq.w	800f76e <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	2210      	movs	r2, #16
 800f4f0:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	689b      	ldr	r3, [r3, #8]
 800f4f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4fc:	2b40      	cmp	r3, #64	@ 0x40
 800f4fe:	f040 80b8 	bne.w	800f672 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f50c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f510:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f514:	2b00      	cmp	r3, #0
 800f516:	f000 8177 	beq.w	800f808 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f520:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f524:	429a      	cmp	r2, r3
 800f526:	f080 816f 	bcs.w	800f808 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f530:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f53a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f53c:	2b81      	cmp	r3, #129	@ 0x81
 800f53e:	f000 8087 	beq.w	800f650 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f54a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f54e:	e853 3f00 	ldrex	r3, [r3]
 800f552:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f556:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f55a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f55e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	461a      	mov	r2, r3
 800f568:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f56c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f570:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f574:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f578:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f57c:	e841 2300 	strex	r3, r2, [r1]
 800f580:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f584:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d1da      	bne.n	800f542 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	3308      	adds	r3, #8
 800f592:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f594:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f596:	e853 3f00 	ldrex	r3, [r3]
 800f59a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f59c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f59e:	f023 0301 	bic.w	r3, r3, #1
 800f5a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	3308      	adds	r3, #8
 800f5ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f5b0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f5b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5b6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f5b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f5bc:	e841 2300 	strex	r3, r2, [r1]
 800f5c0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f5c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d1e1      	bne.n	800f58c <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	3308      	adds	r3, #8
 800f5ce:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f5d2:	e853 3f00 	ldrex	r3, [r3]
 800f5d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f5d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f5da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f5de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	3308      	adds	r3, #8
 800f5e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f5ec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f5ee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5f0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f5f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f5f4:	e841 2300 	strex	r3, r2, [r1]
 800f5f8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f5fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d1e3      	bne.n	800f5c8 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2220      	movs	r2, #32
 800f604:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2200      	movs	r2, #0
 800f60c:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f616:	e853 3f00 	ldrex	r3, [r3]
 800f61a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f61c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f61e:	f023 0310 	bic.w	r3, r3, #16
 800f622:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	461a      	mov	r2, r3
 800f62c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f630:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f632:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f634:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f636:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f638:	e841 2300 	strex	r3, r2, [r1]
 800f63c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f63e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f640:	2b00      	cmp	r3, #0
 800f642:	d1e4      	bne.n	800f60e <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f64a:	4618      	mov	r0, r3
 800f64c:	f7f5 ff3a 	bl	80054c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2202      	movs	r2, #2
 800f654:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f662:	b29b      	uxth	r3, r3
 800f664:	1ad3      	subs	r3, r2, r3
 800f666:	b29b      	uxth	r3, r3
 800f668:	4619      	mov	r1, r3
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f000 f8e8 	bl	800f840 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f670:	e0ca      	b.n	800f808 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f67e:	b29b      	uxth	r3, r3
 800f680:	1ad3      	subs	r3, r2, r3
 800f682:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f68c:	b29b      	uxth	r3, r3
 800f68e:	2b00      	cmp	r3, #0
 800f690:	f000 80bc 	beq.w	800f80c <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 800f694:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f698:	2b00      	cmp	r3, #0
 800f69a:	f000 80b7 	beq.w	800f80c <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6a6:	e853 3f00 	ldrex	r3, [r3]
 800f6aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f6ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f6b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	461a      	mov	r2, r3
 800f6bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f6c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800f6c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f6c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f6c8:	e841 2300 	strex	r3, r2, [r1]
 800f6cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f6ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d1e4      	bne.n	800f69e <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	3308      	adds	r3, #8
 800f6da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6de:	e853 3f00 	ldrex	r3, [r3]
 800f6e2:	623b      	str	r3, [r7, #32]
   return(result);
 800f6e4:	6a3b      	ldr	r3, [r7, #32]
 800f6e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f6ea:	f023 0301 	bic.w	r3, r3, #1
 800f6ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	3308      	adds	r3, #8
 800f6f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f6fc:	633a      	str	r2, [r7, #48]	@ 0x30
 800f6fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f700:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f704:	e841 2300 	strex	r3, r2, [r1]
 800f708:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d1e1      	bne.n	800f6d4 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2220      	movs	r2, #32
 800f714:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2200      	movs	r2, #0
 800f71c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2200      	movs	r2, #0
 800f722:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	e853 3f00 	ldrex	r3, [r3]
 800f730:	60fb      	str	r3, [r7, #12]
   return(result);
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f023 0310 	bic.w	r3, r3, #16
 800f738:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	461a      	mov	r2, r3
 800f742:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f746:	61fb      	str	r3, [r7, #28]
 800f748:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f74a:	69b9      	ldr	r1, [r7, #24]
 800f74c:	69fa      	ldr	r2, [r7, #28]
 800f74e:	e841 2300 	strex	r3, r2, [r1]
 800f752:	617b      	str	r3, [r7, #20]
   return(result);
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d1e4      	bne.n	800f724 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2202      	movs	r2, #2
 800f75e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f760:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f764:	4619      	mov	r1, r3
 800f766:	6878      	ldr	r0, [r7, #4]
 800f768:	f000 f86a 	bl	800f840 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f76c:	e04e      	b.n	800f80c <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f76e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f776:	2b00      	cmp	r3, #0
 800f778:	d014      	beq.n	800f7a4 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f77a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f77e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f782:	2b00      	cmp	r3, #0
 800f784:	d105      	bne.n	800f792 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f78a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d008      	beq.n	800f7a4 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f796:	2b00      	cmp	r3, #0
 800f798:	d03a      	beq.n	800f810 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	4798      	blx	r3
    }
    return;
 800f7a2:	e035      	b.n	800f810 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f7a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d009      	beq.n	800f7c4 <HAL_UART_IRQHandler+0x5c4>
 800f7b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f7b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d003      	beq.n	800f7c4 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f000 fc2e 	bl	801001e <UART_EndTransmit_IT>
    return;
 800f7c2:	e026      	b.n	800f812 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f7c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d009      	beq.n	800f7e4 <HAL_UART_IRQHandler+0x5e4>
 800f7d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f7d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d003      	beq.n	800f7e4 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f000 fc53 	bl	8010088 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f7e2:	e016      	b.n	800f812 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f7e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d010      	beq.n	800f812 <HAL_UART_IRQHandler+0x612>
 800f7f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	da0c      	bge.n	800f812 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f000 fc3b 	bl	8010074 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f7fe:	e008      	b.n	800f812 <HAL_UART_IRQHandler+0x612>
      return;
 800f800:	bf00      	nop
 800f802:	e006      	b.n	800f812 <HAL_UART_IRQHandler+0x612>
    return;
 800f804:	bf00      	nop
 800f806:	e004      	b.n	800f812 <HAL_UART_IRQHandler+0x612>
      return;
 800f808:	bf00      	nop
 800f80a:	e002      	b.n	800f812 <HAL_UART_IRQHandler+0x612>
      return;
 800f80c:	bf00      	nop
 800f80e:	e000      	b.n	800f812 <HAL_UART_IRQHandler+0x612>
    return;
 800f810:	bf00      	nop
  }
}
 800f812:	37e8      	adds	r7, #232	@ 0xe8
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}

0800f818 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f818:	b480      	push	{r7}
 800f81a:	b083      	sub	sp, #12
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f820:	bf00      	nop
 800f822:	370c      	adds	r7, #12
 800f824:	46bd      	mov	sp, r7
 800f826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82a:	4770      	bx	lr

0800f82c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f82c:	b480      	push	{r7}
 800f82e:	b083      	sub	sp, #12
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f834:	bf00      	nop
 800f836:	370c      	adds	r7, #12
 800f838:	46bd      	mov	sp, r7
 800f83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83e:	4770      	bx	lr

0800f840 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f840:	b480      	push	{r7}
 800f842:	b083      	sub	sp, #12
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	460b      	mov	r3, r1
 800f84a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f84c:	bf00      	nop
 800f84e:	370c      	adds	r7, #12
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr

0800f858 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f85c:	b094      	sub	sp, #80	@ 0x50
 800f85e:	af00      	add	r7, sp, #0
 800f860:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f862:	2300      	movs	r3, #0
 800f864:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800f868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f86a:	681a      	ldr	r2, [r3, #0]
 800f86c:	4b83      	ldr	r3, [pc, #524]	@ (800fa7c <UART_SetConfig+0x224>)
 800f86e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f872:	689a      	ldr	r2, [r3, #8]
 800f874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f876:	691b      	ldr	r3, [r3, #16]
 800f878:	431a      	orrs	r2, r3
 800f87a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f87c:	695b      	ldr	r3, [r3, #20]
 800f87e:	431a      	orrs	r2, r3
 800f880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f882:	69db      	ldr	r3, [r3, #28]
 800f884:	4313      	orrs	r3, r2
 800f886:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	497c      	ldr	r1, [pc, #496]	@ (800fa80 <UART_SetConfig+0x228>)
 800f890:	4019      	ands	r1, r3
 800f892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f894:	681a      	ldr	r2, [r3, #0]
 800f896:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f898:	430b      	orrs	r3, r1
 800f89a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	685b      	ldr	r3, [r3, #4]
 800f8a2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800f8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8a8:	68d9      	ldr	r1, [r3, #12]
 800f8aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8ac:	681a      	ldr	r2, [r3, #0]
 800f8ae:	ea40 0301 	orr.w	r3, r0, r1
 800f8b2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8b6:	699b      	ldr	r3, [r3, #24]
 800f8b8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8bc:	681a      	ldr	r2, [r3, #0]
 800f8be:	4b6f      	ldr	r3, [pc, #444]	@ (800fa7c <UART_SetConfig+0x224>)
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d009      	beq.n	800f8d8 <UART_SetConfig+0x80>
 800f8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8c6:	681a      	ldr	r2, [r3, #0]
 800f8c8:	4b6e      	ldr	r3, [pc, #440]	@ (800fa84 <UART_SetConfig+0x22c>)
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d004      	beq.n	800f8d8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8d0:	6a1a      	ldr	r2, [r3, #32]
 800f8d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8d4:	4313      	orrs	r3, r2
 800f8d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	689b      	ldr	r3, [r3, #8]
 800f8de:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800f8e2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800f8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8e8:	681a      	ldr	r2, [r3, #0]
 800f8ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8ec:	430b      	orrs	r3, r1
 800f8ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f8f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8f6:	f023 000f 	bic.w	r0, r3, #15
 800f8fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8fc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800f8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	ea40 0301 	orr.w	r3, r0, r1
 800f906:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f90a:	681a      	ldr	r2, [r3, #0]
 800f90c:	4b5e      	ldr	r3, [pc, #376]	@ (800fa88 <UART_SetConfig+0x230>)
 800f90e:	429a      	cmp	r2, r3
 800f910:	d102      	bne.n	800f918 <UART_SetConfig+0xc0>
 800f912:	2301      	movs	r3, #1
 800f914:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f916:	e032      	b.n	800f97e <UART_SetConfig+0x126>
 800f918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f91a:	681a      	ldr	r2, [r3, #0]
 800f91c:	4b5b      	ldr	r3, [pc, #364]	@ (800fa8c <UART_SetConfig+0x234>)
 800f91e:	429a      	cmp	r2, r3
 800f920:	d102      	bne.n	800f928 <UART_SetConfig+0xd0>
 800f922:	2302      	movs	r3, #2
 800f924:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f926:	e02a      	b.n	800f97e <UART_SetConfig+0x126>
 800f928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f92a:	681a      	ldr	r2, [r3, #0]
 800f92c:	4b58      	ldr	r3, [pc, #352]	@ (800fa90 <UART_SetConfig+0x238>)
 800f92e:	429a      	cmp	r2, r3
 800f930:	d102      	bne.n	800f938 <UART_SetConfig+0xe0>
 800f932:	2304      	movs	r3, #4
 800f934:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f936:	e022      	b.n	800f97e <UART_SetConfig+0x126>
 800f938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f93a:	681a      	ldr	r2, [r3, #0]
 800f93c:	4b55      	ldr	r3, [pc, #340]	@ (800fa94 <UART_SetConfig+0x23c>)
 800f93e:	429a      	cmp	r2, r3
 800f940:	d102      	bne.n	800f948 <UART_SetConfig+0xf0>
 800f942:	2308      	movs	r3, #8
 800f944:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f946:	e01a      	b.n	800f97e <UART_SetConfig+0x126>
 800f948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f94a:	681a      	ldr	r2, [r3, #0]
 800f94c:	4b52      	ldr	r3, [pc, #328]	@ (800fa98 <UART_SetConfig+0x240>)
 800f94e:	429a      	cmp	r2, r3
 800f950:	d102      	bne.n	800f958 <UART_SetConfig+0x100>
 800f952:	2310      	movs	r3, #16
 800f954:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f956:	e012      	b.n	800f97e <UART_SetConfig+0x126>
 800f958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f95a:	681a      	ldr	r2, [r3, #0]
 800f95c:	4b4f      	ldr	r3, [pc, #316]	@ (800fa9c <UART_SetConfig+0x244>)
 800f95e:	429a      	cmp	r2, r3
 800f960:	d103      	bne.n	800f96a <UART_SetConfig+0x112>
 800f962:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800f966:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f968:	e009      	b.n	800f97e <UART_SetConfig+0x126>
 800f96a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f96c:	681a      	ldr	r2, [r3, #0]
 800f96e:	4b43      	ldr	r3, [pc, #268]	@ (800fa7c <UART_SetConfig+0x224>)
 800f970:	429a      	cmp	r2, r3
 800f972:	d102      	bne.n	800f97a <UART_SetConfig+0x122>
 800f974:	2320      	movs	r3, #32
 800f976:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f978:	e001      	b.n	800f97e <UART_SetConfig+0x126>
 800f97a:	2300      	movs	r3, #0
 800f97c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f97e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f980:	681a      	ldr	r2, [r3, #0]
 800f982:	4b3e      	ldr	r3, [pc, #248]	@ (800fa7c <UART_SetConfig+0x224>)
 800f984:	429a      	cmp	r2, r3
 800f986:	d005      	beq.n	800f994 <UART_SetConfig+0x13c>
 800f988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	4b3d      	ldr	r3, [pc, #244]	@ (800fa84 <UART_SetConfig+0x22c>)
 800f98e:	429a      	cmp	r2, r3
 800f990:	f040 8088 	bne.w	800faa4 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800f994:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f996:	2200      	movs	r2, #0
 800f998:	623b      	str	r3, [r7, #32]
 800f99a:	627a      	str	r2, [r7, #36]	@ 0x24
 800f99c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f9a0:	f7fc f980 	bl	800bca4 <HAL_RCCEx_GetPeriphCLKFreq>
 800f9a4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800f9a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	f000 80eb 	beq.w	800fb84 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9b2:	4a3b      	ldr	r2, [pc, #236]	@ (800faa0 <UART_SetConfig+0x248>)
 800f9b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f9c0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9c4:	685a      	ldr	r2, [r3, #4]
 800f9c6:	4613      	mov	r3, r2
 800f9c8:	005b      	lsls	r3, r3, #1
 800f9ca:	4413      	add	r3, r2
 800f9cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d305      	bcc.n	800f9de <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f9d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d903      	bls.n	800f9e6 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800f9de:	2301      	movs	r3, #1
 800f9e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800f9e4:	e048      	b.n	800fa78 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f9e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	61bb      	str	r3, [r7, #24]
 800f9ec:	61fa      	str	r2, [r7, #28]
 800f9ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9f2:	4a2b      	ldr	r2, [pc, #172]	@ (800faa0 <UART_SetConfig+0x248>)
 800f9f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f9f8:	b29b      	uxth	r3, r3
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	613b      	str	r3, [r7, #16]
 800f9fe:	617a      	str	r2, [r7, #20]
 800fa00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fa04:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800fa08:	f7f0 fc54 	bl	80002b4 <__aeabi_uldivmod>
 800fa0c:	4602      	mov	r2, r0
 800fa0e:	460b      	mov	r3, r1
 800fa10:	4610      	mov	r0, r2
 800fa12:	4619      	mov	r1, r3
 800fa14:	f04f 0200 	mov.w	r2, #0
 800fa18:	f04f 0300 	mov.w	r3, #0
 800fa1c:	020b      	lsls	r3, r1, #8
 800fa1e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fa22:	0202      	lsls	r2, r0, #8
 800fa24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fa26:	6849      	ldr	r1, [r1, #4]
 800fa28:	0849      	lsrs	r1, r1, #1
 800fa2a:	2000      	movs	r0, #0
 800fa2c:	460c      	mov	r4, r1
 800fa2e:	4605      	mov	r5, r0
 800fa30:	eb12 0804 	adds.w	r8, r2, r4
 800fa34:	eb43 0905 	adc.w	r9, r3, r5
 800fa38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa3a:	685b      	ldr	r3, [r3, #4]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	60bb      	str	r3, [r7, #8]
 800fa40:	60fa      	str	r2, [r7, #12]
 800fa42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fa46:	4640      	mov	r0, r8
 800fa48:	4649      	mov	r1, r9
 800fa4a:	f7f0 fc33 	bl	80002b4 <__aeabi_uldivmod>
 800fa4e:	4602      	mov	r2, r0
 800fa50:	460b      	mov	r3, r1
 800fa52:	4613      	mov	r3, r2
 800fa54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fa56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fa5c:	d308      	bcc.n	800fa70 <UART_SetConfig+0x218>
 800fa5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fa64:	d204      	bcs.n	800fa70 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800fa66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fa6c:	60da      	str	r2, [r3, #12]
 800fa6e:	e003      	b.n	800fa78 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800fa70:	2301      	movs	r3, #1
 800fa72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800fa76:	e085      	b.n	800fb84 <UART_SetConfig+0x32c>
 800fa78:	e084      	b.n	800fb84 <UART_SetConfig+0x32c>
 800fa7a:	bf00      	nop
 800fa7c:	46002400 	.word	0x46002400
 800fa80:	cfff69f3 	.word	0xcfff69f3
 800fa84:	56002400 	.word	0x56002400
 800fa88:	40013800 	.word	0x40013800
 800fa8c:	40004400 	.word	0x40004400
 800fa90:	40004800 	.word	0x40004800
 800fa94:	40004c00 	.word	0x40004c00
 800fa98:	40005000 	.word	0x40005000
 800fa9c:	40006400 	.word	0x40006400
 800faa0:	08010cbc 	.word	0x08010cbc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800faa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faa6:	69db      	ldr	r3, [r3, #28]
 800faa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800faac:	d13c      	bne.n	800fb28 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800faae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fab0:	2200      	movs	r2, #0
 800fab2:	603b      	str	r3, [r7, #0]
 800fab4:	607a      	str	r2, [r7, #4]
 800fab6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800faba:	f7fc f8f3 	bl	800bca4 <HAL_RCCEx_GetPeriphCLKFreq>
 800fabe:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d05e      	beq.n	800fb84 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faca:	4a39      	ldr	r2, [pc, #228]	@ (800fbb0 <UART_SetConfig+0x358>)
 800facc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fad0:	461a      	mov	r2, r3
 800fad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fad4:	fbb3 f3f2 	udiv	r3, r3, r2
 800fad8:	005a      	lsls	r2, r3, #1
 800fada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	085b      	lsrs	r3, r3, #1
 800fae0:	441a      	add	r2, r3
 800fae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fae4:	685b      	ldr	r3, [r3, #4]
 800fae6:	fbb2 f3f3 	udiv	r3, r2, r3
 800faea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800faec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800faee:	2b0f      	cmp	r3, #15
 800faf0:	d916      	bls.n	800fb20 <UART_SetConfig+0x2c8>
 800faf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800faf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800faf8:	d212      	bcs.n	800fb20 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fafa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fafc:	b29b      	uxth	r3, r3
 800fafe:	f023 030f 	bic.w	r3, r3, #15
 800fb02:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fb04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb06:	085b      	lsrs	r3, r3, #1
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	f003 0307 	and.w	r3, r3, #7
 800fb0e:	b29a      	uxth	r2, r3
 800fb10:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fb12:	4313      	orrs	r3, r2
 800fb14:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800fb16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800fb1c:	60da      	str	r2, [r3, #12]
 800fb1e:	e031      	b.n	800fb84 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800fb20:	2301      	movs	r3, #1
 800fb22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800fb26:	e02d      	b.n	800fb84 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800fb28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	469a      	mov	sl, r3
 800fb2e:	4693      	mov	fp, r2
 800fb30:	4650      	mov	r0, sl
 800fb32:	4659      	mov	r1, fp
 800fb34:	f7fc f8b6 	bl	800bca4 <HAL_RCCEx_GetPeriphCLKFreq>
 800fb38:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800fb3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d021      	beq.n	800fb84 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb44:	4a1a      	ldr	r2, [pc, #104]	@ (800fbb0 <UART_SetConfig+0x358>)
 800fb46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fb4e:	fbb3 f2f2 	udiv	r2, r3, r2
 800fb52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb54:	685b      	ldr	r3, [r3, #4]
 800fb56:	085b      	lsrs	r3, r3, #1
 800fb58:	441a      	add	r2, r3
 800fb5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb62:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fb64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb66:	2b0f      	cmp	r3, #15
 800fb68:	d909      	bls.n	800fb7e <UART_SetConfig+0x326>
 800fb6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fb70:	d205      	bcs.n	800fb7e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fb72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb74:	b29a      	uxth	r2, r3
 800fb76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	60da      	str	r2, [r3, #12]
 800fb7c:	e002      	b.n	800fb84 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800fb7e:	2301      	movs	r3, #1
 800fb80:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fb84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb86:	2201      	movs	r2, #1
 800fb88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800fb8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb8e:	2201      	movs	r2, #1
 800fb90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fb94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb96:	2200      	movs	r2, #0
 800fb98:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800fb9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fba0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	3750      	adds	r7, #80	@ 0x50
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fbae:	bf00      	nop
 800fbb0:	08010cbc 	.word	0x08010cbc

0800fbb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fbb4:	b480      	push	{r7}
 800fbb6:	b083      	sub	sp, #12
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbc0:	f003 0308 	and.w	r3, r3, #8
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d00a      	beq.n	800fbde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	685b      	ldr	r3, [r3, #4]
 800fbce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	430a      	orrs	r2, r1
 800fbdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbe2:	f003 0301 	and.w	r3, r3, #1
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d00a      	beq.n	800fc00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	685b      	ldr	r3, [r3, #4]
 800fbf0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	430a      	orrs	r2, r1
 800fbfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc04:	f003 0302 	and.w	r3, r3, #2
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d00a      	beq.n	800fc22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	430a      	orrs	r2, r1
 800fc20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc26:	f003 0304 	and.w	r3, r3, #4
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d00a      	beq.n	800fc44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	685b      	ldr	r3, [r3, #4]
 800fc34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	430a      	orrs	r2, r1
 800fc42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc48:	f003 0310 	and.w	r3, r3, #16
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d00a      	beq.n	800fc66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	689b      	ldr	r3, [r3, #8]
 800fc56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	430a      	orrs	r2, r1
 800fc64:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc6a:	f003 0320 	and.w	r3, r3, #32
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d00a      	beq.n	800fc88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	689b      	ldr	r3, [r3, #8]
 800fc78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	430a      	orrs	r2, r1
 800fc86:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d01a      	beq.n	800fcca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	685b      	ldr	r3, [r3, #4]
 800fc9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	430a      	orrs	r2, r1
 800fca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fcb2:	d10a      	bne.n	800fcca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	685b      	ldr	r3, [r3, #4]
 800fcba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	430a      	orrs	r2, r1
 800fcc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d00a      	beq.n	800fcec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	685b      	ldr	r3, [r3, #4]
 800fcdc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	430a      	orrs	r2, r1
 800fcea:	605a      	str	r2, [r3, #4]
  }
}
 800fcec:	bf00      	nop
 800fcee:	370c      	adds	r7, #12
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf6:	4770      	bx	lr

0800fcf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b098      	sub	sp, #96	@ 0x60
 800fcfc:	af02      	add	r7, sp, #8
 800fcfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2200      	movs	r2, #0
 800fd04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fd08:	f7f2 fe70 	bl	80029ec <HAL_GetTick>
 800fd0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	f003 0308 	and.w	r3, r3, #8
 800fd18:	2b08      	cmp	r3, #8
 800fd1a:	d12f      	bne.n	800fd7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fd1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fd20:	9300      	str	r3, [sp, #0]
 800fd22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd24:	2200      	movs	r2, #0
 800fd26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f000 f88e 	bl	800fe4c <UART_WaitOnFlagUntilTimeout>
 800fd30:	4603      	mov	r3, r0
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d022      	beq.n	800fd7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd3e:	e853 3f00 	ldrex	r3, [r3]
 800fd42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fd44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fd4a:	653b      	str	r3, [r7, #80]	@ 0x50
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	461a      	mov	r2, r3
 800fd52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fd54:	647b      	str	r3, [r7, #68]	@ 0x44
 800fd56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fd5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fd5c:	e841 2300 	strex	r3, r2, [r1]
 800fd60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fd62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d1e6      	bne.n	800fd36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2220      	movs	r2, #32
 800fd6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2200      	movs	r2, #0
 800fd74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd78:	2303      	movs	r3, #3
 800fd7a:	e063      	b.n	800fe44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	f003 0304 	and.w	r3, r3, #4
 800fd86:	2b04      	cmp	r3, #4
 800fd88:	d149      	bne.n	800fe1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fd8a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fd8e:	9300      	str	r3, [sp, #0]
 800fd90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd92:	2200      	movs	r2, #0
 800fd94:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fd98:	6878      	ldr	r0, [r7, #4]
 800fd9a:	f000 f857 	bl	800fe4c <UART_WaitOnFlagUntilTimeout>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d03c      	beq.n	800fe1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdac:	e853 3f00 	ldrex	r3, [r3]
 800fdb0:	623b      	str	r3, [r7, #32]
   return(result);
 800fdb2:	6a3b      	ldr	r3, [r7, #32]
 800fdb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fdb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	461a      	mov	r2, r3
 800fdc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fdc2:	633b      	str	r3, [r7, #48]	@ 0x30
 800fdc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fdc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fdca:	e841 2300 	strex	r3, r2, [r1]
 800fdce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fdd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d1e6      	bne.n	800fda4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	3308      	adds	r3, #8
 800fddc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	e853 3f00 	ldrex	r3, [r3]
 800fde4:	60fb      	str	r3, [r7, #12]
   return(result);
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	f023 0301 	bic.w	r3, r3, #1
 800fdec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	3308      	adds	r3, #8
 800fdf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fdf6:	61fa      	str	r2, [r7, #28]
 800fdf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdfa:	69b9      	ldr	r1, [r7, #24]
 800fdfc:	69fa      	ldr	r2, [r7, #28]
 800fdfe:	e841 2300 	strex	r3, r2, [r1]
 800fe02:	617b      	str	r3, [r7, #20]
   return(result);
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d1e5      	bne.n	800fdd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2220      	movs	r2, #32
 800fe0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	2200      	movs	r2, #0
 800fe16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fe1a:	2303      	movs	r3, #3
 800fe1c:	e012      	b.n	800fe44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2220      	movs	r2, #32
 800fe22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2220      	movs	r2, #32
 800fe2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2200      	movs	r2, #0
 800fe32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2200      	movs	r2, #0
 800fe38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fe42:	2300      	movs	r3, #0
}
 800fe44:	4618      	mov	r0, r3
 800fe46:	3758      	adds	r7, #88	@ 0x58
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}

0800fe4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b084      	sub	sp, #16
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	60f8      	str	r0, [r7, #12]
 800fe54:	60b9      	str	r1, [r7, #8]
 800fe56:	603b      	str	r3, [r7, #0]
 800fe58:	4613      	mov	r3, r2
 800fe5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fe5c:	e04f      	b.n	800fefe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fe5e:	69bb      	ldr	r3, [r7, #24]
 800fe60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe64:	d04b      	beq.n	800fefe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fe66:	f7f2 fdc1 	bl	80029ec <HAL_GetTick>
 800fe6a:	4602      	mov	r2, r0
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	1ad3      	subs	r3, r2, r3
 800fe70:	69ba      	ldr	r2, [r7, #24]
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d302      	bcc.n	800fe7c <UART_WaitOnFlagUntilTimeout+0x30>
 800fe76:	69bb      	ldr	r3, [r7, #24]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d101      	bne.n	800fe80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fe7c:	2303      	movs	r3, #3
 800fe7e:	e04e      	b.n	800ff1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	f003 0304 	and.w	r3, r3, #4
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d037      	beq.n	800fefe <UART_WaitOnFlagUntilTimeout+0xb2>
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	2b80      	cmp	r3, #128	@ 0x80
 800fe92:	d034      	beq.n	800fefe <UART_WaitOnFlagUntilTimeout+0xb2>
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	2b40      	cmp	r3, #64	@ 0x40
 800fe98:	d031      	beq.n	800fefe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	69db      	ldr	r3, [r3, #28]
 800fea0:	f003 0308 	and.w	r3, r3, #8
 800fea4:	2b08      	cmp	r3, #8
 800fea6:	d110      	bne.n	800feca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	2208      	movs	r2, #8
 800feae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800feb0:	68f8      	ldr	r0, [r7, #12]
 800feb2:	f000 f838 	bl	800ff26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	2208      	movs	r2, #8
 800feba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	2200      	movs	r2, #0
 800fec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fec6:	2301      	movs	r3, #1
 800fec8:	e029      	b.n	800ff1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	69db      	ldr	r3, [r3, #28]
 800fed0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fed4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fed8:	d111      	bne.n	800fefe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fee4:	68f8      	ldr	r0, [r7, #12]
 800fee6:	f000 f81e 	bl	800ff26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	2220      	movs	r2, #32
 800feee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	2200      	movs	r2, #0
 800fef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fefa:	2303      	movs	r3, #3
 800fefc:	e00f      	b.n	800ff1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	69da      	ldr	r2, [r3, #28]
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	4013      	ands	r3, r2
 800ff08:	68ba      	ldr	r2, [r7, #8]
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	bf0c      	ite	eq
 800ff0e:	2301      	moveq	r3, #1
 800ff10:	2300      	movne	r3, #0
 800ff12:	b2db      	uxtb	r3, r3
 800ff14:	461a      	mov	r2, r3
 800ff16:	79fb      	ldrb	r3, [r7, #7]
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	d0a0      	beq.n	800fe5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ff1c:	2300      	movs	r3, #0
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3710      	adds	r7, #16
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}

0800ff26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ff26:	b480      	push	{r7}
 800ff28:	b095      	sub	sp, #84	@ 0x54
 800ff2a:	af00      	add	r7, sp, #0
 800ff2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff36:	e853 3f00 	ldrex	r3, [r3]
 800ff3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ff3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ff42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	461a      	mov	r2, r3
 800ff4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff4c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ff4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ff52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ff54:	e841 2300 	strex	r3, r2, [r1]
 800ff58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ff5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d1e6      	bne.n	800ff2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	3308      	adds	r3, #8
 800ff66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff68:	6a3b      	ldr	r3, [r7, #32]
 800ff6a:	e853 3f00 	ldrex	r3, [r3]
 800ff6e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ff76:	f023 0301 	bic.w	r3, r3, #1
 800ff7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	3308      	adds	r3, #8
 800ff82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ff84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ff86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ff8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff8c:	e841 2300 	strex	r3, r2, [r1]
 800ff90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ff92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d1e3      	bne.n	800ff60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff9c:	2b01      	cmp	r3, #1
 800ff9e:	d118      	bne.n	800ffd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	e853 3f00 	ldrex	r3, [r3]
 800ffac:	60bb      	str	r3, [r7, #8]
   return(result);
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	f023 0310 	bic.w	r3, r3, #16
 800ffb4:	647b      	str	r3, [r7, #68]	@ 0x44
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	461a      	mov	r2, r3
 800ffbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ffbe:	61bb      	str	r3, [r7, #24]
 800ffc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffc2:	6979      	ldr	r1, [r7, #20]
 800ffc4:	69ba      	ldr	r2, [r7, #24]
 800ffc6:	e841 2300 	strex	r3, r2, [r1]
 800ffca:	613b      	str	r3, [r7, #16]
   return(result);
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d1e6      	bne.n	800ffa0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2220      	movs	r2, #32
 800ffd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ffe6:	bf00      	nop
 800ffe8:	3754      	adds	r7, #84	@ 0x54
 800ffea:	46bd      	mov	sp, r7
 800ffec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff0:	4770      	bx	lr

0800fff2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fff2:	b580      	push	{r7, lr}
 800fff4:	b084      	sub	sp, #16
 800fff6:	af00      	add	r7, sp, #0
 800fff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fffe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	2200      	movs	r2, #0
 8010004:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	2200      	movs	r2, #0
 801000c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010010:	68f8      	ldr	r0, [r7, #12]
 8010012:	f7ff fc0b 	bl	800f82c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010016:	bf00      	nop
 8010018:	3710      	adds	r7, #16
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}

0801001e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801001e:	b580      	push	{r7, lr}
 8010020:	b088      	sub	sp, #32
 8010022:	af00      	add	r7, sp, #0
 8010024:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	e853 3f00 	ldrex	r3, [r3]
 8010032:	60bb      	str	r3, [r7, #8]
   return(result);
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801003a:	61fb      	str	r3, [r7, #28]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	461a      	mov	r2, r3
 8010042:	69fb      	ldr	r3, [r7, #28]
 8010044:	61bb      	str	r3, [r7, #24]
 8010046:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010048:	6979      	ldr	r1, [r7, #20]
 801004a:	69ba      	ldr	r2, [r7, #24]
 801004c:	e841 2300 	strex	r3, r2, [r1]
 8010050:	613b      	str	r3, [r7, #16]
   return(result);
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d1e6      	bne.n	8010026 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	2220      	movs	r2, #32
 801005c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2200      	movs	r2, #0
 8010064:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f7ff fbd6 	bl	800f818 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801006c:	bf00      	nop
 801006e:	3720      	adds	r7, #32
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}

08010074 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010074:	b480      	push	{r7}
 8010076:	b083      	sub	sp, #12
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801007c:	bf00      	nop
 801007e:	370c      	adds	r7, #12
 8010080:	46bd      	mov	sp, r7
 8010082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010086:	4770      	bx	lr

08010088 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010088:	b480      	push	{r7}
 801008a:	b083      	sub	sp, #12
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010090:	bf00      	nop
 8010092:	370c      	adds	r7, #12
 8010094:	46bd      	mov	sp, r7
 8010096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009a:	4770      	bx	lr

0801009c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801009c:	b480      	push	{r7}
 801009e:	b085      	sub	sp, #20
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80100aa:	2b01      	cmp	r3, #1
 80100ac:	d101      	bne.n	80100b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80100ae:	2302      	movs	r3, #2
 80100b0:	e027      	b.n	8010102 <HAL_UARTEx_DisableFifoMode+0x66>
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2201      	movs	r2, #1
 80100b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2224      	movs	r2, #36	@ 0x24
 80100be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	681a      	ldr	r2, [r3, #0]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	f022 0201 	bic.w	r2, r2, #1
 80100d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80100e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2200      	movs	r2, #0
 80100e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	68fa      	ldr	r2, [r7, #12]
 80100ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2220      	movs	r2, #32
 80100f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2200      	movs	r2, #0
 80100fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010100:	2300      	movs	r3, #0
}
 8010102:	4618      	mov	r0, r3
 8010104:	3714      	adds	r7, #20
 8010106:	46bd      	mov	sp, r7
 8010108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010c:	4770      	bx	lr

0801010e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801010e:	b580      	push	{r7, lr}
 8010110:	b084      	sub	sp, #16
 8010112:	af00      	add	r7, sp, #0
 8010114:	6078      	str	r0, [r7, #4]
 8010116:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801011e:	2b01      	cmp	r3, #1
 8010120:	d101      	bne.n	8010126 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010122:	2302      	movs	r3, #2
 8010124:	e02d      	b.n	8010182 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	2201      	movs	r2, #1
 801012a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2224      	movs	r2, #36	@ 0x24
 8010132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	681a      	ldr	r2, [r3, #0]
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	f022 0201 	bic.w	r2, r2, #1
 801014c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	689b      	ldr	r3, [r3, #8]
 8010154:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	683a      	ldr	r2, [r7, #0]
 801015e:	430a      	orrs	r2, r1
 8010160:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f000 f850 	bl	8010208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	68fa      	ldr	r2, [r7, #12]
 801016e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2220      	movs	r2, #32
 8010174:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2200      	movs	r2, #0
 801017c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010180:	2300      	movs	r3, #0
}
 8010182:	4618      	mov	r0, r3
 8010184:	3710      	adds	r7, #16
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}

0801018a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801018a:	b580      	push	{r7, lr}
 801018c:	b084      	sub	sp, #16
 801018e:	af00      	add	r7, sp, #0
 8010190:	6078      	str	r0, [r7, #4]
 8010192:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801019a:	2b01      	cmp	r3, #1
 801019c:	d101      	bne.n	80101a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801019e:	2302      	movs	r3, #2
 80101a0:	e02d      	b.n	80101fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2201      	movs	r2, #1
 80101a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2224      	movs	r2, #36	@ 0x24
 80101ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	681a      	ldr	r2, [r3, #0]
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	f022 0201 	bic.w	r2, r2, #1
 80101c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	689b      	ldr	r3, [r3, #8]
 80101d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	683a      	ldr	r2, [r7, #0]
 80101da:	430a      	orrs	r2, r1
 80101dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f000 f812 	bl	8010208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	68fa      	ldr	r2, [r7, #12]
 80101ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2220      	movs	r2, #32
 80101f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2200      	movs	r2, #0
 80101f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80101fc:	2300      	movs	r3, #0
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3710      	adds	r7, #16
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
	...

08010208 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010208:	b480      	push	{r7}
 801020a:	b085      	sub	sp, #20
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010214:	2b00      	cmp	r3, #0
 8010216:	d108      	bne.n	801022a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2201      	movs	r2, #1
 801021c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2201      	movs	r2, #1
 8010224:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010228:	e031      	b.n	801028e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801022a:	2308      	movs	r3, #8
 801022c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801022e:	2308      	movs	r3, #8
 8010230:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	689b      	ldr	r3, [r3, #8]
 8010238:	0e5b      	lsrs	r3, r3, #25
 801023a:	b2db      	uxtb	r3, r3
 801023c:	f003 0307 	and.w	r3, r3, #7
 8010240:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	689b      	ldr	r3, [r3, #8]
 8010248:	0f5b      	lsrs	r3, r3, #29
 801024a:	b2db      	uxtb	r3, r3
 801024c:	f003 0307 	and.w	r3, r3, #7
 8010250:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010252:	7bbb      	ldrb	r3, [r7, #14]
 8010254:	7b3a      	ldrb	r2, [r7, #12]
 8010256:	4911      	ldr	r1, [pc, #68]	@ (801029c <UARTEx_SetNbDataToProcess+0x94>)
 8010258:	5c8a      	ldrb	r2, [r1, r2]
 801025a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801025e:	7b3a      	ldrb	r2, [r7, #12]
 8010260:	490f      	ldr	r1, [pc, #60]	@ (80102a0 <UARTEx_SetNbDataToProcess+0x98>)
 8010262:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010264:	fb93 f3f2 	sdiv	r3, r3, r2
 8010268:	b29a      	uxth	r2, r3
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010270:	7bfb      	ldrb	r3, [r7, #15]
 8010272:	7b7a      	ldrb	r2, [r7, #13]
 8010274:	4909      	ldr	r1, [pc, #36]	@ (801029c <UARTEx_SetNbDataToProcess+0x94>)
 8010276:	5c8a      	ldrb	r2, [r1, r2]
 8010278:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801027c:	7b7a      	ldrb	r2, [r7, #13]
 801027e:	4908      	ldr	r1, [pc, #32]	@ (80102a0 <UARTEx_SetNbDataToProcess+0x98>)
 8010280:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010282:	fb93 f3f2 	sdiv	r3, r3, r2
 8010286:	b29a      	uxth	r2, r3
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801028e:	bf00      	nop
 8010290:	3714      	adds	r7, #20
 8010292:	46bd      	mov	sp, r7
 8010294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010298:	4770      	bx	lr
 801029a:	bf00      	nop
 801029c:	08010cd4 	.word	0x08010cd4
 80102a0:	08010cdc 	.word	0x08010cdc

080102a4 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b086      	sub	sp, #24
 80102a8:	af02      	add	r7, sp, #8
 80102aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80102ac:	2300      	movs	r3, #0
 80102ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80102b0:	f7f2 fb9c 	bl	80029ec <HAL_GetTick>
 80102b4:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d102      	bne.n	80102c2 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80102bc:	2301      	movs	r3, #1
 80102be:	73fb      	strb	r3, [r7, #15]
 80102c0:	e137      	b.n	8010532 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	4a76      	ldr	r2, [pc, #472]	@ (80104a0 <HAL_XSPI_Init+0x1fc>)
 80102c8:	4293      	cmp	r3, r2
 80102ca:	d008      	beq.n	80102de <HAL_XSPI_Init+0x3a>
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	4a74      	ldr	r2, [pc, #464]	@ (80104a4 <HAL_XSPI_Init+0x200>)
 80102d2:	4293      	cmp	r3, r2
 80102d4:	d003      	beq.n	80102de <HAL_XSPI_Init+0x3a>
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	4a73      	ldr	r2, [pc, #460]	@ (80104a8 <HAL_XSPI_Init+0x204>)
 80102dc:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	4a72      	ldr	r2, [pc, #456]	@ (80104ac <HAL_XSPI_Init+0x208>)
 80102e4:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	4a6d      	ldr	r2, [pc, #436]	@ (80104a0 <HAL_XSPI_Init+0x1fc>)
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d008      	beq.n	8010302 <HAL_XSPI_Init+0x5e>
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	4a6b      	ldr	r2, [pc, #428]	@ (80104a4 <HAL_XSPI_Init+0x200>)
 80102f6:	4293      	cmp	r3, r2
 80102f8:	d003      	beq.n	8010302 <HAL_XSPI_Init+0x5e>
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	4a6a      	ldr	r2, [pc, #424]	@ (80104a8 <HAL_XSPI_Init+0x204>)
 8010300:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	4a66      	ldr	r2, [pc, #408]	@ (80104a0 <HAL_XSPI_Init+0x1fc>)
 8010308:	4293      	cmp	r3, r2
 801030a:	d008      	beq.n	801031e <HAL_XSPI_Init+0x7a>
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	4a64      	ldr	r2, [pc, #400]	@ (80104a4 <HAL_XSPI_Init+0x200>)
 8010312:	4293      	cmp	r3, r2
 8010314:	d003      	beq.n	801031e <HAL_XSPI_Init+0x7a>
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	4a63      	ldr	r2, [pc, #396]	@ (80104a8 <HAL_XSPI_Init+0x204>)
 801031c:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2200      	movs	r2, #0
 8010322:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010328:	2b00      	cmp	r3, #0
 801032a:	f040 8102 	bne.w	8010532 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f7f1 fb90 	bl	8001a54 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8010334:	f241 3188 	movw	r1, #5000	@ 0x1388
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f000 f8ff 	bl	801053c <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	689a      	ldr	r2, [r3, #8]
 8010344:	4b5a      	ldr	r3, [pc, #360]	@ (80104b0 <HAL_XSPI_Init+0x20c>)
 8010346:	4013      	ands	r3, r2
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	68d1      	ldr	r1, [r2, #12]
 801034c:	687a      	ldr	r2, [r7, #4]
 801034e:	6912      	ldr	r2, [r2, #16]
 8010350:	0412      	lsls	r2, r2, #16
 8010352:	4311      	orrs	r1, r2
 8010354:	687a      	ldr	r2, [r7, #4]
 8010356:	6952      	ldr	r2, [r2, #20]
 8010358:	3a01      	subs	r2, #1
 801035a:	0212      	lsls	r2, r2, #8
 801035c:	4311      	orrs	r1, r2
 801035e:	687a      	ldr	r2, [r7, #4]
 8010360:	69d2      	ldr	r2, [r2, #28]
 8010362:	4311      	orrs	r1, r2
 8010364:	687a      	ldr	r2, [r7, #4]
 8010366:	6812      	ldr	r2, [r2, #0]
 8010368:	430b      	orrs	r3, r1
 801036a:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	4a4b      	ldr	r2, [pc, #300]	@ (80104a0 <HAL_XSPI_Init+0x1fc>)
 8010372:	4293      	cmp	r3, r2
 8010374:	d00e      	beq.n	8010394 <HAL_XSPI_Init+0xf0>
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	4a4a      	ldr	r2, [pc, #296]	@ (80104a4 <HAL_XSPI_Init+0x200>)
 801037c:	4293      	cmp	r3, r2
 801037e:	d009      	beq.n	8010394 <HAL_XSPI_Init+0xf0>
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	4a48      	ldr	r2, [pc, #288]	@ (80104a8 <HAL_XSPI_Init+0x204>)
 8010386:	4293      	cmp	r3, r2
 8010388:	d004      	beq.n	8010394 <HAL_XSPI_Init+0xf0>
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	4a49      	ldr	r2, [pc, #292]	@ (80104b4 <HAL_XSPI_Init+0x210>)
 8010390:	4293      	cmp	r3, r2
 8010392:	d10a      	bne.n	80103aa <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	689b      	ldr	r3, [r3, #8]
 801039a:	f023 0108 	bic.w	r1, r3, #8
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	430a      	orrs	r2, r1
 80103a8:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	68db      	ldr	r3, [r3, #12]
 80103b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	6a1a      	ldr	r2, [r3, #32]
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	430a      	orrs	r2, r1
 80103be:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	691b      	ldr	r3, [r3, #16]
 80103c6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103ce:	041a      	lsls	r2, r3, #16
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	430a      	orrs	r2, r1
 80103d6:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	4a30      	ldr	r2, [pc, #192]	@ (80104a0 <HAL_XSPI_Init+0x1fc>)
 80103de:	4293      	cmp	r3, r2
 80103e0:	d00e      	beq.n	8010400 <HAL_XSPI_Init+0x15c>
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	4a2f      	ldr	r2, [pc, #188]	@ (80104a4 <HAL_XSPI_Init+0x200>)
 80103e8:	4293      	cmp	r3, r2
 80103ea:	d009      	beq.n	8010400 <HAL_XSPI_Init+0x15c>
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	4a2d      	ldr	r2, [pc, #180]	@ (80104a8 <HAL_XSPI_Init+0x204>)
 80103f2:	4293      	cmp	r3, r2
 80103f4:	d004      	beq.n	8010400 <HAL_XSPI_Init+0x15c>
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	4a2e      	ldr	r2, [pc, #184]	@ (80104b4 <HAL_XSPI_Init+0x210>)
 80103fc:	4293      	cmp	r3, r2
 80103fe:	d10a      	bne.n	8010416 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	691b      	ldr	r3, [r3, #16]
 8010406:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	430a      	orrs	r2, r1
 8010414:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	687a      	ldr	r2, [r7, #4]
 801041c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801041e:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	685b      	ldr	r3, [r3, #4]
 801042e:	3b01      	subs	r3, #1
 8010430:	021a      	lsls	r2, r3, #8
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	430a      	orrs	r2, r1
 8010438:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801043e:	9300      	str	r3, [sp, #0]
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	2200      	movs	r2, #0
 8010444:	2120      	movs	r1, #32
 8010446:	6878      	ldr	r0, [r7, #4]
 8010448:	f000 f887 	bl	801055a <XSPI_WaitFlagStateUntilTimeout>
 801044c:	4603      	mov	r3, r0
 801044e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010450:	7bfb      	ldrb	r3, [r7, #15]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d16d      	bne.n	8010532 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	68db      	ldr	r3, [r3, #12]
 801045c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	430a      	orrs	r2, r1
 801046a:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	4a0e      	ldr	r2, [pc, #56]	@ (80104ac <HAL_XSPI_Init+0x208>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d004      	beq.n	8010480 <HAL_XSPI_Init+0x1dc>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	4a0f      	ldr	r2, [pc, #60]	@ (80104b8 <HAL_XSPI_Init+0x214>)
 801047c:	4293      	cmp	r3, r2
 801047e:	d11d      	bne.n	80104bc <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010484:	9300      	str	r3, [sp, #0]
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	2200      	movs	r2, #0
 801048a:	2120      	movs	r1, #32
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f000 f864 	bl	801055a <XSPI_WaitFlagStateUntilTimeout>
 8010492:	4603      	mov	r3, r0
 8010494:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8010496:	7bfb      	ldrb	r3, [r7, #15]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d00f      	beq.n	80104bc <HAL_XSPI_Init+0x218>
          {
            return status;
 801049c:	7bfb      	ldrb	r3, [r7, #15]
 801049e:	e049      	b.n	8010534 <HAL_XSPI_Init+0x290>
 80104a0:	420d1400 	.word	0x420d1400
 80104a4:	520d1400 	.word	0x520d1400
 80104a8:	420d2400 	.word	0x420d2400
 80104ac:	420d3400 	.word	0x420d3400
 80104b0:	f8e0c0fc 	.word	0xf8e0c0fc
 80104b4:	520d2400 	.word	0x520d2400
 80104b8:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	689a      	ldr	r2, [r3, #8]
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	430a      	orrs	r2, r1
 80104d0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80104da:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104e6:	431a      	orrs	r2, r3
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	430a      	orrs	r2, r1
 80104ee:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	681a      	ldr	r2, [r3, #0]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	f042 0201 	orr.w	r2, r2, #1
 8010500:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	699b      	ldr	r3, [r3, #24]
 8010506:	2b02      	cmp	r3, #2
 8010508:	d107      	bne.n	801051a <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	689a      	ldr	r2, [r3, #8]
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	f042 0202 	orr.w	r2, r2, #2
 8010518:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	68db      	ldr	r3, [r3, #12]
 801051e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010522:	d103      	bne.n	801052c <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2201      	movs	r2, #1
 8010528:	655a      	str	r2, [r3, #84]	@ 0x54
 801052a:	e002      	b.n	8010532 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2202      	movs	r2, #2
 8010530:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8010532:	7bfb      	ldrb	r3, [r7, #15]
}
 8010534:	4618      	mov	r0, r3
 8010536:	3710      	adds	r7, #16
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 801053c:	b480      	push	{r7}
 801053e:	b083      	sub	sp, #12
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	683a      	ldr	r2, [r7, #0]
 801054a:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 801054c:	2300      	movs	r3, #0
}
 801054e:	4618      	mov	r0, r3
 8010550:	370c      	adds	r7, #12
 8010552:	46bd      	mov	sp, r7
 8010554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010558:	4770      	bx	lr

0801055a <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 801055a:	b580      	push	{r7, lr}
 801055c:	b084      	sub	sp, #16
 801055e:	af00      	add	r7, sp, #0
 8010560:	60f8      	str	r0, [r7, #12]
 8010562:	60b9      	str	r1, [r7, #8]
 8010564:	603b      	str	r3, [r7, #0]
 8010566:	4613      	mov	r3, r2
 8010568:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 801056a:	e01a      	b.n	80105a2 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801056c:	69bb      	ldr	r3, [r7, #24]
 801056e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010572:	d016      	beq.n	80105a2 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010574:	f7f2 fa3a 	bl	80029ec <HAL_GetTick>
 8010578:	4602      	mov	r2, r0
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	1ad3      	subs	r3, r2, r3
 801057e:	69ba      	ldr	r2, [r7, #24]
 8010580:	429a      	cmp	r2, r3
 8010582:	d302      	bcc.n	801058a <XSPI_WaitFlagStateUntilTimeout+0x30>
 8010584:	69bb      	ldr	r3, [r7, #24]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d10b      	bne.n	80105a2 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010590:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010596:	f043 0201 	orr.w	r2, r3, #1
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 801059e:	2303      	movs	r3, #3
 80105a0:	e00e      	b.n	80105c0 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	6a1a      	ldr	r2, [r3, #32]
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	4013      	ands	r3, r2
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	bf14      	ite	ne
 80105b0:	2301      	movne	r3, #1
 80105b2:	2300      	moveq	r3, #0
 80105b4:	b2db      	uxtb	r3, r3
 80105b6:	461a      	mov	r2, r3
 80105b8:	79fb      	ldrb	r3, [r7, #7]
 80105ba:	429a      	cmp	r2, r3
 80105bc:	d1d6      	bne.n	801056c <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80105be:	2300      	movs	r3, #0
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3710      	adds	r7, #16
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80105c8:	b084      	sub	sp, #16
 80105ca:	b580      	push	{r7, lr}
 80105cc:	b084      	sub	sp, #16
 80105ce:	af00      	add	r7, sp, #0
 80105d0:	6078      	str	r0, [r7, #4]
 80105d2:	f107 001c 	add.w	r0, r7, #28
 80105d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80105da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80105de:	2b03      	cmp	r3, #3
 80105e0:	d105      	bne.n	80105ee <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	68db      	ldr	r3, [r3, #12]
 80105e6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f000 fa8e 	bl	8010b10 <USB_CoreReset>
 80105f4:	4603      	mov	r3, r0
 80105f6:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 80105f8:	7fbb      	ldrb	r3, [r7, #30]
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	d10b      	bne.n	8010616 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	689b      	ldr	r3, [r3, #8]
 8010602:	f043 0208 	orr.w	r2, r3, #8
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	689b      	ldr	r3, [r3, #8]
 801060e:	f043 0220 	orr.w	r2, r3, #32
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8010616:	7bfb      	ldrb	r3, [r7, #15]
}
 8010618:	4618      	mov	r0, r3
 801061a:	3710      	adds	r7, #16
 801061c:	46bd      	mov	sp, r7
 801061e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010622:	b004      	add	sp, #16
 8010624:	4770      	bx	lr

08010626 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010626:	b480      	push	{r7}
 8010628:	b083      	sub	sp, #12
 801062a:	af00      	add	r7, sp, #0
 801062c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	689b      	ldr	r3, [r3, #8]
 8010632:	f023 0201 	bic.w	r2, r3, #1
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801063a:	2300      	movs	r3, #0
}
 801063c:	4618      	mov	r0, r3
 801063e:	370c      	adds	r7, #12
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr

08010648 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b084      	sub	sp, #16
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	460b      	mov	r3, r1
 8010652:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010654:	2300      	movs	r3, #0
 8010656:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	68db      	ldr	r3, [r3, #12]
 801065c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010664:	78fb      	ldrb	r3, [r7, #3]
 8010666:	2b01      	cmp	r3, #1
 8010668:	d115      	bne.n	8010696 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	68db      	ldr	r3, [r3, #12]
 801066e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010676:	200a      	movs	r0, #10
 8010678:	f7f2 f9c4 	bl	8002a04 <HAL_Delay>
      ms += 10U;
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	330a      	adds	r3, #10
 8010680:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f000 fa36 	bl	8010af4 <USB_GetMode>
 8010688:	4603      	mov	r3, r0
 801068a:	2b01      	cmp	r3, #1
 801068c:	d01e      	beq.n	80106cc <USB_SetCurrentMode+0x84>
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	2bc7      	cmp	r3, #199	@ 0xc7
 8010692:	d9f0      	bls.n	8010676 <USB_SetCurrentMode+0x2e>
 8010694:	e01a      	b.n	80106cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010696:	78fb      	ldrb	r3, [r7, #3]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d115      	bne.n	80106c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	68db      	ldr	r3, [r3, #12]
 80106a0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80106a8:	200a      	movs	r0, #10
 80106aa:	f7f2 f9ab 	bl	8002a04 <HAL_Delay>
      ms += 10U;
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	330a      	adds	r3, #10
 80106b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f000 fa1d 	bl	8010af4 <USB_GetMode>
 80106ba:	4603      	mov	r3, r0
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d005      	beq.n	80106cc <USB_SetCurrentMode+0x84>
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	2bc7      	cmp	r3, #199	@ 0xc7
 80106c4:	d9f0      	bls.n	80106a8 <USB_SetCurrentMode+0x60>
 80106c6:	e001      	b.n	80106cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80106c8:	2301      	movs	r3, #1
 80106ca:	e005      	b.n	80106d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	2bc8      	cmp	r3, #200	@ 0xc8
 80106d0:	d101      	bne.n	80106d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80106d2:	2301      	movs	r3, #1
 80106d4:	e000      	b.n	80106d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80106d6:	2300      	movs	r3, #0
}
 80106d8:	4618      	mov	r0, r3
 80106da:	3710      	adds	r7, #16
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}

080106e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80106e0:	b084      	sub	sp, #16
 80106e2:	b580      	push	{r7, lr}
 80106e4:	b086      	sub	sp, #24
 80106e6:	af00      	add	r7, sp, #0
 80106e8:	6078      	str	r0, [r7, #4]
 80106ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80106ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80106f2:	2300      	movs	r3, #0
 80106f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80106fa:	2300      	movs	r3, #0
 80106fc:	613b      	str	r3, [r7, #16]
 80106fe:	e009      	b.n	8010714 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010700:	687a      	ldr	r2, [r7, #4]
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	3340      	adds	r3, #64	@ 0x40
 8010706:	009b      	lsls	r3, r3, #2
 8010708:	4413      	add	r3, r2
 801070a:	2200      	movs	r2, #0
 801070c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801070e:	693b      	ldr	r3, [r7, #16]
 8010710:	3301      	adds	r3, #1
 8010712:	613b      	str	r3, [r7, #16]
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	2b0e      	cmp	r3, #14
 8010718:	d9f2      	bls.n	8010700 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801071e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010726:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801072a:	2b00      	cmp	r3, #0
 801072c:	d11c      	bne.n	8010768 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010734:	685b      	ldr	r3, [r3, #4]
 8010736:	68fa      	ldr	r2, [r7, #12]
 8010738:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801073c:	f043 0302 	orr.w	r3, r3, #2
 8010740:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010746:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010752:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801075e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	639a      	str	r2, [r3, #56]	@ 0x38
 8010766:	e011      	b.n	801078c <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801076c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010778:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010784:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010792:	461a      	mov	r2, r3
 8010794:	2300      	movs	r3, #0
 8010796:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8010798:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 801079c:	2b03      	cmp	r3, #3
 801079e:	d10d      	bne.n	80107bc <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80107a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d104      	bne.n	80107b2 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80107a8:	2100      	movs	r1, #0
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f000 f968 	bl	8010a80 <USB_SetDevSpeed>
 80107b0:	e008      	b.n	80107c4 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80107b2:	2101      	movs	r1, #1
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f000 f963 	bl	8010a80 <USB_SetDevSpeed>
 80107ba:	e003      	b.n	80107c4 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80107bc:	2103      	movs	r1, #3
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f000 f95e 	bl	8010a80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80107c4:	2110      	movs	r1, #16
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	f000 f8fa 	bl	80109c0 <USB_FlushTxFifo>
 80107cc:	4603      	mov	r3, r0
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d001      	beq.n	80107d6 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 80107d2:	2301      	movs	r3, #1
 80107d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80107d6:	6878      	ldr	r0, [r7, #4]
 80107d8:	f000 f924 	bl	8010a24 <USB_FlushRxFifo>
 80107dc:	4603      	mov	r3, r0
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d001      	beq.n	80107e6 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 80107e2:	2301      	movs	r3, #1
 80107e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107ec:	461a      	mov	r2, r3
 80107ee:	2300      	movs	r3, #0
 80107f0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107f8:	461a      	mov	r2, r3
 80107fa:	2300      	movs	r3, #0
 80107fc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010804:	461a      	mov	r2, r3
 8010806:	2300      	movs	r3, #0
 8010808:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801080a:	2300      	movs	r3, #0
 801080c:	613b      	str	r3, [r7, #16]
 801080e:	e043      	b.n	8010898 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	015a      	lsls	r2, r3, #5
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	4413      	add	r3, r2
 8010818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010822:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010826:	d118      	bne.n	801085a <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d10a      	bne.n	8010844 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801082e:	693b      	ldr	r3, [r7, #16]
 8010830:	015a      	lsls	r2, r3, #5
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	4413      	add	r3, r2
 8010836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801083a:	461a      	mov	r2, r3
 801083c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010840:	6013      	str	r3, [r2, #0]
 8010842:	e013      	b.n	801086c <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010844:	693b      	ldr	r3, [r7, #16]
 8010846:	015a      	lsls	r2, r3, #5
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	4413      	add	r3, r2
 801084c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010850:	461a      	mov	r2, r3
 8010852:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010856:	6013      	str	r3, [r2, #0]
 8010858:	e008      	b.n	801086c <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801085a:	693b      	ldr	r3, [r7, #16]
 801085c:	015a      	lsls	r2, r3, #5
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	4413      	add	r3, r2
 8010862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010866:	461a      	mov	r2, r3
 8010868:	2300      	movs	r3, #0
 801086a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	015a      	lsls	r2, r3, #5
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	4413      	add	r3, r2
 8010874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010878:	461a      	mov	r2, r3
 801087a:	2300      	movs	r3, #0
 801087c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	015a      	lsls	r2, r3, #5
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	4413      	add	r3, r2
 8010886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801088a:	461a      	mov	r2, r3
 801088c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010890:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	3301      	adds	r3, #1
 8010896:	613b      	str	r3, [r7, #16]
 8010898:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801089c:	461a      	mov	r2, r3
 801089e:	693b      	ldr	r3, [r7, #16]
 80108a0:	4293      	cmp	r3, r2
 80108a2:	d3b5      	bcc.n	8010810 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80108a4:	2300      	movs	r3, #0
 80108a6:	613b      	str	r3, [r7, #16]
 80108a8:	e043      	b.n	8010932 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80108aa:	693b      	ldr	r3, [r7, #16]
 80108ac:	015a      	lsls	r2, r3, #5
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	4413      	add	r3, r2
 80108b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80108bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80108c0:	d118      	bne.n	80108f4 <USB_DevInit+0x214>
    {
      if (i == 0U)
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d10a      	bne.n	80108de <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	015a      	lsls	r2, r3, #5
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	4413      	add	r3, r2
 80108d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80108d4:	461a      	mov	r2, r3
 80108d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80108da:	6013      	str	r3, [r2, #0]
 80108dc:	e013      	b.n	8010906 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	015a      	lsls	r2, r3, #5
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	4413      	add	r3, r2
 80108e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80108ea:	461a      	mov	r2, r3
 80108ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80108f0:	6013      	str	r3, [r2, #0]
 80108f2:	e008      	b.n	8010906 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80108f4:	693b      	ldr	r3, [r7, #16]
 80108f6:	015a      	lsls	r2, r3, #5
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	4413      	add	r3, r2
 80108fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010900:	461a      	mov	r2, r3
 8010902:	2300      	movs	r3, #0
 8010904:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	015a      	lsls	r2, r3, #5
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	4413      	add	r3, r2
 801090e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010912:	461a      	mov	r2, r3
 8010914:	2300      	movs	r3, #0
 8010916:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010918:	693b      	ldr	r3, [r7, #16]
 801091a:	015a      	lsls	r2, r3, #5
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	4413      	add	r3, r2
 8010920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010924:	461a      	mov	r2, r3
 8010926:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801092a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801092c:	693b      	ldr	r3, [r7, #16]
 801092e:	3301      	adds	r3, #1
 8010930:	613b      	str	r3, [r7, #16]
 8010932:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010936:	461a      	mov	r2, r3
 8010938:	693b      	ldr	r3, [r7, #16]
 801093a:	4293      	cmp	r3, r2
 801093c:	d3b5      	bcc.n	80108aa <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010944:	691b      	ldr	r3, [r3, #16]
 8010946:	68fa      	ldr	r2, [r7, #12]
 8010948:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801094c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010950:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	2200      	movs	r2, #0
 8010956:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801095e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010960:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010964:	2b00      	cmp	r3, #0
 8010966:	d105      	bne.n	8010974 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	699b      	ldr	r3, [r3, #24]
 801096c:	f043 0210 	orr.w	r2, r3, #16
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	699a      	ldr	r2, [r3, #24]
 8010978:	4b10      	ldr	r3, [pc, #64]	@ (80109bc <USB_DevInit+0x2dc>)
 801097a:	4313      	orrs	r3, r2
 801097c:	687a      	ldr	r2, [r7, #4]
 801097e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010980:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010984:	2b00      	cmp	r3, #0
 8010986:	d005      	beq.n	8010994 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	699b      	ldr	r3, [r3, #24]
 801098c:	f043 0208 	orr.w	r2, r3, #8
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010994:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010998:	2b01      	cmp	r3, #1
 801099a:	d107      	bne.n	80109ac <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	699b      	ldr	r3, [r3, #24]
 80109a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80109a4:	f043 0304 	orr.w	r3, r3, #4
 80109a8:	687a      	ldr	r2, [r7, #4]
 80109aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80109ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	3718      	adds	r7, #24
 80109b2:	46bd      	mov	sp, r7
 80109b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80109b8:	b004      	add	sp, #16
 80109ba:	4770      	bx	lr
 80109bc:	803c3800 	.word	0x803c3800

080109c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80109c0:	b480      	push	{r7}
 80109c2:	b085      	sub	sp, #20
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80109ca:	2300      	movs	r3, #0
 80109cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	3301      	adds	r3, #1
 80109d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80109da:	d901      	bls.n	80109e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80109dc:	2303      	movs	r3, #3
 80109de:	e01b      	b.n	8010a18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	691b      	ldr	r3, [r3, #16]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	daf2      	bge.n	80109ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80109e8:	2300      	movs	r3, #0
 80109ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	019b      	lsls	r3, r3, #6
 80109f0:	f043 0220 	orr.w	r2, r3, #32
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	3301      	adds	r3, #1
 80109fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010a04:	d901      	bls.n	8010a0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010a06:	2303      	movs	r3, #3
 8010a08:	e006      	b.n	8010a18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	691b      	ldr	r3, [r3, #16]
 8010a0e:	f003 0320 	and.w	r3, r3, #32
 8010a12:	2b20      	cmp	r3, #32
 8010a14:	d0f0      	beq.n	80109f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010a16:	2300      	movs	r3, #0
}
 8010a18:	4618      	mov	r0, r3
 8010a1a:	3714      	adds	r7, #20
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr

08010a24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010a24:	b480      	push	{r7}
 8010a26:	b085      	sub	sp, #20
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	3301      	adds	r3, #1
 8010a34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010a3c:	d901      	bls.n	8010a42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010a3e:	2303      	movs	r3, #3
 8010a40:	e018      	b.n	8010a74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	691b      	ldr	r3, [r3, #16]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	daf2      	bge.n	8010a30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2210      	movs	r2, #16
 8010a52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	3301      	adds	r3, #1
 8010a58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010a60:	d901      	bls.n	8010a66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010a62:	2303      	movs	r3, #3
 8010a64:	e006      	b.n	8010a74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	691b      	ldr	r3, [r3, #16]
 8010a6a:	f003 0310 	and.w	r3, r3, #16
 8010a6e:	2b10      	cmp	r3, #16
 8010a70:	d0f0      	beq.n	8010a54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010a72:	2300      	movs	r3, #0
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	3714      	adds	r7, #20
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7e:	4770      	bx	lr

08010a80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010a80:	b480      	push	{r7}
 8010a82:	b085      	sub	sp, #20
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	460b      	mov	r3, r1
 8010a8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a96:	681a      	ldr	r2, [r3, #0]
 8010a98:	78fb      	ldrb	r3, [r7, #3]
 8010a9a:	68f9      	ldr	r1, [r7, #12]
 8010a9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010aa0:	4313      	orrs	r3, r2
 8010aa2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010aa4:	2300      	movs	r3, #0
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3714      	adds	r7, #20
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab0:	4770      	bx	lr

08010ab2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010ab2:	b480      	push	{r7}
 8010ab4:	b085      	sub	sp, #20
 8010ab6:	af00      	add	r7, sp, #0
 8010ab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	68fa      	ldr	r2, [r7, #12]
 8010ac8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010acc:	f023 0303 	bic.w	r3, r3, #3
 8010ad0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010ad8:	685b      	ldr	r3, [r3, #4]
 8010ada:	68fa      	ldr	r2, [r7, #12]
 8010adc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010ae0:	f043 0302 	orr.w	r3, r3, #2
 8010ae4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010ae6:	2300      	movs	r3, #0
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3714      	adds	r7, #20
 8010aec:	46bd      	mov	sp, r7
 8010aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af2:	4770      	bx	lr

08010af4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010af4:	b480      	push	{r7}
 8010af6:	b083      	sub	sp, #12
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	695b      	ldr	r3, [r3, #20]
 8010b00:	f003 0301 	and.w	r3, r3, #1
}
 8010b04:	4618      	mov	r0, r3
 8010b06:	370c      	adds	r7, #12
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0e:	4770      	bx	lr

08010b10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010b10:	b480      	push	{r7}
 8010b12:	b085      	sub	sp, #20
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	3301      	adds	r3, #1
 8010b20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010b28:	d901      	bls.n	8010b2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010b2a:	2303      	movs	r3, #3
 8010b2c:	e01b      	b.n	8010b66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	691b      	ldr	r3, [r3, #16]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	daf2      	bge.n	8010b1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010b36:	2300      	movs	r3, #0
 8010b38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	691b      	ldr	r3, [r3, #16]
 8010b3e:	f043 0201 	orr.w	r2, r3, #1
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	3301      	adds	r3, #1
 8010b4a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010b52:	d901      	bls.n	8010b58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010b54:	2303      	movs	r3, #3
 8010b56:	e006      	b.n	8010b66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	691b      	ldr	r3, [r3, #16]
 8010b5c:	f003 0301 	and.w	r3, r3, #1
 8010b60:	2b01      	cmp	r3, #1
 8010b62:	d0f0      	beq.n	8010b46 <USB_CoreReset+0x36>

  return HAL_OK;
 8010b64:	2300      	movs	r3, #0
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3714      	adds	r7, #20
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b70:	4770      	bx	lr

08010b72 <memset>:
 8010b72:	4402      	add	r2, r0
 8010b74:	4603      	mov	r3, r0
 8010b76:	4293      	cmp	r3, r2
 8010b78:	d100      	bne.n	8010b7c <memset+0xa>
 8010b7a:	4770      	bx	lr
 8010b7c:	f803 1b01 	strb.w	r1, [r3], #1
 8010b80:	e7f9      	b.n	8010b76 <memset+0x4>
	...

08010b84 <__libc_init_array>:
 8010b84:	b570      	push	{r4, r5, r6, lr}
 8010b86:	4d0d      	ldr	r5, [pc, #52]	@ (8010bbc <__libc_init_array+0x38>)
 8010b88:	2600      	movs	r6, #0
 8010b8a:	4c0d      	ldr	r4, [pc, #52]	@ (8010bc0 <__libc_init_array+0x3c>)
 8010b8c:	1b64      	subs	r4, r4, r5
 8010b8e:	10a4      	asrs	r4, r4, #2
 8010b90:	42a6      	cmp	r6, r4
 8010b92:	d109      	bne.n	8010ba8 <__libc_init_array+0x24>
 8010b94:	4d0b      	ldr	r5, [pc, #44]	@ (8010bc4 <__libc_init_array+0x40>)
 8010b96:	2600      	movs	r6, #0
 8010b98:	4c0b      	ldr	r4, [pc, #44]	@ (8010bc8 <__libc_init_array+0x44>)
 8010b9a:	f000 f817 	bl	8010bcc <_init>
 8010b9e:	1b64      	subs	r4, r4, r5
 8010ba0:	10a4      	asrs	r4, r4, #2
 8010ba2:	42a6      	cmp	r6, r4
 8010ba4:	d105      	bne.n	8010bb2 <__libc_init_array+0x2e>
 8010ba6:	bd70      	pop	{r4, r5, r6, pc}
 8010ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010bac:	3601      	adds	r6, #1
 8010bae:	4798      	blx	r3
 8010bb0:	e7ee      	b.n	8010b90 <__libc_init_array+0xc>
 8010bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010bb6:	3601      	adds	r6, #1
 8010bb8:	4798      	blx	r3
 8010bba:	e7f2      	b.n	8010ba2 <__libc_init_array+0x1e>
 8010bbc:	08010cec 	.word	0x08010cec
 8010bc0:	08010cec 	.word	0x08010cec
 8010bc4:	08010cec 	.word	0x08010cec
 8010bc8:	08010cf0 	.word	0x08010cf0

08010bcc <_init>:
 8010bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bce:	bf00      	nop
 8010bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bd2:	bc08      	pop	{r3}
 8010bd4:	469e      	mov	lr, r3
 8010bd6:	4770      	bx	lr

08010bd8 <_fini>:
 8010bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bda:	bf00      	nop
 8010bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bde:	bc08      	pop	{r3}
 8010be0:	469e      	mov	lr, r3
 8010be2:	4770      	bx	lr
