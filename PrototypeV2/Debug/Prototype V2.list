
Prototype V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011990  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08011c04  08011c04  00012c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d04  08011d04  00013028  2**0
                  CONTENTS
  4 .ARM          00000008  08011d04  08011d04  00012d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d0c  08011d0c  00013028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011d0c  08011d0c  00012d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011d10  08011d10  00012d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08011d14  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e80  20000028  08011d3c  00013028  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20004ea8  08011d3c  00013ea8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00013028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031c20  00000000  00000000  0001305e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d22  00000000  00000000  00044c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002aa0  00000000  00000000  000499a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002171  00000000  00000000  0004c440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00047320  00000000  00000000  0004e5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035b97  00000000  00000000  000958d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bc9ab  00000000  00000000  000cb468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00287e13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd64  00000000  00000000  00287e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00293bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	20000028 	.word	0x20000028
 8000290:	00000000 	.word	0x00000000
 8000294:	08011bec 	.word	0x08011bec

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	2000002c 	.word	0x2000002c
 80002b0:	08011bec 	.word	0x08011bec

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f002 fac9 	bl	8002b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f919 	bl	800080c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005da:	f000 f983 	bl	80008e4 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005de:	f000 f9b8 	bl	8000952 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 ff27 	bl	8001434 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005e6:	f000 fbb5 	bl	8000d54 <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 80005ea:	f000 fb75 	bl	8000cd8 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 80005ee:	f000 fbe9 	bl	8000dc4 <MX_HSPI1_Init>
  MX_I2C2_Init();
 80005f2:	f000 fc65 	bl	8000ec0 <MX_I2C2_Init>
  MX_ICACHE_Init();
 80005f6:	f000 fca3 	bl	8000f40 <MX_ICACHE_Init>
  MX_LTDC_Init();
 80005fa:	f000 fcb5 	bl	8000f68 <MX_LTDC_Init>
  MX_RTC_Init();
 80005fe:	f000 fd33 	bl	8001068 <MX_RTC_Init>
  MX_TIM3_Init();
 8000602:	f000 fdeb 	bl	80011dc <MX_TIM3_Init>
  MX_ADC1_Init();
 8000606:	f000 f9b3 	bl	8000970 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800060a:	f000 fe99 	bl	8001340 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 800060e:	f000 fd79 	bl	8001104 <MX_SAI2_Init>
  MX_ADC4_Init();
 8000612:	f000 fae7 	bl	8000be4 <MX_ADC4_Init>
  MX_I2C1_Init();
 8000616:	f000 fc13 	bl	8000e40 <MX_I2C1_Init>
  MX_USB_OTG_HS_PCD_Init();
 800061a:	f000 fedd 	bl	80013d8 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM15_Init();
 800061e:	f000 fe3f 	bl	80012a0 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcGroup1, DIM(adcGroup1)); //Begins DMA transfer for first ADC
 8000622:	220d      	movs	r2, #13
 8000624:	496c      	ldr	r1, [pc, #432]	@ (80007d8 <main+0x20c>)
 8000626:	486d      	ldr	r0, [pc, #436]	@ (80007dc <main+0x210>)
 8000628:	f003 f9ea 	bl	8003a00 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc4, (uint16_t*)adcGroup4, DIM(adcGroup4)); //begins DMA transfer for fourth ADC
 800062c:	2202      	movs	r2, #2
 800062e:	496c      	ldr	r1, [pc, #432]	@ (80007e0 <main+0x214>)
 8000630:	486c      	ldr	r0, [pc, #432]	@ (80007e4 <main+0x218>)
 8000632:	f003 f9e5 	bl	8003a00 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim15);
 8000636:	486c      	ldr	r0, [pc, #432]	@ (80007e8 <main+0x21c>)
 8000638:	f00e fc62 	bl	800ef00 <HAL_TIM_Base_Start>

  HAL_Delay(2000);
 800063c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000640:	f002 fb58 	bl	8002cf4 <HAL_Delay>
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET); //Powers SHDNZ High to enable PCM6260
 8000644:	2201      	movs	r2, #1
 8000646:	2104      	movs	r1, #4
 8000648:	4868      	ldr	r0, [pc, #416]	@ (80007ec <main+0x220>)
 800064a:	f007 f941 	bl	80078d0 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 800064e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000652:	f002 fb4f 	bl	8002cf4 <HAL_Delay>

  //Transmits each instruction sequentially from pcm6260Config array
  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	e010      	b.n	800067e <main+0xb2>
  {
	  HAL_I2C_Master_Transmit(&hi2c1, devAddress, pcm6260Config[i], DIM(pcm6260Config[i]), 100);
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	4a63      	ldr	r2, [pc, #396]	@ (80007f0 <main+0x224>)
 8000662:	441a      	add	r2, r3
 8000664:	2364      	movs	r3, #100	@ 0x64
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2302      	movs	r3, #2
 800066a:	2190      	movs	r1, #144	@ 0x90
 800066c:	4861      	ldr	r0, [pc, #388]	@ (80007f4 <main+0x228>)
 800066e:	f007 fa1f 	bl	8007ab0 <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 8000672:	2064      	movs	r0, #100	@ 0x64
 8000674:	f002 fb3e 	bl	8002cf4 <HAL_Delay>
  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b19      	cmp	r3, #25
 8000682:	d9eb      	bls.n	800065c <main+0x90>
  }

  HAL_Delay(100);
 8000684:	2064      	movs	r0, #100	@ 0x64
 8000686:	f002 fb35 	bl	8002cf4 <HAL_Delay>
  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pcmData, DIM(pcmData)); //Begins DMA transfer for PCM6260
 800068a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800068e:	495a      	ldr	r1, [pc, #360]	@ (80007f8 <main+0x22c>)
 8000690:	485a      	ldr	r0, [pc, #360]	@ (80007fc <main+0x230>)
 8000692:	f00e f897 	bl	800e7c4 <HAL_SAI_Receive_DMA>
    HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)dacData, DIM(dacData));
 8000696:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800069a:	4959      	ldr	r1, [pc, #356]	@ (8000800 <main+0x234>)
 800069c:	4859      	ldr	r0, [pc, #356]	@ (8000804 <main+0x238>)
 800069e:	f00d ff8f 	bl	800e5c0 <HAL_SAI_Transmit_DMA>

  //Populates each channel in the channels struct with initializer values
  for(int i = 0; i < sizeof(channels); i++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	e08e      	b.n	80007c6 <main+0x1fa>
  {
	  for(int s = 0; s < sizeof(channels[i].channelData); s++)
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	e00d      	b.n	80006ca <main+0xfe>
	  {
		  channels[i].channelData[s] = 0;
 80006ae:	4956      	ldr	r1, [pc, #344]	@ (8000808 <main+0x23c>)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	f240 120b 	movw	r2, #267	@ 0x10b
 80006b6:	fb03 f202 	mul.w	r2, r3, r2
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	2200      	movs	r2, #0
 80006c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int s = 0; s < sizeof(channels[i].channelData); s++)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3301      	adds	r3, #1
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006d0:	d3ed      	bcc.n	80006ae <main+0xe2>
	  }
	  channels[i].channelNum = i;
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	b2d8      	uxtb	r0, r3
 80006d6:	4a4c      	ldr	r2, [pc, #304]	@ (8000808 <main+0x23c>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	f240 412c 	movw	r1, #1068	@ 0x42c
 80006de:	fb01 f303 	mul.w	r3, r1, r3
 80006e2:	4413      	add	r3, r2
 80006e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80006e8:	4602      	mov	r2, r0
 80006ea:	701a      	strb	r2, [r3, #0]
	  channels[i].volume = 0.0;
 80006ec:	4a46      	ldr	r2, [pc, #280]	@ (8000808 <main+0x23c>)
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	f240 412c 	movw	r1, #1068	@ 0x42c
 80006f4:	fb01 f303 	mul.w	r3, r1, r3
 80006f8:	4413      	add	r3, r2
 80006fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80006fe:	f04f 0200 	mov.w	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
	  channels[i].LRPan = 0.0;
 8000704:	4a40      	ldr	r2, [pc, #256]	@ (8000808 <main+0x23c>)
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	f240 412c 	movw	r1, #1068	@ 0x42c
 800070c:	fb01 f303 	mul.w	r3, r1, r3
 8000710:	4413      	add	r3, r2
 8000712:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8000716:	f04f 0200 	mov.w	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
	  channels[i].reverbEnable = false;
 800071c:	4a3a      	ldr	r2, [pc, #232]	@ (8000808 <main+0x23c>)
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	f240 412c 	movw	r1, #1068	@ 0x42c
 8000724:	fb01 f303 	mul.w	r3, r1, r3
 8000728:	4413      	add	r3, r2
 800072a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
	  channels[i].EQEnable = false;
 8000732:	4a35      	ldr	r2, [pc, #212]	@ (8000808 <main+0x23c>)
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	f240 412c 	movw	r1, #1068	@ 0x42c
 800073a:	fb01 f303 	mul.w	r3, r1, r3
 800073e:	4413      	add	r3, r2
 8000740:	f203 430d 	addw	r3, r3, #1037	@ 0x40d
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
	  channels[i].distortionEnable = false;
 8000748:	4a2f      	ldr	r2, [pc, #188]	@ (8000808 <main+0x23c>)
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	f240 412c 	movw	r1, #1068	@ 0x42c
 8000750:	fb01 f303 	mul.w	r3, r1, r3
 8000754:	4413      	add	r3, r2
 8000756:	f203 430e 	addw	r3, r3, #1038	@ 0x40e
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
	  channels[i].reverbStrength = 0.0;
 800075e:	4a2a      	ldr	r2, [pc, #168]	@ (8000808 <main+0x23c>)
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	f240 412c 	movw	r1, #1068	@ 0x42c
 8000766:	fb01 f303 	mul.w	r3, r1, r3
 800076a:	4413      	add	r3, r2
 800076c:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8000770:	f04f 0200 	mov.w	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
	  for(int r = 0; r < sizeof(channels[i].eqLevels);r++)
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	e012      	b.n	80007a2 <main+0x1d6>
	  {
		  channels[i].eqLevels[r] = 0.0;
 800077c:	4922      	ldr	r1, [pc, #136]	@ (8000808 <main+0x23c>)
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	f240 120b 	movw	r2, #267	@ 0x10b
 8000784:	fb03 f202 	mul.w	r2, r3, r2
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	4413      	add	r3, r2
 800078c:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	440b      	add	r3, r1
 8000794:	3304      	adds	r3, #4
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
	  for(int r = 0; r < sizeof(channels[i].eqLevels);r++)
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	3301      	adds	r3, #1
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	2b13      	cmp	r3, #19
 80007a6:	d9e9      	bls.n	800077c <main+0x1b0>
	  }
	  channels[i].distortionStrength = 0.0;
 80007a8:	4a17      	ldr	r2, [pc, #92]	@ (8000808 <main+0x23c>)
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	f240 412c 	movw	r1, #1068	@ 0x42c
 80007b0:	fb01 f303 	mul.w	r3, r1, r3
 80007b4:	4413      	add	r3, r2
 80007b6:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 80007ba:	f04f 0200 	mov.w	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < sizeof(channels); i++)
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	3301      	adds	r3, #1
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	f641 1207 	movw	r2, #6407	@ 0x1907
 80007cc:	4293      	cmp	r3, r2
 80007ce:	f67f af6b 	bls.w	80006a8 <main+0xdc>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d2:	bf00      	nop
 80007d4:	e7fd      	b.n	80007d2 <main+0x206>
 80007d6:	bf00      	nop
 80007d8:	20000d78 	.word	0x20000d78
 80007dc:	20000044 	.word	0x20000044
 80007e0:	20000d94 	.word	0x20000d94
 80007e4:	200000d0 	.word	0x200000d0
 80007e8:	200007b4 	.word	0x200007b4
 80007ec:	42021000 	.word	0x42021000
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000350 	.word	0x20000350
 80007f8:	20000d98 	.word	0x20000d98
 80007fc:	20000568 	.word	0x20000568
 8000800:	20002d98 	.word	0x20002d98
 8000804:	200004d0 	.word	0x200004d0
 8000808:	20003598 	.word	0x20003598

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b09e      	sub	sp, #120	@ 0x78
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0318 	add.w	r3, r7, #24
 8000816:	2260      	movs	r2, #96	@ 0x60
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f011 f9b9 	bl	8011b92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	463b      	mov	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
 800082e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000830:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000834:	f008 ff80 	bl	8009738 <HAL_PWREx_ControlVoltageScaling>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800083e:	f000 ffd5 	bl	80017ec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000842:	f008 ff69 	bl	8009718 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000846:	4b26      	ldr	r3, [pc, #152]	@ (80008e0 <SystemClock_Config+0xd4>)
 8000848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800084c:	4a24      	ldr	r2, [pc, #144]	@ (80008e0 <SystemClock_Config+0xd4>)
 800084e:	f023 0318 	bic.w	r3, r3, #24
 8000852:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000856:	2307      	movs	r3, #7
 8000858:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800085a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800085e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000860:	2381      	movs	r3, #129	@ 0x81
 8000862:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000864:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086a:	2310      	movs	r3, #16
 800086c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086e:	2302      	movs	r3, #2
 8000870:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000872:	2303      	movs	r3, #3
 8000874:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800087a:	2301      	movs	r3, #1
 800087c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 800087e:	2308      	movs	r3, #8
 8000880:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000882:	2308      	movs	r3, #8
 8000884:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000886:	2302      	movs	r3, #2
 8000888:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800088a:	2301      	movs	r3, #1
 800088c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800088e:	230c      	movs	r3, #12
 8000890:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000896:	f107 0318 	add.w	r3, r7, #24
 800089a:	4618      	mov	r0, r3
 800089c:	f009 f876 	bl	800998c <HAL_RCC_OscConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008a6:	f000 ffa1 	bl	80017ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008aa:	231f      	movs	r3, #31
 80008ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ae:	2303      	movs	r3, #3
 80008b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008c2:	463b      	mov	r3, r7
 80008c4:	2103      	movs	r1, #3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f009 ff3c 	bl	800a744 <HAL_RCC_ClockConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008d2:	f000 ff8b 	bl	80017ec <Error_Handler>
  }
}
 80008d6:	bf00      	nop
 80008d8:	3778      	adds	r7, #120	@ 0x78
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	46020c00 	.word	0x46020c00

080008e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b0b8      	sub	sp, #224	@ 0xe0
 80008e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ea:	463b      	mov	r3, r7
 80008ec:	22e0      	movs	r2, #224	@ 0xe0
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f011 f94e 	bl	8011b92 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 80008f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008fa:	f04f 0301 	mov.w	r3, #1
 80008fe:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 8000902:	2300      	movs	r3, #0
 8000904:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 8000908:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800090c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8000910:	2303      	movs	r3, #3
 8000912:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 8000914:	2301      	movs	r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 8000918:	230c      	movs	r3, #12
 800091a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 800091c:	2302      	movs	r3, #2
 800091e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 8000920:	2303      	movs	r3, #3
 8000922:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 8000924:	2304      	movs	r3, #4
 8000926:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8000928:	230c      	movs	r3, #12
 800092a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 800092c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 8000932:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	4618      	mov	r0, r3
 800093c:	f00a fad2 	bl	800aee4 <HAL_RCCEx_PeriphCLKConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 8000946:	f000 ff51 	bl	80017ec <Error_Handler>
  }
}
 800094a:	bf00      	nop
 800094c:	37e0      	adds	r7, #224	@ 0xe0
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000956:	f008 ffdb 	bl	8009910 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800095a:	2002      	movs	r0, #2
 800095c:	f008 ff78 	bl	8009850 <HAL_PWREx_ConfigSupply>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000966:	f000 ff41 	bl	80017ec <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000976:	463b      	mov	r3, r7
 8000978:	2220      	movs	r2, #32
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f011 f908 	bl	8011b92 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000982:	4b89      	ldr	r3, [pc, #548]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 8000984:	4a89      	ldr	r2, [pc, #548]	@ (8000bac <MX_ADC1_Init+0x23c>)
 8000986:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000988:	4b87      	ldr	r3, [pc, #540]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 800098a:	2200      	movs	r2, #0
 800098c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800098e:	4b86      	ldr	r3, [pc, #536]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000994:	4b84      	ldr	r3, [pc, #528]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800099a:	4b83      	ldr	r3, [pc, #524]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009a0:	4b81      	ldr	r3, [pc, #516]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a6:	4b80      	ldr	r3, [pc, #512]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 80009a8:	2204      	movs	r2, #4
 80009aa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 80009ac:	4b7e      	ldr	r3, [pc, #504]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009b2:	4b7d      	ldr	r3, [pc, #500]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 80009ba:	4b7b      	ldr	r3, [pc, #492]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 80009bc:	220d      	movs	r2, #13
 80009be:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c0:	4b79      	ldr	r3, [pc, #484]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 80009c8:	4b77      	ldr	r3, [pc, #476]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 80009ca:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 80009ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009d0:	4b75      	ldr	r3, [pc, #468]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 80009d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009d8:	4b73      	ldr	r3, [pc, #460]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 80009da:	2201      	movs	r2, #1
 80009dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80009e0:	4b71      	ldr	r3, [pc, #452]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009e6:	4b70      	ldr	r3, [pc, #448]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009ec:	4b6e      	ldr	r3, [pc, #440]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80009f2:	4b6d      	ldr	r3, [pc, #436]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 80009f4:	2203      	movs	r2, #3
 80009f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80009f8:	4b6b      	ldr	r3, [pc, #428]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a00:	4869      	ldr	r0, [pc, #420]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 8000a02:	f002 fd15 	bl	8003430 <HAL_ADC_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000a0c:	f000 feee 	bl	80017ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a10:	4b67      	ldr	r3, [pc, #412]	@ (8000bb0 <MX_ADC1_Init+0x240>)
 8000a12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a14:	2306      	movs	r3, #6
 8000a16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a20:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a22:	2304      	movs	r3, #4
 8000a24:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	485e      	ldr	r0, [pc, #376]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 8000a30:	f003 fc2c 	bl	800428c <HAL_ADC_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000a3a:	f000 fed7 	bl	80017ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a3e:	4b5d      	ldr	r3, [pc, #372]	@ (8000bb4 <MX_ADC1_Init+0x244>)
 8000a40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a42:	230c      	movs	r3, #12
 8000a44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a46:	463b      	mov	r3, r7
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4857      	ldr	r0, [pc, #348]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 8000a4c:	f003 fc1e 	bl	800428c <HAL_ADC_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000a56:	f000 fec9 	bl	80017ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a5a:	4b57      	ldr	r3, [pc, #348]	@ (8000bb8 <MX_ADC1_Init+0x248>)
 8000a5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a5e:	2312      	movs	r3, #18
 8000a60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	4619      	mov	r1, r3
 8000a66:	4850      	ldr	r0, [pc, #320]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 8000a68:	f003 fc10 	bl	800428c <HAL_ADC_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8000a72:	f000 febb 	bl	80017ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a76:	4b51      	ldr	r3, [pc, #324]	@ (8000bbc <MX_ADC1_Init+0x24c>)
 8000a78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a7a:	2318      	movs	r3, #24
 8000a7c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7e:	463b      	mov	r3, r7
 8000a80:	4619      	mov	r1, r3
 8000a82:	4849      	ldr	r0, [pc, #292]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 8000a84:	f003 fc02 	bl	800428c <HAL_ADC_ConfigChannel>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000a8e:	f000 fead 	bl	80017ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a92:	4b4b      	ldr	r3, [pc, #300]	@ (8000bc0 <MX_ADC1_Init+0x250>)
 8000a94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4841      	ldr	r0, [pc, #260]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 8000aa2:	f003 fbf3 	bl	800428c <HAL_ADC_ConfigChannel>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8000aac:	f000 fe9e 	bl	80017ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ab0:	4b44      	ldr	r3, [pc, #272]	@ (8000bc4 <MX_ADC1_Init+0x254>)
 8000ab2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000ab4:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000ab8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aba:	463b      	mov	r3, r7
 8000abc:	4619      	mov	r1, r3
 8000abe:	483a      	ldr	r0, [pc, #232]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 8000ac0:	f003 fbe4 	bl	800428c <HAL_ADC_ConfigChannel>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8000aca:	f000 fe8f 	bl	80017ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ace:	4b3e      	ldr	r3, [pc, #248]	@ (8000bc8 <MX_ADC1_Init+0x258>)
 8000ad0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000ad2:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000ad6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad8:	463b      	mov	r3, r7
 8000ada:	4619      	mov	r1, r3
 8000adc:	4832      	ldr	r0, [pc, #200]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 8000ade:	f003 fbd5 	bl	800428c <HAL_ADC_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8000ae8:	f000 fe80 	bl	80017ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000aec:	4b37      	ldr	r3, [pc, #220]	@ (8000bcc <MX_ADC1_Init+0x25c>)
 8000aee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000af0:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000af4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af6:	463b      	mov	r3, r7
 8000af8:	4619      	mov	r1, r3
 8000afa:	482b      	ldr	r0, [pc, #172]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 8000afc:	f003 fbc6 	bl	800428c <HAL_ADC_ConfigChannel>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
 8000b06:	f000 fe71 	bl	80017ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b0a:	4b31      	ldr	r3, [pc, #196]	@ (8000bd0 <MX_ADC1_Init+0x260>)
 8000b0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000b0e:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000b12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b14:	463b      	mov	r3, r7
 8000b16:	4619      	mov	r1, r3
 8000b18:	4823      	ldr	r0, [pc, #140]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 8000b1a:	f003 fbb7 	bl	800428c <HAL_ADC_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
 8000b24:	f000 fe62 	bl	80017ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000b28:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd4 <MX_ADC1_Init+0x264>)
 8000b2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000b2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b30:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b32:	463b      	mov	r3, r7
 8000b34:	4619      	mov	r1, r3
 8000b36:	481c      	ldr	r0, [pc, #112]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 8000b38:	f003 fba8 	bl	800428c <HAL_ADC_ConfigChannel>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 8000b42:	f000 fe53 	bl	80017ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000b46:	4b24      	ldr	r3, [pc, #144]	@ (8000bd8 <MX_ADC1_Init+0x268>)
 8000b48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000b4a:	f240 2306 	movw	r3, #518	@ 0x206
 8000b4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b50:	463b      	mov	r3, r7
 8000b52:	4619      	mov	r1, r3
 8000b54:	4814      	ldr	r0, [pc, #80]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 8000b56:	f003 fb99 	bl	800428c <HAL_ADC_ConfigChannel>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_ADC1_Init+0x1f4>
  {
    Error_Handler();
 8000b60:	f000 fe44 	bl	80017ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000b64:	4b1d      	ldr	r3, [pc, #116]	@ (8000bdc <MX_ADC1_Init+0x26c>)
 8000b66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000b68:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000b6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b6e:	463b      	mov	r3, r7
 8000b70:	4619      	mov	r1, r3
 8000b72:	480d      	ldr	r0, [pc, #52]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 8000b74:	f003 fb8a 	bl	800428c <HAL_ADC_ConfigChannel>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 8000b7e:	f000 fe35 	bl	80017ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b82:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <MX_ADC1_Init+0x270>)
 8000b84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000b86:	f240 2312 	movw	r3, #530	@ 0x212
 8000b8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <MX_ADC1_Init+0x238>)
 8000b92:	f003 fb7b 	bl	800428c <HAL_ADC_ConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_ADC1_Init+0x230>
  {
    Error_Handler();
 8000b9c:	f000 fe26 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3720      	adds	r7, #32
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000044 	.word	0x20000044
 8000bac:	42028000 	.word	0x42028000
 8000bb0:	04000002 	.word	0x04000002
 8000bb4:	08000004 	.word	0x08000004
 8000bb8:	0c000008 	.word	0x0c000008
 8000bbc:	10000010 	.word	0x10000010
 8000bc0:	14000020 	.word	0x14000020
 8000bc4:	1c000080 	.word	0x1c000080
 8000bc8:	20000100 	.word	0x20000100
 8000bcc:	2a000400 	.word	0x2a000400
 8000bd0:	2e000800 	.word	0x2e000800
 8000bd4:	32001000 	.word	0x32001000
 8000bd8:	3e008000 	.word	0x3e008000
 8000bdc:	42010000 	.word	0x42010000
 8000be0:	ce080000 	.word	0xce080000

08000be4 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bea:	463b      	mov	r3, r7
 8000bec:	2220      	movs	r2, #32
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f010 ffce 	bl	8011b92 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000bf6:	4b34      	ldr	r3, [pc, #208]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000bf8:	4a34      	ldr	r2, [pc, #208]	@ (8000ccc <MX_ADC4_Init+0xe8>)
 8000bfa:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bfc:	4b32      	ldr	r3, [pc, #200]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000c02:	4b31      	ldr	r3, [pc, #196]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000c04:	2204      	movs	r2, #4
 8000c06:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c08:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8000c0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000c10:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000c14:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c16:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000c18:	2204      	movs	r2, #4
 8000c1a:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000c22:	4b29      	ldr	r3, [pc, #164]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000c28:	4b27      	ldr	r3, [pc, #156]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8000c30:	4b25      	ldr	r3, [pc, #148]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000c32:	2202      	movs	r2, #2
 8000c34:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c36:	4b24      	ldr	r3, [pc, #144]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c3c:	4b22      	ldr	r3, [pc, #136]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000c42:	4b21      	ldr	r3, [pc, #132]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000c4c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000c50:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c52:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000c64:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000c6c:	4816      	ldr	r0, [pc, #88]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000c6e:	f002 fbdf 	bl	8003430 <HAL_ADC_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8000c78:	f000 fdb8 	bl	80017ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <MX_ADC4_Init+0xec>)
 8000c7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c88:	2304      	movs	r3, #4
 8000c8a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	4619      	mov	r1, r3
 8000c94:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000c96:	f003 faf9 	bl	800428c <HAL_ADC_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_ADC4_Init+0xc0>
  {
    Error_Handler();
 8000ca0:	f000 fda4 	bl	80017ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <MX_ADC4_Init+0xf0>)
 8000ca6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000cac:	463b      	mov	r3, r7
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <MX_ADC4_Init+0xe4>)
 8000cb2:	f003 faeb 	bl	800428c <HAL_ADC_ConfigChannel>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_ADC4_Init+0xdc>
  {
    Error_Handler();
 8000cbc:	f000 fd96 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	3720      	adds	r7, #32
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200000d0 	.word	0x200000d0
 8000ccc:	46021000 	.word	0x46021000
 8000cd0:	1c000080 	.word	0x1c000080
 8000cd4:	20000100 	.word	0x20000100

08000cd8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <MX_DMA2D_Init+0x74>)
 8000cde:	4a1c      	ldr	r2, [pc, #112]	@ (8000d50 <MX_DMA2D_Init+0x78>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <MX_DMA2D_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000ce8:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <MX_DMA2D_Init+0x74>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000cee:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <MX_DMA2D_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <MX_DMA2D_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_DMA2D_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000d00:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <MX_DMA2D_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000d06:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <MX_DMA2D_Init+0x74>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <MX_DMA2D_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <MX_DMA2D_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <MX_DMA2D_Init+0x74>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <MX_DMA2D_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d24:	4809      	ldr	r0, [pc, #36]	@ (8000d4c <MX_DMA2D_Init+0x74>)
 8000d26:	f005 fa3f 	bl	80061a8 <HAL_DMA2D_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000d30:	f000 fd5c 	bl	80017ec <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d34:	2101      	movs	r1, #1
 8000d36:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <MX_DMA2D_Init+0x74>)
 8000d38:	f005 fa98 	bl	800626c <HAL_DMA2D_ConfigLayer>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000d42:	f000 fd53 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000288 	.word	0x20000288
 8000d50:	4002b000 	.word	0x4002b000

08000d54 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000d5a:	4b19      	ldr	r3, [pc, #100]	@ (8000dc0 <MX_GPDMA1_Init+0x6c>)
 8000d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d60:	4a17      	ldr	r2, [pc, #92]	@ (8000dc0 <MX_GPDMA1_Init+0x6c>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000d6a:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <MX_GPDMA1_Init+0x6c>)
 8000d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	201d      	movs	r0, #29
 8000d7e:	f004 fab5 	bl	80052ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000d82:	201d      	movs	r0, #29
 8000d84:	f004 facc 	bl	8005320 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	201e      	movs	r0, #30
 8000d8e:	f004 faad 	bl	80052ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000d92:	201e      	movs	r0, #30
 8000d94:	f004 fac4 	bl	8005320 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	201f      	movs	r0, #31
 8000d9e:	f004 faa5 	bl	80052ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000da2:	201f      	movs	r0, #31
 8000da4:	f004 fabc 	bl	8005320 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2100      	movs	r1, #0
 8000dac:	2020      	movs	r0, #32
 8000dae:	f004 fa9d 	bl	80052ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8000db2:	2020      	movs	r0, #32
 8000db4:	f004 fab4 	bl	8005320 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	46020c00 	.word	0x46020c00

08000dc4 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e38 <MX_HSPI1_Init+0x74>)
 8000dca:	4a1c      	ldr	r2, [pc, #112]	@ (8000e3c <MX_HSPI1_Init+0x78>)
 8000dcc:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 8000dce:	4b1a      	ldr	r3, [pc, #104]	@ (8000e38 <MX_HSPI1_Init+0x74>)
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000dd4:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <MX_HSPI1_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000dda:	4b17      	ldr	r3, [pc, #92]	@ (8000e38 <MX_HSPI1_Init+0x74>)
 8000ddc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000de0:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <MX_HSPI1_Init+0x74>)
 8000de4:	221a      	movs	r2, #26
 8000de6:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 8000de8:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <MX_HSPI1_Init+0x74>)
 8000dea:	2202      	movs	r2, #2
 8000dec:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000dee:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <MX_HSPI1_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000df4:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <MX_HSPI1_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <MX_HSPI1_Init+0x74>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8000e00:	4b0d      	ldr	r3, [pc, #52]	@ (8000e38 <MX_HSPI1_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <MX_HSPI1_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e38 <MX_HSPI1_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000e12:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <MX_HSPI1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8000e18:	4b07      	ldr	r3, [pc, #28]	@ (8000e38 <MX_HSPI1_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <MX_HSPI1_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8000e24:	4804      	ldr	r0, [pc, #16]	@ (8000e38 <MX_HSPI1_Init+0x74>)
 8000e26:	f010 fa4d 	bl	80112c4 <HAL_XSPI_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8000e30:	f000 fcdc 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200002f0 	.word	0x200002f0
 8000e3c:	420d3400 	.word	0x420d3400

08000e40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e46:	4a1c      	ldr	r2, [pc, #112]	@ (8000eb8 <MX_I2C1_Init+0x78>)
 8000e48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ebc <MX_I2C1_Init+0x7c>)
 8000e4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e50:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e56:	4b17      	ldr	r3, [pc, #92]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e62:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e7a:	480e      	ldr	r0, [pc, #56]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e7c:	f006 fd7c 	bl	8007978 <HAL_I2C_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e86:	f000 fcb1 	bl	80017ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4809      	ldr	r0, [pc, #36]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e8e:	f007 ff07 	bl	8008ca0 <HAL_I2CEx_ConfigAnalogFilter>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e98:	f000 fca8 	bl	80017ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000ea0:	f007 ff49 	bl	8008d36 <HAL_I2CEx_ConfigDigitalFilter>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000eaa:	f000 fc9f 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000350 	.word	0x20000350
 8000eb8:	40005400 	.word	0x40005400
 8000ebc:	20a0c4df 	.word	0x20a0c4df

08000ec0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f38 <MX_I2C2_Init+0x78>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8000eca:	4b1a      	ldr	r3, [pc, #104]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f3c <MX_I2C2_Init+0x7c>)
 8000ece:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ed0:	4b18      	ldr	r3, [pc, #96]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ed6:	4b17      	ldr	r3, [pc, #92]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000edc:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eee:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000efa:	480e      	ldr	r0, [pc, #56]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000efc:	f006 fd3c 	bl	8007978 <HAL_I2C_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f06:	f000 fc71 	bl	80017ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4809      	ldr	r0, [pc, #36]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000f0e:	f007 fec7 	bl	8008ca0 <HAL_I2CEx_ConfigAnalogFilter>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f18:	f000 fc68 	bl	80017ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <MX_I2C2_Init+0x74>)
 8000f20:	f007 ff09 	bl	8008d36 <HAL_I2CEx_ConfigDigitalFilter>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f2a:	f000 fc5f 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200003a4 	.word	0x200003a4
 8000f38:	40005800 	.word	0x40005800
 8000f3c:	20a0c4df 	.word	0x20a0c4df

08000f40 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000f44:	2000      	movs	r0, #0
 8000f46:	f007 ff43 	bl	8008dd0 <HAL_ICACHE_ConfigAssociativityMode>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000f50:	f000 fc4c 	bl	80017ec <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000f54:	f007 ff5c 	bl	8008e10 <HAL_ICACHE_Enable>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000f5e:	f000 fc45 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08e      	sub	sp, #56	@ 0x38
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2234      	movs	r2, #52	@ 0x34
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f010 fe0c 	bl	8011b92 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f7a:	4b39      	ldr	r3, [pc, #228]	@ (8001060 <MX_LTDC_Init+0xf8>)
 8000f7c:	4a39      	ldr	r2, [pc, #228]	@ (8001064 <MX_LTDC_Init+0xfc>)
 8000f7e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f80:	4b37      	ldr	r3, [pc, #220]	@ (8001060 <MX_LTDC_Init+0xf8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f86:	4b36      	ldr	r3, [pc, #216]	@ (8001060 <MX_LTDC_Init+0xf8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f8c:	4b34      	ldr	r3, [pc, #208]	@ (8001060 <MX_LTDC_Init+0xf8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f92:	4b33      	ldr	r3, [pc, #204]	@ (8001060 <MX_LTDC_Init+0xf8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8000f98:	4b31      	ldr	r3, [pc, #196]	@ (8001060 <MX_LTDC_Init+0xf8>)
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f9e:	4b30      	ldr	r3, [pc, #192]	@ (8001060 <MX_LTDC_Init+0xf8>)
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8000fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8001060 <MX_LTDC_Init+0xf8>)
 8000fa6:	220b      	movs	r2, #11
 8000fa8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000faa:	4b2d      	ldr	r3, [pc, #180]	@ (8001060 <MX_LTDC_Init+0xf8>)
 8000fac:	220b      	movs	r2, #11
 8000fae:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001060 <MX_LTDC_Init+0xf8>)
 8000fb2:	f240 322b 	movw	r2, #811	@ 0x32b
 8000fb6:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8000fb8:	4b29      	ldr	r3, [pc, #164]	@ (8001060 <MX_LTDC_Init+0xf8>)
 8000fba:	f240 12eb 	movw	r2, #491	@ 0x1eb
 8000fbe:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8000fc0:	4b27      	ldr	r3, [pc, #156]	@ (8001060 <MX_LTDC_Init+0xf8>)
 8000fc2:	f240 3233 	movw	r2, #819	@ 0x333
 8000fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8000fc8:	4b25      	ldr	r3, [pc, #148]	@ (8001060 <MX_LTDC_Init+0xf8>)
 8000fca:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000fce:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fd0:	4b23      	ldr	r3, [pc, #140]	@ (8001060 <MX_LTDC_Init+0xf8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fd8:	4b21      	ldr	r3, [pc, #132]	@ (8001060 <MX_LTDC_Init+0xf8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8001060 <MX_LTDC_Init+0xf8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fe8:	481d      	ldr	r0, [pc, #116]	@ (8001060 <MX_LTDC_Init+0xf8>)
 8000fea:	f007 ff21 	bl	8008e30 <HAL_LTDC_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ff4:	f000 fbfa 	bl	80017ec <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8000ffc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001000:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001006:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800100a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 800100c:	2301      	movs	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001010:	23ff      	movs	r3, #255	@ 0xff
 8001012:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001018:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800101c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800101e:	2307      	movs	r3, #7
 8001020:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	2200      	movs	r2, #0
 8001044:	4619      	mov	r1, r3
 8001046:	4806      	ldr	r0, [pc, #24]	@ (8001060 <MX_LTDC_Init+0xf8>)
 8001048:	f008 f884 	bl	8009154 <HAL_LTDC_ConfigLayer>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8001052:	f000 fbcb 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	3738      	adds	r7, #56	@ 0x38
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200003f8 	.word	0x200003f8
 8001064:	40016800 	.word	0x40016800

08001068 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
 800107c:	615a      	str	r2, [r3, #20]
 800107e:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001080:	4b1e      	ldr	r3, [pc, #120]	@ (80010fc <MX_RTC_Init+0x94>)
 8001082:	4a1f      	ldr	r2, [pc, #124]	@ (8001100 <MX_RTC_Init+0x98>)
 8001084:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001086:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <MX_RTC_Init+0x94>)
 8001088:	2200      	movs	r2, #0
 800108a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800108c:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <MX_RTC_Init+0x94>)
 800108e:	227f      	movs	r2, #127	@ 0x7f
 8001090:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001092:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <MX_RTC_Init+0x94>)
 8001094:	22ff      	movs	r2, #255	@ 0xff
 8001096:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001098:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <MX_RTC_Init+0x94>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800109e:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <MX_RTC_Init+0x94>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010a4:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <MX_RTC_Init+0x94>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010aa:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <MX_RTC_Init+0x94>)
 80010ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010b0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80010b2:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <MX_RTC_Init+0x94>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80010b8:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <MX_RTC_Init+0x94>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010be:	480f      	ldr	r0, [pc, #60]	@ (80010fc <MX_RTC_Init+0x94>)
 80010c0:	f00c ff0c 	bl	800dedc <HAL_RTC_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80010ca:	f000 fb8f 	bl	80017ec <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	4619      	mov	r1, r3
 80010e2:	4806      	ldr	r0, [pc, #24]	@ (80010fc <MX_RTC_Init+0x94>)
 80010e4:	f00d f828 	bl	800e138 <HAL_RTCEx_PrivilegeModeSet>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80010ee:	f000 fb7d 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200004a0 	.word	0x200004a0
 8001100:	46007800 	.word	0x46007800

08001104 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001108:	4b2f      	ldr	r3, [pc, #188]	@ (80011c8 <MX_SAI2_Init+0xc4>)
 800110a:	4a30      	ldr	r2, [pc, #192]	@ (80011cc <MX_SAI2_Init+0xc8>)
 800110c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800110e:	4b2e      	ldr	r3, [pc, #184]	@ (80011c8 <MX_SAI2_Init+0xc4>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001114:	4b2c      	ldr	r3, [pc, #176]	@ (80011c8 <MX_SAI2_Init+0xc4>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800111a:	4b2b      	ldr	r3, [pc, #172]	@ (80011c8 <MX_SAI2_Init+0xc4>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001120:	4b29      	ldr	r3, [pc, #164]	@ (80011c8 <MX_SAI2_Init+0xc4>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001126:	4b28      	ldr	r3, [pc, #160]	@ (80011c8 <MX_SAI2_Init+0xc4>)
 8001128:	2200      	movs	r2, #0
 800112a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 800112c:	4b26      	ldr	r3, [pc, #152]	@ (80011c8 <MX_SAI2_Init+0xc4>)
 800112e:	4a28      	ldr	r2, [pc, #160]	@ (80011d0 <MX_SAI2_Init+0xcc>)
 8001130:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001132:	4b25      	ldr	r3, [pc, #148]	@ (80011c8 <MX_SAI2_Init+0xc4>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001138:	4b23      	ldr	r3, [pc, #140]	@ (80011c8 <MX_SAI2_Init+0xc4>)
 800113a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800113e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001140:	4b21      	ldr	r3, [pc, #132]	@ (80011c8 <MX_SAI2_Init+0xc4>)
 8001142:	2200      	movs	r2, #0
 8001144:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001146:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <MX_SAI2_Init+0xc4>)
 8001148:	2200      	movs	r2, #0
 800114a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 800114c:	4b1e      	ldr	r3, [pc, #120]	@ (80011c8 <MX_SAI2_Init+0xc4>)
 800114e:	2210      	movs	r2, #16
 8001150:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001152:	2302      	movs	r3, #2
 8001154:	2202      	movs	r2, #2
 8001156:	2101      	movs	r1, #1
 8001158:	481b      	ldr	r0, [pc, #108]	@ (80011c8 <MX_SAI2_Init+0xc4>)
 800115a:	f00d f81b 	bl	800e194 <HAL_SAI_InitProtocol>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_SAI2_Init+0x64>
  {
    Error_Handler();
 8001164:	f000 fb42 	bl	80017ec <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001168:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <MX_SAI2_Init+0xd0>)
 800116a:	4a1b      	ldr	r2, [pc, #108]	@ (80011d8 <MX_SAI2_Init+0xd4>)
 800116c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 800116e:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <MX_SAI2_Init+0xd0>)
 8001170:	2201      	movs	r2, #1
 8001172:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001174:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <MX_SAI2_Init+0xd0>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800117a:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <MX_SAI2_Init+0xd0>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <MX_SAI2_Init+0xd0>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 8001186:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <MX_SAI2_Init+0xd0>)
 8001188:	2202      	movs	r2, #2
 800118a:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 800118c:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <MX_SAI2_Init+0xd0>)
 800118e:	4a10      	ldr	r2, [pc, #64]	@ (80011d0 <MX_SAI2_Init+0xcc>)
 8001190:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001192:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <MX_SAI2_Init+0xd0>)
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001198:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <MX_SAI2_Init+0xd0>)
 800119a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800119e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <MX_SAI2_Init+0xd0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <MX_SAI2_Init+0xd0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 80011ac:	2308      	movs	r3, #8
 80011ae:	2202      	movs	r2, #2
 80011b0:	2100      	movs	r1, #0
 80011b2:	4808      	ldr	r0, [pc, #32]	@ (80011d4 <MX_SAI2_Init+0xd0>)
 80011b4:	f00c ffee 	bl	800e194 <HAL_SAI_InitProtocol>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_SAI2_Init+0xbe>
  {
    Error_Handler();
 80011be:	f000 fb15 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200004d0 	.word	0x200004d0
 80011cc:	40015804 	.word	0x40015804
 80011d0:	00017700 	.word	0x00017700
 80011d4:	20000568 	.word	0x20000568
 80011d8:	40015824 	.word	0x40015824

080011dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	@ 0x28
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ee:	463b      	mov	r3, r7
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
 80011fc:	615a      	str	r2, [r3, #20]
 80011fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001200:	4b25      	ldr	r3, [pc, #148]	@ (8001298 <MX_TIM3_Init+0xbc>)
 8001202:	4a26      	ldr	r2, [pc, #152]	@ (800129c <MX_TIM3_Init+0xc0>)
 8001204:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 8001206:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <MX_TIM3_Init+0xbc>)
 8001208:	22a0      	movs	r2, #160	@ 0xa0
 800120a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b22      	ldr	r3, [pc, #136]	@ (8001298 <MX_TIM3_Init+0xbc>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001212:	4b21      	ldr	r3, [pc, #132]	@ (8001298 <MX_TIM3_Init+0xbc>)
 8001214:	2264      	movs	r2, #100	@ 0x64
 8001216:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001218:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <MX_TIM3_Init+0xbc>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121e:	4b1e      	ldr	r3, [pc, #120]	@ (8001298 <MX_TIM3_Init+0xbc>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001224:	481c      	ldr	r0, [pc, #112]	@ (8001298 <MX_TIM3_Init+0xbc>)
 8001226:	f00d ff03 	bl	800f030 <HAL_TIM_PWM_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001230:	f000 fadc 	bl	80017ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	4815      	ldr	r0, [pc, #84]	@ (8001298 <MX_TIM3_Init+0xbc>)
 8001244:	f00e feda 	bl	800fffc <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800124e:	f000 facd 	bl	80017ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001252:	2360      	movs	r3, #96	@ 0x60
 8001254:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 8001256:	234b      	movs	r3, #75	@ 0x4b
 8001258:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	220c      	movs	r2, #12
 8001266:	4619      	mov	r1, r3
 8001268:	480b      	ldr	r0, [pc, #44]	@ (8001298 <MX_TIM3_Init+0xbc>)
 800126a:	f00d ff39 	bl	800f0e0 <HAL_TIM_PWM_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001274:	f000 faba 	bl	80017ec <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 8001278:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <MX_TIM3_Init+0xbc>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	69da      	ldr	r2, [r3, #28]
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_TIM3_Init+0xbc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001286:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001288:	4803      	ldr	r0, [pc, #12]	@ (8001298 <MX_TIM3_Init+0xbc>)
 800128a:	f001 f85d 	bl	8002348 <HAL_TIM_MspPostInit>

}
 800128e:	bf00      	nop
 8001290:	3728      	adds	r7, #40	@ 0x28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000768 	.word	0x20000768
 800129c:	40000400 	.word	0x40000400

080012a0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80012be:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <MX_TIM15_Init+0x98>)
 80012c0:	4a1e      	ldr	r2, [pc, #120]	@ (800133c <MX_TIM15_Init+0x9c>)
 80012c2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 26;
 80012c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <MX_TIM15_Init+0x98>)
 80012c6:	221a      	movs	r2, #26
 80012c8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <MX_TIM15_Init+0x98>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 49;
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <MX_TIM15_Init+0x98>)
 80012d2:	2231      	movs	r2, #49	@ 0x31
 80012d4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d6:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <MX_TIM15_Init+0x98>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80012dc:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <MX_TIM15_Init+0x98>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <MX_TIM15_Init+0x98>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80012e8:	4813      	ldr	r0, [pc, #76]	@ (8001338 <MX_TIM15_Init+0x98>)
 80012ea:	f00d fdb2 	bl	800ee52 <HAL_TIM_Base_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 80012f4:	f000 fa7a 	bl	80017ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4619      	mov	r1, r3
 8001304:	480c      	ldr	r0, [pc, #48]	@ (8001338 <MX_TIM15_Init+0x98>)
 8001306:	f00d ffff 	bl	800f308 <HAL_TIM_ConfigClockSource>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8001310:	f000 fa6c 	bl	80017ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001314:	2320      	movs	r3, #32
 8001316:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	@ (8001338 <MX_TIM15_Init+0x98>)
 8001322:	f00e fe6b 	bl	800fffc <HAL_TIMEx_MasterConfigSynchronization>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 800132c:	f000 fa5e 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	3720      	adds	r7, #32
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200007b4 	.word	0x200007b4
 800133c:	40014000 	.word	0x40014000

08001340 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001344:	4b22      	ldr	r3, [pc, #136]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 8001346:	4a23      	ldr	r2, [pc, #140]	@ (80013d4 <MX_USART1_UART_Init+0x94>)
 8001348:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800134a:	4b21      	ldr	r3, [pc, #132]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 800134c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001350:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b1f      	ldr	r3, [pc, #124]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800135e:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001376:	4b16      	ldr	r3, [pc, #88]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800137c:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001382:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 8001384:	2200      	movs	r2, #0
 8001386:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001388:	4811      	ldr	r0, [pc, #68]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 800138a:	f00e fef9 	bl	8010180 <HAL_UART_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001394:	f000 fa2a 	bl	80017ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001398:	2100      	movs	r1, #0
 800139a:	480d      	ldr	r0, [pc, #52]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 800139c:	f00f fec7 	bl	801112e <HAL_UARTEx_SetTxFifoThreshold>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013a6:	f000 fa21 	bl	80017ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013aa:	2100      	movs	r1, #0
 80013ac:	4808      	ldr	r0, [pc, #32]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 80013ae:	f00f fefc 	bl	80111aa <HAL_UARTEx_SetRxFifoThreshold>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013b8:	f000 fa18 	bl	80017ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013bc:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 80013be:	f00f fe7d 	bl	80110bc <HAL_UARTEx_DisableFifoMode>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013c8:	f000 fa10 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000800 	.word	0x20000800
 80013d4:	40013800 	.word	0x40013800

080013d8 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80013dc:	4b13      	ldr	r3, [pc, #76]	@ (800142c <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013de:	4a14      	ldr	r2, [pc, #80]	@ (8001430 <MX_USB_OTG_HS_PCD_Init+0x58>)
 80013e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80013e2:	4b12      	ldr	r3, [pc, #72]	@ (800142c <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013e4:	2209      	movs	r2, #9
 80013e6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80013e8:	4b10      	ldr	r3, [pc, #64]	@ (800142c <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80013ee:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013f0:	2203      	movs	r2, #3
 80013f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80013f4:	4b0d      	ldr	r3, [pc, #52]	@ (800142c <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80013fa:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001400:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001402:	2200      	movs	r2, #0
 8001404:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001406:	4b09      	ldr	r3, [pc, #36]	@ (800142c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001408:	2200      	movs	r2, #0
 800140a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800140c:	4b07      	ldr	r3, [pc, #28]	@ (800142c <MX_USB_OTG_HS_PCD_Init+0x54>)
 800140e:	2200      	movs	r2, #0
 8001410:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8001414:	2200      	movs	r2, #0
 8001416:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	@ (800142c <MX_USB_OTG_HS_PCD_Init+0x54>)
 800141a:	f008 f84c 	bl	80094b6 <HAL_PCD_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 8001424:	f000 f9e2 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000894 	.word	0x20000894
 8001430:	42040000 	.word	0x42040000

08001434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08e      	sub	sp, #56	@ 0x38
 8001438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800144a:	4b8c      	ldr	r3, [pc, #560]	@ (800167c <MX_GPIO_Init+0x248>)
 800144c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001450:	4a8a      	ldr	r2, [pc, #552]	@ (800167c <MX_GPIO_Init+0x248>)
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800145a:	4b88      	ldr	r3, [pc, #544]	@ (800167c <MX_GPIO_Init+0x248>)
 800145c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	623b      	str	r3, [r7, #32]
 8001466:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001468:	4b84      	ldr	r3, [pc, #528]	@ (800167c <MX_GPIO_Init+0x248>)
 800146a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800146e:	4a83      	ldr	r2, [pc, #524]	@ (800167c <MX_GPIO_Init+0x248>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001478:	4b80      	ldr	r3, [pc, #512]	@ (800167c <MX_GPIO_Init+0x248>)
 800147a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001486:	4b7d      	ldr	r3, [pc, #500]	@ (800167c <MX_GPIO_Init+0x248>)
 8001488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800148c:	4a7b      	ldr	r2, [pc, #492]	@ (800167c <MX_GPIO_Init+0x248>)
 800148e:	f043 0320 	orr.w	r3, r3, #32
 8001492:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001496:	4b79      	ldr	r3, [pc, #484]	@ (800167c <MX_GPIO_Init+0x248>)
 8001498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800149c:	f003 0320 	and.w	r3, r3, #32
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a4:	4b75      	ldr	r3, [pc, #468]	@ (800167c <MX_GPIO_Init+0x248>)
 80014a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014aa:	4a74      	ldr	r2, [pc, #464]	@ (800167c <MX_GPIO_Init+0x248>)
 80014ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014b4:	4b71      	ldr	r3, [pc, #452]	@ (800167c <MX_GPIO_Init+0x248>)
 80014b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	4b6e      	ldr	r3, [pc, #440]	@ (800167c <MX_GPIO_Init+0x248>)
 80014c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c8:	4a6c      	ldr	r2, [pc, #432]	@ (800167c <MX_GPIO_Init+0x248>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014d2:	4b6a      	ldr	r3, [pc, #424]	@ (800167c <MX_GPIO_Init+0x248>)
 80014d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e0:	4b66      	ldr	r3, [pc, #408]	@ (800167c <MX_GPIO_Init+0x248>)
 80014e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014e6:	4a65      	ldr	r2, [pc, #404]	@ (800167c <MX_GPIO_Init+0x248>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014f0:	4b62      	ldr	r3, [pc, #392]	@ (800167c <MX_GPIO_Init+0x248>)
 80014f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014fe:	4b5f      	ldr	r3, [pc, #380]	@ (800167c <MX_GPIO_Init+0x248>)
 8001500:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001504:	4a5d      	ldr	r2, [pc, #372]	@ (800167c <MX_GPIO_Init+0x248>)
 8001506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800150a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800150e:	4b5b      	ldr	r3, [pc, #364]	@ (800167c <MX_GPIO_Init+0x248>)
 8001510:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800151c:	4b57      	ldr	r3, [pc, #348]	@ (800167c <MX_GPIO_Init+0x248>)
 800151e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001522:	4a56      	ldr	r2, [pc, #344]	@ (800167c <MX_GPIO_Init+0x248>)
 8001524:	f043 0308 	orr.w	r3, r3, #8
 8001528:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800152c:	4b53      	ldr	r3, [pc, #332]	@ (800167c <MX_GPIO_Init+0x248>)
 800152e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800153a:	4b50      	ldr	r3, [pc, #320]	@ (800167c <MX_GPIO_Init+0x248>)
 800153c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001540:	4a4e      	ldr	r2, [pc, #312]	@ (800167c <MX_GPIO_Init+0x248>)
 8001542:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001546:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800154a:	4b4c      	ldr	r3, [pc, #304]	@ (800167c <MX_GPIO_Init+0x248>)
 800154c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	2104      	movs	r1, #4
 800155c:	4848      	ldr	r0, [pc, #288]	@ (8001680 <MX_GPIO_Init+0x24c>)
 800155e:	f006 f9b7 	bl	80078d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 8001562:	2201      	movs	r2, #1
 8001564:	2110      	movs	r1, #16
 8001566:	4846      	ldr	r0, [pc, #280]	@ (8001680 <MX_GPIO_Init+0x24c>)
 8001568:	f006 f9b2 	bl	80078d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	2114      	movs	r1, #20
 8001570:	4844      	ldr	r0, [pc, #272]	@ (8001684 <MX_GPIO_Init+0x250>)
 8001572:	f006 f9ad 	bl	80078d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 8001576:	2314      	movs	r3, #20
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001586:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800158a:	4619      	mov	r1, r3
 800158c:	483c      	ldr	r0, [pc, #240]	@ (8001680 <MX_GPIO_Init+0x24c>)
 800158e:	f005 ffc7 	bl	8007520 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001592:	2320      	movs	r3, #32
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001596:	4b3c      	ldr	r3, [pc, #240]	@ (8001688 <MX_GPIO_Init+0x254>)
 8001598:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a2:	4619      	mov	r1, r3
 80015a4:	4836      	ldr	r0, [pc, #216]	@ (8001680 <MX_GPIO_Init+0x24c>)
 80015a6:	f005 ffbb 	bl	8007520 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 80015aa:	2302      	movs	r3, #2
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015ae:	4b37      	ldr	r3, [pc, #220]	@ (800168c <MX_GPIO_Init+0x258>)
 80015b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ba:	4619      	mov	r1, r3
 80015bc:	4834      	ldr	r0, [pc, #208]	@ (8001690 <MX_GPIO_Init+0x25c>)
 80015be:	f005 ffaf 	bl	8007520 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 80015c2:	2310      	movs	r3, #16
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015c6:	4b33      	ldr	r3, [pc, #204]	@ (8001694 <MX_GPIO_Init+0x260>)
 80015c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d2:	4619      	mov	r1, r3
 80015d4:	482e      	ldr	r0, [pc, #184]	@ (8001690 <MX_GPIO_Init+0x25c>)
 80015d6:	f005 ffa3 	bl	8007520 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 80015da:	2314      	movs	r3, #20
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015de:	2301      	movs	r3, #1
 80015e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ee:	4619      	mov	r1, r3
 80015f0:	4824      	ldr	r0, [pc, #144]	@ (8001684 <MX_GPIO_Init+0x250>)
 80015f2:	f005 ff95 	bl	8007520 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 80015f6:	2380      	movs	r3, #128	@ 0x80
 80015f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fa:	2300      	movs	r3, #0
 80015fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001606:	4619      	mov	r1, r3
 8001608:	481e      	ldr	r0, [pc, #120]	@ (8001684 <MX_GPIO_Init+0x250>)
 800160a:	f005 ff89 	bl	8007520 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 800160e:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001614:	2300      	movs	r3, #0
 8001616:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800161c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001620:	4619      	mov	r1, r3
 8001622:	481d      	ldr	r0, [pc, #116]	@ (8001698 <MX_GPIO_Init+0x264>)
 8001624:	f005 ff7c 	bl	8007520 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 8001628:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162e:	2300      	movs	r3, #0
 8001630:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	4817      	ldr	r0, [pc, #92]	@ (800169c <MX_GPIO_Init+0x268>)
 800163e:	f005 ff6f 	bl	8007520 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	200c      	movs	r0, #12
 8001648:	f003 fe50 	bl	80052ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800164c:	200c      	movs	r0, #12
 800164e:	f003 fe67 	bl	8005320 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	200f      	movs	r0, #15
 8001658:	f003 fe48 	bl	80052ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800165c:	200f      	movs	r0, #15
 800165e:	f003 fe5f 	bl	8005320 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	2010      	movs	r0, #16
 8001668:	f003 fe40 	bl	80052ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 800166c:	2010      	movs	r0, #16
 800166e:	f003 fe57 	bl	8005320 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001672:	bf00      	nop
 8001674:	3738      	adds	r7, #56	@ 0x38
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	46020c00 	.word	0x46020c00
 8001680:	42021000 	.word	0x42021000
 8001684:	42020c00 	.word	0x42020c00
 8001688:	10110000 	.word	0x10110000
 800168c:	10310000 	.word	0x10310000
 8001690:	42020000 	.word	0x42020000
 8001694:	10210000 	.word	0x10210000
 8001698:	42021800 	.word	0x42021800
 800169c:	42020400 	.word	0x42020400

080016a0 <HAL_SAI_RxHalfCpltCallback>:
	temp = temp / denoiseSize;
	return temp;
}

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	uint16_t dacSlot = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	82fb      	strh	r3, [r7, #22]
	for(int i = 4; i < (sampleSize * 8 ) / 2; i += 8)
 80016ac:	2304      	movs	r3, #4
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	e033      	b.n	800171a <HAL_SAI_RxHalfCpltCallback+0x7a>
	{
		float convert = ((((float)pcmData[i] * (float)gain) / 16777216.0f) - 0.5f) * 2.0f;
 80016b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001730 <HAL_SAI_RxHalfCpltCallback+0x90>)
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016c2:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001734 <HAL_SAI_RxHalfCpltCallback+0x94>
 80016c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016ca:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001738 <HAL_SAI_RxHalfCpltCallback+0x98>
 80016ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016d2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80016d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016de:	edc7 7a03 	vstr	s15, [r7, #12]
		int32_t output = (int32_t)(convert * 8388608);
 80016e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e6:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800173c <HAL_SAI_RxHalfCpltCallback+0x9c>
 80016ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f2:	ee17 3a90 	vmov	r3, s15
 80016f6:	60bb      	str	r3, [r7, #8]

		dacData[dacSlot] = output;
 80016f8:	8afb      	ldrh	r3, [r7, #22]
 80016fa:	4911      	ldr	r1, [pc, #68]	@ (8001740 <HAL_SAI_RxHalfCpltCallback+0xa0>)
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacData[dacSlot + 1] = output;
 8001702:	8afb      	ldrh	r3, [r7, #22]
 8001704:	3301      	adds	r3, #1
 8001706:	490e      	ldr	r1, [pc, #56]	@ (8001740 <HAL_SAI_RxHalfCpltCallback+0xa0>)
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacSlot += 2;
 800170e:	8afb      	ldrh	r3, [r7, #22]
 8001710:	3302      	adds	r3, #2
 8001712:	82fb      	strh	r3, [r7, #22]
	for(int i = 4; i < (sampleSize * 8 ) / 2; i += 8)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	3308      	adds	r3, #8
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001720:	dbc7      	blt.n	80016b2 <HAL_SAI_RxHalfCpltCallback+0x12>
	}
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	20000d98 	.word	0x20000d98
 8001734:	42c80000 	.word	0x42c80000
 8001738:	4b800000 	.word	0x4b800000
 800173c:	4b000000 	.word	0x4b000000
 8001740:	20002d98 	.word	0x20002d98

08001744 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	uint16_t dacSlot = sampleSize;
 800174c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001750:	82fb      	strh	r3, [r7, #22]
	for(int i = ((sampleSize * 8) / 2) + 4; i < sampleSize * 8; i += 8)
 8001752:	f240 4304 	movw	r3, #1028	@ 0x404
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	e033      	b.n	80017c2 <HAL_SAI_RxCpltCallback+0x7e>
	{
		float convert = ((((float)pcmData[i] * (float)gain) / 16777216.0f) - 0.5f) * 2.0f;
 800175a:	4a1f      	ldr	r2, [pc, #124]	@ (80017d8 <HAL_SAI_RxCpltCallback+0x94>)
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001762:	ee07 3a90 	vmov	s15, r3
 8001766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800176a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80017dc <HAL_SAI_RxCpltCallback+0x98>
 800176e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001772:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80017e0 <HAL_SAI_RxCpltCallback+0x9c>
 8001776:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800177a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800177e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001782:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001786:	edc7 7a03 	vstr	s15, [r7, #12]
		int32_t output = (int32_t)(convert * 8388608);
 800178a:	edd7 7a03 	vldr	s15, [r7, #12]
 800178e:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80017e4 <HAL_SAI_RxCpltCallback+0xa0>
 8001792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001796:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800179a:	ee17 3a90 	vmov	r3, s15
 800179e:	60bb      	str	r3, [r7, #8]

		dacData[dacSlot] = output;
 80017a0:	8afb      	ldrh	r3, [r7, #22]
 80017a2:	4911      	ldr	r1, [pc, #68]	@ (80017e8 <HAL_SAI_RxCpltCallback+0xa4>)
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacData[dacSlot + 1] = output;
 80017aa:	8afb      	ldrh	r3, [r7, #22]
 80017ac:	3301      	adds	r3, #1
 80017ae:	490e      	ldr	r1, [pc, #56]	@ (80017e8 <HAL_SAI_RxCpltCallback+0xa4>)
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacSlot += 2;
 80017b6:	8afb      	ldrh	r3, [r7, #22]
 80017b8:	3302      	adds	r3, #2
 80017ba:	82fb      	strh	r3, [r7, #22]
	for(int i = ((sampleSize * 8) / 2) + 4; i < sampleSize * 8; i += 8)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	3308      	adds	r3, #8
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017c8:	dbc7      	blt.n	800175a <HAL_SAI_RxCpltCallback+0x16>
	}
}
 80017ca:	bf00      	nop
 80017cc:	bf00      	nop
 80017ce:	371c      	adds	r7, #28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	20000d98 	.word	0x20000d98
 80017dc:	42c80000 	.word	0x42c80000
 80017e0:	4b800000 	.word	0x4b800000
 80017e4:	4b000000 	.word	0x4b000000
 80017e8:	20002d98 	.word	0x20002d98

080017ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f0:	b672      	cpsid	i
}
 80017f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <Error_Handler+0x8>

080017f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <HAL_MspInit+0x30>)
 8001800:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001804:	4a08      	ldr	r2, [pc, #32]	@ (8001828 <HAL_MspInit+0x30>)
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <HAL_MspInit+0x30>)
 8001810:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 800181c:	f008 f888 	bl	8009930 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	46020c00 	.word	0x46020c00

0800182c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b0e0      	sub	sp, #384	@ 0x180
 8001830:	af00      	add	r7, sp, #0
 8001832:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001836:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800183a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800184c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001850:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001854:	4618      	mov	r0, r3
 8001856:	23e0      	movs	r3, #224	@ 0xe0
 8001858:	461a      	mov	r2, r3
 800185a:	2100      	movs	r1, #0
 800185c:	f010 f999 	bl	8011b92 <memset>
  if(hadc->Instance==ADC1)
 8001860:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001864:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4aa1      	ldr	r2, [pc, #644]	@ (8001af4 <HAL_ADC_MspInit+0x2c8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	f040 8152 	bne.w	8001b18 <HAL_ADC_MspInit+0x2ec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001874:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001878:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 800187c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001888:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800188c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001890:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001894:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001898:	f107 0320 	add.w	r3, r7, #32
 800189c:	4618      	mov	r0, r3
 800189e:	f009 fb21 	bl	800aee4 <HAL_RCCEx_PeriphCLKConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 80018a8:	f7ff ffa0 	bl	80017ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80018ac:	4b92      	ldr	r3, [pc, #584]	@ (8001af8 <HAL_ADC_MspInit+0x2cc>)
 80018ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018b2:	4a91      	ldr	r2, [pc, #580]	@ (8001af8 <HAL_ADC_MspInit+0x2cc>)
 80018b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018bc:	4b8e      	ldr	r3, [pc, #568]	@ (8001af8 <HAL_ADC_MspInit+0x2cc>)
 80018be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018c2:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80018c6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018ca:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018d4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80018d8:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018da:	4b87      	ldr	r3, [pc, #540]	@ (8001af8 <HAL_ADC_MspInit+0x2cc>)
 80018dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018e0:	4a85      	ldr	r2, [pc, #532]	@ (8001af8 <HAL_ADC_MspInit+0x2cc>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018ea:	4b83      	ldr	r3, [pc, #524]	@ (8001af8 <HAL_ADC_MspInit+0x2cc>)
 80018ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018f0:	f003 0204 	and.w	r2, r3, #4
 80018f4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018f8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001902:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001906:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	4b7b      	ldr	r3, [pc, #492]	@ (8001af8 <HAL_ADC_MspInit+0x2cc>)
 800190a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800190e:	4a7a      	ldr	r2, [pc, #488]	@ (8001af8 <HAL_ADC_MspInit+0x2cc>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001918:	4b77      	ldr	r3, [pc, #476]	@ (8001af8 <HAL_ADC_MspInit+0x2cc>)
 800191a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800191e:	f003 0201 	and.w	r2, r3, #1
 8001922:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001926:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001930:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001934:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	4b70      	ldr	r3, [pc, #448]	@ (8001af8 <HAL_ADC_MspInit+0x2cc>)
 8001938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800193c:	4a6e      	ldr	r2, [pc, #440]	@ (8001af8 <HAL_ADC_MspInit+0x2cc>)
 800193e:	f043 0302 	orr.w	r3, r3, #2
 8001942:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001946:	4b6c      	ldr	r3, [pc, #432]	@ (8001af8 <HAL_ADC_MspInit+0x2cc>)
 8001948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800194c:	f003 0202 	and.w	r2, r3, #2
 8001950:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001954:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800195e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001962:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 8001964:	230f      	movs	r3, #15
 8001966:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196a:	2303      	movs	r3, #3
 800196c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001976:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800197a:	4619      	mov	r1, r3
 800197c:	485f      	ldr	r0, [pc, #380]	@ (8001afc <HAL_ADC_MspInit+0x2d0>)
 800197e:	f005 fdcf 	bl	8007520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 8001982:	23ed      	movs	r3, #237	@ 0xed
 8001984:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001988:	2303      	movs	r3, #3
 800198a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001994:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001998:	4619      	mov	r1, r3
 800199a:	4859      	ldr	r0, [pc, #356]	@ (8001b00 <HAL_ADC_MspInit+0x2d4>)
 800199c:	f005 fdc0 	bl	8007520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 80019a0:	2303      	movs	r3, #3
 80019a2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a6:	2303      	movs	r3, #3
 80019a8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b2:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80019b6:	4619      	mov	r1, r3
 80019b8:	4852      	ldr	r0, [pc, #328]	@ (8001b04 <HAL_ADC_MspInit+0x2d8>)
 80019ba:	f005 fdb1 	bl	8007520 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80019be:	2321      	movs	r3, #33	@ 0x21
 80019c0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80019dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80019e0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80019e4:	2301      	movs	r3, #1
 80019e6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80019ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcBurstLength = 1;
 80019f2:	2301      	movs	r3, #1
 80019f4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.DestBurstLength = 1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 80019fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a02:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 8001a18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a1c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 8001a20:	232b      	movs	r3, #43	@ 0x2b
 8001a22:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8001a32:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001a36:	4934      	ldr	r1, [pc, #208]	@ (8001b08 <HAL_ADC_MspInit+0x2dc>)
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f004 fe85 	bl	8006748 <HAL_DMAEx_List_BuildNode>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_ADC_MspInit+0x21c>
    {
      Error_Handler();
 8001a44:	f7ff fed2 	bl	80017ec <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8001a48:	4a2f      	ldr	r2, [pc, #188]	@ (8001b08 <HAL_ADC_MspInit+0x2dc>)
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	482f      	ldr	r0, [pc, #188]	@ (8001b0c <HAL_ADC_MspInit+0x2e0>)
 8001a4e:	f004 fea7 	bl	80067a0 <HAL_DMAEx_List_InsertNode>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 8001a58:	f7ff fec8 	bl	80017ec <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8001a5c:	482b      	ldr	r0, [pc, #172]	@ (8001b0c <HAL_ADC_MspInit+0x2e0>)
 8001a5e:	f004 ff68 	bl	8006932 <HAL_DMAEx_List_SetCircularMode>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_ADC_MspInit+0x240>
    {
      Error_Handler();
 8001a68:	f7ff fec0 	bl	80017ec <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001a6c:	4b28      	ldr	r3, [pc, #160]	@ (8001b10 <HAL_ADC_MspInit+0x2e4>)
 8001a6e:	4a29      	ldr	r2, [pc, #164]	@ (8001b14 <HAL_ADC_MspInit+0x2e8>)
 8001a70:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001a72:	4b27      	ldr	r3, [pc, #156]	@ (8001b10 <HAL_ADC_MspInit+0x2e4>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001a78:	4b25      	ldr	r3, [pc, #148]	@ (8001b10 <HAL_ADC_MspInit+0x2e4>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001a7e:	4b24      	ldr	r3, [pc, #144]	@ (8001b10 <HAL_ADC_MspInit+0x2e4>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001a84:	4b22      	ldr	r3, [pc, #136]	@ (8001b10 <HAL_ADC_MspInit+0x2e4>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001a8a:	4b21      	ldr	r3, [pc, #132]	@ (8001b10 <HAL_ADC_MspInit+0x2e4>)
 8001a8c:	2281      	movs	r2, #129	@ 0x81
 8001a8e:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001a90:	481f      	ldr	r0, [pc, #124]	@ (8001b10 <HAL_ADC_MspInit+0x2e4>)
 8001a92:	f004 fc99 	bl	80063c8 <HAL_DMAEx_List_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_ADC_MspInit+0x274>
    {
      Error_Handler();
 8001a9c:	f7ff fea6 	bl	80017ec <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8001aa0:	491a      	ldr	r1, [pc, #104]	@ (8001b0c <HAL_ADC_MspInit+0x2e0>)
 8001aa2:	481b      	ldr	r0, [pc, #108]	@ (8001b10 <HAL_ADC_MspInit+0x2e4>)
 8001aa4:	f004 ffa6 	bl	80069f4 <HAL_DMAEx_List_LinkQ>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_ADC_MspInit+0x286>
    {
      Error_Handler();
 8001aae:	f7ff fe9d 	bl	80017ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8001ab2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001ab6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a14      	ldr	r2, [pc, #80]	@ (8001b10 <HAL_ADC_MspInit+0x2e4>)
 8001abe:	671a      	str	r2, [r3, #112]	@ 0x70
 8001ac0:	4a13      	ldr	r2, [pc, #76]	@ (8001b10 <HAL_ADC_MspInit+0x2e4>)
 8001ac2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001ac6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001ace:	2110      	movs	r1, #16
 8001ad0:	480f      	ldr	r0, [pc, #60]	@ (8001b10 <HAL_ADC_MspInit+0x2e4>)
 8001ad2:	f004 f887 	bl	8005be4 <HAL_DMA_ConfigChannelAttributes>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_ADC_MspInit+0x2b4>
    {
      Error_Handler();
 8001adc:	f7ff fe86 	bl	80017ec <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2025      	movs	r0, #37	@ 0x25
 8001ae6:	f003 fc01 	bl	80052ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001aea:	2025      	movs	r0, #37	@ 0x25
 8001aec:	f003 fc18 	bl	8005320 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001af0:	e0c0      	b.n	8001c74 <HAL_ADC_MspInit+0x448>
 8001af2:	bf00      	nop
 8001af4:	42028000 	.word	0x42028000
 8001af8:	46020c00 	.word	0x46020c00
 8001afc:	42020800 	.word	0x42020800
 8001b00:	42020000 	.word	0x42020000
 8001b04:	42020400 	.word	0x42020400
 8001b08:	2000015c 	.word	0x2000015c
 8001b0c:	20000180 	.word	0x20000180
 8001b10:	20000198 	.word	0x20000198
 8001b14:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 8001b18:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b1c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a56      	ldr	r2, [pc, #344]	@ (8001c80 <HAL_ADC_MspInit+0x454>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	f040 80a4 	bne.w	8001c74 <HAL_ADC_MspInit+0x448>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001b2c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b30:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001b34:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001b40:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b44:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001b48:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b4c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b50:	f107 0320 	add.w	r3, r7, #32
 8001b54:	4618      	mov	r0, r3
 8001b56:	f009 f9c5 	bl	800aee4 <HAL_RCCEx_PeriphCLKConfig>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_ADC_MspInit+0x338>
      Error_Handler();
 8001b60:	f7ff fe44 	bl	80017ec <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8001b64:	4b47      	ldr	r3, [pc, #284]	@ (8001c84 <HAL_ADC_MspInit+0x458>)
 8001b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b6a:	4a46      	ldr	r2, [pc, #280]	@ (8001c84 <HAL_ADC_MspInit+0x458>)
 8001b6c:	f043 0320 	orr.w	r3, r3, #32
 8001b70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001b74:	4b43      	ldr	r3, [pc, #268]	@ (8001c84 <HAL_ADC_MspInit+0x458>)
 8001b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b7a:	f003 0220 	and.w	r2, r3, #32
 8001b7e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b82:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b8c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b90:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b92:	4b3c      	ldr	r3, [pc, #240]	@ (8001c84 <HAL_ADC_MspInit+0x458>)
 8001b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b98:	4a3a      	ldr	r2, [pc, #232]	@ (8001c84 <HAL_ADC_MspInit+0x458>)
 8001b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ba2:	4b38      	ldr	r3, [pc, #224]	@ (8001c84 <HAL_ADC_MspInit+0x458>)
 8001ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ba8:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001bac:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001bb0:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001bba:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001bbe:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bd2:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	482b      	ldr	r0, [pc, #172]	@ (8001c88 <HAL_ADC_MspInit+0x45c>)
 8001bda:	f005 fca1 	bl	8007520 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001bde:	4b2b      	ldr	r3, [pc, #172]	@ (8001c8c <HAL_ADC_MspInit+0x460>)
 8001be0:	4a2b      	ldr	r2, [pc, #172]	@ (8001c90 <HAL_ADC_MspInit+0x464>)
 8001be2:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8001be4:	4b29      	ldr	r3, [pc, #164]	@ (8001c8c <HAL_ADC_MspInit+0x460>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001bea:	4b28      	ldr	r3, [pc, #160]	@ (8001c8c <HAL_ADC_MspInit+0x460>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bf0:	4b26      	ldr	r3, [pc, #152]	@ (8001c8c <HAL_ADC_MspInit+0x460>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001bf6:	4b25      	ldr	r3, [pc, #148]	@ (8001c8c <HAL_ADC_MspInit+0x460>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001bfc:	4b23      	ldr	r3, [pc, #140]	@ (8001c8c <HAL_ADC_MspInit+0x460>)
 8001bfe:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001c02:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001c04:	4b21      	ldr	r3, [pc, #132]	@ (8001c8c <HAL_ADC_MspInit+0x460>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001c0a:	4b20      	ldr	r3, [pc, #128]	@ (8001c8c <HAL_ADC_MspInit+0x460>)
 8001c0c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c10:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001c12:	4b1e      	ldr	r3, [pc, #120]	@ (8001c8c <HAL_ADC_MspInit+0x460>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001c18:	4b1c      	ldr	r3, [pc, #112]	@ (8001c8c <HAL_ADC_MspInit+0x460>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <HAL_ADC_MspInit+0x460>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001c24:	4b19      	ldr	r3, [pc, #100]	@ (8001c8c <HAL_ADC_MspInit+0x460>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001c2a:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <HAL_ADC_MspInit+0x460>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8001c30:	4b16      	ldr	r3, [pc, #88]	@ (8001c8c <HAL_ADC_MspInit+0x460>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001c36:	4815      	ldr	r0, [pc, #84]	@ (8001c8c <HAL_ADC_MspInit+0x460>)
 8001c38:	f003 fc34 	bl	80054a4 <HAL_DMA_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_ADC_MspInit+0x41a>
      Error_Handler();
 8001c42:	f7ff fdd3 	bl	80017ec <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 8001c46:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001c4a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0e      	ldr	r2, [pc, #56]	@ (8001c8c <HAL_ADC_MspInit+0x460>)
 8001c52:	671a      	str	r2, [r3, #112]	@ 0x70
 8001c54:	4a0d      	ldr	r2, [pc, #52]	@ (8001c8c <HAL_ADC_MspInit+0x460>)
 8001c56:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001c5a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001c62:	2110      	movs	r1, #16
 8001c64:	4809      	ldr	r0, [pc, #36]	@ (8001c8c <HAL_ADC_MspInit+0x460>)
 8001c66:	f003 ffbd 	bl	8005be4 <HAL_DMA_ConfigChannelAttributes>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_ADC_MspInit+0x448>
      Error_Handler();
 8001c70:	f7ff fdbc 	bl	80017ec <Error_Handler>
}
 8001c74:	bf00      	nop
 8001c76:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	46021000 	.word	0x46021000
 8001c84:	46020c00 	.word	0x46020c00
 8001c88:	42021800 	.word	0x42021800
 8001c8c:	20000210 	.word	0x20000210
 8001c90:	40020150 	.word	0x40020150

08001c94 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd0 <HAL_DMA2D_MspInit+0x3c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d10e      	bne.n	8001cc4 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <HAL_DMA2D_MspInit+0x40>)
 8001ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cac:	4a09      	ldr	r2, [pc, #36]	@ (8001cd4 <HAL_DMA2D_MspInit+0x40>)
 8001cae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cb2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001cb6:	4b07      	ldr	r3, [pc, #28]	@ (8001cd4 <HAL_DMA2D_MspInit+0x40>)
 8001cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001cc4:	bf00      	nop
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	4002b000 	.word	0x4002b000
 8001cd4:	46020c00 	.word	0x46020c00

08001cd8 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	@ 0x28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a2a      	ldr	r2, [pc, #168]	@ (8001da0 <HAL_XSPI_MspInit+0xc8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d14d      	bne.n	8001d96 <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8001da4 <HAL_XSPI_MspInit+0xcc>)
 8001cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d00:	4a28      	ldr	r2, [pc, #160]	@ (8001da4 <HAL_XSPI_MspInit+0xcc>)
 8001d02:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d0a:	4b26      	ldr	r3, [pc, #152]	@ (8001da4 <HAL_XSPI_MspInit+0xcc>)
 8001d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d18:	4b22      	ldr	r3, [pc, #136]	@ (8001da4 <HAL_XSPI_MspInit+0xcc>)
 8001d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d1e:	4a21      	ldr	r2, [pc, #132]	@ (8001da4 <HAL_XSPI_MspInit+0xcc>)
 8001d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d24:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d28:	4b1e      	ldr	r3, [pc, #120]	@ (8001da4 <HAL_XSPI_MspInit+0xcc>)
 8001d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d36:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <HAL_XSPI_MspInit+0xcc>)
 8001d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d3c:	4a19      	ldr	r2, [pc, #100]	@ (8001da4 <HAL_XSPI_MspInit+0xcc>)
 8001d3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d46:	4b17      	ldr	r3, [pc, #92]	@ (8001da4 <HAL_XSPI_MspInit+0xcc>)
 8001d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001d54:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8001d58:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001d66:	2308      	movs	r3, #8
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480d      	ldr	r0, [pc, #52]	@ (8001da8 <HAL_XSPI_MspInit+0xd0>)
 8001d72:	f005 fbd5 	bl	8007520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001d76:	230f      	movs	r3, #15
 8001d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001d86:	2308      	movs	r3, #8
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4806      	ldr	r0, [pc, #24]	@ (8001dac <HAL_XSPI_MspInit+0xd4>)
 8001d92:	f005 fbc5 	bl	8007520 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8001d96:	bf00      	nop
 8001d98:	3728      	adds	r7, #40	@ 0x28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	420d3400 	.word	0x420d3400
 8001da4:	46020c00 	.word	0x46020c00
 8001da8:	42021c00 	.word	0x42021c00
 8001dac:	42022000 	.word	0x42022000

08001db0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b0c4      	sub	sp, #272	@ 0x110
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001dba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001dbe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd0:	f107 0318 	add.w	r3, r7, #24
 8001dd4:	22e0      	movs	r2, #224	@ 0xe0
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f00f feda 	bl	8011b92 <memset>
  if(hi2c->Instance==I2C1)
 8001dde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001de2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a63      	ldr	r2, [pc, #396]	@ (8001f78 <HAL_I2C_MspInit+0x1c8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d14f      	bne.n	8001e90 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001df0:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e02:	f107 0318 	add.w	r3, r7, #24
 8001e06:	4618      	mov	r0, r3
 8001e08:	f009 f86c 	bl	800aee4 <HAL_RCCEx_PeriphCLKConfig>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001e12:	f7ff fceb 	bl	80017ec <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e16:	4b59      	ldr	r3, [pc, #356]	@ (8001f7c <HAL_I2C_MspInit+0x1cc>)
 8001e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e1c:	4a57      	ldr	r2, [pc, #348]	@ (8001f7c <HAL_I2C_MspInit+0x1cc>)
 8001e1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e26:	4b55      	ldr	r3, [pc, #340]	@ (8001f7c <HAL_I2C_MspInit+0x1cc>)
 8001e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001e34:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001e38:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e3c:	2312      	movs	r3, #18
 8001e3e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e4e:	2304      	movs	r3, #4
 8001e50:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e54:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4849      	ldr	r0, [pc, #292]	@ (8001f80 <HAL_I2C_MspInit+0x1d0>)
 8001e5c:	f005 fb60 	bl	8007520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e60:	4b46      	ldr	r3, [pc, #280]	@ (8001f7c <HAL_I2C_MspInit+0x1cc>)
 8001e62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e66:	4a45      	ldr	r2, [pc, #276]	@ (8001f7c <HAL_I2C_MspInit+0x1cc>)
 8001e68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e6c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001e70:	4b42      	ldr	r3, [pc, #264]	@ (8001f7c <HAL_I2C_MspInit+0x1cc>)
 8001e72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e76:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001e7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e7e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e88:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e8c:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e8e:	e06e      	b.n	8001f6e <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8001e90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e94:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a39      	ldr	r2, [pc, #228]	@ (8001f84 <HAL_I2C_MspInit+0x1d4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d165      	bne.n	8001f6e <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ea2:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb4:	f107 0318 	add.w	r3, r7, #24
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f009 f813 	bl	800aee4 <HAL_RCCEx_PeriphCLKConfig>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8001ec4:	f7ff fc92 	bl	80017ec <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ec8:	4b2c      	ldr	r3, [pc, #176]	@ (8001f7c <HAL_I2C_MspInit+0x1cc>)
 8001eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ece:	4a2b      	ldr	r2, [pc, #172]	@ (8001f7c <HAL_I2C_MspInit+0x1cc>)
 8001ed0:	f043 0320 	orr.w	r3, r3, #32
 8001ed4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ed8:	4b28      	ldr	r3, [pc, #160]	@ (8001f7c <HAL_I2C_MspInit+0x1cc>)
 8001eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ede:	f003 0220 	and.w	r2, r3, #32
 8001ee2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ee6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ef0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ef4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001efc:	2312      	movs	r3, #18
 8001efe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f0e:	2304      	movs	r3, #4
 8001f10:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f14:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001f18:	4619      	mov	r1, r3
 8001f1a:	481b      	ldr	r0, [pc, #108]	@ (8001f88 <HAL_I2C_MspInit+0x1d8>)
 8001f1c:	f005 fb00 	bl	8007520 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f20:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <HAL_I2C_MspInit+0x1cc>)
 8001f22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f26:	4a15      	ldr	r2, [pc, #84]	@ (8001f7c <HAL_I2C_MspInit+0x1cc>)
 8001f28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f2c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001f30:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <HAL_I2C_MspInit+0x1cc>)
 8001f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f36:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f4c:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	2039      	movs	r0, #57	@ 0x39
 8001f54:	f003 f9ca 	bl	80052ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001f58:	2039      	movs	r0, #57	@ 0x39
 8001f5a:	f003 f9e1 	bl	8005320 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	203a      	movs	r0, #58	@ 0x3a
 8001f64:	f003 f9c2 	bl	80052ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001f68:	203a      	movs	r0, #58	@ 0x3a
 8001f6a:	f003 f9d9 	bl	8005320 <HAL_NVIC_EnableIRQ>
}
 8001f6e:	bf00      	nop
 8001f70:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40005400 	.word	0x40005400
 8001f7c:	46020c00 	.word	0x46020c00
 8001f80:	42021800 	.word	0x42021800
 8001f84:	40005800 	.word	0x40005800
 8001f88:	42021400 	.word	0x42021400

08001f8c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b0c6      	sub	sp, #280	@ 0x118
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f96:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f9a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fac:	f107 0320 	add.w	r3, r7, #32
 8001fb0:	22e0      	movs	r2, #224	@ 0xe0
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f00f fdec 	bl	8011b92 <memset>
  if(hltdc->Instance==LTDC)
 8001fba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fbe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a92      	ldr	r2, [pc, #584]	@ (8002210 <HAL_LTDC_MspInit+0x284>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	f040 811b 	bne.w	8002204 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 0302 	mov.w	r3, #2
 8001fd6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8001fe4:	2304      	movs	r3, #4
 8001fe6:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8001fe8:	2332      	movs	r3, #50	@ 0x32
 8001fea:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8001fec:	2302      	movs	r3, #2
 8001fee:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8001ff4:	2308      	movs	r3, #8
 8001ff6:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8002000:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002004:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002006:	f107 0320 	add.w	r3, r7, #32
 800200a:	4618      	mov	r0, r3
 800200c:	f008 ff6a 	bl	800aee4 <HAL_RCCEx_PeriphCLKConfig>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8002016:	f7ff fbe9 	bl	80017ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800201a:	4b7e      	ldr	r3, [pc, #504]	@ (8002214 <HAL_LTDC_MspInit+0x288>)
 800201c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002020:	4a7c      	ldr	r2, [pc, #496]	@ (8002214 <HAL_LTDC_MspInit+0x288>)
 8002022:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002026:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800202a:	4b7a      	ldr	r3, [pc, #488]	@ (8002214 <HAL_LTDC_MspInit+0x288>)
 800202c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002030:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002038:	4b76      	ldr	r3, [pc, #472]	@ (8002214 <HAL_LTDC_MspInit+0x288>)
 800203a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800203e:	4a75      	ldr	r2, [pc, #468]	@ (8002214 <HAL_LTDC_MspInit+0x288>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002048:	4b72      	ldr	r3, [pc, #456]	@ (8002214 <HAL_LTDC_MspInit+0x288>)
 800204a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800204e:	f003 0202 	and.w	r2, r3, #2
 8002052:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002056:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002060:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002064:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002066:	4b6b      	ldr	r3, [pc, #428]	@ (8002214 <HAL_LTDC_MspInit+0x288>)
 8002068:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800206c:	4a69      	ldr	r2, [pc, #420]	@ (8002214 <HAL_LTDC_MspInit+0x288>)
 800206e:	f043 0310 	orr.w	r3, r3, #16
 8002072:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002076:	4b67      	ldr	r3, [pc, #412]	@ (8002214 <HAL_LTDC_MspInit+0x288>)
 8002078:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800207c:	f003 0210 	and.w	r2, r3, #16
 8002080:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002084:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800208e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002092:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002094:	4b5f      	ldr	r3, [pc, #380]	@ (8002214 <HAL_LTDC_MspInit+0x288>)
 8002096:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800209a:	4a5e      	ldr	r2, [pc, #376]	@ (8002214 <HAL_LTDC_MspInit+0x288>)
 800209c:	f043 0308 	orr.w	r3, r3, #8
 80020a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020a4:	4b5b      	ldr	r3, [pc, #364]	@ (8002214 <HAL_LTDC_MspInit+0x288>)
 80020a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020aa:	f003 0208 	and.w	r2, r3, #8
 80020ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80020c0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c2:	4b54      	ldr	r3, [pc, #336]	@ (8002214 <HAL_LTDC_MspInit+0x288>)
 80020c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020c8:	4a52      	ldr	r2, [pc, #328]	@ (8002214 <HAL_LTDC_MspInit+0x288>)
 80020ca:	f043 0304 	orr.w	r3, r3, #4
 80020ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020d2:	4b50      	ldr	r3, [pc, #320]	@ (8002214 <HAL_LTDC_MspInit+0x288>)
 80020d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020d8:	f003 0204 	and.w	r2, r3, #4
 80020dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020ee:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020f0:	2304      	movs	r3, #4
 80020f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002108:	2308      	movs	r3, #8
 800210a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002112:	4619      	mov	r1, r3
 8002114:	4840      	ldr	r0, [pc, #256]	@ (8002218 <HAL_LTDC_MspInit+0x28c>)
 8002116:	f005 fa03 	bl	8007520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800211a:	f64f 7381 	movw	r3, #65409	@ 0xff81
 800211e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002134:	2308      	movs	r3, #8
 8002136:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800213a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800213e:	4619      	mov	r1, r3
 8002140:	4836      	ldr	r0, [pc, #216]	@ (800221c <HAL_LTDC_MspInit+0x290>)
 8002142:	f005 f9ed 	bl	8007520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002146:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 800214a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002160:	2308      	movs	r3, #8
 8002162:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002166:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800216a:	4619      	mov	r1, r3
 800216c:	482c      	ldr	r0, [pc, #176]	@ (8002220 <HAL_LTDC_MspInit+0x294>)
 800216e:	f005 f9d7 	bl	8007520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002172:	23c0      	movs	r3, #192	@ 0xc0
 8002174:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	2300      	movs	r3, #0
 8002186:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 800218a:	2307      	movs	r3, #7
 800218c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002190:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002194:	4619      	mov	r1, r3
 8002196:	4823      	ldr	r0, [pc, #140]	@ (8002224 <HAL_LTDC_MspInit+0x298>)
 8002198:	f005 f9c2 	bl	8007520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800219c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80021b6:	2308      	movs	r3, #8
 80021b8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021bc:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80021c0:	4619      	mov	r1, r3
 80021c2:	4818      	ldr	r0, [pc, #96]	@ (8002224 <HAL_LTDC_MspInit+0x298>)
 80021c4:	f005 f9ac 	bl	8007520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 80021e2:	2307      	movs	r3, #7
 80021e4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e8:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80021ec:	4619      	mov	r1, r3
 80021ee:	480a      	ldr	r0, [pc, #40]	@ (8002218 <HAL_LTDC_MspInit+0x28c>)
 80021f0:	f005 f996 	bl	8007520 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2100      	movs	r1, #0
 80021f8:	2087      	movs	r0, #135	@ 0x87
 80021fa:	f003 f877 	bl	80052ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80021fe:	2087      	movs	r0, #135	@ 0x87
 8002200:	f003 f88e 	bl	8005320 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002204:	bf00      	nop
 8002206:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40016800 	.word	0x40016800
 8002214:	46020c00 	.word	0x46020c00
 8002218:	42020400 	.word	0x42020400
 800221c:	42021000 	.word	0x42021000
 8002220:	42020c00 	.word	0x42020c00
 8002224:	42020800 	.word	0x42020800

08002228 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b0bc      	sub	sp, #240	@ 0xf0
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	22e0      	movs	r2, #224	@ 0xe0
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f00f fcaa 	bl	8011b92 <memset>
  if(hrtc->Instance==RTC)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1d      	ldr	r2, [pc, #116]	@ (80022b8 <HAL_RTC_MspInit+0x90>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d132      	bne.n	80022ae <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002248:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002254:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800225c:	f107 0310 	add.w	r3, r7, #16
 8002260:	4618      	mov	r0, r3
 8002262:	f008 fe3f 	bl	800aee4 <HAL_RCCEx_PeriphCLKConfig>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800226c:	f7ff fabe 	bl	80017ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002270:	4b12      	ldr	r3, [pc, #72]	@ (80022bc <HAL_RTC_MspInit+0x94>)
 8002272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002276:	4a11      	ldr	r2, [pc, #68]	@ (80022bc <HAL_RTC_MspInit+0x94>)
 8002278:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800227c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002280:	4b0e      	ldr	r3, [pc, #56]	@ (80022bc <HAL_RTC_MspInit+0x94>)
 8002282:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002286:	4a0d      	ldr	r2, [pc, #52]	@ (80022bc <HAL_RTC_MspInit+0x94>)
 8002288:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800228c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002290:	4b0a      	ldr	r3, [pc, #40]	@ (80022bc <HAL_RTC_MspInit+0x94>)
 8002292:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002296:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 800229e:	4b07      	ldr	r3, [pc, #28]	@ (80022bc <HAL_RTC_MspInit+0x94>)
 80022a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022a4:	4a05      	ldr	r2, [pc, #20]	@ (80022bc <HAL_RTC_MspInit+0x94>)
 80022a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80022ae:	bf00      	nop
 80022b0:	37f0      	adds	r7, #240	@ 0xf0
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	46007800 	.word	0x46007800
 80022bc:	46020c00 	.word	0x46020c00

080022c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0b      	ldr	r2, [pc, #44]	@ (80022fc <HAL_TIM_PWM_MspInit+0x3c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d10e      	bne.n	80022f0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002300 <HAL_TIM_PWM_MspInit+0x40>)
 80022d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022d8:	4a09      	ldr	r2, [pc, #36]	@ (8002300 <HAL_TIM_PWM_MspInit+0x40>)
 80022da:	f043 0302 	orr.w	r3, r3, #2
 80022de:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80022e2:	4b07      	ldr	r3, [pc, #28]	@ (8002300 <HAL_TIM_PWM_MspInit+0x40>)
 80022e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	40000400 	.word	0x40000400
 8002300:	46020c00 	.word	0x46020c00

08002304 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0b      	ldr	r2, [pc, #44]	@ (8002340 <HAL_TIM_Base_MspInit+0x3c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d10e      	bne.n	8002334 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002316:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <HAL_TIM_Base_MspInit+0x40>)
 8002318:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800231c:	4a09      	ldr	r2, [pc, #36]	@ (8002344 <HAL_TIM_Base_MspInit+0x40>)
 800231e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002322:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002326:	4b07      	ldr	r3, [pc, #28]	@ (8002344 <HAL_TIM_Base_MspInit+0x40>)
 8002328:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800232c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40014000 	.word	0x40014000
 8002344:	46020c00 	.word	0x46020c00

08002348 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a12      	ldr	r2, [pc, #72]	@ (80023b0 <HAL_TIM_MspPostInit+0x68>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d11e      	bne.n	80023a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800236a:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <HAL_TIM_MspPostInit+0x6c>)
 800236c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002370:	4a10      	ldr	r2, [pc, #64]	@ (80023b4 <HAL_TIM_MspPostInit+0x6c>)
 8002372:	f043 0310 	orr.w	r3, r3, #16
 8002376:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800237a:	4b0e      	ldr	r3, [pc, #56]	@ (80023b4 <HAL_TIM_MspPostInit+0x6c>)
 800237c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 8002388:	2340      	movs	r3, #64	@ 0x40
 800238a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002398:	2302      	movs	r3, #2
 800239a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800239c:	f107 030c 	add.w	r3, r7, #12
 80023a0:	4619      	mov	r1, r3
 80023a2:	4805      	ldr	r0, [pc, #20]	@ (80023b8 <HAL_TIM_MspPostInit+0x70>)
 80023a4:	f005 f8bc 	bl	8007520 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80023a8:	bf00      	nop
 80023aa:	3720      	adds	r7, #32
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40000400 	.word	0x40000400
 80023b4:	46020c00 	.word	0x46020c00
 80023b8:	42021000 	.word	0x42021000

080023bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b0c2      	sub	sp, #264	@ 0x108
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80023c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80023ca:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023dc:	f107 0310 	add.w	r3, r7, #16
 80023e0:	22e0      	movs	r2, #224	@ 0xe0
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f00f fbd4 	bl	8011b92 <memset>
  if(huart->Instance==USART1)
 80023ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80023ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a2f      	ldr	r2, [pc, #188]	@ (80024b4 <HAL_UART_MspInit+0xf8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d155      	bne.n	80024a8 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023fc:	f04f 0201 	mov.w	r2, #1
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002408:	2300      	movs	r3, #0
 800240a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800240c:	f107 0310 	add.w	r3, r7, #16
 8002410:	4618      	mov	r0, r3
 8002412:	f008 fd67 	bl	800aee4 <HAL_RCCEx_PeriphCLKConfig>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 800241c:	f7ff f9e6 	bl	80017ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002420:	4b25      	ldr	r3, [pc, #148]	@ (80024b8 <HAL_UART_MspInit+0xfc>)
 8002422:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002426:	4a24      	ldr	r2, [pc, #144]	@ (80024b8 <HAL_UART_MspInit+0xfc>)
 8002428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800242c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002430:	4b21      	ldr	r3, [pc, #132]	@ (80024b8 <HAL_UART_MspInit+0xfc>)
 8002432:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	4b1e      	ldr	r3, [pc, #120]	@ (80024b8 <HAL_UART_MspInit+0xfc>)
 8002440:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002444:	4a1c      	ldr	r2, [pc, #112]	@ (80024b8 <HAL_UART_MspInit+0xfc>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800244e:	4b1a      	ldr	r3, [pc, #104]	@ (80024b8 <HAL_UART_MspInit+0xfc>)
 8002450:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002454:	f003 0201 	and.w	r2, r3, #1
 8002458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800245c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002466:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800246a:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800246c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002470:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	2302      	movs	r3, #2
 8002476:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002480:	2300      	movs	r3, #0
 8002482:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002486:	2307      	movs	r3, #7
 8002488:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002490:	4619      	mov	r1, r3
 8002492:	480a      	ldr	r0, [pc, #40]	@ (80024bc <HAL_UART_MspInit+0x100>)
 8002494:	f005 f844 	bl	8007520 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2100      	movs	r1, #0
 800249c:	203d      	movs	r0, #61	@ 0x3d
 800249e:	f002 ff25 	bl	80052ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024a2:	203d      	movs	r0, #61	@ 0x3d
 80024a4:	f002 ff3c 	bl	8005320 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80024a8:	bf00      	nop
 80024aa:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40013800 	.word	0x40013800
 80024b8:	46020c00 	.word	0x46020c00
 80024bc:	42020000 	.word	0x42020000

080024c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b0be      	sub	sp, #248	@ 0xf8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024c8:	f107 0318 	add.w	r3, r7, #24
 80024cc:	22e0      	movs	r2, #224	@ 0xe0
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f00f fb5e 	bl	8011b92 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a3a      	ldr	r2, [pc, #232]	@ (80025c4 <HAL_PCD_MspInit+0x104>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d16d      	bne.n	80025bc <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e0:	4b39      	ldr	r3, [pc, #228]	@ (80025c8 <HAL_PCD_MspInit+0x108>)
 80024e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80024e6:	4a38      	ldr	r2, [pc, #224]	@ (80025c8 <HAL_PCD_MspInit+0x108>)
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80024f0:	4b35      	ldr	r3, [pc, #212]	@ (80025c8 <HAL_PCD_MspInit+0x108>)
 80024f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	f04f 0308 	mov.w	r3, #8
 8002506:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 800250a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800250e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002512:	f107 0318 	add.w	r3, r7, #24
 8002516:	4618      	mov	r0, r3
 8002518:	f008 fce4 	bl	800aee4 <HAL_RCCEx_PeriphCLKConfig>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 8002522:	f7ff f963 	bl	80017ec <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8002526:	200c      	movs	r0, #12
 8002528:	f000 fc1c 	bl	8002d64 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800252c:	4b26      	ldr	r3, [pc, #152]	@ (80025c8 <HAL_PCD_MspInit+0x108>)
 800252e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002532:	4a25      	ldr	r2, [pc, #148]	@ (80025c8 <HAL_PCD_MspInit+0x108>)
 8002534:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002538:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800253c:	4b22      	ldr	r3, [pc, #136]	@ (80025c8 <HAL_PCD_MspInit+0x108>)
 800253e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 800254a:	4b1f      	ldr	r3, [pc, #124]	@ (80025c8 <HAL_PCD_MspInit+0x108>)
 800254c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002550:	4a1d      	ldr	r2, [pc, #116]	@ (80025c8 <HAL_PCD_MspInit+0x108>)
 8002552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002556:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800255a:	4b1b      	ldr	r3, [pc, #108]	@ (80025c8 <HAL_PCD_MspInit+0x108>)
 800255c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002560:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002568:	4b17      	ldr	r3, [pc, #92]	@ (80025c8 <HAL_PCD_MspInit+0x108>)
 800256a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d11b      	bne.n	80025ae <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	4b14      	ldr	r3, [pc, #80]	@ (80025c8 <HAL_PCD_MspInit+0x108>)
 8002578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800257c:	4a12      	ldr	r2, [pc, #72]	@ (80025c8 <HAL_PCD_MspInit+0x108>)
 800257e:	f043 0304 	orr.w	r3, r3, #4
 8002582:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002586:	4b10      	ldr	r3, [pc, #64]	@ (80025c8 <HAL_PCD_MspInit+0x108>)
 8002588:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002594:	f007 f9ac 	bl	80098f0 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002598:	f007 f9da 	bl	8009950 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 800259c:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <HAL_PCD_MspInit+0x108>)
 800259e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025a2:	4a09      	ldr	r2, [pc, #36]	@ (80025c8 <HAL_PCD_MspInit+0x108>)
 80025a4:	f023 0304 	bic.w	r3, r3, #4
 80025a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80025ac:	e003      	b.n	80025b6 <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80025ae:	f007 f99f 	bl	80098f0 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 80025b2:	f007 f9cd 	bl	8009950 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 80025b6:	2001      	movs	r0, #1
 80025b8:	f000 fbc0 	bl	8002d3c <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 80025bc:	bf00      	nop
 80025be:	37f8      	adds	r7, #248	@ 0xf8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	42040000 	.word	0x42040000
 80025c8:	46020c00 	.word	0x46020c00

080025cc <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b0a4      	sub	sp, #144	@ 0x90
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4abb      	ldr	r2, [pc, #748]	@ (80028c8 <HAL_SAI_MspInit+0x2fc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	f040 80ca 	bne.w	8002774 <HAL_SAI_MspInit+0x1a8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80025e0:	4bba      	ldr	r3, [pc, #744]	@ (80028cc <HAL_SAI_MspInit+0x300>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10e      	bne.n	8002606 <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80025e8:	4bb9      	ldr	r3, [pc, #740]	@ (80028d0 <HAL_SAI_MspInit+0x304>)
 80025ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025ee:	4ab8      	ldr	r2, [pc, #736]	@ (80028d0 <HAL_SAI_MspInit+0x304>)
 80025f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025f4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80025f8:	4bb5      	ldr	r3, [pc, #724]	@ (80028d0 <HAL_SAI_MspInit+0x304>)
 80025fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002606:	4bb1      	ldr	r3, [pc, #708]	@ (80028cc <HAL_SAI_MspInit+0x300>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	3301      	adds	r3, #1
 800260c:	4aaf      	ldr	r2, [pc, #700]	@ (80028cc <HAL_SAI_MspInit+0x300>)
 800260e:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002610:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002614:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002628:	230d      	movs	r3, #13
 800262a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002632:	4619      	mov	r1, r3
 8002634:	48a7      	ldr	r0, [pc, #668]	@ (80028d4 <HAL_SAI_MspInit+0x308>)
 8002636:	f004 ff73 	bl	8007520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800263a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800263e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002640:	2302      	movs	r3, #2
 8002642:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264c:	2303      	movs	r3, #3
 800264e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002652:	230d      	movs	r3, #13
 8002654:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002658:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800265c:	4619      	mov	r1, r3
 800265e:	489d      	ldr	r0, [pc, #628]	@ (80028d4 <HAL_SAI_MspInit+0x308>)
 8002660:	f004 ff5e 	bl	8007520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002664:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002668:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002676:	2300      	movs	r3, #0
 8002678:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800267c:	230d      	movs	r3, #13
 800267e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002682:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002686:	4619      	mov	r1, r3
 8002688:	4893      	ldr	r0, [pc, #588]	@ (80028d8 <HAL_SAI_MspInit+0x30c>)
 800268a:	f004 ff49 	bl	8007520 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800268e:	2321      	movs	r3, #33	@ 0x21
 8002690:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 8002692:	2326      	movs	r3, #38	@ 0x26
 8002694:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800269a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800269e:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 80026a0:	2308      	movs	r3, #8
 80026a2:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 80026a4:	2300      	movs	r3, #0
 80026a6:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80026a8:	2302      	movs	r3, #2
 80026aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80026ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 80026b2:	2301      	movs	r3, #1
 80026b4:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 80026b6:	2301      	movs	r3, #1
 80026b8:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80026be:	2300      	movs	r3, #0
 80026c0:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80026c6:	2300      	movs	r3, #0
 80026c8:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80026ca:	2300      	movs	r3, #0
 80026cc:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80026ce:	2300      	movs	r3, #0
 80026d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 80026d2:	f107 0310 	add.w	r3, r7, #16
 80026d6:	4981      	ldr	r1, [pc, #516]	@ (80028dc <HAL_SAI_MspInit+0x310>)
 80026d8:	4618      	mov	r0, r3
 80026da:	f004 f835 	bl	8006748 <HAL_DMAEx_List_BuildNode>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 80026e4:	f7ff f882 	bl	80017ec <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 80026e8:	4a7c      	ldr	r2, [pc, #496]	@ (80028dc <HAL_SAI_MspInit+0x310>)
 80026ea:	2100      	movs	r1, #0
 80026ec:	487c      	ldr	r0, [pc, #496]	@ (80028e0 <HAL_SAI_MspInit+0x314>)
 80026ee:	f004 f857 	bl	80067a0 <HAL_DMAEx_List_InsertNode>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_SAI_MspInit+0x130>
    {
      Error_Handler();
 80026f8:	f7ff f878 	bl	80017ec <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 80026fc:	4878      	ldr	r0, [pc, #480]	@ (80028e0 <HAL_SAI_MspInit+0x314>)
 80026fe:	f004 f918 	bl	8006932 <HAL_DMAEx_List_SetCircularMode>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_SAI_MspInit+0x140>
    {
      Error_Handler();
 8002708:	f7ff f870 	bl	80017ec <Error_Handler>
    }

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 800270c:	4b75      	ldr	r3, [pc, #468]	@ (80028e4 <HAL_SAI_MspInit+0x318>)
 800270e:	4a76      	ldr	r2, [pc, #472]	@ (80028e8 <HAL_SAI_MspInit+0x31c>)
 8002710:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8002712:	4b74      	ldr	r3, [pc, #464]	@ (80028e4 <HAL_SAI_MspInit+0x318>)
 8002714:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002718:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800271a:	4b72      	ldr	r3, [pc, #456]	@ (80028e4 <HAL_SAI_MspInit+0x318>)
 800271c:	2200      	movs	r2, #0
 800271e:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002720:	4b70      	ldr	r3, [pc, #448]	@ (80028e4 <HAL_SAI_MspInit+0x318>)
 8002722:	2200      	movs	r2, #0
 8002724:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002726:	4b6f      	ldr	r3, [pc, #444]	@ (80028e4 <HAL_SAI_MspInit+0x318>)
 8002728:	2200      	movs	r2, #0
 800272a:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800272c:	4b6d      	ldr	r3, [pc, #436]	@ (80028e4 <HAL_SAI_MspInit+0x318>)
 800272e:	2281      	movs	r2, #129	@ 0x81
 8002730:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8002732:	486c      	ldr	r0, [pc, #432]	@ (80028e4 <HAL_SAI_MspInit+0x318>)
 8002734:	f003 fe48 	bl	80063c8 <HAL_DMAEx_List_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_SAI_MspInit+0x176>
    {
      Error_Handler();
 800273e:	f7ff f855 	bl	80017ec <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 8002742:	4967      	ldr	r1, [pc, #412]	@ (80028e0 <HAL_SAI_MspInit+0x314>)
 8002744:	4867      	ldr	r0, [pc, #412]	@ (80028e4 <HAL_SAI_MspInit+0x318>)
 8002746:	f004 f955 	bl	80069f4 <HAL_DMAEx_List_LinkQ>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_SAI_MspInit+0x188>
    {
      Error_Handler();
 8002750:	f7ff f84c 	bl	80017ec <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmatx, handle_GPDMA1_Channel3);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a63      	ldr	r2, [pc, #396]	@ (80028e4 <HAL_SAI_MspInit+0x318>)
 8002758:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800275c:	4a61      	ldr	r2, [pc, #388]	@ (80028e4 <HAL_SAI_MspInit+0x318>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002762:	2110      	movs	r1, #16
 8002764:	485f      	ldr	r0, [pc, #380]	@ (80028e4 <HAL_SAI_MspInit+0x318>)
 8002766:	f003 fa3d 	bl	8005be4 <HAL_DMA_ConfigChannelAttributes>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 8002770:	f7ff f83c 	bl	80017ec <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a5c      	ldr	r2, [pc, #368]	@ (80028ec <HAL_SAI_MspInit+0x320>)
 800277a:	4293      	cmp	r3, r2
 800277c:	f040 80eb 	bne.w	8002956 <HAL_SAI_MspInit+0x38a>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002780:	4b52      	ldr	r3, [pc, #328]	@ (80028cc <HAL_SAI_MspInit+0x300>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10e      	bne.n	80027a6 <HAL_SAI_MspInit+0x1da>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002788:	4b51      	ldr	r3, [pc, #324]	@ (80028d0 <HAL_SAI_MspInit+0x304>)
 800278a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800278e:	4a50      	ldr	r2, [pc, #320]	@ (80028d0 <HAL_SAI_MspInit+0x304>)
 8002790:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002794:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002798:	4b4d      	ldr	r3, [pc, #308]	@ (80028d0 <HAL_SAI_MspInit+0x304>)
 800279a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800279e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 80027a6:	4b49      	ldr	r3, [pc, #292]	@ (80028cc <HAL_SAI_MspInit+0x300>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3301      	adds	r3, #1
 80027ac:	4a47      	ldr	r2, [pc, #284]	@ (80028cc <HAL_SAI_MspInit+0x300>)
 80027ae:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80027b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c2:	2303      	movs	r3, #3
 80027c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80027c8:	230d      	movs	r3, #13
 80027ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ce:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80027d2:	4619      	mov	r1, r3
 80027d4:	4846      	ldr	r0, [pc, #280]	@ (80028f0 <HAL_SAI_MspInit+0x324>)
 80027d6:	f004 fea3 	bl	8007520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027de:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e0:	2302      	movs	r3, #2
 80027e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ec:	2303      	movs	r3, #3
 80027ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80027f2:	230d      	movs	r3, #13
 80027f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80027fc:	4619      	mov	r1, r3
 80027fe:	483d      	ldr	r0, [pc, #244]	@ (80028f4 <HAL_SAI_MspInit+0x328>)
 8002800:	f004 fe8e 	bl	8007520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002804:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002808:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002816:	2300      	movs	r3, #0
 8002818:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800281c:	230d      	movs	r3, #13
 800281e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002822:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002826:	4619      	mov	r1, r3
 8002828:	4832      	ldr	r0, [pc, #200]	@ (80028f4 <HAL_SAI_MspInit+0x328>)
 800282a:	f004 fe79 	bl	8007520 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 800282e:	2321      	movs	r3, #33	@ 0x21
 8002830:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 8002832:	2327      	movs	r3, #39	@ 0x27
 8002834:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800283e:	2300      	movs	r3, #0
 8002840:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002842:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002846:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002848:	2302      	movs	r3, #2
 800284a:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 800284c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002850:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 8002852:	2301      	movs	r3, #1
 8002854:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 8002856:	2301      	movs	r3, #1
 8002858:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800285a:	2300      	movs	r3, #0
 800285c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800285e:	2300      	movs	r3, #0
 8002860:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002862:	2300      	movs	r3, #0
 8002864:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002866:	2300      	movs	r3, #0
 8002868:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800286a:	2300      	movs	r3, #0
 800286c:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800286e:	2300      	movs	r3, #0
 8002870:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8002872:	f107 0310 	add.w	r3, r7, #16
 8002876:	4920      	ldr	r1, [pc, #128]	@ (80028f8 <HAL_SAI_MspInit+0x32c>)
 8002878:	4618      	mov	r0, r3
 800287a:	f003 ff65 	bl	8006748 <HAL_DMAEx_List_BuildNode>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_SAI_MspInit+0x2bc>
    {
      Error_Handler();
 8002884:	f7fe ffb2 	bl	80017ec <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8002888:	4a1b      	ldr	r2, [pc, #108]	@ (80028f8 <HAL_SAI_MspInit+0x32c>)
 800288a:	2100      	movs	r1, #0
 800288c:	481b      	ldr	r0, [pc, #108]	@ (80028fc <HAL_SAI_MspInit+0x330>)
 800288e:	f003 ff87 	bl	80067a0 <HAL_DMAEx_List_InsertNode>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_SAI_MspInit+0x2d0>
    {
      Error_Handler();
 8002898:	f7fe ffa8 	bl	80017ec <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 800289c:	4817      	ldr	r0, [pc, #92]	@ (80028fc <HAL_SAI_MspInit+0x330>)
 800289e:	f004 f848 	bl	8006932 <HAL_DMAEx_List_SetCircularMode>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_SAI_MspInit+0x2e0>
    {
      Error_Handler();
 80028a8:	f7fe ffa0 	bl	80017ec <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80028ac:	4b14      	ldr	r3, [pc, #80]	@ (8002900 <HAL_SAI_MspInit+0x334>)
 80028ae:	4a15      	ldr	r2, [pc, #84]	@ (8002904 <HAL_SAI_MspInit+0x338>)
 80028b0:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 80028b2:	4b13      	ldr	r3, [pc, #76]	@ (8002900 <HAL_SAI_MspInit+0x334>)
 80028b4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80028b8:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80028ba:	4b11      	ldr	r3, [pc, #68]	@ (8002900 <HAL_SAI_MspInit+0x334>)
 80028bc:	2200      	movs	r2, #0
 80028be:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80028c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002900 <HAL_SAI_MspInit+0x334>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80028c6:	e01f      	b.n	8002908 <HAL_SAI_MspInit+0x33c>
 80028c8:	40015804 	.word	0x40015804
 80028cc:	20004ea0 	.word	0x20004ea0
 80028d0:	46020c00 	.word	0x46020c00
 80028d4:	42020400 	.word	0x42020400
 80028d8:	42021800 	.word	0x42021800
 80028dc:	20000600 	.word	0x20000600
 80028e0:	20000624 	.word	0x20000624
 80028e4:	2000063c 	.word	0x2000063c
 80028e8:	400201d0 	.word	0x400201d0
 80028ec:	40015824 	.word	0x40015824
 80028f0:	42020000 	.word	0x42020000
 80028f4:	42020800 	.word	0x42020800
 80028f8:	200006b4 	.word	0x200006b4
 80028fc:	200006d8 	.word	0x200006d8
 8002900:	200006f0 	.word	0x200006f0
 8002904:	400200d0 	.word	0x400200d0
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002908:	4b15      	ldr	r3, [pc, #84]	@ (8002960 <HAL_SAI_MspInit+0x394>)
 800290a:	2200      	movs	r2, #0
 800290c:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800290e:	4b14      	ldr	r3, [pc, #80]	@ (8002960 <HAL_SAI_MspInit+0x394>)
 8002910:	2281      	movs	r2, #129	@ 0x81
 8002912:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8002914:	4812      	ldr	r0, [pc, #72]	@ (8002960 <HAL_SAI_MspInit+0x394>)
 8002916:	f003 fd57 	bl	80063c8 <HAL_DMAEx_List_Init>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_SAI_MspInit+0x358>
    {
      Error_Handler();
 8002920:	f7fe ff64 	bl	80017ec <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8002924:	490f      	ldr	r1, [pc, #60]	@ (8002964 <HAL_SAI_MspInit+0x398>)
 8002926:	480e      	ldr	r0, [pc, #56]	@ (8002960 <HAL_SAI_MspInit+0x394>)
 8002928:	f004 f864 	bl	80069f4 <HAL_DMAEx_List_LinkQ>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_SAI_MspInit+0x36a>
    {
      Error_Handler();
 8002932:	f7fe ff5b 	bl	80017ec <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a09      	ldr	r2, [pc, #36]	@ (8002960 <HAL_SAI_MspInit+0x394>)
 800293a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800293e:	4a08      	ldr	r2, [pc, #32]	@ (8002960 <HAL_SAI_MspInit+0x394>)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002944:	2110      	movs	r1, #16
 8002946:	4806      	ldr	r0, [pc, #24]	@ (8002960 <HAL_SAI_MspInit+0x394>)
 8002948:	f003 f94c 	bl	8005be4 <HAL_DMA_ConfigChannelAttributes>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_SAI_MspInit+0x38a>
    {
      Error_Handler();
 8002952:	f7fe ff4b 	bl	80017ec <Error_Handler>
    }

    }
}
 8002956:	bf00      	nop
 8002958:	3790      	adds	r7, #144	@ 0x90
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	200006f0 	.word	0x200006f0
 8002964:	200006d8 	.word	0x200006d8

08002968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800296c:	bf00      	nop
 800296e:	e7fd      	b.n	800296c <NMI_Handler+0x4>

08002970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002974:	bf00      	nop
 8002976:	e7fd      	b.n	8002974 <HardFault_Handler+0x4>

08002978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800297c:	bf00      	nop
 800297e:	e7fd      	b.n	800297c <MemManage_Handler+0x4>

08002980 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002984:	bf00      	nop
 8002986:	e7fd      	b.n	8002984 <BusFault_Handler+0x4>

08002988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800298c:	bf00      	nop
 800298e:	e7fd      	b.n	800298c <UsageFault_Handler+0x4>

08002990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029be:	f000 f979 	bl	8002cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 80029ca:	2002      	movs	r0, #2
 80029cc:	f004 ff98 	bl	8007900 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80029d0:	bf00      	nop
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 80029d8:	2010      	movs	r0, #16
 80029da:	f004 ff91 	bl	8007900 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 80029e6:	2020      	movs	r0, #32
 80029e8:	f004 ff8a 	bl	8007900 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 80029ec:	bf00      	nop
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80029f4:	4802      	ldr	r0, [pc, #8]	@ (8002a00 <GPDMA1_Channel0_IRQHandler+0x10>)
 80029f6:	f002 ff86 	bl	8005906 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000198 	.word	0x20000198

08002a04 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8002a08:	4802      	ldr	r0, [pc, #8]	@ (8002a14 <GPDMA1_Channel1_IRQHandler+0x10>)
 8002a0a:	f002 ff7c 	bl	8005906 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200006f0 	.word	0x200006f0

08002a18 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8002a1c:	4802      	ldr	r0, [pc, #8]	@ (8002a28 <GPDMA1_Channel2_IRQHandler+0x10>)
 8002a1e:	f002 ff72 	bl	8005906 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000210 	.word	0x20000210

08002a2c <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8002a30:	4802      	ldr	r0, [pc, #8]	@ (8002a3c <GPDMA1_Channel3_IRQHandler+0x10>)
 8002a32:	f002 ff68 	bl	8005906 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	2000063c 	.word	0x2000063c

08002a40 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a44:	4802      	ldr	r0, [pc, #8]	@ (8002a50 <ADC1_2_IRQHandler+0x10>)
 8002a46:	f001 f925 	bl	8003c94 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000044 	.word	0x20000044

08002a54 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002a58:	4802      	ldr	r0, [pc, #8]	@ (8002a64 <I2C2_EV_IRQHandler+0x10>)
 8002a5a:	f005 f91d 	bl	8007c98 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	200003a4 	.word	0x200003a4

08002a68 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002a6c:	4802      	ldr	r0, [pc, #8]	@ (8002a78 <I2C2_ER_IRQHandler+0x10>)
 8002a6e:	f005 f92d 	bl	8007ccc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	200003a4 	.word	0x200003a4

08002a7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a80:	4802      	ldr	r0, [pc, #8]	@ (8002a8c <USART1_IRQHandler+0x10>)
 8002a82:	f00d fbcd 	bl	8010220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000800 	.word	0x20000800

08002a90 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002a94:	4802      	ldr	r0, [pc, #8]	@ (8002aa0 <LTDC_IRQHandler+0x10>)
 8002a96:	f006 fa9b 	bl	8008fd0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200003f8 	.word	0x200003f8

08002aa4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002aa8:	4b18      	ldr	r3, [pc, #96]	@ (8002b0c <SystemInit+0x68>)
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aae:	4a17      	ldr	r2, [pc, #92]	@ (8002b0c <SystemInit+0x68>)
 8002ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002ab8:	4b15      	ldr	r3, [pc, #84]	@ (8002b10 <SystemInit+0x6c>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002abe:	4b14      	ldr	r3, [pc, #80]	@ (8002b10 <SystemInit+0x6c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002ac4:	4b12      	ldr	r3, [pc, #72]	@ (8002b10 <SystemInit+0x6c>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002aca:	4b11      	ldr	r3, [pc, #68]	@ (8002b10 <SystemInit+0x6c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b10 <SystemInit+0x6c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0e      	ldr	r2, [pc, #56]	@ (8002b10 <SystemInit+0x6c>)
 8002ad6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002ada:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002ade:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <SystemInit+0x6c>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <SystemInit+0x6c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a09      	ldr	r2, [pc, #36]	@ (8002b10 <SystemInit+0x6c>)
 8002aec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002af0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002af2:	4b07      	ldr	r3, [pc, #28]	@ (8002b10 <SystemInit+0x6c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002af8:	4b04      	ldr	r3, [pc, #16]	@ (8002b0c <SystemInit+0x68>)
 8002afa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002afe:	609a      	str	r2, [r3, #8]
  #endif
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000ed00 	.word	0xe000ed00
 8002b10:	46020c00 	.word	0x46020c00

08002b14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b4c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b18:	f7ff ffc4 	bl	8002aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002b1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002b1e:	e003      	b.n	8002b28 <LoopCopyDataInit>

08002b20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002b20:	4b0b      	ldr	r3, [pc, #44]	@ (8002b50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002b22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002b24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002b26:	3104      	adds	r1, #4

08002b28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002b28:	480a      	ldr	r0, [pc, #40]	@ (8002b54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002b2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002b2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002b30:	d3f6      	bcc.n	8002b20 <CopyDataInit>
	ldr	r2, =_sbss
 8002b32:	4a0a      	ldr	r2, [pc, #40]	@ (8002b5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002b34:	e002      	b.n	8002b3c <LoopFillZerobss>

08002b36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002b36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002b38:	f842 3b04 	str.w	r3, [r2], #4

08002b3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002b3c:	4b08      	ldr	r3, [pc, #32]	@ (8002b60 <LoopForever+0x16>)
	cmp	r2, r3
 8002b3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002b40:	d3f9      	bcc.n	8002b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b42:	f00f f82f 	bl	8011ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b46:	f7fd fd41 	bl	80005cc <main>

08002b4a <LoopForever>:

LoopForever:
    b LoopForever
 8002b4a:	e7fe      	b.n	8002b4a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002b4c:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 8002b50:	08011d14 	.word	0x08011d14
	ldr	r0, =_sdata
 8002b54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002b58:	20000028 	.word	0x20000028
	ldr	r2, =_sbss
 8002b5c:	20000028 	.word	0x20000028
	ldr	r3, = _ebss
 8002b60:	20004ea8 	.word	0x20004ea8

08002b64 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b64:	e7fe      	b.n	8002b64 <ADC4_IRQHandler>
	...

08002b68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b6c:	4b12      	ldr	r3, [pc, #72]	@ (8002bb8 <HAL_Init+0x50>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a11      	ldr	r2, [pc, #68]	@ (8002bb8 <HAL_Init+0x50>)
 8002b72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b78:	2003      	movs	r0, #3
 8002b7a:	f002 fbac 	bl	80052d6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002b7e:	f007 ffd3 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 8002b82:	4602      	mov	r2, r0
 8002b84:	4b0d      	ldr	r3, [pc, #52]	@ (8002bbc <HAL_Init+0x54>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	490c      	ldr	r1, [pc, #48]	@ (8002bc0 <HAL_Init+0x58>)
 8002b8e:	5ccb      	ldrb	r3, [r1, r3]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
 8002b94:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc4 <HAL_Init+0x5c>)
 8002b96:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b98:	2004      	movs	r0, #4
 8002b9a:	f002 fbf1 	bl	8005380 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b9e:	200f      	movs	r0, #15
 8002ba0:	f000 f812 	bl	8002bc8 <HAL_InitTick>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e002      	b.n	8002bb4 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002bae:	f7fe fe23 	bl	80017f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40022000 	.word	0x40022000
 8002bbc:	46020c00 	.word	0x46020c00
 8002bc0:	08011c04 	.word	0x08011c04
 8002bc4:	2000001c 	.word	0x2000001c

08002bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002bd4:	4b33      	ldr	r3, [pc, #204]	@ (8002ca4 <HAL_InitTick+0xdc>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e05c      	b.n	8002c9a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002be0:	4b31      	ldr	r3, [pc, #196]	@ (8002ca8 <HAL_InitTick+0xe0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d10c      	bne.n	8002c06 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002bec:	4b2f      	ldr	r3, [pc, #188]	@ (8002cac <HAL_InitTick+0xe4>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca4 <HAL_InitTick+0xdc>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e037      	b.n	8002c76 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002c06:	f002 fc13 	bl	8005430 <HAL_SYSTICK_GetCLKSourceConfig>
 8002c0a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d023      	beq.n	8002c5a <HAL_InitTick+0x92>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d82d      	bhi.n	8002c74 <HAL_InitTick+0xac>
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_InitTick+0x5e>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d00d      	beq.n	8002c40 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002c24:	e026      	b.n	8002c74 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002c26:	4b21      	ldr	r3, [pc, #132]	@ (8002cac <HAL_InitTick+0xe4>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca4 <HAL_InitTick+0xdc>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002c34:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3c:	60fb      	str	r3, [r7, #12]
        break;
 8002c3e:	e01a      	b.n	8002c76 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002c40:	4b18      	ldr	r3, [pc, #96]	@ (8002ca4 <HAL_InitTick+0xdc>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c4e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	60fb      	str	r3, [r7, #12]
        break;
 8002c58:	e00d      	b.n	8002c76 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002c5a:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <HAL_InitTick+0xdc>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c64:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	60fb      	str	r3, [r7, #12]
        break;
 8002c72:	e000      	b.n	8002c76 <HAL_InitTick+0xae>
        break;
 8002c74:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f002 fb60 	bl	800533c <HAL_SYSTICK_Config>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e009      	b.n	8002c9a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c86:	2200      	movs	r2, #0
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8e:	f002 fb2d 	bl	80052ec <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002c92:	4a07      	ldr	r2, [pc, #28]	@ (8002cb0 <HAL_InitTick+0xe8>)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000024 	.word	0x20000024
 8002ca8:	e000e010 	.word	0xe000e010
 8002cac:	2000001c 	.word	0x2000001c
 8002cb0:	20000020 	.word	0x20000020

08002cb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cb8:	4b06      	ldr	r3, [pc, #24]	@ (8002cd4 <HAL_IncTick+0x20>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <HAL_IncTick+0x24>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	4a04      	ldr	r2, [pc, #16]	@ (8002cd8 <HAL_IncTick+0x24>)
 8002cc6:	6013      	str	r3, [r2, #0]
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20000024 	.word	0x20000024
 8002cd8:	20004ea4 	.word	0x20004ea4

08002cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce0:	4b03      	ldr	r3, [pc, #12]	@ (8002cf0 <HAL_GetTick+0x14>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20004ea4 	.word	0x20004ea4

08002cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cfc:	f7ff ffee 	bl	8002cdc <HAL_GetTick>
 8002d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0c:	d005      	beq.n	8002d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d38 <HAL_Delay+0x44>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4413      	add	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d1a:	bf00      	nop
 8002d1c:	f7ff ffde 	bl	8002cdc <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d8f7      	bhi.n	8002d1c <HAL_Delay+0x28>
  {
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000024 	.word	0x20000024

08002d3c <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8002d44:	4b06      	ldr	r3, [pc, #24]	@ (8002d60 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002d46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d48:	f023 0201 	bic.w	r2, r3, #1
 8002d4c:	4904      	ldr	r1, [pc, #16]	@ (8002d60 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	46000400 	.word	0x46000400

08002d64 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8002d6c:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002d6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d70:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8002d74:	4904      	ldr	r1, [pc, #16]	@ (8002d88 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	46000400 	.word	0x46000400

08002d8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	609a      	str	r2, [r3, #8]
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	609a      	str	r2, [r3, #8]
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a0a      	ldr	r2, [pc, #40]	@ (8002e30 <LL_ADC_SetResolution+0x3c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d104      	bne.n	8002e14 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f023 020c 	bic.w	r2, r3, #12
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	60da      	str	r2, [r3, #12]
}
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	46021000 	.word	0x46021000

08002e34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3360      	adds	r3, #96	@ 0x60
 8002e46:	461a      	mov	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	430b      	orrs	r3, r1
 8002e64:	431a      	orrs	r2, r3
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002e6a:	bf00      	nop
 8002e6c:	371c      	adds	r7, #28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3360      	adds	r3, #96	@ 0x60
 8002e84:	461a      	mov	r2, r3
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b087      	sub	sp, #28
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3360      	adds	r3, #96	@ 0x60
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	601a      	str	r2, [r3, #0]
}
 8002ecc:	bf00      	nop
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3360      	adds	r3, #96	@ 0x60
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	601a      	str	r2, [r3, #0]
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b087      	sub	sp, #28
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3360      	adds	r3, #96	@ 0x60
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	601a      	str	r2, [r3, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f52:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f56:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	2a00      	cmp	r2, #0
 8002f6e:	d002      	beq.n	8002f76 <LL_ADC_SetGainCompensation+0x32>
 8002f70:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002f74:	e000      	b.n	8002f78 <LL_ADC_SetGainCompensation+0x34>
 8002f76:	2200      	movs	r2, #0
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	695a      	ldr	r2, [r3, #20]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2107      	movs	r1, #7
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	401a      	ands	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b089      	sub	sp, #36	@ 0x24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4a2b      	ldr	r2, [pc, #172]	@ (80030ac <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d020      	beq.n	8003046 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3330      	adds	r3, #48	@ 0x30
 8003008:	461a      	mov	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	0a1b      	lsrs	r3, r3, #8
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	4413      	add	r3, r2
 8003016:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f003 031f 	and.w	r3, r3, #31
 8003022:	211f      	movs	r1, #31
 8003024:	fa01 f303 	lsl.w	r3, r1, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	401a      	ands	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	0e9b      	lsrs	r3, r3, #26
 8003030:	f003 011f 	and.w	r1, r3, #31
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	fa01 f303 	lsl.w	r3, r1, r3
 800303e:	431a      	orrs	r2, r3
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8003044:	e02b      	b.n	800309e <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	210f      	movs	r1, #15
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	401a      	ands	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d104      	bne.n	800306e <LL_ADC_REG_SetSequencerRanks+0x7e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	0e9b      	lsrs	r3, r3, #26
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	e010      	b.n	8003090 <LL_ADC_REG_SetSequencerRanks+0xa0>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	613b      	str	r3, [r7, #16]
  return result;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8003084:	2320      	movs	r3, #32
 8003086:	e003      	b.n	8003090 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	f001 011f 	and.w	r1, r1, #31
 8003096:	408b      	lsls	r3, r1
 8003098:	431a      	orrs	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800309e:	bf00      	nop
 80030a0:	3724      	adds	r7, #36	@ 0x24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	46021000 	.word	0x46021000

080030b0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d107      	bne.n	80030d4 <LL_ADC_REG_SetSequencerChAdd+0x24>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	0e9b      	lsrs	r3, r3, #26
 80030c8:	f003 031f 	and.w	r3, r3, #31
 80030cc:	2201      	movs	r2, #1
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	e015      	b.n	8003100 <LL_ADC_REG_SetSequencerChAdd+0x50>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	60fb      	str	r3, [r7, #12]
  return result;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 80030ea:	2320      	movs	r3, #32
 80030ec:	e003      	b.n	80030f6 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	fab3 f383 	clz	r3, r3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	2201      	movs	r2, #1
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003104:	431a      	orrs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800310a:	bf00      	nop
 800310c:	371c      	adds	r7, #28
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	0e9b      	lsrs	r3, r3, #26
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	2101      	movs	r1, #1
 800312e:	fa01 f303 	lsl.w	r3, r1, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	401a      	ands	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0303 	and.w	r3, r3, #3
}
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003188:	b480      	push	{r7}
 800318a:	b08b      	sub	sp, #44	@ 0x2c
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4a2d      	ldr	r2, [pc, #180]	@ (800324c <LL_ADC_SetChannelSamplingTime+0xc4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d042      	beq.n	8003222 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d104      	bne.n	80031b0 <LL_ADC_SetChannelSamplingTime+0x28>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	0e9b      	lsrs	r3, r3, #26
 80031aa:	f003 021f 	and.w	r2, r3, #31
 80031ae:	e011      	b.n	80031d4 <LL_ADC_SetChannelSamplingTime+0x4c>
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	617b      	str	r3, [r7, #20]
  return result;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 80031c6:	2320      	movs	r3, #32
 80031c8:	e003      	b.n	80031d2 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	fab3 f383 	clz	r3, r3
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	0e5b      	lsrs	r3, r3, #25
 80031d8:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80031dc:	460b      	mov	r3, r1
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	1ad2      	subs	r2, r2, r3
 80031e6:	4613      	mov	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4413      	add	r3, r2
 80031ec:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3314      	adds	r3, #20
 80031f2:	461a      	mov	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	0e5b      	lsrs	r3, r3, #25
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	4413      	add	r3, r2
 8003200:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	2107      	movs	r1, #7
 8003208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320a:	fa01 f303 	lsl.w	r3, r1, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	401a      	ands	r2, r3
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003216:	fa01 f303 	lsl.w	r3, r1, r3
 800321a:	431a      	orrs	r2, r3
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8003220:	e00e      	b.n	8003240 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	021b      	lsls	r3, r3, #8
 800322a:	43db      	mvns	r3, r3
 800322c:	401a      	ands	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	0219      	lsls	r1, r3, #8
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	400b      	ands	r3, r1
 8003236:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800323a:	431a      	orrs	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	615a      	str	r2, [r3, #20]
}
 8003240:	bf00      	nop
 8003242:	372c      	adds	r7, #44	@ 0x2c
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	46021000 	.word	0x46021000

08003250 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003268:	43db      	mvns	r3, r3
 800326a:	401a      	ands	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f003 0318 	and.w	r3, r3, #24
 8003272:	4908      	ldr	r1, [pc, #32]	@ (8003294 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003274:	40d9      	lsrs	r1, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	400b      	ands	r3, r1
 800327a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800327e:	431a      	orrs	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003286:	bf00      	nop
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	000fffff 	.word	0x000fffff

08003298 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 031f 	and.w	r3, r3, #31
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80032e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6093      	str	r3, [r2, #8]
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003308:	d101      	bne.n	800330e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800332c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003330:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	609a      	str	r2, [r3, #8]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003354:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003358:	d101      	bne.n	800335e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800337c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003380:	f043 0201 	orr.w	r2, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	609a      	str	r2, [r3, #8]
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <LL_ADC_IsEnabled+0x18>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <LL_ADC_IsEnabled+0x1a>
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033ce:	f043 0204 	orr.w	r2, r3, #4
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	609a      	str	r2, [r3, #8]
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d101      	bne.n	80033fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b08      	cmp	r3, #8
 800341a:	d101      	bne.n	8003420 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800341c:	2301      	movs	r3, #1
 800341e:	e000      	b.n	8003422 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
	...

08003430 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b08b      	sub	sp, #44	@ 0x2c
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 800343e:	2300      	movs	r3, #0
 8003440:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e2ce      	b.n	80039ee <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a95      	ldr	r2, [pc, #596]	@ (80036b4 <HAL_ADC_Init+0x284>)
 800345e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003464:	2b00      	cmp	r3, #0
 8003466:	d109      	bne.n	800347c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7fe f9df 	bl	800182c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff ff37 	bl	80032f4 <LL_ADC_IsDeepPowerDownEnabled>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d004      	beq.n	8003496 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff1d 	bl	80032d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff ff52 	bl	8003344 <LL_ADC_IsInternalRegulatorEnabled>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d115      	bne.n	80034d2 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff ff36 	bl	800331c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034b0:	4b81      	ldr	r3, [pc, #516]	@ (80036b8 <HAL_ADC_Init+0x288>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	099b      	lsrs	r3, r3, #6
 80034b6:	4a81      	ldr	r2, [pc, #516]	@ (80036bc <HAL_ADC_Init+0x28c>)
 80034b8:	fba2 2303 	umull	r2, r3, r2, r3
 80034bc:	099b      	lsrs	r3, r3, #6
 80034be:	3301      	adds	r3, #1
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80034c4:	e002      	b.n	80034cc <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f9      	bne.n	80034c6 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff ff34 	bl	8003344 <LL_ADC_IsInternalRegulatorEnabled>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10e      	bne.n	8003500 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034e6:	f043 0210 	orr.w	r2, r3, #16
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034f2:	f043 0201 	orr.w	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff6c 	bl	80033e2 <LL_ADC_REG_IsConversionOngoing>
 800350a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	2b00      	cmp	r3, #0
 8003516:	f040 825f 	bne.w	80039d8 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	2b00      	cmp	r3, #0
 800351e:	f040 825b 	bne.w	80039d8 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003526:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800352a:	f043 0202 	orr.w	r2, r3, #2
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff ff2c 	bl	8003394 <LL_ADC_IsEnabled>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d14f      	bne.n	80035e2 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a5b      	ldr	r2, [pc, #364]	@ (80036b4 <HAL_ADC_Init+0x284>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d037      	beq.n	80035bc <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a5b      	ldr	r2, [pc, #364]	@ (80036c0 <HAL_ADC_Init+0x290>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d004      	beq.n	8003560 <HAL_ADC_Init+0x130>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a5a      	ldr	r2, [pc, #360]	@ (80036c4 <HAL_ADC_Init+0x294>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d10e      	bne.n	800357e <HAL_ADC_Init+0x14e>
 8003560:	4857      	ldr	r0, [pc, #348]	@ (80036c0 <HAL_ADC_Init+0x290>)
 8003562:	f7ff ff17 	bl	8003394 <LL_ADC_IsEnabled>
 8003566:	4604      	mov	r4, r0
 8003568:	4856      	ldr	r0, [pc, #344]	@ (80036c4 <HAL_ADC_Init+0x294>)
 800356a:	f7ff ff13 	bl	8003394 <LL_ADC_IsEnabled>
 800356e:	4603      	mov	r3, r0
 8003570:	4323      	orrs	r3, r4
 8003572:	2b00      	cmp	r3, #0
 8003574:	bf0c      	ite	eq
 8003576:	2301      	moveq	r3, #1
 8003578:	2300      	movne	r3, #0
 800357a:	b2db      	uxtb	r3, r3
 800357c:	e008      	b.n	8003590 <HAL_ADC_Init+0x160>
 800357e:	484d      	ldr	r0, [pc, #308]	@ (80036b4 <HAL_ADC_Init+0x284>)
 8003580:	f7ff ff08 	bl	8003394 <LL_ADC_IsEnabled>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	bf0c      	ite	eq
 800358a:	2301      	moveq	r3, #1
 800358c:	2300      	movne	r3, #0
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d026      	beq.n	80035e2 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a49      	ldr	r2, [pc, #292]	@ (80036c0 <HAL_ADC_Init+0x290>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d004      	beq.n	80035a8 <HAL_ADC_Init+0x178>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a48      	ldr	r2, [pc, #288]	@ (80036c4 <HAL_ADC_Init+0x294>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d101      	bne.n	80035ac <HAL_ADC_Init+0x17c>
 80035a8:	4a47      	ldr	r2, [pc, #284]	@ (80036c8 <HAL_ADC_Init+0x298>)
 80035aa:	e000      	b.n	80035ae <HAL_ADC_Init+0x17e>
 80035ac:	4a47      	ldr	r2, [pc, #284]	@ (80036cc <HAL_ADC_Init+0x29c>)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	4619      	mov	r1, r3
 80035b4:	4610      	mov	r0, r2
 80035b6:	f7ff fbe9 	bl	8002d8c <LL_ADC_SetCommonClock>
 80035ba:	e012      	b.n	80035e2 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	4619      	mov	r1, r3
 80035c6:	4610      	mov	r0, r2
 80035c8:	f7ff fc14 	bl	8002df4 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80035cc:	4b3f      	ldr	r3, [pc, #252]	@ (80036cc <HAL_ADC_Init+0x29c>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80035dc:	493b      	ldr	r1, [pc, #236]	@ (80036cc <HAL_ADC_Init+0x29c>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a33      	ldr	r2, [pc, #204]	@ (80036b4 <HAL_ADC_Init+0x284>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d010      	beq.n	800360e <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035f2:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80035f8:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80035fe:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003606:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003608:	4313      	orrs	r3, r2
 800360a:	623b      	str	r3, [r7, #32]
 800360c:	e035      	b.n	800367a <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	7f1b      	ldrb	r3, [r3, #28]
 8003612:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800361a:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800361c:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003622:	2a00      	cmp	r2, #0
 8003624:	d002      	beq.n	800362c <HAL_ADC_Init+0x1fc>
 8003626:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800362a:	e000      	b.n	800362e <HAL_ADC_Init+0x1fe>
 800362c:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800362e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003634:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	da04      	bge.n	8003648 <HAL_ADC_Init+0x218>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003646:	e001      	b.n	800364c <HAL_ADC_Init+0x21c>
 8003648:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 800364c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	491b      	ldr	r1, [pc, #108]	@ (80036c0 <HAL_ADC_Init+0x290>)
 8003654:	428b      	cmp	r3, r1
 8003656:	d004      	beq.n	8003662 <HAL_ADC_Init+0x232>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4919      	ldr	r1, [pc, #100]	@ (80036c4 <HAL_ADC_Init+0x294>)
 800365e:	428b      	cmp	r3, r1
 8003660:	d103      	bne.n	800366a <HAL_ADC_Init+0x23a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003668:	e003      	b.n	8003672 <HAL_ADC_Init+0x242>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003670:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003672:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003674:	6a3a      	ldr	r2, [r7, #32]
 8003676:	4313      	orrs	r3, r2
 8003678:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003680:	2b01      	cmp	r3, #1
 8003682:	d131      	bne.n	80036e8 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a0a      	ldr	r2, [pc, #40]	@ (80036b4 <HAL_ADC_Init+0x284>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d007      	beq.n	800369e <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003692:	3b01      	subs	r3, #1
 8003694:	045b      	lsls	r3, r3, #17
 8003696:	6a3a      	ldr	r2, [r7, #32]
 8003698:	4313      	orrs	r3, r2
 800369a:	623b      	str	r3, [r7, #32]
 800369c:	e024      	b.n	80036e8 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d113      	bne.n	80036d0 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ae:	623b      	str	r3, [r7, #32]
 80036b0:	e01a      	b.n	80036e8 <HAL_ADC_Init+0x2b8>
 80036b2:	bf00      	nop
 80036b4:	46021000 	.word	0x46021000
 80036b8:	2000001c 	.word	0x2000001c
 80036bc:	053e2d63 	.word	0x053e2d63
 80036c0:	42028000 	.word	0x42028000
 80036c4:	42028100 	.word	0x42028100
 80036c8:	42028300 	.word	0x42028300
 80036cc:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036d4:	f043 0220 	orr.w	r2, r3, #32
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036e0:	f043 0201 	orr.w	r2, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a75      	ldr	r2, [pc, #468]	@ (80038c4 <HAL_ADC_Init+0x494>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d018      	beq.n	8003724 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036fe:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003706:	4313      	orrs	r3, r2
 8003708:	6a3a      	ldr	r2, [r7, #32]
 800370a:	4313      	orrs	r3, r2
 800370c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	4b6c      	ldr	r3, [pc, #432]	@ (80038c8 <HAL_ADC_Init+0x498>)
 8003716:	4013      	ands	r3, r2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	6a39      	ldr	r1, [r7, #32]
 800371e:	430b      	orrs	r3, r1
 8003720:	60d3      	str	r3, [r2, #12]
 8003722:	e031      	b.n	8003788 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003728:	2b00      	cmp	r3, #0
 800372a:	d009      	beq.n	8003740 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003730:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003738:	4313      	orrs	r3, r2
 800373a:	6a3a      	ldr	r2, [r7, #32]
 800373c:	4313      	orrs	r3, r2
 800373e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	4b61      	ldr	r3, [pc, #388]	@ (80038cc <HAL_ADC_Init+0x49c>)
 8003748:	4013      	ands	r3, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	6a39      	ldr	r1, [r7, #32]
 8003750:	430b      	orrs	r3, r1
 8003752:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d008      	beq.n	800376e <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1a      	ldr	r2, [r3, #32]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a4d      	ldr	r2, [pc, #308]	@ (80038c4 <HAL_ADC_Init+0x494>)
 800378e:	4293      	cmp	r3, r2
 8003790:	f000 80a4 	beq.w	80038dc <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fe22 	bl	80033e2 <LL_ADC_REG_IsConversionOngoing>
 800379e:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fe2f 	bl	8003408 <LL_ADC_INJ_IsConversionOngoing>
 80037aa:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d166      	bne.n	8003880 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d163      	bne.n	8003880 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	7f1b      	ldrb	r3, [r3, #28]
 80037bc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4943      	ldr	r1, [pc, #268]	@ (80038d0 <HAL_ADC_Init+0x4a0>)
 80037c4:	428b      	cmp	r3, r1
 80037c6:	d004      	beq.n	80037d2 <HAL_ADC_Init+0x3a2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4941      	ldr	r1, [pc, #260]	@ (80038d4 <HAL_ADC_Init+0x4a4>)
 80037ce:	428b      	cmp	r3, r1
 80037d0:	d102      	bne.n	80037d8 <HAL_ADC_Init+0x3a8>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d6:	e002      	b.n	80037de <HAL_ADC_Init+0x3ae>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037dc:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037de:	4313      	orrs	r3, r2
 80037e0:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037ec:	f023 0303 	bic.w	r3, r3, #3
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	6a39      	ldr	r1, [r7, #32]
 80037f6:	430b      	orrs	r3, r1
 80037f8:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	4619      	mov	r1, r3
 800380c:	4610      	mov	r0, r2
 800380e:	f7ff fb99 	bl	8002f44 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003818:	2b01      	cmp	r3, #1
 800381a:	d11e      	bne.n	800385a <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003820:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	4b2b      	ldr	r3, [pc, #172]	@ (80038d8 <HAL_ADC_Init+0x4a8>)
 800382a:	4013      	ands	r3, r2
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003830:	0411      	lsls	r1, r2, #16
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003836:	4311      	orrs	r1, r2
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800383c:	4311      	orrs	r1, r2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003842:	4311      	orrs	r1, r2
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003848:	0892      	lsrs	r2, r2, #2
 800384a:	430a      	orrs	r2, r1
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	611a      	str	r2, [r3, #16]
 8003858:	e007      	b.n	800386a <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0201 	bic.w	r2, r2, #1
 8003868:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d10c      	bne.n	80038a2 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388e:	f023 010f 	bic.w	r1, r3, #15
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003896:	1e5a      	subs	r2, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	631a      	str	r2, [r3, #48]	@ 0x30
 80038a0:	e007      	b.n	80038b2 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 020f 	bic.w	r2, r2, #15
 80038b0:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038b6:	f023 0303 	bic.w	r3, r3, #3
 80038ba:	f043 0201 	orr.w	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80038c2:	e092      	b.n	80039ea <HAL_ADC_Init+0x5ba>
 80038c4:	46021000 	.word	0x46021000
 80038c8:	fff0c013 	.word	0xfff0c013
 80038cc:	ffde800d 	.word	0xffde800d
 80038d0:	42028000 	.word	0x42028000
 80038d4:	42028100 	.word	0x42028100
 80038d8:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d111      	bne.n	800390a <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80038ee:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80038f4:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80038fa:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80038fc:	69fa      	ldr	r2, [r7, #28]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691a      	ldr	r2, [r3, #16]
 8003910:	4b39      	ldr	r3, [pc, #228]	@ (80039f8 <HAL_ADC_Init+0x5c8>)
 8003912:	4013      	ands	r3, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	69f9      	ldr	r1, [r7, #28]
 800391a:	430b      	orrs	r3, r1
 800391c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003926:	461a      	mov	r2, r3
 8003928:	2100      	movs	r1, #0
 800392a:	f7ff fb2e 	bl	8002f8a <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003936:	461a      	mov	r2, r3
 8003938:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 800393c:	f7ff fb25 	bl	8002f8a <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d108      	bne.n	800395a <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f062 020f 	orn	r2, r2, #15
 8003956:	629a      	str	r2, [r3, #40]	@ 0x28
 8003958:	e018      	b.n	800398c <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003962:	d113      	bne.n	800398c <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396e:	3b01      	subs	r3, #1
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	f003 031c 	and.w	r3, r3, #28
 8003976:	f06f 020f 	mvn.w	r2, #15
 800397a:	fa02 f103 	lsl.w	r1, r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	4b1a      	ldr	r3, [pc, #104]	@ (80039fc <HAL_ADC_Init+0x5cc>)
 8003994:	4013      	ands	r3, r2
 8003996:	6a3a      	ldr	r2, [r7, #32]
 8003998:	429a      	cmp	r2, r3
 800399a:	d10b      	bne.n	80039b4 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039a6:	f023 0303 	bic.w	r3, r3, #3
 80039aa:	f043 0201 	orr.w	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80039b2:	e01a      	b.n	80039ea <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039b8:	f023 0312 	bic.w	r3, r3, #18
 80039bc:	f043 0210 	orr.w	r2, r3, #16
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039c8:	f043 0201 	orr.w	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80039d6:	e008      	b.n	80039ea <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039dc:	f043 0210 	orr.w	r2, r3, #16
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 80039ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	372c      	adds	r7, #44	@ 0x2c
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd90      	pop	{r4, r7, pc}
 80039f6:	bf00      	nop
 80039f8:	f7fffc02 	.word	0xf7fffc02
 80039fc:	833ffff3 	.word	0x833ffff3

08003a00 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b0a2      	sub	sp, #136	@ 0x88
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a98      	ldr	r2, [pc, #608]	@ (8003c74 <HAL_ADC_Start_DMA+0x274>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d004      	beq.n	8003a20 <HAL_ADC_Start_DMA+0x20>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a97      	ldr	r2, [pc, #604]	@ (8003c78 <HAL_ADC_Start_DMA+0x278>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d101      	bne.n	8003a24 <HAL_ADC_Start_DMA+0x24>
 8003a20:	4b96      	ldr	r3, [pc, #600]	@ (8003c7c <HAL_ADC_Start_DMA+0x27c>)
 8003a22:	e000      	b.n	8003a26 <HAL_ADC_Start_DMA+0x26>
 8003a24:	4b96      	ldr	r3, [pc, #600]	@ (8003c80 <HAL_ADC_Start_DMA+0x280>)
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fc36 	bl	8003298 <LL_ADC_GetMultimode>
 8003a2c:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fcd5 	bl	80033e2 <LL_ADC_REG_IsConversionOngoing>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f040 8111 	bne.w	8003c62 <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <HAL_ADC_Start_DMA+0x4e>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e10e      	b.n	8003c6c <HAL_ADC_Start_DMA+0x26c>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d006      	beq.n	8003a6a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a5e:	2b05      	cmp	r3, #5
 8003a60:	d003      	beq.n	8003a6a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a64:	2b09      	cmp	r3, #9
 8003a66:	f040 80f4 	bne.w	8003c52 <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f001 fa2c 	bl	8004ec8 <ADC_Enable>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003a76:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f040 80e4 	bne.w	8003c48 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a84:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a88:	f023 0301 	bic.w	r3, r3, #1
 8003a8c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a7a      	ldr	r2, [pc, #488]	@ (8003c84 <HAL_ADC_Start_DMA+0x284>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d026      	beq.n	8003aec <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a75      	ldr	r2, [pc, #468]	@ (8003c78 <HAL_ADC_Start_DMA+0x278>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d002      	beq.n	8003aae <HAL_ADC_Start_DMA+0xae>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	e000      	b.n	8003ab0 <HAL_ADC_Start_DMA+0xb0>
 8003aae:	4b71      	ldr	r3, [pc, #452]	@ (8003c74 <HAL_ADC_Start_DMA+0x274>)
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d002      	beq.n	8003abe <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ab8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d105      	bne.n	8003aca <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ac2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ace:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d006      	beq.n	8003ae4 <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ada:	f023 0206 	bic.w	r2, r3, #6
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003ae2:	e006      	b.n	8003af2 <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003aea:	e002      	b.n	8003af2 <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af6:	4a64      	ldr	r2, [pc, #400]	@ (8003c88 <HAL_ADC_Start_DMA+0x288>)
 8003af8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afe:	4a63      	ldr	r2, [pc, #396]	@ (8003c8c <HAL_ADC_Start_DMA+0x28c>)
 8003b00:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b06:	4a62      	ldr	r2, [pc, #392]	@ (8003c90 <HAL_ADC_Start_DMA+0x290>)
 8003b08:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	221c      	movs	r2, #28
 8003b10:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0210 	orr.w	r2, r2, #16
 8003b28:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a55      	ldr	r2, [pc, #340]	@ (8003c84 <HAL_ADC_Start_DMA+0x284>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d107      	bne.n	8003b44 <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d04f      	beq.n	8003bf2 <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d046      	beq.n	8003bea <HAL_ADC_Start_DMA+0x1ea>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d040      	beq.n	8003bea <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	f107 0310 	add.w	r3, r7, #16
 8003b74:	4611      	mov	r1, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f002 fdfc 	bl	8006774 <HAL_DMAEx_List_GetNodeConfig>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e072      	b.n	8003c6c <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d104      	bne.n	8003b96 <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b94:	e00a      	b.n	8003bac <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d104      	bne.n	8003ba6 <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ba4:	e002      	b.n	8003bac <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003bb8:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f002 fd1f 	bl	8006620 <HAL_DMAEx_List_Start_IT>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003be8:	e028      	b.n	8003c3c <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003bf0:	e024      	b.n	8003c3c <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d104      	bne.n	8003c06 <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c04:	e00c      	b.n	8003c20 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d104      	bne.n	8003c1a <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c18:	e002      	b.n	8003c20 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3340      	adds	r3, #64	@ 0x40
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c32:	f001 fd63 	bl	80056fc <HAL_DMA_Start_IT>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fbba 	bl	80033ba <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003c46:	e00f      	b.n	8003c68 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 8003c50:	e00a      	b.n	8003c68 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8003c60:	e002      	b.n	8003c68 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c62:	2302      	movs	r3, #2
 8003c64:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 8003c68:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3788      	adds	r7, #136	@ 0x88
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	42028000 	.word	0x42028000
 8003c78:	42028100 	.word	0x42028100
 8003c7c:	42028300 	.word	0x42028300
 8003c80:	46021300 	.word	0x46021300
 8003c84:	46021000 	.word	0x46021000
 8003c88:	08004ffd 	.word	0x08004ffd
 8003c8c:	080050db 	.word	0x080050db
 8003c90:	080050f7 	.word	0x080050f7

08003c94 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08a      	sub	sp, #40	@ 0x28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a77      	ldr	r2, [pc, #476]	@ (8003e94 <HAL_ADC_IRQHandler+0x200>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d004      	beq.n	8003cc4 <HAL_ADC_IRQHandler+0x30>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a76      	ldr	r2, [pc, #472]	@ (8003e98 <HAL_ADC_IRQHandler+0x204>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d101      	bne.n	8003cc8 <HAL_ADC_IRQHandler+0x34>
 8003cc4:	4b75      	ldr	r3, [pc, #468]	@ (8003e9c <HAL_ADC_IRQHandler+0x208>)
 8003cc6:	e000      	b.n	8003cca <HAL_ADC_IRQHandler+0x36>
 8003cc8:	4b75      	ldr	r3, [pc, #468]	@ (8003ea0 <HAL_ADC_IRQHandler+0x20c>)
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff fae4 	bl	8003298 <LL_ADC_GetMultimode>
 8003cd0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d017      	beq.n	8003d0c <HAL_ADC_IRQHandler+0x78>
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d012      	beq.n	8003d0c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d105      	bne.n	8003cfe <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cf6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f001 fa31 	bl	8005166 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d004      	beq.n	8003d20 <HAL_ADC_IRQHandler+0x8c>
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10b      	bne.n	8003d38 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 80d1 	beq.w	8003ece <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80cb 	beq.w	8003ece <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d105      	bne.n	8003d50 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d48:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a53      	ldr	r2, [pc, #332]	@ (8003ea4 <HAL_ADC_IRQHandler+0x210>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d06c      	beq.n	8003e34 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff f932 	bl	8002fc8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 80aa 	beq.w	8003ec0 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a49      	ldr	r2, [pc, #292]	@ (8003e98 <HAL_ADC_IRQHandler+0x204>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d002      	beq.n	8003d7c <HAL_ADC_IRQHandler+0xe8>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	e000      	b.n	8003d7e <HAL_ADC_IRQHandler+0xea>
 8003d7c:	4b45      	ldr	r3, [pc, #276]	@ (8003e94 <HAL_ADC_IRQHandler+0x200>)
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d008      	beq.n	8003d98 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2b05      	cmp	r3, #5
 8003d90:	d002      	beq.n	8003d98 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b09      	cmp	r3, #9
 8003d96:	d104      	bne.n	8003da2 <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	623b      	str	r3, [r7, #32]
 8003da0:	e00c      	b.n	8003dbc <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a3c      	ldr	r2, [pc, #240]	@ (8003e98 <HAL_ADC_IRQHandler+0x204>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d002      	beq.n	8003db2 <HAL_ADC_IRQHandler+0x11e>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	e000      	b.n	8003db4 <HAL_ADC_IRQHandler+0x120>
 8003db2:	4b38      	ldr	r3, [pc, #224]	@ (8003e94 <HAL_ADC_IRQHandler+0x200>)
 8003db4:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d17c      	bne.n	8003ec0 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d175      	bne.n	8003ec0 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff fb02 	bl	80033e2 <LL_ADC_REG_IsConversionOngoing>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d11a      	bne.n	8003e1a <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 020c 	bic.w	r2, r2, #12
 8003df2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003df8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d159      	bne.n	8003ec0 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e10:	f043 0201 	orr.w	r2, r3, #1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	679a      	str	r2, [r3, #120]	@ 0x78
 8003e18:	e052      	b.n	8003ec0 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e1e:	f043 0210 	orr.w	r2, r3, #16
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e2a:	f043 0201 	orr.w	r2, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003e32:	e045      	b.n	8003ec0 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff f8c5 	bl	8002fc8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d03d      	beq.n	8003ec0 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d138      	bne.n	8003ec0 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d131      	bne.n	8003ec0 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff fabe 	bl	80033e2 <LL_ADC_REG_IsConversionOngoing>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d11d      	bne.n	8003ea8 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 020c 	bic.w	r2, r2, #12
 8003e7a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	f043 0201 	orr.w	r2, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	679a      	str	r2, [r3, #120]	@ 0x78
 8003e90:	e016      	b.n	8003ec0 <HAL_ADC_IRQHandler+0x22c>
 8003e92:	bf00      	nop
 8003e94:	42028000 	.word	0x42028000
 8003e98:	42028100 	.word	0x42028100
 8003e9c:	42028300 	.word	0x42028300
 8003ea0:	46021300 	.word	0x46021300
 8003ea4:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003eac:	f043 0220 	orr.w	r2, r3, #32
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003eb8:	f043 0201 	orr.w	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f99d 	bl	8004200 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	220c      	movs	r2, #12
 8003ecc:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a8c      	ldr	r2, [pc, #560]	@ (8004104 <HAL_ADC_IRQHandler+0x470>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	f000 8095 	beq.w	8004004 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	f003 0320 	and.w	r3, r3, #32
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d004      	beq.n	8003eee <HAL_ADC_IRQHandler+0x25a>
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10a      	bne.n	8003f04 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 8085 	beq.w	8004004 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d07f      	beq.n	8004004 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d105      	bne.n	8003f1c <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f14:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff f91e 	bl	8003162 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003f26:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff f84b 	bl	8002fc8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f32:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a73      	ldr	r2, [pc, #460]	@ (8004108 <HAL_ADC_IRQHandler+0x474>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d002      	beq.n	8003f44 <HAL_ADC_IRQHandler+0x2b0>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	e000      	b.n	8003f46 <HAL_ADC_IRQHandler+0x2b2>
 8003f44:	4b71      	ldr	r3, [pc, #452]	@ (800410c <HAL_ADC_IRQHandler+0x478>)
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6812      	ldr	r2, [r2, #0]
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d008      	beq.n	8003f60 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b06      	cmp	r3, #6
 8003f58:	d002      	beq.n	8003f60 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2b07      	cmp	r3, #7
 8003f5e:	d104      	bne.n	8003f6a <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	623b      	str	r3, [r7, #32]
 8003f68:	e00c      	b.n	8003f84 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a66      	ldr	r2, [pc, #408]	@ (8004108 <HAL_ADC_IRQHandler+0x474>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d002      	beq.n	8003f7a <HAL_ADC_IRQHandler+0x2e6>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	e000      	b.n	8003f7c <HAL_ADC_IRQHandler+0x2e8>
 8003f7a:	4b64      	ldr	r3, [pc, #400]	@ (800410c <HAL_ADC_IRQHandler+0x478>)
 8003f7c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d035      	beq.n	8003ff6 <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d007      	beq.n	8003fa4 <HAL_ADC_IRQHandler+0x310>
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d02d      	beq.n	8003ff6 <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d128      	bne.n	8003ff6 <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fae:	2b40      	cmp	r3, #64	@ 0x40
 8003fb0:	d121      	bne.n	8003ff6 <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff fa26 	bl	8003408 <LL_ADC_INJ_IsConversionOngoing>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d119      	bne.n	8003ff6 <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fd0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fd6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d105      	bne.n	8003ff6 <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fee:	f043 0201 	orr.w	r2, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f001 f897 	bl	800512a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2260      	movs	r2, #96	@ 0x60
 8004002:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400a:	2b00      	cmp	r3, #0
 800400c:	d011      	beq.n	8004032 <HAL_ADC_IRQHandler+0x39e>
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00c      	beq.n	8004032 <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800401c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f8ff 	bl	8004228 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2280      	movs	r2, #128	@ 0x80
 8004030:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d012      	beq.n	8004062 <HAL_ADC_IRQHandler+0x3ce>
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00d      	beq.n	8004062 <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800404a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f001 f873 	bl	800513e <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004060:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004068:	2b00      	cmp	r3, #0
 800406a:	d012      	beq.n	8004092 <HAL_ADC_IRQHandler+0x3fe>
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00d      	beq.n	8004092 <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800407a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f001 f865 	bl	8005152 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004090:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f003 0310 	and.w	r3, r3, #16
 8004098:	2b00      	cmp	r3, #0
 800409a:	d05d      	beq.n	8004158 <HAL_ADC_IRQHandler+0x4c4>
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d058      	beq.n	8004158 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d102      	bne.n	80040b4 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 80040ae:	2301      	movs	r3, #1
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040b2:	e03b      	b.n	800412c <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a12      	ldr	r2, [pc, #72]	@ (8004104 <HAL_ADC_IRQHandler+0x470>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d02c      	beq.n	8004118 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d015      	beq.n	80040f0 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a10      	ldr	r2, [pc, #64]	@ (800410c <HAL_ADC_IRQHandler+0x478>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <HAL_ADC_IRQHandler+0x444>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004108 <HAL_ADC_IRQHandler+0x474>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d101      	bne.n	80040dc <HAL_ADC_IRQHandler+0x448>
 80040d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004110 <HAL_ADC_IRQHandler+0x47c>)
 80040da:	e000      	b.n	80040de <HAL_ADC_IRQHandler+0x44a>
 80040dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004114 <HAL_ADC_IRQHandler+0x480>)
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff f8e8 	bl	80032b4 <LL_ADC_GetMultiDMATransfer>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d020      	beq.n	800412c <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 80040ea:	2301      	movs	r3, #1
 80040ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ee:	e01d      	b.n	800412c <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d016      	beq.n	800412c <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 80040fe:	2301      	movs	r3, #1
 8004100:	627b      	str	r3, [r7, #36]	@ 0x24
 8004102:	e013      	b.n	800412c <HAL_ADC_IRQHandler+0x498>
 8004104:	46021000 	.word	0x46021000
 8004108:	42028100 	.word	0x42028100
 800410c:	42028000 	.word	0x42028000
 8004110:	42028300 	.word	0x42028300
 8004114:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff f812 	bl	8003146 <LL_ADC_REG_GetDMATransfer>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8004128:	2301      	movs	r3, #1
 800412a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800412c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412e:	2b01      	cmp	r3, #1
 8004130:	d10e      	bne.n	8004150 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004136:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004142:	f043 0202 	orr.w	r2, r3, #2
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f876 	bl	800423c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2210      	movs	r2, #16
 8004156:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d01b      	beq.n	800419a <HAL_ADC_IRQHandler+0x506>
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d016      	beq.n	800419a <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b00      	cmp	r3, #0
 8004176:	d105      	bne.n	8004184 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800417c:	f043 0201 	orr.w	r2, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f877 	bl	8004278 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0201 	bic.w	r2, r2, #1
 8004198:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a17      	ldr	r2, [pc, #92]	@ (80041fc <HAL_ADC_IRQHandler+0x568>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d126      	bne.n	80041f2 <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00c      	beq.n	80041c8 <HAL_ADC_IRQHandler+0x534>
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d007      	beq.n	80041c8 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f849 	bl	8004250 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041c6:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00f      	beq.n	80041f2 <HAL_ADC_IRQHandler+0x55e>
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f841 	bl	8004264 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041f0:	605a      	str	r2, [r3, #4]
    }
  }
}
 80041f2:	bf00      	nop
 80041f4:	3728      	adds	r7, #40	@ 0x28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	46021000 	.word	0x46021000

08004200 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800428c:	b590      	push	{r4, r7, lr}
 800428e:	b0b7      	sub	sp, #220	@ 0xdc
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800429c:	2300      	movs	r3, #0
 800429e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4aa8      	ldr	r2, [pc, #672]	@ (8004548 <HAL_ADC_ConfigChannel+0x2bc>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d103      	bne.n	80042b2 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d102      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x36>
 80042bc:	2302      	movs	r3, #2
 80042be:	f000 bdfe 	b.w	8004ebe <HAL_ADC_ConfigChannel+0xc32>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff f887 	bl	80033e2 <LL_ADC_REG_IsConversionOngoing>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f040 85c1 	bne.w	8004e5e <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a99      	ldr	r2, [pc, #612]	@ (8004548 <HAL_ADC_ConfigChannel+0x2bc>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	f000 8409 	beq.w	8004afa <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d108      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x7a>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	0e9b      	lsrs	r3, r3, #26
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	2201      	movs	r2, #1
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	e01d      	b.n	8004342 <HAL_ADC_ConfigChannel+0xb6>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004312:	fa93 f3a3 	rbit	r3, r3
 8004316:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800431a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800431e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004322:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 800432a:	2320      	movs	r3, #32
 800432c:	e004      	b.n	8004338 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 800432e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004332:	fab3 f383 	clz	r3, r3
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f003 031f 	and.w	r3, r3, #31
 800433c:	2201      	movs	r2, #1
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6812      	ldr	r2, [r2, #0]
 8004346:	69d1      	ldr	r1, [r2, #28]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	430b      	orrs	r3, r1
 800434e:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	f7fe fe47 	bl	8002ff0 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff f83b 	bl	80033e2 <LL_ADC_REG_IsConversionOngoing>
 800436c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff f847 	bl	8003408 <LL_ADC_INJ_IsConversionOngoing>
 800437a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800437e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004382:	2b00      	cmp	r3, #0
 8004384:	f040 81df 	bne.w	8004746 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004388:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800438c:	2b00      	cmp	r3, #0
 800438e:	f040 81da 	bne.w	8004746 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6819      	ldr	r1, [r3, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	461a      	mov	r2, r3
 80043a0:	f7fe fef2 	bl	8003188 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	695a      	ldr	r2, [r3, #20]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	089b      	lsrs	r3, r3, #2
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d046      	beq.n	8004454 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6919      	ldr	r1, [r3, #16]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80043d6:	f7fe fd2d 	bl	8002e34 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6919      	ldr	r1, [r3, #16]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	461a      	mov	r2, r3
 80043e8:	f7fe fd5b 	bl	8002ea2 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	7e9b      	ldrb	r3, [r3, #26]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d11e      	bne.n	8004432 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6818      	ldr	r0, [r3, #0]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004400:	2b00      	cmp	r3, #0
 8004402:	d102      	bne.n	800440a <HAL_ADC_ConfigChannel+0x17e>
 8004404:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004408:	e000      	b.n	800440c <HAL_ADC_ConfigChannel+0x180>
 800440a:	2300      	movs	r3, #0
 800440c:	461a      	mov	r2, r3
 800440e:	f7fe fd7e 	bl	8002f0e <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800441e:	2b01      	cmp	r3, #1
 8004420:	d102      	bne.n	8004428 <HAL_ADC_ConfigChannel+0x19c>
 8004422:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004426:	e000      	b.n	800442a <HAL_ADC_ConfigChannel+0x19e>
 8004428:	2300      	movs	r3, #0
 800442a:	461a      	mov	r2, r3
 800442c:	f7fe fd54 	bl	8002ed8 <LL_ADC_SetOffsetSignedSaturation>
 8004430:	e189      	b.n	8004746 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	2200      	movs	r2, #0
 800443c:	4619      	mov	r1, r3
 800443e:	f7fe fd66 	bl	8002f0e <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6818      	ldr	r0, [r3, #0]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2200      	movs	r2, #0
 800444c:	4619      	mov	r1, r3
 800444e:	f7fe fd43 	bl	8002ed8 <LL_ADC_SetOffsetSignedSaturation>
 8004452:	e178      	b.n	8004746 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2100      	movs	r1, #0
 800445a:	4618      	mov	r0, r3
 800445c:	f7fe fd0b 	bl	8002e76 <LL_ADC_GetOffsetChannel>
 8004460:	4603      	mov	r3, r0
 8004462:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x1f4>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2100      	movs	r1, #0
 8004470:	4618      	mov	r0, r3
 8004472:	f7fe fd00 	bl	8002e76 <LL_ADC_GetOffsetChannel>
 8004476:	4603      	mov	r3, r0
 8004478:	0e9b      	lsrs	r3, r3, #26
 800447a:	f003 021f 	and.w	r2, r3, #31
 800447e:	e01e      	b.n	80044be <HAL_ADC_ConfigChannel+0x232>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2100      	movs	r1, #0
 8004486:	4618      	mov	r0, r3
 8004488:	f7fe fcf5 	bl	8002e76 <LL_ADC_GetOffsetChannel>
 800448c:	4603      	mov	r3, r0
 800448e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004496:	fa93 f3a3 	rbit	r3, r3
 800449a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800449e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80044a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80044a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 80044ae:	2320      	movs	r3, #32
 80044b0:	e004      	b.n	80044bc <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 80044b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80044b6:	fab3 f383 	clz	r3, r3
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d105      	bne.n	80044d6 <HAL_ADC_ConfigChannel+0x24a>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	0e9b      	lsrs	r3, r3, #26
 80044d0:	f003 031f 	and.w	r3, r3, #31
 80044d4:	e018      	b.n	8004508 <HAL_ADC_ConfigChannel+0x27c>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044e2:	fa93 f3a3 	rbit	r3, r3
 80044e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80044ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80044f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 80044fa:	2320      	movs	r3, #32
 80044fc:	e004      	b.n	8004508 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 80044fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004502:	fab3 f383 	clz	r3, r3
 8004506:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004508:	429a      	cmp	r2, r3
 800450a:	d107      	bne.n	800451c <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	2300      	movs	r3, #0
 8004516:	2100      	movs	r1, #0
 8004518:	f7fe fc8c 	bl	8002e34 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2101      	movs	r1, #1
 8004522:	4618      	mov	r0, r3
 8004524:	f7fe fca7 	bl	8002e76 <LL_ADC_GetOffsetChannel>
 8004528:	4603      	mov	r3, r0
 800452a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10c      	bne.n	800454c <HAL_ADC_ConfigChannel+0x2c0>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2101      	movs	r1, #1
 8004538:	4618      	mov	r0, r3
 800453a:	f7fe fc9c 	bl	8002e76 <LL_ADC_GetOffsetChannel>
 800453e:	4603      	mov	r3, r0
 8004540:	0e9b      	lsrs	r3, r3, #26
 8004542:	f003 021f 	and.w	r2, r3, #31
 8004546:	e020      	b.n	800458a <HAL_ADC_ConfigChannel+0x2fe>
 8004548:	46021000 	.word	0x46021000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2101      	movs	r1, #1
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe fc8f 	bl	8002e76 <LL_ADC_GetOffsetChannel>
 8004558:	4603      	mov	r3, r0
 800455a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004562:	fa93 f3a3 	rbit	r3, r3
 8004566:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800456a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800456e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004572:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 800457a:	2320      	movs	r3, #32
 800457c:	e004      	b.n	8004588 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 800457e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004582:	fab3 f383 	clz	r3, r3
 8004586:	b2db      	uxtb	r3, r3
 8004588:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d105      	bne.n	80045a2 <HAL_ADC_ConfigChannel+0x316>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	0e9b      	lsrs	r3, r3, #26
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	e018      	b.n	80045d4 <HAL_ADC_ConfigChannel+0x348>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045ae:	fa93 f3a3 	rbit	r3, r3
 80045b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80045b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80045be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 80045c6:	2320      	movs	r3, #32
 80045c8:	e004      	b.n	80045d4 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 80045ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045ce:	fab3 f383 	clz	r3, r3
 80045d2:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d107      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	2300      	movs	r3, #0
 80045e2:	2101      	movs	r1, #1
 80045e4:	f7fe fc26 	bl	8002e34 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2102      	movs	r1, #2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fe fc41 	bl	8002e76 <LL_ADC_GetOffsetChannel>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10a      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x388>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2102      	movs	r1, #2
 8004604:	4618      	mov	r0, r3
 8004606:	f7fe fc36 	bl	8002e76 <LL_ADC_GetOffsetChannel>
 800460a:	4603      	mov	r3, r0
 800460c:	0e9b      	lsrs	r3, r3, #26
 800460e:	f003 021f 	and.w	r2, r3, #31
 8004612:	e01a      	b.n	800464a <HAL_ADC_ConfigChannel+0x3be>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2102      	movs	r1, #2
 800461a:	4618      	mov	r0, r3
 800461c:	f7fe fc2b 	bl	8002e76 <LL_ADC_GetOffsetChannel>
 8004620:	4603      	mov	r3, r0
 8004622:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004624:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004626:	fa93 f3a3 	rbit	r3, r3
 800462a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800462c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800462e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004632:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800463a:	2320      	movs	r3, #32
 800463c:	e004      	b.n	8004648 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 800463e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004642:	fab3 f383 	clz	r3, r3
 8004646:	b2db      	uxtb	r3, r3
 8004648:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d105      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x3d6>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	0e9b      	lsrs	r3, r3, #26
 800465c:	f003 031f 	and.w	r3, r3, #31
 8004660:	e011      	b.n	8004686 <HAL_ADC_ConfigChannel+0x3fa>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004668:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800466a:	fa93 f3a3 	rbit	r3, r3
 800466e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004670:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004672:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004674:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800467a:	2320      	movs	r3, #32
 800467c:	e003      	b.n	8004686 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800467e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004680:	fab3 f383 	clz	r3, r3
 8004684:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004686:	429a      	cmp	r2, r3
 8004688:	d107      	bne.n	800469a <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	2300      	movs	r3, #0
 8004694:	2102      	movs	r1, #2
 8004696:	f7fe fbcd 	bl	8002e34 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2103      	movs	r1, #3
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fe fbe8 	bl	8002e76 <LL_ADC_GetOffsetChannel>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <HAL_ADC_ConfigChannel+0x43a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2103      	movs	r1, #3
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fe fbdd 	bl	8002e76 <LL_ADC_GetOffsetChannel>
 80046bc:	4603      	mov	r3, r0
 80046be:	0e9b      	lsrs	r3, r3, #26
 80046c0:	f003 021f 	and.w	r2, r3, #31
 80046c4:	e017      	b.n	80046f6 <HAL_ADC_ConfigChannel+0x46a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2103      	movs	r1, #3
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fe fbd2 	bl	8002e76 <LL_ADC_GetOffsetChannel>
 80046d2:	4603      	mov	r3, r0
 80046d4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046d8:	fa93 f3a3 	rbit	r3, r3
 80046dc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80046de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046e0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80046e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 80046e8:	2320      	movs	r3, #32
 80046ea:	e003      	b.n	80046f4 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 80046ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046ee:	fab3 f383 	clz	r3, r3
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d105      	bne.n	800470e <HAL_ADC_ConfigChannel+0x482>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	0e9b      	lsrs	r3, r3, #26
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	e011      	b.n	8004732 <HAL_ADC_ConfigChannel+0x4a6>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004714:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004716:	fa93 f3a3 	rbit	r3, r3
 800471a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800471c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800471e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004720:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 8004726:	2320      	movs	r3, #32
 8004728:	e003      	b.n	8004732 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 800472a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800472c:	fab3 f383 	clz	r3, r3
 8004730:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004732:	429a      	cmp	r2, r3
 8004734:	d107      	bne.n	8004746 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	2300      	movs	r3, #0
 8004740:	2103      	movs	r1, #3
 8004742:	f7fe fb77 	bl	8002e34 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7fe fe22 	bl	8003394 <LL_ADC_IsEnabled>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	f040 83ad 	bne.w	8004eb2 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6818      	ldr	r0, [r3, #0]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	6819      	ldr	r1, [r3, #0]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	461a      	mov	r2, r3
 8004766:	f7fe fd73 	bl	8003250 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004772:	f040 80d6 	bne.w	8004922 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10b      	bne.n	800479a <HAL_ADC_ConfigChannel+0x50e>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	0e9b      	lsrs	r3, r3, #26
 8004788:	3301      	adds	r3, #1
 800478a:	f003 031f 	and.w	r3, r3, #31
 800478e:	2b09      	cmp	r3, #9
 8004790:	bf94      	ite	ls
 8004792:	2301      	movls	r3, #1
 8004794:	2300      	movhi	r3, #0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	e019      	b.n	80047ce <HAL_ADC_ConfigChannel+0x542>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047a2:	fa93 f3a3 	rbit	r3, r3
 80047a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80047a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047aa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80047ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80047b2:	2320      	movs	r3, #32
 80047b4:	e003      	b.n	80047be <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80047b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047b8:	fab3 f383 	clz	r3, r3
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	3301      	adds	r3, #1
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	2b09      	cmp	r3, #9
 80047c6:	bf94      	ite	ls
 80047c8:	2301      	movls	r3, #1
 80047ca:	2300      	movhi	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d04d      	beq.n	800486e <HAL_ADC_ConfigChannel+0x5e2>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d107      	bne.n	80047ee <HAL_ADC_ConfigChannel+0x562>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	0e9b      	lsrs	r3, r3, #26
 80047e4:	3301      	adds	r3, #1
 80047e6:	069b      	lsls	r3, r3, #26
 80047e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047ec:	e015      	b.n	800481a <HAL_ADC_ConfigChannel+0x58e>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047f6:	fa93 f3a3 	rbit	r3, r3
 80047fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80047fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047fe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004806:	2320      	movs	r3, #32
 8004808:	e003      	b.n	8004812 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800480a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800480c:	fab3 f383 	clz	r3, r3
 8004810:	b2db      	uxtb	r3, r3
 8004812:	3301      	adds	r3, #1
 8004814:	069b      	lsls	r3, r3, #26
 8004816:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <HAL_ADC_ConfigChannel+0x5ae>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	0e9b      	lsrs	r3, r3, #26
 800482c:	3301      	adds	r3, #1
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	2101      	movs	r1, #1
 8004834:	fa01 f303 	lsl.w	r3, r1, r3
 8004838:	e017      	b.n	800486a <HAL_ADC_ConfigChannel+0x5de>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004842:	fa93 f3a3 	rbit	r3, r3
 8004846:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800484c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8004852:	2320      	movs	r3, #32
 8004854:	e003      	b.n	800485e <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 8004856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004858:	fab3 f383 	clz	r3, r3
 800485c:	b2db      	uxtb	r3, r3
 800485e:	3301      	adds	r3, #1
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	2101      	movs	r1, #1
 8004866:	fa01 f303 	lsl.w	r3, r1, r3
 800486a:	4313      	orrs	r3, r2
 800486c:	e04e      	b.n	800490c <HAL_ADC_ConfigChannel+0x680>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d107      	bne.n	800488a <HAL_ADC_ConfigChannel+0x5fe>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	0e9b      	lsrs	r3, r3, #26
 8004880:	3301      	adds	r3, #1
 8004882:	069b      	lsls	r3, r3, #26
 8004884:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004888:	e015      	b.n	80048b6 <HAL_ADC_ConfigChannel+0x62a>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004892:	fa93 f3a3 	rbit	r3, r3
 8004896:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800489c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80048a2:	2320      	movs	r3, #32
 80048a4:	e003      	b.n	80048ae <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80048a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a8:	fab3 f383 	clz	r3, r3
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	3301      	adds	r3, #1
 80048b0:	069b      	lsls	r3, r3, #26
 80048b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d109      	bne.n	80048d6 <HAL_ADC_ConfigChannel+0x64a>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	0e9b      	lsrs	r3, r3, #26
 80048c8:	3301      	adds	r3, #1
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	2101      	movs	r1, #1
 80048d0:	fa01 f303 	lsl.w	r3, r1, r3
 80048d4:	e017      	b.n	8004906 <HAL_ADC_ConfigChannel+0x67a>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	fa93 f3a3 	rbit	r3, r3
 80048e2:	61bb      	str	r3, [r7, #24]
  return result;
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 80048ee:	2320      	movs	r3, #32
 80048f0:	e003      	b.n	80048fa <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	fab3 f383 	clz	r3, r3
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	3301      	adds	r3, #1
 80048fc:	f003 031f 	and.w	r3, r3, #31
 8004900:	2101      	movs	r1, #1
 8004902:	fa01 f303 	lsl.w	r3, r1, r3
 8004906:	4313      	orrs	r3, r2
 8004908:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800490c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	461a      	mov	r2, r3
 800491a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800491e:	f7fe fc33 	bl	8003188 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	f280 82c3 	bge.w	8004eb2 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a92      	ldr	r2, [pc, #584]	@ (8004b7c <HAL_ADC_ConfigChannel+0x8f0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_ADC_ConfigChannel+0x6b4>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a91      	ldr	r2, [pc, #580]	@ (8004b80 <HAL_ADC_ConfigChannel+0x8f4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d101      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x6b8>
 8004940:	4b90      	ldr	r3, [pc, #576]	@ (8004b84 <HAL_ADC_ConfigChannel+0x8f8>)
 8004942:	e000      	b.n	8004946 <HAL_ADC_ConfigChannel+0x6ba>
 8004944:	4b90      	ldr	r3, [pc, #576]	@ (8004b88 <HAL_ADC_ConfigChannel+0x8fc>)
 8004946:	4618      	mov	r0, r3
 8004948:	f7fe fa46 	bl	8002dd8 <LL_ADC_GetCommonPathInternalCh>
 800494c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a89      	ldr	r2, [pc, #548]	@ (8004b7c <HAL_ADC_ConfigChannel+0x8f0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d004      	beq.n	8004964 <HAL_ADC_ConfigChannel+0x6d8>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a88      	ldr	r2, [pc, #544]	@ (8004b80 <HAL_ADC_ConfigChannel+0x8f4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d10e      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x6f6>
 8004964:	4885      	ldr	r0, [pc, #532]	@ (8004b7c <HAL_ADC_ConfigChannel+0x8f0>)
 8004966:	f7fe fd15 	bl	8003394 <LL_ADC_IsEnabled>
 800496a:	4604      	mov	r4, r0
 800496c:	4884      	ldr	r0, [pc, #528]	@ (8004b80 <HAL_ADC_ConfigChannel+0x8f4>)
 800496e:	f7fe fd11 	bl	8003394 <LL_ADC_IsEnabled>
 8004972:	4603      	mov	r3, r0
 8004974:	4323      	orrs	r3, r4
 8004976:	2b00      	cmp	r3, #0
 8004978:	bf0c      	ite	eq
 800497a:	2301      	moveq	r3, #1
 800497c:	2300      	movne	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	e008      	b.n	8004994 <HAL_ADC_ConfigChannel+0x708>
 8004982:	4882      	ldr	r0, [pc, #520]	@ (8004b8c <HAL_ADC_ConfigChannel+0x900>)
 8004984:	f7fe fd06 	bl	8003394 <LL_ADC_IsEnabled>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	bf0c      	ite	eq
 800498e:	2301      	moveq	r3, #1
 8004990:	2300      	movne	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 80a6 	beq.w	8004ae6 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a7c      	ldr	r2, [pc, #496]	@ (8004b90 <HAL_ADC_ConfigChannel+0x904>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d13c      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d136      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a71      	ldr	r2, [pc, #452]	@ (8004b7c <HAL_ADC_ConfigChannel+0x8f0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00a      	beq.n	80049d0 <HAL_ADC_ConfigChannel+0x744>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a70      	ldr	r2, [pc, #448]	@ (8004b80 <HAL_ADC_ConfigChannel+0x8f4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d005      	beq.n	80049d0 <HAL_ADC_ConfigChannel+0x744>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a70      	ldr	r2, [pc, #448]	@ (8004b8c <HAL_ADC_ConfigChannel+0x900>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	f040 826e 	bne.w	8004eac <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a69      	ldr	r2, [pc, #420]	@ (8004b7c <HAL_ADC_ConfigChannel+0x8f0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d004      	beq.n	80049e4 <HAL_ADC_ConfigChannel+0x758>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a68      	ldr	r2, [pc, #416]	@ (8004b80 <HAL_ADC_ConfigChannel+0x8f4>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d101      	bne.n	80049e8 <HAL_ADC_ConfigChannel+0x75c>
 80049e4:	4a67      	ldr	r2, [pc, #412]	@ (8004b84 <HAL_ADC_ConfigChannel+0x8f8>)
 80049e6:	e000      	b.n	80049ea <HAL_ADC_ConfigChannel+0x75e>
 80049e8:	4a67      	ldr	r2, [pc, #412]	@ (8004b88 <HAL_ADC_ConfigChannel+0x8fc>)
 80049ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f7fe f9dc 	bl	8002db2 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049fa:	4b66      	ldr	r3, [pc, #408]	@ (8004b94 <HAL_ADC_ConfigChannel+0x908>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	099b      	lsrs	r3, r3, #6
 8004a00:	4a65      	ldr	r2, [pc, #404]	@ (8004b98 <HAL_ADC_ConfigChannel+0x90c>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	099b      	lsrs	r3, r3, #6
 8004a08:	3301      	adds	r3, #1
 8004a0a:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8004a0c:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004a0e:	e002      	b.n	8004a16 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1f9      	bne.n	8004a10 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a1c:	e246      	b.n	8004eac <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a5e      	ldr	r2, [pc, #376]	@ (8004b9c <HAL_ADC_ConfigChannel+0x910>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d12b      	bne.n	8004a80 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d125      	bne.n	8004a80 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a50      	ldr	r2, [pc, #320]	@ (8004b7c <HAL_ADC_ConfigChannel+0x8f0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00a      	beq.n	8004a54 <HAL_ADC_ConfigChannel+0x7c8>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a4f      	ldr	r2, [pc, #316]	@ (8004b80 <HAL_ADC_ConfigChannel+0x8f4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d005      	beq.n	8004a54 <HAL_ADC_ConfigChannel+0x7c8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a4f      	ldr	r2, [pc, #316]	@ (8004b8c <HAL_ADC_ConfigChannel+0x900>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	f040 822e 	bne.w	8004eb0 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a48      	ldr	r2, [pc, #288]	@ (8004b7c <HAL_ADC_ConfigChannel+0x8f0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d004      	beq.n	8004a68 <HAL_ADC_ConfigChannel+0x7dc>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a47      	ldr	r2, [pc, #284]	@ (8004b80 <HAL_ADC_ConfigChannel+0x8f4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d101      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x7e0>
 8004a68:	4a46      	ldr	r2, [pc, #280]	@ (8004b84 <HAL_ADC_ConfigChannel+0x8f8>)
 8004a6a:	e000      	b.n	8004a6e <HAL_ADC_ConfigChannel+0x7e2>
 8004a6c:	4a46      	ldr	r2, [pc, #280]	@ (8004b88 <HAL_ADC_ConfigChannel+0x8fc>)
 8004a6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a76:	4619      	mov	r1, r3
 8004a78:	4610      	mov	r0, r2
 8004a7a:	f7fe f99a 	bl	8002db2 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a7e:	e217      	b.n	8004eb0 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a46      	ldr	r2, [pc, #280]	@ (8004ba0 <HAL_ADC_ConfigChannel+0x914>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	f040 8213 	bne.w	8004eb2 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f040 820c 	bne.w	8004eb2 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a37      	ldr	r2, [pc, #220]	@ (8004b7c <HAL_ADC_ConfigChannel+0x8f0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00a      	beq.n	8004aba <HAL_ADC_ConfigChannel+0x82e>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a35      	ldr	r2, [pc, #212]	@ (8004b80 <HAL_ADC_ConfigChannel+0x8f4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d005      	beq.n	8004aba <HAL_ADC_ConfigChannel+0x82e>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a36      	ldr	r2, [pc, #216]	@ (8004b8c <HAL_ADC_ConfigChannel+0x900>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	f040 81fc 	bne.w	8004eb2 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a2f      	ldr	r2, [pc, #188]	@ (8004b7c <HAL_ADC_ConfigChannel+0x8f0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d004      	beq.n	8004ace <HAL_ADC_ConfigChannel+0x842>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a2d      	ldr	r2, [pc, #180]	@ (8004b80 <HAL_ADC_ConfigChannel+0x8f4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d101      	bne.n	8004ad2 <HAL_ADC_ConfigChannel+0x846>
 8004ace:	4a2d      	ldr	r2, [pc, #180]	@ (8004b84 <HAL_ADC_ConfigChannel+0x8f8>)
 8004ad0:	e000      	b.n	8004ad4 <HAL_ADC_ConfigChannel+0x848>
 8004ad2:	4a2d      	ldr	r2, [pc, #180]	@ (8004b88 <HAL_ADC_ConfigChannel+0x8fc>)
 8004ad4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ad8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004adc:	4619      	mov	r1, r3
 8004ade:	4610      	mov	r0, r2
 8004ae0:	f7fe f967 	bl	8002db2 <LL_ADC_SetCommonPathInternalCh>
 8004ae4:	e1e5      	b.n	8004eb2 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004aea:	f043 0220 	orr.w	r2, r3, #32
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004af8:	e1db      	b.n	8004eb2 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	f000 811b 	beq.w	8004d42 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b14:	d004      	beq.n	8004b20 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004b1a:	4a22      	ldr	r2, [pc, #136]	@ (8004ba4 <HAL_ADC_ConfigChannel+0x918>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d107      	bne.n	8004b30 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fe fac1 	bl	80030b0 <LL_ADC_REG_SetSequencerChAdd>
 8004b2e:	e059      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f003 031f 	and.w	r3, r3, #31
 8004b3e:	210f      	movs	r1, #15
 8004b40:	fa01 f303 	lsl.w	r3, r1, r3
 8004b44:	43db      	mvns	r3, r3
 8004b46:	401a      	ands	r2, r3
 8004b48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004b4c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d105      	bne.n	8004b60 <HAL_ADC_ConfigChannel+0x8d4>
 8004b54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004b58:	0e9b      	lsrs	r3, r3, #26
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	e027      	b.n	8004bb0 <HAL_ADC_ConfigChannel+0x924>
 8004b60:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004b64:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	fa93 f3a3 	rbit	r3, r3
 8004b6c:	60fb      	str	r3, [r7, #12]
  return result;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d117      	bne.n	8004ba8 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8004b78:	2320      	movs	r3, #32
 8004b7a:	e019      	b.n	8004bb0 <HAL_ADC_ConfigChannel+0x924>
 8004b7c:	42028000 	.word	0x42028000
 8004b80:	42028100 	.word	0x42028100
 8004b84:	42028300 	.word	0x42028300
 8004b88:	46021300 	.word	0x46021300
 8004b8c:	46021000 	.word	0x46021000
 8004b90:	ce080000 	.word	0xce080000
 8004b94:	2000001c 	.word	0x2000001c
 8004b98:	053e2d63 	.word	0x053e2d63
 8004b9c:	ca040000 	.word	0xca040000
 8004ba0:	80000001 	.word	0x80000001
 8004ba4:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	fab3 f383 	clz	r3, r3
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	6839      	ldr	r1, [r7, #0]
 8004bb2:	6849      	ldr	r1, [r1, #4]
 8004bb4:	f001 011f 	and.w	r1, r1, #31
 8004bb8:	408b      	lsls	r3, r1
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	089b      	lsrs	r3, r3, #2
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d808      	bhi.n	8004be4 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004bde:	4619      	mov	r1, r3
 8004be0:	f7fe fa06 	bl	8002ff0 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	461a      	mov	r2, r3
 8004bee:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004bf2:	f7fe fac9 	bl	8003188 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f280 8159 	bge.w	8004eb2 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a9b      	ldr	r2, [pc, #620]	@ (8004e74 <HAL_ADC_ConfigChannel+0xbe8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d004      	beq.n	8004c14 <HAL_ADC_ConfigChannel+0x988>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a9a      	ldr	r2, [pc, #616]	@ (8004e78 <HAL_ADC_ConfigChannel+0xbec>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d101      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x98c>
 8004c14:	4b99      	ldr	r3, [pc, #612]	@ (8004e7c <HAL_ADC_ConfigChannel+0xbf0>)
 8004c16:	e000      	b.n	8004c1a <HAL_ADC_ConfigChannel+0x98e>
 8004c18:	4b99      	ldr	r3, [pc, #612]	@ (8004e80 <HAL_ADC_ConfigChannel+0xbf4>)
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fe f8dc 	bl	8002dd8 <LL_ADC_GetCommonPathInternalCh>
 8004c20:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a96      	ldr	r2, [pc, #600]	@ (8004e84 <HAL_ADC_ConfigChannel+0xbf8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d12b      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d125      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a8d      	ldr	r2, [pc, #564]	@ (8004e74 <HAL_ADC_ConfigChannel+0xbe8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d004      	beq.n	8004c4e <HAL_ADC_ConfigChannel+0x9c2>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a8b      	ldr	r2, [pc, #556]	@ (8004e78 <HAL_ADC_ConfigChannel+0xbec>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d101      	bne.n	8004c52 <HAL_ADC_ConfigChannel+0x9c6>
 8004c4e:	4a8b      	ldr	r2, [pc, #556]	@ (8004e7c <HAL_ADC_ConfigChannel+0xbf0>)
 8004c50:	e000      	b.n	8004c54 <HAL_ADC_ConfigChannel+0x9c8>
 8004c52:	4a8b      	ldr	r2, [pc, #556]	@ (8004e80 <HAL_ADC_ConfigChannel+0xbf4>)
 8004c54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c58:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	f7fe f8a7 	bl	8002db2 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004c64:	4b88      	ldr	r3, [pc, #544]	@ (8004e88 <HAL_ADC_ConfigChannel+0xbfc>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	099b      	lsrs	r3, r3, #6
 8004c6a:	4a88      	ldr	r2, [pc, #544]	@ (8004e8c <HAL_ADC_ConfigChannel+0xc00>)
 8004c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c70:	099b      	lsrs	r3, r3, #6
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004c76:	e002      	b.n	8004c7e <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1f9      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004c84:	e045      	b.n	8004d12 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a81      	ldr	r2, [pc, #516]	@ (8004e90 <HAL_ADC_ConfigChannel+0xc04>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d11b      	bne.n	8004cc8 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d115      	bne.n	8004cc8 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a74      	ldr	r2, [pc, #464]	@ (8004e74 <HAL_ADC_ConfigChannel+0xbe8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <HAL_ADC_ConfigChannel+0xa24>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a73      	ldr	r2, [pc, #460]	@ (8004e78 <HAL_ADC_ConfigChannel+0xbec>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d101      	bne.n	8004cb4 <HAL_ADC_ConfigChannel+0xa28>
 8004cb0:	4a72      	ldr	r2, [pc, #456]	@ (8004e7c <HAL_ADC_ConfigChannel+0xbf0>)
 8004cb2:	e000      	b.n	8004cb6 <HAL_ADC_ConfigChannel+0xa2a>
 8004cb4:	4a72      	ldr	r2, [pc, #456]	@ (8004e80 <HAL_ADC_ConfigChannel+0xbf4>)
 8004cb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	f7fe f876 	bl	8002db2 <LL_ADC_SetCommonPathInternalCh>
 8004cc6:	e024      	b.n	8004d12 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a71      	ldr	r2, [pc, #452]	@ (8004e94 <HAL_ADC_ConfigChannel+0xc08>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d11f      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004cd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d115      	bne.n	8004d0a <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a64      	ldr	r2, [pc, #400]	@ (8004e74 <HAL_ADC_ConfigChannel+0xbe8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d004      	beq.n	8004cf2 <HAL_ADC_ConfigChannel+0xa66>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a62      	ldr	r2, [pc, #392]	@ (8004e78 <HAL_ADC_ConfigChannel+0xbec>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d101      	bne.n	8004cf6 <HAL_ADC_ConfigChannel+0xa6a>
 8004cf2:	4a62      	ldr	r2, [pc, #392]	@ (8004e7c <HAL_ADC_ConfigChannel+0xbf0>)
 8004cf4:	e000      	b.n	8004cf8 <HAL_ADC_ConfigChannel+0xa6c>
 8004cf6:	4a62      	ldr	r2, [pc, #392]	@ (8004e80 <HAL_ADC_ConfigChannel+0xbf4>)
 8004cf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cfc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d00:	4619      	mov	r1, r3
 8004d02:	4610      	mov	r0, r2
 8004d04:	f7fe f855 	bl	8002db2 <LL_ADC_SetCommonPathInternalCh>
 8004d08:	e003      	b.n	8004d12 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a62      	ldr	r2, [pc, #392]	@ (8004e98 <HAL_ADC_ConfigChannel+0xc0c>)
 8004d10:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a61      	ldr	r2, [pc, #388]	@ (8004e9c <HAL_ADC_ConfigChannel+0xc10>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	f040 80ca 	bne.w	8004eb2 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f040 80c3 	bne.w	8004eb2 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f042 0201 	orr.w	r2, r2, #1
 8004d3c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004d40:	e0b7      	b.n	8004eb2 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d4a:	d004      	beq.n	8004d56 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004d50:	4a53      	ldr	r2, [pc, #332]	@ (8004ea0 <HAL_ADC_ConfigChannel+0xc14>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d106      	bne.n	8004d64 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fe f9d9 	bl	8003116 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f280 80a2 	bge.w	8004eb2 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a40      	ldr	r2, [pc, #256]	@ (8004e74 <HAL_ADC_ConfigChannel+0xbe8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d004      	beq.n	8004d82 <HAL_ADC_ConfigChannel+0xaf6>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a3e      	ldr	r2, [pc, #248]	@ (8004e78 <HAL_ADC_ConfigChannel+0xbec>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d101      	bne.n	8004d86 <HAL_ADC_ConfigChannel+0xafa>
 8004d82:	4b3e      	ldr	r3, [pc, #248]	@ (8004e7c <HAL_ADC_ConfigChannel+0xbf0>)
 8004d84:	e000      	b.n	8004d88 <HAL_ADC_ConfigChannel+0xafc>
 8004d86:	4b3e      	ldr	r3, [pc, #248]	@ (8004e80 <HAL_ADC_ConfigChannel+0xbf4>)
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fe f825 	bl	8002dd8 <LL_ADC_GetCommonPathInternalCh>
 8004d8e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a43      	ldr	r2, [pc, #268]	@ (8004ea4 <HAL_ADC_ConfigChannel+0xc18>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d115      	bne.n	8004dc8 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a34      	ldr	r2, [pc, #208]	@ (8004e74 <HAL_ADC_ConfigChannel+0xbe8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d004      	beq.n	8004db0 <HAL_ADC_ConfigChannel+0xb24>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a33      	ldr	r2, [pc, #204]	@ (8004e78 <HAL_ADC_ConfigChannel+0xbec>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d101      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0xb28>
 8004db0:	4a32      	ldr	r2, [pc, #200]	@ (8004e7c <HAL_ADC_ConfigChannel+0xbf0>)
 8004db2:	e000      	b.n	8004db6 <HAL_ADC_ConfigChannel+0xb2a>
 8004db4:	4a32      	ldr	r2, [pc, #200]	@ (8004e80 <HAL_ADC_ConfigChannel+0xbf4>)
 8004db6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	f7fd fff6 	bl	8002db2 <LL_ADC_SetCommonPathInternalCh>
 8004dc6:	e034      	b.n	8004e32 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a36      	ldr	r2, [pc, #216]	@ (8004ea8 <HAL_ADC_ConfigChannel+0xc1c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d115      	bne.n	8004dfe <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a27      	ldr	r2, [pc, #156]	@ (8004e74 <HAL_ADC_ConfigChannel+0xbe8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d004      	beq.n	8004de6 <HAL_ADC_ConfigChannel+0xb5a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a25      	ldr	r2, [pc, #148]	@ (8004e78 <HAL_ADC_ConfigChannel+0xbec>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d101      	bne.n	8004dea <HAL_ADC_ConfigChannel+0xb5e>
 8004de6:	4a25      	ldr	r2, [pc, #148]	@ (8004e7c <HAL_ADC_ConfigChannel+0xbf0>)
 8004de8:	e000      	b.n	8004dec <HAL_ADC_ConfigChannel+0xb60>
 8004dea:	4a25      	ldr	r2, [pc, #148]	@ (8004e80 <HAL_ADC_ConfigChannel+0xbf4>)
 8004dec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004df0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004df4:	4619      	mov	r1, r3
 8004df6:	4610      	mov	r0, r2
 8004df8:	f7fd ffdb 	bl	8002db2 <LL_ADC_SetCommonPathInternalCh>
 8004dfc:	e019      	b.n	8004e32 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a24      	ldr	r2, [pc, #144]	@ (8004e94 <HAL_ADC_ConfigChannel+0xc08>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d114      	bne.n	8004e32 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a19      	ldr	r2, [pc, #100]	@ (8004e74 <HAL_ADC_ConfigChannel+0xbe8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d004      	beq.n	8004e1c <HAL_ADC_ConfigChannel+0xb90>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a18      	ldr	r2, [pc, #96]	@ (8004e78 <HAL_ADC_ConfigChannel+0xbec>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d101      	bne.n	8004e20 <HAL_ADC_ConfigChannel+0xb94>
 8004e1c:	4a17      	ldr	r2, [pc, #92]	@ (8004e7c <HAL_ADC_ConfigChannel+0xbf0>)
 8004e1e:	e000      	b.n	8004e22 <HAL_ADC_ConfigChannel+0xb96>
 8004e20:	4a17      	ldr	r2, [pc, #92]	@ (8004e80 <HAL_ADC_ConfigChannel+0xbf4>)
 8004e22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e26:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	f7fd ffc0 	bl	8002db2 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a19      	ldr	r2, [pc, #100]	@ (8004e9c <HAL_ADC_ConfigChannel+0xc10>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d13a      	bne.n	8004eb2 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d134      	bne.n	8004eb2 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0201 	orr.w	r2, r2, #1
 8004e58:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004e5c:	e029      	b.n	8004eb2 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e62:	f043 0220 	orr.w	r2, r3, #32
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004e70:	e01f      	b.n	8004eb2 <HAL_ADC_ConfigChannel+0xc26>
 8004e72:	bf00      	nop
 8004e74:	42028000 	.word	0x42028000
 8004e78:	42028100 	.word	0x42028100
 8004e7c:	42028300 	.word	0x42028300
 8004e80:	46021300 	.word	0x46021300
 8004e84:	b6002000 	.word	0xb6002000
 8004e88:	2000001c 	.word	0x2000001c
 8004e8c:	053e2d63 	.word	0x053e2d63
 8004e90:	ba004000 	.word	0xba004000
 8004e94:	80000001 	.word	0x80000001
 8004e98:	b2001000 	.word	0xb2001000
 8004e9c:	d7200000 	.word	0xd7200000
 8004ea0:	80000010 	.word	0x80000010
 8004ea4:	ce080000 	.word	0xce080000
 8004ea8:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004eac:	bf00      	nop
 8004eae:	e000      	b.n	8004eb2 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004eb0:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004eba:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	37dc      	adds	r7, #220	@ 0xdc
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd90      	pop	{r4, r7, pc}
 8004ec6:	bf00      	nop

08004ec8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fe fa5d 	bl	8003394 <LL_ADC_IsEnabled>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d17b      	bne.n	8004fd8 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8004fe4 <ADC_Enable+0x11c>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00d      	beq.n	8004f0a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ef2:	f043 0210 	orr.w	r2, r3, #16
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004efe:	f043 0201 	orr.w	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e067      	b.n	8004fda <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fe fa28 	bl	800336c <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d004      	beq.n	8004f2e <ADC_Enable+0x66>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a2f      	ldr	r2, [pc, #188]	@ (8004fe8 <ADC_Enable+0x120>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d054      	beq.n	8004fd8 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004f2e:	f7fd fed5 	bl	8002cdc <HAL_GetTick>
 8004f32:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a2c      	ldr	r2, [pc, #176]	@ (8004fec <ADC_Enable+0x124>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d004      	beq.n	8004f48 <ADC_Enable+0x80>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a2b      	ldr	r2, [pc, #172]	@ (8004ff0 <ADC_Enable+0x128>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d101      	bne.n	8004f4c <ADC_Enable+0x84>
 8004f48:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff4 <ADC_Enable+0x12c>)
 8004f4a:	e000      	b.n	8004f4e <ADC_Enable+0x86>
 8004f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff8 <ADC_Enable+0x130>)
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fe f9a2 	bl	8003298 <LL_ADC_GetMultimode>
 8004f54:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a25      	ldr	r2, [pc, #148]	@ (8004ff0 <ADC_Enable+0x128>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d002      	beq.n	8004f66 <ADC_Enable+0x9e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	e000      	b.n	8004f68 <ADC_Enable+0xa0>
 8004f66:	4b21      	ldr	r3, [pc, #132]	@ (8004fec <ADC_Enable+0x124>)
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d02c      	beq.n	8004fca <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d130      	bne.n	8004fd8 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f76:	e028      	b.n	8004fca <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fe fa09 	bl	8003394 <LL_ADC_IsEnabled>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d104      	bne.n	8004f92 <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fe f9ed 	bl	800336c <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f92:	f7fd fea3 	bl	8002cdc <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d914      	bls.n	8004fca <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d00d      	beq.n	8004fca <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fb2:	f043 0210 	orr.w	r2, r3, #16
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fbe:	f043 0201 	orr.w	r2, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e007      	b.n	8004fda <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d1cf      	bne.n	8004f78 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	8000003f 	.word	0x8000003f
 8004fe8:	46021000 	.word	0x46021000
 8004fec:	42028000 	.word	0x42028000
 8004ff0:	42028100 	.word	0x42028100
 8004ff4:	42028300 	.word	0x42028300
 8004ff8:	46021300 	.word	0x46021300

08004ffc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005008:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800500e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005012:	2b00      	cmp	r3, #0
 8005014:	d14b      	bne.n	80050ae <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800501a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d021      	beq.n	8005074 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4618      	mov	r0, r3
 8005036:	f7fd ffc7 	bl	8002fc8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d032      	beq.n	80050a6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d12b      	bne.n	80050a6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005052:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800505e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d11f      	bne.n	80050a6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800506a:	f043 0201 	orr.w	r2, r3, #1
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	679a      	str	r2, [r3, #120]	@ 0x78
 8005072:	e018      	b.n	80050a6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d111      	bne.n	80050a6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005086:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005092:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d105      	bne.n	80050a6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800509e:	f043 0201 	orr.w	r2, r3, #1
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f7ff f8aa 	bl	8004200 <HAL_ADC_ConvCpltCallback>
      /* Call ADC DMA error callback */
        HAL_ADC_ConvCpltCallback(hadc);
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80050ac:	e011      	b.n	80050d2 <ADC_DMAConvCplt+0xd6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f7ff f8be 	bl	800423c <HAL_ADC_ErrorCallback>
}
 80050c0:	e007      	b.n	80050d2 <ADC_DMAConvCplt+0xd6>
        HAL_ADC_ConvCpltCallback(hadc);
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f7ff f89c 	bl	8004200 <HAL_ADC_ConvCpltCallback>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	4798      	blx	r3
}
 80050d2:	bf00      	nop
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b084      	sub	sp, #16
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff f893 	bl	8004214 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050ee:	bf00      	nop
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005102:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005108:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005114:	f043 0204 	orr.w	r2, r3, #4
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f7ff f88d 	bl	800423c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005122:	bf00      	nop
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
	...

0800517c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800518c:	4b0c      	ldr	r3, [pc, #48]	@ (80051c0 <__NVIC_SetPriorityGrouping+0x44>)
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005198:	4013      	ands	r3, r2
 800519a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80051a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051ae:	4a04      	ldr	r2, [pc, #16]	@ (80051c0 <__NVIC_SetPriorityGrouping+0x44>)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	60d3      	str	r3, [r2, #12]
}
 80051b4:	bf00      	nop
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	e000ed00 	.word	0xe000ed00

080051c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051c8:	4b04      	ldr	r3, [pc, #16]	@ (80051dc <__NVIC_GetPriorityGrouping+0x18>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	0a1b      	lsrs	r3, r3, #8
 80051ce:	f003 0307 	and.w	r3, r3, #7
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	e000ed00 	.word	0xe000ed00

080051e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	db0b      	blt.n	800520a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	f003 021f 	and.w	r2, r3, #31
 80051f8:	4907      	ldr	r1, [pc, #28]	@ (8005218 <__NVIC_EnableIRQ+0x38>)
 80051fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	2001      	movs	r0, #1
 8005202:	fa00 f202 	lsl.w	r2, r0, r2
 8005206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	e000e100 	.word	0xe000e100

0800521c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	6039      	str	r1, [r7, #0]
 8005226:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800522c:	2b00      	cmp	r3, #0
 800522e:	db0a      	blt.n	8005246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	b2da      	uxtb	r2, r3
 8005234:	490c      	ldr	r1, [pc, #48]	@ (8005268 <__NVIC_SetPriority+0x4c>)
 8005236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800523a:	0112      	lsls	r2, r2, #4
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	440b      	add	r3, r1
 8005240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005244:	e00a      	b.n	800525c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	b2da      	uxtb	r2, r3
 800524a:	4908      	ldr	r1, [pc, #32]	@ (800526c <__NVIC_SetPriority+0x50>)
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	3b04      	subs	r3, #4
 8005254:	0112      	lsls	r2, r2, #4
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	440b      	add	r3, r1
 800525a:	761a      	strb	r2, [r3, #24]
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	e000e100 	.word	0xe000e100
 800526c:	e000ed00 	.word	0xe000ed00

08005270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005270:	b480      	push	{r7}
 8005272:	b089      	sub	sp, #36	@ 0x24
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	f1c3 0307 	rsb	r3, r3, #7
 800528a:	2b04      	cmp	r3, #4
 800528c:	bf28      	it	cs
 800528e:	2304      	movcs	r3, #4
 8005290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	3304      	adds	r3, #4
 8005296:	2b06      	cmp	r3, #6
 8005298:	d902      	bls.n	80052a0 <NVIC_EncodePriority+0x30>
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	3b03      	subs	r3, #3
 800529e:	e000      	b.n	80052a2 <NVIC_EncodePriority+0x32>
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052a4:	f04f 32ff 	mov.w	r2, #4294967295
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	43da      	mvns	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	401a      	ands	r2, r3
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052b8:	f04f 31ff 	mov.w	r1, #4294967295
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	fa01 f303 	lsl.w	r3, r1, r3
 80052c2:	43d9      	mvns	r1, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052c8:	4313      	orrs	r3, r2
         );
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3724      	adds	r7, #36	@ 0x24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff ff4c 	bl	800517c <__NVIC_SetPriorityGrouping>
}
 80052e4:	bf00      	nop
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	4603      	mov	r3, r0
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052fa:	f7ff ff63 	bl	80051c4 <__NVIC_GetPriorityGrouping>
 80052fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	6978      	ldr	r0, [r7, #20]
 8005306:	f7ff ffb3 	bl	8005270 <NVIC_EncodePriority>
 800530a:	4602      	mov	r2, r0
 800530c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005310:	4611      	mov	r1, r2
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff ff82 	bl	800521c <__NVIC_SetPriority>
}
 8005318:	bf00      	nop
 800531a:	3718      	adds	r7, #24
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800532a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff ff56 	bl	80051e0 <__NVIC_EnableIRQ>
}
 8005334:	bf00      	nop
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3b01      	subs	r3, #1
 8005348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800534c:	d301      	bcc.n	8005352 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800534e:	2301      	movs	r3, #1
 8005350:	e00d      	b.n	800536e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8005352:	4a0a      	ldr	r2, [pc, #40]	@ (800537c <HAL_SYSTICK_Config+0x40>)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3b01      	subs	r3, #1
 8005358:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800535a:	4b08      	ldr	r3, [pc, #32]	@ (800537c <HAL_SYSTICK_Config+0x40>)
 800535c:	2200      	movs	r2, #0
 800535e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8005360:	4b06      	ldr	r3, [pc, #24]	@ (800537c <HAL_SYSTICK_Config+0x40>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a05      	ldr	r2, [pc, #20]	@ (800537c <HAL_SYSTICK_Config+0x40>)
 8005366:	f043 0303 	orr.w	r3, r3, #3
 800536a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	e000e010 	.word	0xe000e010

08005380 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b04      	cmp	r3, #4
 800538c:	d844      	bhi.n	8005418 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800538e:	a201      	add	r2, pc, #4	@ (adr r2, 8005394 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005394:	080053b7 	.word	0x080053b7
 8005398:	080053d5 	.word	0x080053d5
 800539c:	080053f7 	.word	0x080053f7
 80053a0:	08005419 	.word	0x08005419
 80053a4:	080053a9 	.word	0x080053a9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80053a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005428 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005428 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80053ae:	f043 0304 	orr.w	r3, r3, #4
 80053b2:	6013      	str	r3, [r2, #0]
      break;
 80053b4:	e031      	b.n	800541a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80053b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005428 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005428 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80053bc:	f023 0304 	bic.w	r3, r3, #4
 80053c0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80053c2:	4b1a      	ldr	r3, [pc, #104]	@ (800542c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80053c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053c8:	4a18      	ldr	r2, [pc, #96]	@ (800542c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80053ca:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80053ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80053d2:	e022      	b.n	800541a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80053d4:	4b14      	ldr	r3, [pc, #80]	@ (8005428 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a13      	ldr	r2, [pc, #76]	@ (8005428 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80053da:	f023 0304 	bic.w	r3, r3, #4
 80053de:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80053e0:	4b12      	ldr	r3, [pc, #72]	@ (800542c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80053e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053e6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80053ea:	4a10      	ldr	r2, [pc, #64]	@ (800542c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80053ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80053f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80053f4:	e011      	b.n	800541a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80053f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005428 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a0b      	ldr	r2, [pc, #44]	@ (8005428 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80053fc:	f023 0304 	bic.w	r3, r3, #4
 8005400:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8005402:	4b0a      	ldr	r3, [pc, #40]	@ (800542c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005408:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800540c:	4a07      	ldr	r2, [pc, #28]	@ (800542c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800540e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005412:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005416:	e000      	b.n	800541a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8005418:	bf00      	nop
  }
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	e000e010 	.word	0xe000e010
 800542c:	46020c00 	.word	0x46020c00

08005430 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8005436:	4b19      	ldr	r3, [pc, #100]	@ (800549c <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8005442:	2304      	movs	r3, #4
 8005444:	607b      	str	r3, [r7, #4]
 8005446:	e021      	b.n	800548c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8005448:	4b15      	ldr	r3, [pc, #84]	@ (80054a0 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800544a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800544e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005452:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800545a:	d011      	beq.n	8005480 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005462:	d810      	bhi.n	8005486 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d004      	beq.n	8005474 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005470:	d003      	beq.n	800547a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8005472:	e008      	b.n	8005486 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005474:	2300      	movs	r3, #0
 8005476:	607b      	str	r3, [r7, #4]
        break;
 8005478:	e008      	b.n	800548c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800547a:	2301      	movs	r3, #1
 800547c:	607b      	str	r3, [r7, #4]
        break;
 800547e:	e005      	b.n	800548c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005480:	2302      	movs	r3, #2
 8005482:	607b      	str	r3, [r7, #4]
        break;
 8005484:	e002      	b.n	800548c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005486:	2300      	movs	r3, #0
 8005488:	607b      	str	r3, [r7, #4]
        break;
 800548a:	bf00      	nop
    }
  }
  return systick_source;
 800548c:	687b      	ldr	r3, [r7, #4]
}
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	e000e010 	.word	0xe000e010
 80054a0:	46020c00 	.word	0x46020c00

080054a4 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80054ac:	f7fd fc16 	bl	8002cdc <HAL_GetTick>
 80054b0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e0db      	b.n	8005674 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a6e      	ldr	r2, [pc, #440]	@ (800567c <HAL_DMA_Init+0x1d8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	f000 809f 	beq.w	8005606 <HAL_DMA_Init+0x162>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a6c      	ldr	r2, [pc, #432]	@ (8005680 <HAL_DMA_Init+0x1dc>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	f000 8099 	beq.w	8005606 <HAL_DMA_Init+0x162>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a6a      	ldr	r2, [pc, #424]	@ (8005684 <HAL_DMA_Init+0x1e0>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	f000 8093 	beq.w	8005606 <HAL_DMA_Init+0x162>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a68      	ldr	r2, [pc, #416]	@ (8005688 <HAL_DMA_Init+0x1e4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	f000 808d 	beq.w	8005606 <HAL_DMA_Init+0x162>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a66      	ldr	r2, [pc, #408]	@ (800568c <HAL_DMA_Init+0x1e8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	f000 8087 	beq.w	8005606 <HAL_DMA_Init+0x162>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a64      	ldr	r2, [pc, #400]	@ (8005690 <HAL_DMA_Init+0x1ec>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	f000 8081 	beq.w	8005606 <HAL_DMA_Init+0x162>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a62      	ldr	r2, [pc, #392]	@ (8005694 <HAL_DMA_Init+0x1f0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d07b      	beq.n	8005606 <HAL_DMA_Init+0x162>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a61      	ldr	r2, [pc, #388]	@ (8005698 <HAL_DMA_Init+0x1f4>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d076      	beq.n	8005606 <HAL_DMA_Init+0x162>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a5f      	ldr	r2, [pc, #380]	@ (800569c <HAL_DMA_Init+0x1f8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d071      	beq.n	8005606 <HAL_DMA_Init+0x162>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a5e      	ldr	r2, [pc, #376]	@ (80056a0 <HAL_DMA_Init+0x1fc>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d06c      	beq.n	8005606 <HAL_DMA_Init+0x162>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a5c      	ldr	r2, [pc, #368]	@ (80056a4 <HAL_DMA_Init+0x200>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d067      	beq.n	8005606 <HAL_DMA_Init+0x162>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a5b      	ldr	r2, [pc, #364]	@ (80056a8 <HAL_DMA_Init+0x204>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d062      	beq.n	8005606 <HAL_DMA_Init+0x162>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a59      	ldr	r2, [pc, #356]	@ (80056ac <HAL_DMA_Init+0x208>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d05d      	beq.n	8005606 <HAL_DMA_Init+0x162>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a58      	ldr	r2, [pc, #352]	@ (80056b0 <HAL_DMA_Init+0x20c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d058      	beq.n	8005606 <HAL_DMA_Init+0x162>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a56      	ldr	r2, [pc, #344]	@ (80056b4 <HAL_DMA_Init+0x210>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d053      	beq.n	8005606 <HAL_DMA_Init+0x162>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a55      	ldr	r2, [pc, #340]	@ (80056b8 <HAL_DMA_Init+0x214>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d04e      	beq.n	8005606 <HAL_DMA_Init+0x162>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a53      	ldr	r2, [pc, #332]	@ (80056bc <HAL_DMA_Init+0x218>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d049      	beq.n	8005606 <HAL_DMA_Init+0x162>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a52      	ldr	r2, [pc, #328]	@ (80056c0 <HAL_DMA_Init+0x21c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d044      	beq.n	8005606 <HAL_DMA_Init+0x162>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a50      	ldr	r2, [pc, #320]	@ (80056c4 <HAL_DMA_Init+0x220>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d03f      	beq.n	8005606 <HAL_DMA_Init+0x162>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a4f      	ldr	r2, [pc, #316]	@ (80056c8 <HAL_DMA_Init+0x224>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d03a      	beq.n	8005606 <HAL_DMA_Init+0x162>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a4d      	ldr	r2, [pc, #308]	@ (80056cc <HAL_DMA_Init+0x228>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d035      	beq.n	8005606 <HAL_DMA_Init+0x162>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a4c      	ldr	r2, [pc, #304]	@ (80056d0 <HAL_DMA_Init+0x22c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d030      	beq.n	8005606 <HAL_DMA_Init+0x162>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a4a      	ldr	r2, [pc, #296]	@ (80056d4 <HAL_DMA_Init+0x230>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d02b      	beq.n	8005606 <HAL_DMA_Init+0x162>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a49      	ldr	r2, [pc, #292]	@ (80056d8 <HAL_DMA_Init+0x234>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d026      	beq.n	8005606 <HAL_DMA_Init+0x162>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a47      	ldr	r2, [pc, #284]	@ (80056dc <HAL_DMA_Init+0x238>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d021      	beq.n	8005606 <HAL_DMA_Init+0x162>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a46      	ldr	r2, [pc, #280]	@ (80056e0 <HAL_DMA_Init+0x23c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d01c      	beq.n	8005606 <HAL_DMA_Init+0x162>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a44      	ldr	r2, [pc, #272]	@ (80056e4 <HAL_DMA_Init+0x240>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d017      	beq.n	8005606 <HAL_DMA_Init+0x162>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a43      	ldr	r2, [pc, #268]	@ (80056e8 <HAL_DMA_Init+0x244>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d012      	beq.n	8005606 <HAL_DMA_Init+0x162>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a41      	ldr	r2, [pc, #260]	@ (80056ec <HAL_DMA_Init+0x248>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d00d      	beq.n	8005606 <HAL_DMA_Init+0x162>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a40      	ldr	r2, [pc, #256]	@ (80056f0 <HAL_DMA_Init+0x24c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d008      	beq.n	8005606 <HAL_DMA_Init+0x162>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a3e      	ldr	r2, [pc, #248]	@ (80056f4 <HAL_DMA_Init+0x250>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d003      	beq.n	8005606 <HAL_DMA_Init+0x162>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a3d      	ldr	r2, [pc, #244]	@ (80056f8 <HAL_DMA_Init+0x254>)
 8005604:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2202      	movs	r2, #2
 8005612:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695a      	ldr	r2, [r3, #20]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0206 	orr.w	r2, r2, #6
 8005624:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005626:	e00f      	b.n	8005648 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005628:	f7fd fb58 	bl	8002cdc <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b05      	cmp	r3, #5
 8005634:	d908      	bls.n	8005648 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2210      	movs	r2, #16
 800563a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2203      	movs	r2, #3
 8005640:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e015      	b.n	8005674 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e8      	bne.n	8005628 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fb26 	bl	8005ca8 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40020050 	.word	0x40020050
 8005680:	50020050 	.word	0x50020050
 8005684:	400200d0 	.word	0x400200d0
 8005688:	500200d0 	.word	0x500200d0
 800568c:	40020150 	.word	0x40020150
 8005690:	50020150 	.word	0x50020150
 8005694:	400201d0 	.word	0x400201d0
 8005698:	500201d0 	.word	0x500201d0
 800569c:	40020250 	.word	0x40020250
 80056a0:	50020250 	.word	0x50020250
 80056a4:	400202d0 	.word	0x400202d0
 80056a8:	500202d0 	.word	0x500202d0
 80056ac:	40020350 	.word	0x40020350
 80056b0:	50020350 	.word	0x50020350
 80056b4:	400203d0 	.word	0x400203d0
 80056b8:	500203d0 	.word	0x500203d0
 80056bc:	40020450 	.word	0x40020450
 80056c0:	50020450 	.word	0x50020450
 80056c4:	400204d0 	.word	0x400204d0
 80056c8:	500204d0 	.word	0x500204d0
 80056cc:	40020550 	.word	0x40020550
 80056d0:	50020550 	.word	0x50020550
 80056d4:	400205d0 	.word	0x400205d0
 80056d8:	500205d0 	.word	0x500205d0
 80056dc:	40020650 	.word	0x40020650
 80056e0:	50020650 	.word	0x50020650
 80056e4:	400206d0 	.word	0x400206d0
 80056e8:	500206d0 	.word	0x500206d0
 80056ec:	40020750 	.word	0x40020750
 80056f0:	50020750 	.word	0x50020750
 80056f4:	400207d0 	.word	0x400207d0
 80056f8:	500207d0 	.word	0x500207d0

080056fc <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
 8005708:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e04f      	b.n	80057b4 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_DMA_Start_IT+0x26>
 800571e:	2302      	movs	r3, #2
 8005720:	e048      	b.n	80057b4 <HAL_DMA_Start_IT+0xb8>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b01      	cmp	r3, #1
 8005734:	d136      	bne.n	80057a4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2202      	movs	r2, #2
 800573a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 fa86 	bl	8005c5c <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695a      	ldr	r2, [r3, #20]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800575e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005764:	2b00      	cmp	r3, #0
 8005766:	d007      	beq.n	8005778 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695a      	ldr	r2, [r3, #20]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005776:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800577c:	2b00      	cmp	r3, #0
 800577e:	d007      	beq.n	8005790 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695a      	ldr	r2, [r3, #20]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800578e:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695a      	ldr	r2, [r3, #20]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0201 	orr.w	r2, r2, #1
 800579e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	e007      	b.n	80057b4 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2240      	movs	r2, #64	@ 0x40
 80057a8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80057c4:	f7fd fa8a 	bl	8002cdc <HAL_GetTick>
 80057c8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e06b      	b.n	80058ac <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d008      	beq.n	80057f2 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2220      	movs	r2, #32
 80057e4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e05c      	b.n	80058ac <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695a      	ldr	r2, [r3, #20]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f042 0204 	orr.w	r2, r2, #4
 8005800:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2205      	movs	r2, #5
 8005806:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800580a:	e020      	b.n	800584e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800580c:	f7fd fa66 	bl	8002cdc <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b05      	cmp	r3, #5
 8005818:	d919      	bls.n	800584e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800581e:	f043 0210 	orr.w	r2, r3, #16
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2203      	movs	r2, #3
 800582a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800583e:	2201      	movs	r2, #1
 8005840:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e02e      	b.n	80058ac <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0d7      	beq.n	800580c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695a      	ldr	r2, [r3, #20]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0202 	orr.w	r2, r2, #2
 800586a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2204      	movs	r2, #4
 8005870:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800587c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800588a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005896:	2201      	movs	r2, #1
 8005898:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2200      	movs	r2, #0
 80058a0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e019      	b.n	80058fa <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d004      	beq.n	80058dc <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2220      	movs	r2, #32
 80058d6:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e00e      	b.n	80058fa <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2204      	movs	r2, #4
 80058e0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6812      	ldr	r2, [r2, #0]
 80058ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80058f2:	f043 0304 	orr.w	r3, r3, #4
 80058f6:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b086      	sub	sp, #24
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005916:	f023 030f 	bic.w	r3, r3, #15
 800591a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005924:	3b50      	subs	r3, #80	@ 0x50
 8005926:	09db      	lsrs	r3, r3, #7
 8005928:	f003 031f 	and.w	r3, r3, #31
 800592c:	2201      	movs	r2, #1
 800592e:	fa02 f303 	lsl.w	r3, r2, r3
 8005932:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4013      	ands	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 813b 	beq.w	8005bbc <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005950:	2b00      	cmp	r3, #0
 8005952:	d011      	beq.n	8005978 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800596a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005970:	f043 0201 	orr.w	r2, r3, #1
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005982:	2b00      	cmp	r3, #0
 8005984:	d011      	beq.n	80059aa <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00a      	beq.n	80059aa <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800599c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a2:	f043 0202 	orr.w	r2, r3, #2
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d011      	beq.n	80059dc <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80059ce:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d4:	f043 0204 	orr.w	r2, r3, #4
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d011      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00a      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005a00:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a06:	f043 0208 	orr.w	r2, r3, #8
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d013      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00c      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a32:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d04c      	beq.n	8005aec <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d045      	beq.n	8005aec <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005a68:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d12e      	bne.n	8005ad4 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695a      	ldr	r2, [r3, #20]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a84:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695a      	ldr	r2, [r3, #20]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f042 0202 	orr.w	r2, r2, #2
 8005a94:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aae:	2201      	movs	r2, #1
 8005ab0:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d07a      	beq.n	8005bc0 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	4798      	blx	r3
        }

        return;
 8005ad2:	e075      	b.n	8005bc0 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2205      	movs	r2, #5
 8005ad8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d039      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d032      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d012      	beq.n	8005b3a <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d116      	bne.n	8005b4c <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d111      	bne.n	8005b4c <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b34:	2201      	movs	r2, #1
 8005b36:	731a      	strb	r2, [r3, #12]
 8005b38:	e008      	b.n	8005b4c <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d103      	bne.n	8005b4c <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005b54:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d025      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695a      	ldr	r2, [r3, #20]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f042 0202 	orr.w	r2, r2, #2
 8005b84:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d007      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	4798      	blx	r3
 8005bba:	e002      	b.n	8005bc2 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005bbc:	bf00      	nop
 8005bbe:	e000      	b.n	8005bc2 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8005bc0:	bf00      	nop
    }
  }
}
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005bd6:	b2db      	uxtb	r3, r3
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e02b      	b.n	8005c50 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005c00:	f023 030f 	bic.w	r3, r3, #15
 8005c04:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c0e:	3b50      	subs	r3, #80	@ 0x50
 8005c10:	09db      	lsrs	r3, r3, #7
 8005c12:	f003 031f 	and.w	r3, r3, #31
 8005c16:	2201      	movs	r2, #1
 8005c18:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1c:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	f003 0310 	and.w	r3, r3, #16
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d012      	beq.n	8005c4e <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	f003 0311 	and.w	r3, r3, #17
 8005c2e:	2b11      	cmp	r3, #17
 8005c30:	d106      	bne.n	8005c40 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	605a      	str	r2, [r3, #4]
 8005c3e:	e006      	b.n	8005c4e <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	43db      	mvns	r3, r3
 8005c48:	401a      	ands	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c70:	0c1b      	lsrs	r3, r3, #16
 8005c72:	041b      	lsls	r3, r3, #16
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	b291      	uxth	r1, r2
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	6812      	ldr	r2, [r2, #0]
 8005c7c:	430b      	orrs	r3, r1
 8005c7e:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005c88:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005c9a:	bf00      	nop
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
	...

08005ca8 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695a      	ldr	r2, [r3, #20]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a53      	ldr	r2, [pc, #332]	@ (8005e34 <DMA_Init+0x18c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	f000 80a0 	beq.w	8005e2e <DMA_Init+0x186>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a51      	ldr	r2, [pc, #324]	@ (8005e38 <DMA_Init+0x190>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	f000 809a 	beq.w	8005e2e <DMA_Init+0x186>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a4f      	ldr	r2, [pc, #316]	@ (8005e3c <DMA_Init+0x194>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	f000 8094 	beq.w	8005e2e <DMA_Init+0x186>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a4d      	ldr	r2, [pc, #308]	@ (8005e40 <DMA_Init+0x198>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	f000 808e 	beq.w	8005e2e <DMA_Init+0x186>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a4b      	ldr	r2, [pc, #300]	@ (8005e44 <DMA_Init+0x19c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	f000 8088 	beq.w	8005e2e <DMA_Init+0x186>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a49      	ldr	r2, [pc, #292]	@ (8005e48 <DMA_Init+0x1a0>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	f000 8082 	beq.w	8005e2e <DMA_Init+0x186>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a47      	ldr	r2, [pc, #284]	@ (8005e4c <DMA_Init+0x1a4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d07c      	beq.n	8005e2e <DMA_Init+0x186>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a45      	ldr	r2, [pc, #276]	@ (8005e50 <DMA_Init+0x1a8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d077      	beq.n	8005e2e <DMA_Init+0x186>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a44      	ldr	r2, [pc, #272]	@ (8005e54 <DMA_Init+0x1ac>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d072      	beq.n	8005e2e <DMA_Init+0x186>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a42      	ldr	r2, [pc, #264]	@ (8005e58 <DMA_Init+0x1b0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d06d      	beq.n	8005e2e <DMA_Init+0x186>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a41      	ldr	r2, [pc, #260]	@ (8005e5c <DMA_Init+0x1b4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d068      	beq.n	8005e2e <DMA_Init+0x186>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a3f      	ldr	r2, [pc, #252]	@ (8005e60 <DMA_Init+0x1b8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d063      	beq.n	8005e2e <DMA_Init+0x186>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a3e      	ldr	r2, [pc, #248]	@ (8005e64 <DMA_Init+0x1bc>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d05e      	beq.n	8005e2e <DMA_Init+0x186>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a3c      	ldr	r2, [pc, #240]	@ (8005e68 <DMA_Init+0x1c0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d059      	beq.n	8005e2e <DMA_Init+0x186>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a3b      	ldr	r2, [pc, #236]	@ (8005e6c <DMA_Init+0x1c4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d054      	beq.n	8005e2e <DMA_Init+0x186>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a39      	ldr	r2, [pc, #228]	@ (8005e70 <DMA_Init+0x1c8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d04f      	beq.n	8005e2e <DMA_Init+0x186>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a38      	ldr	r2, [pc, #224]	@ (8005e74 <DMA_Init+0x1cc>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d04a      	beq.n	8005e2e <DMA_Init+0x186>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a36      	ldr	r2, [pc, #216]	@ (8005e78 <DMA_Init+0x1d0>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d045      	beq.n	8005e2e <DMA_Init+0x186>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a35      	ldr	r2, [pc, #212]	@ (8005e7c <DMA_Init+0x1d4>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d040      	beq.n	8005e2e <DMA_Init+0x186>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a33      	ldr	r2, [pc, #204]	@ (8005e80 <DMA_Init+0x1d8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d03b      	beq.n	8005e2e <DMA_Init+0x186>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a32      	ldr	r2, [pc, #200]	@ (8005e84 <DMA_Init+0x1dc>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d036      	beq.n	8005e2e <DMA_Init+0x186>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a30      	ldr	r2, [pc, #192]	@ (8005e88 <DMA_Init+0x1e0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d031      	beq.n	8005e2e <DMA_Init+0x186>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a2f      	ldr	r2, [pc, #188]	@ (8005e8c <DMA_Init+0x1e4>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d02c      	beq.n	8005e2e <DMA_Init+0x186>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a2d      	ldr	r2, [pc, #180]	@ (8005e90 <DMA_Init+0x1e8>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d027      	beq.n	8005e2e <DMA_Init+0x186>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a2c      	ldr	r2, [pc, #176]	@ (8005e94 <DMA_Init+0x1ec>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d022      	beq.n	8005e2e <DMA_Init+0x186>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a2a      	ldr	r2, [pc, #168]	@ (8005e98 <DMA_Init+0x1f0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d01d      	beq.n	8005e2e <DMA_Init+0x186>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a29      	ldr	r2, [pc, #164]	@ (8005e9c <DMA_Init+0x1f4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d018      	beq.n	8005e2e <DMA_Init+0x186>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a27      	ldr	r2, [pc, #156]	@ (8005ea0 <DMA_Init+0x1f8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d013      	beq.n	8005e2e <DMA_Init+0x186>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a26      	ldr	r2, [pc, #152]	@ (8005ea4 <DMA_Init+0x1fc>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00e      	beq.n	8005e2e <DMA_Init+0x186>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a24      	ldr	r2, [pc, #144]	@ (8005ea8 <DMA_Init+0x200>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d009      	beq.n	8005e2e <DMA_Init+0x186>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a23      	ldr	r2, [pc, #140]	@ (8005eac <DMA_Init+0x204>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d004      	beq.n	8005e2e <DMA_Init+0x186>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a21      	ldr	r2, [pc, #132]	@ (8005eb0 <DMA_Init+0x208>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d142      	bne.n	8005eb4 <DMA_Init+0x20c>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e041      	b.n	8005eb6 <DMA_Init+0x20e>
 8005e32:	bf00      	nop
 8005e34:	40020050 	.word	0x40020050
 8005e38:	50020050 	.word	0x50020050
 8005e3c:	400200d0 	.word	0x400200d0
 8005e40:	500200d0 	.word	0x500200d0
 8005e44:	40020150 	.word	0x40020150
 8005e48:	50020150 	.word	0x50020150
 8005e4c:	400201d0 	.word	0x400201d0
 8005e50:	500201d0 	.word	0x500201d0
 8005e54:	40020250 	.word	0x40020250
 8005e58:	50020250 	.word	0x50020250
 8005e5c:	400202d0 	.word	0x400202d0
 8005e60:	500202d0 	.word	0x500202d0
 8005e64:	40020350 	.word	0x40020350
 8005e68:	50020350 	.word	0x50020350
 8005e6c:	400203d0 	.word	0x400203d0
 8005e70:	500203d0 	.word	0x500203d0
 8005e74:	40020450 	.word	0x40020450
 8005e78:	50020450 	.word	0x50020450
 8005e7c:	400204d0 	.word	0x400204d0
 8005e80:	500204d0 	.word	0x500204d0
 8005e84:	40020550 	.word	0x40020550
 8005e88:	50020550 	.word	0x50020550
 8005e8c:	400205d0 	.word	0x400205d0
 8005e90:	500205d0 	.word	0x500205d0
 8005e94:	40020650 	.word	0x40020650
 8005e98:	50020650 	.word	0x50020650
 8005e9c:	400206d0 	.word	0x400206d0
 8005ea0:	500206d0 	.word	0x500206d0
 8005ea4:	40020750 	.word	0x40020750
 8005ea8:	50020750 	.word	0x50020750
 8005eac:	400207d0 	.word	0x400207d0
 8005eb0:	500207d0 	.word	0x500207d0
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d012      	beq.n	8005ee0 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	051b      	lsls	r3, r3, #20
 8005ec6:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005eca:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	011b      	lsls	r3, r3, #4
 8005ed4:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005ed8:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee6:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f00:	431a      	orrs	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f12:	f040 80b0 	bne.w	8006076 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a82      	ldr	r2, [pc, #520]	@ (8006124 <DMA_Init+0x47c>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	f000 80a0 	beq.w	8006062 <DMA_Init+0x3ba>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a80      	ldr	r2, [pc, #512]	@ (8006128 <DMA_Init+0x480>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	f000 809a 	beq.w	8006062 <DMA_Init+0x3ba>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a7e      	ldr	r2, [pc, #504]	@ (800612c <DMA_Init+0x484>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	f000 8094 	beq.w	8006062 <DMA_Init+0x3ba>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a7c      	ldr	r2, [pc, #496]	@ (8006130 <DMA_Init+0x488>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	f000 808e 	beq.w	8006062 <DMA_Init+0x3ba>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a7a      	ldr	r2, [pc, #488]	@ (8006134 <DMA_Init+0x48c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	f000 8088 	beq.w	8006062 <DMA_Init+0x3ba>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a78      	ldr	r2, [pc, #480]	@ (8006138 <DMA_Init+0x490>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	f000 8082 	beq.w	8006062 <DMA_Init+0x3ba>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a76      	ldr	r2, [pc, #472]	@ (800613c <DMA_Init+0x494>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d07c      	beq.n	8006062 <DMA_Init+0x3ba>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a74      	ldr	r2, [pc, #464]	@ (8006140 <DMA_Init+0x498>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d077      	beq.n	8006062 <DMA_Init+0x3ba>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a73      	ldr	r2, [pc, #460]	@ (8006144 <DMA_Init+0x49c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d072      	beq.n	8006062 <DMA_Init+0x3ba>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a71      	ldr	r2, [pc, #452]	@ (8006148 <DMA_Init+0x4a0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d06d      	beq.n	8006062 <DMA_Init+0x3ba>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a70      	ldr	r2, [pc, #448]	@ (800614c <DMA_Init+0x4a4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d068      	beq.n	8006062 <DMA_Init+0x3ba>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a6e      	ldr	r2, [pc, #440]	@ (8006150 <DMA_Init+0x4a8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d063      	beq.n	8006062 <DMA_Init+0x3ba>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a6d      	ldr	r2, [pc, #436]	@ (8006154 <DMA_Init+0x4ac>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d05e      	beq.n	8006062 <DMA_Init+0x3ba>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a6b      	ldr	r2, [pc, #428]	@ (8006158 <DMA_Init+0x4b0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d059      	beq.n	8006062 <DMA_Init+0x3ba>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a6a      	ldr	r2, [pc, #424]	@ (800615c <DMA_Init+0x4b4>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d054      	beq.n	8006062 <DMA_Init+0x3ba>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a68      	ldr	r2, [pc, #416]	@ (8006160 <DMA_Init+0x4b8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d04f      	beq.n	8006062 <DMA_Init+0x3ba>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a67      	ldr	r2, [pc, #412]	@ (8006164 <DMA_Init+0x4bc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d04a      	beq.n	8006062 <DMA_Init+0x3ba>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a65      	ldr	r2, [pc, #404]	@ (8006168 <DMA_Init+0x4c0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d045      	beq.n	8006062 <DMA_Init+0x3ba>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a64      	ldr	r2, [pc, #400]	@ (800616c <DMA_Init+0x4c4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d040      	beq.n	8006062 <DMA_Init+0x3ba>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a62      	ldr	r2, [pc, #392]	@ (8006170 <DMA_Init+0x4c8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d03b      	beq.n	8006062 <DMA_Init+0x3ba>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a61      	ldr	r2, [pc, #388]	@ (8006174 <DMA_Init+0x4cc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d036      	beq.n	8006062 <DMA_Init+0x3ba>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a5f      	ldr	r2, [pc, #380]	@ (8006178 <DMA_Init+0x4d0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d031      	beq.n	8006062 <DMA_Init+0x3ba>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a5e      	ldr	r2, [pc, #376]	@ (800617c <DMA_Init+0x4d4>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d02c      	beq.n	8006062 <DMA_Init+0x3ba>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a5c      	ldr	r2, [pc, #368]	@ (8006180 <DMA_Init+0x4d8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d027      	beq.n	8006062 <DMA_Init+0x3ba>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a5b      	ldr	r2, [pc, #364]	@ (8006184 <DMA_Init+0x4dc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d022      	beq.n	8006062 <DMA_Init+0x3ba>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a59      	ldr	r2, [pc, #356]	@ (8006188 <DMA_Init+0x4e0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d01d      	beq.n	8006062 <DMA_Init+0x3ba>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a58      	ldr	r2, [pc, #352]	@ (800618c <DMA_Init+0x4e4>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d018      	beq.n	8006062 <DMA_Init+0x3ba>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a56      	ldr	r2, [pc, #344]	@ (8006190 <DMA_Init+0x4e8>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d013      	beq.n	8006062 <DMA_Init+0x3ba>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a55      	ldr	r2, [pc, #340]	@ (8006194 <DMA_Init+0x4ec>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d00e      	beq.n	8006062 <DMA_Init+0x3ba>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a53      	ldr	r2, [pc, #332]	@ (8006198 <DMA_Init+0x4f0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d009      	beq.n	8006062 <DMA_Init+0x3ba>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a52      	ldr	r2, [pc, #328]	@ (800619c <DMA_Init+0x4f4>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d004      	beq.n	8006062 <DMA_Init+0x3ba>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a50      	ldr	r2, [pc, #320]	@ (80061a0 <DMA_Init+0x4f8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d101      	bne.n	8006066 <DMA_Init+0x3be>
 8006062:	2301      	movs	r3, #1
 8006064:	e000      	b.n	8006068 <DMA_Init+0x3c0>
 8006066:	2300      	movs	r3, #0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00d      	beq.n	8006088 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	e008      	b.n	8006088 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800607e:	d103      	bne.n	8006088 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006086:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800608e:	4b45      	ldr	r3, [pc, #276]	@ (80061a4 <DMA_Init+0x4fc>)
 8006090:	4013      	ands	r3, r2
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	6812      	ldr	r2, [r2, #0]
 8006096:	68f9      	ldr	r1, [r7, #12]
 8006098:	430b      	orrs	r3, r1
 800609a:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2200      	movs	r2, #0
 80060a2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a36      	ldr	r2, [pc, #216]	@ (8006184 <DMA_Init+0x4dc>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d022      	beq.n	80060f4 <DMA_Init+0x44c>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a35      	ldr	r2, [pc, #212]	@ (8006188 <DMA_Init+0x4e0>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d01d      	beq.n	80060f4 <DMA_Init+0x44c>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a33      	ldr	r2, [pc, #204]	@ (800618c <DMA_Init+0x4e4>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d018      	beq.n	80060f4 <DMA_Init+0x44c>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a32      	ldr	r2, [pc, #200]	@ (8006190 <DMA_Init+0x4e8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d013      	beq.n	80060f4 <DMA_Init+0x44c>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a30      	ldr	r2, [pc, #192]	@ (8006194 <DMA_Init+0x4ec>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00e      	beq.n	80060f4 <DMA_Init+0x44c>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a2f      	ldr	r2, [pc, #188]	@ (8006198 <DMA_Init+0x4f0>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d009      	beq.n	80060f4 <DMA_Init+0x44c>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a2d      	ldr	r2, [pc, #180]	@ (800619c <DMA_Init+0x4f4>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d004      	beq.n	80060f4 <DMA_Init+0x44c>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a2c      	ldr	r2, [pc, #176]	@ (80061a0 <DMA_Init+0x4f8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d101      	bne.n	80060f8 <DMA_Init+0x450>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <DMA_Init+0x452>
 80060f8:	2300      	movs	r3, #0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d007      	beq.n	800610e <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2200      	movs	r2, #0
 8006104:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2200      	movs	r2, #0
 800610c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2200      	movs	r2, #0
 8006114:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006116:	bf00      	nop
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	40020050 	.word	0x40020050
 8006128:	50020050 	.word	0x50020050
 800612c:	400200d0 	.word	0x400200d0
 8006130:	500200d0 	.word	0x500200d0
 8006134:	40020150 	.word	0x40020150
 8006138:	50020150 	.word	0x50020150
 800613c:	400201d0 	.word	0x400201d0
 8006140:	500201d0 	.word	0x500201d0
 8006144:	40020250 	.word	0x40020250
 8006148:	50020250 	.word	0x50020250
 800614c:	400202d0 	.word	0x400202d0
 8006150:	500202d0 	.word	0x500202d0
 8006154:	40020350 	.word	0x40020350
 8006158:	50020350 	.word	0x50020350
 800615c:	400203d0 	.word	0x400203d0
 8006160:	500203d0 	.word	0x500203d0
 8006164:	40020450 	.word	0x40020450
 8006168:	50020450 	.word	0x50020450
 800616c:	400204d0 	.word	0x400204d0
 8006170:	500204d0 	.word	0x500204d0
 8006174:	40020550 	.word	0x40020550
 8006178:	50020550 	.word	0x50020550
 800617c:	400205d0 	.word	0x400205d0
 8006180:	500205d0 	.word	0x500205d0
 8006184:	40020650 	.word	0x40020650
 8006188:	50020650 	.word	0x50020650
 800618c:	400206d0 	.word	0x400206d0
 8006190:	500206d0 	.word	0x500206d0
 8006194:	40020750 	.word	0x40020750
 8006198:	50020750 	.word	0x50020750
 800619c:	400207d0 	.word	0x400207d0
 80061a0:	500207d0 	.word	0x500207d0
 80061a4:	3c803180 	.word	0x3c803180

080061a8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e053      	b.n	8006262 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d106      	bne.n	80061d4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7fb fd60 	bl	8001c94 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80061e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6851      	ldr	r1, [r2, #4]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	69d2      	ldr	r2, [r2, #28]
 80061f2:	4311      	orrs	r1, r2
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	6812      	ldr	r2, [r2, #0]
 80061f8:	430b      	orrs	r3, r1
 80061fa:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006202:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8006206:	f023 0301 	bic.w	r3, r3, #1
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6891      	ldr	r1, [r2, #8]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6992      	ldr	r2, [r2, #24]
 8006212:	4311      	orrs	r1, r2
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6812      	ldr	r2, [r2, #0]
 8006218:	430b      	orrs	r3, r1
 800621a:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006222:	0c1b      	lsrs	r3, r3, #16
 8006224:	041b      	lsls	r3, r3, #16
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	68d1      	ldr	r1, [r2, #12]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6812      	ldr	r2, [r2, #0]
 800622e:	430b      	orrs	r3, r1
 8006230:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006238:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	051a      	lsls	r2, r3, #20
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	055b      	lsls	r3, r3, #21
 8006248:	431a      	orrs	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_DMA2D_ConfigLayer+0x24>
 800628c:	2302      	movs	r3, #2
 800628e:	e092      	b.n	80063b6 <HAL_DMA2D_ConfigLayer+0x14a>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	4613      	mov	r3, r2
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	1a9b      	subs	r3, r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	3328      	adds	r3, #40	@ 0x28
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	4413      	add	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	041b      	lsls	r3, r3, #16
 80062bc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80062c4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80062d0:	4b3c      	ldr	r3, [pc, #240]	@ (80063c4 <HAL_DMA2D_ConfigLayer+0x158>)
 80062d2:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2b0a      	cmp	r3, #10
 80062da:	d003      	beq.n	80062e4 <HAL_DMA2D_ConfigLayer+0x78>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	2b09      	cmp	r3, #9
 80062e2:	d107      	bne.n	80062f4 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	613b      	str	r3, [r7, #16]
 80062f2:	e005      	b.n	8006300 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	061b      	lsls	r3, r3, #24
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d120      	bne.n	8006348 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	43db      	mvns	r3, r3
 8006310:	ea02 0103 	and.w	r1, r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	430a      	orrs	r2, r1
 800631c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	6812      	ldr	r2, [r2, #0]
 8006326:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	2b0a      	cmp	r3, #10
 800632e:	d003      	beq.n	8006338 <HAL_DMA2D_ConfigLayer+0xcc>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	2b09      	cmp	r3, #9
 8006336:	d135      	bne.n	80063a4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006344:	629a      	str	r2, [r3, #40]	@ 0x28
 8006346:	e02d      	b.n	80063a4 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b0b      	cmp	r3, #11
 800634e:	d109      	bne.n	8006364 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	049b      	lsls	r3, r3, #18
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	4313      	orrs	r3, r2
 800635a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8006362:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	69da      	ldr	r2, [r3, #28]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	43db      	mvns	r3, r3
 800636e:	ea02 0103 	and.w	r1, r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	430a      	orrs	r2, r1
 800637a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	6812      	ldr	r2, [r2, #0]
 8006384:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2b0a      	cmp	r3, #10
 800638c:	d003      	beq.n	8006396 <HAL_DMA2D_ConfigLayer+0x12a>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	2b09      	cmp	r3, #9
 8006394:	d106      	bne.n	80063a4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80063a2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	ff33000f 	.word	0xff33000f

080063c8 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80063d0:	f7fc fc84 	bl	8002cdc <HAL_GetTick>
 80063d4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e0db      	b.n	8006598 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a6e      	ldr	r2, [pc, #440]	@ (80065a0 <HAL_DMAEx_List_Init+0x1d8>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	f000 809f 	beq.w	800652a <HAL_DMAEx_List_Init+0x162>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a6c      	ldr	r2, [pc, #432]	@ (80065a4 <HAL_DMAEx_List_Init+0x1dc>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	f000 8099 	beq.w	800652a <HAL_DMAEx_List_Init+0x162>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a6a      	ldr	r2, [pc, #424]	@ (80065a8 <HAL_DMAEx_List_Init+0x1e0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	f000 8093 	beq.w	800652a <HAL_DMAEx_List_Init+0x162>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a68      	ldr	r2, [pc, #416]	@ (80065ac <HAL_DMAEx_List_Init+0x1e4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	f000 808d 	beq.w	800652a <HAL_DMAEx_List_Init+0x162>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a66      	ldr	r2, [pc, #408]	@ (80065b0 <HAL_DMAEx_List_Init+0x1e8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	f000 8087 	beq.w	800652a <HAL_DMAEx_List_Init+0x162>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a64      	ldr	r2, [pc, #400]	@ (80065b4 <HAL_DMAEx_List_Init+0x1ec>)
 8006422:	4293      	cmp	r3, r2
 8006424:	f000 8081 	beq.w	800652a <HAL_DMAEx_List_Init+0x162>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a62      	ldr	r2, [pc, #392]	@ (80065b8 <HAL_DMAEx_List_Init+0x1f0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d07b      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a61      	ldr	r2, [pc, #388]	@ (80065bc <HAL_DMAEx_List_Init+0x1f4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d076      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a5f      	ldr	r2, [pc, #380]	@ (80065c0 <HAL_DMAEx_List_Init+0x1f8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d071      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a5e      	ldr	r2, [pc, #376]	@ (80065c4 <HAL_DMAEx_List_Init+0x1fc>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d06c      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a5c      	ldr	r2, [pc, #368]	@ (80065c8 <HAL_DMAEx_List_Init+0x200>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d067      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a5b      	ldr	r2, [pc, #364]	@ (80065cc <HAL_DMAEx_List_Init+0x204>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d062      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a59      	ldr	r2, [pc, #356]	@ (80065d0 <HAL_DMAEx_List_Init+0x208>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d05d      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a58      	ldr	r2, [pc, #352]	@ (80065d4 <HAL_DMAEx_List_Init+0x20c>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d058      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a56      	ldr	r2, [pc, #344]	@ (80065d8 <HAL_DMAEx_List_Init+0x210>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d053      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a55      	ldr	r2, [pc, #340]	@ (80065dc <HAL_DMAEx_List_Init+0x214>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d04e      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a53      	ldr	r2, [pc, #332]	@ (80065e0 <HAL_DMAEx_List_Init+0x218>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d049      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a52      	ldr	r2, [pc, #328]	@ (80065e4 <HAL_DMAEx_List_Init+0x21c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d044      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a50      	ldr	r2, [pc, #320]	@ (80065e8 <HAL_DMAEx_List_Init+0x220>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d03f      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a4f      	ldr	r2, [pc, #316]	@ (80065ec <HAL_DMAEx_List_Init+0x224>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d03a      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a4d      	ldr	r2, [pc, #308]	@ (80065f0 <HAL_DMAEx_List_Init+0x228>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d035      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a4c      	ldr	r2, [pc, #304]	@ (80065f4 <HAL_DMAEx_List_Init+0x22c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d030      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a4a      	ldr	r2, [pc, #296]	@ (80065f8 <HAL_DMAEx_List_Init+0x230>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d02b      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a49      	ldr	r2, [pc, #292]	@ (80065fc <HAL_DMAEx_List_Init+0x234>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d026      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a47      	ldr	r2, [pc, #284]	@ (8006600 <HAL_DMAEx_List_Init+0x238>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d021      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a46      	ldr	r2, [pc, #280]	@ (8006604 <HAL_DMAEx_List_Init+0x23c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d01c      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a44      	ldr	r2, [pc, #272]	@ (8006608 <HAL_DMAEx_List_Init+0x240>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d017      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a43      	ldr	r2, [pc, #268]	@ (800660c <HAL_DMAEx_List_Init+0x244>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d012      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a41      	ldr	r2, [pc, #260]	@ (8006610 <HAL_DMAEx_List_Init+0x248>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00d      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a40      	ldr	r2, [pc, #256]	@ (8006614 <HAL_DMAEx_List_Init+0x24c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d008      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a3e      	ldr	r2, [pc, #248]	@ (8006618 <HAL_DMAEx_List_Init+0x250>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d003      	beq.n	800652a <HAL_DMAEx_List_Init+0x162>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a3d      	ldr	r2, [pc, #244]	@ (800661c <HAL_DMAEx_List_Init+0x254>)
 8006528:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2202      	movs	r2, #2
 8006536:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	695a      	ldr	r2, [r3, #20]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f042 0206 	orr.w	r2, r2, #6
 8006548:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800654a:	e00f      	b.n	800656c <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800654c:	f7fc fbc6 	bl	8002cdc <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b05      	cmp	r3, #5
 8006558:	d908      	bls.n	800656c <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2210      	movs	r2, #16
 800655e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2203      	movs	r2, #3
 8006564:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e015      	b.n	8006598 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1e8      	bne.n	800654c <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fae0 	bl	8006b40 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	40020050 	.word	0x40020050
 80065a4:	50020050 	.word	0x50020050
 80065a8:	400200d0 	.word	0x400200d0
 80065ac:	500200d0 	.word	0x500200d0
 80065b0:	40020150 	.word	0x40020150
 80065b4:	50020150 	.word	0x50020150
 80065b8:	400201d0 	.word	0x400201d0
 80065bc:	500201d0 	.word	0x500201d0
 80065c0:	40020250 	.word	0x40020250
 80065c4:	50020250 	.word	0x50020250
 80065c8:	400202d0 	.word	0x400202d0
 80065cc:	500202d0 	.word	0x500202d0
 80065d0:	40020350 	.word	0x40020350
 80065d4:	50020350 	.word	0x50020350
 80065d8:	400203d0 	.word	0x400203d0
 80065dc:	500203d0 	.word	0x500203d0
 80065e0:	40020450 	.word	0x40020450
 80065e4:	50020450 	.word	0x50020450
 80065e8:	400204d0 	.word	0x400204d0
 80065ec:	500204d0 	.word	0x500204d0
 80065f0:	40020550 	.word	0x40020550
 80065f4:	50020550 	.word	0x50020550
 80065f8:	400205d0 	.word	0x400205d0
 80065fc:	500205d0 	.word	0x500205d0
 8006600:	40020650 	.word	0x40020650
 8006604:	50020650 	.word	0x50020650
 8006608:	400206d0 	.word	0x400206d0
 800660c:	500206d0 	.word	0x500206d0
 8006610:	40020750 	.word	0x40020750
 8006614:	50020750 	.word	0x50020750
 8006618:	400207d0 	.word	0x400207d0
 800661c:	500207d0 	.word	0x500207d0

08006620 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_DMAEx_List_Start_IT+0x16>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e082      	b.n	8006740 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006640:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800664c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800664e:	7dfb      	ldrb	r3, [r7, #23]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d005      	beq.n	8006660 <HAL_DMAEx_List_Start_IT+0x40>
 8006654:	7dfb      	ldrb	r3, [r7, #23]
 8006656:	2b02      	cmp	r3, #2
 8006658:	d16a      	bne.n	8006730 <HAL_DMAEx_List_Start_IT+0x110>
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d067      	beq.n	8006730 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b01      	cmp	r3, #1
 800666a:	d157      	bne.n	800671c <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006672:	2b01      	cmp	r3, #1
 8006674:	d101      	bne.n	800667a <HAL_DMAEx_List_Start_IT+0x5a>
 8006676:	2302      	movs	r3, #2
 8006678:	e062      	b.n	8006740 <HAL_DMAEx_List_Start_IT+0x120>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2202      	movs	r2, #2
 8006686:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800668e:	2202      	movs	r2, #2
 8006690:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800669c:	2200      	movs	r2, #0
 800669e:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695a      	ldr	r2, [r3, #20]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80066ae:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d007      	beq.n	80066c8 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	695a      	ldr	r2, [r3, #20]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066c6:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d007      	beq.n	80066e0 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695a      	ldr	r2, [r3, #20]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066de:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f107 010c 	add.w	r1, r7, #12
 80066ea:	2200      	movs	r2, #0
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 fe47 	bl	8007380 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4619      	mov	r1, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	0c0b      	lsrs	r3, r1, #16
 8006700:	041b      	lsls	r3, r3, #16
 8006702:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006710:	4013      	ands	r3, r2
 8006712:	68f9      	ldr	r1, [r7, #12]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	6812      	ldr	r2, [r2, #0]
 8006718:	430b      	orrs	r3, r1
 800671a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	695a      	ldr	r2, [r3, #20]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f042 0201 	orr.w	r2, r2, #1
 800672a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
 800672e:	e007      	b.n	8006740 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2240      	movs	r2, #64	@ 0x40
 8006734:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
}
 8006740:	4618      	mov	r0, r3
 8006742:	3718      	adds	r7, #24
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <HAL_DMAEx_List_BuildNode+0x16>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e004      	b.n	800676c <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fb43 	bl	8006df0 <DMA_List_BuildNode>

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <HAL_DMAEx_List_GetNodeConfig+0x16>
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e004      	b.n	8006798 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fc7f 	bl	8007094 <DMA_List_GetNodeConfig>

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08c      	sub	sp, #48	@ 0x30
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d002      	beq.n	80067b8 <HAL_DMAEx_List_InsertNode+0x18>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e0b6      	b.n	800692a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d104      	bne.n	80067ce <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2204      	movs	r2, #4
 80067c8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e0ad      	b.n	800692a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	68b9      	ldr	r1, [r7, #8]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 fd66 	bl	80072a8 <DMA_List_CheckNodesBaseAddresses>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d004      	beq.n	80067ec <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2205      	movs	r2, #5
 80067e6:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e09e      	b.n	800692a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	68b9      	ldr	r1, [r7, #8]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 fd87 	bl	8007308 <DMA_List_CheckNodesTypes>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d004      	beq.n	800680a <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2204      	movs	r2, #4
 8006804:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e08f      	b.n	800692a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2202      	movs	r2, #2
 800680e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8006816:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800681a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fdad 	bl	8007380 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d11a      	bne.n	8006864 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d106      	bne.n	8006842 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2201      	movs	r2, #1
 800683e:	609a      	str	r2, [r3, #8]
 8006840:	e06c      	b.n	800691c <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800684e:	4013      	ands	r3, r2
 8006850:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006852:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006854:	4319      	orrs	r1, r3
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2202      	movs	r2, #2
 8006860:	609a      	str	r2, [r3, #8]
 8006862:	e05b      	b.n	800691c <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10f      	bne.n	800688a <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006874:	4013      	ands	r3, r2
 8006876:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006878:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800687a:	4319      	orrs	r1, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	e043      	b.n	8006912 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 800688a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688c:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 800688e:	f107 0314 	add.w	r3, r7, #20
 8006892:	461a      	mov	r2, r3
 8006894:	68b9      	ldr	r1, [r7, #8]
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 fda2 	bl	80073e0 <DMA_List_FindNode>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d132      	bne.n	8006908 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80068a2:	69fa      	ldr	r2, [r7, #28]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d11a      	bne.n	80068e2 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00b      	beq.n	80068cc <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	461a      	mov	r2, r3
 80068ba:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80068be:	4013      	ands	r3, r2
 80068c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068c4:	4319      	orrs	r1, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80068d2:	4013      	ands	r3, r2
 80068d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068d8:	4319      	orrs	r1, r3
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80068e0:	e017      	b.n	8006912 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 80068e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80068f8:	4013      	ands	r3, r2
 80068fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068fe:	4319      	orrs	r1, r3
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006906:	e004      	b.n	8006912 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2206      	movs	r2, #6
 800690c:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e00b      	b.n	800692a <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2201      	movs	r2, #1
 8006926:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3730      	adds	r7, #48	@ 0x30
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b08a      	sub	sp, #40	@ 0x28
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d101      	bne.n	8006944 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e052      	b.n	80069ea <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d104      	bne.n	8006956 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e049      	b.n	80069ea <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00c      	beq.n	8006978 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d101      	bne.n	800696e <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	e03d      	b.n	80069ea <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2204      	movs	r2, #4
 8006972:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e038      	b.n	80069ea <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d104      	bne.n	800698a <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2204      	movs	r2, #4
 8006984:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e02f      	b.n	80069ea <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2202      	movs	r2, #2
 800698e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f107 0220 	add.w	r2, r7, #32
 800699e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fcec 	bl	8007380 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80069ac:	f107 030c 	add.w	r3, r7, #12
 80069b0:	461a      	mov	r2, r3
 80069b2:	2100      	movs	r1, #0
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fd13 	bl	80073e0 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80069c4:	4013      	ands	r3, r2
 80069c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	4610      	mov	r0, r2
 80069cc:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80069ce:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80069d0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3728      	adds	r7, #40	@ 0x28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
	...

080069f4 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <HAL_DMAEx_List_LinkQ+0x16>
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e072      	b.n	8006af4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006a14:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d002      	beq.n	8006a28 <HAL_DMAEx_List_LinkQ+0x34>
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
 8006a24:	2b05      	cmp	r3, #5
 8006a26:	d108      	bne.n	8006a3a <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2240      	movs	r2, #64	@ 0x40
 8006a2c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e05c      	b.n	8006af4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	7b1b      	ldrb	r3, [r3, #12]
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d104      	bne.n	8006a4e <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2201      	movs	r2, #1
 8006a48:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e052      	b.n	8006af4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a2b      	ldr	r2, [pc, #172]	@ (8006b00 <HAL_DMAEx_List_LinkQ+0x10c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d022      	beq.n	8006a9e <HAL_DMAEx_List_LinkQ+0xaa>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a29      	ldr	r2, [pc, #164]	@ (8006b04 <HAL_DMAEx_List_LinkQ+0x110>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d01d      	beq.n	8006a9e <HAL_DMAEx_List_LinkQ+0xaa>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a28      	ldr	r2, [pc, #160]	@ (8006b08 <HAL_DMAEx_List_LinkQ+0x114>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d018      	beq.n	8006a9e <HAL_DMAEx_List_LinkQ+0xaa>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a26      	ldr	r2, [pc, #152]	@ (8006b0c <HAL_DMAEx_List_LinkQ+0x118>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d013      	beq.n	8006a9e <HAL_DMAEx_List_LinkQ+0xaa>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a25      	ldr	r2, [pc, #148]	@ (8006b10 <HAL_DMAEx_List_LinkQ+0x11c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00e      	beq.n	8006a9e <HAL_DMAEx_List_LinkQ+0xaa>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a23      	ldr	r2, [pc, #140]	@ (8006b14 <HAL_DMAEx_List_LinkQ+0x120>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d009      	beq.n	8006a9e <HAL_DMAEx_List_LinkQ+0xaa>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a22      	ldr	r2, [pc, #136]	@ (8006b18 <HAL_DMAEx_List_LinkQ+0x124>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d004      	beq.n	8006a9e <HAL_DMAEx_List_LinkQ+0xaa>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a20      	ldr	r2, [pc, #128]	@ (8006b1c <HAL_DMAEx_List_LinkQ+0x128>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d101      	bne.n	8006aa2 <HAL_DMAEx_List_LinkQ+0xae>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e000      	b.n	8006aa4 <HAL_DMAEx_List_LinkQ+0xb0>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10b      	bne.n	8006ac0 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d004      	beq.n	8006ac0 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2203      	movs	r2, #3
 8006aba:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e019      	b.n	8006af4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ac4:	2b81      	cmp	r3, #129	@ 0x81
 8006ac6:	d108      	bne.n	8006ada <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10d      	bne.n	8006aec <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	2204      	movs	r2, #4
 8006ad4:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e00c      	b.n	8006af4 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d004      	beq.n	8006aec <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2204      	movs	r2, #4
 8006ae6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e003      	b.n	8006af4 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	40020650 	.word	0x40020650
 8006b04:	50020650 	.word	0x50020650
 8006b08:	400206d0 	.word	0x400206d0
 8006b0c:	500206d0 	.word	0x500206d0
 8006b10:	40020750 	.word	0x40020750
 8006b14:	50020750 	.word	0x50020750
 8006b18:	400207d0 	.word	0x400207d0
 8006b1c:	500207d0 	.word	0x500207d0

08006b20 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	0c1b      	lsrs	r3, r3, #16
 8006b30:	b2db      	uxtb	r3, r3
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
	...

08006b40 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a85      	ldr	r2, [pc, #532]	@ (8006d70 <DMA_List_Init+0x230>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	f000 80a0 	beq.w	8006ca0 <DMA_List_Init+0x160>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a83      	ldr	r2, [pc, #524]	@ (8006d74 <DMA_List_Init+0x234>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	f000 809a 	beq.w	8006ca0 <DMA_List_Init+0x160>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a81      	ldr	r2, [pc, #516]	@ (8006d78 <DMA_List_Init+0x238>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	f000 8094 	beq.w	8006ca0 <DMA_List_Init+0x160>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a7f      	ldr	r2, [pc, #508]	@ (8006d7c <DMA_List_Init+0x23c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	f000 808e 	beq.w	8006ca0 <DMA_List_Init+0x160>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a7d      	ldr	r2, [pc, #500]	@ (8006d80 <DMA_List_Init+0x240>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	f000 8088 	beq.w	8006ca0 <DMA_List_Init+0x160>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a7b      	ldr	r2, [pc, #492]	@ (8006d84 <DMA_List_Init+0x244>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	f000 8082 	beq.w	8006ca0 <DMA_List_Init+0x160>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a79      	ldr	r2, [pc, #484]	@ (8006d88 <DMA_List_Init+0x248>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d07c      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a78      	ldr	r2, [pc, #480]	@ (8006d8c <DMA_List_Init+0x24c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d077      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a76      	ldr	r2, [pc, #472]	@ (8006d90 <DMA_List_Init+0x250>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d072      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a75      	ldr	r2, [pc, #468]	@ (8006d94 <DMA_List_Init+0x254>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d06d      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a73      	ldr	r2, [pc, #460]	@ (8006d98 <DMA_List_Init+0x258>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d068      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a72      	ldr	r2, [pc, #456]	@ (8006d9c <DMA_List_Init+0x25c>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d063      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a70      	ldr	r2, [pc, #448]	@ (8006da0 <DMA_List_Init+0x260>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d05e      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a6f      	ldr	r2, [pc, #444]	@ (8006da4 <DMA_List_Init+0x264>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d059      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a6d      	ldr	r2, [pc, #436]	@ (8006da8 <DMA_List_Init+0x268>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d054      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a6c      	ldr	r2, [pc, #432]	@ (8006dac <DMA_List_Init+0x26c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d04f      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a6a      	ldr	r2, [pc, #424]	@ (8006db0 <DMA_List_Init+0x270>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d04a      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a69      	ldr	r2, [pc, #420]	@ (8006db4 <DMA_List_Init+0x274>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d045      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a67      	ldr	r2, [pc, #412]	@ (8006db8 <DMA_List_Init+0x278>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d040      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a66      	ldr	r2, [pc, #408]	@ (8006dbc <DMA_List_Init+0x27c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d03b      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a64      	ldr	r2, [pc, #400]	@ (8006dc0 <DMA_List_Init+0x280>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d036      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a63      	ldr	r2, [pc, #396]	@ (8006dc4 <DMA_List_Init+0x284>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d031      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a61      	ldr	r2, [pc, #388]	@ (8006dc8 <DMA_List_Init+0x288>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d02c      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a60      	ldr	r2, [pc, #384]	@ (8006dcc <DMA_List_Init+0x28c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d027      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a5e      	ldr	r2, [pc, #376]	@ (8006dd0 <DMA_List_Init+0x290>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d022      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a5d      	ldr	r2, [pc, #372]	@ (8006dd4 <DMA_List_Init+0x294>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d01d      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a5b      	ldr	r2, [pc, #364]	@ (8006dd8 <DMA_List_Init+0x298>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d018      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a5a      	ldr	r2, [pc, #360]	@ (8006ddc <DMA_List_Init+0x29c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d013      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a58      	ldr	r2, [pc, #352]	@ (8006de0 <DMA_List_Init+0x2a0>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d00e      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a57      	ldr	r2, [pc, #348]	@ (8006de4 <DMA_List_Init+0x2a4>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d009      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a55      	ldr	r2, [pc, #340]	@ (8006de8 <DMA_List_Init+0x2a8>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d004      	beq.n	8006ca0 <DMA_List_Init+0x160>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a54      	ldr	r2, [pc, #336]	@ (8006dec <DMA_List_Init+0x2ac>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d101      	bne.n	8006ca4 <DMA_List_Init+0x164>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e000      	b.n	8006ca6 <DMA_List_Init+0x166>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d004      	beq.n	8006cb4 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006cd8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a36      	ldr	r2, [pc, #216]	@ (8006dd0 <DMA_List_Init+0x290>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d022      	beq.n	8006d42 <DMA_List_Init+0x202>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a34      	ldr	r2, [pc, #208]	@ (8006dd4 <DMA_List_Init+0x294>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d01d      	beq.n	8006d42 <DMA_List_Init+0x202>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a33      	ldr	r2, [pc, #204]	@ (8006dd8 <DMA_List_Init+0x298>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d018      	beq.n	8006d42 <DMA_List_Init+0x202>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a31      	ldr	r2, [pc, #196]	@ (8006ddc <DMA_List_Init+0x29c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d013      	beq.n	8006d42 <DMA_List_Init+0x202>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a30      	ldr	r2, [pc, #192]	@ (8006de0 <DMA_List_Init+0x2a0>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d00e      	beq.n	8006d42 <DMA_List_Init+0x202>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a2e      	ldr	r2, [pc, #184]	@ (8006de4 <DMA_List_Init+0x2a4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d009      	beq.n	8006d42 <DMA_List_Init+0x202>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a2d      	ldr	r2, [pc, #180]	@ (8006de8 <DMA_List_Init+0x2a8>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d004      	beq.n	8006d42 <DMA_List_Init+0x202>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a2b      	ldr	r2, [pc, #172]	@ (8006dec <DMA_List_Init+0x2ac>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d101      	bne.n	8006d46 <DMA_List_Init+0x206>
 8006d42:	2301      	movs	r3, #1
 8006d44:	e000      	b.n	8006d48 <DMA_List_Init+0x208>
 8006d46:	2300      	movs	r3, #0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d007      	beq.n	8006d5c <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2200      	movs	r2, #0
 8006d52:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2200      	movs	r2, #0
 8006d62:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006d64:	bf00      	nop
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	40020050 	.word	0x40020050
 8006d74:	50020050 	.word	0x50020050
 8006d78:	400200d0 	.word	0x400200d0
 8006d7c:	500200d0 	.word	0x500200d0
 8006d80:	40020150 	.word	0x40020150
 8006d84:	50020150 	.word	0x50020150
 8006d88:	400201d0 	.word	0x400201d0
 8006d8c:	500201d0 	.word	0x500201d0
 8006d90:	40020250 	.word	0x40020250
 8006d94:	50020250 	.word	0x50020250
 8006d98:	400202d0 	.word	0x400202d0
 8006d9c:	500202d0 	.word	0x500202d0
 8006da0:	40020350 	.word	0x40020350
 8006da4:	50020350 	.word	0x50020350
 8006da8:	400203d0 	.word	0x400203d0
 8006dac:	500203d0 	.word	0x500203d0
 8006db0:	40020450 	.word	0x40020450
 8006db4:	50020450 	.word	0x50020450
 8006db8:	400204d0 	.word	0x400204d0
 8006dbc:	500204d0 	.word	0x500204d0
 8006dc0:	40020550 	.word	0x40020550
 8006dc4:	50020550 	.word	0x50020550
 8006dc8:	400205d0 	.word	0x400205d0
 8006dcc:	500205d0 	.word	0x500205d0
 8006dd0:	40020650 	.word	0x40020650
 8006dd4:	50020650 	.word	0x50020650
 8006dd8:	400206d0 	.word	0x400206d0
 8006ddc:	500206d0 	.word	0x500206d0
 8006de0:	40020750 	.word	0x40020750
 8006de4:	50020750 	.word	0x50020750
 8006de8:	400207d0 	.word	0x400207d0
 8006dec:	500207d0 	.word	0x500207d0

08006df0 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006e02:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8006e08:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006e0e:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8006e14:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d017      	beq.n	8006e56 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e32:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	051b      	lsls	r3, r3, #20
 8006e3c:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006e40:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e46:	3b01      	subs	r3, #1
 8006e48:	011b      	lsls	r3, r3, #4
 8006e4a:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006e4e:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006e50:	431a      	orrs	r2, r3
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6859      	ldr	r1, [r3, #4]
 8006e5e:	f240 237f 	movw	r3, #639	@ 0x27f
 8006e62:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006e64:	431a      	orrs	r2, r3
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e72:	d10c      	bne.n	8006e8e <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0320 	and.w	r3, r3, #32
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d011      	beq.n	8006ea4 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	605a      	str	r2, [r3, #4]
 8006e8c:	e00a      	b.n	8006ea4 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e96:	d105      	bne.n	8006ea4 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00f      	beq.n	8006ecc <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eb8:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ebe:	041b      	lsls	r3, r3, #16
 8006ec0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006ec4:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d04e      	beq.n	8006f80 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eea:	3b01      	subs	r3, #1
 8006eec:	0419      	lsls	r1, r3, #16
 8006eee:	4b67      	ldr	r3, [pc, #412]	@ (800708c <DMA_List_BuildNode+0x29c>)
 8006ef0:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	da06      	bge.n	8006f0e <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	609a      	str	r2, [r3, #8]
 8006f0c:	e005      	b.n	8006f1a <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	da06      	bge.n	8006f30 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	609a      	str	r2, [r3, #8]
 8006f2e:	e005      	b.n	8006f3c <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	da06      	bge.n	8006f52 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	609a      	str	r2, [r3, #8]
 8006f50:	e005      	b.n	8006f5e <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	da06      	bge.n	8006f74 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	609a      	str	r2, [r3, #8]
 8006f72:	e005      	b.n	8006f80 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0302 	and.w	r3, r3, #2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d059      	beq.n	8007050 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	da09      	bge.n	8006fb8 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fa8:	425b      	negs	r3, r3
 8006faa:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	615a      	str	r2, [r3, #20]
 8006fb6:	e005      	b.n	8006fc4 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fbc:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	da0d      	bge.n	8006fe8 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd0:	425b      	negs	r3, r3
 8006fd2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	695a      	ldr	r2, [r3, #20]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	0419      	lsls	r1, r3, #16
 8006fdc:	4b2c      	ldr	r3, [pc, #176]	@ (8007090 <DMA_List_BuildNode+0x2a0>)
 8006fde:	400b      	ands	r3, r1
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	615a      	str	r2, [r3, #20]
 8006fe6:	e009      	b.n	8006ffc <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ff0:	0419      	lsls	r1, r3, #16
 8006ff2:	4b27      	ldr	r3, [pc, #156]	@ (8007090 <DMA_List_BuildNode+0x2a0>)
 8006ff4:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007000:	2b00      	cmp	r3, #0
 8007002:	da08      	bge.n	8007016 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007008:	425b      	negs	r3, r3
 800700a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	b29a      	uxth	r2, r3
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	619a      	str	r2, [r3, #24]
 8007014:	e004      	b.n	8007020 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800701a:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007024:	2b00      	cmp	r3, #0
 8007026:	da0b      	bge.n	8007040 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800702c:	425b      	negs	r3, r3
 800702e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007038:	431a      	orrs	r2, r3
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	619a      	str	r2, [r3, #24]
 800703e:	e007      	b.n	8007050 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007048:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800704a:	431a      	orrs	r2, r3
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d006      	beq.n	8007072 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8007070:	e005      	b.n	800707e <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	621a      	str	r2, [r3, #32]
}
 800707e:	bf00      	nop
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	07ff0000 	.word	0x07ff0000
 8007090:	1fff0000 	.word	0x1fff0000

08007094 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0208 	and.w	r2, r3, #8
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0203 	and.w	r2, r3, #3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 80070dc:	091b      	lsrs	r3, r3, #4
 80070de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070e2:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 80070ec:	0d1b      	lsrs	r3, r3, #20
 80070ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070f2:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	4b66      	ldr	r3, [pc, #408]	@ (80072a4 <DMA_List_GetNodeConfig+0x210>)
 800710a:	4013      	ands	r3, r2
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007124:	2b00      	cmp	r3, #0
 8007126:	d008      	beq.n	800713a <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800712e:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007136:	60da      	str	r2, [r3, #12]
 8007138:	e013      	b.n	8007162 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800714e:	2b00      	cmp	r3, #0
 8007150:	d004      	beq.n	800715c <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007158:	60da      	str	r2, [r3, #12]
 800715a:	e002      	b.n	8007162 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 800718a:	0c1b      	lsrs	r3, r3, #16
 800718c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d008      	beq.n	80071c8 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	0c1b      	lsrs	r3, r3, #16
 80071bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071c0:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80071c6:	e002      	b.n	80071ce <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	68da      	ldr	r2, [r3, #12]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	691a      	ldr	r2, [r3, #16]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d04a      	beq.n	8007280 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071f4:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 80071f6:	89fa      	ldrh	r2, [r7, #14]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	0c1b      	lsrs	r3, r3, #16
 8007202:	b29b      	uxth	r3, r3
 8007204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007208:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 800720a:	89fa      	ldrh	r2, [r7, #14]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d004      	beq.n	8007226 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007220:	425a      	negs	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d004      	beq.n	800723c <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007236:	425a      	negs	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8007242:	89fa      	ldrh	r2, [r7, #14]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	0c1b      	lsrs	r3, r3, #16
 800724e:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8007250:	89fa      	ldrh	r2, [r7, #14]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d004      	beq.n	800726c <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007266:	425a      	negs	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	da11      	bge.n	8007298 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007278:	425a      	negs	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 800727e:	e00b      	b.n	8007298 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007298:	bf00      	nop
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	0c002000 	.word	0x0c002000

080072a8 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	431a      	orrs	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4313      	orrs	r3, r2
 80072be:	0c1b      	lsrs	r3, r3, #16
 80072c0:	041b      	lsls	r3, r3, #16
 80072c2:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d002      	beq.n	80072d4 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	617b      	str	r3, [r7, #20]
 80072d2:	e00a      	b.n	80072ea <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	617b      	str	r3, [r7, #20]
 80072de:	e004      	b.n	80072ea <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	0c1b      	lsrs	r3, r3, #16
 80072ee:	041b      	lsls	r3, r3, #16
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d001      	beq.n	80072fa <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e000      	b.n	80072fc <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	371c      	adds	r7, #28
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8007308:	b480      	push	{r7}
 800730a:	b087      	sub	sp, #28
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d004      	beq.n	8007328 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	b2db      	uxtb	r3, r3
 8007324:	617b      	str	r3, [r7, #20]
 8007326:	e00e      	b.n	8007346 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d004      	beq.n	8007338 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	617b      	str	r3, [r7, #20]
 8007336:	e006      	b.n	8007346 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	b2db      	uxtb	r3, r3
 8007344:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d007      	beq.n	800735c <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	429a      	cmp	r2, r3
 8007356:	d001      	beq.n	800735c <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8007358:	2302      	movs	r3, #2
 800735a:	e00b      	b.n	8007374 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d007      	beq.n	8007372 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	429a      	cmp	r2, r3
 800736c:	d001      	beq.n	8007372 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 800736e:	2303      	movs	r3, #3
 8007370:	e000      	b.n	8007374 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	371c      	adds	r7, #28
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	f003 0302 	and.w	r3, r3, #2
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00c      	beq.n	80073b2 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	4a0d      	ldr	r2, [pc, #52]	@ (80073d8 <DMA_List_GetCLLRNodeInfo+0x58>)
 80073a2:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00f      	beq.n	80073ca <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2207      	movs	r2, #7
 80073ae:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80073b0:	e00b      	b.n	80073ca <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d002      	beq.n	80073be <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	4a08      	ldr	r2, [pc, #32]	@ (80073dc <DMA_List_GetCLLRNodeInfo+0x5c>)
 80073bc:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2205      	movs	r2, #5
 80073c8:	601a      	str	r2, [r3, #0]
}
 80073ca:	bf00      	nop
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	fe010000 	.word	0xfe010000
 80073dc:	f8010000 	.word	0xf8010000

080073e0 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b089      	sub	sp, #36	@ 0x24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80073ec:	2300      	movs	r3, #0
 80073ee:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d142      	bne.n	800748a <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8007404:	e01d      	b.n	8007442 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d107      	bne.n	800741c <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	461a      	mov	r2, r3
 8007412:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007416:	4013      	ands	r3, r2
 8007418:	61bb      	str	r3, [r7, #24]
 800741a:	e00f      	b.n	800743c <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	0c1b      	lsrs	r3, r3, #16
 8007426:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	4413      	add	r3, r2
 800742c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007434:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007438:	4013      	ands	r3, r2
 800743a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	3301      	adds	r3, #1
 8007440:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	69fa      	ldr	r2, [r7, #28]
 8007448:	429a      	cmp	r2, r3
 800744a:	d3dc      	bcc.n	8007406 <DMA_List_FindNode+0x26>
 800744c:	e029      	b.n	80074a2 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d107      	bne.n	8007464 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	461a      	mov	r2, r3
 800745a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800745e:	4013      	ands	r3, r2
 8007460:	61bb      	str	r3, [r7, #24]
 8007462:	e00f      	b.n	8007484 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	0c1b      	lsrs	r3, r3, #16
 800746e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	4413      	add	r3, r2
 8007474:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800747c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007480:	4013      	ands	r3, r2
 8007482:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	3301      	adds	r3, #1
 8007488:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	69fa      	ldr	r2, [r7, #28]
 8007490:	429a      	cmp	r2, r3
 8007492:	d206      	bcs.n	80074a2 <DMA_List_FindNode+0xc2>
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800749a:	4013      	ands	r3, r2
 800749c:	69ba      	ldr	r2, [r7, #24]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d1d5      	bne.n	800744e <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d008      	beq.n	80074ba <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80074ae:	4013      	ands	r3, r2
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d001      	beq.n	80074ba <DMA_List_FindNode+0xda>
    {
      return 1U;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e02b      	b.n	8007512 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	69fa      	ldr	r2, [r7, #28]
 80074be:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	0c1b      	lsrs	r3, r3, #16
 80074c6:	041b      	lsls	r3, r3, #16
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	0c1b      	lsrs	r3, r3, #16
 80074d6:	041b      	lsls	r3, r3, #16
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	431a      	orrs	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	461a      	mov	r2, r3
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00f      	beq.n	8007510 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	461a      	mov	r2, r3
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074fc:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8007500:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	0c1b      	lsrs	r3, r3, #16
 8007508:	041b      	lsls	r3, r3, #16
 800750a:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3724      	adds	r7, #36	@ 0x24
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
	...

08007520 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007520:	b480      	push	{r7}
 8007522:	b089      	sub	sp, #36	@ 0x24
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007532:	e1ba      	b.n	80078aa <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	2101      	movs	r1, #1
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	fa01 f303 	lsl.w	r3, r1, r3
 8007540:	4013      	ands	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	f000 81aa 	beq.w	80078a4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a55      	ldr	r2, [pc, #340]	@ (80076a8 <HAL_GPIO_Init+0x188>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d15d      	bne.n	8007614 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800755e:	2201      	movs	r2, #1
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	fa02 f303 	lsl.w	r3, r2, r3
 8007566:	43db      	mvns	r3, r3
 8007568:	69fa      	ldr	r2, [r7, #28]
 800756a:	4013      	ands	r3, r2
 800756c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f003 0201 	and.w	r2, r3, #1
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	fa02 f303 	lsl.w	r3, r2, r3
 800757c:	69fa      	ldr	r2, [r7, #28]
 800757e:	4313      	orrs	r3, r2
 8007580:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	69fa      	ldr	r2, [r7, #28]
 8007586:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8007588:	4a48      	ldr	r2, [pc, #288]	@ (80076ac <HAL_GPIO_Init+0x18c>)
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007590:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007592:	4a46      	ldr	r2, [pc, #280]	@ (80076ac <HAL_GPIO_Init+0x18c>)
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	00db      	lsls	r3, r3, #3
 8007598:	4413      	add	r3, r2
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	08da      	lsrs	r2, r3, #3
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	3208      	adds	r2, #8
 80075a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	f003 0307 	and.w	r3, r3, #7
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	220f      	movs	r2, #15
 80075b6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ba:	43db      	mvns	r3, r3
 80075bc:	69fa      	ldr	r2, [r7, #28]
 80075be:	4013      	ands	r3, r2
 80075c0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	f003 0307 	and.w	r3, r3, #7
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	220b      	movs	r2, #11
 80075cc:	fa02 f303 	lsl.w	r3, r2, r3
 80075d0:	69fa      	ldr	r2, [r7, #28]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	08da      	lsrs	r2, r3, #3
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	3208      	adds	r2, #8
 80075de:	69f9      	ldr	r1, [r7, #28]
 80075e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	005b      	lsls	r3, r3, #1
 80075ee:	2203      	movs	r2, #3
 80075f0:	fa02 f303 	lsl.w	r3, r2, r3
 80075f4:	43db      	mvns	r3, r3
 80075f6:	69fa      	ldr	r2, [r7, #28]
 80075f8:	4013      	ands	r3, r2
 80075fa:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	2202      	movs	r2, #2
 8007602:	fa02 f303 	lsl.w	r3, r2, r3
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	4313      	orrs	r3, r2
 800760a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	69fa      	ldr	r2, [r7, #28]
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	e067      	b.n	80076e4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2b02      	cmp	r3, #2
 800761a:	d003      	beq.n	8007624 <HAL_GPIO_Init+0x104>
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2b12      	cmp	r3, #18
 8007622:	d145      	bne.n	80076b0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	08da      	lsrs	r2, r3, #3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	3208      	adds	r2, #8
 800762c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007630:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f003 0307 	and.w	r3, r3, #7
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	220f      	movs	r2, #15
 800763c:	fa02 f303 	lsl.w	r3, r2, r3
 8007640:	43db      	mvns	r3, r3
 8007642:	69fa      	ldr	r2, [r7, #28]
 8007644:	4013      	ands	r3, r2
 8007646:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	f003 020f 	and.w	r2, r3, #15
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	fa02 f303 	lsl.w	r3, r2, r3
 800765c:	69fa      	ldr	r2, [r7, #28]
 800765e:	4313      	orrs	r3, r2
 8007660:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	08da      	lsrs	r2, r3, #3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3208      	adds	r2, #8
 800766a:	69f9      	ldr	r1, [r7, #28]
 800766c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	005b      	lsls	r3, r3, #1
 800767a:	2203      	movs	r2, #3
 800767c:	fa02 f303 	lsl.w	r3, r2, r3
 8007680:	43db      	mvns	r3, r3
 8007682:	69fa      	ldr	r2, [r7, #28]
 8007684:	4013      	ands	r3, r2
 8007686:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f003 0203 	and.w	r2, r3, #3
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	005b      	lsls	r3, r3, #1
 8007694:	fa02 f303 	lsl.w	r3, r2, r3
 8007698:	69fa      	ldr	r2, [r7, #28]
 800769a:	4313      	orrs	r3, r2
 800769c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	e01e      	b.n	80076e4 <HAL_GPIO_Init+0x1c4>
 80076a6:	bf00      	nop
 80076a8:	46020000 	.word	0x46020000
 80076ac:	08011c5c 	.word	0x08011c5c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	2203      	movs	r2, #3
 80076bc:	fa02 f303 	lsl.w	r3, r2, r3
 80076c0:	43db      	mvns	r3, r3
 80076c2:	69fa      	ldr	r2, [r7, #28]
 80076c4:	4013      	ands	r3, r2
 80076c6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f003 0203 	and.w	r2, r3, #3
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	005b      	lsls	r3, r3, #1
 80076d4:	fa02 f303 	lsl.w	r3, r2, r3
 80076d8:	69fa      	ldr	r2, [r7, #28]
 80076da:	4313      	orrs	r3, r2
 80076dc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	69fa      	ldr	r2, [r7, #28]
 80076e2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d00b      	beq.n	8007704 <HAL_GPIO_Init+0x1e4>
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d007      	beq.n	8007704 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80076f8:	2b11      	cmp	r3, #17
 80076fa:	d003      	beq.n	8007704 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	2b12      	cmp	r3, #18
 8007702:	d130      	bne.n	8007766 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	2203      	movs	r2, #3
 8007710:	fa02 f303 	lsl.w	r3, r2, r3
 8007714:	43db      	mvns	r3, r3
 8007716:	69fa      	ldr	r2, [r7, #28]
 8007718:	4013      	ands	r3, r2
 800771a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	68da      	ldr	r2, [r3, #12]
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	fa02 f303 	lsl.w	r3, r2, r3
 8007728:	69fa      	ldr	r2, [r7, #28]
 800772a:	4313      	orrs	r3, r2
 800772c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	69fa      	ldr	r2, [r7, #28]
 8007732:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800773a:	2201      	movs	r2, #1
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	fa02 f303 	lsl.w	r3, r2, r3
 8007742:	43db      	mvns	r3, r3
 8007744:	69fa      	ldr	r2, [r7, #28]
 8007746:	4013      	ands	r3, r2
 8007748:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	091b      	lsrs	r3, r3, #4
 8007750:	f003 0201 	and.w	r2, r3, #1
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	fa02 f303 	lsl.w	r3, r2, r3
 800775a:	69fa      	ldr	r2, [r7, #28]
 800775c:	4313      	orrs	r3, r2
 800775e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	69fa      	ldr	r2, [r7, #28]
 8007764:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	2b03      	cmp	r3, #3
 800776c:	d017      	beq.n	800779e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	2203      	movs	r2, #3
 800777a:	fa02 f303 	lsl.w	r3, r2, r3
 800777e:	43db      	mvns	r3, r3
 8007780:	69fa      	ldr	r2, [r7, #28]
 8007782:	4013      	ands	r3, r2
 8007784:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	689a      	ldr	r2, [r3, #8]
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	fa02 f303 	lsl.w	r3, r2, r3
 8007792:	69fa      	ldr	r2, [r7, #28]
 8007794:	4313      	orrs	r3, r2
 8007796:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	69fa      	ldr	r2, [r7, #28]
 800779c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d07c      	beq.n	80078a4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80077aa:	4a47      	ldr	r2, [pc, #284]	@ (80078c8 <HAL_GPIO_Init+0x3a8>)
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	089b      	lsrs	r3, r3, #2
 80077b0:	3318      	adds	r3, #24
 80077b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077b6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	220f      	movs	r2, #15
 80077c2:	fa02 f303 	lsl.w	r3, r2, r3
 80077c6:	43db      	mvns	r3, r3
 80077c8:	69fa      	ldr	r2, [r7, #28]
 80077ca:	4013      	ands	r3, r2
 80077cc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	0a9a      	lsrs	r2, r3, #10
 80077d2:	4b3e      	ldr	r3, [pc, #248]	@ (80078cc <HAL_GPIO_Init+0x3ac>)
 80077d4:	4013      	ands	r3, r2
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	f002 0203 	and.w	r2, r2, #3
 80077dc:	00d2      	lsls	r2, r2, #3
 80077de:	4093      	lsls	r3, r2
 80077e0:	69fa      	ldr	r2, [r7, #28]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80077e6:	4938      	ldr	r1, [pc, #224]	@ (80078c8 <HAL_GPIO_Init+0x3a8>)
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	089b      	lsrs	r3, r3, #2
 80077ec:	3318      	adds	r3, #24
 80077ee:	69fa      	ldr	r2, [r7, #28]
 80077f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80077f4:	4b34      	ldr	r3, [pc, #208]	@ (80078c8 <HAL_GPIO_Init+0x3a8>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	43db      	mvns	r3, r3
 80077fe:	69fa      	ldr	r2, [r7, #28]
 8007800:	4013      	ands	r3, r2
 8007802:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007810:	69fa      	ldr	r2, [r7, #28]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	4313      	orrs	r3, r2
 8007816:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8007818:	4a2b      	ldr	r2, [pc, #172]	@ (80078c8 <HAL_GPIO_Init+0x3a8>)
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800781e:	4b2a      	ldr	r3, [pc, #168]	@ (80078c8 <HAL_GPIO_Init+0x3a8>)
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	43db      	mvns	r3, r3
 8007828:	69fa      	ldr	r2, [r7, #28]
 800782a:	4013      	ands	r3, r2
 800782c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800783a:	69fa      	ldr	r2, [r7, #28]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	4313      	orrs	r3, r2
 8007840:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8007842:	4a21      	ldr	r2, [pc, #132]	@ (80078c8 <HAL_GPIO_Init+0x3a8>)
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007848:	4b1f      	ldr	r3, [pc, #124]	@ (80078c8 <HAL_GPIO_Init+0x3a8>)
 800784a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800784e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	43db      	mvns	r3, r3
 8007854:	69fa      	ldr	r2, [r7, #28]
 8007856:	4013      	ands	r3, r2
 8007858:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8007866:	69fa      	ldr	r2, [r7, #28]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4313      	orrs	r3, r2
 800786c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800786e:	4a16      	ldr	r2, [pc, #88]	@ (80078c8 <HAL_GPIO_Init+0x3a8>)
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8007876:	4b14      	ldr	r3, [pc, #80]	@ (80078c8 <HAL_GPIO_Init+0x3a8>)
 8007878:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800787c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	43db      	mvns	r3, r3
 8007882:	69fa      	ldr	r2, [r7, #28]
 8007884:	4013      	ands	r3, r2
 8007886:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8007894:	69fa      	ldr	r2, [r7, #28]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4313      	orrs	r3, r2
 800789a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800789c:	4a0a      	ldr	r2, [pc, #40]	@ (80078c8 <HAL_GPIO_Init+0x3a8>)
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	3301      	adds	r3, #1
 80078a8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	fa22 f303 	lsr.w	r3, r2, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f47f ae3d 	bne.w	8007534 <HAL_GPIO_Init+0x14>
  }
}
 80078ba:	bf00      	nop
 80078bc:	bf00      	nop
 80078be:	3724      	adds	r7, #36	@ 0x24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	46022000 	.word	0x46022000
 80078cc:	002f7f7f 	.word	0x002f7f7f

080078d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	807b      	strh	r3, [r7, #2]
 80078dc:	4613      	mov	r3, r2
 80078de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80078e0:	787b      	ldrb	r3, [r7, #1]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80078e6:	887a      	ldrh	r2, [r7, #2]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80078ec:	e002      	b.n	80078f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80078ee:	887a      	ldrh	r2, [r7, #2]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	4603      	mov	r3, r0
 8007908:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800790a:	4b0f      	ldr	r3, [pc, #60]	@ (8007948 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800790c:	68da      	ldr	r2, [r3, #12]
 800790e:	88fb      	ldrh	r3, [r7, #6]
 8007910:	4013      	ands	r3, r2
 8007912:	2b00      	cmp	r3, #0
 8007914:	d006      	beq.n	8007924 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007916:	4a0c      	ldr	r2, [pc, #48]	@ (8007948 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007918:	88fb      	ldrh	r3, [r7, #6]
 800791a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800791c:	88fb      	ldrh	r3, [r7, #6]
 800791e:	4618      	mov	r0, r3
 8007920:	f000 f814 	bl	800794c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8007924:	4b08      	ldr	r3, [pc, #32]	@ (8007948 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007926:	691a      	ldr	r2, [r3, #16]
 8007928:	88fb      	ldrh	r3, [r7, #6]
 800792a:	4013      	ands	r3, r2
 800792c:	2b00      	cmp	r3, #0
 800792e:	d006      	beq.n	800793e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007930:	4a05      	ldr	r2, [pc, #20]	@ (8007948 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007932:	88fb      	ldrh	r3, [r7, #6]
 8007934:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8007936:	88fb      	ldrh	r3, [r7, #6]
 8007938:	4618      	mov	r0, r3
 800793a:	f000 f812 	bl	8007962 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800793e:	bf00      	nop
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	46022000 	.word	0x46022000

0800794c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	4603      	mov	r3, r0
 8007954:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8007956:	bf00      	nop
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8007962:	b480      	push	{r7}
 8007964:	b083      	sub	sp, #12
 8007966:	af00      	add	r7, sp, #0
 8007968:	4603      	mov	r3, r0
 800796a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e08d      	b.n	8007aa6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	d106      	bne.n	80079a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7fa fa06 	bl	8001db0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2224      	movs	r2, #36	@ 0x24
 80079a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 0201 	bic.w	r2, r2, #1
 80079ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80079c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d107      	bne.n	80079f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	689a      	ldr	r2, [r3, #8]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079ee:	609a      	str	r2, [r3, #8]
 80079f0:	e006      	b.n	8007a00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689a      	ldr	r2, [r3, #8]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80079fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d108      	bne.n	8007a1a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a16:	605a      	str	r2, [r3, #4]
 8007a18:	e007      	b.n	8007a2a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6812      	ldr	r2, [r2, #0]
 8007a34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007a38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68da      	ldr	r2, [r3, #12]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	691a      	ldr	r2, [r3, #16]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	430a      	orrs	r2, r1
 8007a66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	69d9      	ldr	r1, [r3, #28]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a1a      	ldr	r2, [r3, #32]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	430a      	orrs	r2, r1
 8007a76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f042 0201 	orr.w	r2, r2, #1
 8007a86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
	...

08007ab0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b088      	sub	sp, #32
 8007ab4:	af02      	add	r7, sp, #8
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	607a      	str	r2, [r7, #4]
 8007aba:	461a      	mov	r2, r3
 8007abc:	460b      	mov	r3, r1
 8007abe:	817b      	strh	r3, [r7, #10]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b20      	cmp	r3, #32
 8007ace:	f040 80da 	bne.w	8007c86 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d101      	bne.n	8007ae0 <HAL_I2C_Master_Transmit+0x30>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e0d3      	b.n	8007c88 <HAL_I2C_Master_Transmit+0x1d8>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ae8:	f7fb f8f8 	bl	8002cdc <HAL_GetTick>
 8007aec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	2319      	movs	r3, #25
 8007af4:	2201      	movs	r2, #1
 8007af6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f000 fe7d 	bl	80087fa <I2C_WaitOnFlagUntilTimeout>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e0be      	b.n	8007c88 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2221      	movs	r2, #33	@ 0x21
 8007b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2210      	movs	r2, #16
 8007b16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	893a      	ldrh	r2, [r7, #8]
 8007b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	2bff      	cmp	r3, #255	@ 0xff
 8007b3a:	d90e      	bls.n	8007b5a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	22ff      	movs	r2, #255	@ 0xff
 8007b40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	8979      	ldrh	r1, [r7, #10]
 8007b4a:	4b51      	ldr	r3, [pc, #324]	@ (8007c90 <HAL_I2C_Master_Transmit+0x1e0>)
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f001 f814 	bl	8008b80 <I2C_TransferConfig>
 8007b58:	e06c      	b.n	8007c34 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	8979      	ldrh	r1, [r7, #10]
 8007b6c:	4b48      	ldr	r3, [pc, #288]	@ (8007c90 <HAL_I2C_Master_Transmit+0x1e0>)
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f001 f803 	bl	8008b80 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007b7a:	e05b      	b.n	8007c34 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	6a39      	ldr	r1, [r7, #32]
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 fe93 	bl	80088ac <I2C_WaitOnTXISFlagUntilTimeout>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e07b      	b.n	8007c88 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b94:	781a      	ldrb	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba0:	1c5a      	adds	r2, r3, #1
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	3b01      	subs	r3, #1
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d034      	beq.n	8007c34 <HAL_I2C_Master_Transmit+0x184>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d130      	bne.n	8007c34 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	2180      	movs	r1, #128	@ 0x80
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 fe0c 	bl	80087fa <I2C_WaitOnFlagUntilTimeout>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e04d      	b.n	8007c88 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	2bff      	cmp	r3, #255	@ 0xff
 8007bf4:	d90e      	bls.n	8007c14 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	22ff      	movs	r2, #255	@ 0xff
 8007bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	8979      	ldrh	r1, [r7, #10]
 8007c04:	2300      	movs	r3, #0
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 ffb7 	bl	8008b80 <I2C_TransferConfig>
 8007c12:	e00f      	b.n	8007c34 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	8979      	ldrh	r1, [r7, #10]
 8007c26:	2300      	movs	r3, #0
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f000 ffa6 	bl	8008b80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d19e      	bne.n	8007b7c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c3e:	697a      	ldr	r2, [r7, #20]
 8007c40:	6a39      	ldr	r1, [r7, #32]
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f000 fe79 	bl	800893a <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e01a      	b.n	8007c88 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2220      	movs	r2, #32
 8007c58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6859      	ldr	r1, [r3, #4]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	4b0b      	ldr	r3, [pc, #44]	@ (8007c94 <HAL_I2C_Master_Transmit+0x1e4>)
 8007c66:	400b      	ands	r3, r1
 8007c68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2220      	movs	r2, #32
 8007c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	e000      	b.n	8007c88 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007c86:	2302      	movs	r3, #2
  }
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	80002000 	.word	0x80002000
 8007c94:	fe00e800 	.word	0xfe00e800

08007c98 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d005      	beq.n	8007cc4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	68f9      	ldr	r1, [r7, #12]
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	4798      	blx	r3
  }
}
 8007cc4:	bf00      	nop
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00f      	beq.n	8007d0e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00a      	beq.n	8007d0e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cfc:	f043 0201 	orr.w	r2, r3, #1
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d0c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00f      	beq.n	8007d38 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00a      	beq.n	8007d38 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d26:	f043 0208 	orr.w	r2, r3, #8
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007d36:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00f      	beq.n	8007d62 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00a      	beq.n	8007d62 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d50:	f043 0202 	orr.w	r2, r3, #2
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d60:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f003 030b 	and.w	r3, r3, #11
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8007d72:	68f9      	ldr	r1, [r7, #12]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fbe7 	bl	8008548 <I2C_ITError>
  }
}
 8007d7a:	bf00      	nop
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b083      	sub	sp, #12
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007d8a:	bf00      	nop
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b083      	sub	sp, #12
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b083      	sub	sp, #12
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	460b      	mov	r3, r1
 8007db4:	70fb      	strb	r3, [r7, #3]
 8007db6:	4613      	mov	r3, r2
 8007db8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007dce:	bf00      	nop
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b083      	sub	sp, #12
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007de2:	bf00      	nop
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007df6:	bf00      	nop
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b086      	sub	sp, #24
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	60f8      	str	r0, [r7, #12]
 8007e0a:	60b9      	str	r1, [r7, #8]
 8007e0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e12:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d101      	bne.n	8007e26 <I2C_Slave_ISR_IT+0x24>
 8007e22:	2302      	movs	r3, #2
 8007e24:	e0e2      	b.n	8007fec <I2C_Slave_ISR_IT+0x1ea>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	f003 0320 	and.w	r3, r3, #32
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d009      	beq.n	8007e4c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d004      	beq.n	8007e4c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007e42:	6939      	ldr	r1, [r7, #16]
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 f9b5 	bl	80081b4 <I2C_ITSlaveCplt>
 8007e4a:	e0ca      	b.n	8007fe2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	f003 0310 	and.w	r3, r3, #16
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d04b      	beq.n	8007eee <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d046      	beq.n	8007eee <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d128      	bne.n	8007ebc <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b28      	cmp	r3, #40	@ 0x28
 8007e74:	d108      	bne.n	8007e88 <I2C_Slave_ISR_IT+0x86>
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e7c:	d104      	bne.n	8007e88 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007e7e:	6939      	ldr	r1, [r7, #16]
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f000 fb0d 	bl	80084a0 <I2C_ITListenCplt>
 8007e86:	e031      	b.n	8007eec <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b29      	cmp	r3, #41	@ 0x29
 8007e92:	d10e      	bne.n	8007eb2 <I2C_Slave_ISR_IT+0xb0>
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007e9a:	d00a      	beq.n	8007eb2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2210      	movs	r2, #16
 8007ea2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 fc66 	bl	8008776 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 f926 	bl	80080fc <I2C_ITSlaveSeqCplt>
 8007eb0:	e01c      	b.n	8007eec <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2210      	movs	r2, #16
 8007eb8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007eba:	e08f      	b.n	8007fdc <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2210      	movs	r2, #16
 8007ec2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec8:	f043 0204 	orr.w	r2, r3, #4
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <I2C_Slave_ISR_IT+0xdc>
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007edc:	d17e      	bne.n	8007fdc <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f000 fb2f 	bl	8008548 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007eea:	e077      	b.n	8007fdc <I2C_Slave_ISR_IT+0x1da>
 8007eec:	e076      	b.n	8007fdc <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	f003 0304 	and.w	r3, r3, #4
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d02f      	beq.n	8007f58 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d02a      	beq.n	8007f58 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d018      	beq.n	8007f3e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f16:	b2d2      	uxtb	r2, r2
 8007f18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f1e:	1c5a      	adds	r2, r3, #1
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	3b01      	subs	r3, #1
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d14b      	bne.n	8007fe0 <I2C_Slave_ISR_IT+0x1de>
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f4e:	d047      	beq.n	8007fe0 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 f8d3 	bl	80080fc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007f56:	e043      	b.n	8007fe0 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	f003 0308 	and.w	r3, r3, #8
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d009      	beq.n	8007f76 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d004      	beq.n	8007f76 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007f6c:	6939      	ldr	r1, [r7, #16]
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 f840 	bl	8007ff4 <I2C_ITAddrCplt>
 8007f74:	e035      	b.n	8007fe2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	f003 0302 	and.w	r3, r3, #2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d030      	beq.n	8007fe2 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d02b      	beq.n	8007fe2 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d018      	beq.n	8007fc6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f98:	781a      	ldrb	r2, [r3, #0]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007fc4:	e00d      	b.n	8007fe2 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fcc:	d002      	beq.n	8007fd4 <I2C_Slave_ISR_IT+0x1d2>
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d106      	bne.n	8007fe2 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f000 f891 	bl	80080fc <I2C_ITSlaveSeqCplt>
 8007fda:	e002      	b.n	8007fe2 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8007fdc:	bf00      	nop
 8007fde:	e000      	b.n	8007fe2 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8007fe0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008004:	b2db      	uxtb	r3, r3
 8008006:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800800a:	2b28      	cmp	r3, #40	@ 0x28
 800800c:	d16a      	bne.n	80080e4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	0c1b      	lsrs	r3, r3, #16
 8008016:	b2db      	uxtb	r3, r3
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	0c1b      	lsrs	r3, r3, #16
 8008026:	b29b      	uxth	r3, r3
 8008028:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800802c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	b29b      	uxth	r3, r3
 8008036:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800803a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	b29b      	uxth	r3, r3
 8008044:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008048:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	2b02      	cmp	r3, #2
 8008050:	d138      	bne.n	80080c4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008052:	897b      	ldrh	r3, [r7, #10]
 8008054:	09db      	lsrs	r3, r3, #7
 8008056:	b29a      	uxth	r2, r3
 8008058:	89bb      	ldrh	r3, [r7, #12]
 800805a:	4053      	eors	r3, r2
 800805c:	b29b      	uxth	r3, r3
 800805e:	f003 0306 	and.w	r3, r3, #6
 8008062:	2b00      	cmp	r3, #0
 8008064:	d11c      	bne.n	80080a0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008066:	897b      	ldrh	r3, [r7, #10]
 8008068:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800806e:	1c5a      	adds	r2, r3, #1
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008078:	2b02      	cmp	r3, #2
 800807a:	d13b      	bne.n	80080f4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2208      	movs	r2, #8
 8008088:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008092:	89ba      	ldrh	r2, [r7, #12]
 8008094:	7bfb      	ldrb	r3, [r7, #15]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff fe86 	bl	8007daa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800809e:	e029      	b.n	80080f4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80080a0:	893b      	ldrh	r3, [r7, #8]
 80080a2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80080a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fd9b 	bl	8008be4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80080b6:	89ba      	ldrh	r2, [r7, #12]
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7ff fe74 	bl	8007daa <HAL_I2C_AddrCallback>
}
 80080c2:	e017      	b.n	80080f4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80080c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fd8b 	bl	8008be4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80080d6:	89ba      	ldrh	r2, [r7, #12]
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
 80080da:	4619      	mov	r1, r3
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7ff fe64 	bl	8007daa <HAL_I2C_AddrCallback>
}
 80080e2:	e007      	b.n	80080f4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2208      	movs	r2, #8
 80080ea:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80080f4:	bf00      	nop
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d008      	beq.n	8008130 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	e00c      	b.n	800814a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d007      	beq.n	800814a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008148:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b29      	cmp	r3, #41	@ 0x29
 8008154:	d112      	bne.n	800817c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2228      	movs	r2, #40	@ 0x28
 800815a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2221      	movs	r2, #33	@ 0x21
 8008162:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008164:	2101      	movs	r1, #1
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fd3c 	bl	8008be4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7ff fe04 	bl	8007d82 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800817a:	e017      	b.n	80081ac <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b2a      	cmp	r3, #42	@ 0x2a
 8008186:	d111      	bne.n	80081ac <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2228      	movs	r2, #40	@ 0x28
 800818c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2222      	movs	r2, #34	@ 0x22
 8008194:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008196:	2102      	movs	r1, #2
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fd23 	bl	8008be4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7ff fdf5 	bl	8007d96 <HAL_I2C_SlaveRxCpltCallback>
}
 80081ac:	bf00      	nop
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80081b4:	b590      	push	{r4, r7, lr}
 80081b6:	b087      	sub	sp, #28
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ce:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081d6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2220      	movs	r2, #32
 80081de:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80081e0:	7afb      	ldrb	r3, [r7, #11]
 80081e2:	2b21      	cmp	r3, #33	@ 0x21
 80081e4:	d002      	beq.n	80081ec <I2C_ITSlaveCplt+0x38>
 80081e6:	7afb      	ldrb	r3, [r7, #11]
 80081e8:	2b29      	cmp	r3, #41	@ 0x29
 80081ea:	d108      	bne.n	80081fe <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80081ec:	f248 0101 	movw	r1, #32769	@ 0x8001
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fcf7 	bl	8008be4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2221      	movs	r2, #33	@ 0x21
 80081fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80081fc:	e019      	b.n	8008232 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80081fe:	7afb      	ldrb	r3, [r7, #11]
 8008200:	2b22      	cmp	r3, #34	@ 0x22
 8008202:	d002      	beq.n	800820a <I2C_ITSlaveCplt+0x56>
 8008204:	7afb      	ldrb	r3, [r7, #11]
 8008206:	2b2a      	cmp	r3, #42	@ 0x2a
 8008208:	d108      	bne.n	800821c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800820a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fce8 	bl	8008be4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2222      	movs	r2, #34	@ 0x22
 8008218:	631a      	str	r2, [r3, #48]	@ 0x30
 800821a:	e00a      	b.n	8008232 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800821c:	7afb      	ldrb	r3, [r7, #11]
 800821e:	2b28      	cmp	r3, #40	@ 0x28
 8008220:	d107      	bne.n	8008232 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008222:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fcdc 	bl	8008be4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	685a      	ldr	r2, [r3, #4]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008240:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6859      	ldr	r1, [r3, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	4b92      	ldr	r3, [pc, #584]	@ (8008498 <I2C_ITSlaveCplt+0x2e4>)
 800824e:	400b      	ands	r3, r1
 8008250:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fa8f 	bl	8008776 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d01c      	beq.n	800829c <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008270:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008276:	2b00      	cmp	r3, #0
 8008278:	d031      	beq.n	80082de <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008282:	b29c      	uxth	r4, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008288:	4618      	mov	r0, r3
 800828a:	f7fe fc49 	bl	8006b20 <HAL_DMAEx_GetFifoLevel>
 800828e:	4603      	mov	r3, r0
 8008290:	b29b      	uxth	r3, r3
 8008292:	4423      	add	r3, r4
 8008294:	b29a      	uxth	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800829a:	e020      	b.n	80082de <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d01b      	beq.n	80082de <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80082b4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00f      	beq.n	80082de <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082c6:	b29c      	uxth	r4, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fe fc27 	bl	8006b20 <HAL_DMAEx_GetFifoLevel>
 80082d2:	4603      	mov	r3, r0
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	4423      	add	r3, r4
 80082d8:	b29a      	uxth	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d020      	beq.n	800832a <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f023 0304 	bic.w	r3, r3, #4
 80082ee:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082fa:	b2d2      	uxtb	r2, r2
 80082fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008302:	1c5a      	adds	r2, r3, #1
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00c      	beq.n	800832a <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008314:	3b01      	subs	r3, #1
 8008316:	b29a      	uxth	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008320:	b29b      	uxth	r3, r3
 8008322:	3b01      	subs	r3, #1
 8008324:	b29a      	uxth	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800832e:	b29b      	uxth	r3, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	d005      	beq.n	8008340 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008338:	f043 0204 	orr.w	r2, r3, #4
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f003 0310 	and.w	r3, r3, #16
 8008346:	2b00      	cmp	r3, #0
 8008348:	d049      	beq.n	80083de <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008350:	2b00      	cmp	r3, #0
 8008352:	d044      	beq.n	80083de <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008358:	b29b      	uxth	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d128      	bne.n	80083b0 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b28      	cmp	r3, #40	@ 0x28
 8008368:	d108      	bne.n	800837c <I2C_ITSlaveCplt+0x1c8>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008370:	d104      	bne.n	800837c <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008372:	6979      	ldr	r1, [r7, #20]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f893 	bl	80084a0 <I2C_ITListenCplt>
 800837a:	e030      	b.n	80083de <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b29      	cmp	r3, #41	@ 0x29
 8008386:	d10e      	bne.n	80083a6 <I2C_ITSlaveCplt+0x1f2>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800838e:	d00a      	beq.n	80083a6 <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2210      	movs	r2, #16
 8008396:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f9ec 	bl	8008776 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f7ff feac 	bl	80080fc <I2C_ITSlaveSeqCplt>
 80083a4:	e01b      	b.n	80083de <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2210      	movs	r2, #16
 80083ac:	61da      	str	r2, [r3, #28]
 80083ae:	e016      	b.n	80083de <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2210      	movs	r2, #16
 80083b6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083bc:	f043 0204 	orr.w	r2, r3, #4
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d003      	beq.n	80083d2 <I2C_ITSlaveCplt+0x21e>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80083d0:	d105      	bne.n	80083de <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f8b5 	bl	8008548 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d010      	beq.n	8008416 <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f8a4 	bl	8008548 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b28      	cmp	r3, #40	@ 0x28
 800840a:	d141      	bne.n	8008490 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800840c:	6979      	ldr	r1, [r7, #20]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f846 	bl	80084a0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008414:	e03c      	b.n	8008490 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800841a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800841e:	d014      	beq.n	800844a <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7ff fe6b 	bl	80080fc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a1c      	ldr	r2, [pc, #112]	@ (800849c <I2C_ITSlaveCplt+0x2e8>)
 800842a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2220      	movs	r2, #32
 8008430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff fcbf 	bl	8007dc6 <HAL_I2C_ListenCpltCallback>
}
 8008448:	e022      	b.n	8008490 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b22      	cmp	r3, #34	@ 0x22
 8008454:	d10e      	bne.n	8008474 <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2220      	movs	r2, #32
 800845a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7ff fc92 	bl	8007d96 <HAL_I2C_SlaveRxCpltCallback>
}
 8008472:	e00d      	b.n	8008490 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2220      	movs	r2, #32
 8008478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7ff fc79 	bl	8007d82 <HAL_I2C_SlaveTxCpltCallback>
}
 8008490:	bf00      	nop
 8008492:	371c      	adds	r7, #28
 8008494:	46bd      	mov	sp, r7
 8008496:	bd90      	pop	{r4, r7, pc}
 8008498:	fe00e800 	.word	0xfe00e800
 800849c:	ffff0000 	.word	0xffff0000

080084a0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a25      	ldr	r2, [pc, #148]	@ (8008544 <I2C_ITListenCplt+0xa4>)
 80084ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2220      	movs	r2, #32
 80084ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	f003 0304 	and.w	r3, r3, #4
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d022      	beq.n	800851c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e0:	b2d2      	uxtb	r2, r2
 80084e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e8:	1c5a      	adds	r2, r3, #1
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d012      	beq.n	800851c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084fa:	3b01      	subs	r3, #1
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008506:	b29b      	uxth	r3, r3
 8008508:	3b01      	subs	r3, #1
 800850a:	b29a      	uxth	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008514:	f043 0204 	orr.w	r2, r3, #4
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800851c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fb5f 	bl	8008be4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2210      	movs	r2, #16
 800852c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff fc45 	bl	8007dc6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800853c:	bf00      	nop
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	ffff0000 	.word	0xffff0000

08008548 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008558:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a6d      	ldr	r2, [pc, #436]	@ (800871c <I2C_ITError+0x1d4>)
 8008566:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	431a      	orrs	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800857a:	7bfb      	ldrb	r3, [r7, #15]
 800857c:	2b28      	cmp	r3, #40	@ 0x28
 800857e:	d005      	beq.n	800858c <I2C_ITError+0x44>
 8008580:	7bfb      	ldrb	r3, [r7, #15]
 8008582:	2b29      	cmp	r3, #41	@ 0x29
 8008584:	d002      	beq.n	800858c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	2b2a      	cmp	r3, #42	@ 0x2a
 800858a:	d10b      	bne.n	80085a4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800858c:	2103      	movs	r1, #3
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fb28 	bl	8008be4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2228      	movs	r2, #40	@ 0x28
 8008598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a60      	ldr	r2, [pc, #384]	@ (8008720 <I2C_ITError+0x1d8>)
 80085a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80085a2:	e030      	b.n	8008606 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80085a4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fb1b 	bl	8008be4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f8e1 	bl	8008776 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b60      	cmp	r3, #96	@ 0x60
 80085be:	d01f      	beq.n	8008600 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2220      	movs	r2, #32
 80085c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	f003 0320 	and.w	r3, r3, #32
 80085d2:	2b20      	cmp	r3, #32
 80085d4:	d114      	bne.n	8008600 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	f003 0310 	and.w	r3, r3, #16
 80085e0:	2b10      	cmp	r3, #16
 80085e2:	d109      	bne.n	80085f8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2210      	movs	r2, #16
 80085ea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085f0:	f043 0204 	orr.w	r2, r3, #4
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2220      	movs	r2, #32
 80085fe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800860a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008610:	2b00      	cmp	r3, #0
 8008612:	d039      	beq.n	8008688 <I2C_ITError+0x140>
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	2b11      	cmp	r3, #17
 8008618:	d002      	beq.n	8008620 <I2C_ITError+0xd8>
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2b21      	cmp	r3, #33	@ 0x21
 800861e:	d133      	bne.n	8008688 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800862a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800862e:	d107      	bne.n	8008640 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800863e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008644:	4618      	mov	r0, r3
 8008646:	f7fd fabf 	bl	8005bc8 <HAL_DMA_GetState>
 800864a:	4603      	mov	r3, r0
 800864c:	2b01      	cmp	r3, #1
 800864e:	d017      	beq.n	8008680 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008654:	4a33      	ldr	r2, [pc, #204]	@ (8008724 <I2C_ITError+0x1dc>)
 8008656:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008664:	4618      	mov	r0, r3
 8008666:	f7fd f925 	bl	80058b4 <HAL_DMA_Abort_IT>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d04d      	beq.n	800870c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008674:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800867a:	4610      	mov	r0, r2
 800867c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800867e:	e045      	b.n	800870c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f851 	bl	8008728 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008686:	e041      	b.n	800870c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800868c:	2b00      	cmp	r3, #0
 800868e:	d039      	beq.n	8008704 <I2C_ITError+0x1bc>
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	2b12      	cmp	r3, #18
 8008694:	d002      	beq.n	800869c <I2C_ITError+0x154>
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	2b22      	cmp	r3, #34	@ 0x22
 800869a:	d133      	bne.n	8008704 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80086a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086aa:	d107      	bne.n	80086bc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80086ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fd fa81 	bl	8005bc8 <HAL_DMA_GetState>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d017      	beq.n	80086fc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086d0:	4a14      	ldr	r2, [pc, #80]	@ (8008724 <I2C_ITError+0x1dc>)
 80086d2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7fd f8e7 	bl	80058b4 <HAL_DMA_Abort_IT>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d011      	beq.n	8008710 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80086f6:	4610      	mov	r0, r2
 80086f8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086fa:	e009      	b.n	8008710 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f813 	bl	8008728 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008702:	e005      	b.n	8008710 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f80f 	bl	8008728 <I2C_TreatErrorCallback>
  }
}
 800870a:	e002      	b.n	8008712 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800870c:	bf00      	nop
 800870e:	e000      	b.n	8008712 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008710:	bf00      	nop
}
 8008712:	bf00      	nop
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	ffff0000 	.word	0xffff0000
 8008720:	08007e03 	.word	0x08007e03
 8008724:	080087bf 	.word	0x080087bf

08008728 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b60      	cmp	r3, #96	@ 0x60
 800873a:	d10e      	bne.n	800875a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2220      	movs	r2, #32
 8008740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7ff fb4b 	bl	8007dee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008758:	e009      	b.n	800876e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7ff fb36 	bl	8007dda <HAL_I2C_ErrorCallback>
}
 800876e:	bf00      	nop
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008776:	b480      	push	{r7}
 8008778:	b083      	sub	sp, #12
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	699b      	ldr	r3, [r3, #24]
 8008784:	f003 0302 	and.w	r3, r3, #2
 8008788:	2b02      	cmp	r3, #2
 800878a:	d103      	bne.n	8008794 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2200      	movs	r2, #0
 8008792:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d007      	beq.n	80087b2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	699a      	ldr	r2, [r3, #24]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f042 0201 	orr.w	r2, r2, #1
 80087b0:	619a      	str	r2, [r3, #24]
  }
}
 80087b2:	bf00      	nop
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b084      	sub	sp, #16
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d003      	beq.n	80087dc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d8:	2200      	movs	r2, #0
 80087da:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d003      	beq.n	80087ec <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087e8:	2200      	movs	r2, #0
 80087ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f7ff ff9b 	bl	8008728 <I2C_TreatErrorCallback>
}
 80087f2:	bf00      	nop
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b084      	sub	sp, #16
 80087fe:	af00      	add	r7, sp, #0
 8008800:	60f8      	str	r0, [r7, #12]
 8008802:	60b9      	str	r1, [r7, #8]
 8008804:	603b      	str	r3, [r7, #0]
 8008806:	4613      	mov	r3, r2
 8008808:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800880a:	e03b      	b.n	8008884 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f000 f8d5 	bl	80089c0 <I2C_IsErrorOccurred>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e041      	b.n	80088a4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008826:	d02d      	beq.n	8008884 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008828:	f7fa fa58 	bl	8002cdc <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	429a      	cmp	r2, r3
 8008836:	d302      	bcc.n	800883e <I2C_WaitOnFlagUntilTimeout+0x44>
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d122      	bne.n	8008884 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	699a      	ldr	r2, [r3, #24]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	4013      	ands	r3, r2
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	429a      	cmp	r2, r3
 800884c:	bf0c      	ite	eq
 800884e:	2301      	moveq	r3, #1
 8008850:	2300      	movne	r3, #0
 8008852:	b2db      	uxtb	r3, r3
 8008854:	461a      	mov	r2, r3
 8008856:	79fb      	ldrb	r3, [r7, #7]
 8008858:	429a      	cmp	r2, r3
 800885a:	d113      	bne.n	8008884 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008860:	f043 0220 	orr.w	r2, r3, #32
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2220      	movs	r2, #32
 800886c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e00f      	b.n	80088a4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	699a      	ldr	r2, [r3, #24]
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	4013      	ands	r3, r2
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	429a      	cmp	r2, r3
 8008892:	bf0c      	ite	eq
 8008894:	2301      	moveq	r3, #1
 8008896:	2300      	movne	r3, #0
 8008898:	b2db      	uxtb	r3, r3
 800889a:	461a      	mov	r2, r3
 800889c:	79fb      	ldrb	r3, [r7, #7]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d0b4      	beq.n	800880c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80088b8:	e033      	b.n	8008922 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	68b9      	ldr	r1, [r7, #8]
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f000 f87e 	bl	80089c0 <I2C_IsErrorOccurred>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e031      	b.n	8008932 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d4:	d025      	beq.n	8008922 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088d6:	f7fa fa01 	bl	8002cdc <HAL_GetTick>
 80088da:	4602      	mov	r2, r0
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d302      	bcc.n	80088ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d11a      	bne.n	8008922 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	f003 0302 	and.w	r3, r3, #2
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d013      	beq.n	8008922 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088fe:	f043 0220 	orr.w	r2, r3, #32
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2220      	movs	r2, #32
 800890a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e007      	b.n	8008932 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	f003 0302 	and.w	r3, r3, #2
 800892c:	2b02      	cmp	r3, #2
 800892e:	d1c4      	bne.n	80088ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b084      	sub	sp, #16
 800893e:	af00      	add	r7, sp, #0
 8008940:	60f8      	str	r0, [r7, #12]
 8008942:	60b9      	str	r1, [r7, #8]
 8008944:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008946:	e02f      	b.n	80089a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	68b9      	ldr	r1, [r7, #8]
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 f837 	bl	80089c0 <I2C_IsErrorOccurred>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e02d      	b.n	80089b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800895c:	f7fa f9be 	bl	8002cdc <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	68ba      	ldr	r2, [r7, #8]
 8008968:	429a      	cmp	r2, r3
 800896a:	d302      	bcc.n	8008972 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d11a      	bne.n	80089a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	f003 0320 	and.w	r3, r3, #32
 800897c:	2b20      	cmp	r3, #32
 800897e:	d013      	beq.n	80089a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008984:	f043 0220 	orr.w	r2, r3, #32
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2220      	movs	r2, #32
 8008990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e007      	b.n	80089b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	f003 0320 	and.w	r3, r3, #32
 80089b2:	2b20      	cmp	r3, #32
 80089b4:	d1c8      	bne.n	8008948 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b08a      	sub	sp, #40	@ 0x28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	f003 0310 	and.w	r3, r3, #16
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d068      	beq.n	8008abe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2210      	movs	r2, #16
 80089f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80089f4:	e049      	b.n	8008a8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fc:	d045      	beq.n	8008a8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80089fe:	f7fa f96d 	bl	8002cdc <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d302      	bcc.n	8008a14 <I2C_IsErrorOccurred+0x54>
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d13a      	bne.n	8008a8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a36:	d121      	bne.n	8008a7c <I2C_IsErrorOccurred+0xbc>
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a3e:	d01d      	beq.n	8008a7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008a40:	7cfb      	ldrb	r3, [r7, #19]
 8008a42:	2b20      	cmp	r3, #32
 8008a44:	d01a      	beq.n	8008a7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008a56:	f7fa f941 	bl	8002cdc <HAL_GetTick>
 8008a5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a5c:	e00e      	b.n	8008a7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008a5e:	f7fa f93d 	bl	8002cdc <HAL_GetTick>
 8008a62:	4602      	mov	r2, r0
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	2b19      	cmp	r3, #25
 8008a6a:	d907      	bls.n	8008a7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	f043 0320 	orr.w	r3, r3, #32
 8008a72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008a7a:	e006      	b.n	8008a8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	f003 0320 	and.w	r3, r3, #32
 8008a86:	2b20      	cmp	r3, #32
 8008a88:	d1e9      	bne.n	8008a5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	f003 0320 	and.w	r3, r3, #32
 8008a94:	2b20      	cmp	r3, #32
 8008a96:	d003      	beq.n	8008aa0 <I2C_IsErrorOccurred+0xe0>
 8008a98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d0aa      	beq.n	80089f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d103      	bne.n	8008ab0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2220      	movs	r2, #32
 8008aae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	f043 0304 	orr.w	r3, r3, #4
 8008ab6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00b      	beq.n	8008ae8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	f043 0301 	orr.w	r3, r3, #1
 8008ad6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ae0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00b      	beq.n	8008b0a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008af2:	6a3b      	ldr	r3, [r7, #32]
 8008af4:	f043 0308 	orr.w	r3, r3, #8
 8008af8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008b02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00b      	beq.n	8008b2c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	f043 0302 	orr.w	r3, r3, #2
 8008b1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d01c      	beq.n	8008b6e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f7ff fe1e 	bl	8008776 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	6859      	ldr	r1, [r3, #4]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	4b0d      	ldr	r3, [pc, #52]	@ (8008b7c <I2C_IsErrorOccurred+0x1bc>)
 8008b46:	400b      	ands	r3, r1
 8008b48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b4e:	6a3b      	ldr	r3, [r7, #32]
 8008b50:	431a      	orrs	r2, r3
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2220      	movs	r2, #32
 8008b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3728      	adds	r7, #40	@ 0x28
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	fe00e800 	.word	0xfe00e800

08008b80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	607b      	str	r3, [r7, #4]
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	817b      	strh	r3, [r7, #10]
 8008b8e:	4613      	mov	r3, r2
 8008b90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b92:	897b      	ldrh	r3, [r7, #10]
 8008b94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b98:	7a7b      	ldrb	r3, [r7, #9]
 8008b9a:	041b      	lsls	r3, r3, #16
 8008b9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008ba0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008ba6:	6a3b      	ldr	r3, [r7, #32]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008bae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	685a      	ldr	r2, [r3, #4]
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	0d5b      	lsrs	r3, r3, #21
 8008bba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008bbe:	4b08      	ldr	r3, [pc, #32]	@ (8008be0 <I2C_TransferConfig+0x60>)
 8008bc0:	430b      	orrs	r3, r1
 8008bc2:	43db      	mvns	r3, r3
 8008bc4:	ea02 0103 	and.w	r1, r2, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	697a      	ldr	r2, [r7, #20]
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008bd2:	bf00      	nop
 8008bd4:	371c      	adds	r7, #28
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	03ff63ff 	.word	0x03ff63ff

08008be4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008bf4:	887b      	ldrh	r3, [r7, #2]
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00f      	beq.n	8008c1e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008c04:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008c12:	2b28      	cmp	r3, #40	@ 0x28
 8008c14:	d003      	beq.n	8008c1e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008c1c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008c1e:	887b      	ldrh	r3, [r7, #2]
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00f      	beq.n	8008c48 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008c2e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008c3c:	2b28      	cmp	r3, #40	@ 0x28
 8008c3e:	d003      	beq.n	8008c48 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008c46:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008c48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	da03      	bge.n	8008c58 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008c56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008c58:	887b      	ldrh	r3, [r7, #2]
 8008c5a:	2b10      	cmp	r3, #16
 8008c5c:	d103      	bne.n	8008c66 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008c64:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008c66:	887b      	ldrh	r3, [r7, #2]
 8008c68:	2b20      	cmp	r3, #32
 8008c6a:	d103      	bne.n	8008c74 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f043 0320 	orr.w	r3, r3, #32
 8008c72:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008c74:	887b      	ldrh	r3, [r7, #2]
 8008c76:	2b40      	cmp	r3, #64	@ 0x40
 8008c78:	d103      	bne.n	8008c82 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c80:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	6819      	ldr	r1, [r3, #0]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	43da      	mvns	r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	400a      	ands	r2, r1
 8008c92:	601a      	str	r2, [r3, #0]
}
 8008c94:	bf00      	nop
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2b20      	cmp	r3, #32
 8008cb4:	d138      	bne.n	8008d28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d101      	bne.n	8008cc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	e032      	b.n	8008d2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2224      	movs	r2, #36	@ 0x24
 8008cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f022 0201 	bic.w	r2, r2, #1
 8008ce2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008cf2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	6819      	ldr	r1, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	683a      	ldr	r2, [r7, #0]
 8008d00:	430a      	orrs	r2, r1
 8008d02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f042 0201 	orr.w	r2, r2, #1
 8008d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2220      	movs	r2, #32
 8008d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	e000      	b.n	8008d2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008d28:	2302      	movs	r3, #2
  }
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	370c      	adds	r7, #12
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b085      	sub	sp, #20
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	2b20      	cmp	r3, #32
 8008d4a:	d139      	bne.n	8008dc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d101      	bne.n	8008d5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008d56:	2302      	movs	r3, #2
 8008d58:	e033      	b.n	8008dc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2224      	movs	r2, #36	@ 0x24
 8008d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f022 0201 	bic.w	r2, r2, #1
 8008d78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008d88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	021b      	lsls	r3, r3, #8
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f042 0201 	orr.w	r2, r2, #1
 8008daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2220      	movs	r2, #32
 8008db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	e000      	b.n	8008dc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008dc0:	2302      	movs	r3, #2
  }
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
	...

08008dd0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8008ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8008e0c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d002      	beq.n	8008dee <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	73fb      	strb	r3, [r7, #15]
 8008dec:	e007      	b.n	8008dfe <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8008dee:	4b07      	ldr	r3, [pc, #28]	@ (8008e0c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f023 0204 	bic.w	r2, r3, #4
 8008df6:	4905      	ldr	r1, [pc, #20]	@ (8008e0c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	600b      	str	r3, [r1, #0]
  }

  return status;
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	40030400 	.word	0x40030400

08008e10 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8008e10:	b480      	push	{r7}
 8008e12:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8008e14:	4b05      	ldr	r3, [pc, #20]	@ (8008e2c <HAL_ICACHE_Enable+0x1c>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a04      	ldr	r2, [pc, #16]	@ (8008e2c <HAL_ICACHE_Enable+0x1c>)
 8008e1a:	f043 0301 	orr.w	r3, r3, #1
 8008e1e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	40030400 	.word	0x40030400

08008e30 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d101      	bne.n	8008e42 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e0bf      	b.n	8008fc2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d106      	bne.n	8008e5c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7f9 f898 	bl	8001f8c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	699a      	ldr	r2, [r3, #24]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008e72:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6999      	ldr	r1, [r3, #24]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008e88:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	430a      	orrs	r2, r1
 8008e96:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6899      	ldr	r1, [r3, #8]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	4b4a      	ldr	r3, [pc, #296]	@ (8008fcc <HAL_LTDC_Init+0x19c>)
 8008ea4:	400b      	ands	r3, r1
 8008ea6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	041b      	lsls	r3, r3, #16
 8008eae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	6899      	ldr	r1, [r3, #8]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	699a      	ldr	r2, [r3, #24]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	431a      	orrs	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	430a      	orrs	r2, r1
 8008ec4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68d9      	ldr	r1, [r3, #12]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	4b3e      	ldr	r3, [pc, #248]	@ (8008fcc <HAL_LTDC_Init+0x19c>)
 8008ed2:	400b      	ands	r3, r1
 8008ed4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	041b      	lsls	r3, r3, #16
 8008edc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68d9      	ldr	r1, [r3, #12]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a1a      	ldr	r2, [r3, #32]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	431a      	orrs	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	430a      	orrs	r2, r1
 8008ef2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6919      	ldr	r1, [r3, #16]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	4b33      	ldr	r3, [pc, #204]	@ (8008fcc <HAL_LTDC_Init+0x19c>)
 8008f00:	400b      	ands	r3, r1
 8008f02:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f08:	041b      	lsls	r3, r3, #16
 8008f0a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6919      	ldr	r1, [r3, #16]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	431a      	orrs	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	430a      	orrs	r2, r1
 8008f20:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	6959      	ldr	r1, [r3, #20]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	4b27      	ldr	r3, [pc, #156]	@ (8008fcc <HAL_LTDC_Init+0x19c>)
 8008f2e:	400b      	ands	r3, r1
 8008f30:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f36:	041b      	lsls	r3, r3, #16
 8008f38:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6959      	ldr	r1, [r3, #20]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	431a      	orrs	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008f56:	021b      	lsls	r3, r3, #8
 8008f58:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008f60:	041b      	lsls	r3, r3, #16
 8008f62:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8008f72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8008f86:	431a      	orrs	r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f042 0206 	orr.w	r2, r2, #6
 8008f9e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	699a      	ldr	r2, [r3, #24]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f042 0201 	orr.w	r2, r2, #1
 8008fae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	f000f800 	.word	0xf000f800

08008fd0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fde:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fe6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f003 0304 	and.w	r3, r3, #4
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d023      	beq.n	800903a <HAL_LTDC_IRQHandler+0x6a>
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	f003 0304 	and.w	r3, r3, #4
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d01e      	beq.n	800903a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f022 0204 	bic.w	r2, r2, #4
 800900a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2204      	movs	r2, #4
 8009012:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800901a:	f043 0201 	orr.w	r2, r3, #1
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2204      	movs	r2, #4
 8009028:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 f86f 	bl	8009118 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f003 0302 	and.w	r3, r3, #2
 8009040:	2b00      	cmp	r3, #0
 8009042:	d023      	beq.n	800908c <HAL_LTDC_IRQHandler+0xbc>
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	f003 0302 	and.w	r3, r3, #2
 800904a:	2b00      	cmp	r3, #0
 800904c:	d01e      	beq.n	800908c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f022 0202 	bic.w	r2, r2, #2
 800905c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2202      	movs	r2, #2
 8009064:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800906c:	f043 0202 	orr.w	r2, r3, #2
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2204      	movs	r2, #4
 800907a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f846 	bl	8009118 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	d01b      	beq.n	80090ce <HAL_LTDC_IRQHandler+0xfe>
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	f003 0301 	and.w	r3, r3, #1
 800909c:	2b00      	cmp	r3, #0
 800909e:	d016      	beq.n	80090ce <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f022 0201 	bic.w	r2, r2, #1
 80090ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2201      	movs	r2, #1
 80090b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f82f 	bl	800912c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f003 0308 	and.w	r3, r3, #8
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d01b      	beq.n	8009110 <HAL_LTDC_IRQHandler+0x140>
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	f003 0308 	and.w	r3, r3, #8
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d016      	beq.n	8009110 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f022 0208 	bic.w	r2, r2, #8
 80090f0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2208      	movs	r2, #8
 80090f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f818 	bl	8009140 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009110:	bf00      	nop
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009154:	b5b0      	push	{r4, r5, r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009166:	2b01      	cmp	r3, #1
 8009168:	d101      	bne.n	800916e <HAL_LTDC_ConfigLayer+0x1a>
 800916a:	2302      	movs	r3, #2
 800916c:	e02c      	b.n	80091c8 <HAL_LTDC_ConfigLayer+0x74>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2201      	movs	r2, #1
 8009172:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2202      	movs	r2, #2
 800917a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2134      	movs	r1, #52	@ 0x34
 8009184:	fb01 f303 	mul.w	r3, r1, r3
 8009188:	4413      	add	r3, r2
 800918a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	4614      	mov	r4, r2
 8009192:	461d      	mov	r5, r3
 8009194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800919a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800919c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800919e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091a0:	682b      	ldr	r3, [r5, #0]
 80091a2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	68b9      	ldr	r1, [r7, #8]
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f000 f811 	bl	80091d0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2201      	movs	r2, #1
 80091b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2201      	movs	r2, #1
 80091ba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bdb0      	pop	{r4, r5, r7, pc}

080091d0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b089      	sub	sp, #36	@ 0x24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	685a      	ldr	r2, [r3, #4]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	0c1b      	lsrs	r3, r3, #16
 80091e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091ec:	4413      	add	r3, r2
 80091ee:	041b      	lsls	r3, r3, #16
 80091f0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	461a      	mov	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	01db      	lsls	r3, r3, #7
 80091fc:	4413      	add	r3, r2
 80091fe:	3384      	adds	r3, #132	@ 0x84
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	6812      	ldr	r2, [r2, #0]
 8009206:	4611      	mov	r1, r2
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	01d2      	lsls	r2, r2, #7
 800920c:	440a      	add	r2, r1
 800920e:	3284      	adds	r2, #132	@ 0x84
 8009210:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8009214:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	0c1b      	lsrs	r3, r3, #16
 8009222:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009226:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009228:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4619      	mov	r1, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	01db      	lsls	r3, r3, #7
 8009234:	440b      	add	r3, r1
 8009236:	3384      	adds	r3, #132	@ 0x84
 8009238:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800923e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	68da      	ldr	r2, [r3, #12]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800924e:	4413      	add	r3, r2
 8009250:	041b      	lsls	r3, r3, #16
 8009252:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	461a      	mov	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	01db      	lsls	r3, r3, #7
 800925e:	4413      	add	r3, r2
 8009260:	3384      	adds	r3, #132	@ 0x84
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	6812      	ldr	r2, [r2, #0]
 8009268:	4611      	mov	r1, r2
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	01d2      	lsls	r2, r2, #7
 800926e:	440a      	add	r2, r1
 8009270:	3284      	adds	r2, #132	@ 0x84
 8009272:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8009276:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	689a      	ldr	r2, [r3, #8]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009286:	4413      	add	r3, r2
 8009288:	1c5a      	adds	r2, r3, #1
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4619      	mov	r1, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	01db      	lsls	r3, r3, #7
 8009294:	440b      	add	r3, r1
 8009296:	3384      	adds	r3, #132	@ 0x84
 8009298:	4619      	mov	r1, r3
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	4313      	orrs	r3, r2
 800929e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	461a      	mov	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	01db      	lsls	r3, r3, #7
 80092aa:	4413      	add	r3, r2
 80092ac:	3384      	adds	r3, #132	@ 0x84
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	6812      	ldr	r2, [r2, #0]
 80092b4:	4611      	mov	r1, r2
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	01d2      	lsls	r2, r2, #7
 80092ba:	440a      	add	r2, r1
 80092bc:	3284      	adds	r2, #132	@ 0x84
 80092be:	f023 0307 	bic.w	r3, r3, #7
 80092c2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	461a      	mov	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	01db      	lsls	r3, r3, #7
 80092ce:	4413      	add	r3, r2
 80092d0:	3384      	adds	r3, #132	@ 0x84
 80092d2:	461a      	mov	r2, r3
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80092e0:	021b      	lsls	r3, r3, #8
 80092e2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80092ea:	041b      	lsls	r3, r3, #16
 80092ec:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	699b      	ldr	r3, [r3, #24]
 80092f2:	061b      	lsls	r3, r3, #24
 80092f4:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80092fc:	461a      	mov	r2, r3
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	431a      	orrs	r2, r3
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	431a      	orrs	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4619      	mov	r1, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	01db      	lsls	r3, r3, #7
 8009310:	440b      	add	r3, r1
 8009312:	3384      	adds	r3, #132	@ 0x84
 8009314:	4619      	mov	r1, r3
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	4313      	orrs	r3, r2
 800931a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	461a      	mov	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	01db      	lsls	r3, r3, #7
 8009326:	4413      	add	r3, r2
 8009328:	3384      	adds	r3, #132	@ 0x84
 800932a:	695b      	ldr	r3, [r3, #20]
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	6812      	ldr	r2, [r2, #0]
 8009330:	4611      	mov	r1, r2
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	01d2      	lsls	r2, r2, #7
 8009336:	440a      	add	r2, r1
 8009338:	3284      	adds	r2, #132	@ 0x84
 800933a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800933e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	461a      	mov	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	01db      	lsls	r3, r3, #7
 800934a:	4413      	add	r3, r2
 800934c:	3384      	adds	r3, #132	@ 0x84
 800934e:	461a      	mov	r2, r3
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	695b      	ldr	r3, [r3, #20]
 8009354:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	461a      	mov	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	01db      	lsls	r3, r3, #7
 8009360:	4413      	add	r3, r2
 8009362:	3384      	adds	r3, #132	@ 0x84
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	6812      	ldr	r2, [r2, #0]
 800936a:	4611      	mov	r1, r2
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	01d2      	lsls	r2, r2, #7
 8009370:	440a      	add	r2, r1
 8009372:	3284      	adds	r2, #132	@ 0x84
 8009374:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009378:	f023 0307 	bic.w	r3, r3, #7
 800937c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	69da      	ldr	r2, [r3, #28]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	6a1b      	ldr	r3, [r3, #32]
 8009386:	68f9      	ldr	r1, [r7, #12]
 8009388:	6809      	ldr	r1, [r1, #0]
 800938a:	4608      	mov	r0, r1
 800938c:	6879      	ldr	r1, [r7, #4]
 800938e:	01c9      	lsls	r1, r1, #7
 8009390:	4401      	add	r1, r0
 8009392:	3184      	adds	r1, #132	@ 0x84
 8009394:	4313      	orrs	r3, r2
 8009396:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	461a      	mov	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	01db      	lsls	r3, r3, #7
 80093a2:	4413      	add	r3, r2
 80093a4:	3384      	adds	r3, #132	@ 0x84
 80093a6:	461a      	mov	r2, r3
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ac:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d102      	bne.n	80093bc <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 80093b6:	2304      	movs	r3, #4
 80093b8:	61fb      	str	r3, [r7, #28]
 80093ba:	e01b      	b.n	80093f4 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d102      	bne.n	80093ca <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 80093c4:	2303      	movs	r3, #3
 80093c6:	61fb      	str	r3, [r7, #28]
 80093c8:	e014      	b.n	80093f4 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	2b04      	cmp	r3, #4
 80093d0:	d00b      	beq.n	80093ea <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d007      	beq.n	80093ea <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80093de:	2b03      	cmp	r3, #3
 80093e0:	d003      	beq.n	80093ea <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80093e6:	2b07      	cmp	r3, #7
 80093e8:	d102      	bne.n	80093f0 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 80093ea:	2302      	movs	r3, #2
 80093ec:	61fb      	str	r3, [r7, #28]
 80093ee:	e001      	b.n	80093f4 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 80093f0:	2301      	movs	r3, #1
 80093f2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	461a      	mov	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	01db      	lsls	r3, r3, #7
 80093fe:	4413      	add	r3, r2
 8009400:	3384      	adds	r3, #132	@ 0x84
 8009402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	6812      	ldr	r2, [r2, #0]
 8009408:	4611      	mov	r1, r2
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	01d2      	lsls	r2, r2, #7
 800940e:	440a      	add	r2, r1
 8009410:	3284      	adds	r2, #132	@ 0x84
 8009412:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8009416:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800941c:	69fa      	ldr	r2, [r7, #28]
 800941e:	fb02 f303 	mul.w	r3, r2, r3
 8009422:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	6859      	ldr	r1, [r3, #4]
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	1acb      	subs	r3, r1, r3
 800942e:	69f9      	ldr	r1, [r7, #28]
 8009430:	fb01 f303 	mul.w	r3, r1, r3
 8009434:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009436:	68f9      	ldr	r1, [r7, #12]
 8009438:	6809      	ldr	r1, [r1, #0]
 800943a:	4608      	mov	r0, r1
 800943c:	6879      	ldr	r1, [r7, #4]
 800943e:	01c9      	lsls	r1, r1, #7
 8009440:	4401      	add	r1, r0
 8009442:	3184      	adds	r1, #132	@ 0x84
 8009444:	4313      	orrs	r3, r2
 8009446:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	461a      	mov	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	01db      	lsls	r3, r3, #7
 8009452:	4413      	add	r3, r2
 8009454:	3384      	adds	r3, #132	@ 0x84
 8009456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	6812      	ldr	r2, [r2, #0]
 800945c:	4611      	mov	r1, r2
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	01d2      	lsls	r2, r2, #7
 8009462:	440a      	add	r2, r1
 8009464:	3284      	adds	r2, #132	@ 0x84
 8009466:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800946a:	f023 0307 	bic.w	r3, r3, #7
 800946e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	461a      	mov	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	01db      	lsls	r3, r3, #7
 800947a:	4413      	add	r3, r2
 800947c:	3384      	adds	r3, #132	@ 0x84
 800947e:	461a      	mov	r2, r3
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009484:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	461a      	mov	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	01db      	lsls	r3, r3, #7
 8009490:	4413      	add	r3, r2
 8009492:	3384      	adds	r3, #132	@ 0x84
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	6812      	ldr	r2, [r2, #0]
 800949a:	4611      	mov	r1, r2
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	01d2      	lsls	r2, r2, #7
 80094a0:	440a      	add	r2, r1
 80094a2:	3284      	adds	r2, #132	@ 0x84
 80094a4:	f043 0301 	orr.w	r3, r3, #1
 80094a8:	6013      	str	r3, [r2, #0]
}
 80094aa:	bf00      	nop
 80094ac:	3724      	adds	r7, #36	@ 0x24
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b086      	sub	sp, #24
 80094ba:	af02      	add	r7, sp, #8
 80094bc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d101      	bne.n	80094c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e0fe      	b.n	80096c6 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d106      	bne.n	80094e2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f7f8 ffef 	bl	80024c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2203      	movs	r2, #3
 80094e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f008 f8a9 	bl	8011646 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6818      	ldr	r0, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	7c1a      	ldrb	r2, [r3, #16]
 80094fc:	f88d 2000 	strb.w	r2, [sp]
 8009500:	3304      	adds	r3, #4
 8009502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009504:	f008 f870 	bl	80115e8 <USB_CoreInit>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d005      	beq.n	800951a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2202      	movs	r2, #2
 8009512:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e0d5      	b.n	80096c6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2100      	movs	r1, #0
 8009520:	4618      	mov	r0, r3
 8009522:	f008 f8a1 	bl	8011668 <USB_SetCurrentMode>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d005      	beq.n	8009538 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2202      	movs	r2, #2
 8009530:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e0c6      	b.n	80096c6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009538:	2300      	movs	r3, #0
 800953a:	73fb      	strb	r3, [r7, #15]
 800953c:	e04a      	b.n	80095d4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800953e:	7bfa      	ldrb	r2, [r7, #15]
 8009540:	6879      	ldr	r1, [r7, #4]
 8009542:	4613      	mov	r3, r2
 8009544:	00db      	lsls	r3, r3, #3
 8009546:	4413      	add	r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	440b      	add	r3, r1
 800954c:	3315      	adds	r3, #21
 800954e:	2201      	movs	r2, #1
 8009550:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009552:	7bfa      	ldrb	r2, [r7, #15]
 8009554:	6879      	ldr	r1, [r7, #4]
 8009556:	4613      	mov	r3, r2
 8009558:	00db      	lsls	r3, r3, #3
 800955a:	4413      	add	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	440b      	add	r3, r1
 8009560:	3314      	adds	r3, #20
 8009562:	7bfa      	ldrb	r2, [r7, #15]
 8009564:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009566:	7bfa      	ldrb	r2, [r7, #15]
 8009568:	7bfb      	ldrb	r3, [r7, #15]
 800956a:	b298      	uxth	r0, r3
 800956c:	6879      	ldr	r1, [r7, #4]
 800956e:	4613      	mov	r3, r2
 8009570:	00db      	lsls	r3, r3, #3
 8009572:	4413      	add	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	440b      	add	r3, r1
 8009578:	332e      	adds	r3, #46	@ 0x2e
 800957a:	4602      	mov	r2, r0
 800957c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800957e:	7bfa      	ldrb	r2, [r7, #15]
 8009580:	6879      	ldr	r1, [r7, #4]
 8009582:	4613      	mov	r3, r2
 8009584:	00db      	lsls	r3, r3, #3
 8009586:	4413      	add	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	440b      	add	r3, r1
 800958c:	3318      	adds	r3, #24
 800958e:	2200      	movs	r2, #0
 8009590:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009592:	7bfa      	ldrb	r2, [r7, #15]
 8009594:	6879      	ldr	r1, [r7, #4]
 8009596:	4613      	mov	r3, r2
 8009598:	00db      	lsls	r3, r3, #3
 800959a:	4413      	add	r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	440b      	add	r3, r1
 80095a0:	331c      	adds	r3, #28
 80095a2:	2200      	movs	r2, #0
 80095a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80095a6:	7bfa      	ldrb	r2, [r7, #15]
 80095a8:	6879      	ldr	r1, [r7, #4]
 80095aa:	4613      	mov	r3, r2
 80095ac:	00db      	lsls	r3, r3, #3
 80095ae:	4413      	add	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	440b      	add	r3, r1
 80095b4:	3320      	adds	r3, #32
 80095b6:	2200      	movs	r2, #0
 80095b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80095ba:	7bfa      	ldrb	r2, [r7, #15]
 80095bc:	6879      	ldr	r1, [r7, #4]
 80095be:	4613      	mov	r3, r2
 80095c0:	00db      	lsls	r3, r3, #3
 80095c2:	4413      	add	r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	440b      	add	r3, r1
 80095c8:	3324      	adds	r3, #36	@ 0x24
 80095ca:	2200      	movs	r2, #0
 80095cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
 80095d0:	3301      	adds	r3, #1
 80095d2:	73fb      	strb	r3, [r7, #15]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	791b      	ldrb	r3, [r3, #4]
 80095d8:	7bfa      	ldrb	r2, [r7, #15]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d3af      	bcc.n	800953e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095de:	2300      	movs	r3, #0
 80095e0:	73fb      	strb	r3, [r7, #15]
 80095e2:	e044      	b.n	800966e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80095e4:	7bfa      	ldrb	r2, [r7, #15]
 80095e6:	6879      	ldr	r1, [r7, #4]
 80095e8:	4613      	mov	r3, r2
 80095ea:	00db      	lsls	r3, r3, #3
 80095ec:	4413      	add	r3, r2
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	440b      	add	r3, r1
 80095f2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80095f6:	2200      	movs	r2, #0
 80095f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80095fa:	7bfa      	ldrb	r2, [r7, #15]
 80095fc:	6879      	ldr	r1, [r7, #4]
 80095fe:	4613      	mov	r3, r2
 8009600:	00db      	lsls	r3, r3, #3
 8009602:	4413      	add	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	440b      	add	r3, r1
 8009608:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800960c:	7bfa      	ldrb	r2, [r7, #15]
 800960e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009610:	7bfa      	ldrb	r2, [r7, #15]
 8009612:	6879      	ldr	r1, [r7, #4]
 8009614:	4613      	mov	r3, r2
 8009616:	00db      	lsls	r3, r3, #3
 8009618:	4413      	add	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	440b      	add	r3, r1
 800961e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009622:	2200      	movs	r2, #0
 8009624:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009626:	7bfa      	ldrb	r2, [r7, #15]
 8009628:	6879      	ldr	r1, [r7, #4]
 800962a:	4613      	mov	r3, r2
 800962c:	00db      	lsls	r3, r3, #3
 800962e:	4413      	add	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	440b      	add	r3, r1
 8009634:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8009638:	2200      	movs	r2, #0
 800963a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800963c:	7bfa      	ldrb	r2, [r7, #15]
 800963e:	6879      	ldr	r1, [r7, #4]
 8009640:	4613      	mov	r3, r2
 8009642:	00db      	lsls	r3, r3, #3
 8009644:	4413      	add	r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	440b      	add	r3, r1
 800964a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800964e:	2200      	movs	r2, #0
 8009650:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009652:	7bfa      	ldrb	r2, [r7, #15]
 8009654:	6879      	ldr	r1, [r7, #4]
 8009656:	4613      	mov	r3, r2
 8009658:	00db      	lsls	r3, r3, #3
 800965a:	4413      	add	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	440b      	add	r3, r1
 8009660:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009664:	2200      	movs	r2, #0
 8009666:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009668:	7bfb      	ldrb	r3, [r7, #15]
 800966a:	3301      	adds	r3, #1
 800966c:	73fb      	strb	r3, [r7, #15]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	791b      	ldrb	r3, [r3, #4]
 8009672:	7bfa      	ldrb	r2, [r7, #15]
 8009674:	429a      	cmp	r2, r3
 8009676:	d3b5      	bcc.n	80095e4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6818      	ldr	r0, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	7c1a      	ldrb	r2, [r3, #16]
 8009680:	f88d 2000 	strb.w	r2, [sp]
 8009684:	3304      	adds	r3, #4
 8009686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009688:	f008 f83a 	bl	8011700 <USB_DevInit>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d005      	beq.n	800969e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2202      	movs	r2, #2
 8009696:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e013      	b.n	80096c6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	7b1b      	ldrb	r3, [r3, #12]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d102      	bne.n	80096ba <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f80a 	bl	80096ce <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4618      	mov	r0, r3
 80096c0:	f008 fa07 	bl	8011ad2 <USB_DevDisconnect>

  return HAL_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80096ce:	b480      	push	{r7}
 80096d0:	b085      	sub	sp, #20
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009700:	f043 0303 	orr.w	r3, r3, #3
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3714      	adds	r7, #20
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
	...

08009718 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009718:	b480      	push	{r7}
 800971a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800971c:	4b05      	ldr	r3, [pc, #20]	@ (8009734 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800971e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009720:	4a04      	ldr	r2, [pc, #16]	@ (8009734 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009722:	f043 0301 	orr.w	r3, r3, #1
 8009726:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8009728:	bf00      	nop
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	46020800 	.word	0x46020800

08009738 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8009740:	4b39      	ldr	r3, [pc, #228]	@ (8009828 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009744:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009748:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	429a      	cmp	r2, r3
 8009750:	d10b      	bne.n	800976a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009758:	d905      	bls.n	8009766 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800975a:	4b33      	ldr	r3, [pc, #204]	@ (8009828 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	4a32      	ldr	r2, [pc, #200]	@ (8009828 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009764:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	e057      	b.n	800981a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009770:	d90a      	bls.n	8009788 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8009772:	4b2d      	ldr	r3, [pc, #180]	@ (8009828 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4313      	orrs	r3, r2
 800977e:	4a2a      	ldr	r2, [pc, #168]	@ (8009828 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009780:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009784:	60d3      	str	r3, [r2, #12]
 8009786:	e007      	b.n	8009798 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8009788:	4b27      	ldr	r3, [pc, #156]	@ (8009828 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8009790:	4925      	ldr	r1, [pc, #148]	@ (8009828 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4313      	orrs	r3, r2
 8009796:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009798:	4b24      	ldr	r3, [pc, #144]	@ (800982c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a24      	ldr	r2, [pc, #144]	@ (8009830 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800979e:	fba2 2303 	umull	r2, r3, r2, r3
 80097a2:	099b      	lsrs	r3, r3, #6
 80097a4:	2232      	movs	r2, #50	@ 0x32
 80097a6:	fb02 f303 	mul.w	r3, r2, r3
 80097aa:	4a21      	ldr	r2, [pc, #132]	@ (8009830 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80097ac:	fba2 2303 	umull	r2, r3, r2, r3
 80097b0:	099b      	lsrs	r3, r3, #6
 80097b2:	3301      	adds	r3, #1
 80097b4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80097b6:	e002      	b.n	80097be <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	3b01      	subs	r3, #1
 80097bc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80097be:	4b1a      	ldr	r3, [pc, #104]	@ (8009828 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d102      	bne.n	80097d0 <HAL_PWREx_ControlVoltageScaling+0x98>
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1f3      	bne.n	80097b8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d01b      	beq.n	800980e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80097d6:	4b15      	ldr	r3, [pc, #84]	@ (800982c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a15      	ldr	r2, [pc, #84]	@ (8009830 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80097dc:	fba2 2303 	umull	r2, r3, r2, r3
 80097e0:	099b      	lsrs	r3, r3, #6
 80097e2:	2232      	movs	r2, #50	@ 0x32
 80097e4:	fb02 f303 	mul.w	r3, r2, r3
 80097e8:	4a11      	ldr	r2, [pc, #68]	@ (8009830 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80097ea:	fba2 2303 	umull	r2, r3, r2, r3
 80097ee:	099b      	lsrs	r3, r3, #6
 80097f0:	3301      	adds	r3, #1
 80097f2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80097f4:	e002      	b.n	80097fc <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3b01      	subs	r3, #1
 80097fa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80097fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009828 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80097fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009800:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009804:	2b00      	cmp	r3, #0
 8009806:	d102      	bne.n	800980e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d1f3      	bne.n	80097f6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d101      	bne.n	8009818 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	e000      	b.n	800981a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3714      	adds	r7, #20
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr
 8009826:	bf00      	nop
 8009828:	46020800 	.word	0x46020800
 800982c:	2000001c 	.word	0x2000001c
 8009830:	10624dd3 	.word	0x10624dd3

08009834 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009834:	b480      	push	{r7}
 8009836:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8009838:	4b04      	ldr	r3, [pc, #16]	@ (800984c <HAL_PWREx_GetVoltageRange+0x18>)
 800983a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800983c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8009840:	4618      	mov	r0, r3
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	46020800 	.word	0x46020800

08009850 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009858:	4b22      	ldr	r3, [pc, #136]	@ (80098e4 <HAL_PWREx_ConfigSupply+0x94>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a22      	ldr	r2, [pc, #136]	@ (80098e8 <HAL_PWREx_ConfigSupply+0x98>)
 800985e:	fba2 2303 	umull	r2, r3, r2, r3
 8009862:	099b      	lsrs	r3, r3, #6
 8009864:	2232      	movs	r2, #50	@ 0x32
 8009866:	fb02 f303 	mul.w	r3, r2, r3
 800986a:	4a1f      	ldr	r2, [pc, #124]	@ (80098e8 <HAL_PWREx_ConfigSupply+0x98>)
 800986c:	fba2 2303 	umull	r2, r3, r2, r3
 8009870:	099b      	lsrs	r3, r3, #6
 8009872:	3301      	adds	r3, #1
 8009874:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d113      	bne.n	80098a4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800987c:	4b1b      	ldr	r3, [pc, #108]	@ (80098ec <HAL_PWREx_ConfigSupply+0x9c>)
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	4a1a      	ldr	r2, [pc, #104]	@ (80098ec <HAL_PWREx_ConfigSupply+0x9c>)
 8009882:	f023 0302 	bic.w	r3, r3, #2
 8009886:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009888:	e002      	b.n	8009890 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	3b01      	subs	r3, #1
 800988e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009890:	4b16      	ldr	r3, [pc, #88]	@ (80098ec <HAL_PWREx_ConfigSupply+0x9c>)
 8009892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009894:	f003 0302 	and.w	r3, r3, #2
 8009898:	2b02      	cmp	r3, #2
 800989a:	d116      	bne.n	80098ca <HAL_PWREx_ConfigSupply+0x7a>
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1f3      	bne.n	800988a <HAL_PWREx_ConfigSupply+0x3a>
 80098a2:	e012      	b.n	80098ca <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80098a4:	4b11      	ldr	r3, [pc, #68]	@ (80098ec <HAL_PWREx_ConfigSupply+0x9c>)
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	4a10      	ldr	r2, [pc, #64]	@ (80098ec <HAL_PWREx_ConfigSupply+0x9c>)
 80098aa:	f043 0302 	orr.w	r3, r3, #2
 80098ae:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80098b0:	e002      	b.n	80098b8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	3b01      	subs	r3, #1
 80098b6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80098b8:	4b0c      	ldr	r3, [pc, #48]	@ (80098ec <HAL_PWREx_ConfigSupply+0x9c>)
 80098ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098bc:	f003 0302 	and.w	r3, r3, #2
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d102      	bne.n	80098ca <HAL_PWREx_ConfigSupply+0x7a>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1f3      	bne.n	80098b2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80098d0:	2303      	movs	r3, #3
 80098d2:	e000      	b.n	80098d6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	2000001c 	.word	0x2000001c
 80098e8:	10624dd3 	.word	0x10624dd3
 80098ec:	46020800 	.word	0x46020800

080098f0 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80098f0:	b480      	push	{r7}
 80098f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80098f4:	4b05      	ldr	r3, [pc, #20]	@ (800990c <HAL_PWREx_EnableVddUSB+0x1c>)
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	4a04      	ldr	r2, [pc, #16]	@ (800990c <HAL_PWREx_EnableVddUSB+0x1c>)
 80098fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098fe:	6113      	str	r3, [r2, #16]
}
 8009900:	bf00      	nop
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	46020800 	.word	0x46020800

08009910 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8009910:	b480      	push	{r7}
 8009912:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8009914:	4b05      	ldr	r3, [pc, #20]	@ (800992c <HAL_PWREx_EnableVddIO2+0x1c>)
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	4a04      	ldr	r2, [pc, #16]	@ (800992c <HAL_PWREx_EnableVddIO2+0x1c>)
 800991a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800991e:	6113      	str	r3, [r2, #16]
}
 8009920:	bf00      	nop
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr
 800992a:	bf00      	nop
 800992c:	46020800 	.word	0x46020800

08009930 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8009930:	b480      	push	{r7}
 8009932:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8009934:	4b05      	ldr	r3, [pc, #20]	@ (800994c <HAL_PWREx_EnableVddA+0x1c>)
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	4a04      	ldr	r2, [pc, #16]	@ (800994c <HAL_PWREx_EnableVddA+0x1c>)
 800993a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800993e:	6113      	str	r3, [r2, #16]
}
 8009940:	bf00      	nop
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	46020800 	.word	0x46020800

08009950 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 8009956:	f7ff ff6d 	bl	8009834 <HAL_PWREx_GetVoltageRange>
 800995a:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009962:	d003      	beq.n	800996c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800996a:	d107      	bne.n	800997c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 800996c:	4b06      	ldr	r3, [pc, #24]	@ (8009988 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	4a05      	ldr	r2, [pc, #20]	@ (8009988 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8009972:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8009976:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	e000      	b.n	800997e <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 800997c:	2301      	movs	r3, #1
}
 800997e:	4618      	mov	r0, r3
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	46020800 	.word	0x46020800

0800998c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b08e      	sub	sp, #56	@ 0x38
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8009994:	2300      	movs	r3, #0
 8009996:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d102      	bne.n	80099a6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	f000 bec8 	b.w	800a736 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099a6:	4b99      	ldr	r3, [pc, #612]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 80099a8:	69db      	ldr	r3, [r3, #28]
 80099aa:	f003 030c 	and.w	r3, r3, #12
 80099ae:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80099b0:	4b96      	ldr	r3, [pc, #600]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 80099b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099b4:	f003 0303 	and.w	r3, r3, #3
 80099b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 0310 	and.w	r3, r3, #16
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f000 816c 	beq.w	8009ca0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80099c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d007      	beq.n	80099de <HAL_RCC_OscConfig+0x52>
 80099ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d0:	2b0c      	cmp	r3, #12
 80099d2:	f040 80de 	bne.w	8009b92 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80099d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d8:	2b01      	cmp	r3, #1
 80099da:	f040 80da 	bne.w	8009b92 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	69db      	ldr	r3, [r3, #28]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d102      	bne.n	80099ec <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	f000 bea5 	b.w	800a736 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099f0:	4b86      	ldr	r3, [pc, #536]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d004      	beq.n	8009a06 <HAL_RCC_OscConfig+0x7a>
 80099fc:	4b83      	ldr	r3, [pc, #524]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009a04:	e005      	b.n	8009a12 <HAL_RCC_OscConfig+0x86>
 8009a06:	4b81      	ldr	r3, [pc, #516]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009a08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009a0c:	041b      	lsls	r3, r3, #16
 8009a0e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d255      	bcs.n	8009ac2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10a      	bne.n	8009a32 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a20:	4618      	mov	r0, r3
 8009a22:	f001 f9d9 	bl	800add8 <RCC_SetFlashLatencyFromMSIRange>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d002      	beq.n	8009a32 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	f000 be82 	b.w	800a736 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009a32:	4b76      	ldr	r3, [pc, #472]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	4a75      	ldr	r2, [pc, #468]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009a38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a3c:	6093      	str	r3, [r2, #8]
 8009a3e:	4b73      	ldr	r3, [pc, #460]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a4a:	4970      	ldr	r1, [pc, #448]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a54:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009a58:	d309      	bcc.n	8009a6e <HAL_RCC_OscConfig+0xe2>
 8009a5a:	4b6c      	ldr	r3, [pc, #432]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	f023 021f 	bic.w	r2, r3, #31
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	4969      	ldr	r1, [pc, #420]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	60cb      	str	r3, [r1, #12]
 8009a6c:	e07e      	b.n	8009b6c <HAL_RCC_OscConfig+0x1e0>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	da0a      	bge.n	8009a8c <HAL_RCC_OscConfig+0x100>
 8009a76:	4b65      	ldr	r3, [pc, #404]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	015b      	lsls	r3, r3, #5
 8009a84:	4961      	ldr	r1, [pc, #388]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009a86:	4313      	orrs	r3, r2
 8009a88:	60cb      	str	r3, [r1, #12]
 8009a8a:	e06f      	b.n	8009b6c <HAL_RCC_OscConfig+0x1e0>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a94:	d30a      	bcc.n	8009aac <HAL_RCC_OscConfig+0x120>
 8009a96:	4b5d      	ldr	r3, [pc, #372]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	029b      	lsls	r3, r3, #10
 8009aa4:	4959      	ldr	r1, [pc, #356]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	60cb      	str	r3, [r1, #12]
 8009aaa:	e05f      	b.n	8009b6c <HAL_RCC_OscConfig+0x1e0>
 8009aac:	4b57      	ldr	r3, [pc, #348]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a1b      	ldr	r3, [r3, #32]
 8009ab8:	03db      	lsls	r3, r3, #15
 8009aba:	4954      	ldr	r1, [pc, #336]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009abc:	4313      	orrs	r3, r2
 8009abe:	60cb      	str	r3, [r1, #12]
 8009ac0:	e054      	b.n	8009b6c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009ac2:	4b52      	ldr	r3, [pc, #328]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	4a51      	ldr	r2, [pc, #324]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009ac8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009acc:	6093      	str	r3, [r2, #8]
 8009ace:	4b4f      	ldr	r3, [pc, #316]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ada:	494c      	ldr	r1, [pc, #304]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009adc:	4313      	orrs	r3, r2
 8009ade:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009ae8:	d309      	bcc.n	8009afe <HAL_RCC_OscConfig+0x172>
 8009aea:	4b48      	ldr	r3, [pc, #288]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	f023 021f 	bic.w	r2, r3, #31
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a1b      	ldr	r3, [r3, #32]
 8009af6:	4945      	ldr	r1, [pc, #276]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009af8:	4313      	orrs	r3, r2
 8009afa:	60cb      	str	r3, [r1, #12]
 8009afc:	e028      	b.n	8009b50 <HAL_RCC_OscConfig+0x1c4>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	da0a      	bge.n	8009b1c <HAL_RCC_OscConfig+0x190>
 8009b06:	4b41      	ldr	r3, [pc, #260]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a1b      	ldr	r3, [r3, #32]
 8009b12:	015b      	lsls	r3, r3, #5
 8009b14:	493d      	ldr	r1, [pc, #244]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	60cb      	str	r3, [r1, #12]
 8009b1a:	e019      	b.n	8009b50 <HAL_RCC_OscConfig+0x1c4>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b24:	d30a      	bcc.n	8009b3c <HAL_RCC_OscConfig+0x1b0>
 8009b26:	4b39      	ldr	r3, [pc, #228]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a1b      	ldr	r3, [r3, #32]
 8009b32:	029b      	lsls	r3, r3, #10
 8009b34:	4935      	ldr	r1, [pc, #212]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009b36:	4313      	orrs	r3, r2
 8009b38:	60cb      	str	r3, [r1, #12]
 8009b3a:	e009      	b.n	8009b50 <HAL_RCC_OscConfig+0x1c4>
 8009b3c:	4b33      	ldr	r3, [pc, #204]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a1b      	ldr	r3, [r3, #32]
 8009b48:	03db      	lsls	r3, r3, #15
 8009b4a:	4930      	ldr	r1, [pc, #192]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d10a      	bne.n	8009b6c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f001 f93c 	bl	800add8 <RCC_SetFlashLatencyFromMSIRange>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d002      	beq.n	8009b6c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	f000 bde5 	b.w	800a736 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8009b6c:	f001 f8de 	bl	800ad2c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009b70:	4b27      	ldr	r3, [pc, #156]	@ (8009c10 <HAL_RCC_OscConfig+0x284>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7f9 f827 	bl	8002bc8 <HAL_InitTick>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8009b80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f000 808a 	beq.w	8009c9e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8009b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b8e:	f000 bdd2 	b.w	800a736 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	69db      	ldr	r3, [r3, #28]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d066      	beq.n	8009c68 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8009b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009ba0:	f043 0301 	orr.w	r3, r3, #1
 8009ba4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009ba6:	f7f9 f899 	bl	8002cdc <HAL_GetTick>
 8009baa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009bac:	e009      	b.n	8009bc2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009bae:	f7f9 f895 	bl	8002cdc <HAL_GetTick>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d902      	bls.n	8009bc2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	f000 bdba 	b.w	800a736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009bc2:	4b12      	ldr	r3, [pc, #72]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f003 0304 	and.w	r3, r3, #4
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d0ef      	beq.n	8009bae <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009bce:	4b0f      	ldr	r3, [pc, #60]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009bd4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009bd8:	6093      	str	r3, [r2, #8]
 8009bda:	4b0c      	ldr	r3, [pc, #48]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009be6:	4909      	ldr	r1, [pc, #36]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009be8:	4313      	orrs	r3, r2
 8009bea:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009bf4:	d30e      	bcc.n	8009c14 <HAL_RCC_OscConfig+0x288>
 8009bf6:	4b05      	ldr	r3, [pc, #20]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	f023 021f 	bic.w	r2, r3, #31
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a1b      	ldr	r3, [r3, #32]
 8009c02:	4902      	ldr	r1, [pc, #8]	@ (8009c0c <HAL_RCC_OscConfig+0x280>)
 8009c04:	4313      	orrs	r3, r2
 8009c06:	60cb      	str	r3, [r1, #12]
 8009c08:	e04a      	b.n	8009ca0 <HAL_RCC_OscConfig+0x314>
 8009c0a:	bf00      	nop
 8009c0c:	46020c00 	.word	0x46020c00
 8009c10:	20000020 	.word	0x20000020
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	da0a      	bge.n	8009c32 <HAL_RCC_OscConfig+0x2a6>
 8009c1c:	4b98      	ldr	r3, [pc, #608]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a1b      	ldr	r3, [r3, #32]
 8009c28:	015b      	lsls	r3, r3, #5
 8009c2a:	4995      	ldr	r1, [pc, #596]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	60cb      	str	r3, [r1, #12]
 8009c30:	e036      	b.n	8009ca0 <HAL_RCC_OscConfig+0x314>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c3a:	d30a      	bcc.n	8009c52 <HAL_RCC_OscConfig+0x2c6>
 8009c3c:	4b90      	ldr	r3, [pc, #576]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a1b      	ldr	r3, [r3, #32]
 8009c48:	029b      	lsls	r3, r3, #10
 8009c4a:	498d      	ldr	r1, [pc, #564]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	60cb      	str	r3, [r1, #12]
 8009c50:	e026      	b.n	8009ca0 <HAL_RCC_OscConfig+0x314>
 8009c52:	4b8b      	ldr	r3, [pc, #556]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a1b      	ldr	r3, [r3, #32]
 8009c5e:	03db      	lsls	r3, r3, #15
 8009c60:	4987      	ldr	r1, [pc, #540]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009c62:	4313      	orrs	r3, r2
 8009c64:	60cb      	str	r3, [r1, #12]
 8009c66:	e01b      	b.n	8009ca0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8009c68:	4b85      	ldr	r3, [pc, #532]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a84      	ldr	r2, [pc, #528]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009c6e:	f023 0301 	bic.w	r3, r3, #1
 8009c72:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009c74:	f7f9 f832 	bl	8002cdc <HAL_GetTick>
 8009c78:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009c7a:	e009      	b.n	8009c90 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009c7c:	f7f9 f82e 	bl	8002cdc <HAL_GetTick>
 8009c80:	4602      	mov	r2, r0
 8009c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c84:	1ad3      	subs	r3, r2, r3
 8009c86:	2b02      	cmp	r3, #2
 8009c88:	d902      	bls.n	8009c90 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	f000 bd53 	b.w	800a736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009c90:	4b7b      	ldr	r3, [pc, #492]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f003 0304 	and.w	r3, r3, #4
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1ef      	bne.n	8009c7c <HAL_RCC_OscConfig+0x2f0>
 8009c9c:	e000      	b.n	8009ca0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009c9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 0301 	and.w	r3, r3, #1
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f000 808b 	beq.w	8009dc4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb0:	2b08      	cmp	r3, #8
 8009cb2:	d005      	beq.n	8009cc0 <HAL_RCC_OscConfig+0x334>
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb6:	2b0c      	cmp	r3, #12
 8009cb8:	d109      	bne.n	8009cce <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cbc:	2b03      	cmp	r3, #3
 8009cbe:	d106      	bne.n	8009cce <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d17d      	bne.n	8009dc4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	f000 bd34 	b.w	800a736 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cd6:	d106      	bne.n	8009ce6 <HAL_RCC_OscConfig+0x35a>
 8009cd8:	4b69      	ldr	r3, [pc, #420]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a68      	ldr	r2, [pc, #416]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ce2:	6013      	str	r3, [r2, #0]
 8009ce4:	e041      	b.n	8009d6a <HAL_RCC_OscConfig+0x3de>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009cee:	d112      	bne.n	8009d16 <HAL_RCC_OscConfig+0x38a>
 8009cf0:	4b63      	ldr	r3, [pc, #396]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a62      	ldr	r2, [pc, #392]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009cf6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009cfa:	6013      	str	r3, [r2, #0]
 8009cfc:	4b60      	ldr	r3, [pc, #384]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a5f      	ldr	r2, [pc, #380]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009d02:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009d06:	6013      	str	r3, [r2, #0]
 8009d08:	4b5d      	ldr	r3, [pc, #372]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a5c      	ldr	r2, [pc, #368]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009d0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d12:	6013      	str	r3, [r2, #0]
 8009d14:	e029      	b.n	8009d6a <HAL_RCC_OscConfig+0x3de>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8009d1e:	d112      	bne.n	8009d46 <HAL_RCC_OscConfig+0x3ba>
 8009d20:	4b57      	ldr	r3, [pc, #348]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a56      	ldr	r2, [pc, #344]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009d26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009d2a:	6013      	str	r3, [r2, #0]
 8009d2c:	4b54      	ldr	r3, [pc, #336]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a53      	ldr	r2, [pc, #332]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d36:	6013      	str	r3, [r2, #0]
 8009d38:	4b51      	ldr	r3, [pc, #324]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a50      	ldr	r2, [pc, #320]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d42:	6013      	str	r3, [r2, #0]
 8009d44:	e011      	b.n	8009d6a <HAL_RCC_OscConfig+0x3de>
 8009d46:	4b4e      	ldr	r3, [pc, #312]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a4d      	ldr	r2, [pc, #308]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009d4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d50:	6013      	str	r3, [r2, #0]
 8009d52:	4b4b      	ldr	r3, [pc, #300]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a4a      	ldr	r2, [pc, #296]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009d58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009d5c:	6013      	str	r3, [r2, #0]
 8009d5e:	4b48      	ldr	r3, [pc, #288]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a47      	ldr	r2, [pc, #284]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009d64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009d68:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d014      	beq.n	8009d9c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8009d72:	f7f8 ffb3 	bl	8002cdc <HAL_GetTick>
 8009d76:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d78:	e009      	b.n	8009d8e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d7a:	f7f8 ffaf 	bl	8002cdc <HAL_GetTick>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	2b64      	cmp	r3, #100	@ 0x64
 8009d86:	d902      	bls.n	8009d8e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	f000 bcd4 	b.w	800a736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d8e:	4b3c      	ldr	r3, [pc, #240]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d0ef      	beq.n	8009d7a <HAL_RCC_OscConfig+0x3ee>
 8009d9a:	e013      	b.n	8009dc4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8009d9c:	f7f8 ff9e 	bl	8002cdc <HAL_GetTick>
 8009da0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009da2:	e009      	b.n	8009db8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009da4:	f7f8 ff9a 	bl	8002cdc <HAL_GetTick>
 8009da8:	4602      	mov	r2, r0
 8009daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dac:	1ad3      	subs	r3, r2, r3
 8009dae:	2b64      	cmp	r3, #100	@ 0x64
 8009db0:	d902      	bls.n	8009db8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009db2:	2303      	movs	r3, #3
 8009db4:	f000 bcbf 	b.w	800a736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009db8:	4b31      	ldr	r3, [pc, #196]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1ef      	bne.n	8009da4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f003 0302 	and.w	r3, r3, #2
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d05f      	beq.n	8009e90 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd2:	2b04      	cmp	r3, #4
 8009dd4:	d005      	beq.n	8009de2 <HAL_RCC_OscConfig+0x456>
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd8:	2b0c      	cmp	r3, #12
 8009dda:	d114      	bne.n	8009e06 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	d111      	bne.n	8009e06 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d102      	bne.n	8009df0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	f000 bca3 	b.w	800a736 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009df0:	4b23      	ldr	r3, [pc, #140]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	041b      	lsls	r3, r3, #16
 8009dfe:	4920      	ldr	r1, [pc, #128]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009e00:	4313      	orrs	r3, r2
 8009e02:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009e04:	e044      	b.n	8009e90 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d024      	beq.n	8009e58 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8009e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a1b      	ldr	r2, [pc, #108]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e18:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009e1a:	f7f8 ff5f 	bl	8002cdc <HAL_GetTick>
 8009e1e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009e20:	e009      	b.n	8009e36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e22:	f7f8 ff5b 	bl	8002cdc <HAL_GetTick>
 8009e26:	4602      	mov	r2, r0
 8009e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d902      	bls.n	8009e36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009e30:	2303      	movs	r3, #3
 8009e32:	f000 bc80 	b.w	800a736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009e36:	4b12      	ldr	r3, [pc, #72]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d0ef      	beq.n	8009e22 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009e42:	4b0f      	ldr	r3, [pc, #60]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	041b      	lsls	r3, r3, #16
 8009e50:	490b      	ldr	r1, [pc, #44]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009e52:	4313      	orrs	r3, r2
 8009e54:	610b      	str	r3, [r1, #16]
 8009e56:	e01b      	b.n	8009e90 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8009e58:	4b09      	ldr	r3, [pc, #36]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a08      	ldr	r2, [pc, #32]	@ (8009e80 <HAL_RCC_OscConfig+0x4f4>)
 8009e5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e62:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009e64:	f7f8 ff3a 	bl	8002cdc <HAL_GetTick>
 8009e68:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009e6a:	e00b      	b.n	8009e84 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e6c:	f7f8 ff36 	bl	8002cdc <HAL_GetTick>
 8009e70:	4602      	mov	r2, r0
 8009e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	d904      	bls.n	8009e84 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	f000 bc5b 	b.w	800a736 <HAL_RCC_OscConfig+0xdaa>
 8009e80:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009e84:	4baf      	ldr	r3, [pc, #700]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1ed      	bne.n	8009e6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f003 0308 	and.w	r3, r3, #8
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f000 80c8 	beq.w	800a02e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ea4:	4ba7      	ldr	r3, [pc, #668]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 8009ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009eaa:	f003 0304 	and.w	r3, r3, #4
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d111      	bne.n	8009ed6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009eb2:	4ba4      	ldr	r3, [pc, #656]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 8009eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009eb8:	4aa2      	ldr	r2, [pc, #648]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 8009eba:	f043 0304 	orr.w	r3, r3, #4
 8009ebe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009ec2:	4ba0      	ldr	r3, [pc, #640]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 8009ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ec8:	f003 0304 	and.w	r3, r3, #4
 8009ecc:	617b      	str	r3, [r7, #20]
 8009ece:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009ed6:	4b9c      	ldr	r3, [pc, #624]	@ (800a148 <HAL_RCC_OscConfig+0x7bc>)
 8009ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eda:	f003 0301 	and.w	r3, r3, #1
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d119      	bne.n	8009f16 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009ee2:	4b99      	ldr	r3, [pc, #612]	@ (800a148 <HAL_RCC_OscConfig+0x7bc>)
 8009ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee6:	4a98      	ldr	r2, [pc, #608]	@ (800a148 <HAL_RCC_OscConfig+0x7bc>)
 8009ee8:	f043 0301 	orr.w	r3, r3, #1
 8009eec:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009eee:	f7f8 fef5 	bl	8002cdc <HAL_GetTick>
 8009ef2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009ef4:	e009      	b.n	8009f0a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ef6:	f7f8 fef1 	bl	8002cdc <HAL_GetTick>
 8009efa:	4602      	mov	r2, r0
 8009efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d902      	bls.n	8009f0a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8009f04:	2303      	movs	r3, #3
 8009f06:	f000 bc16 	b.w	800a736 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009f0a:	4b8f      	ldr	r3, [pc, #572]	@ (800a148 <HAL_RCC_OscConfig+0x7bc>)
 8009f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d0ef      	beq.n	8009ef6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d05f      	beq.n	8009fde <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8009f1e:	4b89      	ldr	r3, [pc, #548]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 8009f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f24:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	699a      	ldr	r2, [r3, #24]
 8009f2a:	6a3b      	ldr	r3, [r7, #32]
 8009f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d037      	beq.n	8009fa4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009f34:	6a3b      	ldr	r3, [r7, #32]
 8009f36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d006      	beq.n	8009f4c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8009f3e:	6a3b      	ldr	r3, [r7, #32]
 8009f40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d101      	bne.n	8009f4c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e3f4      	b.n	800a736 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8009f4c:	6a3b      	ldr	r3, [r7, #32]
 8009f4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d01b      	beq.n	8009f8e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8009f56:	4b7b      	ldr	r3, [pc, #492]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 8009f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f5c:	4a79      	ldr	r2, [pc, #484]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 8009f5e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009f62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8009f66:	f7f8 feb9 	bl	8002cdc <HAL_GetTick>
 8009f6a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009f6c:	e008      	b.n	8009f80 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f6e:	f7f8 feb5 	bl	8002cdc <HAL_GetTick>
 8009f72:	4602      	mov	r2, r0
 8009f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f76:	1ad3      	subs	r3, r2, r3
 8009f78:	2b05      	cmp	r3, #5
 8009f7a:	d901      	bls.n	8009f80 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	e3da      	b.n	800a736 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009f80:	4b70      	ldr	r3, [pc, #448]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 8009f82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d1ef      	bne.n	8009f6e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8009f8e:	4b6d      	ldr	r3, [pc, #436]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 8009f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f94:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	699b      	ldr	r3, [r3, #24]
 8009f9c:	4969      	ldr	r1, [pc, #420]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8009fa4:	4b67      	ldr	r3, [pc, #412]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 8009fa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009faa:	4a66      	ldr	r2, [pc, #408]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 8009fac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009fb0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009fb4:	f7f8 fe92 	bl	8002cdc <HAL_GetTick>
 8009fb8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009fba:	e008      	b.n	8009fce <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009fbc:	f7f8 fe8e 	bl	8002cdc <HAL_GetTick>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc4:	1ad3      	subs	r3, r2, r3
 8009fc6:	2b05      	cmp	r3, #5
 8009fc8:	d901      	bls.n	8009fce <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e3b3      	b.n	800a736 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009fce:	4b5d      	ldr	r3, [pc, #372]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 8009fd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d0ef      	beq.n	8009fbc <HAL_RCC_OscConfig+0x630>
 8009fdc:	e01b      	b.n	800a016 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8009fde:	4b59      	ldr	r3, [pc, #356]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 8009fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009fe4:	4a57      	ldr	r2, [pc, #348]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 8009fe6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009fea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009fee:	f7f8 fe75 	bl	8002cdc <HAL_GetTick>
 8009ff2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009ff4:	e008      	b.n	800a008 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ff6:	f7f8 fe71 	bl	8002cdc <HAL_GetTick>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	2b05      	cmp	r3, #5
 800a002:	d901      	bls.n	800a008 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800a004:	2303      	movs	r3, #3
 800a006:	e396      	b.n	800a736 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800a008:	4b4e      	ldr	r3, [pc, #312]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 800a00a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a00e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1ef      	bne.n	8009ff6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a016:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d107      	bne.n	800a02e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a01e:	4b49      	ldr	r3, [pc, #292]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 800a020:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a024:	4a47      	ldr	r2, [pc, #284]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 800a026:	f023 0304 	bic.w	r3, r3, #4
 800a02a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f003 0304 	and.w	r3, r3, #4
 800a036:	2b00      	cmp	r3, #0
 800a038:	f000 8111 	beq.w	800a25e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800a03c:	2300      	movs	r3, #0
 800a03e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a042:	4b40      	ldr	r3, [pc, #256]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 800a044:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a048:	f003 0304 	and.w	r3, r3, #4
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d111      	bne.n	800a074 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a050:	4b3c      	ldr	r3, [pc, #240]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 800a052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a056:	4a3b      	ldr	r2, [pc, #236]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 800a058:	f043 0304 	orr.w	r3, r3, #4
 800a05c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a060:	4b38      	ldr	r3, [pc, #224]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 800a062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a066:	f003 0304 	and.w	r3, r3, #4
 800a06a:	613b      	str	r3, [r7, #16]
 800a06c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800a06e:	2301      	movs	r3, #1
 800a070:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a074:	4b34      	ldr	r3, [pc, #208]	@ (800a148 <HAL_RCC_OscConfig+0x7bc>)
 800a076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d118      	bne.n	800a0b2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a080:	4b31      	ldr	r3, [pc, #196]	@ (800a148 <HAL_RCC_OscConfig+0x7bc>)
 800a082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a084:	4a30      	ldr	r2, [pc, #192]	@ (800a148 <HAL_RCC_OscConfig+0x7bc>)
 800a086:	f043 0301 	orr.w	r3, r3, #1
 800a08a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a08c:	f7f8 fe26 	bl	8002cdc <HAL_GetTick>
 800a090:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a092:	e008      	b.n	800a0a6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a094:	f7f8 fe22 	bl	8002cdc <HAL_GetTick>
 800a098:	4602      	mov	r2, r0
 800a09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d901      	bls.n	800a0a6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	e347      	b.n	800a736 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a0a6:	4b28      	ldr	r3, [pc, #160]	@ (800a148 <HAL_RCC_OscConfig+0x7bc>)
 800a0a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0aa:	f003 0301 	and.w	r3, r3, #1
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d0f0      	beq.n	800a094 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	f003 0301 	and.w	r3, r3, #1
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d01f      	beq.n	800a0fe <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	f003 0304 	and.w	r3, r3, #4
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d010      	beq.n	800a0ec <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a0ca:	4b1e      	ldr	r3, [pc, #120]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 800a0cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0d0:	4a1c      	ldr	r2, [pc, #112]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 800a0d2:	f043 0304 	orr.w	r3, r3, #4
 800a0d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a0da:	4b1a      	ldr	r3, [pc, #104]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 800a0dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0e0:	4a18      	ldr	r2, [pc, #96]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 800a0e2:	f043 0301 	orr.w	r3, r3, #1
 800a0e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a0ea:	e018      	b.n	800a11e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a0ec:	4b15      	ldr	r3, [pc, #84]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 800a0ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0f2:	4a14      	ldr	r2, [pc, #80]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 800a0f4:	f043 0301 	orr.w	r3, r3, #1
 800a0f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a0fc:	e00f      	b.n	800a11e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a0fe:	4b11      	ldr	r3, [pc, #68]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 800a100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a104:	4a0f      	ldr	r2, [pc, #60]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 800a106:	f023 0301 	bic.w	r3, r3, #1
 800a10a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a10e:	4b0d      	ldr	r3, [pc, #52]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 800a110:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a114:	4a0b      	ldr	r2, [pc, #44]	@ (800a144 <HAL_RCC_OscConfig+0x7b8>)
 800a116:	f023 0304 	bic.w	r3, r3, #4
 800a11a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d057      	beq.n	800a1d6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800a126:	f7f8 fdd9 	bl	8002cdc <HAL_GetTick>
 800a12a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a12c:	e00e      	b.n	800a14c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a12e:	f7f8 fdd5 	bl	8002cdc <HAL_GetTick>
 800a132:	4602      	mov	r2, r0
 800a134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d905      	bls.n	800a14c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800a140:	2303      	movs	r3, #3
 800a142:	e2f8      	b.n	800a736 <HAL_RCC_OscConfig+0xdaa>
 800a144:	46020c00 	.word	0x46020c00
 800a148:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a14c:	4b9c      	ldr	r3, [pc, #624]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a14e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a152:	f003 0302 	and.w	r3, r3, #2
 800a156:	2b00      	cmp	r3, #0
 800a158:	d0e9      	beq.n	800a12e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a162:	2b00      	cmp	r3, #0
 800a164:	d01b      	beq.n	800a19e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a166:	4b96      	ldr	r3, [pc, #600]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a16c:	4a94      	ldr	r2, [pc, #592]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a16e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a172:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a176:	e00a      	b.n	800a18e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a178:	f7f8 fdb0 	bl	8002cdc <HAL_GetTick>
 800a17c:	4602      	mov	r2, r0
 800a17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a186:	4293      	cmp	r3, r2
 800a188:	d901      	bls.n	800a18e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800a18a:	2303      	movs	r3, #3
 800a18c:	e2d3      	b.n	800a736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a18e:	4b8c      	ldr	r3, [pc, #560]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d0ed      	beq.n	800a178 <HAL_RCC_OscConfig+0x7ec>
 800a19c:	e053      	b.n	800a246 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a19e:	4b88      	ldr	r3, [pc, #544]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a1a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1a4:	4a86      	ldr	r2, [pc, #536]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a1a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a1ae:	e00a      	b.n	800a1c6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1b0:	f7f8 fd94 	bl	8002cdc <HAL_GetTick>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d901      	bls.n	800a1c6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800a1c2:	2303      	movs	r3, #3
 800a1c4:	e2b7      	b.n	800a736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a1c6:	4b7e      	ldr	r3, [pc, #504]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a1c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1ed      	bne.n	800a1b0 <HAL_RCC_OscConfig+0x824>
 800a1d4:	e037      	b.n	800a246 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800a1d6:	f7f8 fd81 	bl	8002cdc <HAL_GetTick>
 800a1da:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a1dc:	e00a      	b.n	800a1f4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1de:	f7f8 fd7d 	bl	8002cdc <HAL_GetTick>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e6:	1ad3      	subs	r3, r2, r3
 800a1e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d901      	bls.n	800a1f4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	e2a0      	b.n	800a736 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a1f4:	4b72      	ldr	r3, [pc, #456]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a1f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1fa:	f003 0302 	and.w	r3, r3, #2
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1ed      	bne.n	800a1de <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800a202:	4b6f      	ldr	r3, [pc, #444]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d01a      	beq.n	800a246 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a210:	4b6b      	ldr	r3, [pc, #428]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a216:	4a6a      	ldr	r2, [pc, #424]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a218:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a21c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a220:	e00a      	b.n	800a238 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a222:	f7f8 fd5b 	bl	8002cdc <HAL_GetTick>
 800a226:	4602      	mov	r2, r0
 800a228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a230:	4293      	cmp	r3, r2
 800a232:	d901      	bls.n	800a238 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800a234:	2303      	movs	r3, #3
 800a236:	e27e      	b.n	800a736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a238:	4b61      	ldr	r3, [pc, #388]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a23a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a23e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1ed      	bne.n	800a222 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a246:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d107      	bne.n	800a25e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a24e:	4b5c      	ldr	r3, [pc, #368]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a250:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a254:	4a5a      	ldr	r2, [pc, #360]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a256:	f023 0304 	bic.w	r3, r3, #4
 800a25a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f003 0320 	and.w	r3, r3, #32
 800a266:	2b00      	cmp	r3, #0
 800a268:	d036      	beq.n	800a2d8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d019      	beq.n	800a2a6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800a272:	4b53      	ldr	r3, [pc, #332]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a52      	ldr	r2, [pc, #328]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a278:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a27c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a27e:	f7f8 fd2d 	bl	8002cdc <HAL_GetTick>
 800a282:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a284:	e008      	b.n	800a298 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a286:	f7f8 fd29 	bl	8002cdc <HAL_GetTick>
 800a28a:	4602      	mov	r2, r0
 800a28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a28e:	1ad3      	subs	r3, r2, r3
 800a290:	2b02      	cmp	r3, #2
 800a292:	d901      	bls.n	800a298 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800a294:	2303      	movs	r3, #3
 800a296:	e24e      	b.n	800a736 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a298:	4b49      	ldr	r3, [pc, #292]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d0f0      	beq.n	800a286 <HAL_RCC_OscConfig+0x8fa>
 800a2a4:	e018      	b.n	800a2d8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800a2a6:	4b46      	ldr	r3, [pc, #280]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a45      	ldr	r2, [pc, #276]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a2ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a2b0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a2b2:	f7f8 fd13 	bl	8002cdc <HAL_GetTick>
 800a2b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a2b8:	e008      	b.n	800a2cc <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a2ba:	f7f8 fd0f 	bl	8002cdc <HAL_GetTick>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d901      	bls.n	800a2cc <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	e234      	b.n	800a736 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a2cc:	4b3c      	ldr	r3, [pc, #240]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1f0      	bne.n	800a2ba <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d036      	beq.n	800a352 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d019      	beq.n	800a320 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800a2ec:	4b34      	ldr	r3, [pc, #208]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a33      	ldr	r2, [pc, #204]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a2f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a2f6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a2f8:	f7f8 fcf0 	bl	8002cdc <HAL_GetTick>
 800a2fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a2fe:	e008      	b.n	800a312 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a300:	f7f8 fcec 	bl	8002cdc <HAL_GetTick>
 800a304:	4602      	mov	r2, r0
 800a306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d901      	bls.n	800a312 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800a30e:	2303      	movs	r3, #3
 800a310:	e211      	b.n	800a736 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a312:	4b2b      	ldr	r3, [pc, #172]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d0f0      	beq.n	800a300 <HAL_RCC_OscConfig+0x974>
 800a31e:	e018      	b.n	800a352 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800a320:	4b27      	ldr	r3, [pc, #156]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a26      	ldr	r2, [pc, #152]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a326:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a32a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a32c:	f7f8 fcd6 	bl	8002cdc <HAL_GetTick>
 800a330:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a332:	e008      	b.n	800a346 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a334:	f7f8 fcd2 	bl	8002cdc <HAL_GetTick>
 800a338:	4602      	mov	r2, r0
 800a33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d901      	bls.n	800a346 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800a342:	2303      	movs	r3, #3
 800a344:	e1f7      	b.n	800a736 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a346:	4b1e      	ldr	r3, [pc, #120]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1f0      	bne.n	800a334 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d07f      	beq.n	800a45e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a362:	2b00      	cmp	r3, #0
 800a364:	d062      	beq.n	800a42c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800a366:	4b16      	ldr	r3, [pc, #88]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	4a15      	ldr	r2, [pc, #84]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a36c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a370:	6093      	str	r3, [r2, #8]
 800a372:	4b13      	ldr	r3, [pc, #76]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a37e:	4910      	ldr	r1, [pc, #64]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a380:	4313      	orrs	r3, r2
 800a382:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a388:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a38c:	d309      	bcc.n	800a3a2 <HAL_RCC_OscConfig+0xa16>
 800a38e:	4b0c      	ldr	r3, [pc, #48]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	f023 021f 	bic.w	r2, r3, #31
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a1b      	ldr	r3, [r3, #32]
 800a39a:	4909      	ldr	r1, [pc, #36]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a39c:	4313      	orrs	r3, r2
 800a39e:	60cb      	str	r3, [r1, #12]
 800a3a0:	e02a      	b.n	800a3f8 <HAL_RCC_OscConfig+0xa6c>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	da0c      	bge.n	800a3c4 <HAL_RCC_OscConfig+0xa38>
 800a3aa:	4b05      	ldr	r3, [pc, #20]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a1b      	ldr	r3, [r3, #32]
 800a3b6:	015b      	lsls	r3, r3, #5
 800a3b8:	4901      	ldr	r1, [pc, #4]	@ (800a3c0 <HAL_RCC_OscConfig+0xa34>)
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	60cb      	str	r3, [r1, #12]
 800a3be:	e01b      	b.n	800a3f8 <HAL_RCC_OscConfig+0xa6c>
 800a3c0:	46020c00 	.word	0x46020c00
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3cc:	d30a      	bcc.n	800a3e4 <HAL_RCC_OscConfig+0xa58>
 800a3ce:	4ba1      	ldr	r3, [pc, #644]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	029b      	lsls	r3, r3, #10
 800a3dc:	499d      	ldr	r1, [pc, #628]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	60cb      	str	r3, [r1, #12]
 800a3e2:	e009      	b.n	800a3f8 <HAL_RCC_OscConfig+0xa6c>
 800a3e4:	4b9b      	ldr	r3, [pc, #620]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6a1b      	ldr	r3, [r3, #32]
 800a3f0:	03db      	lsls	r3, r3, #15
 800a3f2:	4998      	ldr	r1, [pc, #608]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800a3f8:	4b96      	ldr	r3, [pc, #600]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a95      	ldr	r2, [pc, #596]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a3fe:	f043 0310 	orr.w	r3, r3, #16
 800a402:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a404:	f7f8 fc6a 	bl	8002cdc <HAL_GetTick>
 800a408:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a40a:	e008      	b.n	800a41e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a40c:	f7f8 fc66 	bl	8002cdc <HAL_GetTick>
 800a410:	4602      	mov	r2, r0
 800a412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a414:	1ad3      	subs	r3, r2, r3
 800a416:	2b02      	cmp	r3, #2
 800a418:	d901      	bls.n	800a41e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e18b      	b.n	800a736 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a41e:	4b8d      	ldr	r3, [pc, #564]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 0320 	and.w	r3, r3, #32
 800a426:	2b00      	cmp	r3, #0
 800a428:	d0f0      	beq.n	800a40c <HAL_RCC_OscConfig+0xa80>
 800a42a:	e018      	b.n	800a45e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800a42c:	4b89      	ldr	r3, [pc, #548]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a88      	ldr	r2, [pc, #544]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a432:	f023 0310 	bic.w	r3, r3, #16
 800a436:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a438:	f7f8 fc50 	bl	8002cdc <HAL_GetTick>
 800a43c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a43e:	e008      	b.n	800a452 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a440:	f7f8 fc4c 	bl	8002cdc <HAL_GetTick>
 800a444:	4602      	mov	r2, r0
 800a446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a448:	1ad3      	subs	r3, r2, r3
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d901      	bls.n	800a452 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800a44e:	2303      	movs	r3, #3
 800a450:	e171      	b.n	800a736 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a452:	4b80      	ldr	r3, [pc, #512]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f003 0320 	and.w	r3, r3, #32
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d1f0      	bne.n	800a440 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a462:	2b00      	cmp	r3, #0
 800a464:	f000 8166 	beq.w	800a734 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800a468:	2300      	movs	r3, #0
 800a46a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a46e:	4b79      	ldr	r3, [pc, #484]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a470:	69db      	ldr	r3, [r3, #28]
 800a472:	f003 030c 	and.w	r3, r3, #12
 800a476:	2b0c      	cmp	r3, #12
 800a478:	f000 80f2 	beq.w	800a660 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a480:	2b02      	cmp	r3, #2
 800a482:	f040 80c5 	bne.w	800a610 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a486:	4b73      	ldr	r3, [pc, #460]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a72      	ldr	r2, [pc, #456]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a48c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a490:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a492:	f7f8 fc23 	bl	8002cdc <HAL_GetTick>
 800a496:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a498:	e008      	b.n	800a4ac <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a49a:	f7f8 fc1f 	bl	8002cdc <HAL_GetTick>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a2:	1ad3      	subs	r3, r2, r3
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d901      	bls.n	800a4ac <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	e144      	b.n	800a736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a4ac:	4b69      	ldr	r3, [pc, #420]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d1f0      	bne.n	800a49a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a4b8:	4b66      	ldr	r3, [pc, #408]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a4ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4be:	f003 0304 	and.w	r3, r3, #4
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d111      	bne.n	800a4ea <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800a4c6:	4b63      	ldr	r3, [pc, #396]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a4c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4cc:	4a61      	ldr	r2, [pc, #388]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a4ce:	f043 0304 	orr.w	r3, r3, #4
 800a4d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a4d6:	4b5f      	ldr	r3, [pc, #380]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a4d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4dc:	f003 0304 	and.w	r3, r3, #4
 800a4e0:	60fb      	str	r3, [r7, #12]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800a4ea:	4b5b      	ldr	r3, [pc, #364]	@ (800a658 <HAL_RCC_OscConfig+0xccc>)
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a4f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a4f6:	d102      	bne.n	800a4fe <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a4fe:	4b56      	ldr	r3, [pc, #344]	@ (800a658 <HAL_RCC_OscConfig+0xccc>)
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	4a55      	ldr	r2, [pc, #340]	@ (800a658 <HAL_RCC_OscConfig+0xccc>)
 800a504:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a508:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800a50a:	4b52      	ldr	r3, [pc, #328]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a50c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a50e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a512:	f023 0303 	bic.w	r3, r3, #3
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a51e:	3a01      	subs	r2, #1
 800a520:	0212      	lsls	r2, r2, #8
 800a522:	4311      	orrs	r1, r2
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a528:	430a      	orrs	r2, r1
 800a52a:	494a      	ldr	r1, [pc, #296]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a52c:	4313      	orrs	r3, r2
 800a52e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a530:	4b48      	ldr	r3, [pc, #288]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a532:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a534:	4b49      	ldr	r3, [pc, #292]	@ (800a65c <HAL_RCC_OscConfig+0xcd0>)
 800a536:	4013      	ands	r3, r2
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a53c:	3a01      	subs	r2, #1
 800a53e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a546:	3a01      	subs	r2, #1
 800a548:	0252      	lsls	r2, r2, #9
 800a54a:	b292      	uxth	r2, r2
 800a54c:	4311      	orrs	r1, r2
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a552:	3a01      	subs	r2, #1
 800a554:	0412      	lsls	r2, r2, #16
 800a556:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a55a:	4311      	orrs	r1, r2
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a560:	3a01      	subs	r2, #1
 800a562:	0612      	lsls	r2, r2, #24
 800a564:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a568:	430a      	orrs	r2, r1
 800a56a:	493a      	ldr	r1, [pc, #232]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a56c:	4313      	orrs	r3, r2
 800a56e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a570:	4b38      	ldr	r3, [pc, #224]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a574:	4a37      	ldr	r2, [pc, #220]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a576:	f023 0310 	bic.w	r3, r3, #16
 800a57a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a580:	4a34      	ldr	r2, [pc, #208]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a582:	00db      	lsls	r3, r3, #3
 800a584:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a586:	4b33      	ldr	r3, [pc, #204]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a58a:	4a32      	ldr	r2, [pc, #200]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a58c:	f043 0310 	orr.w	r3, r3, #16
 800a590:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800a592:	4b30      	ldr	r3, [pc, #192]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a596:	f023 020c 	bic.w	r2, r3, #12
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a59e:	492d      	ldr	r1, [pc, #180]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800a5a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d105      	bne.n	800a5b8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a5ac:	4b2a      	ldr	r3, [pc, #168]	@ (800a658 <HAL_RCC_OscConfig+0xccc>)
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	4a29      	ldr	r2, [pc, #164]	@ (800a658 <HAL_RCC_OscConfig+0xccc>)
 800a5b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a5b6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800a5b8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d107      	bne.n	800a5d0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800a5c0:	4b24      	ldr	r3, [pc, #144]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a5c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5c6:	4a23      	ldr	r2, [pc, #140]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a5c8:	f023 0304 	bic.w	r3, r3, #4
 800a5cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800a5d0:	4b20      	ldr	r3, [pc, #128]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a1f      	ldr	r2, [pc, #124]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a5d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a5da:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a5dc:	f7f8 fb7e 	bl	8002cdc <HAL_GetTick>
 800a5e0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a5e2:	e008      	b.n	800a5f6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5e4:	f7f8 fb7a 	bl	8002cdc <HAL_GetTick>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ec:	1ad3      	subs	r3, r2, r3
 800a5ee:	2b02      	cmp	r3, #2
 800a5f0:	d901      	bls.n	800a5f6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	e09f      	b.n	800a736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a5f6:	4b17      	ldr	r3, [pc, #92]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d0f0      	beq.n	800a5e4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a602:	4b14      	ldr	r3, [pc, #80]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a606:	4a13      	ldr	r2, [pc, #76]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a60c:	6293      	str	r3, [r2, #40]	@ 0x28
 800a60e:	e091      	b.n	800a734 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a610:	4b10      	ldr	r3, [pc, #64]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a0f      	ldr	r2, [pc, #60]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a616:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a61a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a61c:	f7f8 fb5e 	bl	8002cdc <HAL_GetTick>
 800a620:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a622:	e008      	b.n	800a636 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a624:	f7f8 fb5a 	bl	8002cdc <HAL_GetTick>
 800a628:	4602      	mov	r2, r0
 800a62a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a62c:	1ad3      	subs	r3, r2, r3
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d901      	bls.n	800a636 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800a632:	2303      	movs	r3, #3
 800a634:	e07f      	b.n	800a736 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a636:	4b07      	ldr	r3, [pc, #28]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1f0      	bne.n	800a624 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800a642:	4b04      	ldr	r3, [pc, #16]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a646:	4a03      	ldr	r2, [pc, #12]	@ (800a654 <HAL_RCC_OscConfig+0xcc8>)
 800a648:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a64c:	f023 0303 	bic.w	r3, r3, #3
 800a650:	6293      	str	r3, [r2, #40]	@ 0x28
 800a652:	e06f      	b.n	800a734 <HAL_RCC_OscConfig+0xda8>
 800a654:	46020c00 	.word	0x46020c00
 800a658:	46020800 	.word	0x46020800
 800a65c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800a660:	4b37      	ldr	r3, [pc, #220]	@ (800a740 <HAL_RCC_OscConfig+0xdb4>)
 800a662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a664:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a666:	4b36      	ldr	r3, [pc, #216]	@ (800a740 <HAL_RCC_OscConfig+0xdb4>)
 800a668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a66a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a670:	2b01      	cmp	r3, #1
 800a672:	d039      	beq.n	800a6e8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	f003 0203 	and.w	r2, r3, #3
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a67e:	429a      	cmp	r2, r3
 800a680:	d132      	bne.n	800a6e8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	0a1b      	lsrs	r3, r3, #8
 800a686:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a68e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a690:	429a      	cmp	r2, r3
 800a692:	d129      	bne.n	800a6e8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d122      	bne.n	800a6e8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6ac:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d11a      	bne.n	800a6e8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	0a5b      	lsrs	r3, r3, #9
 800a6b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d111      	bne.n	800a6e8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	0c1b      	lsrs	r3, r3, #16
 800a6c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6d0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d108      	bne.n	800a6e8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	0e1b      	lsrs	r3, r3, #24
 800a6da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6e2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d001      	beq.n	800a6ec <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e024      	b.n	800a736 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a6ec:	4b14      	ldr	r3, [pc, #80]	@ (800a740 <HAL_RCC_OscConfig+0xdb4>)
 800a6ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6f0:	08db      	lsrs	r3, r3, #3
 800a6f2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d01a      	beq.n	800a734 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a6fe:	4b10      	ldr	r3, [pc, #64]	@ (800a740 <HAL_RCC_OscConfig+0xdb4>)
 800a700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a702:	4a0f      	ldr	r2, [pc, #60]	@ (800a740 <HAL_RCC_OscConfig+0xdb4>)
 800a704:	f023 0310 	bic.w	r3, r3, #16
 800a708:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a70a:	f7f8 fae7 	bl	8002cdc <HAL_GetTick>
 800a70e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800a710:	bf00      	nop
 800a712:	f7f8 fae3 	bl	8002cdc <HAL_GetTick>
 800a716:	4602      	mov	r2, r0
 800a718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d0f9      	beq.n	800a712 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a722:	4a07      	ldr	r2, [pc, #28]	@ (800a740 <HAL_RCC_OscConfig+0xdb4>)
 800a724:	00db      	lsls	r3, r3, #3
 800a726:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a728:	4b05      	ldr	r3, [pc, #20]	@ (800a740 <HAL_RCC_OscConfig+0xdb4>)
 800a72a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a72c:	4a04      	ldr	r2, [pc, #16]	@ (800a740 <HAL_RCC_OscConfig+0xdb4>)
 800a72e:	f043 0310 	orr.w	r3, r3, #16
 800a732:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800a734:	2300      	movs	r3, #0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3738      	adds	r7, #56	@ 0x38
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	46020c00 	.word	0x46020c00

0800a744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b086      	sub	sp, #24
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d101      	bne.n	800a758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a754:	2301      	movs	r3, #1
 800a756:	e1d9      	b.n	800ab0c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a758:	4b9b      	ldr	r3, [pc, #620]	@ (800a9c8 <HAL_RCC_ClockConfig+0x284>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f003 030f 	and.w	r3, r3, #15
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	429a      	cmp	r2, r3
 800a764:	d910      	bls.n	800a788 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a766:	4b98      	ldr	r3, [pc, #608]	@ (800a9c8 <HAL_RCC_ClockConfig+0x284>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f023 020f 	bic.w	r2, r3, #15
 800a76e:	4996      	ldr	r1, [pc, #600]	@ (800a9c8 <HAL_RCC_ClockConfig+0x284>)
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	4313      	orrs	r3, r2
 800a774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a776:	4b94      	ldr	r3, [pc, #592]	@ (800a9c8 <HAL_RCC_ClockConfig+0x284>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 030f 	and.w	r3, r3, #15
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	429a      	cmp	r2, r3
 800a782:	d001      	beq.n	800a788 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	e1c1      	b.n	800ab0c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 0310 	and.w	r3, r3, #16
 800a790:	2b00      	cmp	r3, #0
 800a792:	d010      	beq.n	800a7b6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	695a      	ldr	r2, [r3, #20]
 800a798:	4b8c      	ldr	r3, [pc, #560]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a79a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a79c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d908      	bls.n	800a7b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800a7a4:	4b89      	ldr	r3, [pc, #548]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a7a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	695b      	ldr	r3, [r3, #20]
 800a7b0:	4986      	ldr	r1, [pc, #536]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f003 0308 	and.w	r3, r3, #8
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d012      	beq.n	800a7e8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	691a      	ldr	r2, [r3, #16]
 800a7c6:	4b81      	ldr	r3, [pc, #516]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a7c8:	6a1b      	ldr	r3, [r3, #32]
 800a7ca:	091b      	lsrs	r3, r3, #4
 800a7cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d909      	bls.n	800a7e8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a7d4:	4b7d      	ldr	r3, [pc, #500]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a7d6:	6a1b      	ldr	r3, [r3, #32]
 800a7d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	011b      	lsls	r3, r3, #4
 800a7e2:	497a      	ldr	r1, [pc, #488]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f003 0304 	and.w	r3, r3, #4
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d010      	beq.n	800a816 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	68da      	ldr	r2, [r3, #12]
 800a7f8:	4b74      	ldr	r3, [pc, #464]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a7fa:	6a1b      	ldr	r3, [r3, #32]
 800a7fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a800:	429a      	cmp	r2, r3
 800a802:	d908      	bls.n	800a816 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a804:	4b71      	ldr	r3, [pc, #452]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a806:	6a1b      	ldr	r3, [r3, #32]
 800a808:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	496e      	ldr	r1, [pc, #440]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a812:	4313      	orrs	r3, r2
 800a814:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f003 0302 	and.w	r3, r3, #2
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d010      	beq.n	800a844 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	689a      	ldr	r2, [r3, #8]
 800a826:	4b69      	ldr	r3, [pc, #420]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	f003 030f 	and.w	r3, r3, #15
 800a82e:	429a      	cmp	r2, r3
 800a830:	d908      	bls.n	800a844 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a832:	4b66      	ldr	r3, [pc, #408]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a834:	6a1b      	ldr	r3, [r3, #32]
 800a836:	f023 020f 	bic.w	r2, r3, #15
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	4963      	ldr	r1, [pc, #396]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a840:	4313      	orrs	r3, r2
 800a842:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 0301 	and.w	r3, r3, #1
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	f000 80d2 	beq.w	800a9f6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800a852:	2300      	movs	r3, #0
 800a854:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	2b03      	cmp	r3, #3
 800a85c:	d143      	bne.n	800a8e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a85e:	4b5b      	ldr	r3, [pc, #364]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a860:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a864:	f003 0304 	and.w	r3, r3, #4
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d110      	bne.n	800a88e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a86c:	4b57      	ldr	r3, [pc, #348]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a86e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a872:	4a56      	ldr	r2, [pc, #344]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a874:	f043 0304 	orr.w	r3, r3, #4
 800a878:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a87c:	4b53      	ldr	r3, [pc, #332]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a87e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a882:	f003 0304 	and.w	r3, r3, #4
 800a886:	60bb      	str	r3, [r7, #8]
 800a888:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800a88a:	2301      	movs	r3, #1
 800a88c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800a88e:	f7f8 fa25 	bl	8002cdc <HAL_GetTick>
 800a892:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800a894:	4b4e      	ldr	r3, [pc, #312]	@ (800a9d0 <HAL_RCC_ClockConfig+0x28c>)
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00f      	beq.n	800a8c0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a8a0:	e008      	b.n	800a8b4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800a8a2:	f7f8 fa1b 	bl	8002cdc <HAL_GetTick>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	1ad3      	subs	r3, r2, r3
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d901      	bls.n	800a8b4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800a8b0:	2303      	movs	r3, #3
 800a8b2:	e12b      	b.n	800ab0c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a8b4:	4b46      	ldr	r3, [pc, #280]	@ (800a9d0 <HAL_RCC_ClockConfig+0x28c>)
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d0f0      	beq.n	800a8a2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a8c0:	7dfb      	ldrb	r3, [r7, #23]
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d107      	bne.n	800a8d6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a8c6:	4b41      	ldr	r3, [pc, #260]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a8c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a8cc:	4a3f      	ldr	r2, [pc, #252]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a8ce:	f023 0304 	bic.w	r3, r3, #4
 800a8d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a8d6:	4b3d      	ldr	r3, [pc, #244]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d121      	bne.n	800a926 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e112      	b.n	800ab0c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d107      	bne.n	800a8fe <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a8ee:	4b37      	ldr	r3, [pc, #220]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d115      	bne.n	800a926 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e106      	b.n	800ab0c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d107      	bne.n	800a916 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a906:	4b31      	ldr	r3, [pc, #196]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f003 0304 	and.w	r3, r3, #4
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d109      	bne.n	800a926 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a912:	2301      	movs	r3, #1
 800a914:	e0fa      	b.n	800ab0c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a916:	4b2d      	ldr	r3, [pc, #180]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d101      	bne.n	800a926 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	e0f2      	b.n	800ab0c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800a926:	4b29      	ldr	r3, [pc, #164]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a928:	69db      	ldr	r3, [r3, #28]
 800a92a:	f023 0203 	bic.w	r2, r3, #3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	4926      	ldr	r1, [pc, #152]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a934:	4313      	orrs	r3, r2
 800a936:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800a938:	f7f8 f9d0 	bl	8002cdc <HAL_GetTick>
 800a93c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	2b03      	cmp	r3, #3
 800a944:	d112      	bne.n	800a96c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a946:	e00a      	b.n	800a95e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a948:	f7f8 f9c8 	bl	8002cdc <HAL_GetTick>
 800a94c:	4602      	mov	r2, r0
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a956:	4293      	cmp	r3, r2
 800a958:	d901      	bls.n	800a95e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800a95a:	2303      	movs	r3, #3
 800a95c:	e0d6      	b.n	800ab0c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a95e:	4b1b      	ldr	r3, [pc, #108]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a960:	69db      	ldr	r3, [r3, #28]
 800a962:	f003 030c 	and.w	r3, r3, #12
 800a966:	2b0c      	cmp	r3, #12
 800a968:	d1ee      	bne.n	800a948 <HAL_RCC_ClockConfig+0x204>
 800a96a:	e044      	b.n	800a9f6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	2b02      	cmp	r3, #2
 800a972:	d112      	bne.n	800a99a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a974:	e00a      	b.n	800a98c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a976:	f7f8 f9b1 	bl	8002cdc <HAL_GetTick>
 800a97a:	4602      	mov	r2, r0
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	1ad3      	subs	r3, r2, r3
 800a980:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a984:	4293      	cmp	r3, r2
 800a986:	d901      	bls.n	800a98c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a988:	2303      	movs	r3, #3
 800a98a:	e0bf      	b.n	800ab0c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a98c:	4b0f      	ldr	r3, [pc, #60]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a98e:	69db      	ldr	r3, [r3, #28]
 800a990:	f003 030c 	and.w	r3, r3, #12
 800a994:	2b08      	cmp	r3, #8
 800a996:	d1ee      	bne.n	800a976 <HAL_RCC_ClockConfig+0x232>
 800a998:	e02d      	b.n	800a9f6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d123      	bne.n	800a9ea <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a9a2:	e00a      	b.n	800a9ba <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9a4:	f7f8 f99a 	bl	8002cdc <HAL_GetTick>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	1ad3      	subs	r3, r2, r3
 800a9ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d901      	bls.n	800a9ba <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800a9b6:	2303      	movs	r3, #3
 800a9b8:	e0a8      	b.n	800ab0c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a9ba:	4b04      	ldr	r3, [pc, #16]	@ (800a9cc <HAL_RCC_ClockConfig+0x288>)
 800a9bc:	69db      	ldr	r3, [r3, #28]
 800a9be:	f003 030c 	and.w	r3, r3, #12
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1ee      	bne.n	800a9a4 <HAL_RCC_ClockConfig+0x260>
 800a9c6:	e016      	b.n	800a9f6 <HAL_RCC_ClockConfig+0x2b2>
 800a9c8:	40022000 	.word	0x40022000
 800a9cc:	46020c00 	.word	0x46020c00
 800a9d0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9d4:	f7f8 f982 	bl	8002cdc <HAL_GetTick>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d901      	bls.n	800a9ea <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	e090      	b.n	800ab0c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a9ea:	4b4a      	ldr	r3, [pc, #296]	@ (800ab14 <HAL_RCC_ClockConfig+0x3d0>)
 800a9ec:	69db      	ldr	r3, [r3, #28]
 800a9ee:	f003 030c 	and.w	r3, r3, #12
 800a9f2:	2b04      	cmp	r3, #4
 800a9f4:	d1ee      	bne.n	800a9d4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f003 0302 	and.w	r3, r3, #2
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d010      	beq.n	800aa24 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	689a      	ldr	r2, [r3, #8]
 800aa06:	4b43      	ldr	r3, [pc, #268]	@ (800ab14 <HAL_RCC_ClockConfig+0x3d0>)
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	f003 030f 	and.w	r3, r3, #15
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d208      	bcs.n	800aa24 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800aa12:	4b40      	ldr	r3, [pc, #256]	@ (800ab14 <HAL_RCC_ClockConfig+0x3d0>)
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	f023 020f 	bic.w	r2, r3, #15
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	493d      	ldr	r1, [pc, #244]	@ (800ab14 <HAL_RCC_ClockConfig+0x3d0>)
 800aa20:	4313      	orrs	r3, r2
 800aa22:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aa24:	4b3c      	ldr	r3, [pc, #240]	@ (800ab18 <HAL_RCC_ClockConfig+0x3d4>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f003 030f 	and.w	r3, r3, #15
 800aa2c:	683a      	ldr	r2, [r7, #0]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d210      	bcs.n	800aa54 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa32:	4b39      	ldr	r3, [pc, #228]	@ (800ab18 <HAL_RCC_ClockConfig+0x3d4>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f023 020f 	bic.w	r2, r3, #15
 800aa3a:	4937      	ldr	r1, [pc, #220]	@ (800ab18 <HAL_RCC_ClockConfig+0x3d4>)
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa42:	4b35      	ldr	r3, [pc, #212]	@ (800ab18 <HAL_RCC_ClockConfig+0x3d4>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 030f 	and.w	r3, r3, #15
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d001      	beq.n	800aa54 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e05b      	b.n	800ab0c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f003 0304 	and.w	r3, r3, #4
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d010      	beq.n	800aa82 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	68da      	ldr	r2, [r3, #12]
 800aa64:	4b2b      	ldr	r3, [pc, #172]	@ (800ab14 <HAL_RCC_ClockConfig+0x3d0>)
 800aa66:	6a1b      	ldr	r3, [r3, #32]
 800aa68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d208      	bcs.n	800aa82 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800aa70:	4b28      	ldr	r3, [pc, #160]	@ (800ab14 <HAL_RCC_ClockConfig+0x3d0>)
 800aa72:	6a1b      	ldr	r3, [r3, #32]
 800aa74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	4925      	ldr	r1, [pc, #148]	@ (800ab14 <HAL_RCC_ClockConfig+0x3d0>)
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f003 0308 	and.w	r3, r3, #8
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d012      	beq.n	800aab4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	691a      	ldr	r2, [r3, #16]
 800aa92:	4b20      	ldr	r3, [pc, #128]	@ (800ab14 <HAL_RCC_ClockConfig+0x3d0>)
 800aa94:	6a1b      	ldr	r3, [r3, #32]
 800aa96:	091b      	lsrs	r3, r3, #4
 800aa98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d209      	bcs.n	800aab4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800aaa0:	4b1c      	ldr	r3, [pc, #112]	@ (800ab14 <HAL_RCC_ClockConfig+0x3d0>)
 800aaa2:	6a1b      	ldr	r3, [r3, #32]
 800aaa4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	011b      	lsls	r3, r3, #4
 800aaae:	4919      	ldr	r1, [pc, #100]	@ (800ab14 <HAL_RCC_ClockConfig+0x3d0>)
 800aab0:	4313      	orrs	r3, r2
 800aab2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f003 0310 	and.w	r3, r3, #16
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d010      	beq.n	800aae2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	695a      	ldr	r2, [r3, #20]
 800aac4:	4b13      	ldr	r3, [pc, #76]	@ (800ab14 <HAL_RCC_ClockConfig+0x3d0>)
 800aac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aacc:	429a      	cmp	r2, r3
 800aace:	d208      	bcs.n	800aae2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800aad0:	4b10      	ldr	r3, [pc, #64]	@ (800ab14 <HAL_RCC_ClockConfig+0x3d0>)
 800aad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	695b      	ldr	r3, [r3, #20]
 800aadc:	490d      	ldr	r1, [pc, #52]	@ (800ab14 <HAL_RCC_ClockConfig+0x3d0>)
 800aade:	4313      	orrs	r3, r2
 800aae0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800aae2:	f000 f821 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800aae6:	4602      	mov	r2, r0
 800aae8:	4b0a      	ldr	r3, [pc, #40]	@ (800ab14 <HAL_RCC_ClockConfig+0x3d0>)
 800aaea:	6a1b      	ldr	r3, [r3, #32]
 800aaec:	f003 030f 	and.w	r3, r3, #15
 800aaf0:	490a      	ldr	r1, [pc, #40]	@ (800ab1c <HAL_RCC_ClockConfig+0x3d8>)
 800aaf2:	5ccb      	ldrb	r3, [r1, r3]
 800aaf4:	fa22 f303 	lsr.w	r3, r2, r3
 800aaf8:	4a09      	ldr	r2, [pc, #36]	@ (800ab20 <HAL_RCC_ClockConfig+0x3dc>)
 800aafa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800aafc:	4b09      	ldr	r3, [pc, #36]	@ (800ab24 <HAL_RCC_ClockConfig+0x3e0>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7f8 f861 	bl	8002bc8 <HAL_InitTick>
 800ab06:	4603      	mov	r3, r0
 800ab08:	73fb      	strb	r3, [r7, #15]

  return status;
 800ab0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3718      	adds	r7, #24
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	46020c00 	.word	0x46020c00
 800ab18:	40022000 	.word	0x40022000
 800ab1c:	08011c04 	.word	0x08011c04
 800ab20:	2000001c 	.word	0x2000001c
 800ab24:	20000020 	.word	0x20000020

0800ab28 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b08b      	sub	sp, #44	@ 0x2c
 800ab2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800ab32:	2300      	movs	r3, #0
 800ab34:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab36:	4b78      	ldr	r3, [pc, #480]	@ (800ad18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab38:	69db      	ldr	r3, [r3, #28]
 800ab3a:	f003 030c 	and.w	r3, r3, #12
 800ab3e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ab40:	4b75      	ldr	r3, [pc, #468]	@ (800ad18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab44:	f003 0303 	and.w	r3, r3, #3
 800ab48:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800ab4a:	69bb      	ldr	r3, [r7, #24]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d005      	beq.n	800ab5c <HAL_RCC_GetSysClockFreq+0x34>
 800ab50:	69bb      	ldr	r3, [r7, #24]
 800ab52:	2b0c      	cmp	r3, #12
 800ab54:	d121      	bne.n	800ab9a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d11e      	bne.n	800ab9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800ab5c:	4b6e      	ldr	r3, [pc, #440]	@ (800ad18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d107      	bne.n	800ab78 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800ab68:	4b6b      	ldr	r3, [pc, #428]	@ (800ad18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ab6e:	0b1b      	lsrs	r3, r3, #12
 800ab70:	f003 030f 	and.w	r3, r3, #15
 800ab74:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab76:	e005      	b.n	800ab84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800ab78:	4b67      	ldr	r3, [pc, #412]	@ (800ad18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	0f1b      	lsrs	r3, r3, #28
 800ab7e:	f003 030f 	and.w	r3, r3, #15
 800ab82:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ab84:	4a65      	ldr	r2, [pc, #404]	@ (800ad1c <HAL_RCC_GetSysClockFreq+0x1f4>)
 800ab86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab8c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d110      	bne.n	800abb6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ab94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab96:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ab98:	e00d      	b.n	800abb6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ab9a:	4b5f      	ldr	r3, [pc, #380]	@ (800ad18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab9c:	69db      	ldr	r3, [r3, #28]
 800ab9e:	f003 030c 	and.w	r3, r3, #12
 800aba2:	2b04      	cmp	r3, #4
 800aba4:	d102      	bne.n	800abac <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800aba6:	4b5e      	ldr	r3, [pc, #376]	@ (800ad20 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800aba8:	623b      	str	r3, [r7, #32]
 800abaa:	e004      	b.n	800abb6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	2b08      	cmp	r3, #8
 800abb0:	d101      	bne.n	800abb6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800abb2:	4b5b      	ldr	r3, [pc, #364]	@ (800ad20 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800abb4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	2b0c      	cmp	r3, #12
 800abba:	f040 80a5 	bne.w	800ad08 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800abbe:	4b56      	ldr	r3, [pc, #344]	@ (800ad18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800abc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abc2:	f003 0303 	and.w	r3, r3, #3
 800abc6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800abc8:	4b53      	ldr	r3, [pc, #332]	@ (800ad18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800abca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abcc:	0a1b      	lsrs	r3, r3, #8
 800abce:	f003 030f 	and.w	r3, r3, #15
 800abd2:	3301      	adds	r3, #1
 800abd4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800abd6:	4b50      	ldr	r3, [pc, #320]	@ (800ad18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800abd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abda:	091b      	lsrs	r3, r3, #4
 800abdc:	f003 0301 	and.w	r3, r3, #1
 800abe0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800abe2:	4b4d      	ldr	r3, [pc, #308]	@ (800ad18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800abe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abe6:	08db      	lsrs	r3, r3, #3
 800abe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abec:	68ba      	ldr	r2, [r7, #8]
 800abee:	fb02 f303 	mul.w	r3, r2, r3
 800abf2:	ee07 3a90 	vmov	s15, r3
 800abf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abfa:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d003      	beq.n	800ac0c <HAL_RCC_GetSysClockFreq+0xe4>
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	2b03      	cmp	r3, #3
 800ac08:	d022      	beq.n	800ac50 <HAL_RCC_GetSysClockFreq+0x128>
 800ac0a:	e043      	b.n	800ac94 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	ee07 3a90 	vmov	s15, r3
 800ac12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac16:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800ad24 <HAL_RCC_GetSysClockFreq+0x1fc>
 800ac1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac1e:	4b3e      	ldr	r3, [pc, #248]	@ (800ad18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac26:	ee07 3a90 	vmov	s15, r3
 800ac2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac2e:	ed97 6a01 	vldr	s12, [r7, #4]
 800ac32:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800ad28 <HAL_RCC_GetSysClockFreq+0x200>
 800ac36:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac42:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac4e:	e046      	b.n	800acde <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	ee07 3a90 	vmov	s15, r3
 800ac56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac5a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800ad24 <HAL_RCC_GetSysClockFreq+0x1fc>
 800ac5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac62:	4b2d      	ldr	r3, [pc, #180]	@ (800ad18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac6a:	ee07 3a90 	vmov	s15, r3
 800ac6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac72:	ed97 6a01 	vldr	s12, [r7, #4]
 800ac76:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800ad28 <HAL_RCC_GetSysClockFreq+0x200>
 800ac7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac86:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac92:	e024      	b.n	800acde <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac96:	ee07 3a90 	vmov	s15, r3
 800ac9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	ee07 3a90 	vmov	s15, r3
 800aca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aca8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acac:	4b1a      	ldr	r3, [pc, #104]	@ (800ad18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800acae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acb4:	ee07 3a90 	vmov	s15, r3
 800acb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800acbc:	ed97 6a01 	vldr	s12, [r7, #4]
 800acc0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800ad28 <HAL_RCC_GetSysClockFreq+0x200>
 800acc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800acc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800accc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800acd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acdc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800acde:	4b0e      	ldr	r3, [pc, #56]	@ (800ad18 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ace0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ace2:	0e1b      	lsrs	r3, r3, #24
 800ace4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ace8:	3301      	adds	r3, #1
 800acea:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	ee07 3a90 	vmov	s15, r3
 800acf2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800acf6:	edd7 6a07 	vldr	s13, [r7, #28]
 800acfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad02:	ee17 3a90 	vmov	r3, s15
 800ad06:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800ad08:	6a3b      	ldr	r3, [r7, #32]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	372c      	adds	r7, #44	@ 0x2c
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop
 800ad18:	46020c00 	.word	0x46020c00
 800ad1c:	08011c1c 	.word	0x08011c1c
 800ad20:	00f42400 	.word	0x00f42400
 800ad24:	4b742400 	.word	0x4b742400
 800ad28:	46000000 	.word	0x46000000

0800ad2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800ad30:	f7ff fefa 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800ad34:	4602      	mov	r2, r0
 800ad36:	4b07      	ldr	r3, [pc, #28]	@ (800ad54 <HAL_RCC_GetHCLKFreq+0x28>)
 800ad38:	6a1b      	ldr	r3, [r3, #32]
 800ad3a:	f003 030f 	and.w	r3, r3, #15
 800ad3e:	4906      	ldr	r1, [pc, #24]	@ (800ad58 <HAL_RCC_GetHCLKFreq+0x2c>)
 800ad40:	5ccb      	ldrb	r3, [r1, r3]
 800ad42:	fa22 f303 	lsr.w	r3, r2, r3
 800ad46:	4a05      	ldr	r2, [pc, #20]	@ (800ad5c <HAL_RCC_GetHCLKFreq+0x30>)
 800ad48:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800ad4a:	4b04      	ldr	r3, [pc, #16]	@ (800ad5c <HAL_RCC_GetHCLKFreq+0x30>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	46020c00 	.word	0x46020c00
 800ad58:	08011c04 	.word	0x08011c04
 800ad5c:	2000001c 	.word	0x2000001c

0800ad60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800ad64:	f7ff ffe2 	bl	800ad2c <HAL_RCC_GetHCLKFreq>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	4b05      	ldr	r3, [pc, #20]	@ (800ad80 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ad6c:	6a1b      	ldr	r3, [r3, #32]
 800ad6e:	091b      	lsrs	r3, r3, #4
 800ad70:	f003 0307 	and.w	r3, r3, #7
 800ad74:	4903      	ldr	r1, [pc, #12]	@ (800ad84 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad76:	5ccb      	ldrb	r3, [r1, r3]
 800ad78:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	46020c00 	.word	0x46020c00
 800ad84:	08011c14 	.word	0x08011c14

0800ad88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800ad8c:	f7ff ffce 	bl	800ad2c <HAL_RCC_GetHCLKFreq>
 800ad90:	4602      	mov	r2, r0
 800ad92:	4b05      	ldr	r3, [pc, #20]	@ (800ada8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ad94:	6a1b      	ldr	r3, [r3, #32]
 800ad96:	0a1b      	lsrs	r3, r3, #8
 800ad98:	f003 0307 	and.w	r3, r3, #7
 800ad9c:	4903      	ldr	r1, [pc, #12]	@ (800adac <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad9e:	5ccb      	ldrb	r3, [r1, r3]
 800ada0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	46020c00 	.word	0x46020c00
 800adac:	08011c14 	.word	0x08011c14

0800adb0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800adb4:	f7ff ffba 	bl	800ad2c <HAL_RCC_GetHCLKFreq>
 800adb8:	4602      	mov	r2, r0
 800adba:	4b05      	ldr	r3, [pc, #20]	@ (800add0 <HAL_RCC_GetPCLK3Freq+0x20>)
 800adbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adbe:	091b      	lsrs	r3, r3, #4
 800adc0:	f003 0307 	and.w	r3, r3, #7
 800adc4:	4903      	ldr	r1, [pc, #12]	@ (800add4 <HAL_RCC_GetPCLK3Freq+0x24>)
 800adc6:	5ccb      	ldrb	r3, [r1, r3]
 800adc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800adcc:	4618      	mov	r0, r3
 800adce:	bd80      	pop	{r7, pc}
 800add0:	46020c00 	.word	0x46020c00
 800add4:	08011c14 	.word	0x08011c14

0800add8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ade0:	4b3e      	ldr	r3, [pc, #248]	@ (800aedc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ade2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ade6:	f003 0304 	and.w	r3, r3, #4
 800adea:	2b00      	cmp	r3, #0
 800adec:	d003      	beq.n	800adf6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800adee:	f7fe fd21 	bl	8009834 <HAL_PWREx_GetVoltageRange>
 800adf2:	6178      	str	r0, [r7, #20]
 800adf4:	e019      	b.n	800ae2a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800adf6:	4b39      	ldr	r3, [pc, #228]	@ (800aedc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800adf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800adfc:	4a37      	ldr	r2, [pc, #220]	@ (800aedc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800adfe:	f043 0304 	orr.w	r3, r3, #4
 800ae02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800ae06:	4b35      	ldr	r3, [pc, #212]	@ (800aedc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ae08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ae0c:	f003 0304 	and.w	r3, r3, #4
 800ae10:	60fb      	str	r3, [r7, #12]
 800ae12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ae14:	f7fe fd0e 	bl	8009834 <HAL_PWREx_GetVoltageRange>
 800ae18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ae1a:	4b30      	ldr	r3, [pc, #192]	@ (800aedc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ae1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ae20:	4a2e      	ldr	r2, [pc, #184]	@ (800aedc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ae22:	f023 0304 	bic.w	r3, r3, #4
 800ae26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ae30:	d003      	beq.n	800ae3a <RCC_SetFlashLatencyFromMSIRange+0x62>
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae38:	d109      	bne.n	800ae4e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae40:	d202      	bcs.n	800ae48 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800ae42:	2301      	movs	r3, #1
 800ae44:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800ae46:	e033      	b.n	800aeb0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800ae48:	2300      	movs	r3, #0
 800ae4a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800ae4c:	e030      	b.n	800aeb0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae54:	d208      	bcs.n	800ae68 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae5c:	d102      	bne.n	800ae64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800ae5e:	2303      	movs	r3, #3
 800ae60:	613b      	str	r3, [r7, #16]
 800ae62:	e025      	b.n	800aeb0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800ae64:	2301      	movs	r3, #1
 800ae66:	e035      	b.n	800aed4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae6e:	d90f      	bls.n	800ae90 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d109      	bne.n	800ae8a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae7c:	d902      	bls.n	800ae84 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800ae7e:	2300      	movs	r3, #0
 800ae80:	613b      	str	r3, [r7, #16]
 800ae82:	e015      	b.n	800aeb0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800ae84:	2301      	movs	r3, #1
 800ae86:	613b      	str	r3, [r7, #16]
 800ae88:	e012      	b.n	800aeb0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	613b      	str	r3, [r7, #16]
 800ae8e:	e00f      	b.n	800aeb0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae96:	d109      	bne.n	800aeac <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae9e:	d102      	bne.n	800aea6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800aea0:	2301      	movs	r3, #1
 800aea2:	613b      	str	r3, [r7, #16]
 800aea4:	e004      	b.n	800aeb0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800aea6:	2302      	movs	r3, #2
 800aea8:	613b      	str	r3, [r7, #16]
 800aeaa:	e001      	b.n	800aeb0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800aeac:	2301      	movs	r3, #1
 800aeae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800aeb0:	4b0b      	ldr	r3, [pc, #44]	@ (800aee0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f023 020f 	bic.w	r2, r3, #15
 800aeb8:	4909      	ldr	r1, [pc, #36]	@ (800aee0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	4313      	orrs	r3, r2
 800aebe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800aec0:	4b07      	ldr	r3, [pc, #28]	@ (800aee0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f003 030f 	and.w	r3, r3, #15
 800aec8:	693a      	ldr	r2, [r7, #16]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d001      	beq.n	800aed2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	e000      	b.n	800aed4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3718      	adds	r7, #24
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	46020c00 	.word	0x46020c00
 800aee0:	40022000 	.word	0x40022000

0800aee4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800aee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aee8:	b0c8      	sub	sp, #288	@ 0x120
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aef0:	2300      	movs	r3, #0
 800aef2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aef6:	2300      	movs	r3, #0
 800aef8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aefc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	f002 0401 	and.w	r4, r2, #1
 800af08:	2500      	movs	r5, #0
 800af0a:	ea54 0305 	orrs.w	r3, r4, r5
 800af0e:	d00b      	beq.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800af10:	4bd5      	ldr	r3, [pc, #852]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af16:	f023 0103 	bic.w	r1, r3, #3
 800af1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af20:	4ad1      	ldr	r2, [pc, #836]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af22:	430b      	orrs	r3, r1
 800af24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800af28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af30:	f002 0802 	and.w	r8, r2, #2
 800af34:	f04f 0900 	mov.w	r9, #0
 800af38:	ea58 0309 	orrs.w	r3, r8, r9
 800af3c:	d00b      	beq.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800af3e:	4bca      	ldr	r3, [pc, #808]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af44:	f023 010c 	bic.w	r1, r3, #12
 800af48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af4e:	4ac6      	ldr	r2, [pc, #792]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af50:	430b      	orrs	r3, r1
 800af52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800af56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5e:	f002 0a04 	and.w	sl, r2, #4
 800af62:	f04f 0b00 	mov.w	fp, #0
 800af66:	ea5a 030b 	orrs.w	r3, sl, fp
 800af6a:	d00b      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800af6c:	4bbe      	ldr	r3, [pc, #760]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af72:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800af76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af7c:	4aba      	ldr	r2, [pc, #744]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af7e:	430b      	orrs	r3, r1
 800af80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800af84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8c:	f002 0308 	and.w	r3, r2, #8
 800af90:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800af94:	2300      	movs	r3, #0
 800af96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800af9a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800af9e:	460b      	mov	r3, r1
 800afa0:	4313      	orrs	r3, r2
 800afa2:	d00b      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800afa4:	4bb0      	ldr	r3, [pc, #704]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afaa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800afae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afb4:	4aac      	ldr	r2, [pc, #688]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afb6:	430b      	orrs	r3, r1
 800afb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800afbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc4:	f002 0310 	and.w	r3, r2, #16
 800afc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800afcc:	2300      	movs	r3, #0
 800afce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800afd2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800afd6:	460b      	mov	r3, r1
 800afd8:	4313      	orrs	r3, r2
 800afda:	d00b      	beq.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800afdc:	4ba2      	ldr	r3, [pc, #648]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afe2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800afe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afec:	4a9e      	ldr	r2, [pc, #632]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afee:	430b      	orrs	r3, r1
 800aff0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800aff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b000:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b004:	2300      	movs	r3, #0
 800b006:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b00a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b00e:	460b      	mov	r3, r1
 800b010:	4313      	orrs	r3, r2
 800b012:	d00b      	beq.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800b014:	4b94      	ldr	r3, [pc, #592]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b016:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b01a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b01e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b024:	4a90      	ldr	r2, [pc, #576]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b026:	430b      	orrs	r3, r1
 800b028:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b02c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b034:	f002 0320 	and.w	r3, r2, #32
 800b038:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b03c:	2300      	movs	r3, #0
 800b03e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b042:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b046:	460b      	mov	r3, r1
 800b048:	4313      	orrs	r3, r2
 800b04a:	d00b      	beq.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800b04c:	4b86      	ldr	r3, [pc, #536]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b04e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b052:	f023 0107 	bic.w	r1, r3, #7
 800b056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b05a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b05c:	4a82      	ldr	r2, [pc, #520]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b05e:	430b      	orrs	r3, r1
 800b060:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b064:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b070:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b074:	2300      	movs	r3, #0
 800b076:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b07a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b07e:	460b      	mov	r3, r1
 800b080:	4313      	orrs	r3, r2
 800b082:	d00b      	beq.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800b084:	4b78      	ldr	r3, [pc, #480]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b08a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b08e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b094:	4a74      	ldr	r2, [pc, #464]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b096:	430b      	orrs	r3, r1
 800b098:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b09c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b0a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b0b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	d00b      	beq.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800b0bc:	4b6a      	ldr	r3, [pc, #424]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b0c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b0c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0cc:	4a66      	ldr	r2, [pc, #408]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0ce:	430b      	orrs	r3, r1
 800b0d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b0d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0dc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800b0e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b0ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	d00b      	beq.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800b0f4:	4b5c      	ldr	r3, [pc, #368]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b0fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b0fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b104:	4a58      	ldr	r2, [pc, #352]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b106:	430b      	orrs	r3, r1
 800b108:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b10c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b114:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b118:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b11c:	2300      	movs	r3, #0
 800b11e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b122:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b126:	460b      	mov	r3, r1
 800b128:	4313      	orrs	r3, r2
 800b12a:	d00b      	beq.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800b12c:	4b4e      	ldr	r3, [pc, #312]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b12e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b132:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800b136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b13a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b13c:	4a4a      	ldr	r2, [pc, #296]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b13e:	430b      	orrs	r3, r1
 800b140:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800b144:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b150:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b154:	2300      	movs	r3, #0
 800b156:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b15a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b15e:	460b      	mov	r3, r1
 800b160:	4313      	orrs	r3, r2
 800b162:	d00b      	beq.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800b164:	4b40      	ldr	r3, [pc, #256]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b166:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b16a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800b16e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b172:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b174:	4a3c      	ldr	r2, [pc, #240]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b176:	430b      	orrs	r3, r1
 800b178:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800b17c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b184:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b188:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b18c:	2300      	movs	r3, #0
 800b18e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b192:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b196:	460b      	mov	r3, r1
 800b198:	4313      	orrs	r3, r2
 800b19a:	d00c      	beq.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800b19c:	4b32      	ldr	r3, [pc, #200]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b19e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b1a2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b1a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1ae:	4a2e      	ldr	r2, [pc, #184]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1b0:	430b      	orrs	r3, r1
 800b1b2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b1b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1be:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800b1c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b1cc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	d00c      	beq.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800b1d6:	4b24      	ldr	r3, [pc, #144]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b1dc:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b1e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1e8:	4a1f      	ldr	r2, [pc, #124]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1ea:	430b      	orrs	r3, r1
 800b1ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b1f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b1fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b200:	2300      	movs	r3, #0
 800b202:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b206:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b20a:	460b      	mov	r3, r1
 800b20c:	4313      	orrs	r3, r2
 800b20e:	d00c      	beq.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800b210:	4b15      	ldr	r3, [pc, #84]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b216:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800b21a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b21e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b222:	4a11      	ldr	r2, [pc, #68]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b224:	430b      	orrs	r3, r1
 800b226:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800b22a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b232:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b236:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b23a:	2300      	movs	r3, #0
 800b23c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b240:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b244:	460b      	mov	r3, r1
 800b246:	4313      	orrs	r3, r2
 800b248:	d010      	beq.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800b24a:	4b07      	ldr	r3, [pc, #28]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b24c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b250:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b254:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b258:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b25c:	4a02      	ldr	r2, [pc, #8]	@ (800b268 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b25e:	430b      	orrs	r3, r1
 800b260:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b264:	e002      	b.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x388>
 800b266:	bf00      	nop
 800b268:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b26c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b274:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b278:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b27c:	2300      	movs	r3, #0
 800b27e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b282:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b286:	460b      	mov	r3, r1
 800b288:	4313      	orrs	r3, r2
 800b28a:	d04c      	beq.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800b28c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b290:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b294:	2b80      	cmp	r3, #128	@ 0x80
 800b296:	d02d      	beq.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b298:	2b80      	cmp	r3, #128	@ 0x80
 800b29a:	d827      	bhi.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b29c:	2b60      	cmp	r3, #96	@ 0x60
 800b29e:	d02b      	beq.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800b2a0:	2b60      	cmp	r3, #96	@ 0x60
 800b2a2:	d823      	bhi.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b2a4:	2b40      	cmp	r3, #64	@ 0x40
 800b2a6:	d006      	beq.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800b2a8:	2b40      	cmp	r3, #64	@ 0x40
 800b2aa:	d81f      	bhi.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d009      	beq.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b2b0:	2b20      	cmp	r3, #32
 800b2b2:	d011      	beq.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b2b4:	e01a      	b.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b2b6:	4bc0      	ldr	r3, [pc, #768]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b2b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2ba:	4abf      	ldr	r2, [pc, #764]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b2bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2c0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b2c2:	e01a      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b2c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2c8:	3308      	adds	r3, #8
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f002 fcd6 	bl	800dc7c <RCCEx_PLL2_Config>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b2d6:	e010      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b2d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2dc:	332c      	adds	r3, #44	@ 0x2c
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f002 fd64 	bl	800ddac <RCCEx_PLL3_Config>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b2ea:	e006      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b2f2:	e002      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b2f4:	bf00      	nop
 800b2f6:	e000      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b2f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2fa:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d10d      	bne.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800b302:	4bad      	ldr	r3, [pc, #692]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b304:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b308:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800b30c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b310:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b314:	4aa8      	ldr	r2, [pc, #672]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b316:	430b      	orrs	r3, r1
 800b318:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b31c:	e003      	b.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b31e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b322:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b326:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b332:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b336:	2300      	movs	r3, #0
 800b338:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b33c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b340:	460b      	mov	r3, r1
 800b342:	4313      	orrs	r3, r2
 800b344:	d053      	beq.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800b346:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b34a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b34e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b352:	d033      	beq.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800b354:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b358:	d82c      	bhi.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b35a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b35e:	d02f      	beq.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800b360:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b364:	d826      	bhi.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b366:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b36a:	d008      	beq.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800b36c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b370:	d820      	bhi.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b372:	2b00      	cmp	r3, #0
 800b374:	d00a      	beq.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b37a:	d011      	beq.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b37c:	e01a      	b.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b37e:	4b8e      	ldr	r3, [pc, #568]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b382:	4a8d      	ldr	r2, [pc, #564]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b388:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b38a:	e01a      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b38c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b390:	3308      	adds	r3, #8
 800b392:	4618      	mov	r0, r3
 800b394:	f002 fc72 	bl	800dc7c <RCCEx_PLL2_Config>
 800b398:	4603      	mov	r3, r0
 800b39a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b39e:	e010      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b3a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3a4:	332c      	adds	r3, #44	@ 0x2c
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f002 fd00 	bl	800ddac <RCCEx_PLL3_Config>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b3b2:	e006      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b3ba:	e002      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b3bc:	bf00      	nop
 800b3be:	e000      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b3c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3c2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d10d      	bne.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800b3ca:	4b7b      	ldr	r3, [pc, #492]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b3cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b3d0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800b3d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b3dc:	4a76      	ldr	r2, [pc, #472]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b3de:	430b      	orrs	r3, r1
 800b3e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b3e4:	e003      	b.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3e6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b3ea:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800b3ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b3fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b3fe:	2300      	movs	r3, #0
 800b400:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b404:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b408:	460b      	mov	r3, r1
 800b40a:	4313      	orrs	r3, r2
 800b40c:	d046      	beq.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800b40e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b412:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b416:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b41a:	d028      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b41c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b420:	d821      	bhi.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b422:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b426:	d022      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b428:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b42c:	d81b      	bhi.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b42e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b432:	d01c      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b434:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b438:	d815      	bhi.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b43a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b43e:	d008      	beq.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800b440:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b444:	d80f      	bhi.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b446:	2b00      	cmp	r3, #0
 800b448:	d011      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b44a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b44e:	d00e      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b450:	e009      	b.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b452:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b456:	3308      	adds	r3, #8
 800b458:	4618      	mov	r0, r3
 800b45a:	f002 fc0f 	bl	800dc7c <RCCEx_PLL2_Config>
 800b45e:	4603      	mov	r3, r0
 800b460:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b464:	e004      	b.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b46c:	e000      	b.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800b46e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b470:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10d      	bne.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800b478:	4b4f      	ldr	r3, [pc, #316]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b47a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b47e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b482:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b486:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b48a:	4a4b      	ldr	r2, [pc, #300]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b48c:	430b      	orrs	r3, r1
 800b48e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b492:	e003      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b494:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b498:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800b49c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b4a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b4b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	d03f      	beq.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800b4bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b4c4:	2b04      	cmp	r3, #4
 800b4c6:	d81e      	bhi.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x622>
 800b4c8:	a201      	add	r2, pc, #4	@ (adr r2, 800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b4ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ce:	bf00      	nop
 800b4d0:	0800b50f 	.word	0x0800b50f
 800b4d4:	0800b4e5 	.word	0x0800b4e5
 800b4d8:	0800b4f3 	.word	0x0800b4f3
 800b4dc:	0800b50f 	.word	0x0800b50f
 800b4e0:	0800b50f 	.word	0x0800b50f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b4e4:	4b34      	ldr	r3, [pc, #208]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4e8:	4a33      	ldr	r2, [pc, #204]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b4ee:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b4f0:	e00e      	b.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b4f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4f6:	332c      	adds	r3, #44	@ 0x2c
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f002 fc57 	bl	800ddac <RCCEx_PLL3_Config>
 800b4fe:	4603      	mov	r3, r0
 800b500:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b504:	e004      	b.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b506:	2301      	movs	r3, #1
 800b508:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b50c:	e000      	b.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800b50e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b510:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b514:	2b00      	cmp	r3, #0
 800b516:	d10d      	bne.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800b518:	4b27      	ldr	r3, [pc, #156]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b51a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b51e:	f023 0107 	bic.w	r1, r3, #7
 800b522:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b526:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b52a:	4a23      	ldr	r2, [pc, #140]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b52c:	430b      	orrs	r3, r1
 800b52e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b532:	e003      	b.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b534:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b538:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800b53c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b544:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b548:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b54a:	2300      	movs	r3, #0
 800b54c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b54e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b552:	460b      	mov	r3, r1
 800b554:	4313      	orrs	r3, r2
 800b556:	d04c      	beq.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800b558:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b55c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b560:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b564:	d02a      	beq.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800b566:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b56a:	d821      	bhi.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b56c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b570:	d026      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800b572:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b576:	d81b      	bhi.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b578:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b57c:	d00e      	beq.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800b57e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b582:	d815      	bhi.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b584:	2b00      	cmp	r3, #0
 800b586:	d01d      	beq.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800b588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b58c:	d110      	bne.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b58e:	4b0a      	ldr	r3, [pc, #40]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b592:	4a09      	ldr	r2, [pc, #36]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b598:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b59a:	e014      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b59c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5a0:	332c      	adds	r3, #44	@ 0x2c
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f002 fc02 	bl	800ddac <RCCEx_PLL3_Config>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b5ae:	e00a      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b5b6:	e006      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800b5b8:	46020c00 	.word	0x46020c00
        break;
 800b5bc:	bf00      	nop
 800b5be:	e002      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b5c0:	bf00      	nop
 800b5c2:	e000      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b5c4:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b5c6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d10d      	bne.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800b5ce:	4baf      	ldr	r3, [pc, #700]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b5d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b5d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b5e0:	4aaa      	ldr	r2, [pc, #680]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5e2:	430b      	orrs	r3, r1
 800b5e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b5e8:	e003      	b.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5ea:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b5ee:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b5f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b5fe:	673b      	str	r3, [r7, #112]	@ 0x70
 800b600:	2300      	movs	r3, #0
 800b602:	677b      	str	r3, [r7, #116]	@ 0x74
 800b604:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b608:	460b      	mov	r3, r1
 800b60a:	4313      	orrs	r3, r2
 800b60c:	f000 80b5 	beq.w	800b77a <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b610:	2300      	movs	r3, #0
 800b612:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b616:	4b9d      	ldr	r3, [pc, #628]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b618:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b61c:	f003 0304 	and.w	r3, r3, #4
 800b620:	2b00      	cmp	r3, #0
 800b622:	d113      	bne.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b624:	4b99      	ldr	r3, [pc, #612]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b62a:	4a98      	ldr	r2, [pc, #608]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b62c:	f043 0304 	orr.w	r3, r3, #4
 800b630:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b634:	4b95      	ldr	r3, [pc, #596]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b636:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b63a:	f003 0304 	and.w	r3, r3, #4
 800b63e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800b642:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800b646:	2301      	movs	r3, #1
 800b648:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800b64c:	4b90      	ldr	r3, [pc, #576]	@ (800b890 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b64e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b650:	4a8f      	ldr	r2, [pc, #572]	@ (800b890 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b652:	f043 0301 	orr.w	r3, r3, #1
 800b656:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b658:	f7f7 fb40 	bl	8002cdc <HAL_GetTick>
 800b65c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b660:	e00b      	b.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b662:	f7f7 fb3b 	bl	8002cdc <HAL_GetTick>
 800b666:	4602      	mov	r2, r0
 800b668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b66c:	1ad3      	subs	r3, r2, r3
 800b66e:	2b02      	cmp	r3, #2
 800b670:	d903      	bls.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800b672:	2303      	movs	r3, #3
 800b674:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b678:	e005      	b.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b67a:	4b85      	ldr	r3, [pc, #532]	@ (800b890 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b67c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b67e:	f003 0301 	and.w	r3, r3, #1
 800b682:	2b00      	cmp	r3, #0
 800b684:	d0ed      	beq.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800b686:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d165      	bne.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b68e:	4b7f      	ldr	r3, [pc, #508]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b690:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b694:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b698:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800b69c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d023      	beq.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0x808>
 800b6a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6a8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800b6ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d01b      	beq.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b6b4:	4b75      	ldr	r3, [pc, #468]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b6c2:	4b72      	ldr	r3, [pc, #456]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6c8:	4a70      	ldr	r2, [pc, #448]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b6ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b6d2:	4b6e      	ldr	r3, [pc, #440]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6d8:	4a6c      	ldr	r2, [pc, #432]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b6de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b6e2:	4a6a      	ldr	r2, [pc, #424]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b6e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b6ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b6f0:	f003 0301 	and.w	r3, r3, #1
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d019      	beq.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6f8:	f7f7 faf0 	bl	8002cdc <HAL_GetTick>
 800b6fc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b700:	e00d      	b.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b702:	f7f7 faeb 	bl	8002cdc <HAL_GetTick>
 800b706:	4602      	mov	r2, r0
 800b708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b70c:	1ad2      	subs	r2, r2, r3
 800b70e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b712:	429a      	cmp	r2, r3
 800b714:	d903      	bls.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800b716:	2303      	movs	r3, #3
 800b718:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800b71c:	e006      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b71e:	4b5b      	ldr	r3, [pc, #364]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b724:	f003 0302 	and.w	r3, r3, #2
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d0ea      	beq.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800b72c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10d      	bne.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800b734:	4b55      	ldr	r3, [pc, #340]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b73a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b73e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b742:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b746:	4a51      	ldr	r2, [pc, #324]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b748:	430b      	orrs	r3, r1
 800b74a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b74e:	e008      	b.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b750:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b754:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800b758:	e003      	b.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b75a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b75e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b762:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800b766:	2b01      	cmp	r3, #1
 800b768:	d107      	bne.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b76a:	4b48      	ldr	r3, [pc, #288]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b76c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b770:	4a46      	ldr	r2, [pc, #280]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b772:	f023 0304 	bic.w	r3, r3, #4
 800b776:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800b77a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b782:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b786:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b788:	2300      	movs	r3, #0
 800b78a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b78c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b790:	460b      	mov	r3, r1
 800b792:	4313      	orrs	r3, r2
 800b794:	d042      	beq.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800b796:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b79a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b79e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b7a2:	d022      	beq.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x906>
 800b7a4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b7a8:	d81b      	bhi.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b7aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b7ae:	d011      	beq.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800b7b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b7b4:	d815      	bhi.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d019      	beq.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800b7ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b7be:	d110      	bne.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b7c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7c4:	3308      	adds	r3, #8
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f002 fa58 	bl	800dc7c <RCCEx_PLL2_Config>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b7d2:	e00d      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7d4:	4b2d      	ldr	r3, [pc, #180]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7d8:	4a2c      	ldr	r2, [pc, #176]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7de:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b7e0:	e006      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b7e8:	e002      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b7ea:	bf00      	nop
 800b7ec:	e000      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b7ee:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b7f0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d10d      	bne.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800b7f8:	4b24      	ldr	r3, [pc, #144]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7fe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b802:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b806:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b80a:	4a20      	ldr	r2, [pc, #128]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b80c:	430b      	orrs	r3, r1
 800b80e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b812:	e003      	b.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b814:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b818:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b81c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b828:	663b      	str	r3, [r7, #96]	@ 0x60
 800b82a:	2300      	movs	r3, #0
 800b82c:	667b      	str	r3, [r7, #100]	@ 0x64
 800b82e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b832:	460b      	mov	r3, r1
 800b834:	4313      	orrs	r3, r2
 800b836:	d031      	beq.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800b838:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b83c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b844:	d00b      	beq.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800b846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b84a:	d804      	bhi.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d008      	beq.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800b850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b854:	d007      	beq.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800b856:	2301      	movs	r3, #1
 800b858:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b85c:	e004      	b.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b85e:	bf00      	nop
 800b860:	e002      	b.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b862:	bf00      	nop
 800b864:	e000      	b.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b866:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b868:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d111      	bne.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b870:	4b06      	ldr	r3, [pc, #24]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b872:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b876:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b87a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b87e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b882:	4a02      	ldr	r2, [pc, #8]	@ (800b88c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b884:	430b      	orrs	r3, r1
 800b886:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b88a:	e007      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800b88c:	46020c00 	.word	0x46020c00
 800b890:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b894:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b898:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800b89c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a4:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b8a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b8ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	d00c      	beq.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800b8b8:	4bb2      	ldr	r3, [pc, #712]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b8be:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800b8c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b8ca:	4aae      	ldr	r2, [pc, #696]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8cc:	430b      	orrs	r3, r1
 800b8ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800b8d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8da:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b8de:	653b      	str	r3, [r7, #80]	@ 0x50
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	657b      	str	r3, [r7, #84]	@ 0x54
 800b8e4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	d019      	beq.n	800b922 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800b8ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b8f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b8fa:	d105      	bne.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b8fc:	4ba1      	ldr	r3, [pc, #644]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b900:	4aa0      	ldr	r2, [pc, #640]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b902:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b906:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800b908:	4b9e      	ldr	r3, [pc, #632]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b90a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b90e:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b916:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b91a:	4a9a      	ldr	r2, [pc, #616]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b91c:	430b      	orrs	r3, r1
 800b91e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b922:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b92e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b930:	2300      	movs	r3, #0
 800b932:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b934:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b938:	460b      	mov	r3, r1
 800b93a:	4313      	orrs	r3, r2
 800b93c:	d00c      	beq.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b93e:	4b91      	ldr	r3, [pc, #580]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b944:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b948:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b94c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b950:	4a8c      	ldr	r2, [pc, #560]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b952:	430b      	orrs	r3, r1
 800b954:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800b958:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b960:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b964:	643b      	str	r3, [r7, #64]	@ 0x40
 800b966:	2300      	movs	r3, #0
 800b968:	647b      	str	r3, [r7, #68]	@ 0x44
 800b96a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b96e:	460b      	mov	r3, r1
 800b970:	4313      	orrs	r3, r2
 800b972:	d00c      	beq.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800b974:	4b83      	ldr	r3, [pc, #524]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b97a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b97e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b982:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b986:	4a7f      	ldr	r2, [pc, #508]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b988:	430b      	orrs	r3, r1
 800b98a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800b98e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b996:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b99a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b99c:	2300      	movs	r3, #0
 800b99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9a0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	d00c      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800b9aa:	4b76      	ldr	r3, [pc, #472]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b9b0:	f023 0118 	bic.w	r1, r3, #24
 800b9b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9b8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b9bc:	4a71      	ldr	r2, [pc, #452]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9be:	430b      	orrs	r3, r1
 800b9c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b9c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9cc:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800b9d0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9d6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b9da:	460b      	mov	r3, r1
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	d032      	beq.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800b9e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b9e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b9ec:	d105      	bne.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9ee:	4b65      	ldr	r3, [pc, #404]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9f2:	4a64      	ldr	r2, [pc, #400]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9f8:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800b9fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ba02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ba06:	d108      	bne.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ba08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba0c:	3308      	adds	r3, #8
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f002 f934 	bl	800dc7c <RCCEx_PLL2_Config>
 800ba14:	4603      	mov	r3, r0
 800ba16:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800ba1a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d10d      	bne.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800ba22:	4b58      	ldr	r3, [pc, #352]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ba28:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ba2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba30:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ba34:	4a53      	ldr	r2, [pc, #332]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba36:	430b      	orrs	r3, r1
 800ba38:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ba3c:	e003      	b.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba3e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba42:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800ba46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4e:	2100      	movs	r1, #0
 800ba50:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ba52:	f003 0301 	and.w	r3, r3, #1
 800ba56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba58:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	d04a      	beq.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800ba62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba66:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ba6a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ba6e:	d01e      	beq.n	800baae <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800ba70:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ba74:	d825      	bhi.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800ba76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ba7a:	d00e      	beq.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800ba7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ba80:	d81f      	bhi.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d021      	beq.n	800baca <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800ba86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba8a:	d11a      	bne.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba8c:	4b3d      	ldr	r3, [pc, #244]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba90:	4a3c      	ldr	r2, [pc, #240]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba96:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800ba98:	e018      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ba9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba9e:	3308      	adds	r3, #8
 800baa0:	4618      	mov	r0, r3
 800baa2:	f002 f8eb 	bl	800dc7c <RCCEx_PLL2_Config>
 800baa6:	4603      	mov	r3, r0
 800baa8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800baac:	e00e      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800baae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bab2:	332c      	adds	r3, #44	@ 0x2c
 800bab4:	4618      	mov	r0, r3
 800bab6:	f002 f979 	bl	800ddac <RCCEx_PLL3_Config>
 800baba:	4603      	mov	r3, r0
 800babc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800bac0:	e004      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800bac2:	2301      	movs	r3, #1
 800bac4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bac8:	e000      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800baca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bacc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10d      	bne.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800bad4:	4b2b      	ldr	r3, [pc, #172]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bad6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bada:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bade:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bae2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bae6:	4927      	ldr	r1, [pc, #156]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bae8:	4313      	orrs	r3, r2
 800baea:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800baee:	e003      	b.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baf0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800baf4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800baf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb00:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800bb04:	623b      	str	r3, [r7, #32]
 800bb06:	2300      	movs	r3, #0
 800bb08:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb0a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bb0e:	460b      	mov	r3, r1
 800bb10:	4313      	orrs	r3, r2
 800bb12:	d03d      	beq.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800bb14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bb20:	d00e      	beq.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800bb22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bb26:	d815      	bhi.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d017      	beq.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800bb2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bb30:	d110      	bne.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb32:	4b14      	ldr	r3, [pc, #80]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb36:	4a13      	ldr	r2, [pc, #76]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb3c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800bb3e:	e00e      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bb40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb44:	3308      	adds	r3, #8
 800bb46:	4618      	mov	r0, r3
 800bb48:	f002 f898 	bl	800dc7c <RCCEx_PLL2_Config>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800bb52:	e004      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800bb54:	2301      	movs	r3, #1
 800bb56:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bb5a:	e000      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bb5c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bb5e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d110      	bne.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800bb66:	4b07      	ldr	r3, [pc, #28]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb6c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800bb70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb78:	4902      	ldr	r1, [pc, #8]	@ (800bb84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800bb80:	e006      	b.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800bb82:	bf00      	nop
 800bb84:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb88:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bb8c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800bb90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb98:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800bb9c:	61bb      	str	r3, [r7, #24]
 800bb9e:	2300      	movs	r3, #0
 800bba0:	61fb      	str	r3, [r7, #28]
 800bba2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bba6:	460b      	mov	r3, r1
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	d00c      	beq.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800bbac:	4b68      	ldr	r3, [pc, #416]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bbae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bbb2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bbb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800bbbe:	4964      	ldr	r1, [pc, #400]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bbc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbce:	2100      	movs	r1, #0
 800bbd0:	6139      	str	r1, [r7, #16]
 800bbd2:	f003 0302 	and.w	r3, r3, #2
 800bbd6:	617b      	str	r3, [r7, #20]
 800bbd8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bbdc:	460b      	mov	r3, r1
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	d036      	beq.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800bbe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbe6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00c      	beq.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800bbee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bbf2:	d113      	bne.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bbf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbf8:	3308      	adds	r3, #8
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f002 f83e 	bl	800dc7c <RCCEx_PLL2_Config>
 800bc00:	4603      	mov	r3, r0
 800bc02:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800bc06:	e00d      	b.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bc08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc0c:	332c      	adds	r3, #44	@ 0x2c
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f002 f8cc 	bl	800ddac <RCCEx_PLL3_Config>
 800bc14:	4603      	mov	r3, r0
 800bc16:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800bc1a:	e003      	b.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bc22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc24:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d10d      	bne.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800bc2c:	4b48      	ldr	r3, [pc, #288]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc32:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800bc36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc3a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bc3e:	4944      	ldr	r1, [pc, #272]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc40:	4313      	orrs	r3, r2
 800bc42:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bc46:	e003      	b.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc48:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc4c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800bc50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc58:	2100      	movs	r1, #0
 800bc5a:	60b9      	str	r1, [r7, #8]
 800bc5c:	f003 0304 	and.w	r3, r3, #4
 800bc60:	60fb      	str	r3, [r7, #12]
 800bc62:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bc66:	460b      	mov	r3, r1
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	d024      	beq.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800bc6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d108      	bne.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bc78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc7c:	332c      	adds	r3, #44	@ 0x2c
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f002 f894 	bl	800ddac <RCCEx_PLL3_Config>
 800bc84:	4603      	mov	r3, r0
 800bc86:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800bc8a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d10d      	bne.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800bc92:	4b2f      	ldr	r3, [pc, #188]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc98:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bc9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bca0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bca4:	492a      	ldr	r1, [pc, #168]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bca6:	4313      	orrs	r3, r2
 800bca8:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bcac:	e003      	b.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcae:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bcb2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800bcb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	6039      	str	r1, [r7, #0]
 800bcc2:	f003 0308 	and.w	r3, r3, #8
 800bcc6:	607b      	str	r3, [r7, #4]
 800bcc8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bccc:	460b      	mov	r3, r1
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	d036      	beq.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800bcd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcd6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bcda:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bcde:	d00d      	beq.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800bce0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bce4:	d811      	bhi.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800bce6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bcea:	d012      	beq.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800bcec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bcf0:	d80b      	bhi.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d00d      	beq.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800bcf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcfa:	d106      	bne.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bcfc:	4b14      	ldr	r3, [pc, #80]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bcfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd00:	4a13      	ldr	r2, [pc, #76]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bd02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd06:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800bd08:	e004      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bd10:	e000      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800bd12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd14:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d10d      	bne.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800bd1c:	4b0c      	ldr	r3, [pc, #48]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bd1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bd22:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800bd26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd2a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bd2e:	4908      	ldr	r1, [pc, #32]	@ (800bd50 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bd30:	4313      	orrs	r3, r2
 800bd32:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bd36:	e003      	b.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd38:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bd3c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800bd40:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd50:	46020c00 	.word	0x46020c00

0800bd54 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b089      	sub	sp, #36	@ 0x24
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800bd5c:	4ba6      	ldr	r3, [pc, #664]	@ (800bff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd64:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800bd66:	4ba4      	ldr	r3, [pc, #656]	@ (800bff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd6a:	f003 0303 	and.w	r3, r3, #3
 800bd6e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800bd70:	4ba1      	ldr	r3, [pc, #644]	@ (800bff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd74:	0a1b      	lsrs	r3, r3, #8
 800bd76:	f003 030f 	and.w	r3, r3, #15
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800bd7e:	4b9e      	ldr	r3, [pc, #632]	@ (800bff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd82:	091b      	lsrs	r3, r3, #4
 800bd84:	f003 0301 	and.w	r3, r3, #1
 800bd88:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800bd8a:	4b9b      	ldr	r3, [pc, #620]	@ (800bff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd8e:	08db      	lsrs	r3, r3, #3
 800bd90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd94:	68fa      	ldr	r2, [r7, #12]
 800bd96:	fb02 f303 	mul.w	r3, r2, r3
 800bd9a:	ee07 3a90 	vmov	s15, r3
 800bd9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bda2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	2b03      	cmp	r3, #3
 800bdaa:	d062      	beq.n	800be72 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	2b03      	cmp	r3, #3
 800bdb0:	f200 8081 	bhi.w	800beb6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d024      	beq.n	800be04 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	2b02      	cmp	r3, #2
 800bdbe:	d17a      	bne.n	800beb6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	ee07 3a90 	vmov	s15, r3
 800bdc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdca:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800bffc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800bdce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdd2:	4b89      	ldr	r3, [pc, #548]	@ (800bff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bdd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdda:	ee07 3a90 	vmov	s15, r3
 800bdde:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bde2:	ed97 6a02 	vldr	s12, [r7, #8]
 800bde6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c000 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bdea:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bdee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bdfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be02:	e08f      	b.n	800bf24 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800be04:	4b7c      	ldr	r3, [pc, #496]	@ (800bff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d005      	beq.n	800be1c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800be10:	4b79      	ldr	r3, [pc, #484]	@ (800bff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	0f1b      	lsrs	r3, r3, #28
 800be16:	f003 030f 	and.w	r3, r3, #15
 800be1a:	e006      	b.n	800be2a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800be1c:	4b76      	ldr	r3, [pc, #472]	@ (800bff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800be22:	041b      	lsls	r3, r3, #16
 800be24:	0f1b      	lsrs	r3, r3, #28
 800be26:	f003 030f 	and.w	r3, r3, #15
 800be2a:	4a76      	ldr	r2, [pc, #472]	@ (800c004 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800be2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be30:	ee07 3a90 	vmov	s15, r3
 800be34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	ee07 3a90 	vmov	s15, r3
 800be3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	ee07 3a90 	vmov	s15, r3
 800be4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be50:	ed97 6a02 	vldr	s12, [r7, #8]
 800be54:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c000 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800be58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be64:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800be68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be70:	e058      	b.n	800bf24 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	ee07 3a90 	vmov	s15, r3
 800be78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be7c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bffc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800be80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be84:	4b5c      	ldr	r3, [pc, #368]	@ (800bff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be8c:	ee07 3a90 	vmov	s15, r3
 800be90:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800be94:	ed97 6a02 	vldr	s12, [r7, #8]
 800be98:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c000 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800be9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bea0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bea4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bea8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800beac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beb0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800beb4:	e036      	b.n	800bf24 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800beb6:	4b50      	ldr	r3, [pc, #320]	@ (800bff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d005      	beq.n	800bece <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800bec2:	4b4d      	ldr	r3, [pc, #308]	@ (800bff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bec4:	689b      	ldr	r3, [r3, #8]
 800bec6:	0f1b      	lsrs	r3, r3, #28
 800bec8:	f003 030f 	and.w	r3, r3, #15
 800becc:	e006      	b.n	800bedc <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800bece:	4b4a      	ldr	r3, [pc, #296]	@ (800bff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bed0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bed4:	041b      	lsls	r3, r3, #16
 800bed6:	0f1b      	lsrs	r3, r3, #28
 800bed8:	f003 030f 	and.w	r3, r3, #15
 800bedc:	4a49      	ldr	r2, [pc, #292]	@ (800c004 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800bede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bee2:	ee07 3a90 	vmov	s15, r3
 800bee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	ee07 3a90 	vmov	s15, r3
 800bef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bef4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	ee07 3a90 	vmov	s15, r3
 800befe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf02:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf06:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c000 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bf0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf16:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bf1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf22:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800bf24:	4b34      	ldr	r3, [pc, #208]	@ (800bff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d017      	beq.n	800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf30:	4b31      	ldr	r3, [pc, #196]	@ (800bff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf34:	0a5b      	lsrs	r3, r3, #9
 800bf36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf3a:	ee07 3a90 	vmov	s15, r3
 800bf3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800bf42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf46:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf56:	ee17 2a90 	vmov	r2, s15
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	601a      	str	r2, [r3, #0]
 800bf5e:	e002      	b.n	800bf66 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800bf66:	4b24      	ldr	r3, [pc, #144]	@ (800bff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d017      	beq.n	800bfa2 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf72:	4b21      	ldr	r3, [pc, #132]	@ (800bff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf76:	0c1b      	lsrs	r3, r3, #16
 800bf78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf7c:	ee07 3a90 	vmov	s15, r3
 800bf80:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800bf84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf88:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf98:	ee17 2a90 	vmov	r2, s15
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	605a      	str	r2, [r3, #4]
 800bfa0:	e002      	b.n	800bfa8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800bfa8:	4b13      	ldr	r3, [pc, #76]	@ (800bff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bfaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d017      	beq.n	800bfe4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bfb4:	4b10      	ldr	r3, [pc, #64]	@ (800bff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bfb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfb8:	0e1b      	lsrs	r3, r3, #24
 800bfba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfbe:	ee07 3a90 	vmov	s15, r3
 800bfc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800bfc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bfca:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bfce:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfda:	ee17 2a90 	vmov	r2, s15
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bfe2:	e002      	b.n	800bfea <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	609a      	str	r2, [r3, #8]
}
 800bfea:	bf00      	nop
 800bfec:	3724      	adds	r7, #36	@ 0x24
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr
 800bff6:	bf00      	nop
 800bff8:	46020c00 	.word	0x46020c00
 800bffc:	4b742400 	.word	0x4b742400
 800c000:	46000000 	.word	0x46000000
 800c004:	08011c1c 	.word	0x08011c1c

0800c008 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c008:	b480      	push	{r7}
 800c00a:	b089      	sub	sp, #36	@ 0x24
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800c010:	4ba6      	ldr	r3, [pc, #664]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c018:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800c01a:	4ba4      	ldr	r3, [pc, #656]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c01c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c01e:	f003 0303 	and.w	r3, r3, #3
 800c022:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800c024:	4ba1      	ldr	r3, [pc, #644]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c028:	0a1b      	lsrs	r3, r3, #8
 800c02a:	f003 030f 	and.w	r3, r3, #15
 800c02e:	3301      	adds	r3, #1
 800c030:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800c032:	4b9e      	ldr	r3, [pc, #632]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c036:	091b      	lsrs	r3, r3, #4
 800c038:	f003 0301 	and.w	r3, r3, #1
 800c03c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800c03e:	4b9b      	ldr	r3, [pc, #620]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c042:	08db      	lsrs	r3, r3, #3
 800c044:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c048:	68fa      	ldr	r2, [r7, #12]
 800c04a:	fb02 f303 	mul.w	r3, r2, r3
 800c04e:	ee07 3a90 	vmov	s15, r3
 800c052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c056:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	2b03      	cmp	r3, #3
 800c05e:	d062      	beq.n	800c126 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	2b03      	cmp	r3, #3
 800c064:	f200 8081 	bhi.w	800c16a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	d024      	beq.n	800c0b8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	2b02      	cmp	r3, #2
 800c072:	d17a      	bne.n	800c16a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	ee07 3a90 	vmov	s15, r3
 800c07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c07e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c086:	4b89      	ldr	r3, [pc, #548]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c08e:	ee07 3a90 	vmov	s15, r3
 800c092:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c096:	ed97 6a02 	vldr	s12, [r7, #8]
 800c09a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c09e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c0a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c0a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0b6:	e08f      	b.n	800c1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c0b8:	4b7c      	ldr	r3, [pc, #496]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d005      	beq.n	800c0d0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800c0c4:	4b79      	ldr	r3, [pc, #484]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	0f1b      	lsrs	r3, r3, #28
 800c0ca:	f003 030f 	and.w	r3, r3, #15
 800c0ce:	e006      	b.n	800c0de <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800c0d0:	4b76      	ldr	r3, [pc, #472]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c0d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c0d6:	041b      	lsls	r3, r3, #16
 800c0d8:	0f1b      	lsrs	r3, r3, #28
 800c0da:	f003 030f 	and.w	r3, r3, #15
 800c0de:	4a76      	ldr	r2, [pc, #472]	@ (800c2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c0e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0e4:	ee07 3a90 	vmov	s15, r3
 800c0e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	ee07 3a90 	vmov	s15, r3
 800c0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	ee07 3a90 	vmov	s15, r3
 800c100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c104:	ed97 6a02 	vldr	s12, [r7, #8]
 800c108:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c10c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c110:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c114:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c118:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c11c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c120:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c124:	e058      	b.n	800c1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	ee07 3a90 	vmov	s15, r3
 800c12c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c130:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c134:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c138:	4b5c      	ldr	r3, [pc, #368]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c13a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c13c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c140:	ee07 3a90 	vmov	s15, r3
 800c144:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c148:	ed97 6a02 	vldr	s12, [r7, #8]
 800c14c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c150:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c154:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c158:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c15c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c160:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c164:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c168:	e036      	b.n	800c1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c16a:	4b50      	ldr	r3, [pc, #320]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c172:	2b00      	cmp	r3, #0
 800c174:	d005      	beq.n	800c182 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800c176:	4b4d      	ldr	r3, [pc, #308]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c178:	689b      	ldr	r3, [r3, #8]
 800c17a:	0f1b      	lsrs	r3, r3, #28
 800c17c:	f003 030f 	and.w	r3, r3, #15
 800c180:	e006      	b.n	800c190 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800c182:	4b4a      	ldr	r3, [pc, #296]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c184:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c188:	041b      	lsls	r3, r3, #16
 800c18a:	0f1b      	lsrs	r3, r3, #28
 800c18c:	f003 030f 	and.w	r3, r3, #15
 800c190:	4a49      	ldr	r2, [pc, #292]	@ (800c2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c196:	ee07 3a90 	vmov	s15, r3
 800c19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	ee07 3a90 	vmov	s15, r3
 800c1a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	ee07 3a90 	vmov	s15, r3
 800c1b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c1ba:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c1be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1d6:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800c1d8:	4b34      	ldr	r3, [pc, #208]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c1da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d017      	beq.n	800c214 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c1e4:	4b31      	ldr	r3, [pc, #196]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c1e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1e8:	0a5b      	lsrs	r3, r3, #9
 800c1ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1ee:	ee07 3a90 	vmov	s15, r3
 800c1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800c1f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c1fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800c202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c20a:	ee17 2a90 	vmov	r2, s15
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	601a      	str	r2, [r3, #0]
 800c212:	e002      	b.n	800c21a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800c21a:	4b24      	ldr	r3, [pc, #144]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c21e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c222:	2b00      	cmp	r3, #0
 800c224:	d017      	beq.n	800c256 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c226:	4b21      	ldr	r3, [pc, #132]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c22a:	0c1b      	lsrs	r3, r3, #16
 800c22c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c230:	ee07 3a90 	vmov	s15, r3
 800c234:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800c238:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c23c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c240:	edd7 6a07 	vldr	s13, [r7, #28]
 800c244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c24c:	ee17 2a90 	vmov	r2, s15
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	605a      	str	r2, [r3, #4]
 800c254:	e002      	b.n	800c25c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800c25c:	4b13      	ldr	r3, [pc, #76]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c25e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c260:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c264:	2b00      	cmp	r3, #0
 800c266:	d017      	beq.n	800c298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c268:	4b10      	ldr	r3, [pc, #64]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c26a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c26c:	0e1b      	lsrs	r3, r3, #24
 800c26e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c272:	ee07 3a90 	vmov	s15, r3
 800c276:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800c27a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c27e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c282:	edd7 6a07 	vldr	s13, [r7, #28]
 800c286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c28a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c28e:	ee17 2a90 	vmov	r2, s15
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c296:	e002      	b.n	800c29e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	609a      	str	r2, [r3, #8]
}
 800c29e:	bf00      	nop
 800c2a0:	3724      	adds	r7, #36	@ 0x24
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	46020c00 	.word	0x46020c00
 800c2b0:	4b742400 	.word	0x4b742400
 800c2b4:	46000000 	.word	0x46000000
 800c2b8:	08011c1c 	.word	0x08011c1c

0800c2bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b089      	sub	sp, #36	@ 0x24
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800c2c4:	4ba6      	ldr	r3, [pc, #664]	@ (800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2cc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800c2ce:	4ba4      	ldr	r3, [pc, #656]	@ (800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2d2:	f003 0303 	and.w	r3, r3, #3
 800c2d6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800c2d8:	4ba1      	ldr	r3, [pc, #644]	@ (800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2dc:	0a1b      	lsrs	r3, r3, #8
 800c2de:	f003 030f 	and.w	r3, r3, #15
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800c2e6:	4b9e      	ldr	r3, [pc, #632]	@ (800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2ea:	091b      	lsrs	r3, r3, #4
 800c2ec:	f003 0301 	and.w	r3, r3, #1
 800c2f0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800c2f2:	4b9b      	ldr	r3, [pc, #620]	@ (800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2f6:	08db      	lsrs	r3, r3, #3
 800c2f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2fc:	68fa      	ldr	r2, [r7, #12]
 800c2fe:	fb02 f303 	mul.w	r3, r2, r3
 800c302:	ee07 3a90 	vmov	s15, r3
 800c306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c30a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	2b03      	cmp	r3, #3
 800c312:	d062      	beq.n	800c3da <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	2b03      	cmp	r3, #3
 800c318:	f200 8081 	bhi.w	800c41e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d024      	beq.n	800c36c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	2b02      	cmp	r3, #2
 800c326:	d17a      	bne.n	800c41e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	ee07 3a90 	vmov	s15, r3
 800c32e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c332:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c33a:	4b89      	ldr	r3, [pc, #548]	@ (800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c33c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c33e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c342:	ee07 3a90 	vmov	s15, r3
 800c346:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c34a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c34e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c568 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c352:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c356:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c35a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c35e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c362:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c366:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800c36a:	e08f      	b.n	800c48c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c36c:	4b7c      	ldr	r3, [pc, #496]	@ (800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c374:	2b00      	cmp	r3, #0
 800c376:	d005      	beq.n	800c384 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800c378:	4b79      	ldr	r3, [pc, #484]	@ (800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c37a:	689b      	ldr	r3, [r3, #8]
 800c37c:	0f1b      	lsrs	r3, r3, #28
 800c37e:	f003 030f 	and.w	r3, r3, #15
 800c382:	e006      	b.n	800c392 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800c384:	4b76      	ldr	r3, [pc, #472]	@ (800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c386:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c38a:	041b      	lsls	r3, r3, #16
 800c38c:	0f1b      	lsrs	r3, r3, #28
 800c38e:	f003 030f 	and.w	r3, r3, #15
 800c392:	4a76      	ldr	r2, [pc, #472]	@ (800c56c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c398:	ee07 3a90 	vmov	s15, r3
 800c39c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	ee07 3a90 	vmov	s15, r3
 800c3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	ee07 3a90 	vmov	s15, r3
 800c3b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3b8:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3bc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c568 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c3c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c3d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c3d8:	e058      	b.n	800c48c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	ee07 3a90 	vmov	s15, r3
 800c3e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3e4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c3e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3ec:	4b5c      	ldr	r3, [pc, #368]	@ (800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3f4:	ee07 3a90 	vmov	s15, r3
 800c3f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c3fc:	ed97 6a02 	vldr	s12, [r7, #8]
 800c400:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c568 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c404:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c408:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c40c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c410:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c414:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c418:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c41c:	e036      	b.n	800c48c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c41e:	4b50      	ldr	r3, [pc, #320]	@ (800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c426:	2b00      	cmp	r3, #0
 800c428:	d005      	beq.n	800c436 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800c42a:	4b4d      	ldr	r3, [pc, #308]	@ (800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c42c:	689b      	ldr	r3, [r3, #8]
 800c42e:	0f1b      	lsrs	r3, r3, #28
 800c430:	f003 030f 	and.w	r3, r3, #15
 800c434:	e006      	b.n	800c444 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800c436:	4b4a      	ldr	r3, [pc, #296]	@ (800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c438:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c43c:	041b      	lsls	r3, r3, #16
 800c43e:	0f1b      	lsrs	r3, r3, #28
 800c440:	f003 030f 	and.w	r3, r3, #15
 800c444:	4a49      	ldr	r2, [pc, #292]	@ (800c56c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c44a:	ee07 3a90 	vmov	s15, r3
 800c44e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	ee07 3a90 	vmov	s15, r3
 800c458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c45c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	ee07 3a90 	vmov	s15, r3
 800c466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c46a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c46e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c568 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c47a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c47e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c482:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c486:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c48a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800c48c:	4b34      	ldr	r3, [pc, #208]	@ (800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c48e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c490:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c494:	2b00      	cmp	r3, #0
 800c496:	d017      	beq.n	800c4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c498:	4b31      	ldr	r3, [pc, #196]	@ (800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c49a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c49c:	0a5b      	lsrs	r3, r3, #9
 800c49e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4a2:	ee07 3a90 	vmov	s15, r3
 800c4a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800c4aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c4ae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c4b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4be:	ee17 2a90 	vmov	r2, s15
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	601a      	str	r2, [r3, #0]
 800c4c6:	e002      	b.n	800c4ce <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800c4ce:	4b24      	ldr	r3, [pc, #144]	@ (800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c4d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d017      	beq.n	800c50a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c4da:	4b21      	ldr	r3, [pc, #132]	@ (800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c4dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4de:	0c1b      	lsrs	r3, r3, #16
 800c4e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4e4:	ee07 3a90 	vmov	s15, r3
 800c4e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800c4ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c4f0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c4f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c500:	ee17 2a90 	vmov	r2, s15
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	605a      	str	r2, [r3, #4]
 800c508:	e002      	b.n	800c510 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800c510:	4b13      	ldr	r3, [pc, #76]	@ (800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c514:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d017      	beq.n	800c54c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c51c:	4b10      	ldr	r3, [pc, #64]	@ (800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c51e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c520:	0e1b      	lsrs	r3, r3, #24
 800c522:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c526:	ee07 3a90 	vmov	s15, r3
 800c52a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800c52e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c532:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c536:	edd7 6a07 	vldr	s13, [r7, #28]
 800c53a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c53e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c542:	ee17 2a90 	vmov	r2, s15
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c54a:	e002      	b.n	800c552 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2200      	movs	r2, #0
 800c550:	609a      	str	r2, [r3, #8]
}
 800c552:	bf00      	nop
 800c554:	3724      	adds	r7, #36	@ 0x24
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop
 800c560:	46020c00 	.word	0x46020c00
 800c564:	4b742400 	.word	0x4b742400
 800c568:	46000000 	.word	0x46000000
 800c56c:	08011c1c 	.word	0x08011c1c

0800c570 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b08e      	sub	sp, #56	@ 0x38
 800c574:	af00      	add	r7, sp, #0
 800c576:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800c57a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c57e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800c582:	430b      	orrs	r3, r1
 800c584:	d145      	bne.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c586:	4ba7      	ldr	r3, [pc, #668]	@ (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c58c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c590:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800c592:	4ba4      	ldr	r3, [pc, #656]	@ (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c598:	f003 0302 	and.w	r3, r3, #2
 800c59c:	2b02      	cmp	r3, #2
 800c59e:	d108      	bne.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800c5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c5a6:	d104      	bne.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800c5a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5ae:	f001 bb5a 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800c5b2:	4b9c      	ldr	r3, [pc, #624]	@ (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c5b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c5b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c5bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c5c0:	d114      	bne.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5c8:	d110      	bne.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c5ca:	4b96      	ldr	r3, [pc, #600]	@ (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c5cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c5d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c5d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c5d8:	d103      	bne.n	800c5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800c5da:	23fa      	movs	r3, #250	@ 0xfa
 800c5dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c5de:	f001 bb42 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c5e2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c5e6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c5e8:	f001 bb3d 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800c5ec:	4b8d      	ldr	r3, [pc, #564]	@ (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c5f8:	d107      	bne.n	800c60a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c600:	d103      	bne.n	800c60a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800c602:	4b89      	ldr	r3, [pc, #548]	@ (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800c604:	637b      	str	r3, [r7, #52]	@ 0x34
 800c606:	f001 bb2e 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800c60a:	2300      	movs	r3, #0
 800c60c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c60e:	f001 bb2a 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c612:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c616:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c61a:	430b      	orrs	r3, r1
 800c61c:	d151      	bne.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800c61e:	4b81      	ldr	r3, [pc, #516]	@ (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c620:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c624:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800c628:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c62c:	2b80      	cmp	r3, #128	@ 0x80
 800c62e:	d035      	beq.n	800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800c630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c632:	2b80      	cmp	r3, #128	@ 0x80
 800c634:	d841      	bhi.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c638:	2b60      	cmp	r3, #96	@ 0x60
 800c63a:	d02a      	beq.n	800c692 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800c63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c63e:	2b60      	cmp	r3, #96	@ 0x60
 800c640:	d83b      	bhi.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c644:	2b40      	cmp	r3, #64	@ 0x40
 800c646:	d009      	beq.n	800c65c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c64a:	2b40      	cmp	r3, #64	@ 0x40
 800c64c:	d835      	bhi.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00c      	beq.n	800c66e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800c654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c656:	2b20      	cmp	r3, #32
 800c658:	d012      	beq.n	800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c65a:	e02e      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c65c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c660:	4618      	mov	r0, r3
 800c662:	f7ff fb77 	bl	800bd54 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c668:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c66a:	f001 bafc 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c66e:	f107 0318 	add.w	r3, r7, #24
 800c672:	4618      	mov	r0, r3
 800c674:	f7ff fcc8 	bl	800c008 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c678:	69bb      	ldr	r3, [r7, #24]
 800c67a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c67c:	f001 baf3 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c680:	f107 030c 	add.w	r3, r7, #12
 800c684:	4618      	mov	r0, r3
 800c686:	f7ff fe19 	bl	800c2bc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c68e:	f001 baea 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c692:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c696:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c698:	f001 bae5 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c69c:	4b61      	ldr	r3, [pc, #388]	@ (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c6a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6a8:	d103      	bne.n	800c6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800c6aa:	4b60      	ldr	r3, [pc, #384]	@ (800c82c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c6ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c6ae:	f001 bada 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6b6:	f001 bad6 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6be:	f001 bad2 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c6c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6c6:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c6ca:	430b      	orrs	r3, r1
 800c6cc:	d158      	bne.n	800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800c6ce:	4b55      	ldr	r3, [pc, #340]	@ (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c6d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c6d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c6d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6e0:	d03b      	beq.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6e8:	d846      	bhi.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c6f0:	d02e      	beq.n	800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800c6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c6f8:	d83e      	bhi.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c700:	d00b      	beq.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800c702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c708:	d836      	bhi.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d00d      	beq.n	800c72c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800c710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c716:	d012      	beq.n	800c73e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800c718:	e02e      	b.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c71a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c71e:	4618      	mov	r0, r3
 800c720:	f7ff fb18 	bl	800bd54 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c726:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c728:	f001 ba9d 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c72c:	f107 0318 	add.w	r3, r7, #24
 800c730:	4618      	mov	r0, r3
 800c732:	f7ff fc69 	bl	800c008 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c73a:	f001 ba94 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c73e:	f107 030c 	add.w	r3, r7, #12
 800c742:	4618      	mov	r0, r3
 800c744:	f7ff fdba 	bl	800c2bc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c74c:	f001 ba8b 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c750:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c754:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c756:	f001 ba86 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c75a:	4b32      	ldr	r3, [pc, #200]	@ (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c766:	d103      	bne.n	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800c768:	4b30      	ldr	r3, [pc, #192]	@ (800c82c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c76a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c76c:	f001 ba7b 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c770:	2300      	movs	r3, #0
 800c772:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c774:	f001 ba77 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c778:	2300      	movs	r3, #0
 800c77a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c77c:	f001 ba73 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800c780:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c784:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c788:	430b      	orrs	r3, r1
 800c78a:	d126      	bne.n	800c7da <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800c78c:	4b25      	ldr	r3, [pc, #148]	@ (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c78e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c792:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c796:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800c798:	4b22      	ldr	r3, [pc, #136]	@ (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c7a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c7a4:	d106      	bne.n	800c7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800c7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d103      	bne.n	800c7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800c7ac:	4b1f      	ldr	r3, [pc, #124]	@ (800c82c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c7ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7b0:	f001 ba59 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800c7b4:	4b1b      	ldr	r3, [pc, #108]	@ (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c7bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c7c0:	d107      	bne.n	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c7c8:	d103      	bne.n	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800c7ca:	4b19      	ldr	r3, [pc, #100]	@ (800c830 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c7cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7ce:	f001 ba4a 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7d6:	f001 ba46 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800c7da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7de:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800c7e2:	430b      	orrs	r3, r1
 800c7e4:	d16e      	bne.n	800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c7e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c7e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c7ec:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c7f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c7f8:	d03d      	beq.n	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7fc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c800:	d85c      	bhi.n	800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c804:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c808:	d014      	beq.n	800c834 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800c80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c80c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c810:	d854      	bhi.n	800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c814:	2b00      	cmp	r3, #0
 800c816:	d01f      	beq.n	800c858 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800c818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c81a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c81e:	d012      	beq.n	800c846 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800c820:	e04c      	b.n	800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c822:	bf00      	nop
 800c824:	46020c00 	.word	0x46020c00
 800c828:	0007a120 	.word	0x0007a120
 800c82c:	00f42400 	.word	0x00f42400
 800c830:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c838:	4618      	mov	r0, r3
 800c83a:	f7ff fa8b 	bl	800bd54 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c83e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c840:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c842:	f001 ba10 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c846:	f107 0318 	add.w	r3, r7, #24
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7ff fbdc 	bl	800c008 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c854:	f001 ba07 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c858:	4ba7      	ldr	r3, [pc, #668]	@ (800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c860:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c864:	d103      	bne.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800c866:	4ba5      	ldr	r3, [pc, #660]	@ (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c868:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c86a:	f001 b9fc 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c86e:	2300      	movs	r3, #0
 800c870:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c872:	f001 b9f8 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c876:	4ba0      	ldr	r3, [pc, #640]	@ (800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f003 0320 	and.w	r3, r3, #32
 800c87e:	2b20      	cmp	r3, #32
 800c880:	d118      	bne.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c882:	4b9d      	ldr	r3, [pc, #628]	@ (800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c884:	689b      	ldr	r3, [r3, #8]
 800c886:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d005      	beq.n	800c89a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c88e:	4b9a      	ldr	r3, [pc, #616]	@ (800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	0e1b      	lsrs	r3, r3, #24
 800c894:	f003 030f 	and.w	r3, r3, #15
 800c898:	e006      	b.n	800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800c89a:	4b97      	ldr	r3, [pc, #604]	@ (800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c89c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c8a0:	041b      	lsls	r3, r3, #16
 800c8a2:	0e1b      	lsrs	r3, r3, #24
 800c8a4:	f003 030f 	and.w	r3, r3, #15
 800c8a8:	4a95      	ldr	r2, [pc, #596]	@ (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c8aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8ae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c8b0:	f001 b9d9 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8b8:	f001 b9d5 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8c0:	f001 b9d1 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c8c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8c8:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800c8cc:	430b      	orrs	r3, r1
 800c8ce:	d17f      	bne.n	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c8d0:	4b89      	ldr	r3, [pc, #548]	@ (800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c8d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c8d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c8da:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800c8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d165      	bne.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c8e2:	4b85      	ldr	r3, [pc, #532]	@ (800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c8e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c8e8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c8ec:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800c8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8f0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c8f4:	d034      	beq.n	800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800c8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8f8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c8fc:	d853      	bhi.n	800c9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c900:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c904:	d00b      	beq.n	800c91e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800c906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c908:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c90c:	d84b      	bhi.n	800c9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c910:	2b00      	cmp	r3, #0
 800c912:	d016      	beq.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800c914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c916:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c91a:	d009      	beq.n	800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800c91c:	e043      	b.n	800c9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c91e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c922:	4618      	mov	r0, r3
 800c924:	f7ff fa16 	bl	800bd54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c92a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c92c:	f001 b99b 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c930:	f107 0318 	add.w	r3, r7, #24
 800c934:	4618      	mov	r0, r3
 800c936:	f7ff fb67 	bl	800c008 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c93e:	f001 b992 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c942:	4b6d      	ldr	r3, [pc, #436]	@ (800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c94a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c94e:	d103      	bne.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800c950:	4b6a      	ldr	r3, [pc, #424]	@ (800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c952:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c954:	f001 b987 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c958:	2300      	movs	r3, #0
 800c95a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c95c:	f001 b983 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c960:	4b65      	ldr	r3, [pc, #404]	@ (800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f003 0320 	and.w	r3, r3, #32
 800c968:	2b20      	cmp	r3, #32
 800c96a:	d118      	bne.n	800c99e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c96c:	4b62      	ldr	r3, [pc, #392]	@ (800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c96e:	689b      	ldr	r3, [r3, #8]
 800c970:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c974:	2b00      	cmp	r3, #0
 800c976:	d005      	beq.n	800c984 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800c978:	4b5f      	ldr	r3, [pc, #380]	@ (800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c97a:	689b      	ldr	r3, [r3, #8]
 800c97c:	0e1b      	lsrs	r3, r3, #24
 800c97e:	f003 030f 	and.w	r3, r3, #15
 800c982:	e006      	b.n	800c992 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c984:	4b5c      	ldr	r3, [pc, #368]	@ (800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c986:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c98a:	041b      	lsls	r3, r3, #16
 800c98c:	0e1b      	lsrs	r3, r3, #24
 800c98e:	f003 030f 	and.w	r3, r3, #15
 800c992:	4a5b      	ldr	r2, [pc, #364]	@ (800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c998:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c99a:	f001 b964 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c9a2:	f001 b960 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c9aa:	f001 b95c 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800c9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c9b4:	d108      	bne.n	800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7ff f9ca 	bl	800bd54 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9c4:	f001 b94f 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9cc:	f001 b94b 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800c9d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9d4:	1e51      	subs	r1, r2, #1
 800c9d6:	430b      	orrs	r3, r1
 800c9d8:	d136      	bne.n	800ca48 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c9da:	4b47      	ldr	r3, [pc, #284]	@ (800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c9e0:	f003 0303 	and.w	r3, r3, #3
 800c9e4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800c9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d104      	bne.n	800c9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800c9ec:	f7fe f9cc 	bl	800ad88 <HAL_RCC_GetPCLK2Freq>
 800c9f0:	6378      	str	r0, [r7, #52]	@ 0x34
 800c9f2:	f001 b938 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800c9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d104      	bne.n	800ca06 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c9fc:	f7fe f894 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800ca00:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca02:	f001 b930 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800ca06:	4b3c      	ldr	r3, [pc, #240]	@ (800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca12:	d106      	bne.n	800ca22 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800ca14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca16:	2b02      	cmp	r3, #2
 800ca18:	d103      	bne.n	800ca22 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800ca1a:	4b3a      	ldr	r3, [pc, #232]	@ (800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ca1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca1e:	f001 b922 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800ca22:	4b35      	ldr	r3, [pc, #212]	@ (800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ca28:	f003 0302 	and.w	r3, r3, #2
 800ca2c:	2b02      	cmp	r3, #2
 800ca2e:	d107      	bne.n	800ca40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800ca30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca32:	2b03      	cmp	r3, #3
 800ca34:	d104      	bne.n	800ca40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800ca36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca3c:	f001 b913 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800ca40:	2300      	movs	r3, #0
 800ca42:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca44:	f001 b90f 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800ca48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca4c:	1e91      	subs	r1, r2, #2
 800ca4e:	430b      	orrs	r3, r1
 800ca50:	d136      	bne.n	800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800ca52:	4b29      	ldr	r3, [pc, #164]	@ (800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca58:	f003 030c 	and.w	r3, r3, #12
 800ca5c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800ca5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d104      	bne.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ca64:	f7fe f97c 	bl	800ad60 <HAL_RCC_GetPCLK1Freq>
 800ca68:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca6a:	f001 b8fc 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800ca6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca70:	2b04      	cmp	r3, #4
 800ca72:	d104      	bne.n	800ca7e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ca74:	f7fe f858 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800ca78:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca7a:	f001 b8f4 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800ca7e:	4b1e      	ldr	r3, [pc, #120]	@ (800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca8a:	d106      	bne.n	800ca9a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ca8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca8e:	2b08      	cmp	r3, #8
 800ca90:	d103      	bne.n	800ca9a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800ca92:	4b1c      	ldr	r3, [pc, #112]	@ (800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ca94:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca96:	f001 b8e6 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800ca9a:	4b17      	ldr	r3, [pc, #92]	@ (800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800caa0:	f003 0302 	and.w	r3, r3, #2
 800caa4:	2b02      	cmp	r3, #2
 800caa6:	d107      	bne.n	800cab8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800caa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caaa:	2b0c      	cmp	r3, #12
 800caac:	d104      	bne.n	800cab8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800caae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cab2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cab4:	f001 b8d7 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800cab8:	2300      	movs	r3, #0
 800caba:	637b      	str	r3, [r7, #52]	@ 0x34
 800cabc:	f001 b8d3 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800cac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cac4:	1f11      	subs	r1, r2, #4
 800cac6:	430b      	orrs	r3, r1
 800cac8:	d13f      	bne.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800caca:	4b0b      	ldr	r3, [pc, #44]	@ (800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cacc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cad0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cad4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800cad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d104      	bne.n	800cae6 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cadc:	f7fe f940 	bl	800ad60 <HAL_RCC_GetPCLK1Freq>
 800cae0:	6378      	str	r0, [r7, #52]	@ 0x34
 800cae2:	f001 b8c0 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800cae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cae8:	2b10      	cmp	r3, #16
 800caea:	d10d      	bne.n	800cb08 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800caec:	f7fe f81c 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800caf0:	6378      	str	r0, [r7, #52]	@ 0x34
 800caf2:	f001 b8b8 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800caf6:	bf00      	nop
 800caf8:	46020c00 	.word	0x46020c00
 800cafc:	02dc6c00 	.word	0x02dc6c00
 800cb00:	08011c1c 	.word	0x08011c1c
 800cb04:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800cb08:	4ba8      	ldr	r3, [pc, #672]	@ (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb14:	d106      	bne.n	800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800cb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb18:	2b20      	cmp	r3, #32
 800cb1a:	d103      	bne.n	800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800cb1c:	4ba4      	ldr	r3, [pc, #656]	@ (800cdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cb1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb20:	f001 b8a1 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800cb24:	4ba1      	ldr	r3, [pc, #644]	@ (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cb2a:	f003 0302 	and.w	r3, r3, #2
 800cb2e:	2b02      	cmp	r3, #2
 800cb30:	d107      	bne.n	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800cb32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb34:	2b30      	cmp	r3, #48	@ 0x30
 800cb36:	d104      	bne.n	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800cb38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb3e:	f001 b892 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800cb42:	2300      	movs	r3, #0
 800cb44:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb46:	f001 b88e 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800cb4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb4e:	f1a2 0108 	sub.w	r1, r2, #8
 800cb52:	430b      	orrs	r3, r1
 800cb54:	d136      	bne.n	800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800cb56:	4b95      	ldr	r3, [pc, #596]	@ (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cb5c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cb60:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800cb62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d104      	bne.n	800cb72 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cb68:	f7fe f8fa 	bl	800ad60 <HAL_RCC_GetPCLK1Freq>
 800cb6c:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb6e:	f001 b87a 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800cb72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb74:	2b40      	cmp	r3, #64	@ 0x40
 800cb76:	d104      	bne.n	800cb82 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cb78:	f7fd ffd6 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800cb7c:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb7e:	f001 b872 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800cb82:	4b8a      	ldr	r3, [pc, #552]	@ (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb8e:	d106      	bne.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800cb90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb92:	2b80      	cmp	r3, #128	@ 0x80
 800cb94:	d103      	bne.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800cb96:	4b86      	ldr	r3, [pc, #536]	@ (800cdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cb98:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb9a:	f001 b864 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800cb9e:	4b83      	ldr	r3, [pc, #524]	@ (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cba4:	f003 0302 	and.w	r3, r3, #2
 800cba8:	2b02      	cmp	r3, #2
 800cbaa:	d107      	bne.n	800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800cbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbae:	2bc0      	cmp	r3, #192	@ 0xc0
 800cbb0:	d104      	bne.n	800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800cbb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbb8:	f001 b855 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbc0:	f001 b851 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800cbc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbc8:	f1a2 0110 	sub.w	r1, r2, #16
 800cbcc:	430b      	orrs	r3, r1
 800cbce:	d139      	bne.n	800cc44 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800cbd0:	4b76      	ldr	r3, [pc, #472]	@ (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cbd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cbd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cbda:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800cbdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d104      	bne.n	800cbec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cbe2:	f7fe f8bd 	bl	800ad60 <HAL_RCC_GetPCLK1Freq>
 800cbe6:	6378      	str	r0, [r7, #52]	@ 0x34
 800cbe8:	f001 b83d 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800cbec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbf2:	d104      	bne.n	800cbfe <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cbf4:	f7fd ff98 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800cbf8:	6378      	str	r0, [r7, #52]	@ 0x34
 800cbfa:	f001 b834 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800cbfe:	4b6b      	ldr	r3, [pc, #428]	@ (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc0a:	d107      	bne.n	800cc1c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800cc0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc12:	d103      	bne.n	800cc1c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800cc14:	4b66      	ldr	r3, [pc, #408]	@ (800cdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cc16:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc18:	f001 b825 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800cc1c:	4b63      	ldr	r3, [pc, #396]	@ (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cc22:	f003 0302 	and.w	r3, r3, #2
 800cc26:	2b02      	cmp	r3, #2
 800cc28:	d108      	bne.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800cc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc30:	d104      	bne.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800cc32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc36:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc38:	f001 b815 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc40:	f001 b811 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800cc44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc48:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800cc4c:	430b      	orrs	r3, r1
 800cc4e:	d139      	bne.n	800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800cc50:	4b56      	ldr	r3, [pc, #344]	@ (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cc56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cc5a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800cc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d104      	bne.n	800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cc62:	f7fe f87d 	bl	800ad60 <HAL_RCC_GetPCLK1Freq>
 800cc66:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc68:	f000 bffd 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800cc6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc72:	d104      	bne.n	800cc7e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cc74:	f7fd ff58 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800cc78:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc7a:	f000 bff4 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800cc7e:	4b4b      	ldr	r3, [pc, #300]	@ (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc8a:	d107      	bne.n	800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800cc8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cc92:	d103      	bne.n	800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800cc94:	4b46      	ldr	r3, [pc, #280]	@ (800cdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cc96:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc98:	f000 bfe5 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800cc9c:	4b43      	ldr	r3, [pc, #268]	@ (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cca2:	f003 0302 	and.w	r3, r3, #2
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	d108      	bne.n	800ccbc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ccb0:	d104      	bne.n	800ccbc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800ccb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ccb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccb8:	f000 bfd5 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccc0:	f000 bfd1 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800ccc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccc8:	f1a2 0120 	sub.w	r1, r2, #32
 800cccc:	430b      	orrs	r3, r1
 800ccce:	d158      	bne.n	800cd82 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800ccd0:	4b36      	ldr	r3, [pc, #216]	@ (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ccd6:	f003 0307 	and.w	r3, r3, #7
 800ccda:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800ccdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d104      	bne.n	800ccec <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800cce2:	f7fe f865 	bl	800adb0 <HAL_RCC_GetPCLK3Freq>
 800cce6:	6378      	str	r0, [r7, #52]	@ 0x34
 800cce8:	f000 bfbd 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800ccec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d104      	bne.n	800ccfc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ccf2:	f7fd ff19 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800ccf6:	6378      	str	r0, [r7, #52]	@ 0x34
 800ccf8:	f000 bfb5 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800ccfc:	4b2b      	ldr	r3, [pc, #172]	@ (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd08:	d106      	bne.n	800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd0c:	2b02      	cmp	r3, #2
 800cd0e:	d103      	bne.n	800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800cd10:	4b27      	ldr	r3, [pc, #156]	@ (800cdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cd12:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd14:	f000 bfa7 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800cd18:	4b24      	ldr	r3, [pc, #144]	@ (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cd1e:	f003 0302 	and.w	r3, r3, #2
 800cd22:	2b02      	cmp	r3, #2
 800cd24:	d107      	bne.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800cd26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd28:	2b03      	cmp	r3, #3
 800cd2a:	d104      	bne.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800cd2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd30:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd32:	f000 bf98 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800cd36:	4b1d      	ldr	r3, [pc, #116]	@ (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f003 0320 	and.w	r3, r3, #32
 800cd3e:	2b20      	cmp	r3, #32
 800cd40:	d11b      	bne.n	800cd7a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800cd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd44:	2b04      	cmp	r3, #4
 800cd46:	d118      	bne.n	800cd7a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cd48:	4b18      	ldr	r3, [pc, #96]	@ (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d005      	beq.n	800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800cd54:	4b15      	ldr	r3, [pc, #84]	@ (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd56:	689b      	ldr	r3, [r3, #8]
 800cd58:	0e1b      	lsrs	r3, r3, #24
 800cd5a:	f003 030f 	and.w	r3, r3, #15
 800cd5e:	e006      	b.n	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800cd60:	4b12      	ldr	r3, [pc, #72]	@ (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cd66:	041b      	lsls	r3, r3, #16
 800cd68:	0e1b      	lsrs	r3, r3, #24
 800cd6a:	f003 030f 	and.w	r3, r3, #15
 800cd6e:	4a11      	ldr	r2, [pc, #68]	@ (800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800cd70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd74:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd76:	f000 bf76 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd7e:	f000 bf72 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800cd82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd86:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800cd8a:	430b      	orrs	r3, r1
 800cd8c:	d172      	bne.n	800ce74 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800cd8e:	4b07      	ldr	r3, [pc, #28]	@ (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cd94:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800cd98:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800cd9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cda0:	d10a      	bne.n	800cdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cda2:	f7fd fec1 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800cda6:	6378      	str	r0, [r7, #52]	@ 0x34
 800cda8:	f000 bf5d 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cdac:	46020c00 	.word	0x46020c00
 800cdb0:	00f42400 	.word	0x00f42400
 800cdb4:	08011c1c 	.word	0x08011c1c
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800cdb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cdbe:	d108      	bne.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdc0:	f107 0318 	add.w	r3, r7, #24
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f7ff f91f 	bl	800c008 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800cdca:	6a3b      	ldr	r3, [r7, #32]
 800cdcc:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdce:	f000 bf4a 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800cdd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d104      	bne.n	800cde2 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800cdd8:	f7fd ffa8 	bl	800ad2c <HAL_RCC_GetHCLKFreq>
 800cddc:	6378      	str	r0, [r7, #52]	@ 0x34
 800cdde:	f000 bf42 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800cde2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800cde8:	d122      	bne.n	800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cdea:	4bb0      	ldr	r3, [pc, #704]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f003 0320 	and.w	r3, r3, #32
 800cdf2:	2b20      	cmp	r3, #32
 800cdf4:	d118      	bne.n	800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cdf6:	4bad      	ldr	r3, [pc, #692]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cdf8:	689b      	ldr	r3, [r3, #8]
 800cdfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d005      	beq.n	800ce0e <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800ce02:	4baa      	ldr	r3, [pc, #680]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce04:	689b      	ldr	r3, [r3, #8]
 800ce06:	0e1b      	lsrs	r3, r3, #24
 800ce08:	f003 030f 	and.w	r3, r3, #15
 800ce0c:	e006      	b.n	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800ce0e:	4ba7      	ldr	r3, [pc, #668]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ce14:	041b      	lsls	r3, r3, #16
 800ce16:	0e1b      	lsrs	r3, r3, #24
 800ce18:	f003 030f 	and.w	r3, r3, #15
 800ce1c:	4aa4      	ldr	r2, [pc, #656]	@ (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ce1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce22:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce24:	f000 bf1f 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce2c:	f000 bf1b 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800ce30:	4b9e      	ldr	r3, [pc, #632]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce3c:	d107      	bne.n	800ce4e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800ce3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ce44:	d103      	bne.n	800ce4e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800ce46:	4b9b      	ldr	r3, [pc, #620]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ce48:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce4a:	f000 bf0c 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800ce4e:	4b97      	ldr	r3, [pc, #604]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce5a:	d107      	bne.n	800ce6c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800ce5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ce62:	d103      	bne.n	800ce6c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800ce64:	4b93      	ldr	r3, [pc, #588]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ce66:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce68:	f000 befd 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce70:	f000 bef9 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800ce74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce78:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ce7c:	430b      	orrs	r3, r1
 800ce7e:	d158      	bne.n	800cf32 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800ce80:	4b8a      	ldr	r3, [pc, #552]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ce86:	f003 0307 	and.w	r3, r3, #7
 800ce8a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ce8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce8e:	2b04      	cmp	r3, #4
 800ce90:	d84b      	bhi.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800ce92:	a201      	add	r2, pc, #4	@ (adr r2, 800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800ce94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce98:	0800ced1 	.word	0x0800ced1
 800ce9c:	0800cead 	.word	0x0800cead
 800cea0:	0800cebf 	.word	0x0800cebf
 800cea4:	0800cedb 	.word	0x0800cedb
 800cea8:	0800cee5 	.word	0x0800cee5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ceac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7fe ff4f 	bl	800bd54 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ceb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ceba:	f000 bed4 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cebe:	f107 030c 	add.w	r3, r7, #12
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7ff f9fa 	bl	800c2bc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cecc:	f000 becb 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800ced0:	f7fd ff2c 	bl	800ad2c <HAL_RCC_GetHCLKFreq>
 800ced4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ced6:	f000 bec6 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ceda:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800cede:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cee0:	f000 bec1 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cee4:	4b71      	ldr	r3, [pc, #452]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f003 0320 	and.w	r3, r3, #32
 800ceec:	2b20      	cmp	r3, #32
 800ceee:	d118      	bne.n	800cf22 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cef0:	4b6e      	ldr	r3, [pc, #440]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cef2:	689b      	ldr	r3, [r3, #8]
 800cef4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d005      	beq.n	800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800cefc:	4b6b      	ldr	r3, [pc, #428]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cefe:	689b      	ldr	r3, [r3, #8]
 800cf00:	0e1b      	lsrs	r3, r3, #24
 800cf02:	f003 030f 	and.w	r3, r3, #15
 800cf06:	e006      	b.n	800cf16 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800cf08:	4b68      	ldr	r3, [pc, #416]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cf0e:	041b      	lsls	r3, r3, #16
 800cf10:	0e1b      	lsrs	r3, r3, #24
 800cf12:	f003 030f 	and.w	r3, r3, #15
 800cf16:	4a66      	ldr	r2, [pc, #408]	@ (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cf18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf1c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cf1e:	f000 bea2 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cf22:	2300      	movs	r3, #0
 800cf24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf26:	f000 be9e 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf2e:	f000 be9a 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800cf32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf36:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800cf3a:	430b      	orrs	r3, r1
 800cf3c:	d167      	bne.n	800d00e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800cf3e:	4b5b      	ldr	r3, [pc, #364]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cf44:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800cf48:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800cf4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cf50:	d036      	beq.n	800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800cf52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cf58:	d855      	bhi.n	800d006 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800cf5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cf60:	d029      	beq.n	800cfb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800cf62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cf68:	d84d      	bhi.n	800d006 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800cf6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf70:	d013      	beq.n	800cf9a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800cf72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf78:	d845      	bhi.n	800d006 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800cf7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d015      	beq.n	800cfac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800cf80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf86:	d13e      	bne.n	800d006 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7fe fee1 	bl	800bd54 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800cf92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf96:	f000 be66 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf9a:	f107 030c 	add.w	r3, r7, #12
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7ff f98c 	bl	800c2bc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cfa8:	f000 be5d 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800cfac:	f7fd febe 	bl	800ad2c <HAL_RCC_GetHCLKFreq>
 800cfb0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cfb2:	f000 be58 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800cfb6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800cfba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cfbc:	f000 be53 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cfc0:	4b3a      	ldr	r3, [pc, #232]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f003 0320 	and.w	r3, r3, #32
 800cfc8:	2b20      	cmp	r3, #32
 800cfca:	d118      	bne.n	800cffe <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cfcc:	4b37      	ldr	r3, [pc, #220]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfce:	689b      	ldr	r3, [r3, #8]
 800cfd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d005      	beq.n	800cfe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800cfd8:	4b34      	ldr	r3, [pc, #208]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	0e1b      	lsrs	r3, r3, #24
 800cfde:	f003 030f 	and.w	r3, r3, #15
 800cfe2:	e006      	b.n	800cff2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cfe4:	4b31      	ldr	r3, [pc, #196]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfe6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cfea:	041b      	lsls	r3, r3, #16
 800cfec:	0e1b      	lsrs	r3, r3, #24
 800cfee:	f003 030f 	and.w	r3, r3, #15
 800cff2:	4a2f      	ldr	r2, [pc, #188]	@ (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cff8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cffa:	f000 be34 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cffe:	2300      	movs	r3, #0
 800d000:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d002:	f000 be30 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d006:	2300      	movs	r3, #0
 800d008:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d00a:	f000 be2c 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800d00e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d012:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800d016:	430b      	orrs	r3, r1
 800d018:	d152      	bne.n	800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800d01a:	4b24      	ldr	r3, [pc, #144]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d01c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d020:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d024:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800d026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d104      	bne.n	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d02c:	f7fd fe98 	bl	800ad60 <HAL_RCC_GetPCLK1Freq>
 800d030:	6378      	str	r0, [r7, #52]	@ 0x34
 800d032:	f000 be18 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800d036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d03c:	d104      	bne.n	800d048 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d03e:	f7fd fd73 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800d042:	6378      	str	r0, [r7, #52]	@ 0x34
 800d044:	f000 be0f 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800d048:	4b18      	ldr	r3, [pc, #96]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d054:	d107      	bne.n	800d066 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800d056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d05c:	d103      	bne.n	800d066 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800d05e:	4b15      	ldr	r3, [pc, #84]	@ (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d060:	637b      	str	r3, [r7, #52]	@ 0x34
 800d062:	f000 be00 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800d066:	4b11      	ldr	r3, [pc, #68]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f003 0320 	and.w	r3, r3, #32
 800d06e:	2b20      	cmp	r3, #32
 800d070:	d122      	bne.n	800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800d072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d074:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d078:	d11e      	bne.n	800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d07a:	4b0c      	ldr	r3, [pc, #48]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d07c:	689b      	ldr	r3, [r3, #8]
 800d07e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d082:	2b00      	cmp	r3, #0
 800d084:	d005      	beq.n	800d092 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800d086:	4b09      	ldr	r3, [pc, #36]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d088:	689b      	ldr	r3, [r3, #8]
 800d08a:	0e1b      	lsrs	r3, r3, #24
 800d08c:	f003 030f 	and.w	r3, r3, #15
 800d090:	e006      	b.n	800d0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800d092:	4b06      	ldr	r3, [pc, #24]	@ (800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d094:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d098:	041b      	lsls	r3, r3, #16
 800d09a:	0e1b      	lsrs	r3, r3, #24
 800d09c:	f003 030f 	and.w	r3, r3, #15
 800d0a0:	4a03      	ldr	r2, [pc, #12]	@ (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d0a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0a8:	f000 bddd 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d0ac:	46020c00 	.word	0x46020c00
 800d0b0:	08011c1c 	.word	0x08011c1c
 800d0b4:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0bc:	f000 bdd3 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800d0c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0c4:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800d0c8:	430b      	orrs	r3, r1
 800d0ca:	d14c      	bne.n	800d166 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800d0cc:	4ba8      	ldr	r3, [pc, #672]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d0d2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d0d6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800d0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d104      	bne.n	800d0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d0de:	f7fd fe3f 	bl	800ad60 <HAL_RCC_GetPCLK1Freq>
 800d0e2:	6378      	str	r0, [r7, #52]	@ 0x34
 800d0e4:	f000 bdbf 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800d0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0ee:	d104      	bne.n	800d0fa <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d0f0:	f7fd fd1a 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800d0f4:	6378      	str	r0, [r7, #52]	@ 0x34
 800d0f6:	f000 bdb6 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800d0fa:	4b9d      	ldr	r3, [pc, #628]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d106:	d107      	bne.n	800d118 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800d108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d10a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d10e:	d103      	bne.n	800d118 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800d110:	4b98      	ldr	r3, [pc, #608]	@ (800d374 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d112:	637b      	str	r3, [r7, #52]	@ 0x34
 800d114:	f000 bda7 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800d118:	4b95      	ldr	r3, [pc, #596]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f003 0320 	and.w	r3, r3, #32
 800d120:	2b20      	cmp	r3, #32
 800d122:	d11c      	bne.n	800d15e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800d124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d126:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d12a:	d118      	bne.n	800d15e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d12c:	4b90      	ldr	r3, [pc, #576]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d12e:	689b      	ldr	r3, [r3, #8]
 800d130:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d134:	2b00      	cmp	r3, #0
 800d136:	d005      	beq.n	800d144 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800d138:	4b8d      	ldr	r3, [pc, #564]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	0e1b      	lsrs	r3, r3, #24
 800d13e:	f003 030f 	and.w	r3, r3, #15
 800d142:	e006      	b.n	800d152 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800d144:	4b8a      	ldr	r3, [pc, #552]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d146:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d14a:	041b      	lsls	r3, r3, #16
 800d14c:	0e1b      	lsrs	r3, r3, #24
 800d14e:	f003 030f 	and.w	r3, r3, #15
 800d152:	4a89      	ldr	r2, [pc, #548]	@ (800d378 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d158:	637b      	str	r3, [r7, #52]	@ 0x34
 800d15a:	f000 bd84 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800d15e:	2300      	movs	r3, #0
 800d160:	637b      	str	r3, [r7, #52]	@ 0x34
 800d162:	f000 bd80 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800d166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d16a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800d16e:	430b      	orrs	r3, r1
 800d170:	d158      	bne.n	800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800d172:	4b7f      	ldr	r3, [pc, #508]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d178:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d17c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d180:	2bc0      	cmp	r3, #192	@ 0xc0
 800d182:	d028      	beq.n	800d1d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800d184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d186:	2bc0      	cmp	r3, #192	@ 0xc0
 800d188:	d848      	bhi.n	800d21c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d18c:	2b80      	cmp	r3, #128	@ 0x80
 800d18e:	d00e      	beq.n	800d1ae <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800d190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d192:	2b80      	cmp	r3, #128	@ 0x80
 800d194:	d842      	bhi.n	800d21c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d003      	beq.n	800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800d19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d19e:	2b40      	cmp	r3, #64	@ 0x40
 800d1a0:	d014      	beq.n	800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800d1a2:	e03b      	b.n	800d21c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800d1a4:	f7fd fe04 	bl	800adb0 <HAL_RCC_GetPCLK3Freq>
 800d1a8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d1aa:	f000 bd5c 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d1ae:	4b70      	ldr	r3, [pc, #448]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d1b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1ba:	d103      	bne.n	800d1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800d1bc:	4b6d      	ldr	r3, [pc, #436]	@ (800d374 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d1be:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d1c0:	f000 bd51 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1c8:	f000 bd4d 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800d1cc:	f7fd fcac 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800d1d0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d1d2:	f000 bd48 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d1d6:	4b66      	ldr	r3, [pc, #408]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f003 0320 	and.w	r3, r3, #32
 800d1de:	2b20      	cmp	r3, #32
 800d1e0:	d118      	bne.n	800d214 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d1e2:	4b63      	ldr	r3, [pc, #396]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d005      	beq.n	800d1fa <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800d1ee:	4b60      	ldr	r3, [pc, #384]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	0e1b      	lsrs	r3, r3, #24
 800d1f4:	f003 030f 	and.w	r3, r3, #15
 800d1f8:	e006      	b.n	800d208 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800d1fa:	4b5d      	ldr	r3, [pc, #372]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d200:	041b      	lsls	r3, r3, #16
 800d202:	0e1b      	lsrs	r3, r3, #24
 800d204:	f003 030f 	and.w	r3, r3, #15
 800d208:	4a5b      	ldr	r2, [pc, #364]	@ (800d378 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d20a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d20e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d210:	f000 bd29 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d214:	2300      	movs	r3, #0
 800d216:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d218:	f000 bd25 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800d21c:	2300      	movs	r3, #0
 800d21e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d220:	f000 bd21 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800d224:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d228:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800d22c:	430b      	orrs	r3, r1
 800d22e:	d14c      	bne.n	800d2ca <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800d230:	4b4f      	ldr	r3, [pc, #316]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d236:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d23a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800d23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d104      	bne.n	800d24c <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d242:	f7fd fd8d 	bl	800ad60 <HAL_RCC_GetPCLK1Freq>
 800d246:	6378      	str	r0, [r7, #52]	@ 0x34
 800d248:	f000 bd0d 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800d24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d24e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d252:	d104      	bne.n	800d25e <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d254:	f7fd fc68 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800d258:	6378      	str	r0, [r7, #52]	@ 0x34
 800d25a:	f000 bd04 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800d25e:	4b44      	ldr	r3, [pc, #272]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d26a:	d107      	bne.n	800d27c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800d26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d26e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d272:	d103      	bne.n	800d27c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800d274:	4b3f      	ldr	r3, [pc, #252]	@ (800d374 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d276:	637b      	str	r3, [r7, #52]	@ 0x34
 800d278:	f000 bcf5 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800d27c:	4b3c      	ldr	r3, [pc, #240]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f003 0320 	and.w	r3, r3, #32
 800d284:	2b20      	cmp	r3, #32
 800d286:	d11c      	bne.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800d288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d28a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d28e:	d118      	bne.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d290:	4b37      	ldr	r3, [pc, #220]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d292:	689b      	ldr	r3, [r3, #8]
 800d294:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d005      	beq.n	800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800d29c:	4b34      	ldr	r3, [pc, #208]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d29e:	689b      	ldr	r3, [r3, #8]
 800d2a0:	0e1b      	lsrs	r3, r3, #24
 800d2a2:	f003 030f 	and.w	r3, r3, #15
 800d2a6:	e006      	b.n	800d2b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800d2a8:	4b31      	ldr	r3, [pc, #196]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d2ae:	041b      	lsls	r3, r3, #16
 800d2b0:	0e1b      	lsrs	r3, r3, #24
 800d2b2:	f003 030f 	and.w	r3, r3, #15
 800d2b6:	4a30      	ldr	r2, [pc, #192]	@ (800d378 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d2b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2be:	f000 bcd2 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2c6:	f000 bcce 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800d2ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2ce:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800d2d2:	430b      	orrs	r3, r1
 800d2d4:	d152      	bne.n	800d37c <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800d2d6:	4b26      	ldr	r3, [pc, #152]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d2dc:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d2e0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d104      	bne.n	800d2f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d2e8:	f7fd fd3a 	bl	800ad60 <HAL_RCC_GetPCLK1Freq>
 800d2ec:	6378      	str	r0, [r7, #52]	@ 0x34
 800d2ee:	f000 bcba 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d2f8:	d104      	bne.n	800d304 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d2fa:	f7fd fc15 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800d2fe:	6378      	str	r0, [r7, #52]	@ 0x34
 800d300:	f000 bcb1 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800d304:	4b1a      	ldr	r3, [pc, #104]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d30c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d310:	d107      	bne.n	800d322 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800d312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d314:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d318:	d103      	bne.n	800d322 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800d31a:	4b16      	ldr	r3, [pc, #88]	@ (800d374 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d31c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d31e:	f000 bca2 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800d322:	4b13      	ldr	r3, [pc, #76]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f003 0320 	and.w	r3, r3, #32
 800d32a:	2b20      	cmp	r3, #32
 800d32c:	d11c      	bne.n	800d368 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800d32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d330:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d334:	d118      	bne.n	800d368 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d336:	4b0e      	ldr	r3, [pc, #56]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d005      	beq.n	800d34e <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800d342:	4b0b      	ldr	r3, [pc, #44]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d344:	689b      	ldr	r3, [r3, #8]
 800d346:	0e1b      	lsrs	r3, r3, #24
 800d348:	f003 030f 	and.w	r3, r3, #15
 800d34c:	e006      	b.n	800d35c <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800d34e:	4b08      	ldr	r3, [pc, #32]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d350:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d354:	041b      	lsls	r3, r3, #16
 800d356:	0e1b      	lsrs	r3, r3, #24
 800d358:	f003 030f 	and.w	r3, r3, #15
 800d35c:	4a06      	ldr	r2, [pc, #24]	@ (800d378 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d35e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d362:	637b      	str	r3, [r7, #52]	@ 0x34
 800d364:	f000 bc7f 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800d368:	2300      	movs	r3, #0
 800d36a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d36c:	f000 bc7b 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d370:	46020c00 	.word	0x46020c00
 800d374:	00f42400 	.word	0x00f42400
 800d378:	08011c1c 	.word	0x08011c1c
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800d37c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d380:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800d384:	430b      	orrs	r3, r1
 800d386:	d14c      	bne.n	800d422 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800d388:	4ba6      	ldr	r3, [pc, #664]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d38a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d38e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d392:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800d394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d396:	2b00      	cmp	r3, #0
 800d398:	d104      	bne.n	800d3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d39a:	f7fd fce1 	bl	800ad60 <HAL_RCC_GetPCLK1Freq>
 800d39e:	6378      	str	r0, [r7, #52]	@ 0x34
 800d3a0:	f000 bc61 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800d3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d3aa:	d104      	bne.n	800d3b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d3ac:	f7fd fbbc 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800d3b0:	6378      	str	r0, [r7, #52]	@ 0x34
 800d3b2:	f000 bc58 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800d3b6:	4b9b      	ldr	r3, [pc, #620]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d3be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d3c2:	d107      	bne.n	800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800d3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d3ca:	d103      	bne.n	800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800d3cc:	4b96      	ldr	r3, [pc, #600]	@ (800d628 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d3ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3d0:	f000 bc49 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800d3d4:	4b93      	ldr	r3, [pc, #588]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f003 0320 	and.w	r3, r3, #32
 800d3dc:	2b20      	cmp	r3, #32
 800d3de:	d11c      	bne.n	800d41a <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800d3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d3e6:	d118      	bne.n	800d41a <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d3e8:	4b8e      	ldr	r3, [pc, #568]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3ea:	689b      	ldr	r3, [r3, #8]
 800d3ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d005      	beq.n	800d400 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800d3f4:	4b8b      	ldr	r3, [pc, #556]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3f6:	689b      	ldr	r3, [r3, #8]
 800d3f8:	0e1b      	lsrs	r3, r3, #24
 800d3fa:	f003 030f 	and.w	r3, r3, #15
 800d3fe:	e006      	b.n	800d40e <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800d400:	4b88      	ldr	r3, [pc, #544]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d402:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d406:	041b      	lsls	r3, r3, #16
 800d408:	0e1b      	lsrs	r3, r3, #24
 800d40a:	f003 030f 	and.w	r3, r3, #15
 800d40e:	4a87      	ldr	r2, [pc, #540]	@ (800d62c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d414:	637b      	str	r3, [r7, #52]	@ 0x34
 800d416:	f000 bc26 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800d41a:	2300      	movs	r3, #0
 800d41c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d41e:	f000 bc22 	b.w	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800d422:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d426:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d42a:	430b      	orrs	r3, r1
 800d42c:	d164      	bne.n	800d4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800d42e:	4b7d      	ldr	r3, [pc, #500]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d434:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d438:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800d43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d120      	bne.n	800d482 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d440:	4b78      	ldr	r3, [pc, #480]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f003 0320 	and.w	r3, r3, #32
 800d448:	2b20      	cmp	r3, #32
 800d44a:	d117      	bne.n	800d47c <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d44c:	4b75      	ldr	r3, [pc, #468]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d44e:	689b      	ldr	r3, [r3, #8]
 800d450:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d454:	2b00      	cmp	r3, #0
 800d456:	d005      	beq.n	800d464 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800d458:	4b72      	ldr	r3, [pc, #456]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d45a:	689b      	ldr	r3, [r3, #8]
 800d45c:	0e1b      	lsrs	r3, r3, #24
 800d45e:	f003 030f 	and.w	r3, r3, #15
 800d462:	e006      	b.n	800d472 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800d464:	4b6f      	ldr	r3, [pc, #444]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d466:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d46a:	041b      	lsls	r3, r3, #16
 800d46c:	0e1b      	lsrs	r3, r3, #24
 800d46e:	f003 030f 	and.w	r3, r3, #15
 800d472:	4a6e      	ldr	r2, [pc, #440]	@ (800d62c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d478:	637b      	str	r3, [r7, #52]	@ 0x34
 800d47a:	e3f4      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d47c:	2300      	movs	r3, #0
 800d47e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d480:	e3f1      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800d482:	4b68      	ldr	r3, [pc, #416]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d48c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d490:	d112      	bne.n	800d4b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800d492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d498:	d10e      	bne.n	800d4b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d49a:	4b62      	ldr	r3, [pc, #392]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d49c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d4a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d4a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d4a8:	d102      	bne.n	800d4b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800d4aa:	23fa      	movs	r3, #250	@ 0xfa
 800d4ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d4ae:	e3da      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d4b0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d4b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d4b6:	e3d6      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800d4b8:	4b5a      	ldr	r3, [pc, #360]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d4c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d4c4:	d106      	bne.n	800d4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800d4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4cc:	d102      	bne.n	800d4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800d4ce:	4b56      	ldr	r3, [pc, #344]	@ (800d628 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d4d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4d2:	e3c8      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800d4d4:	4b53      	ldr	r3, [pc, #332]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d4da:	f003 0302 	and.w	r3, r3, #2
 800d4de:	2b02      	cmp	r3, #2
 800d4e0:	d107      	bne.n	800d4f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800d4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d4e8:	d103      	bne.n	800d4f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800d4ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d4ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4f0:	e3b9      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4f6:	e3b6      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800d4f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4fc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800d500:	430b      	orrs	r3, r1
 800d502:	d164      	bne.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d504:	4b47      	ldr	r3, [pc, #284]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d506:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d50a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d50e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800d510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d512:	2b00      	cmp	r3, #0
 800d514:	d120      	bne.n	800d558 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d516:	4b43      	ldr	r3, [pc, #268]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f003 0320 	and.w	r3, r3, #32
 800d51e:	2b20      	cmp	r3, #32
 800d520:	d117      	bne.n	800d552 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d522:	4b40      	ldr	r3, [pc, #256]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d524:	689b      	ldr	r3, [r3, #8]
 800d526:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d005      	beq.n	800d53a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800d52e:	4b3d      	ldr	r3, [pc, #244]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d530:	689b      	ldr	r3, [r3, #8]
 800d532:	0e1b      	lsrs	r3, r3, #24
 800d534:	f003 030f 	and.w	r3, r3, #15
 800d538:	e006      	b.n	800d548 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800d53a:	4b3a      	ldr	r3, [pc, #232]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d53c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d540:	041b      	lsls	r3, r3, #16
 800d542:	0e1b      	lsrs	r3, r3, #24
 800d544:	f003 030f 	and.w	r3, r3, #15
 800d548:	4a38      	ldr	r2, [pc, #224]	@ (800d62c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d54a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d54e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d550:	e389      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d552:	2300      	movs	r3, #0
 800d554:	637b      	str	r3, [r7, #52]	@ 0x34
 800d556:	e386      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800d558:	4b32      	ldr	r3, [pc, #200]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d55a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d55e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d562:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d566:	d112      	bne.n	800d58e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800d568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d56a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d56e:	d10e      	bne.n	800d58e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d570:	4b2c      	ldr	r3, [pc, #176]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d572:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d57a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d57e:	d102      	bne.n	800d586 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800d580:	23fa      	movs	r3, #250	@ 0xfa
 800d582:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d584:	e36f      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d586:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d58a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d58c:	e36b      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800d58e:	4b25      	ldr	r3, [pc, #148]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d59a:	d106      	bne.n	800d5aa <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800d59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d59e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d5a2:	d102      	bne.n	800d5aa <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800d5a4:	4b20      	ldr	r3, [pc, #128]	@ (800d628 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d5a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5a8:	e35d      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800d5aa:	4b1e      	ldr	r3, [pc, #120]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d5b0:	f003 0302 	and.w	r3, r3, #2
 800d5b4:	2b02      	cmp	r3, #2
 800d5b6:	d107      	bne.n	800d5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800d5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d5be:	d103      	bne.n	800d5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800d5c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d5c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5c6:	e34e      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5cc:	e34b      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800d5ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5d2:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d5d6:	430b      	orrs	r3, r1
 800d5d8:	d14e      	bne.n	800d678 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800d5da:	4b12      	ldr	r3, [pc, #72]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d5e0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800d5e4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800d5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d103      	bne.n	800d5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d5ec:	f7fd fbb8 	bl	800ad60 <HAL_RCC_GetPCLK1Freq>
 800d5f0:	6378      	str	r0, [r7, #52]	@ 0x34
 800d5f2:	e338      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800d5f4:	4b0b      	ldr	r3, [pc, #44]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d5fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d5fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d602:	d119      	bne.n	800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800d604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d606:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d60a:	d115      	bne.n	800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d60c:	4b05      	ldr	r3, [pc, #20]	@ (800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d60e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d616:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d61a:	d109      	bne.n	800d630 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800d61c:	23fa      	movs	r3, #250	@ 0xfa
 800d61e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d620:	e321      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d622:	bf00      	nop
 800d624:	46020c00 	.word	0x46020c00
 800d628:	00f42400 	.word	0x00f42400
 800d62c:	08011c1c 	.word	0x08011c1c
      }
      else
      {
        frequency = LSI_VALUE;
 800d630:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d634:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d636:	e316      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800d638:	4ba8      	ldr	r3, [pc, #672]	@ (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d644:	d106      	bne.n	800d654 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800d646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d648:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d64c:	d102      	bne.n	800d654 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800d64e:	4ba4      	ldr	r3, [pc, #656]	@ (800d8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d650:	637b      	str	r3, [r7, #52]	@ 0x34
 800d652:	e308      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800d654:	4ba1      	ldr	r3, [pc, #644]	@ (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d656:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d65a:	f003 0302 	and.w	r3, r3, #2
 800d65e:	2b02      	cmp	r3, #2
 800d660:	d107      	bne.n	800d672 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800d662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d664:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d668:	d103      	bne.n	800d672 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800d66a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d66e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d670:	e2f9      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800d672:	2300      	movs	r3, #0
 800d674:	637b      	str	r3, [r7, #52]	@ 0x34
 800d676:	e2f6      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800d678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d67c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800d680:	430b      	orrs	r3, r1
 800d682:	d12d      	bne.n	800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800d684:	4b95      	ldr	r3, [pc, #596]	@ (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d68a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d68e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800d690:	4b92      	ldr	r3, [pc, #584]	@ (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d698:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d69c:	d105      	bne.n	800d6aa <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800d69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d102      	bne.n	800d6aa <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800d6a4:	4b8e      	ldr	r3, [pc, #568]	@ (800d8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d6a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6a8:	e2dd      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800d6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d6b0:	d107      	bne.n	800d6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d6b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f7fe fb4c 	bl	800bd54 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800d6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6be:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6c0:	e2d1      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800d6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d6c8:	d107      	bne.n	800d6da <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6ca:	f107 0318 	add.w	r3, r7, #24
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7fe fc9a 	bl	800c008 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800d6d4:	69bb      	ldr	r3, [r7, #24]
 800d6d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6d8:	e2c5      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6de:	e2c2      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800d6e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6e4:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800d6e8:	430b      	orrs	r3, r1
 800d6ea:	d156      	bne.n	800d79a <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800d6ec:	4b7b      	ldr	r3, [pc, #492]	@ (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d6ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d6f2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d6f6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d6fe:	d028      	beq.n	800d752 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800d700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d702:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d706:	d845      	bhi.n	800d794 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d70a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d70e:	d013      	beq.n	800d738 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800d710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d712:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d716:	d83d      	bhi.n	800d794 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d004      	beq.n	800d728 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800d71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d720:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d724:	d004      	beq.n	800d730 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800d726:	e035      	b.n	800d794 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800d728:	f7fd fb2e 	bl	800ad88 <HAL_RCC_GetPCLK2Freq>
 800d72c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d72e:	e29a      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d730:	f7fd f9fa 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800d734:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d736:	e296      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d738:	4b68      	ldr	r3, [pc, #416]	@ (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d744:	d102      	bne.n	800d74c <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800d746:	4b66      	ldr	r3, [pc, #408]	@ (800d8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d748:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d74a:	e28c      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d74c:	2300      	movs	r3, #0
 800d74e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d750:	e289      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d752:	4b62      	ldr	r3, [pc, #392]	@ (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f003 0320 	and.w	r3, r3, #32
 800d75a:	2b20      	cmp	r3, #32
 800d75c:	d117      	bne.n	800d78e <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d75e:	4b5f      	ldr	r3, [pc, #380]	@ (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d760:	689b      	ldr	r3, [r3, #8]
 800d762:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d766:	2b00      	cmp	r3, #0
 800d768:	d005      	beq.n	800d776 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800d76a:	4b5c      	ldr	r3, [pc, #368]	@ (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	0e1b      	lsrs	r3, r3, #24
 800d770:	f003 030f 	and.w	r3, r3, #15
 800d774:	e006      	b.n	800d784 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800d776:	4b59      	ldr	r3, [pc, #356]	@ (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d778:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d77c:	041b      	lsls	r3, r3, #16
 800d77e:	0e1b      	lsrs	r3, r3, #24
 800d780:	f003 030f 	and.w	r3, r3, #15
 800d784:	4a57      	ldr	r2, [pc, #348]	@ (800d8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d78a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d78c:	e26b      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d78e:	2300      	movs	r3, #0
 800d790:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d792:	e268      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d794:	2300      	movs	r3, #0
 800d796:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d798:	e265      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800d79a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d79e:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800d7a2:	430b      	orrs	r3, r1
 800d7a4:	d156      	bne.n	800d854 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800d7a6:	4b4d      	ldr	r3, [pc, #308]	@ (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d7ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d7b0:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d7b8:	d028      	beq.n	800d80c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800d7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d7c0:	d845      	bhi.n	800d84e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d7c8:	d013      	beq.n	800d7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800d7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d7d0:	d83d      	bhi.n	800d84e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d004      	beq.n	800d7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800d7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7de:	d004      	beq.n	800d7ea <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800d7e0:	e035      	b.n	800d84e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800d7e2:	f7fd fabd 	bl	800ad60 <HAL_RCC_GetPCLK1Freq>
 800d7e6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d7e8:	e23d      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d7ea:	f7fd f99d 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800d7ee:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d7f0:	e239      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d7f2:	4b3a      	ldr	r3, [pc, #232]	@ (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7fe:	d102      	bne.n	800d806 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800d800:	4b37      	ldr	r3, [pc, #220]	@ (800d8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d802:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d804:	e22f      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d806:	2300      	movs	r3, #0
 800d808:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d80a:	e22c      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d80c:	4b33      	ldr	r3, [pc, #204]	@ (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f003 0320 	and.w	r3, r3, #32
 800d814:	2b20      	cmp	r3, #32
 800d816:	d117      	bne.n	800d848 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d818:	4b30      	ldr	r3, [pc, #192]	@ (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d81a:	689b      	ldr	r3, [r3, #8]
 800d81c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d820:	2b00      	cmp	r3, #0
 800d822:	d005      	beq.n	800d830 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800d824:	4b2d      	ldr	r3, [pc, #180]	@ (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d826:	689b      	ldr	r3, [r3, #8]
 800d828:	0e1b      	lsrs	r3, r3, #24
 800d82a:	f003 030f 	and.w	r3, r3, #15
 800d82e:	e006      	b.n	800d83e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800d830:	4b2a      	ldr	r3, [pc, #168]	@ (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d832:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d836:	041b      	lsls	r3, r3, #16
 800d838:	0e1b      	lsrs	r3, r3, #24
 800d83a:	f003 030f 	and.w	r3, r3, #15
 800d83e:	4a29      	ldr	r2, [pc, #164]	@ (800d8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d844:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d846:	e20e      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d848:	2300      	movs	r3, #0
 800d84a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d84c:	e20b      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d84e:	2300      	movs	r3, #0
 800d850:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d852:	e208      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800d854:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d858:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800d85c:	430b      	orrs	r3, r1
 800d85e:	d17c      	bne.n	800d95a <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800d860:	4b1e      	ldr	r3, [pc, #120]	@ (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d862:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d866:	f003 0318 	and.w	r3, r3, #24
 800d86a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d86e:	2b18      	cmp	r3, #24
 800d870:	d870      	bhi.n	800d954 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800d872:	a201      	add	r2, pc, #4	@ (adr r2, 800d878 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800d874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d878:	0800d8e9 	.word	0x0800d8e9
 800d87c:	0800d955 	.word	0x0800d955
 800d880:	0800d955 	.word	0x0800d955
 800d884:	0800d955 	.word	0x0800d955
 800d888:	0800d955 	.word	0x0800d955
 800d88c:	0800d955 	.word	0x0800d955
 800d890:	0800d955 	.word	0x0800d955
 800d894:	0800d955 	.word	0x0800d955
 800d898:	0800d8f1 	.word	0x0800d8f1
 800d89c:	0800d955 	.word	0x0800d955
 800d8a0:	0800d955 	.word	0x0800d955
 800d8a4:	0800d955 	.word	0x0800d955
 800d8a8:	0800d955 	.word	0x0800d955
 800d8ac:	0800d955 	.word	0x0800d955
 800d8b0:	0800d955 	.word	0x0800d955
 800d8b4:	0800d955 	.word	0x0800d955
 800d8b8:	0800d8f9 	.word	0x0800d8f9
 800d8bc:	0800d955 	.word	0x0800d955
 800d8c0:	0800d955 	.word	0x0800d955
 800d8c4:	0800d955 	.word	0x0800d955
 800d8c8:	0800d955 	.word	0x0800d955
 800d8cc:	0800d955 	.word	0x0800d955
 800d8d0:	0800d955 	.word	0x0800d955
 800d8d4:	0800d955 	.word	0x0800d955
 800d8d8:	0800d913 	.word	0x0800d913
 800d8dc:	46020c00 	.word	0x46020c00
 800d8e0:	00f42400 	.word	0x00f42400
 800d8e4:	08011c1c 	.word	0x08011c1c
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800d8e8:	f7fd fa62 	bl	800adb0 <HAL_RCC_GetPCLK3Freq>
 800d8ec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d8ee:	e1ba      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d8f0:	f7fd f91a 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800d8f4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d8f6:	e1b6      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d8f8:	4b9f      	ldr	r3, [pc, #636]	@ (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d904:	d102      	bne.n	800d90c <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800d906:	4b9d      	ldr	r3, [pc, #628]	@ (800db7c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d908:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d90a:	e1ac      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d90c:	2300      	movs	r3, #0
 800d90e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d910:	e1a9      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d912:	4b99      	ldr	r3, [pc, #612]	@ (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f003 0320 	and.w	r3, r3, #32
 800d91a:	2b20      	cmp	r3, #32
 800d91c:	d117      	bne.n	800d94e <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d91e:	4b96      	ldr	r3, [pc, #600]	@ (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d920:	689b      	ldr	r3, [r3, #8]
 800d922:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d926:	2b00      	cmp	r3, #0
 800d928:	d005      	beq.n	800d936 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800d92a:	4b93      	ldr	r3, [pc, #588]	@ (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d92c:	689b      	ldr	r3, [r3, #8]
 800d92e:	0e1b      	lsrs	r3, r3, #24
 800d930:	f003 030f 	and.w	r3, r3, #15
 800d934:	e006      	b.n	800d944 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800d936:	4b90      	ldr	r3, [pc, #576]	@ (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d938:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d93c:	041b      	lsls	r3, r3, #16
 800d93e:	0e1b      	lsrs	r3, r3, #24
 800d940:	f003 030f 	and.w	r3, r3, #15
 800d944:	4a8e      	ldr	r2, [pc, #568]	@ (800db80 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d94a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d94c:	e18b      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d94e:	2300      	movs	r3, #0
 800d950:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d952:	e188      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d954:	2300      	movs	r3, #0
 800d956:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d958:	e185      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800d95a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d95e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800d962:	430b      	orrs	r3, r1
 800d964:	d155      	bne.n	800da12 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800d966:	4b84      	ldr	r3, [pc, #528]	@ (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d968:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d96c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d970:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d974:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d978:	d013      	beq.n	800d9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800d97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d97c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d980:	d844      	bhi.n	800da0c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d984:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d988:	d013      	beq.n	800d9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800d98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d98c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d990:	d83c      	bhi.n	800da0c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d994:	2b00      	cmp	r3, #0
 800d996:	d014      	beq.n	800d9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800d998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d99a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d99e:	d014      	beq.n	800d9ca <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800d9a0:	e034      	b.n	800da0c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d9a2:	f107 0318 	add.w	r3, r7, #24
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7fe fb2e 	bl	800c008 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9b0:	e159      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d9b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fe f9cc 	bl	800bd54 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9c0:	e151      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d9c2:	f7fd f8b1 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800d9c6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d9c8:	e14d      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d9ca:	4b6b      	ldr	r3, [pc, #428]	@ (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f003 0320 	and.w	r3, r3, #32
 800d9d2:	2b20      	cmp	r3, #32
 800d9d4:	d117      	bne.n	800da06 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d9d6:	4b68      	ldr	r3, [pc, #416]	@ (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d005      	beq.n	800d9ee <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800d9e2:	4b65      	ldr	r3, [pc, #404]	@ (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9e4:	689b      	ldr	r3, [r3, #8]
 800d9e6:	0e1b      	lsrs	r3, r3, #24
 800d9e8:	f003 030f 	and.w	r3, r3, #15
 800d9ec:	e006      	b.n	800d9fc <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800d9ee:	4b62      	ldr	r3, [pc, #392]	@ (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d9f4:	041b      	lsls	r3, r3, #16
 800d9f6:	0e1b      	lsrs	r3, r3, #24
 800d9f8:	f003 030f 	and.w	r3, r3, #15
 800d9fc:	4a60      	ldr	r2, [pc, #384]	@ (800db80 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d9fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da02:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800da04:	e12f      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800da06:	2300      	movs	r3, #0
 800da08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da0a:	e12c      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800da0c:	2300      	movs	r3, #0
 800da0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da10:	e129      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800da12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da16:	1e59      	subs	r1, r3, #1
 800da18:	ea52 0301 	orrs.w	r3, r2, r1
 800da1c:	d13c      	bne.n	800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800da1e:	4b56      	ldr	r3, [pc, #344]	@ (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800da24:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800da28:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800da2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da2c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800da30:	d027      	beq.n	800da82 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800da32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da34:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800da38:	d82b      	bhi.n	800da92 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800da3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800da40:	d017      	beq.n	800da72 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800da42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800da48:	d823      	bhi.n	800da92 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800da4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d004      	beq.n	800da5a <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800da50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800da56:	d004      	beq.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800da58:	e01b      	b.n	800da92 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800da5a:	f7fd f865 	bl	800ab28 <HAL_RCC_GetSysClockFreq>
 800da5e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800da60:	e101      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800da62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da66:	4618      	mov	r0, r3
 800da68:	f7fe f974 	bl	800bd54 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800da6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da70:	e0f9      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da72:	f107 0318 	add.w	r3, r7, #24
 800da76:	4618      	mov	r0, r3
 800da78:	f7fe fac6 	bl	800c008 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da80:	e0f1      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da82:	f107 030c 	add.w	r3, r7, #12
 800da86:	4618      	mov	r0, r3
 800da88:	f7fe fc18 	bl	800c2bc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da90:	e0e9      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800da92:	2300      	movs	r3, #0
 800da94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da96:	e0e6      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800da98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da9c:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800daa0:	430b      	orrs	r3, r1
 800daa2:	d131      	bne.n	800db08 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800daa4:	4b34      	ldr	r3, [pc, #208]	@ (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800daa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800daaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800daae:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800dab0:	4b31      	ldr	r3, [pc, #196]	@ (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dab6:	f003 0302 	and.w	r3, r3, #2
 800daba:	2b02      	cmp	r3, #2
 800dabc:	d106      	bne.n	800dacc <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800dabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d103      	bne.n	800dacc <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800dac4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dac8:	637b      	str	r3, [r7, #52]	@ 0x34
 800daca:	e0cc      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800dacc:	4b2a      	ldr	r3, [pc, #168]	@ (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dad2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dad6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dada:	d112      	bne.n	800db02 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800dadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dade:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dae2:	d10e      	bne.n	800db02 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dae4:	4b24      	ldr	r3, [pc, #144]	@ (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dae6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800daea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800daee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800daf2:	d102      	bne.n	800dafa <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800daf4:	23fa      	movs	r3, #250	@ 0xfa
 800daf6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800daf8:	e0b5      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800dafa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800dafe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800db00:	e0b1      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800db02:	2300      	movs	r3, #0
 800db04:	637b      	str	r3, [r7, #52]	@ 0x34
 800db06:	e0ae      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800db08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db0c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800db10:	430b      	orrs	r3, r1
 800db12:	d13b      	bne.n	800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800db14:	4b18      	ldr	r3, [pc, #96]	@ (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800db1a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800db1e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800db20:	4b15      	ldr	r3, [pc, #84]	@ (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800db28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db2c:	d105      	bne.n	800db3a <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800db2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db30:	2b00      	cmp	r3, #0
 800db32:	d102      	bne.n	800db3a <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800db34:	4b13      	ldr	r3, [pc, #76]	@ (800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800db36:	637b      	str	r3, [r7, #52]	@ 0x34
 800db38:	e095      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800db3a:	4b0f      	ldr	r3, [pc, #60]	@ (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800db42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db46:	d106      	bne.n	800db56 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800db48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db4e:	d102      	bne.n	800db56 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800db50:	4b0d      	ldr	r3, [pc, #52]	@ (800db88 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800db52:	637b      	str	r3, [r7, #52]	@ 0x34
 800db54:	e087      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800db56:	4b08      	ldr	r3, [pc, #32]	@ (800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db62:	d106      	bne.n	800db72 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800db64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db6a:	d102      	bne.n	800db72 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800db6c:	4b03      	ldr	r3, [pc, #12]	@ (800db7c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800db6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800db70:	e079      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800db72:	2300      	movs	r3, #0
 800db74:	637b      	str	r3, [r7, #52]	@ 0x34
 800db76:	e076      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800db78:	46020c00 	.word	0x46020c00
 800db7c:	00f42400 	.word	0x00f42400
 800db80:	08011c1c 	.word	0x08011c1c
 800db84:	02dc6c00 	.word	0x02dc6c00
 800db88:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800db8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db90:	1e99      	subs	r1, r3, #2
 800db92:	ea52 0301 	orrs.w	r3, r2, r1
 800db96:	d120      	bne.n	800dbda <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800db98:	4b35      	ldr	r3, [pc, #212]	@ (800dc70 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800db9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800db9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dba2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800dba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d004      	beq.n	800dbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800dbaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dbb0:	d008      	beq.n	800dbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800dbb2:	e00f      	b.n	800dbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dbb4:	f107 030c 	add.w	r3, r7, #12
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7fe fb7f 	bl	800c2bc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dbc2:	e050      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbc4:	f107 0318 	add.w	r3, r7, #24
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7fe fa1d 	bl	800c008 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800dbce:	6a3b      	ldr	r3, [r7, #32]
 800dbd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dbd2:	e048      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dbd8:	e045      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800dbda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbde:	f1a3 0108 	sub.w	r1, r3, #8
 800dbe2:	ea52 0301 	orrs.w	r3, r2, r1
 800dbe6:	d13c      	bne.n	800dc62 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800dbe8:	4b21      	ldr	r3, [pc, #132]	@ (800dc70 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dbea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dbee:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800dbf2:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800dbf4:	4b1e      	ldr	r3, [pc, #120]	@ (800dc70 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dbfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc00:	d105      	bne.n	800dc0e <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800dc02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d102      	bne.n	800dc0e <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800dc08:	4b1a      	ldr	r3, [pc, #104]	@ (800dc74 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800dc0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc0c:	e02b      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800dc0e:	4b18      	ldr	r3, [pc, #96]	@ (800dc70 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dc16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc1a:	d106      	bne.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800dc1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dc22:	d102      	bne.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800dc24:	4b14      	ldr	r3, [pc, #80]	@ (800dc78 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800dc26:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc28:	e01d      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800dc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc30:	d107      	bne.n	800dc42 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dc32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7fe f88c 	bl	800bd54 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800dc3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc40:	e011      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800dc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc44:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800dc48:	d108      	bne.n	800dc5c <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dc4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fe f880 	bl	800bd54 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800dc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc56:	085b      	lsrs	r3, r3, #1
 800dc58:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc5a:	e004      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc60:	e001      	b.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800dc62:	2300      	movs	r3, #0
 800dc64:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800dc66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3738      	adds	r7, #56	@ 0x38
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	46020c00 	.word	0x46020c00
 800dc74:	00f42400 	.word	0x00f42400
 800dc78:	007a1200 	.word	0x007a1200

0800dc7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b084      	sub	sp, #16
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800dc84:	4b47      	ldr	r3, [pc, #284]	@ (800dda4 <RCCEx_PLL2_Config+0x128>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4a46      	ldr	r2, [pc, #280]	@ (800dda4 <RCCEx_PLL2_Config+0x128>)
 800dc8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dc8e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dc90:	f7f5 f824 	bl	8002cdc <HAL_GetTick>
 800dc94:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dc96:	e008      	b.n	800dcaa <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dc98:	f7f5 f820 	bl	8002cdc <HAL_GetTick>
 800dc9c:	4602      	mov	r2, r0
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	1ad3      	subs	r3, r2, r3
 800dca2:	2b02      	cmp	r3, #2
 800dca4:	d901      	bls.n	800dcaa <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800dca6:	2303      	movs	r3, #3
 800dca8:	e077      	b.n	800dd9a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dcaa:	4b3e      	ldr	r3, [pc, #248]	@ (800dda4 <RCCEx_PLL2_Config+0x128>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d1f0      	bne.n	800dc98 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800dcb6:	4b3b      	ldr	r3, [pc, #236]	@ (800dda4 <RCCEx_PLL2_Config+0x128>)
 800dcb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800dcbe:	f023 0303 	bic.w	r3, r3, #3
 800dcc2:	687a      	ldr	r2, [r7, #4]
 800dcc4:	6811      	ldr	r1, [r2, #0]
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	6852      	ldr	r2, [r2, #4]
 800dcca:	3a01      	subs	r2, #1
 800dccc:	0212      	lsls	r2, r2, #8
 800dcce:	430a      	orrs	r2, r1
 800dcd0:	4934      	ldr	r1, [pc, #208]	@ (800dda4 <RCCEx_PLL2_Config+0x128>)
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800dcd6:	4b33      	ldr	r3, [pc, #204]	@ (800dda4 <RCCEx_PLL2_Config+0x128>)
 800dcd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dcda:	4b33      	ldr	r3, [pc, #204]	@ (800dda8 <RCCEx_PLL2_Config+0x12c>)
 800dcdc:	4013      	ands	r3, r2
 800dcde:	687a      	ldr	r2, [r7, #4]
 800dce0:	6892      	ldr	r2, [r2, #8]
 800dce2:	3a01      	subs	r2, #1
 800dce4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800dce8:	687a      	ldr	r2, [r7, #4]
 800dcea:	68d2      	ldr	r2, [r2, #12]
 800dcec:	3a01      	subs	r2, #1
 800dcee:	0252      	lsls	r2, r2, #9
 800dcf0:	b292      	uxth	r2, r2
 800dcf2:	4311      	orrs	r1, r2
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	6912      	ldr	r2, [r2, #16]
 800dcf8:	3a01      	subs	r2, #1
 800dcfa:	0412      	lsls	r2, r2, #16
 800dcfc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800dd00:	4311      	orrs	r1, r2
 800dd02:	687a      	ldr	r2, [r7, #4]
 800dd04:	6952      	ldr	r2, [r2, #20]
 800dd06:	3a01      	subs	r2, #1
 800dd08:	0612      	lsls	r2, r2, #24
 800dd0a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800dd0e:	430a      	orrs	r2, r1
 800dd10:	4924      	ldr	r1, [pc, #144]	@ (800dda4 <RCCEx_PLL2_Config+0x128>)
 800dd12:	4313      	orrs	r3, r2
 800dd14:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800dd16:	4b23      	ldr	r3, [pc, #140]	@ (800dda4 <RCCEx_PLL2_Config+0x128>)
 800dd18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd1a:	f023 020c 	bic.w	r2, r3, #12
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	699b      	ldr	r3, [r3, #24]
 800dd22:	4920      	ldr	r1, [pc, #128]	@ (800dda4 <RCCEx_PLL2_Config+0x128>)
 800dd24:	4313      	orrs	r3, r2
 800dd26:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800dd28:	4b1e      	ldr	r3, [pc, #120]	@ (800dda4 <RCCEx_PLL2_Config+0x128>)
 800dd2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6a1b      	ldr	r3, [r3, #32]
 800dd30:	491c      	ldr	r1, [pc, #112]	@ (800dda4 <RCCEx_PLL2_Config+0x128>)
 800dd32:	4313      	orrs	r3, r2
 800dd34:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800dd36:	4b1b      	ldr	r3, [pc, #108]	@ (800dda4 <RCCEx_PLL2_Config+0x128>)
 800dd38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd3a:	4a1a      	ldr	r2, [pc, #104]	@ (800dda4 <RCCEx_PLL2_Config+0x128>)
 800dd3c:	f023 0310 	bic.w	r3, r3, #16
 800dd40:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dd42:	4b18      	ldr	r3, [pc, #96]	@ (800dda4 <RCCEx_PLL2_Config+0x128>)
 800dd44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dd4a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	69d2      	ldr	r2, [r2, #28]
 800dd52:	00d2      	lsls	r2, r2, #3
 800dd54:	4913      	ldr	r1, [pc, #76]	@ (800dda4 <RCCEx_PLL2_Config+0x128>)
 800dd56:	4313      	orrs	r3, r2
 800dd58:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800dd5a:	4b12      	ldr	r3, [pc, #72]	@ (800dda4 <RCCEx_PLL2_Config+0x128>)
 800dd5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd5e:	4a11      	ldr	r2, [pc, #68]	@ (800dda4 <RCCEx_PLL2_Config+0x128>)
 800dd60:	f043 0310 	orr.w	r3, r3, #16
 800dd64:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800dd66:	4b0f      	ldr	r3, [pc, #60]	@ (800dda4 <RCCEx_PLL2_Config+0x128>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4a0e      	ldr	r2, [pc, #56]	@ (800dda4 <RCCEx_PLL2_Config+0x128>)
 800dd6c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dd70:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dd72:	f7f4 ffb3 	bl	8002cdc <HAL_GetTick>
 800dd76:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dd78:	e008      	b.n	800dd8c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dd7a:	f7f4 ffaf 	bl	8002cdc <HAL_GetTick>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	1ad3      	subs	r3, r2, r3
 800dd84:	2b02      	cmp	r3, #2
 800dd86:	d901      	bls.n	800dd8c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800dd88:	2303      	movs	r3, #3
 800dd8a:	e006      	b.n	800dd9a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dd8c:	4b05      	ldr	r3, [pc, #20]	@ (800dda4 <RCCEx_PLL2_Config+0x128>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d0f0      	beq.n	800dd7a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800dd98:	2300      	movs	r3, #0

}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	46020c00 	.word	0x46020c00
 800dda8:	80800000 	.word	0x80800000

0800ddac <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b084      	sub	sp, #16
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800ddb4:	4b47      	ldr	r3, [pc, #284]	@ (800ded4 <RCCEx_PLL3_Config+0x128>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	4a46      	ldr	r2, [pc, #280]	@ (800ded4 <RCCEx_PLL3_Config+0x128>)
 800ddba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ddbe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ddc0:	f7f4 ff8c 	bl	8002cdc <HAL_GetTick>
 800ddc4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ddc6:	e008      	b.n	800ddda <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ddc8:	f7f4 ff88 	bl	8002cdc <HAL_GetTick>
 800ddcc:	4602      	mov	r2, r0
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	1ad3      	subs	r3, r2, r3
 800ddd2:	2b02      	cmp	r3, #2
 800ddd4:	d901      	bls.n	800ddda <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ddd6:	2303      	movs	r3, #3
 800ddd8:	e077      	b.n	800deca <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ddda:	4b3e      	ldr	r3, [pc, #248]	@ (800ded4 <RCCEx_PLL3_Config+0x128>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d1f0      	bne.n	800ddc8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800dde6:	4b3b      	ldr	r3, [pc, #236]	@ (800ded4 <RCCEx_PLL3_Config+0x128>)
 800dde8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ddee:	f023 0303 	bic.w	r3, r3, #3
 800ddf2:	687a      	ldr	r2, [r7, #4]
 800ddf4:	6811      	ldr	r1, [r2, #0]
 800ddf6:	687a      	ldr	r2, [r7, #4]
 800ddf8:	6852      	ldr	r2, [r2, #4]
 800ddfa:	3a01      	subs	r2, #1
 800ddfc:	0212      	lsls	r2, r2, #8
 800ddfe:	430a      	orrs	r2, r1
 800de00:	4934      	ldr	r1, [pc, #208]	@ (800ded4 <RCCEx_PLL3_Config+0x128>)
 800de02:	4313      	orrs	r3, r2
 800de04:	630b      	str	r3, [r1, #48]	@ 0x30
 800de06:	4b33      	ldr	r3, [pc, #204]	@ (800ded4 <RCCEx_PLL3_Config+0x128>)
 800de08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800de0a:	4b33      	ldr	r3, [pc, #204]	@ (800ded8 <RCCEx_PLL3_Config+0x12c>)
 800de0c:	4013      	ands	r3, r2
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	6892      	ldr	r2, [r2, #8]
 800de12:	3a01      	subs	r2, #1
 800de14:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800de18:	687a      	ldr	r2, [r7, #4]
 800de1a:	68d2      	ldr	r2, [r2, #12]
 800de1c:	3a01      	subs	r2, #1
 800de1e:	0252      	lsls	r2, r2, #9
 800de20:	b292      	uxth	r2, r2
 800de22:	4311      	orrs	r1, r2
 800de24:	687a      	ldr	r2, [r7, #4]
 800de26:	6912      	ldr	r2, [r2, #16]
 800de28:	3a01      	subs	r2, #1
 800de2a:	0412      	lsls	r2, r2, #16
 800de2c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800de30:	4311      	orrs	r1, r2
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	6952      	ldr	r2, [r2, #20]
 800de36:	3a01      	subs	r2, #1
 800de38:	0612      	lsls	r2, r2, #24
 800de3a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800de3e:	430a      	orrs	r2, r1
 800de40:	4924      	ldr	r1, [pc, #144]	@ (800ded4 <RCCEx_PLL3_Config+0x128>)
 800de42:	4313      	orrs	r3, r2
 800de44:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800de46:	4b23      	ldr	r3, [pc, #140]	@ (800ded4 <RCCEx_PLL3_Config+0x128>)
 800de48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de4a:	f023 020c 	bic.w	r2, r3, #12
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	699b      	ldr	r3, [r3, #24]
 800de52:	4920      	ldr	r1, [pc, #128]	@ (800ded4 <RCCEx_PLL3_Config+0x128>)
 800de54:	4313      	orrs	r3, r2
 800de56:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800de58:	4b1e      	ldr	r3, [pc, #120]	@ (800ded4 <RCCEx_PLL3_Config+0x128>)
 800de5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6a1b      	ldr	r3, [r3, #32]
 800de60:	491c      	ldr	r1, [pc, #112]	@ (800ded4 <RCCEx_PLL3_Config+0x128>)
 800de62:	4313      	orrs	r3, r2
 800de64:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800de66:	4b1b      	ldr	r3, [pc, #108]	@ (800ded4 <RCCEx_PLL3_Config+0x128>)
 800de68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de6a:	4a1a      	ldr	r2, [pc, #104]	@ (800ded4 <RCCEx_PLL3_Config+0x128>)
 800de6c:	f023 0310 	bic.w	r3, r3, #16
 800de70:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800de72:	4b18      	ldr	r3, [pc, #96]	@ (800ded4 <RCCEx_PLL3_Config+0x128>)
 800de74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800de7a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	69d2      	ldr	r2, [r2, #28]
 800de82:	00d2      	lsls	r2, r2, #3
 800de84:	4913      	ldr	r1, [pc, #76]	@ (800ded4 <RCCEx_PLL3_Config+0x128>)
 800de86:	4313      	orrs	r3, r2
 800de88:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800de8a:	4b12      	ldr	r3, [pc, #72]	@ (800ded4 <RCCEx_PLL3_Config+0x128>)
 800de8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de8e:	4a11      	ldr	r2, [pc, #68]	@ (800ded4 <RCCEx_PLL3_Config+0x128>)
 800de90:	f043 0310 	orr.w	r3, r3, #16
 800de94:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800de96:	4b0f      	ldr	r3, [pc, #60]	@ (800ded4 <RCCEx_PLL3_Config+0x128>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	4a0e      	ldr	r2, [pc, #56]	@ (800ded4 <RCCEx_PLL3_Config+0x128>)
 800de9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dea0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dea2:	f7f4 ff1b 	bl	8002cdc <HAL_GetTick>
 800dea6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dea8:	e008      	b.n	800debc <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800deaa:	f7f4 ff17 	bl	8002cdc <HAL_GetTick>
 800deae:	4602      	mov	r2, r0
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	1ad3      	subs	r3, r2, r3
 800deb4:	2b02      	cmp	r3, #2
 800deb6:	d901      	bls.n	800debc <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800deb8:	2303      	movs	r3, #3
 800deba:	e006      	b.n	800deca <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800debc:	4b05      	ldr	r3, [pc, #20]	@ (800ded4 <RCCEx_PLL3_Config+0x128>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d0f0      	beq.n	800deaa <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800dec8:	2300      	movs	r3, #0
}
 800deca:	4618      	mov	r0, r3
 800decc:	3710      	adds	r7, #16
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	46020c00 	.word	0x46020c00
 800ded8:	80800000 	.word	0x80800000

0800dedc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800dee4:	2301      	movs	r3, #1
 800dee6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d071      	beq.n	800dfd2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800def4:	b2db      	uxtb	r3, r3
 800def6:	2b00      	cmp	r3, #0
 800def8:	d106      	bne.n	800df08 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2200      	movs	r2, #0
 800defe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f7f4 f990 	bl	8002228 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2202      	movs	r2, #2
 800df0c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800df10:	4b32      	ldr	r3, [pc, #200]	@ (800dfdc <HAL_RTC_Init+0x100>)
 800df12:	68db      	ldr	r3, [r3, #12]
 800df14:	f003 0310 	and.w	r3, r3, #16
 800df18:	2b10      	cmp	r3, #16
 800df1a:	d051      	beq.n	800dfc0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800df1c:	4b2f      	ldr	r3, [pc, #188]	@ (800dfdc <HAL_RTC_Init+0x100>)
 800df1e:	22ca      	movs	r2, #202	@ 0xca
 800df20:	625a      	str	r2, [r3, #36]	@ 0x24
 800df22:	4b2e      	ldr	r3, [pc, #184]	@ (800dfdc <HAL_RTC_Init+0x100>)
 800df24:	2253      	movs	r2, #83	@ 0x53
 800df26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f000 f88b 	bl	800e044 <RTC_EnterInitMode>
 800df2e:	4603      	mov	r3, r0
 800df30:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800df32:	7bfb      	ldrb	r3, [r7, #15]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d13f      	bne.n	800dfb8 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800df38:	4b28      	ldr	r3, [pc, #160]	@ (800dfdc <HAL_RTC_Init+0x100>)
 800df3a:	699b      	ldr	r3, [r3, #24]
 800df3c:	4a27      	ldr	r2, [pc, #156]	@ (800dfdc <HAL_RTC_Init+0x100>)
 800df3e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800df42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df46:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800df48:	4b24      	ldr	r3, [pc, #144]	@ (800dfdc <HAL_RTC_Init+0x100>)
 800df4a:	699a      	ldr	r2, [r3, #24]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6859      	ldr	r1, [r3, #4]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	691b      	ldr	r3, [r3, #16]
 800df54:	4319      	orrs	r1, r3
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	699b      	ldr	r3, [r3, #24]
 800df5a:	430b      	orrs	r3, r1
 800df5c:	491f      	ldr	r1, [pc, #124]	@ (800dfdc <HAL_RTC_Init+0x100>)
 800df5e:	4313      	orrs	r3, r2
 800df60:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	68da      	ldr	r2, [r3, #12]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	689b      	ldr	r3, [r3, #8]
 800df6a:	041b      	lsls	r3, r3, #16
 800df6c:	491b      	ldr	r1, [pc, #108]	@ (800dfdc <HAL_RTC_Init+0x100>)
 800df6e:	4313      	orrs	r3, r2
 800df70:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800df72:	4b1a      	ldr	r3, [pc, #104]	@ (800dfdc <HAL_RTC_Init+0x100>)
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df82:	430b      	orrs	r3, r1
 800df84:	4915      	ldr	r1, [pc, #84]	@ (800dfdc <HAL_RTC_Init+0x100>)
 800df86:	4313      	orrs	r3, r2
 800df88:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f000 f896 	bl	800e0bc <RTC_ExitInitMode>
 800df90:	4603      	mov	r3, r0
 800df92:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800df94:	7bfb      	ldrb	r3, [r7, #15]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d10e      	bne.n	800dfb8 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800df9a:	4b10      	ldr	r3, [pc, #64]	@ (800dfdc <HAL_RTC_Init+0x100>)
 800df9c:	699b      	ldr	r3, [r3, #24]
 800df9e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6a19      	ldr	r1, [r3, #32]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	69db      	ldr	r3, [r3, #28]
 800dfaa:	4319      	orrs	r1, r3
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	695b      	ldr	r3, [r3, #20]
 800dfb0:	430b      	orrs	r3, r1
 800dfb2:	490a      	ldr	r1, [pc, #40]	@ (800dfdc <HAL_RTC_Init+0x100>)
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dfb8:	4b08      	ldr	r3, [pc, #32]	@ (800dfdc <HAL_RTC_Init+0x100>)
 800dfba:	22ff      	movs	r2, #255	@ 0xff
 800dfbc:	625a      	str	r2, [r3, #36]	@ 0x24
 800dfbe:	e001      	b.n	800dfc4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800dfc4:	7bfb      	ldrb	r3, [r7, #15]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d103      	bne.n	800dfd2 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2201      	movs	r2, #1
 800dfce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800dfd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3710      	adds	r7, #16
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	46007800 	.word	0x46007800

0800dfe0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800dfe8:	4b15      	ldr	r3, [pc, #84]	@ (800e040 <HAL_RTC_WaitForSynchro+0x60>)
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	4a14      	ldr	r2, [pc, #80]	@ (800e040 <HAL_RTC_WaitForSynchro+0x60>)
 800dfee:	f023 0320 	bic.w	r3, r3, #32
 800dff2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800dff4:	f7f4 fe72 	bl	8002cdc <HAL_GetTick>
 800dff8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800dffa:	e013      	b.n	800e024 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dffc:	f7f4 fe6e 	bl	8002cdc <HAL_GetTick>
 800e000:	4602      	mov	r2, r0
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	1ad3      	subs	r3, r2, r3
 800e006:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e00a:	d90b      	bls.n	800e024 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e00c:	4b0c      	ldr	r3, [pc, #48]	@ (800e040 <HAL_RTC_WaitForSynchro+0x60>)
 800e00e:	68db      	ldr	r3, [r3, #12]
 800e010:	f003 0320 	and.w	r3, r3, #32
 800e014:	2b00      	cmp	r3, #0
 800e016:	d10c      	bne.n	800e032 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2203      	movs	r2, #3
 800e01c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800e020:	2303      	movs	r3, #3
 800e022:	e008      	b.n	800e036 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800e024:	4b06      	ldr	r3, [pc, #24]	@ (800e040 <HAL_RTC_WaitForSynchro+0x60>)
 800e026:	68db      	ldr	r3, [r3, #12]
 800e028:	f003 0320 	and.w	r3, r3, #32
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d0e5      	beq.n	800dffc <HAL_RTC_WaitForSynchro+0x1c>
 800e030:	e000      	b.n	800e034 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800e032:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800e034:	2300      	movs	r3, #0
}
 800e036:	4618      	mov	r0, r3
 800e038:	3710      	adds	r7, #16
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	bf00      	nop
 800e040:	46007800 	.word	0x46007800

0800e044 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b084      	sub	sp, #16
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e04c:	2300      	movs	r3, #0
 800e04e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e050:	4b19      	ldr	r3, [pc, #100]	@ (800e0b8 <RTC_EnterInitMode+0x74>)
 800e052:	68db      	ldr	r3, [r3, #12]
 800e054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d128      	bne.n	800e0ae <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e05c:	4b16      	ldr	r3, [pc, #88]	@ (800e0b8 <RTC_EnterInitMode+0x74>)
 800e05e:	68db      	ldr	r3, [r3, #12]
 800e060:	4a15      	ldr	r2, [pc, #84]	@ (800e0b8 <RTC_EnterInitMode+0x74>)
 800e062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e066:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800e068:	f7f4 fe38 	bl	8002cdc <HAL_GetTick>
 800e06c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e06e:	e013      	b.n	800e098 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e070:	f7f4 fe34 	bl	8002cdc <HAL_GetTick>
 800e074:	4602      	mov	r2, r0
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	1ad3      	subs	r3, r2, r3
 800e07a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e07e:	d90b      	bls.n	800e098 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e080:	4b0d      	ldr	r3, [pc, #52]	@ (800e0b8 <RTC_EnterInitMode+0x74>)
 800e082:	68db      	ldr	r3, [r3, #12]
 800e084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d10f      	bne.n	800e0ac <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800e08c:	2303      	movs	r3, #3
 800e08e:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2203      	movs	r2, #3
 800e094:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e098:	4b07      	ldr	r3, [pc, #28]	@ (800e0b8 <RTC_EnterInitMode+0x74>)
 800e09a:	68db      	ldr	r3, [r3, #12]
 800e09c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d104      	bne.n	800e0ae <RTC_EnterInitMode+0x6a>
 800e0a4:	7bfb      	ldrb	r3, [r7, #15]
 800e0a6:	2b03      	cmp	r3, #3
 800e0a8:	d1e2      	bne.n	800e070 <RTC_EnterInitMode+0x2c>
 800e0aa:	e000      	b.n	800e0ae <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800e0ac:	bf00      	nop
        }
      }
    }
  }

  return status;
 800e0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3710      	adds	r7, #16
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	46007800 	.word	0x46007800

0800e0bc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b084      	sub	sp, #16
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e0c8:	4b1a      	ldr	r3, [pc, #104]	@ (800e134 <RTC_ExitInitMode+0x78>)
 800e0ca:	68db      	ldr	r3, [r3, #12]
 800e0cc:	4a19      	ldr	r2, [pc, #100]	@ (800e134 <RTC_ExitInitMode+0x78>)
 800e0ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e0d2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e0d4:	4b17      	ldr	r3, [pc, #92]	@ (800e134 <RTC_ExitInitMode+0x78>)
 800e0d6:	699b      	ldr	r3, [r3, #24]
 800e0d8:	f003 0320 	and.w	r3, r3, #32
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d10c      	bne.n	800e0fa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f7ff ff7d 	bl	800dfe0 <HAL_RTC_WaitForSynchro>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d01e      	beq.n	800e12a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2203      	movs	r2, #3
 800e0f0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e0f4:	2303      	movs	r3, #3
 800e0f6:	73fb      	strb	r3, [r7, #15]
 800e0f8:	e017      	b.n	800e12a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e0fa:	4b0e      	ldr	r3, [pc, #56]	@ (800e134 <RTC_ExitInitMode+0x78>)
 800e0fc:	699b      	ldr	r3, [r3, #24]
 800e0fe:	4a0d      	ldr	r2, [pc, #52]	@ (800e134 <RTC_ExitInitMode+0x78>)
 800e100:	f023 0320 	bic.w	r3, r3, #32
 800e104:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f7ff ff6a 	bl	800dfe0 <HAL_RTC_WaitForSynchro>
 800e10c:	4603      	mov	r3, r0
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d005      	beq.n	800e11e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2203      	movs	r2, #3
 800e116:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e11a:	2303      	movs	r3, #3
 800e11c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e11e:	4b05      	ldr	r3, [pc, #20]	@ (800e134 <RTC_ExitInitMode+0x78>)
 800e120:	699b      	ldr	r3, [r3, #24]
 800e122:	4a04      	ldr	r2, [pc, #16]	@ (800e134 <RTC_ExitInitMode+0x78>)
 800e124:	f043 0320 	orr.w	r3, r3, #32
 800e128:	6193      	str	r3, [r2, #24]
  }
  return status;
 800e12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3710      	adds	r7, #16
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	46007800 	.word	0x46007800

0800e138 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800e138:	b480      	push	{r7}
 800e13a:	b083      	sub	sp, #12
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	681a      	ldr	r2, [r3, #0]
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	4910      	ldr	r1, [pc, #64]	@ (800e18c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800e14c:	4313      	orrs	r3, r2
 800e14e:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	689a      	ldr	r2, [r3, #8]
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	68db      	ldr	r3, [r3, #12]
 800e158:	431a      	orrs	r2, r3
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	699b      	ldr	r3, [r3, #24]
 800e15e:	490c      	ldr	r1, [pc, #48]	@ (800e190 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e160:	4313      	orrs	r3, r2
 800e162:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800e164:	4b0a      	ldr	r3, [pc, #40]	@ (800e190 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e166:	6a1b      	ldr	r3, [r3, #32]
 800e168:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	6919      	ldr	r1, [r3, #16]
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	695b      	ldr	r3, [r3, #20]
 800e174:	041b      	lsls	r3, r3, #16
 800e176:	430b      	orrs	r3, r1
 800e178:	4905      	ldr	r1, [pc, #20]	@ (800e190 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e17a:	4313      	orrs	r3, r2
 800e17c:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800e17e:	2300      	movs	r3, #0
}
 800e180:	4618      	mov	r0, r3
 800e182:	370c      	adds	r7, #12
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr
 800e18c:	46007800 	.word	0x46007800
 800e190:	46007c00 	.word	0x46007c00

0800e194 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b086      	sub	sp, #24
 800e198:	af00      	add	r7, sp, #0
 800e19a:	60f8      	str	r0, [r7, #12]
 800e19c:	60b9      	str	r1, [r7, #8]
 800e19e:	607a      	str	r2, [r7, #4]
 800e1a0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	2b02      	cmp	r3, #2
 800e1a6:	d904      	bls.n	800e1b2 <HAL_SAI_InitProtocol+0x1e>
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	3b03      	subs	r3, #3
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d812      	bhi.n	800e1d6 <HAL_SAI_InitProtocol+0x42>
 800e1b0:	e008      	b.n	800e1c4 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	68b9      	ldr	r1, [r7, #8]
 800e1b8:	68f8      	ldr	r0, [r7, #12]
 800e1ba:	f000 fc01 	bl	800e9c0 <SAI_InitI2S>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	75fb      	strb	r3, [r7, #23]
      break;
 800e1c2:	e00b      	b.n	800e1dc <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	68b9      	ldr	r1, [r7, #8]
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	f000 fcaa 	bl	800eb24 <SAI_InitPCM>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	75fb      	strb	r3, [r7, #23]
      break;
 800e1d4:	e002      	b.n	800e1dc <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	75fb      	strb	r3, [r7, #23]
      break;
 800e1da:	bf00      	nop
  }

  if (status == HAL_OK)
 800e1dc:	7dfb      	ldrb	r3, [r7, #23]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d104      	bne.n	800e1ec <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800e1e2:	68f8      	ldr	r0, [r7, #12]
 800e1e4:	f000 f808 	bl	800e1f8 <HAL_SAI_Init>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e1ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3718      	adds	r7, #24
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
	...

0800e1f8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b08a      	sub	sp, #40	@ 0x28
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d101      	bne.n	800e20a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800e206:	2301      	movs	r3, #1
 800e208:	e1ce      	b.n	800e5a8 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e210:	2b01      	cmp	r3, #1
 800e212:	d10e      	bne.n	800e232 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4a83      	ldr	r2, [pc, #524]	@ (800e428 <HAL_SAI_Init+0x230>)
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d107      	bne.n	800e22e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800e222:	2b01      	cmp	r3, #1
 800e224:	d103      	bne.n	800e22e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d001      	beq.n	800e232 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800e22e:	2301      	movs	r3, #1
 800e230:	e1ba      	b.n	800e5a8 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e238:	b2db      	uxtb	r3, r3
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d106      	bne.n	800e24c <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2200      	movs	r2, #0
 800e242:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f7f4 f9c0 	bl	80025cc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f000 fd23 	bl	800ec98 <SAI_Disable>
 800e252:	4603      	mov	r3, r0
 800e254:	2b00      	cmp	r3, #0
 800e256:	d001      	beq.n	800e25c <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800e258:	2301      	movs	r3, #1
 800e25a:	e1a5      	b.n	800e5a8 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2202      	movs	r2, #2
 800e260:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	2b02      	cmp	r3, #2
 800e26a:	d00c      	beq.n	800e286 <HAL_SAI_Init+0x8e>
 800e26c:	2b02      	cmp	r3, #2
 800e26e:	d80d      	bhi.n	800e28c <HAL_SAI_Init+0x94>
 800e270:	2b00      	cmp	r3, #0
 800e272:	d002      	beq.n	800e27a <HAL_SAI_Init+0x82>
 800e274:	2b01      	cmp	r3, #1
 800e276:	d003      	beq.n	800e280 <HAL_SAI_Init+0x88>
 800e278:	e008      	b.n	800e28c <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800e27a:	2300      	movs	r3, #0
 800e27c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e27e:	e008      	b.n	800e292 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800e280:	2310      	movs	r3, #16
 800e282:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e284:	e005      	b.n	800e292 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800e286:	2320      	movs	r3, #32
 800e288:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e28a:	e002      	b.n	800e292 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800e28c:	2300      	movs	r3, #0
 800e28e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e290:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	689b      	ldr	r3, [r3, #8]
 800e296:	2b03      	cmp	r3, #3
 800e298:	d81d      	bhi.n	800e2d6 <HAL_SAI_Init+0xde>
 800e29a:	a201      	add	r2, pc, #4	@ (adr r2, 800e2a0 <HAL_SAI_Init+0xa8>)
 800e29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a0:	0800e2b1 	.word	0x0800e2b1
 800e2a4:	0800e2b7 	.word	0x0800e2b7
 800e2a8:	0800e2bf 	.word	0x0800e2bf
 800e2ac:	0800e2c7 	.word	0x0800e2c7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	61fb      	str	r3, [r7, #28]
      break;
 800e2b4:	e012      	b.n	800e2dc <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800e2b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e2ba:	61fb      	str	r3, [r7, #28]
      break;
 800e2bc:	e00e      	b.n	800e2dc <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e2be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e2c2:	61fb      	str	r3, [r7, #28]
      break;
 800e2c4:	e00a      	b.n	800e2dc <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e2c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e2ca:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800e2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ce:	f043 0301 	orr.w	r3, r3, #1
 800e2d2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e2d4:	e002      	b.n	800e2dc <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	61fb      	str	r3, [r7, #28]
      break;
 800e2da:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4a51      	ldr	r2, [pc, #324]	@ (800e428 <HAL_SAI_Init+0x230>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d004      	beq.n	800e2f0 <HAL_SAI_Init+0xf8>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	4a50      	ldr	r2, [pc, #320]	@ (800e42c <HAL_SAI_Init+0x234>)
 800e2ec:	4293      	cmp	r3, r2
 800e2ee:	d103      	bne.n	800e2f8 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800e2f0:	4a4f      	ldr	r2, [pc, #316]	@ (800e430 <HAL_SAI_Init+0x238>)
 800e2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f4:	6013      	str	r3, [r2, #0]
 800e2f6:	e002      	b.n	800e2fe <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800e2f8:	4a4e      	ldr	r2, [pc, #312]	@ (800e434 <HAL_SAI_Init+0x23c>)
 800e2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2fc:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6a1b      	ldr	r3, [r3, #32]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d077      	beq.n	800e3f6 <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4a47      	ldr	r2, [pc, #284]	@ (800e428 <HAL_SAI_Init+0x230>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d004      	beq.n	800e31a <HAL_SAI_Init+0x122>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4a45      	ldr	r2, [pc, #276]	@ (800e42c <HAL_SAI_Init+0x234>)
 800e316:	4293      	cmp	r3, r2
 800e318:	d107      	bne.n	800e32a <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800e31a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e31e:	f04f 0100 	mov.w	r1, #0
 800e322:	f7fe f925 	bl	800c570 <HAL_RCCEx_GetPeriphCLKFreq>
 800e326:	61b8      	str	r0, [r7, #24]
 800e328:	e006      	b.n	800e338 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800e32a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e32e:	f04f 0100 	mov.w	r1, #0
 800e332:	f7fe f91d 	bl	800c570 <HAL_RCCEx_GetPeriphCLKFreq>
 800e336:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	699b      	ldr	r3, [r3, #24]
 800e33c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e340:	d120      	bne.n	800e384 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e346:	2b04      	cmp	r3, #4
 800e348:	d102      	bne.n	800e350 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800e34a:	2340      	movs	r3, #64	@ 0x40
 800e34c:	613b      	str	r3, [r7, #16]
 800e34e:	e00a      	b.n	800e366 <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e354:	2b08      	cmp	r3, #8
 800e356:	d103      	bne.n	800e360 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800e358:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e35c:	613b      	str	r3, [r7, #16]
 800e35e:	e002      	b.n	800e366 <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e364:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800e366:	69ba      	ldr	r2, [r7, #24]
 800e368:	4613      	mov	r3, r2
 800e36a:	009b      	lsls	r3, r3, #2
 800e36c:	4413      	add	r3, r2
 800e36e:	005b      	lsls	r3, r3, #1
 800e370:	4619      	mov	r1, r3
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6a1b      	ldr	r3, [r3, #32]
 800e376:	693a      	ldr	r2, [r7, #16]
 800e378:	fb02 f303 	mul.w	r3, r2, r3
 800e37c:	fbb1 f3f3 	udiv	r3, r1, r3
 800e380:	617b      	str	r3, [r7, #20]
 800e382:	e017      	b.n	800e3b4 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e388:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e38c:	d101      	bne.n	800e392 <HAL_SAI_Init+0x19a>
 800e38e:	2302      	movs	r3, #2
 800e390:	e000      	b.n	800e394 <HAL_SAI_Init+0x19c>
 800e392:	2301      	movs	r3, #1
 800e394:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800e396:	69ba      	ldr	r2, [r7, #24]
 800e398:	4613      	mov	r3, r2
 800e39a:	009b      	lsls	r3, r3, #2
 800e39c:	4413      	add	r3, r2
 800e39e:	005b      	lsls	r3, r3, #1
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6a1b      	ldr	r3, [r3, #32]
 800e3a6:	68fa      	ldr	r2, [r7, #12]
 800e3a8:	fb02 f303 	mul.w	r3, r2, r3
 800e3ac:	021b      	lsls	r3, r3, #8
 800e3ae:	fbb1 f3f3 	udiv	r3, r1, r3
 800e3b2:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	4a20      	ldr	r2, [pc, #128]	@ (800e438 <HAL_SAI_Init+0x240>)
 800e3b8:	fba2 2303 	umull	r2, r3, r2, r3
 800e3bc:	08da      	lsrs	r2, r3, #3
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800e3c2:	6979      	ldr	r1, [r7, #20]
 800e3c4:	4b1c      	ldr	r3, [pc, #112]	@ (800e438 <HAL_SAI_Init+0x240>)
 800e3c6:	fba3 2301 	umull	r2, r3, r3, r1
 800e3ca:	08da      	lsrs	r2, r3, #3
 800e3cc:	4613      	mov	r3, r2
 800e3ce:	009b      	lsls	r3, r3, #2
 800e3d0:	4413      	add	r3, r2
 800e3d2:	005b      	lsls	r3, r3, #1
 800e3d4:	1aca      	subs	r2, r1, r3
 800e3d6:	2a08      	cmp	r2, #8
 800e3d8:	d904      	bls.n	800e3e4 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3de:	1c5a      	adds	r2, r3, #1
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3e8:	2b04      	cmp	r3, #4
 800e3ea:	d104      	bne.n	800e3f6 <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3f0:	085a      	lsrs	r2, r3, #1
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d003      	beq.n	800e406 <HAL_SAI_Init+0x20e>
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	685b      	ldr	r3, [r3, #4]
 800e402:	2b02      	cmp	r3, #2
 800e404:	d109      	bne.n	800e41a <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	d101      	bne.n	800e412 <HAL_SAI_Init+0x21a>
 800e40e:	2300      	movs	r3, #0
 800e410:	e001      	b.n	800e416 <HAL_SAI_Init+0x21e>
 800e412:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e416:	623b      	str	r3, [r7, #32]
 800e418:	e012      	b.n	800e440 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e41e:	2b01      	cmp	r3, #1
 800e420:	d10c      	bne.n	800e43c <HAL_SAI_Init+0x244>
 800e422:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e426:	e00a      	b.n	800e43e <HAL_SAI_Init+0x246>
 800e428:	40015404 	.word	0x40015404
 800e42c:	40015424 	.word	0x40015424
 800e430:	40015400 	.word	0x40015400
 800e434:	40015800 	.word	0x40015800
 800e438:	cccccccd 	.word	0xcccccccd
 800e43c:	2300      	movs	r3, #0
 800e43e:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	6819      	ldr	r1, [r3, #0]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	4b59      	ldr	r3, [pc, #356]	@ (800e5b0 <HAL_SAI_Init+0x3b8>)
 800e44c:	400b      	ands	r3, r1
 800e44e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	6819      	ldr	r1, [r3, #0]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	685a      	ldr	r2, [r3, #4]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e45e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e464:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e46a:	431a      	orrs	r2, r3
 800e46c:	6a3b      	ldr	r3, [r7, #32]
 800e46e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800e470:	69fb      	ldr	r3, [r7, #28]
 800e472:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800e478:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	695b      	ldr	r3, [r3, #20]
 800e47e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e484:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e48a:	051b      	lsls	r3, r3, #20
 800e48c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e492:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	691b      	ldr	r3, [r3, #16]
 800e498:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	430a      	orrs	r2, r1
 800e4a0:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	687a      	ldr	r2, [r7, #4]
 800e4aa:	6812      	ldr	r2, [r2, #0]
 800e4ac:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800e4b0:	f023 030f 	bic.w	r3, r3, #15
 800e4b4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	6859      	ldr	r1, [r3, #4]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	69da      	ldr	r2, [r3, #28]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4c4:	431a      	orrs	r2, r3
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4ca:	431a      	orrs	r2, r3
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	430a      	orrs	r2, r1
 800e4d2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	6899      	ldr	r1, [r3, #8]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681a      	ldr	r2, [r3, #0]
 800e4de:	4b35      	ldr	r3, [pc, #212]	@ (800e5b4 <HAL_SAI_Init+0x3bc>)
 800e4e0:	400b      	ands	r3, r1
 800e4e2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	6899      	ldr	r1, [r3, #8]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4ee:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e4f4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800e4fa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800e500:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e506:	3b01      	subs	r3, #1
 800e508:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800e50a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	430a      	orrs	r2, r1
 800e512:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	68d9      	ldr	r1, [r3, #12]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681a      	ldr	r2, [r3, #0]
 800e51e:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800e522:	400b      	ands	r3, r1
 800e524:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	68d9      	ldr	r1, [r3, #12]
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e534:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e53a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e53c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e542:	3b01      	subs	r3, #1
 800e544:	021b      	lsls	r3, r3, #8
 800e546:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	430a      	orrs	r2, r1
 800e54e:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	4a18      	ldr	r2, [pc, #96]	@ (800e5b8 <HAL_SAI_Init+0x3c0>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d119      	bne.n	800e58e <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800e55a:	4b18      	ldr	r3, [pc, #96]	@ (800e5bc <HAL_SAI_Init+0x3c4>)
 800e55c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e55e:	4a17      	ldr	r2, [pc, #92]	@ (800e5bc <HAL_SAI_Init+0x3c4>)
 800e560:	f023 0301 	bic.w	r3, r3, #1
 800e564:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d10e      	bne.n	800e58e <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e578:	3b01      	subs	r3, #1
 800e57a:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e57c:	490f      	ldr	r1, [pc, #60]	@ (800e5bc <HAL_SAI_Init+0x3c4>)
 800e57e:	4313      	orrs	r3, r2
 800e580:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800e582:	4b0e      	ldr	r3, [pc, #56]	@ (800e5bc <HAL_SAI_Init+0x3c4>)
 800e584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e586:	4a0d      	ldr	r2, [pc, #52]	@ (800e5bc <HAL_SAI_Init+0x3c4>)
 800e588:	f043 0301 	orr.w	r3, r3, #1
 800e58c:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2200      	movs	r2, #0
 800e592:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2201      	movs	r2, #1
 800e59a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800e5a6:	2300      	movs	r3, #0
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3728      	adds	r7, #40	@ 0x28
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}
 800e5b0:	f005c010 	.word	0xf005c010
 800e5b4:	fff88000 	.word	0xfff88000
 800e5b8:	40015404 	.word	0x40015404
 800e5bc:	40015400 	.word	0x40015400

0800e5c0 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b088      	sub	sp, #32
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	60f8      	str	r0, [r7, #12]
 800e5c8:	60b9      	str	r1, [r7, #8]
 800e5ca:	4613      	mov	r3, r2
 800e5cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e5ce:	f7f4 fb85 	bl	8002cdc <HAL_GetTick>
 800e5d2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d002      	beq.n	800e5e0 <HAL_SAI_Transmit_DMA+0x20>
 800e5da:	88fb      	ldrh	r3, [r7, #6]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d101      	bne.n	800e5e4 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	e0e4      	b.n	800e7ae <HAL_SAI_Transmit_DMA+0x1ee>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	2b01      	cmp	r3, #1
 800e5ee:	f040 80dd 	bne.w	800e7ac <HAL_SAI_Transmit_DMA+0x1ec>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d101      	bne.n	800e600 <HAL_SAI_Transmit_DMA+0x40>
 800e5fc:	2302      	movs	r3, #2
 800e5fe:	e0d6      	b.n	800e7ae <HAL_SAI_Transmit_DMA+0x1ee>
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	2201      	movs	r2, #1
 800e604:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	68ba      	ldr	r2, [r7, #8]
 800e60c:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	88fa      	ldrh	r2, [r7, #6]
 800e612:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	88fa      	ldrh	r2, [r7, #6]
 800e61a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2200      	movs	r2, #0
 800e622:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2212      	movs	r2, #18
 800e62a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e634:	4a60      	ldr	r2, [pc, #384]	@ (800e7b8 <HAL_SAI_Transmit_DMA+0x1f8>)
 800e636:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e63e:	4a5f      	ldr	r2, [pc, #380]	@ (800e7bc <HAL_SAI_Transmit_DMA+0x1fc>)
 800e640:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e648:	4a5d      	ldr	r2, [pc, #372]	@ (800e7c0 <HAL_SAI_Transmit_DMA+0x200>)
 800e64a:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e652:	2200      	movs	r2, #0
 800e654:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For transmission, the DMA source is data buffer.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e65a:	2b40      	cmp	r3, #64	@ 0x40
 800e65c:	d106      	bne.n	800e66c <HAL_SAI_Transmit_DMA+0xac>
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e662:	2b00      	cmp	r3, #0
 800e664:	d102      	bne.n	800e66c <HAL_SAI_Transmit_DMA+0xac>
    {
      dmaSrcSize = (uint32_t) Size;
 800e666:	88fb      	ldrh	r3, [r7, #6]
 800e668:	61bb      	str	r3, [r7, #24]
 800e66a:	e00a      	b.n	800e682 <HAL_SAI_Transmit_DMA+0xc2>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e670:	2b80      	cmp	r3, #128	@ 0x80
 800e672:	d803      	bhi.n	800e67c <HAL_SAI_Transmit_DMA+0xbc>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800e674:	88fb      	ldrh	r3, [r7, #6]
 800e676:	005b      	lsls	r3, r3, #1
 800e678:	61bb      	str	r3, [r7, #24]
 800e67a:	e002      	b.n	800e682 <HAL_SAI_Transmit_DMA+0xc2>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800e67c:	88fb      	ldrh	r3, [r7, #6]
 800e67e:	009b      	lsls	r3, r3, #2
 800e680:	61bb      	str	r3, [r7, #24]
    }

    /* Enable the Tx DMA Stream */
    if ((hsai->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e68a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d02d      	beq.n	800e6ee <HAL_SAI_Transmit_DMA+0x12e>
    {
      if (hsai->hdmatx->LinkedListQueue != NULL)
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d021      	beq.n	800e6e2 <HAL_SAI_Transmit_DMA+0x122>
      {
        /* Set DMA data size */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e6a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	69ba      	ldr	r2, [r7, #24]
 800e6aa:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e6b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	f103 021c 	add.w	r2, r3, #28
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e6ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmatx);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7f7 ffa2 	bl	8006620 <HAL_DMAEx_List_Start_IT>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	77fb      	strb	r3, [r7, #31]
 800e6e0:	e014      	b.n	800e70c <HAL_SAI_Transmit_DMA+0x14c>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	e05f      	b.n	800e7ae <HAL_SAI_Transmit_DMA+0x1ee>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, dmaSrcSize);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	331c      	adds	r3, #28
 800e700:	461a      	mov	r2, r3
 800e702:	69bb      	ldr	r3, [r7, #24]
 800e704:	f7f6 fffa 	bl	80056fc <HAL_DMA_Start_IT>
 800e708:	4603      	mov	r3, r0
 800e70a:	77fb      	strb	r3, [r7, #31]
    }

    if (status != HAL_OK)
 800e70c:	7ffb      	ldrb	r3, [r7, #31]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d005      	beq.n	800e71e <HAL_SAI_Transmit_DMA+0x15e>
    {
      __HAL_UNLOCK(hsai);
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	2200      	movs	r2, #0
 800e716:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800e71a:	2301      	movs	r3, #1
 800e71c:	e047      	b.n	800e7ae <HAL_SAI_Transmit_DMA+0x1ee>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e71e:	2100      	movs	r1, #0
 800e720:	68f8      	ldr	r0, [r7, #12]
 800e722:	f000 fa81 	bl	800ec28 <SAI_InterruptFlag>
 800e726:	4601      	mov	r1, r0
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	691a      	ldr	r2, [r3, #16]
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	430a      	orrs	r2, r1
 800e734:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	681a      	ldr	r2, [r3, #0]
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e744:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e746:	e015      	b.n	800e774 <HAL_SAI_Transmit_DMA+0x1b4>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800e748:	f7f4 fac8 	bl	8002cdc <HAL_GetTick>
 800e74c:	4602      	mov	r2, r0
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	1ad3      	subs	r3, r2, r3
 800e752:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e756:	d90d      	bls.n	800e774 <HAL_SAI_Transmit_DMA+0x1b4>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e75e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2200      	movs	r2, #0
 800e76c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800e770:	2303      	movs	r3, #3
 800e772:	e01c      	b.n	800e7ae <HAL_SAI_Transmit_DMA+0x1ee>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	695b      	ldr	r3, [r3, #20]
 800e77a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d0e2      	beq.n	800e748 <HAL_SAI_Transmit_DMA+0x188>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d107      	bne.n	800e7a0 <HAL_SAI_Transmit_DMA+0x1e0>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	681a      	ldr	r2, [r3, #0]
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e79e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	e000      	b.n	800e7ae <HAL_SAI_Transmit_DMA+0x1ee>
  }
  else
  {
    return HAL_BUSY;
 800e7ac:	2302      	movs	r3, #2
  }
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3720      	adds	r7, #32
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	0800ed6b 	.word	0x0800ed6b
 800e7bc:	0800ed0d 	.word	0x0800ed0d
 800e7c0:	0800ee01 	.word	0x0800ee01

0800e7c4 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b086      	sub	sp, #24
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	4613      	mov	r3, r2
 800e7d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d002      	beq.n	800e7de <HAL_SAI_Receive_DMA+0x1a>
 800e7d8:	88fb      	ldrh	r3, [r7, #6]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d101      	bne.n	800e7e2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800e7de:	2301      	movs	r3, #1
 800e7e0:	e0c6      	b.n	800e970 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e7e8:	b2db      	uxtb	r3, r3
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	f040 80bf 	bne.w	800e96e <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e7f6:	2b01      	cmp	r3, #1
 800e7f8:	d101      	bne.n	800e7fe <HAL_SAI_Receive_DMA+0x3a>
 800e7fa:	2302      	movs	r3, #2
 800e7fc:	e0b8      	b.n	800e970 <HAL_SAI_Receive_DMA+0x1ac>
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2201      	movs	r2, #1
 800e802:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	68ba      	ldr	r2, [r7, #8]
 800e80a:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	88fa      	ldrh	r2, [r7, #6]
 800e810:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	88fa      	ldrh	r2, [r7, #6]
 800e818:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	2200      	movs	r2, #0
 800e820:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2222      	movs	r2, #34	@ 0x22
 800e828:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e832:	4a51      	ldr	r2, [pc, #324]	@ (800e978 <HAL_SAI_Receive_DMA+0x1b4>)
 800e834:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e83c:	4a4f      	ldr	r2, [pc, #316]	@ (800e97c <HAL_SAI_Receive_DMA+0x1b8>)
 800e83e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e846:	4a4e      	ldr	r2, [pc, #312]	@ (800e980 <HAL_SAI_Receive_DMA+0x1bc>)
 800e848:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e850:	2200      	movs	r2, #0
 800e852:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e858:	2b40      	cmp	r3, #64	@ 0x40
 800e85a:	d106      	bne.n	800e86a <HAL_SAI_Receive_DMA+0xa6>
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e860:	2b00      	cmp	r3, #0
 800e862:	d102      	bne.n	800e86a <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800e864:	88fb      	ldrh	r3, [r7, #6]
 800e866:	613b      	str	r3, [r7, #16]
 800e868:	e00a      	b.n	800e880 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e86e:	2b80      	cmp	r3, #128	@ 0x80
 800e870:	d803      	bhi.n	800e87a <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800e872:	88fb      	ldrh	r3, [r7, #6]
 800e874:	005b      	lsls	r3, r3, #1
 800e876:	613b      	str	r3, [r7, #16]
 800e878:	e002      	b.n	800e880 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800e87a:	88fb      	ldrh	r3, [r7, #6]
 800e87c:	009b      	lsls	r3, r3, #2
 800e87e:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d02d      	beq.n	800e8ec <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d021      	beq.n	800e8e0 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e8a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	693a      	ldr	r2, [r7, #16]
 800e8a8:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f103 021c 	add.w	r2, r3, #28
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e8b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e8c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7f7 fea3 	bl	8006620 <HAL_DMAEx_List_Start_IT>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	75fb      	strb	r3, [r7, #23]
 800e8de:	e014      	b.n	800e90a <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	e041      	b.n	800e970 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	331c      	adds	r3, #28
 800e8f8:	4619      	mov	r1, r3
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e8fe:	461a      	mov	r2, r3
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	f7f6 fefb 	bl	80056fc <HAL_DMA_Start_IT>
 800e906:	4603      	mov	r3, r0
 800e908:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800e90a:	7dfb      	ldrb	r3, [r7, #23]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d005      	beq.n	800e91c <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	2200      	movs	r2, #0
 800e914:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800e918:	2301      	movs	r3, #1
 800e91a:	e029      	b.n	800e970 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e91c:	2100      	movs	r1, #0
 800e91e:	68f8      	ldr	r0, [r7, #12]
 800e920:	f000 f982 	bl	800ec28 <SAI_InterruptFlag>
 800e924:	4601      	mov	r1, r0
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	691a      	ldr	r2, [r3, #16]
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	430a      	orrs	r2, r1
 800e932:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e942:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d107      	bne.n	800e962 <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e960:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2200      	movs	r2, #0
 800e966:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e96a:	2300      	movs	r3, #0
 800e96c:	e000      	b.n	800e970 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800e96e:	2302      	movs	r3, #2
  }
}
 800e970:	4618      	mov	r0, r3
 800e972:	3718      	adds	r7, #24
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}
 800e978:	0800ede5 	.word	0x0800ede5
 800e97c:	0800ed87 	.word	0x0800ed87
 800e980:	0800ee01 	.word	0x0800ee01

0800e984 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800e984:	b480      	push	{r7}
 800e986:	b083      	sub	sp, #12
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800e98c:	bf00      	nop
 800e98e:	370c      	adds	r7, #12
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr

0800e998 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800e998:	b480      	push	{r7}
 800e99a:	b083      	sub	sp, #12
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e9a0:	bf00      	nop
 800e9a2:	370c      	adds	r7, #12
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9aa:	4770      	bx	lr

0800e9ac <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b083      	sub	sp, #12
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800e9b4:	bf00      	nop
 800e9b6:	370c      	adds	r7, #12
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9be:	4770      	bx	lr

0800e9c0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b087      	sub	sp, #28
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	60f8      	str	r0, [r7, #12]
 800e9c8:	60b9      	str	r1, [r7, #8]
 800e9ca:	607a      	str	r2, [r7, #4]
 800e9cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	685b      	ldr	r3, [r3, #4]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d003      	beq.n	800e9ee <SAI_InitI2S+0x2e>
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	685b      	ldr	r3, [r3, #4]
 800e9ea:	2b02      	cmp	r3, #2
 800e9ec:	d103      	bne.n	800e9f6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	651a      	str	r2, [r3, #80]	@ 0x50
 800e9f4:	e002      	b.n	800e9fc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	2201      	movs	r2, #1
 800e9fa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ea02:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ea0a:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	683a      	ldr	r2, [r7, #0]
 800ea16:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	f003 0301 	and.w	r3, r3, #1
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d001      	beq.n	800ea26 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800ea22:	2301      	movs	r3, #1
 800ea24:	e077      	b.n	800eb16 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d107      	bne.n	800ea3c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	2200      	movs	r2, #0
 800ea30:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ea38:	665a      	str	r2, [r3, #100]	@ 0x64
 800ea3a:	e006      	b.n	800ea4a <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800ea42:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	2200      	movs	r2, #0
 800ea48:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2b03      	cmp	r3, #3
 800ea4e:	d84f      	bhi.n	800eaf0 <SAI_InitI2S+0x130>
 800ea50:	a201      	add	r2, pc, #4	@ (adr r2, 800ea58 <SAI_InitI2S+0x98>)
 800ea52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea56:	bf00      	nop
 800ea58:	0800ea69 	.word	0x0800ea69
 800ea5c:	0800ea8b 	.word	0x0800ea8b
 800ea60:	0800eaad 	.word	0x0800eaad
 800ea64:	0800eacf 	.word	0x0800eacf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	2280      	movs	r2, #128	@ 0x80
 800ea6c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	085b      	lsrs	r3, r3, #1
 800ea72:	015a      	lsls	r2, r3, #5
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	085b      	lsrs	r3, r3, #1
 800ea7c:	011a      	lsls	r2, r3, #4
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	2240      	movs	r2, #64	@ 0x40
 800ea86:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ea88:	e035      	b.n	800eaf6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2280      	movs	r2, #128	@ 0x80
 800ea8e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	085b      	lsrs	r3, r3, #1
 800ea94:	019a      	lsls	r2, r3, #6
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	085b      	lsrs	r3, r3, #1
 800ea9e:	015a      	lsls	r2, r3, #5
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	2280      	movs	r2, #128	@ 0x80
 800eaa8:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eaaa:	e024      	b.n	800eaf6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	22c0      	movs	r2, #192	@ 0xc0
 800eab0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	085b      	lsrs	r3, r3, #1
 800eab6:	019a      	lsls	r2, r3, #6
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	085b      	lsrs	r3, r3, #1
 800eac0:	015a      	lsls	r2, r3, #5
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2280      	movs	r2, #128	@ 0x80
 800eaca:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eacc:	e013      	b.n	800eaf6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	22e0      	movs	r2, #224	@ 0xe0
 800ead2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	085b      	lsrs	r3, r3, #1
 800ead8:	019a      	lsls	r2, r3, #6
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	085b      	lsrs	r3, r3, #1
 800eae2:	015a      	lsls	r2, r3, #5
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2280      	movs	r2, #128	@ 0x80
 800eaec:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800eaee:	e002      	b.n	800eaf6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	75fb      	strb	r3, [r7, #23]
      break;
 800eaf4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	2b02      	cmp	r3, #2
 800eafa:	d10b      	bne.n	800eb14 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2b01      	cmp	r3, #1
 800eb00:	d102      	bne.n	800eb08 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2210      	movs	r2, #16
 800eb06:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2b02      	cmp	r3, #2
 800eb0c:	d102      	bne.n	800eb14 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2208      	movs	r2, #8
 800eb12:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800eb14:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	371c      	adds	r7, #28
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb20:	4770      	bx	lr
 800eb22:	bf00      	nop

0800eb24 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800eb24:	b480      	push	{r7}
 800eb26:	b087      	sub	sp, #28
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
 800eb30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb32:	2300      	movs	r3, #0
 800eb34:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	685b      	ldr	r3, [r3, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d003      	beq.n	800eb52 <SAI_InitPCM+0x2e>
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	2b02      	cmp	r3, #2
 800eb50:	d103      	bne.n	800eb5a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2201      	movs	r2, #1
 800eb56:	651a      	str	r2, [r3, #80]	@ 0x50
 800eb58:	e002      	b.n	800eb60 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2200      	movs	r2, #0
 800eb64:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800eb6c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800eb74:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	683a      	ldr	r2, [r7, #0]
 800eb80:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eb88:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	2b04      	cmp	r3, #4
 800eb8e:	d103      	bne.n	800eb98 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2201      	movs	r2, #1
 800eb94:	659a      	str	r2, [r3, #88]	@ 0x58
 800eb96:	e002      	b.n	800eb9e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	220d      	movs	r2, #13
 800eb9c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2b03      	cmp	r3, #3
 800eba2:	d837      	bhi.n	800ec14 <SAI_InitPCM+0xf0>
 800eba4:	a201      	add	r2, pc, #4	@ (adr r2, 800ebac <SAI_InitPCM+0x88>)
 800eba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebaa:	bf00      	nop
 800ebac:	0800ebbd 	.word	0x0800ebbd
 800ebb0:	0800ebd3 	.word	0x0800ebd3
 800ebb4:	0800ebe9 	.word	0x0800ebe9
 800ebb8:	0800ebff 	.word	0x0800ebff
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	2280      	movs	r2, #128	@ 0x80
 800ebc0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	011a      	lsls	r2, r3, #4
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	2240      	movs	r2, #64	@ 0x40
 800ebce:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ebd0:	e023      	b.n	800ec1a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	2280      	movs	r2, #128	@ 0x80
 800ebd6:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	015a      	lsls	r2, r3, #5
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2280      	movs	r2, #128	@ 0x80
 800ebe4:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ebe6:	e018      	b.n	800ec1a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	22c0      	movs	r2, #192	@ 0xc0
 800ebec:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	015a      	lsls	r2, r3, #5
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	2280      	movs	r2, #128	@ 0x80
 800ebfa:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ebfc:	e00d      	b.n	800ec1a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	22e0      	movs	r2, #224	@ 0xe0
 800ec02:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	015a      	lsls	r2, r3, #5
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2280      	movs	r2, #128	@ 0x80
 800ec10:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ec12:	e002      	b.n	800ec1a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800ec14:	2301      	movs	r3, #1
 800ec16:	75fb      	strb	r3, [r7, #23]
      break;
 800ec18:	bf00      	nop
  }

  return status;
 800ec1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	371c      	adds	r7, #28
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr

0800ec28 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b085      	sub	sp, #20
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	460b      	mov	r3, r1
 800ec32:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800ec34:	2301      	movs	r3, #1
 800ec36:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800ec38:	78fb      	ldrb	r3, [r7, #3]
 800ec3a:	2b01      	cmp	r3, #1
 800ec3c:	d103      	bne.n	800ec46 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	f043 0308 	orr.w	r3, r3, #8
 800ec44:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec4a:	2b08      	cmp	r3, #8
 800ec4c:	d10b      	bne.n	800ec66 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ec52:	2b03      	cmp	r3, #3
 800ec54:	d003      	beq.n	800ec5e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	2b01      	cmp	r3, #1
 800ec5c:	d103      	bne.n	800ec66 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	f043 0310 	orr.w	r3, r3, #16
 800ec64:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	685b      	ldr	r3, [r3, #4]
 800ec6a:	2b03      	cmp	r3, #3
 800ec6c:	d003      	beq.n	800ec76 <SAI_InterruptFlag+0x4e>
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	685b      	ldr	r3, [r3, #4]
 800ec72:	2b02      	cmp	r3, #2
 800ec74:	d104      	bne.n	800ec80 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ec7c:	60fb      	str	r3, [r7, #12]
 800ec7e:	e003      	b.n	800ec88 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f043 0304 	orr.w	r3, r3, #4
 800ec86:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ec88:	68fb      	ldr	r3, [r7, #12]
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3714      	adds	r7, #20
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr
	...

0800ec98 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b085      	sub	sp, #20
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800eca0:	4b18      	ldr	r3, [pc, #96]	@ (800ed04 <SAI_Disable+0x6c>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	4a18      	ldr	r2, [pc, #96]	@ (800ed08 <SAI_Disable+0x70>)
 800eca6:	fba2 2303 	umull	r2, r3, r2, r3
 800ecaa:	0b1b      	lsrs	r3, r3, #12
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	681a      	ldr	r2, [r3, #0]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ecc2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d10a      	bne.n	800ece0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ecd0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800ecda:	2303      	movs	r3, #3
 800ecdc:	72fb      	strb	r3, [r7, #11]
      break;
 800ecde:	e009      	b.n	800ecf4 <SAI_Disable+0x5c>
    }
    count--;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	3b01      	subs	r3, #1
 800ece4:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d1e7      	bne.n	800ecc4 <SAI_Disable+0x2c>

  return status;
 800ecf4:	7afb      	ldrb	r3, [r7, #11]
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3714      	adds	r7, #20
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed00:	4770      	bx	lr
 800ed02:	bf00      	nop
 800ed04:	2000001c 	.word	0x2000001c
 800ed08:	95cbec1b 	.word	0x95cbec1b

0800ed0c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b084      	sub	sp, #16
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ed18:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed1e:	2b81      	cmp	r3, #129	@ 0x81
 800ed20:	d01c      	beq.n	800ed5c <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2200      	movs	r2, #0
 800ed26:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ed38:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ed3a:	2100      	movs	r1, #0
 800ed3c:	68f8      	ldr	r0, [r7, #12]
 800ed3e:	f7ff ff73 	bl	800ec28 <SAI_InterruptFlag>
 800ed42:	4603      	mov	r3, r0
 800ed44:	43d9      	mvns	r1, r3
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	691a      	ldr	r2, [r3, #16]
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	400a      	ands	r2, r1
 800ed52:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	2201      	movs	r2, #1
 800ed58:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	f7ff fe11 	bl	800e984 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ed62:	bf00      	nop
 800ed64:	3710      	adds	r7, #16
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}

0800ed6a <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ed6a:	b580      	push	{r7, lr}
 800ed6c:	b084      	sub	sp, #16
 800ed6e:	af00      	add	r7, sp, #0
 800ed70:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ed76:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800ed78:	68f8      	ldr	r0, [r7, #12]
 800ed7a:	f7ff fe0d 	bl	800e998 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ed7e:	bf00      	nop
 800ed80:	3710      	adds	r7, #16
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}

0800ed86 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800ed86:	b580      	push	{r7, lr}
 800ed88:	b084      	sub	sp, #16
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ed92:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed98:	2b81      	cmp	r3, #129	@ 0x81
 800ed9a:	d01c      	beq.n	800edd6 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	681a      	ldr	r2, [r3, #0]
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800edaa:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2200      	movs	r2, #0
 800edb0:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800edb4:	2100      	movs	r1, #0
 800edb6:	68f8      	ldr	r0, [r7, #12]
 800edb8:	f7ff ff36 	bl	800ec28 <SAI_InterruptFlag>
 800edbc:	4603      	mov	r3, r0
 800edbe:	43d9      	mvns	r1, r3
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	691a      	ldr	r2, [r3, #16]
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	400a      	ands	r2, r1
 800edcc:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	2201      	movs	r2, #1
 800edd2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800edd6:	68f8      	ldr	r0, [r7, #12]
 800edd8:	f7f2 fcb4 	bl	8001744 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800eddc:	bf00      	nop
 800edde:	3710      	adds	r7, #16
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}

0800ede4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800edf0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800edf2:	68f8      	ldr	r0, [r7, #12]
 800edf4:	f7f2 fc54 	bl	80016a0 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800edf8:	bf00      	nop
 800edfa:	3710      	adds	r7, #16
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}

0800ee00 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b084      	sub	sp, #16
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ee0c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ee14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	681a      	ldr	r2, [r3, #0]
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ee2c:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800ee2e:	68f8      	ldr	r0, [r7, #12]
 800ee30:	f7ff ff32 	bl	800ec98 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	2201      	movs	r2, #1
 800ee38:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800ee44:	68f8      	ldr	r0, [r7, #12]
 800ee46:	f7ff fdb1 	bl	800e9ac <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ee4a:	bf00      	nop
 800ee4c:	3710      	adds	r7, #16
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}

0800ee52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ee52:	b580      	push	{r7, lr}
 800ee54:	b082      	sub	sp, #8
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d101      	bne.n	800ee64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ee60:	2301      	movs	r3, #1
 800ee62:	e049      	b.n	800eef8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d106      	bne.n	800ee7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2200      	movs	r2, #0
 800ee74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f7f3 fa43 	bl	8002304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2202      	movs	r2, #2
 800ee82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681a      	ldr	r2, [r3, #0]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	3304      	adds	r3, #4
 800ee8e:	4619      	mov	r1, r3
 800ee90:	4610      	mov	r0, r2
 800ee92:	f000 fb3b 	bl	800f50c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2201      	movs	r2, #1
 800ee9a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2201      	movs	r2, #1
 800eea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2201      	movs	r2, #1
 800eeaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2201      	movs	r2, #1
 800eeba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2201      	movs	r2, #1
 800eec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2201      	movs	r2, #1
 800eeca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2201      	movs	r2, #1
 800eed2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2201      	movs	r2, #1
 800eeda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2201      	movs	r2, #1
 800eee2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2201      	movs	r2, #1
 800eeea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2201      	movs	r2, #1
 800eef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800eef6:	2300      	movs	r3, #0
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3708      	adds	r7, #8
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}

0800ef00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b085      	sub	sp, #20
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ef0e:	b2db      	uxtb	r3, r3
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	d001      	beq.n	800ef18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ef14:	2301      	movs	r3, #1
 800ef16:	e06a      	b.n	800efee <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2202      	movs	r2, #2
 800ef1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	4a35      	ldr	r2, [pc, #212]	@ (800effc <HAL_TIM_Base_Start+0xfc>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d040      	beq.n	800efac <HAL_TIM_Base_Start+0xac>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	4a34      	ldr	r2, [pc, #208]	@ (800f000 <HAL_TIM_Base_Start+0x100>)
 800ef30:	4293      	cmp	r3, r2
 800ef32:	d03b      	beq.n	800efac <HAL_TIM_Base_Start+0xac>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef3c:	d036      	beq.n	800efac <HAL_TIM_Base_Start+0xac>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ef46:	d031      	beq.n	800efac <HAL_TIM_Base_Start+0xac>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	4a2d      	ldr	r2, [pc, #180]	@ (800f004 <HAL_TIM_Base_Start+0x104>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d02c      	beq.n	800efac <HAL_TIM_Base_Start+0xac>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	4a2c      	ldr	r2, [pc, #176]	@ (800f008 <HAL_TIM_Base_Start+0x108>)
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	d027      	beq.n	800efac <HAL_TIM_Base_Start+0xac>
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	4a2a      	ldr	r2, [pc, #168]	@ (800f00c <HAL_TIM_Base_Start+0x10c>)
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d022      	beq.n	800efac <HAL_TIM_Base_Start+0xac>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	4a29      	ldr	r2, [pc, #164]	@ (800f010 <HAL_TIM_Base_Start+0x110>)
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	d01d      	beq.n	800efac <HAL_TIM_Base_Start+0xac>
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	4a27      	ldr	r2, [pc, #156]	@ (800f014 <HAL_TIM_Base_Start+0x114>)
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d018      	beq.n	800efac <HAL_TIM_Base_Start+0xac>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	4a26      	ldr	r2, [pc, #152]	@ (800f018 <HAL_TIM_Base_Start+0x118>)
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d013      	beq.n	800efac <HAL_TIM_Base_Start+0xac>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4a24      	ldr	r2, [pc, #144]	@ (800f01c <HAL_TIM_Base_Start+0x11c>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d00e      	beq.n	800efac <HAL_TIM_Base_Start+0xac>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	4a23      	ldr	r2, [pc, #140]	@ (800f020 <HAL_TIM_Base_Start+0x120>)
 800ef94:	4293      	cmp	r3, r2
 800ef96:	d009      	beq.n	800efac <HAL_TIM_Base_Start+0xac>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	4a21      	ldr	r2, [pc, #132]	@ (800f024 <HAL_TIM_Base_Start+0x124>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	d004      	beq.n	800efac <HAL_TIM_Base_Start+0xac>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	4a20      	ldr	r2, [pc, #128]	@ (800f028 <HAL_TIM_Base_Start+0x128>)
 800efa8:	4293      	cmp	r3, r2
 800efaa:	d115      	bne.n	800efd8 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	689a      	ldr	r2, [r3, #8]
 800efb2:	4b1e      	ldr	r3, [pc, #120]	@ (800f02c <HAL_TIM_Base_Start+0x12c>)
 800efb4:	4013      	ands	r3, r2
 800efb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	2b06      	cmp	r3, #6
 800efbc:	d015      	beq.n	800efea <HAL_TIM_Base_Start+0xea>
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800efc4:	d011      	beq.n	800efea <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f042 0201 	orr.w	r2, r2, #1
 800efd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efd6:	e008      	b.n	800efea <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f042 0201 	orr.w	r2, r2, #1
 800efe6:	601a      	str	r2, [r3, #0]
 800efe8:	e000      	b.n	800efec <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800efec:	2300      	movs	r3, #0
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3714      	adds	r7, #20
 800eff2:	46bd      	mov	sp, r7
 800eff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff8:	4770      	bx	lr
 800effa:	bf00      	nop
 800effc:	40012c00 	.word	0x40012c00
 800f000:	50012c00 	.word	0x50012c00
 800f004:	40000400 	.word	0x40000400
 800f008:	50000400 	.word	0x50000400
 800f00c:	40000800 	.word	0x40000800
 800f010:	50000800 	.word	0x50000800
 800f014:	40000c00 	.word	0x40000c00
 800f018:	50000c00 	.word	0x50000c00
 800f01c:	40013400 	.word	0x40013400
 800f020:	50013400 	.word	0x50013400
 800f024:	40014000 	.word	0x40014000
 800f028:	50014000 	.word	0x50014000
 800f02c:	00010007 	.word	0x00010007

0800f030 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d101      	bne.n	800f042 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f03e:	2301      	movs	r3, #1
 800f040:	e049      	b.n	800f0d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f048:	b2db      	uxtb	r3, r3
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d106      	bne.n	800f05c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2200      	movs	r2, #0
 800f052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f7f3 f932 	bl	80022c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2202      	movs	r2, #2
 800f060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681a      	ldr	r2, [r3, #0]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	3304      	adds	r3, #4
 800f06c:	4619      	mov	r1, r3
 800f06e:	4610      	mov	r0, r2
 800f070:	f000 fa4c 	bl	800f50c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2201      	movs	r2, #1
 800f078:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2201      	movs	r2, #1
 800f080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2201      	movs	r2, #1
 800f088:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2201      	movs	r2, #1
 800f090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2201      	movs	r2, #1
 800f098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2201      	movs	r2, #1
 800f0a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2201      	movs	r2, #1
 800f0a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2201      	movs	r2, #1
 800f0c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2201      	movs	r2, #1
 800f0d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f0d4:	2300      	movs	r3, #0
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3708      	adds	r7, #8
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}
	...

0800f0e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b086      	sub	sp, #24
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	60f8      	str	r0, [r7, #12]
 800f0e8:	60b9      	str	r1, [r7, #8]
 800f0ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	d101      	bne.n	800f0fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f0fa:	2302      	movs	r3, #2
 800f0fc:	e0ff      	b.n	800f2fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2201      	movs	r2, #1
 800f102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2b14      	cmp	r3, #20
 800f10a:	f200 80f0 	bhi.w	800f2ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f10e:	a201      	add	r2, pc, #4	@ (adr r2, 800f114 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f114:	0800f169 	.word	0x0800f169
 800f118:	0800f2ef 	.word	0x0800f2ef
 800f11c:	0800f2ef 	.word	0x0800f2ef
 800f120:	0800f2ef 	.word	0x0800f2ef
 800f124:	0800f1a9 	.word	0x0800f1a9
 800f128:	0800f2ef 	.word	0x0800f2ef
 800f12c:	0800f2ef 	.word	0x0800f2ef
 800f130:	0800f2ef 	.word	0x0800f2ef
 800f134:	0800f1eb 	.word	0x0800f1eb
 800f138:	0800f2ef 	.word	0x0800f2ef
 800f13c:	0800f2ef 	.word	0x0800f2ef
 800f140:	0800f2ef 	.word	0x0800f2ef
 800f144:	0800f22b 	.word	0x0800f22b
 800f148:	0800f2ef 	.word	0x0800f2ef
 800f14c:	0800f2ef 	.word	0x0800f2ef
 800f150:	0800f2ef 	.word	0x0800f2ef
 800f154:	0800f26d 	.word	0x0800f26d
 800f158:	0800f2ef 	.word	0x0800f2ef
 800f15c:	0800f2ef 	.word	0x0800f2ef
 800f160:	0800f2ef 	.word	0x0800f2ef
 800f164:	0800f2ad 	.word	0x0800f2ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	68b9      	ldr	r1, [r7, #8]
 800f16e:	4618      	mov	r0, r3
 800f170:	f000 fad2 	bl	800f718 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	699a      	ldr	r2, [r3, #24]
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	f042 0208 	orr.w	r2, r2, #8
 800f182:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	699a      	ldr	r2, [r3, #24]
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f022 0204 	bic.w	r2, r2, #4
 800f192:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	6999      	ldr	r1, [r3, #24]
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	691a      	ldr	r2, [r3, #16]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	430a      	orrs	r2, r1
 800f1a4:	619a      	str	r2, [r3, #24]
      break;
 800f1a6:	e0a5      	b.n	800f2f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	68b9      	ldr	r1, [r7, #8]
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f000 fb74 	bl	800f89c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	699a      	ldr	r2, [r3, #24]
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f1c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	699a      	ldr	r2, [r3, #24]
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f1d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	6999      	ldr	r1, [r3, #24]
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	691b      	ldr	r3, [r3, #16]
 800f1de:	021a      	lsls	r2, r3, #8
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	430a      	orrs	r2, r1
 800f1e6:	619a      	str	r2, [r3, #24]
      break;
 800f1e8:	e084      	b.n	800f2f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	68b9      	ldr	r1, [r7, #8]
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f000 fc03 	bl	800f9fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	69da      	ldr	r2, [r3, #28]
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	f042 0208 	orr.w	r2, r2, #8
 800f204:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	69da      	ldr	r2, [r3, #28]
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	f022 0204 	bic.w	r2, r2, #4
 800f214:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	69d9      	ldr	r1, [r3, #28]
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	691a      	ldr	r2, [r3, #16]
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	430a      	orrs	r2, r1
 800f226:	61da      	str	r2, [r3, #28]
      break;
 800f228:	e064      	b.n	800f2f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	68b9      	ldr	r1, [r7, #8]
 800f230:	4618      	mov	r0, r3
 800f232:	f000 fc91 	bl	800fb58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	69da      	ldr	r2, [r3, #28]
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	69da      	ldr	r2, [r3, #28]
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	69d9      	ldr	r1, [r3, #28]
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	691b      	ldr	r3, [r3, #16]
 800f260:	021a      	lsls	r2, r3, #8
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	430a      	orrs	r2, r1
 800f268:	61da      	str	r2, [r3, #28]
      break;
 800f26a:	e043      	b.n	800f2f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	68b9      	ldr	r1, [r7, #8]
 800f272:	4618      	mov	r0, r3
 800f274:	f000 fd20 	bl	800fcb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f042 0208 	orr.w	r2, r2, #8
 800f286:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f022 0204 	bic.w	r2, r2, #4
 800f296:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	691a      	ldr	r2, [r3, #16]
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	430a      	orrs	r2, r1
 800f2a8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f2aa:	e023      	b.n	800f2f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	68b9      	ldr	r1, [r7, #8]
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f000 fd82 	bl	800fdbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f2c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f2d6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	691b      	ldr	r3, [r3, #16]
 800f2e2:	021a      	lsls	r2, r3, #8
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	430a      	orrs	r2, r1
 800f2ea:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f2ec:	e002      	b.n	800f2f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	75fb      	strb	r3, [r7, #23]
      break;
 800f2f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f2fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3718      	adds	r7, #24
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
 800f306:	bf00      	nop

0800f308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b084      	sub	sp, #16
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f312:	2300      	movs	r3, #0
 800f314:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	d101      	bne.n	800f324 <HAL_TIM_ConfigClockSource+0x1c>
 800f320:	2302      	movs	r3, #2
 800f322:	e0e6      	b.n	800f4f2 <HAL_TIM_ConfigClockSource+0x1ea>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2201      	movs	r2, #1
 800f328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2202      	movs	r2, #2
 800f330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	689b      	ldr	r3, [r3, #8]
 800f33a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800f342:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f34e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	68ba      	ldr	r2, [r7, #8]
 800f356:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	4a67      	ldr	r2, [pc, #412]	@ (800f4fc <HAL_TIM_ConfigClockSource+0x1f4>)
 800f35e:	4293      	cmp	r3, r2
 800f360:	f000 80b1 	beq.w	800f4c6 <HAL_TIM_ConfigClockSource+0x1be>
 800f364:	4a65      	ldr	r2, [pc, #404]	@ (800f4fc <HAL_TIM_ConfigClockSource+0x1f4>)
 800f366:	4293      	cmp	r3, r2
 800f368:	f200 80b6 	bhi.w	800f4d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f36c:	4a64      	ldr	r2, [pc, #400]	@ (800f500 <HAL_TIM_ConfigClockSource+0x1f8>)
 800f36e:	4293      	cmp	r3, r2
 800f370:	f000 80a9 	beq.w	800f4c6 <HAL_TIM_ConfigClockSource+0x1be>
 800f374:	4a62      	ldr	r2, [pc, #392]	@ (800f500 <HAL_TIM_ConfigClockSource+0x1f8>)
 800f376:	4293      	cmp	r3, r2
 800f378:	f200 80ae 	bhi.w	800f4d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f37c:	4a61      	ldr	r2, [pc, #388]	@ (800f504 <HAL_TIM_ConfigClockSource+0x1fc>)
 800f37e:	4293      	cmp	r3, r2
 800f380:	f000 80a1 	beq.w	800f4c6 <HAL_TIM_ConfigClockSource+0x1be>
 800f384:	4a5f      	ldr	r2, [pc, #380]	@ (800f504 <HAL_TIM_ConfigClockSource+0x1fc>)
 800f386:	4293      	cmp	r3, r2
 800f388:	f200 80a6 	bhi.w	800f4d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f38c:	4a5e      	ldr	r2, [pc, #376]	@ (800f508 <HAL_TIM_ConfigClockSource+0x200>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	f000 8099 	beq.w	800f4c6 <HAL_TIM_ConfigClockSource+0x1be>
 800f394:	4a5c      	ldr	r2, [pc, #368]	@ (800f508 <HAL_TIM_ConfigClockSource+0x200>)
 800f396:	4293      	cmp	r3, r2
 800f398:	f200 809e 	bhi.w	800f4d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f39c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f3a0:	f000 8091 	beq.w	800f4c6 <HAL_TIM_ConfigClockSource+0x1be>
 800f3a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f3a8:	f200 8096 	bhi.w	800f4d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f3ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f3b0:	f000 8089 	beq.w	800f4c6 <HAL_TIM_ConfigClockSource+0x1be>
 800f3b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f3b8:	f200 808e 	bhi.w	800f4d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f3bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f3c0:	d03e      	beq.n	800f440 <HAL_TIM_ConfigClockSource+0x138>
 800f3c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f3c6:	f200 8087 	bhi.w	800f4d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f3ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f3ce:	f000 8086 	beq.w	800f4de <HAL_TIM_ConfigClockSource+0x1d6>
 800f3d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f3d6:	d87f      	bhi.n	800f4d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f3d8:	2b70      	cmp	r3, #112	@ 0x70
 800f3da:	d01a      	beq.n	800f412 <HAL_TIM_ConfigClockSource+0x10a>
 800f3dc:	2b70      	cmp	r3, #112	@ 0x70
 800f3de:	d87b      	bhi.n	800f4d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f3e0:	2b60      	cmp	r3, #96	@ 0x60
 800f3e2:	d050      	beq.n	800f486 <HAL_TIM_ConfigClockSource+0x17e>
 800f3e4:	2b60      	cmp	r3, #96	@ 0x60
 800f3e6:	d877      	bhi.n	800f4d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f3e8:	2b50      	cmp	r3, #80	@ 0x50
 800f3ea:	d03c      	beq.n	800f466 <HAL_TIM_ConfigClockSource+0x15e>
 800f3ec:	2b50      	cmp	r3, #80	@ 0x50
 800f3ee:	d873      	bhi.n	800f4d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f3f0:	2b40      	cmp	r3, #64	@ 0x40
 800f3f2:	d058      	beq.n	800f4a6 <HAL_TIM_ConfigClockSource+0x19e>
 800f3f4:	2b40      	cmp	r3, #64	@ 0x40
 800f3f6:	d86f      	bhi.n	800f4d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f3f8:	2b30      	cmp	r3, #48	@ 0x30
 800f3fa:	d064      	beq.n	800f4c6 <HAL_TIM_ConfigClockSource+0x1be>
 800f3fc:	2b30      	cmp	r3, #48	@ 0x30
 800f3fe:	d86b      	bhi.n	800f4d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f400:	2b20      	cmp	r3, #32
 800f402:	d060      	beq.n	800f4c6 <HAL_TIM_ConfigClockSource+0x1be>
 800f404:	2b20      	cmp	r3, #32
 800f406:	d867      	bhi.n	800f4d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d05c      	beq.n	800f4c6 <HAL_TIM_ConfigClockSource+0x1be>
 800f40c:	2b10      	cmp	r3, #16
 800f40e:	d05a      	beq.n	800f4c6 <HAL_TIM_ConfigClockSource+0x1be>
 800f410:	e062      	b.n	800f4d8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f422:	f000 fdcb 	bl	800ffbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	689b      	ldr	r3, [r3, #8]
 800f42c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f434:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	68ba      	ldr	r2, [r7, #8]
 800f43c:	609a      	str	r2, [r3, #8]
      break;
 800f43e:	e04f      	b.n	800f4e0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f450:	f000 fdb4 	bl	800ffbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	689a      	ldr	r2, [r3, #8]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f462:	609a      	str	r2, [r3, #8]
      break;
 800f464:	e03c      	b.n	800f4e0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f472:	461a      	mov	r2, r3
 800f474:	f000 fd26 	bl	800fec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	2150      	movs	r1, #80	@ 0x50
 800f47e:	4618      	mov	r0, r3
 800f480:	f000 fd7f 	bl	800ff82 <TIM_ITRx_SetConfig>
      break;
 800f484:	e02c      	b.n	800f4e0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f492:	461a      	mov	r2, r3
 800f494:	f000 fd45 	bl	800ff22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	2160      	movs	r1, #96	@ 0x60
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f000 fd6f 	bl	800ff82 <TIM_ITRx_SetConfig>
      break;
 800f4a4:	e01c      	b.n	800f4e0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	f000 fd06 	bl	800fec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	2140      	movs	r1, #64	@ 0x40
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f000 fd5f 	bl	800ff82 <TIM_ITRx_SetConfig>
      break;
 800f4c4:	e00c      	b.n	800f4e0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	4619      	mov	r1, r3
 800f4d0:	4610      	mov	r0, r2
 800f4d2:	f000 fd56 	bl	800ff82 <TIM_ITRx_SetConfig>
      break;
 800f4d6:	e003      	b.n	800f4e0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800f4d8:	2301      	movs	r3, #1
 800f4da:	73fb      	strb	r3, [r7, #15]
      break;
 800f4dc:	e000      	b.n	800f4e0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800f4de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3710      	adds	r7, #16
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	00100070 	.word	0x00100070
 800f500:	00100040 	.word	0x00100040
 800f504:	00100030 	.word	0x00100030
 800f508:	00100020 	.word	0x00100020

0800f50c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f50c:	b480      	push	{r7}
 800f50e:	b085      	sub	sp, #20
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	4a6e      	ldr	r2, [pc, #440]	@ (800f6d8 <TIM_Base_SetConfig+0x1cc>)
 800f520:	4293      	cmp	r3, r2
 800f522:	d02b      	beq.n	800f57c <TIM_Base_SetConfig+0x70>
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	4a6d      	ldr	r2, [pc, #436]	@ (800f6dc <TIM_Base_SetConfig+0x1d0>)
 800f528:	4293      	cmp	r3, r2
 800f52a:	d027      	beq.n	800f57c <TIM_Base_SetConfig+0x70>
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f532:	d023      	beq.n	800f57c <TIM_Base_SetConfig+0x70>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f53a:	d01f      	beq.n	800f57c <TIM_Base_SetConfig+0x70>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	4a68      	ldr	r2, [pc, #416]	@ (800f6e0 <TIM_Base_SetConfig+0x1d4>)
 800f540:	4293      	cmp	r3, r2
 800f542:	d01b      	beq.n	800f57c <TIM_Base_SetConfig+0x70>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	4a67      	ldr	r2, [pc, #412]	@ (800f6e4 <TIM_Base_SetConfig+0x1d8>)
 800f548:	4293      	cmp	r3, r2
 800f54a:	d017      	beq.n	800f57c <TIM_Base_SetConfig+0x70>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	4a66      	ldr	r2, [pc, #408]	@ (800f6e8 <TIM_Base_SetConfig+0x1dc>)
 800f550:	4293      	cmp	r3, r2
 800f552:	d013      	beq.n	800f57c <TIM_Base_SetConfig+0x70>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	4a65      	ldr	r2, [pc, #404]	@ (800f6ec <TIM_Base_SetConfig+0x1e0>)
 800f558:	4293      	cmp	r3, r2
 800f55a:	d00f      	beq.n	800f57c <TIM_Base_SetConfig+0x70>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	4a64      	ldr	r2, [pc, #400]	@ (800f6f0 <TIM_Base_SetConfig+0x1e4>)
 800f560:	4293      	cmp	r3, r2
 800f562:	d00b      	beq.n	800f57c <TIM_Base_SetConfig+0x70>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	4a63      	ldr	r2, [pc, #396]	@ (800f6f4 <TIM_Base_SetConfig+0x1e8>)
 800f568:	4293      	cmp	r3, r2
 800f56a:	d007      	beq.n	800f57c <TIM_Base_SetConfig+0x70>
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	4a62      	ldr	r2, [pc, #392]	@ (800f6f8 <TIM_Base_SetConfig+0x1ec>)
 800f570:	4293      	cmp	r3, r2
 800f572:	d003      	beq.n	800f57c <TIM_Base_SetConfig+0x70>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	4a61      	ldr	r2, [pc, #388]	@ (800f6fc <TIM_Base_SetConfig+0x1f0>)
 800f578:	4293      	cmp	r3, r2
 800f57a:	d108      	bne.n	800f58e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	685b      	ldr	r3, [r3, #4]
 800f588:	68fa      	ldr	r2, [r7, #12]
 800f58a:	4313      	orrs	r3, r2
 800f58c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	4a51      	ldr	r2, [pc, #324]	@ (800f6d8 <TIM_Base_SetConfig+0x1cc>)
 800f592:	4293      	cmp	r3, r2
 800f594:	d043      	beq.n	800f61e <TIM_Base_SetConfig+0x112>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	4a50      	ldr	r2, [pc, #320]	@ (800f6dc <TIM_Base_SetConfig+0x1d0>)
 800f59a:	4293      	cmp	r3, r2
 800f59c:	d03f      	beq.n	800f61e <TIM_Base_SetConfig+0x112>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5a4:	d03b      	beq.n	800f61e <TIM_Base_SetConfig+0x112>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f5ac:	d037      	beq.n	800f61e <TIM_Base_SetConfig+0x112>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	4a4b      	ldr	r2, [pc, #300]	@ (800f6e0 <TIM_Base_SetConfig+0x1d4>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d033      	beq.n	800f61e <TIM_Base_SetConfig+0x112>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	4a4a      	ldr	r2, [pc, #296]	@ (800f6e4 <TIM_Base_SetConfig+0x1d8>)
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	d02f      	beq.n	800f61e <TIM_Base_SetConfig+0x112>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	4a49      	ldr	r2, [pc, #292]	@ (800f6e8 <TIM_Base_SetConfig+0x1dc>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d02b      	beq.n	800f61e <TIM_Base_SetConfig+0x112>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	4a48      	ldr	r2, [pc, #288]	@ (800f6ec <TIM_Base_SetConfig+0x1e0>)
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	d027      	beq.n	800f61e <TIM_Base_SetConfig+0x112>
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	4a47      	ldr	r2, [pc, #284]	@ (800f6f0 <TIM_Base_SetConfig+0x1e4>)
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	d023      	beq.n	800f61e <TIM_Base_SetConfig+0x112>
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	4a46      	ldr	r2, [pc, #280]	@ (800f6f4 <TIM_Base_SetConfig+0x1e8>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d01f      	beq.n	800f61e <TIM_Base_SetConfig+0x112>
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	4a45      	ldr	r2, [pc, #276]	@ (800f6f8 <TIM_Base_SetConfig+0x1ec>)
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d01b      	beq.n	800f61e <TIM_Base_SetConfig+0x112>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	4a44      	ldr	r2, [pc, #272]	@ (800f6fc <TIM_Base_SetConfig+0x1f0>)
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d017      	beq.n	800f61e <TIM_Base_SetConfig+0x112>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	4a43      	ldr	r2, [pc, #268]	@ (800f700 <TIM_Base_SetConfig+0x1f4>)
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d013      	beq.n	800f61e <TIM_Base_SetConfig+0x112>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	4a42      	ldr	r2, [pc, #264]	@ (800f704 <TIM_Base_SetConfig+0x1f8>)
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	d00f      	beq.n	800f61e <TIM_Base_SetConfig+0x112>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	4a41      	ldr	r2, [pc, #260]	@ (800f708 <TIM_Base_SetConfig+0x1fc>)
 800f602:	4293      	cmp	r3, r2
 800f604:	d00b      	beq.n	800f61e <TIM_Base_SetConfig+0x112>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	4a40      	ldr	r2, [pc, #256]	@ (800f70c <TIM_Base_SetConfig+0x200>)
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d007      	beq.n	800f61e <TIM_Base_SetConfig+0x112>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	4a3f      	ldr	r2, [pc, #252]	@ (800f710 <TIM_Base_SetConfig+0x204>)
 800f612:	4293      	cmp	r3, r2
 800f614:	d003      	beq.n	800f61e <TIM_Base_SetConfig+0x112>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	4a3e      	ldr	r2, [pc, #248]	@ (800f714 <TIM_Base_SetConfig+0x208>)
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d108      	bne.n	800f630 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	68db      	ldr	r3, [r3, #12]
 800f62a:	68fa      	ldr	r2, [r7, #12]
 800f62c:	4313      	orrs	r3, r2
 800f62e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	695b      	ldr	r3, [r3, #20]
 800f63a:	4313      	orrs	r3, r2
 800f63c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	68fa      	ldr	r2, [r7, #12]
 800f642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	689a      	ldr	r2, [r3, #8]
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	681a      	ldr	r2, [r3, #0]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	4a20      	ldr	r2, [pc, #128]	@ (800f6d8 <TIM_Base_SetConfig+0x1cc>)
 800f658:	4293      	cmp	r3, r2
 800f65a:	d023      	beq.n	800f6a4 <TIM_Base_SetConfig+0x198>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	4a1f      	ldr	r2, [pc, #124]	@ (800f6dc <TIM_Base_SetConfig+0x1d0>)
 800f660:	4293      	cmp	r3, r2
 800f662:	d01f      	beq.n	800f6a4 <TIM_Base_SetConfig+0x198>
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	4a24      	ldr	r2, [pc, #144]	@ (800f6f8 <TIM_Base_SetConfig+0x1ec>)
 800f668:	4293      	cmp	r3, r2
 800f66a:	d01b      	beq.n	800f6a4 <TIM_Base_SetConfig+0x198>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	4a23      	ldr	r2, [pc, #140]	@ (800f6fc <TIM_Base_SetConfig+0x1f0>)
 800f670:	4293      	cmp	r3, r2
 800f672:	d017      	beq.n	800f6a4 <TIM_Base_SetConfig+0x198>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	4a22      	ldr	r2, [pc, #136]	@ (800f700 <TIM_Base_SetConfig+0x1f4>)
 800f678:	4293      	cmp	r3, r2
 800f67a:	d013      	beq.n	800f6a4 <TIM_Base_SetConfig+0x198>
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	4a21      	ldr	r2, [pc, #132]	@ (800f704 <TIM_Base_SetConfig+0x1f8>)
 800f680:	4293      	cmp	r3, r2
 800f682:	d00f      	beq.n	800f6a4 <TIM_Base_SetConfig+0x198>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	4a20      	ldr	r2, [pc, #128]	@ (800f708 <TIM_Base_SetConfig+0x1fc>)
 800f688:	4293      	cmp	r3, r2
 800f68a:	d00b      	beq.n	800f6a4 <TIM_Base_SetConfig+0x198>
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	4a1f      	ldr	r2, [pc, #124]	@ (800f70c <TIM_Base_SetConfig+0x200>)
 800f690:	4293      	cmp	r3, r2
 800f692:	d007      	beq.n	800f6a4 <TIM_Base_SetConfig+0x198>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	4a1e      	ldr	r2, [pc, #120]	@ (800f710 <TIM_Base_SetConfig+0x204>)
 800f698:	4293      	cmp	r3, r2
 800f69a:	d003      	beq.n	800f6a4 <TIM_Base_SetConfig+0x198>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	4a1d      	ldr	r2, [pc, #116]	@ (800f714 <TIM_Base_SetConfig+0x208>)
 800f6a0:	4293      	cmp	r3, r2
 800f6a2:	d103      	bne.n	800f6ac <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	691a      	ldr	r2, [r3, #16]
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	691b      	ldr	r3, [r3, #16]
 800f6b6:	f003 0301 	and.w	r3, r3, #1
 800f6ba:	2b01      	cmp	r3, #1
 800f6bc:	d105      	bne.n	800f6ca <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	691b      	ldr	r3, [r3, #16]
 800f6c2:	f023 0201 	bic.w	r2, r3, #1
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	611a      	str	r2, [r3, #16]
  }
}
 800f6ca:	bf00      	nop
 800f6cc:	3714      	adds	r7, #20
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d4:	4770      	bx	lr
 800f6d6:	bf00      	nop
 800f6d8:	40012c00 	.word	0x40012c00
 800f6dc:	50012c00 	.word	0x50012c00
 800f6e0:	40000400 	.word	0x40000400
 800f6e4:	50000400 	.word	0x50000400
 800f6e8:	40000800 	.word	0x40000800
 800f6ec:	50000800 	.word	0x50000800
 800f6f0:	40000c00 	.word	0x40000c00
 800f6f4:	50000c00 	.word	0x50000c00
 800f6f8:	40013400 	.word	0x40013400
 800f6fc:	50013400 	.word	0x50013400
 800f700:	40014000 	.word	0x40014000
 800f704:	50014000 	.word	0x50014000
 800f708:	40014400 	.word	0x40014400
 800f70c:	50014400 	.word	0x50014400
 800f710:	40014800 	.word	0x40014800
 800f714:	50014800 	.word	0x50014800

0800f718 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f718:	b480      	push	{r7}
 800f71a:	b087      	sub	sp, #28
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
 800f720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6a1b      	ldr	r3, [r3, #32]
 800f726:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6a1b      	ldr	r3, [r3, #32]
 800f72c:	f023 0201 	bic.w	r2, r3, #1
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	685b      	ldr	r3, [r3, #4]
 800f738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	699b      	ldr	r3, [r3, #24]
 800f73e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f74a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	f023 0303 	bic.w	r3, r3, #3
 800f752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	68fa      	ldr	r2, [r7, #12]
 800f75a:	4313      	orrs	r3, r2
 800f75c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	f023 0302 	bic.w	r3, r3, #2
 800f764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	689b      	ldr	r3, [r3, #8]
 800f76a:	697a      	ldr	r2, [r7, #20]
 800f76c:	4313      	orrs	r3, r2
 800f76e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	4a40      	ldr	r2, [pc, #256]	@ (800f874 <TIM_OC1_SetConfig+0x15c>)
 800f774:	4293      	cmp	r3, r2
 800f776:	d023      	beq.n	800f7c0 <TIM_OC1_SetConfig+0xa8>
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	4a3f      	ldr	r2, [pc, #252]	@ (800f878 <TIM_OC1_SetConfig+0x160>)
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d01f      	beq.n	800f7c0 <TIM_OC1_SetConfig+0xa8>
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	4a3e      	ldr	r2, [pc, #248]	@ (800f87c <TIM_OC1_SetConfig+0x164>)
 800f784:	4293      	cmp	r3, r2
 800f786:	d01b      	beq.n	800f7c0 <TIM_OC1_SetConfig+0xa8>
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	4a3d      	ldr	r2, [pc, #244]	@ (800f880 <TIM_OC1_SetConfig+0x168>)
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d017      	beq.n	800f7c0 <TIM_OC1_SetConfig+0xa8>
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	4a3c      	ldr	r2, [pc, #240]	@ (800f884 <TIM_OC1_SetConfig+0x16c>)
 800f794:	4293      	cmp	r3, r2
 800f796:	d013      	beq.n	800f7c0 <TIM_OC1_SetConfig+0xa8>
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	4a3b      	ldr	r2, [pc, #236]	@ (800f888 <TIM_OC1_SetConfig+0x170>)
 800f79c:	4293      	cmp	r3, r2
 800f79e:	d00f      	beq.n	800f7c0 <TIM_OC1_SetConfig+0xa8>
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	4a3a      	ldr	r2, [pc, #232]	@ (800f88c <TIM_OC1_SetConfig+0x174>)
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d00b      	beq.n	800f7c0 <TIM_OC1_SetConfig+0xa8>
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	4a39      	ldr	r2, [pc, #228]	@ (800f890 <TIM_OC1_SetConfig+0x178>)
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d007      	beq.n	800f7c0 <TIM_OC1_SetConfig+0xa8>
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	4a38      	ldr	r2, [pc, #224]	@ (800f894 <TIM_OC1_SetConfig+0x17c>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d003      	beq.n	800f7c0 <TIM_OC1_SetConfig+0xa8>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	4a37      	ldr	r2, [pc, #220]	@ (800f898 <TIM_OC1_SetConfig+0x180>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d10c      	bne.n	800f7da <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	f023 0308 	bic.w	r3, r3, #8
 800f7c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	68db      	ldr	r3, [r3, #12]
 800f7cc:	697a      	ldr	r2, [r7, #20]
 800f7ce:	4313      	orrs	r3, r2
 800f7d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	f023 0304 	bic.w	r3, r3, #4
 800f7d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	4a25      	ldr	r2, [pc, #148]	@ (800f874 <TIM_OC1_SetConfig+0x15c>)
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	d023      	beq.n	800f82a <TIM_OC1_SetConfig+0x112>
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	4a24      	ldr	r2, [pc, #144]	@ (800f878 <TIM_OC1_SetConfig+0x160>)
 800f7e6:	4293      	cmp	r3, r2
 800f7e8:	d01f      	beq.n	800f82a <TIM_OC1_SetConfig+0x112>
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	4a23      	ldr	r2, [pc, #140]	@ (800f87c <TIM_OC1_SetConfig+0x164>)
 800f7ee:	4293      	cmp	r3, r2
 800f7f0:	d01b      	beq.n	800f82a <TIM_OC1_SetConfig+0x112>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	4a22      	ldr	r2, [pc, #136]	@ (800f880 <TIM_OC1_SetConfig+0x168>)
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	d017      	beq.n	800f82a <TIM_OC1_SetConfig+0x112>
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	4a21      	ldr	r2, [pc, #132]	@ (800f884 <TIM_OC1_SetConfig+0x16c>)
 800f7fe:	4293      	cmp	r3, r2
 800f800:	d013      	beq.n	800f82a <TIM_OC1_SetConfig+0x112>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	4a20      	ldr	r2, [pc, #128]	@ (800f888 <TIM_OC1_SetConfig+0x170>)
 800f806:	4293      	cmp	r3, r2
 800f808:	d00f      	beq.n	800f82a <TIM_OC1_SetConfig+0x112>
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	4a1f      	ldr	r2, [pc, #124]	@ (800f88c <TIM_OC1_SetConfig+0x174>)
 800f80e:	4293      	cmp	r3, r2
 800f810:	d00b      	beq.n	800f82a <TIM_OC1_SetConfig+0x112>
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	4a1e      	ldr	r2, [pc, #120]	@ (800f890 <TIM_OC1_SetConfig+0x178>)
 800f816:	4293      	cmp	r3, r2
 800f818:	d007      	beq.n	800f82a <TIM_OC1_SetConfig+0x112>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	4a1d      	ldr	r2, [pc, #116]	@ (800f894 <TIM_OC1_SetConfig+0x17c>)
 800f81e:	4293      	cmp	r3, r2
 800f820:	d003      	beq.n	800f82a <TIM_OC1_SetConfig+0x112>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	4a1c      	ldr	r2, [pc, #112]	@ (800f898 <TIM_OC1_SetConfig+0x180>)
 800f826:	4293      	cmp	r3, r2
 800f828:	d111      	bne.n	800f84e <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f832:	693b      	ldr	r3, [r7, #16]
 800f834:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	695b      	ldr	r3, [r3, #20]
 800f83e:	693a      	ldr	r2, [r7, #16]
 800f840:	4313      	orrs	r3, r2
 800f842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	699b      	ldr	r3, [r3, #24]
 800f848:	693a      	ldr	r2, [r7, #16]
 800f84a:	4313      	orrs	r3, r2
 800f84c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	693a      	ldr	r2, [r7, #16]
 800f852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	68fa      	ldr	r2, [r7, #12]
 800f858:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	685a      	ldr	r2, [r3, #4]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	697a      	ldr	r2, [r7, #20]
 800f866:	621a      	str	r2, [r3, #32]
}
 800f868:	bf00      	nop
 800f86a:	371c      	adds	r7, #28
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr
 800f874:	40012c00 	.word	0x40012c00
 800f878:	50012c00 	.word	0x50012c00
 800f87c:	40013400 	.word	0x40013400
 800f880:	50013400 	.word	0x50013400
 800f884:	40014000 	.word	0x40014000
 800f888:	50014000 	.word	0x50014000
 800f88c:	40014400 	.word	0x40014400
 800f890:	50014400 	.word	0x50014400
 800f894:	40014800 	.word	0x40014800
 800f898:	50014800 	.word	0x50014800

0800f89c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f89c:	b480      	push	{r7}
 800f89e:	b087      	sub	sp, #28
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6a1b      	ldr	r3, [r3, #32]
 800f8aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6a1b      	ldr	r3, [r3, #32]
 800f8b0:	f023 0210 	bic.w	r2, r3, #16
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	685b      	ldr	r3, [r3, #4]
 800f8bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	699b      	ldr	r3, [r3, #24]
 800f8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f8ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f8ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f8d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	021b      	lsls	r3, r3, #8
 800f8de:	68fa      	ldr	r2, [r7, #12]
 800f8e0:	4313      	orrs	r3, r2
 800f8e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	f023 0320 	bic.w	r3, r3, #32
 800f8ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	689b      	ldr	r3, [r3, #8]
 800f8f0:	011b      	lsls	r3, r3, #4
 800f8f2:	697a      	ldr	r2, [r7, #20]
 800f8f4:	4313      	orrs	r3, r2
 800f8f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	4a36      	ldr	r2, [pc, #216]	@ (800f9d4 <TIM_OC2_SetConfig+0x138>)
 800f8fc:	4293      	cmp	r3, r2
 800f8fe:	d00b      	beq.n	800f918 <TIM_OC2_SetConfig+0x7c>
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	4a35      	ldr	r2, [pc, #212]	@ (800f9d8 <TIM_OC2_SetConfig+0x13c>)
 800f904:	4293      	cmp	r3, r2
 800f906:	d007      	beq.n	800f918 <TIM_OC2_SetConfig+0x7c>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	4a34      	ldr	r2, [pc, #208]	@ (800f9dc <TIM_OC2_SetConfig+0x140>)
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d003      	beq.n	800f918 <TIM_OC2_SetConfig+0x7c>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	4a33      	ldr	r2, [pc, #204]	@ (800f9e0 <TIM_OC2_SetConfig+0x144>)
 800f914:	4293      	cmp	r3, r2
 800f916:	d10d      	bne.n	800f934 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f918:	697b      	ldr	r3, [r7, #20]
 800f91a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f91e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	011b      	lsls	r3, r3, #4
 800f926:	697a      	ldr	r2, [r7, #20]
 800f928:	4313      	orrs	r3, r2
 800f92a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f932:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	4a27      	ldr	r2, [pc, #156]	@ (800f9d4 <TIM_OC2_SetConfig+0x138>)
 800f938:	4293      	cmp	r3, r2
 800f93a:	d023      	beq.n	800f984 <TIM_OC2_SetConfig+0xe8>
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	4a26      	ldr	r2, [pc, #152]	@ (800f9d8 <TIM_OC2_SetConfig+0x13c>)
 800f940:	4293      	cmp	r3, r2
 800f942:	d01f      	beq.n	800f984 <TIM_OC2_SetConfig+0xe8>
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	4a25      	ldr	r2, [pc, #148]	@ (800f9dc <TIM_OC2_SetConfig+0x140>)
 800f948:	4293      	cmp	r3, r2
 800f94a:	d01b      	beq.n	800f984 <TIM_OC2_SetConfig+0xe8>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4a24      	ldr	r2, [pc, #144]	@ (800f9e0 <TIM_OC2_SetConfig+0x144>)
 800f950:	4293      	cmp	r3, r2
 800f952:	d017      	beq.n	800f984 <TIM_OC2_SetConfig+0xe8>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	4a23      	ldr	r2, [pc, #140]	@ (800f9e4 <TIM_OC2_SetConfig+0x148>)
 800f958:	4293      	cmp	r3, r2
 800f95a:	d013      	beq.n	800f984 <TIM_OC2_SetConfig+0xe8>
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	4a22      	ldr	r2, [pc, #136]	@ (800f9e8 <TIM_OC2_SetConfig+0x14c>)
 800f960:	4293      	cmp	r3, r2
 800f962:	d00f      	beq.n	800f984 <TIM_OC2_SetConfig+0xe8>
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	4a21      	ldr	r2, [pc, #132]	@ (800f9ec <TIM_OC2_SetConfig+0x150>)
 800f968:	4293      	cmp	r3, r2
 800f96a:	d00b      	beq.n	800f984 <TIM_OC2_SetConfig+0xe8>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	4a20      	ldr	r2, [pc, #128]	@ (800f9f0 <TIM_OC2_SetConfig+0x154>)
 800f970:	4293      	cmp	r3, r2
 800f972:	d007      	beq.n	800f984 <TIM_OC2_SetConfig+0xe8>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	4a1f      	ldr	r2, [pc, #124]	@ (800f9f4 <TIM_OC2_SetConfig+0x158>)
 800f978:	4293      	cmp	r3, r2
 800f97a:	d003      	beq.n	800f984 <TIM_OC2_SetConfig+0xe8>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	4a1e      	ldr	r2, [pc, #120]	@ (800f9f8 <TIM_OC2_SetConfig+0x15c>)
 800f980:	4293      	cmp	r3, r2
 800f982:	d113      	bne.n	800f9ac <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f984:	693b      	ldr	r3, [r7, #16]
 800f986:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f98a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f992:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	695b      	ldr	r3, [r3, #20]
 800f998:	009b      	lsls	r3, r3, #2
 800f99a:	693a      	ldr	r2, [r7, #16]
 800f99c:	4313      	orrs	r3, r2
 800f99e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	699b      	ldr	r3, [r3, #24]
 800f9a4:	009b      	lsls	r3, r3, #2
 800f9a6:	693a      	ldr	r2, [r7, #16]
 800f9a8:	4313      	orrs	r3, r2
 800f9aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	693a      	ldr	r2, [r7, #16]
 800f9b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	68fa      	ldr	r2, [r7, #12]
 800f9b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	685a      	ldr	r2, [r3, #4]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	697a      	ldr	r2, [r7, #20]
 800f9c4:	621a      	str	r2, [r3, #32]
}
 800f9c6:	bf00      	nop
 800f9c8:	371c      	adds	r7, #28
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d0:	4770      	bx	lr
 800f9d2:	bf00      	nop
 800f9d4:	40012c00 	.word	0x40012c00
 800f9d8:	50012c00 	.word	0x50012c00
 800f9dc:	40013400 	.word	0x40013400
 800f9e0:	50013400 	.word	0x50013400
 800f9e4:	40014000 	.word	0x40014000
 800f9e8:	50014000 	.word	0x50014000
 800f9ec:	40014400 	.word	0x40014400
 800f9f0:	50014400 	.word	0x50014400
 800f9f4:	40014800 	.word	0x40014800
 800f9f8:	50014800 	.word	0x50014800

0800f9fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b087      	sub	sp, #28
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6a1b      	ldr	r3, [r3, #32]
 800fa0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6a1b      	ldr	r3, [r3, #32]
 800fa10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	69db      	ldr	r3, [r3, #28]
 800fa22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fa2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	f023 0303 	bic.w	r3, r3, #3
 800fa36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	68fa      	ldr	r2, [r7, #12]
 800fa3e:	4313      	orrs	r3, r2
 800fa40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fa48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	689b      	ldr	r3, [r3, #8]
 800fa4e:	021b      	lsls	r3, r3, #8
 800fa50:	697a      	ldr	r2, [r7, #20]
 800fa52:	4313      	orrs	r3, r2
 800fa54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	4a35      	ldr	r2, [pc, #212]	@ (800fb30 <TIM_OC3_SetConfig+0x134>)
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	d00b      	beq.n	800fa76 <TIM_OC3_SetConfig+0x7a>
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	4a34      	ldr	r2, [pc, #208]	@ (800fb34 <TIM_OC3_SetConfig+0x138>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d007      	beq.n	800fa76 <TIM_OC3_SetConfig+0x7a>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	4a33      	ldr	r2, [pc, #204]	@ (800fb38 <TIM_OC3_SetConfig+0x13c>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d003      	beq.n	800fa76 <TIM_OC3_SetConfig+0x7a>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	4a32      	ldr	r2, [pc, #200]	@ (800fb3c <TIM_OC3_SetConfig+0x140>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d10d      	bne.n	800fa92 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fa7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	68db      	ldr	r3, [r3, #12]
 800fa82:	021b      	lsls	r3, r3, #8
 800fa84:	697a      	ldr	r2, [r7, #20]
 800fa86:	4313      	orrs	r3, r2
 800fa88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fa90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	4a26      	ldr	r2, [pc, #152]	@ (800fb30 <TIM_OC3_SetConfig+0x134>)
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d023      	beq.n	800fae2 <TIM_OC3_SetConfig+0xe6>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	4a25      	ldr	r2, [pc, #148]	@ (800fb34 <TIM_OC3_SetConfig+0x138>)
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d01f      	beq.n	800fae2 <TIM_OC3_SetConfig+0xe6>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	4a24      	ldr	r2, [pc, #144]	@ (800fb38 <TIM_OC3_SetConfig+0x13c>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d01b      	beq.n	800fae2 <TIM_OC3_SetConfig+0xe6>
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	4a23      	ldr	r2, [pc, #140]	@ (800fb3c <TIM_OC3_SetConfig+0x140>)
 800faae:	4293      	cmp	r3, r2
 800fab0:	d017      	beq.n	800fae2 <TIM_OC3_SetConfig+0xe6>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	4a22      	ldr	r2, [pc, #136]	@ (800fb40 <TIM_OC3_SetConfig+0x144>)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d013      	beq.n	800fae2 <TIM_OC3_SetConfig+0xe6>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	4a21      	ldr	r2, [pc, #132]	@ (800fb44 <TIM_OC3_SetConfig+0x148>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d00f      	beq.n	800fae2 <TIM_OC3_SetConfig+0xe6>
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	4a20      	ldr	r2, [pc, #128]	@ (800fb48 <TIM_OC3_SetConfig+0x14c>)
 800fac6:	4293      	cmp	r3, r2
 800fac8:	d00b      	beq.n	800fae2 <TIM_OC3_SetConfig+0xe6>
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	4a1f      	ldr	r2, [pc, #124]	@ (800fb4c <TIM_OC3_SetConfig+0x150>)
 800face:	4293      	cmp	r3, r2
 800fad0:	d007      	beq.n	800fae2 <TIM_OC3_SetConfig+0xe6>
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	4a1e      	ldr	r2, [pc, #120]	@ (800fb50 <TIM_OC3_SetConfig+0x154>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d003      	beq.n	800fae2 <TIM_OC3_SetConfig+0xe6>
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	4a1d      	ldr	r2, [pc, #116]	@ (800fb54 <TIM_OC3_SetConfig+0x158>)
 800fade:	4293      	cmp	r3, r2
 800fae0:	d113      	bne.n	800fb0a <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fae2:	693b      	ldr	r3, [r7, #16]
 800fae4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800faea:	693b      	ldr	r3, [r7, #16]
 800faec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800faf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	695b      	ldr	r3, [r3, #20]
 800faf6:	011b      	lsls	r3, r3, #4
 800faf8:	693a      	ldr	r2, [r7, #16]
 800fafa:	4313      	orrs	r3, r2
 800fafc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	699b      	ldr	r3, [r3, #24]
 800fb02:	011b      	lsls	r3, r3, #4
 800fb04:	693a      	ldr	r2, [r7, #16]
 800fb06:	4313      	orrs	r3, r2
 800fb08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	693a      	ldr	r2, [r7, #16]
 800fb0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	68fa      	ldr	r2, [r7, #12]
 800fb14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	685a      	ldr	r2, [r3, #4]
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	697a      	ldr	r2, [r7, #20]
 800fb22:	621a      	str	r2, [r3, #32]
}
 800fb24:	bf00      	nop
 800fb26:	371c      	adds	r7, #28
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr
 800fb30:	40012c00 	.word	0x40012c00
 800fb34:	50012c00 	.word	0x50012c00
 800fb38:	40013400 	.word	0x40013400
 800fb3c:	50013400 	.word	0x50013400
 800fb40:	40014000 	.word	0x40014000
 800fb44:	50014000 	.word	0x50014000
 800fb48:	40014400 	.word	0x40014400
 800fb4c:	50014400 	.word	0x50014400
 800fb50:	40014800 	.word	0x40014800
 800fb54:	50014800 	.word	0x50014800

0800fb58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b087      	sub	sp, #28
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6a1b      	ldr	r3, [r3, #32]
 800fb66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6a1b      	ldr	r3, [r3, #32]
 800fb6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	685b      	ldr	r3, [r3, #4]
 800fb78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	69db      	ldr	r3, [r3, #28]
 800fb7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fb86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fb8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fb92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	021b      	lsls	r3, r3, #8
 800fb9a:	68fa      	ldr	r2, [r7, #12]
 800fb9c:	4313      	orrs	r3, r2
 800fb9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fba6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	689b      	ldr	r3, [r3, #8]
 800fbac:	031b      	lsls	r3, r3, #12
 800fbae:	697a      	ldr	r2, [r7, #20]
 800fbb0:	4313      	orrs	r3, r2
 800fbb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	4a36      	ldr	r2, [pc, #216]	@ (800fc90 <TIM_OC4_SetConfig+0x138>)
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	d00b      	beq.n	800fbd4 <TIM_OC4_SetConfig+0x7c>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	4a35      	ldr	r2, [pc, #212]	@ (800fc94 <TIM_OC4_SetConfig+0x13c>)
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	d007      	beq.n	800fbd4 <TIM_OC4_SetConfig+0x7c>
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	4a34      	ldr	r2, [pc, #208]	@ (800fc98 <TIM_OC4_SetConfig+0x140>)
 800fbc8:	4293      	cmp	r3, r2
 800fbca:	d003      	beq.n	800fbd4 <TIM_OC4_SetConfig+0x7c>
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	4a33      	ldr	r2, [pc, #204]	@ (800fc9c <TIM_OC4_SetConfig+0x144>)
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d10d      	bne.n	800fbf0 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fbda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	68db      	ldr	r3, [r3, #12]
 800fbe0:	031b      	lsls	r3, r3, #12
 800fbe2:	697a      	ldr	r2, [r7, #20]
 800fbe4:	4313      	orrs	r3, r2
 800fbe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fbee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	4a27      	ldr	r2, [pc, #156]	@ (800fc90 <TIM_OC4_SetConfig+0x138>)
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	d023      	beq.n	800fc40 <TIM_OC4_SetConfig+0xe8>
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	4a26      	ldr	r2, [pc, #152]	@ (800fc94 <TIM_OC4_SetConfig+0x13c>)
 800fbfc:	4293      	cmp	r3, r2
 800fbfe:	d01f      	beq.n	800fc40 <TIM_OC4_SetConfig+0xe8>
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	4a25      	ldr	r2, [pc, #148]	@ (800fc98 <TIM_OC4_SetConfig+0x140>)
 800fc04:	4293      	cmp	r3, r2
 800fc06:	d01b      	beq.n	800fc40 <TIM_OC4_SetConfig+0xe8>
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	4a24      	ldr	r2, [pc, #144]	@ (800fc9c <TIM_OC4_SetConfig+0x144>)
 800fc0c:	4293      	cmp	r3, r2
 800fc0e:	d017      	beq.n	800fc40 <TIM_OC4_SetConfig+0xe8>
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	4a23      	ldr	r2, [pc, #140]	@ (800fca0 <TIM_OC4_SetConfig+0x148>)
 800fc14:	4293      	cmp	r3, r2
 800fc16:	d013      	beq.n	800fc40 <TIM_OC4_SetConfig+0xe8>
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	4a22      	ldr	r2, [pc, #136]	@ (800fca4 <TIM_OC4_SetConfig+0x14c>)
 800fc1c:	4293      	cmp	r3, r2
 800fc1e:	d00f      	beq.n	800fc40 <TIM_OC4_SetConfig+0xe8>
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	4a21      	ldr	r2, [pc, #132]	@ (800fca8 <TIM_OC4_SetConfig+0x150>)
 800fc24:	4293      	cmp	r3, r2
 800fc26:	d00b      	beq.n	800fc40 <TIM_OC4_SetConfig+0xe8>
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	4a20      	ldr	r2, [pc, #128]	@ (800fcac <TIM_OC4_SetConfig+0x154>)
 800fc2c:	4293      	cmp	r3, r2
 800fc2e:	d007      	beq.n	800fc40 <TIM_OC4_SetConfig+0xe8>
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	4a1f      	ldr	r2, [pc, #124]	@ (800fcb0 <TIM_OC4_SetConfig+0x158>)
 800fc34:	4293      	cmp	r3, r2
 800fc36:	d003      	beq.n	800fc40 <TIM_OC4_SetConfig+0xe8>
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	4a1e      	ldr	r2, [pc, #120]	@ (800fcb4 <TIM_OC4_SetConfig+0x15c>)
 800fc3c:	4293      	cmp	r3, r2
 800fc3e:	d113      	bne.n	800fc68 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fc46:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fc4e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	695b      	ldr	r3, [r3, #20]
 800fc54:	019b      	lsls	r3, r3, #6
 800fc56:	693a      	ldr	r2, [r7, #16]
 800fc58:	4313      	orrs	r3, r2
 800fc5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	699b      	ldr	r3, [r3, #24]
 800fc60:	019b      	lsls	r3, r3, #6
 800fc62:	693a      	ldr	r2, [r7, #16]
 800fc64:	4313      	orrs	r3, r2
 800fc66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	693a      	ldr	r2, [r7, #16]
 800fc6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	68fa      	ldr	r2, [r7, #12]
 800fc72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	685a      	ldr	r2, [r3, #4]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	697a      	ldr	r2, [r7, #20]
 800fc80:	621a      	str	r2, [r3, #32]
}
 800fc82:	bf00      	nop
 800fc84:	371c      	adds	r7, #28
 800fc86:	46bd      	mov	sp, r7
 800fc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8c:	4770      	bx	lr
 800fc8e:	bf00      	nop
 800fc90:	40012c00 	.word	0x40012c00
 800fc94:	50012c00 	.word	0x50012c00
 800fc98:	40013400 	.word	0x40013400
 800fc9c:	50013400 	.word	0x50013400
 800fca0:	40014000 	.word	0x40014000
 800fca4:	50014000 	.word	0x50014000
 800fca8:	40014400 	.word	0x40014400
 800fcac:	50014400 	.word	0x50014400
 800fcb0:	40014800 	.word	0x40014800
 800fcb4:	50014800 	.word	0x50014800

0800fcb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fcb8:	b480      	push	{r7}
 800fcba:	b087      	sub	sp, #28
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6a1b      	ldr	r3, [r3, #32]
 800fcc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6a1b      	ldr	r3, [r3, #32]
 800fccc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fcde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fcea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	68fa      	ldr	r2, [r7, #12]
 800fcf2:	4313      	orrs	r3, r2
 800fcf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800fcfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	689b      	ldr	r3, [r3, #8]
 800fd02:	041b      	lsls	r3, r3, #16
 800fd04:	693a      	ldr	r2, [r7, #16]
 800fd06:	4313      	orrs	r3, r2
 800fd08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	4a21      	ldr	r2, [pc, #132]	@ (800fd94 <TIM_OC5_SetConfig+0xdc>)
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	d023      	beq.n	800fd5a <TIM_OC5_SetConfig+0xa2>
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	4a20      	ldr	r2, [pc, #128]	@ (800fd98 <TIM_OC5_SetConfig+0xe0>)
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d01f      	beq.n	800fd5a <TIM_OC5_SetConfig+0xa2>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	4a1f      	ldr	r2, [pc, #124]	@ (800fd9c <TIM_OC5_SetConfig+0xe4>)
 800fd1e:	4293      	cmp	r3, r2
 800fd20:	d01b      	beq.n	800fd5a <TIM_OC5_SetConfig+0xa2>
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	4a1e      	ldr	r2, [pc, #120]	@ (800fda0 <TIM_OC5_SetConfig+0xe8>)
 800fd26:	4293      	cmp	r3, r2
 800fd28:	d017      	beq.n	800fd5a <TIM_OC5_SetConfig+0xa2>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	4a1d      	ldr	r2, [pc, #116]	@ (800fda4 <TIM_OC5_SetConfig+0xec>)
 800fd2e:	4293      	cmp	r3, r2
 800fd30:	d013      	beq.n	800fd5a <TIM_OC5_SetConfig+0xa2>
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	4a1c      	ldr	r2, [pc, #112]	@ (800fda8 <TIM_OC5_SetConfig+0xf0>)
 800fd36:	4293      	cmp	r3, r2
 800fd38:	d00f      	beq.n	800fd5a <TIM_OC5_SetConfig+0xa2>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	4a1b      	ldr	r2, [pc, #108]	@ (800fdac <TIM_OC5_SetConfig+0xf4>)
 800fd3e:	4293      	cmp	r3, r2
 800fd40:	d00b      	beq.n	800fd5a <TIM_OC5_SetConfig+0xa2>
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	4a1a      	ldr	r2, [pc, #104]	@ (800fdb0 <TIM_OC5_SetConfig+0xf8>)
 800fd46:	4293      	cmp	r3, r2
 800fd48:	d007      	beq.n	800fd5a <TIM_OC5_SetConfig+0xa2>
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	4a19      	ldr	r2, [pc, #100]	@ (800fdb4 <TIM_OC5_SetConfig+0xfc>)
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d003      	beq.n	800fd5a <TIM_OC5_SetConfig+0xa2>
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	4a18      	ldr	r2, [pc, #96]	@ (800fdb8 <TIM_OC5_SetConfig+0x100>)
 800fd56:	4293      	cmp	r3, r2
 800fd58:	d109      	bne.n	800fd6e <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fd60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	695b      	ldr	r3, [r3, #20]
 800fd66:	021b      	lsls	r3, r3, #8
 800fd68:	697a      	ldr	r2, [r7, #20]
 800fd6a:	4313      	orrs	r3, r2
 800fd6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	697a      	ldr	r2, [r7, #20]
 800fd72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	68fa      	ldr	r2, [r7, #12]
 800fd78:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	685a      	ldr	r2, [r3, #4]
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	693a      	ldr	r2, [r7, #16]
 800fd86:	621a      	str	r2, [r3, #32]
}
 800fd88:	bf00      	nop
 800fd8a:	371c      	adds	r7, #28
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd92:	4770      	bx	lr
 800fd94:	40012c00 	.word	0x40012c00
 800fd98:	50012c00 	.word	0x50012c00
 800fd9c:	40013400 	.word	0x40013400
 800fda0:	50013400 	.word	0x50013400
 800fda4:	40014000 	.word	0x40014000
 800fda8:	50014000 	.word	0x50014000
 800fdac:	40014400 	.word	0x40014400
 800fdb0:	50014400 	.word	0x50014400
 800fdb4:	40014800 	.word	0x40014800
 800fdb8:	50014800 	.word	0x50014800

0800fdbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b087      	sub	sp, #28
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6a1b      	ldr	r3, [r3, #32]
 800fdca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6a1b      	ldr	r3, [r3, #32]
 800fdd0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	685b      	ldr	r3, [r3, #4]
 800fddc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fde2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fdea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fdee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	021b      	lsls	r3, r3, #8
 800fdf6:	68fa      	ldr	r2, [r7, #12]
 800fdf8:	4313      	orrs	r3, r2
 800fdfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fe02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	689b      	ldr	r3, [r3, #8]
 800fe08:	051b      	lsls	r3, r3, #20
 800fe0a:	693a      	ldr	r2, [r7, #16]
 800fe0c:	4313      	orrs	r3, r2
 800fe0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	4a22      	ldr	r2, [pc, #136]	@ (800fe9c <TIM_OC6_SetConfig+0xe0>)
 800fe14:	4293      	cmp	r3, r2
 800fe16:	d023      	beq.n	800fe60 <TIM_OC6_SetConfig+0xa4>
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	4a21      	ldr	r2, [pc, #132]	@ (800fea0 <TIM_OC6_SetConfig+0xe4>)
 800fe1c:	4293      	cmp	r3, r2
 800fe1e:	d01f      	beq.n	800fe60 <TIM_OC6_SetConfig+0xa4>
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	4a20      	ldr	r2, [pc, #128]	@ (800fea4 <TIM_OC6_SetConfig+0xe8>)
 800fe24:	4293      	cmp	r3, r2
 800fe26:	d01b      	beq.n	800fe60 <TIM_OC6_SetConfig+0xa4>
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	4a1f      	ldr	r2, [pc, #124]	@ (800fea8 <TIM_OC6_SetConfig+0xec>)
 800fe2c:	4293      	cmp	r3, r2
 800fe2e:	d017      	beq.n	800fe60 <TIM_OC6_SetConfig+0xa4>
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	4a1e      	ldr	r2, [pc, #120]	@ (800feac <TIM_OC6_SetConfig+0xf0>)
 800fe34:	4293      	cmp	r3, r2
 800fe36:	d013      	beq.n	800fe60 <TIM_OC6_SetConfig+0xa4>
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	4a1d      	ldr	r2, [pc, #116]	@ (800feb0 <TIM_OC6_SetConfig+0xf4>)
 800fe3c:	4293      	cmp	r3, r2
 800fe3e:	d00f      	beq.n	800fe60 <TIM_OC6_SetConfig+0xa4>
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	4a1c      	ldr	r2, [pc, #112]	@ (800feb4 <TIM_OC6_SetConfig+0xf8>)
 800fe44:	4293      	cmp	r3, r2
 800fe46:	d00b      	beq.n	800fe60 <TIM_OC6_SetConfig+0xa4>
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	4a1b      	ldr	r2, [pc, #108]	@ (800feb8 <TIM_OC6_SetConfig+0xfc>)
 800fe4c:	4293      	cmp	r3, r2
 800fe4e:	d007      	beq.n	800fe60 <TIM_OC6_SetConfig+0xa4>
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	4a1a      	ldr	r2, [pc, #104]	@ (800febc <TIM_OC6_SetConfig+0x100>)
 800fe54:	4293      	cmp	r3, r2
 800fe56:	d003      	beq.n	800fe60 <TIM_OC6_SetConfig+0xa4>
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	4a19      	ldr	r2, [pc, #100]	@ (800fec0 <TIM_OC6_SetConfig+0x104>)
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	d109      	bne.n	800fe74 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fe60:	697b      	ldr	r3, [r7, #20]
 800fe62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fe66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	695b      	ldr	r3, [r3, #20]
 800fe6c:	029b      	lsls	r3, r3, #10
 800fe6e:	697a      	ldr	r2, [r7, #20]
 800fe70:	4313      	orrs	r3, r2
 800fe72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	697a      	ldr	r2, [r7, #20]
 800fe78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	68fa      	ldr	r2, [r7, #12]
 800fe7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	685a      	ldr	r2, [r3, #4]
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	693a      	ldr	r2, [r7, #16]
 800fe8c:	621a      	str	r2, [r3, #32]
}
 800fe8e:	bf00      	nop
 800fe90:	371c      	adds	r7, #28
 800fe92:	46bd      	mov	sp, r7
 800fe94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe98:	4770      	bx	lr
 800fe9a:	bf00      	nop
 800fe9c:	40012c00 	.word	0x40012c00
 800fea0:	50012c00 	.word	0x50012c00
 800fea4:	40013400 	.word	0x40013400
 800fea8:	50013400 	.word	0x50013400
 800feac:	40014000 	.word	0x40014000
 800feb0:	50014000 	.word	0x50014000
 800feb4:	40014400 	.word	0x40014400
 800feb8:	50014400 	.word	0x50014400
 800febc:	40014800 	.word	0x40014800
 800fec0:	50014800 	.word	0x50014800

0800fec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fec4:	b480      	push	{r7}
 800fec6:	b087      	sub	sp, #28
 800fec8:	af00      	add	r7, sp, #0
 800feca:	60f8      	str	r0, [r7, #12]
 800fecc:	60b9      	str	r1, [r7, #8]
 800fece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	6a1b      	ldr	r3, [r3, #32]
 800fed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	6a1b      	ldr	r3, [r3, #32]
 800feda:	f023 0201 	bic.w	r2, r3, #1
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	699b      	ldr	r3, [r3, #24]
 800fee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800feee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	011b      	lsls	r3, r3, #4
 800fef4:	693a      	ldr	r2, [r7, #16]
 800fef6:	4313      	orrs	r3, r2
 800fef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	f023 030a 	bic.w	r3, r3, #10
 800ff00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ff02:	697a      	ldr	r2, [r7, #20]
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	4313      	orrs	r3, r2
 800ff08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	693a      	ldr	r2, [r7, #16]
 800ff0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	697a      	ldr	r2, [r7, #20]
 800ff14:	621a      	str	r2, [r3, #32]
}
 800ff16:	bf00      	nop
 800ff18:	371c      	adds	r7, #28
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr

0800ff22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ff22:	b480      	push	{r7}
 800ff24:	b087      	sub	sp, #28
 800ff26:	af00      	add	r7, sp, #0
 800ff28:	60f8      	str	r0, [r7, #12]
 800ff2a:	60b9      	str	r1, [r7, #8]
 800ff2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	6a1b      	ldr	r3, [r3, #32]
 800ff32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	6a1b      	ldr	r3, [r3, #32]
 800ff38:	f023 0210 	bic.w	r2, r3, #16
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	699b      	ldr	r3, [r3, #24]
 800ff44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ff46:	693b      	ldr	r3, [r7, #16]
 800ff48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ff4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	031b      	lsls	r3, r3, #12
 800ff52:	693a      	ldr	r2, [r7, #16]
 800ff54:	4313      	orrs	r3, r2
 800ff56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ff58:	697b      	ldr	r3, [r7, #20]
 800ff5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ff5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	011b      	lsls	r3, r3, #4
 800ff64:	697a      	ldr	r2, [r7, #20]
 800ff66:	4313      	orrs	r3, r2
 800ff68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	693a      	ldr	r2, [r7, #16]
 800ff6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	697a      	ldr	r2, [r7, #20]
 800ff74:	621a      	str	r2, [r3, #32]
}
 800ff76:	bf00      	nop
 800ff78:	371c      	adds	r7, #28
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff80:	4770      	bx	lr

0800ff82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ff82:	b480      	push	{r7}
 800ff84:	b085      	sub	sp, #20
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	6078      	str	r0, [r7, #4]
 800ff8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	689b      	ldr	r3, [r3, #8]
 800ff90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ff98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ff9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ff9e:	683a      	ldr	r2, [r7, #0]
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	4313      	orrs	r3, r2
 800ffa4:	f043 0307 	orr.w	r3, r3, #7
 800ffa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	68fa      	ldr	r2, [r7, #12]
 800ffae:	609a      	str	r2, [r3, #8]
}
 800ffb0:	bf00      	nop
 800ffb2:	3714      	adds	r7, #20
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffba:	4770      	bx	lr

0800ffbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ffbc:	b480      	push	{r7}
 800ffbe:	b087      	sub	sp, #28
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	60f8      	str	r0, [r7, #12]
 800ffc4:	60b9      	str	r1, [r7, #8]
 800ffc6:	607a      	str	r2, [r7, #4]
 800ffc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	689b      	ldr	r3, [r3, #8]
 800ffce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ffd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	021a      	lsls	r2, r3, #8
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	431a      	orrs	r2, r3
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	4313      	orrs	r3, r2
 800ffe4:	697a      	ldr	r2, [r7, #20]
 800ffe6:	4313      	orrs	r3, r2
 800ffe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	697a      	ldr	r2, [r7, #20]
 800ffee:	609a      	str	r2, [r3, #8]
}
 800fff0:	bf00      	nop
 800fff2:	371c      	adds	r7, #28
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr

0800fffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fffc:	b480      	push	{r7}
 800fffe:	b085      	sub	sp, #20
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
 8010004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801000c:	2b01      	cmp	r3, #1
 801000e:	d101      	bne.n	8010014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010010:	2302      	movs	r3, #2
 8010012:	e097      	b.n	8010144 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2201      	movs	r2, #1
 8010018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2202      	movs	r2, #2
 8010020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	689b      	ldr	r3, [r3, #8]
 8010032:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	4a45      	ldr	r2, [pc, #276]	@ (8010150 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 801003a:	4293      	cmp	r3, r2
 801003c:	d00e      	beq.n	801005c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	4a44      	ldr	r2, [pc, #272]	@ (8010154 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8010044:	4293      	cmp	r3, r2
 8010046:	d009      	beq.n	801005c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	4a42      	ldr	r2, [pc, #264]	@ (8010158 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 801004e:	4293      	cmp	r3, r2
 8010050:	d004      	beq.n	801005c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4a41      	ldr	r2, [pc, #260]	@ (801015c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010058:	4293      	cmp	r3, r2
 801005a:	d108      	bne.n	801006e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010062:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	685b      	ldr	r3, [r3, #4]
 8010068:	68fa      	ldr	r2, [r7, #12]
 801006a:	4313      	orrs	r3, r2
 801006c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8010074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010078:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	68fa      	ldr	r2, [r7, #12]
 8010080:	4313      	orrs	r3, r2
 8010082:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	68fa      	ldr	r2, [r7, #12]
 801008a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	4a2f      	ldr	r2, [pc, #188]	@ (8010150 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8010092:	4293      	cmp	r3, r2
 8010094:	d040      	beq.n	8010118 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	4a2e      	ldr	r2, [pc, #184]	@ (8010154 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 801009c:	4293      	cmp	r3, r2
 801009e:	d03b      	beq.n	8010118 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80100a8:	d036      	beq.n	8010118 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80100b2:	d031      	beq.n	8010118 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	4a29      	ldr	r2, [pc, #164]	@ (8010160 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80100ba:	4293      	cmp	r3, r2
 80100bc:	d02c      	beq.n	8010118 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	4a28      	ldr	r2, [pc, #160]	@ (8010164 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80100c4:	4293      	cmp	r3, r2
 80100c6:	d027      	beq.n	8010118 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	4a26      	ldr	r2, [pc, #152]	@ (8010168 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80100ce:	4293      	cmp	r3, r2
 80100d0:	d022      	beq.n	8010118 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	4a25      	ldr	r2, [pc, #148]	@ (801016c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80100d8:	4293      	cmp	r3, r2
 80100da:	d01d      	beq.n	8010118 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	4a23      	ldr	r2, [pc, #140]	@ (8010170 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80100e2:	4293      	cmp	r3, r2
 80100e4:	d018      	beq.n	8010118 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	4a22      	ldr	r2, [pc, #136]	@ (8010174 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80100ec:	4293      	cmp	r3, r2
 80100ee:	d013      	beq.n	8010118 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	4a18      	ldr	r2, [pc, #96]	@ (8010158 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80100f6:	4293      	cmp	r3, r2
 80100f8:	d00e      	beq.n	8010118 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	4a17      	ldr	r2, [pc, #92]	@ (801015c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8010100:	4293      	cmp	r3, r2
 8010102:	d009      	beq.n	8010118 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4a1b      	ldr	r2, [pc, #108]	@ (8010178 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 801010a:	4293      	cmp	r3, r2
 801010c:	d004      	beq.n	8010118 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	4a1a      	ldr	r2, [pc, #104]	@ (801017c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8010114:	4293      	cmp	r3, r2
 8010116:	d10c      	bne.n	8010132 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801011e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	689b      	ldr	r3, [r3, #8]
 8010124:	68ba      	ldr	r2, [r7, #8]
 8010126:	4313      	orrs	r3, r2
 8010128:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	68ba      	ldr	r2, [r7, #8]
 8010130:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2201      	movs	r2, #1
 8010136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2200      	movs	r2, #0
 801013e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010142:	2300      	movs	r3, #0
}
 8010144:	4618      	mov	r0, r3
 8010146:	3714      	adds	r7, #20
 8010148:	46bd      	mov	sp, r7
 801014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014e:	4770      	bx	lr
 8010150:	40012c00 	.word	0x40012c00
 8010154:	50012c00 	.word	0x50012c00
 8010158:	40013400 	.word	0x40013400
 801015c:	50013400 	.word	0x50013400
 8010160:	40000400 	.word	0x40000400
 8010164:	50000400 	.word	0x50000400
 8010168:	40000800 	.word	0x40000800
 801016c:	50000800 	.word	0x50000800
 8010170:	40000c00 	.word	0x40000c00
 8010174:	50000c00 	.word	0x50000c00
 8010178:	40014000 	.word	0x40014000
 801017c:	50014000 	.word	0x50014000

08010180 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b082      	sub	sp, #8
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d101      	bne.n	8010192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801018e:	2301      	movs	r3, #1
 8010190:	e042      	b.n	8010218 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010198:	2b00      	cmp	r3, #0
 801019a:	d106      	bne.n	80101aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2200      	movs	r2, #0
 80101a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	f7f2 f909 	bl	80023bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2224      	movs	r2, #36	@ 0x24
 80101ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	681a      	ldr	r2, [r3, #0]
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	f022 0201 	bic.w	r2, r2, #1
 80101c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d002      	beq.n	80101d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f000 fd02 	bl	8010bd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80101d0:	6878      	ldr	r0, [r7, #4]
 80101d2:	f000 fb51 	bl	8010878 <UART_SetConfig>
 80101d6:	4603      	mov	r3, r0
 80101d8:	2b01      	cmp	r3, #1
 80101da:	d101      	bne.n	80101e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80101dc:	2301      	movs	r3, #1
 80101de:	e01b      	b.n	8010218 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	685a      	ldr	r2, [r3, #4]
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80101ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	689a      	ldr	r2, [r3, #8]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80101fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	681a      	ldr	r2, [r3, #0]
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	f042 0201 	orr.w	r2, r2, #1
 801020e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f000 fd81 	bl	8010d18 <UART_CheckIdleState>
 8010216:	4603      	mov	r3, r0
}
 8010218:	4618      	mov	r0, r3
 801021a:	3708      	adds	r7, #8
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b0ba      	sub	sp, #232	@ 0xe8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	69db      	ldr	r3, [r3, #28]
 801022e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	689b      	ldr	r3, [r3, #8]
 8010242:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010246:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801024a:	f640 030f 	movw	r3, #2063	@ 0x80f
 801024e:	4013      	ands	r3, r2
 8010250:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010258:	2b00      	cmp	r3, #0
 801025a:	d11b      	bne.n	8010294 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801025c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010260:	f003 0320 	and.w	r3, r3, #32
 8010264:	2b00      	cmp	r3, #0
 8010266:	d015      	beq.n	8010294 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801026c:	f003 0320 	and.w	r3, r3, #32
 8010270:	2b00      	cmp	r3, #0
 8010272:	d105      	bne.n	8010280 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801027c:	2b00      	cmp	r3, #0
 801027e:	d009      	beq.n	8010294 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010284:	2b00      	cmp	r3, #0
 8010286:	f000 82cb 	beq.w	8010820 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	4798      	blx	r3
      }
      return;
 8010292:	e2c5      	b.n	8010820 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010298:	2b00      	cmp	r3, #0
 801029a:	f000 8123 	beq.w	80104e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801029e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80102a2:	4b8d      	ldr	r3, [pc, #564]	@ (80104d8 <HAL_UART_IRQHandler+0x2b8>)
 80102a4:	4013      	ands	r3, r2
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d106      	bne.n	80102b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80102aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80102ae:	4b8b      	ldr	r3, [pc, #556]	@ (80104dc <HAL_UART_IRQHandler+0x2bc>)
 80102b0:	4013      	ands	r3, r2
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	f000 8116 	beq.w	80104e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80102b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102bc:	f003 0301 	and.w	r3, r3, #1
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d011      	beq.n	80102e8 <HAL_UART_IRQHandler+0xc8>
 80102c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80102c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d00b      	beq.n	80102e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	2201      	movs	r2, #1
 80102d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102de:	f043 0201 	orr.w	r2, r3, #1
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102ec:	f003 0302 	and.w	r3, r3, #2
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d011      	beq.n	8010318 <HAL_UART_IRQHandler+0xf8>
 80102f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80102f8:	f003 0301 	and.w	r3, r3, #1
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d00b      	beq.n	8010318 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	2202      	movs	r2, #2
 8010306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801030e:	f043 0204 	orr.w	r2, r3, #4
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801031c:	f003 0304 	and.w	r3, r3, #4
 8010320:	2b00      	cmp	r3, #0
 8010322:	d011      	beq.n	8010348 <HAL_UART_IRQHandler+0x128>
 8010324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010328:	f003 0301 	and.w	r3, r3, #1
 801032c:	2b00      	cmp	r3, #0
 801032e:	d00b      	beq.n	8010348 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	2204      	movs	r2, #4
 8010336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801033e:	f043 0202 	orr.w	r2, r3, #2
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801034c:	f003 0308 	and.w	r3, r3, #8
 8010350:	2b00      	cmp	r3, #0
 8010352:	d017      	beq.n	8010384 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010358:	f003 0320 	and.w	r3, r3, #32
 801035c:	2b00      	cmp	r3, #0
 801035e:	d105      	bne.n	801036c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010360:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010364:	4b5c      	ldr	r3, [pc, #368]	@ (80104d8 <HAL_UART_IRQHandler+0x2b8>)
 8010366:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010368:	2b00      	cmp	r3, #0
 801036a:	d00b      	beq.n	8010384 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	2208      	movs	r2, #8
 8010372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801037a:	f043 0208 	orr.w	r2, r3, #8
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801038c:	2b00      	cmp	r3, #0
 801038e:	d012      	beq.n	80103b6 <HAL_UART_IRQHandler+0x196>
 8010390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010394:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010398:	2b00      	cmp	r3, #0
 801039a:	d00c      	beq.n	80103b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80103a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80103ac:	f043 0220 	orr.w	r2, r3, #32
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80103bc:	2b00      	cmp	r3, #0
 80103be:	f000 8231 	beq.w	8010824 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80103c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80103c6:	f003 0320 	and.w	r3, r3, #32
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d013      	beq.n	80103f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80103ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80103d2:	f003 0320 	and.w	r3, r3, #32
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d105      	bne.n	80103e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80103da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80103de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d007      	beq.n	80103f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d003      	beq.n	80103f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80103fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	689b      	ldr	r3, [r3, #8]
 8010406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801040a:	2b40      	cmp	r3, #64	@ 0x40
 801040c:	d005      	beq.n	801041a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801040e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010412:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010416:	2b00      	cmp	r3, #0
 8010418:	d054      	beq.n	80104c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f000 fd93 	bl	8010f46 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	689b      	ldr	r3, [r3, #8]
 8010426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801042a:	2b40      	cmp	r3, #64	@ 0x40
 801042c:	d146      	bne.n	80104bc <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	3308      	adds	r3, #8
 8010434:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010438:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801043c:	e853 3f00 	ldrex	r3, [r3]
 8010440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010444:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801044c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	3308      	adds	r3, #8
 8010456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801045a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801045e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801046a:	e841 2300 	strex	r3, r2, [r1]
 801046e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010476:	2b00      	cmp	r3, #0
 8010478:	d1d9      	bne.n	801042e <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010480:	2b00      	cmp	r3, #0
 8010482:	d017      	beq.n	80104b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801048a:	4a15      	ldr	r2, [pc, #84]	@ (80104e0 <HAL_UART_IRQHandler+0x2c0>)
 801048c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010494:	4618      	mov	r0, r3
 8010496:	f7f5 fa0d 	bl	80058b4 <HAL_DMA_Abort_IT>
 801049a:	4603      	mov	r3, r0
 801049c:	2b00      	cmp	r3, #0
 801049e:	d019      	beq.n	80104d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80104a8:	687a      	ldr	r2, [r7, #4]
 80104aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80104ae:	4610      	mov	r0, r2
 80104b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104b2:	e00f      	b.n	80104d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f000 f9c9 	bl	801084c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104ba:	e00b      	b.n	80104d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	f000 f9c5 	bl	801084c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104c2:	e007      	b.n	80104d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	f000 f9c1 	bl	801084c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2200      	movs	r2, #0
 80104ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80104d2:	e1a7      	b.n	8010824 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104d4:	bf00      	nop
    return;
 80104d6:	e1a5      	b.n	8010824 <HAL_UART_IRQHandler+0x604>
 80104d8:	10000001 	.word	0x10000001
 80104dc:	04000120 	.word	0x04000120
 80104e0:	08011013 	.word	0x08011013

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80104e8:	2b01      	cmp	r3, #1
 80104ea:	f040 8150 	bne.w	801078e <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80104ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80104f2:	f003 0310 	and.w	r3, r3, #16
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	f000 8149 	beq.w	801078e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80104fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010500:	f003 0310 	and.w	r3, r3, #16
 8010504:	2b00      	cmp	r3, #0
 8010506:	f000 8142 	beq.w	801078e <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	2210      	movs	r2, #16
 8010510:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	689b      	ldr	r3, [r3, #8]
 8010518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801051c:	2b40      	cmp	r3, #64	@ 0x40
 801051e:	f040 80b8 	bne.w	8010692 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801052c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010530:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010534:	2b00      	cmp	r3, #0
 8010536:	f000 8177 	beq.w	8010828 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010540:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010544:	429a      	cmp	r2, r3
 8010546:	f080 816f 	bcs.w	8010828 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010550:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801055a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801055c:	2b81      	cmp	r3, #129	@ 0x81
 801055e:	f000 8087 	beq.w	8010670 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801056a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801056e:	e853 3f00 	ldrex	r3, [r3]
 8010572:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010576:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801057a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801057e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	461a      	mov	r2, r3
 8010588:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801058c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010590:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010594:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010598:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801059c:	e841 2300 	strex	r3, r2, [r1]
 80105a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80105a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d1da      	bne.n	8010562 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	3308      	adds	r3, #8
 80105b2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80105b6:	e853 3f00 	ldrex	r3, [r3]
 80105ba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80105bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80105be:	f023 0301 	bic.w	r3, r3, #1
 80105c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	3308      	adds	r3, #8
 80105cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80105d0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80105d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80105d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80105dc:	e841 2300 	strex	r3, r2, [r1]
 80105e0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80105e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d1e1      	bne.n	80105ac <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	3308      	adds	r3, #8
 80105ee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80105f2:	e853 3f00 	ldrex	r3, [r3]
 80105f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80105f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80105fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80105fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	3308      	adds	r3, #8
 8010608:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801060c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801060e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010610:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010612:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010614:	e841 2300 	strex	r3, r2, [r1]
 8010618:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801061a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801061c:	2b00      	cmp	r3, #0
 801061e:	d1e3      	bne.n	80105e8 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2220      	movs	r2, #32
 8010624:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2200      	movs	r2, #0
 801062c:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010636:	e853 3f00 	ldrex	r3, [r3]
 801063a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801063c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801063e:	f023 0310 	bic.w	r3, r3, #16
 8010642:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	461a      	mov	r2, r3
 801064c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010650:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010652:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010654:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010656:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010658:	e841 2300 	strex	r3, r2, [r1]
 801065c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801065e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010660:	2b00      	cmp	r3, #0
 8010662:	d1e4      	bne.n	801062e <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801066a:	4618      	mov	r0, r3
 801066c:	f7f5 f8a6 	bl	80057bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2202      	movs	r2, #2
 8010674:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010682:	b29b      	uxth	r3, r3
 8010684:	1ad3      	subs	r3, r2, r3
 8010686:	b29b      	uxth	r3, r3
 8010688:	4619      	mov	r1, r3
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f000 f8e8 	bl	8010860 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010690:	e0ca      	b.n	8010828 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801069e:	b29b      	uxth	r3, r3
 80106a0:	1ad3      	subs	r3, r2, r3
 80106a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80106ac:	b29b      	uxth	r3, r3
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	f000 80bc 	beq.w	801082c <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 80106b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	f000 80b7 	beq.w	801082c <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106c6:	e853 3f00 	ldrex	r3, [r3]
 80106ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80106cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80106d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	461a      	mov	r2, r3
 80106dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80106e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80106e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80106e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80106e8:	e841 2300 	strex	r3, r2, [r1]
 80106ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80106ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d1e4      	bne.n	80106be <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	3308      	adds	r3, #8
 80106fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106fe:	e853 3f00 	ldrex	r3, [r3]
 8010702:	623b      	str	r3, [r7, #32]
   return(result);
 8010704:	6a3b      	ldr	r3, [r7, #32]
 8010706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801070a:	f023 0301 	bic.w	r3, r3, #1
 801070e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	3308      	adds	r3, #8
 8010718:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801071c:	633a      	str	r2, [r7, #48]	@ 0x30
 801071e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010720:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010724:	e841 2300 	strex	r3, r2, [r1]
 8010728:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801072a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801072c:	2b00      	cmp	r3, #0
 801072e:	d1e1      	bne.n	80106f4 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2220      	movs	r2, #32
 8010734:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2200      	movs	r2, #0
 801073c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2200      	movs	r2, #0
 8010742:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801074a:	693b      	ldr	r3, [r7, #16]
 801074c:	e853 3f00 	ldrex	r3, [r3]
 8010750:	60fb      	str	r3, [r7, #12]
   return(result);
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	f023 0310 	bic.w	r3, r3, #16
 8010758:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	461a      	mov	r2, r3
 8010762:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010766:	61fb      	str	r3, [r7, #28]
 8010768:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801076a:	69b9      	ldr	r1, [r7, #24]
 801076c:	69fa      	ldr	r2, [r7, #28]
 801076e:	e841 2300 	strex	r3, r2, [r1]
 8010772:	617b      	str	r3, [r7, #20]
   return(result);
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d1e4      	bne.n	8010744 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	2202      	movs	r2, #2
 801077e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010780:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010784:	4619      	mov	r1, r3
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f000 f86a 	bl	8010860 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801078c:	e04e      	b.n	801082c <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801078e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010796:	2b00      	cmp	r3, #0
 8010798:	d014      	beq.n	80107c4 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801079a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801079e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d105      	bne.n	80107b2 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80107a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80107aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d008      	beq.n	80107c4 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d03a      	beq.n	8010830 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	4798      	blx	r3
    }
    return;
 80107c2:	e035      	b.n	8010830 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80107c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80107c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d009      	beq.n	80107e4 <HAL_UART_IRQHandler+0x5c4>
 80107d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80107d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d003      	beq.n	80107e4 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f000 fc2e 	bl	801103e <UART_EndTransmit_IT>
    return;
 80107e2:	e026      	b.n	8010832 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80107e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80107e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d009      	beq.n	8010804 <HAL_UART_IRQHandler+0x5e4>
 80107f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80107f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d003      	beq.n	8010804 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f000 fc53 	bl	80110a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010802:	e016      	b.n	8010832 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010808:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801080c:	2b00      	cmp	r3, #0
 801080e:	d010      	beq.n	8010832 <HAL_UART_IRQHandler+0x612>
 8010810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010814:	2b00      	cmp	r3, #0
 8010816:	da0c      	bge.n	8010832 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f000 fc3b 	bl	8011094 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801081e:	e008      	b.n	8010832 <HAL_UART_IRQHandler+0x612>
      return;
 8010820:	bf00      	nop
 8010822:	e006      	b.n	8010832 <HAL_UART_IRQHandler+0x612>
    return;
 8010824:	bf00      	nop
 8010826:	e004      	b.n	8010832 <HAL_UART_IRQHandler+0x612>
      return;
 8010828:	bf00      	nop
 801082a:	e002      	b.n	8010832 <HAL_UART_IRQHandler+0x612>
      return;
 801082c:	bf00      	nop
 801082e:	e000      	b.n	8010832 <HAL_UART_IRQHandler+0x612>
    return;
 8010830:	bf00      	nop
  }
}
 8010832:	37e8      	adds	r7, #232	@ 0xe8
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010838:	b480      	push	{r7}
 801083a:	b083      	sub	sp, #12
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010840:	bf00      	nop
 8010842:	370c      	adds	r7, #12
 8010844:	46bd      	mov	sp, r7
 8010846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084a:	4770      	bx	lr

0801084c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801084c:	b480      	push	{r7}
 801084e:	b083      	sub	sp, #12
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010854:	bf00      	nop
 8010856:	370c      	adds	r7, #12
 8010858:	46bd      	mov	sp, r7
 801085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085e:	4770      	bx	lr

08010860 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010860:	b480      	push	{r7}
 8010862:	b083      	sub	sp, #12
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	460b      	mov	r3, r1
 801086a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801086c:	bf00      	nop
 801086e:	370c      	adds	r7, #12
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr

08010878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801087c:	b094      	sub	sp, #80	@ 0x50
 801087e:	af00      	add	r7, sp, #0
 8010880:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010882:	2300      	movs	r3, #0
 8010884:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8010888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801088a:	681a      	ldr	r2, [r3, #0]
 801088c:	4b83      	ldr	r3, [pc, #524]	@ (8010a9c <UART_SetConfig+0x224>)
 801088e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010892:	689a      	ldr	r2, [r3, #8]
 8010894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010896:	691b      	ldr	r3, [r3, #16]
 8010898:	431a      	orrs	r2, r3
 801089a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801089c:	695b      	ldr	r3, [r3, #20]
 801089e:	431a      	orrs	r2, r3
 80108a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108a2:	69db      	ldr	r3, [r3, #28]
 80108a4:	4313      	orrs	r3, r2
 80108a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80108a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	497c      	ldr	r1, [pc, #496]	@ (8010aa0 <UART_SetConfig+0x228>)
 80108b0:	4019      	ands	r1, r3
 80108b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b4:	681a      	ldr	r2, [r3, #0]
 80108b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108b8:	430b      	orrs	r3, r1
 80108ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80108bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	685b      	ldr	r3, [r3, #4]
 80108c2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80108c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c8:	68d9      	ldr	r1, [r3, #12]
 80108ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108cc:	681a      	ldr	r2, [r3, #0]
 80108ce:	ea40 0301 	orr.w	r3, r0, r1
 80108d2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80108d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d6:	699b      	ldr	r3, [r3, #24]
 80108d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80108da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	4b6f      	ldr	r3, [pc, #444]	@ (8010a9c <UART_SetConfig+0x224>)
 80108e0:	429a      	cmp	r2, r3
 80108e2:	d009      	beq.n	80108f8 <UART_SetConfig+0x80>
 80108e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108e6:	681a      	ldr	r2, [r3, #0]
 80108e8:	4b6e      	ldr	r3, [pc, #440]	@ (8010aa4 <UART_SetConfig+0x22c>)
 80108ea:	429a      	cmp	r2, r3
 80108ec:	d004      	beq.n	80108f8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80108ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108f0:	6a1a      	ldr	r2, [r3, #32]
 80108f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108f4:	4313      	orrs	r3, r2
 80108f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80108f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	689b      	ldr	r3, [r3, #8]
 80108fe:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8010902:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8010906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010908:	681a      	ldr	r2, [r3, #0]
 801090a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801090c:	430b      	orrs	r3, r1
 801090e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010916:	f023 000f 	bic.w	r0, r3, #15
 801091a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801091c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801091e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010920:	681a      	ldr	r2, [r3, #0]
 8010922:	ea40 0301 	orr.w	r3, r0, r1
 8010926:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801092a:	681a      	ldr	r2, [r3, #0]
 801092c:	4b5e      	ldr	r3, [pc, #376]	@ (8010aa8 <UART_SetConfig+0x230>)
 801092e:	429a      	cmp	r2, r3
 8010930:	d102      	bne.n	8010938 <UART_SetConfig+0xc0>
 8010932:	2301      	movs	r3, #1
 8010934:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010936:	e032      	b.n	801099e <UART_SetConfig+0x126>
 8010938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801093a:	681a      	ldr	r2, [r3, #0]
 801093c:	4b5b      	ldr	r3, [pc, #364]	@ (8010aac <UART_SetConfig+0x234>)
 801093e:	429a      	cmp	r2, r3
 8010940:	d102      	bne.n	8010948 <UART_SetConfig+0xd0>
 8010942:	2302      	movs	r3, #2
 8010944:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010946:	e02a      	b.n	801099e <UART_SetConfig+0x126>
 8010948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801094a:	681a      	ldr	r2, [r3, #0]
 801094c:	4b58      	ldr	r3, [pc, #352]	@ (8010ab0 <UART_SetConfig+0x238>)
 801094e:	429a      	cmp	r2, r3
 8010950:	d102      	bne.n	8010958 <UART_SetConfig+0xe0>
 8010952:	2304      	movs	r3, #4
 8010954:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010956:	e022      	b.n	801099e <UART_SetConfig+0x126>
 8010958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801095a:	681a      	ldr	r2, [r3, #0]
 801095c:	4b55      	ldr	r3, [pc, #340]	@ (8010ab4 <UART_SetConfig+0x23c>)
 801095e:	429a      	cmp	r2, r3
 8010960:	d102      	bne.n	8010968 <UART_SetConfig+0xf0>
 8010962:	2308      	movs	r3, #8
 8010964:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010966:	e01a      	b.n	801099e <UART_SetConfig+0x126>
 8010968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801096a:	681a      	ldr	r2, [r3, #0]
 801096c:	4b52      	ldr	r3, [pc, #328]	@ (8010ab8 <UART_SetConfig+0x240>)
 801096e:	429a      	cmp	r2, r3
 8010970:	d102      	bne.n	8010978 <UART_SetConfig+0x100>
 8010972:	2310      	movs	r3, #16
 8010974:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010976:	e012      	b.n	801099e <UART_SetConfig+0x126>
 8010978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801097a:	681a      	ldr	r2, [r3, #0]
 801097c:	4b4f      	ldr	r3, [pc, #316]	@ (8010abc <UART_SetConfig+0x244>)
 801097e:	429a      	cmp	r2, r3
 8010980:	d103      	bne.n	801098a <UART_SetConfig+0x112>
 8010982:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8010986:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010988:	e009      	b.n	801099e <UART_SetConfig+0x126>
 801098a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801098c:	681a      	ldr	r2, [r3, #0]
 801098e:	4b43      	ldr	r3, [pc, #268]	@ (8010a9c <UART_SetConfig+0x224>)
 8010990:	429a      	cmp	r2, r3
 8010992:	d102      	bne.n	801099a <UART_SetConfig+0x122>
 8010994:	2320      	movs	r3, #32
 8010996:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010998:	e001      	b.n	801099e <UART_SetConfig+0x126>
 801099a:	2300      	movs	r3, #0
 801099c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801099e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109a0:	681a      	ldr	r2, [r3, #0]
 80109a2:	4b3e      	ldr	r3, [pc, #248]	@ (8010a9c <UART_SetConfig+0x224>)
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d005      	beq.n	80109b4 <UART_SetConfig+0x13c>
 80109a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109aa:	681a      	ldr	r2, [r3, #0]
 80109ac:	4b3d      	ldr	r3, [pc, #244]	@ (8010aa4 <UART_SetConfig+0x22c>)
 80109ae:	429a      	cmp	r2, r3
 80109b0:	f040 8088 	bne.w	8010ac4 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80109b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109b6:	2200      	movs	r2, #0
 80109b8:	623b      	str	r3, [r7, #32]
 80109ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80109bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80109c0:	f7fb fdd6 	bl	800c570 <HAL_RCCEx_GetPeriphCLKFreq>
 80109c4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80109c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	f000 80eb 	beq.w	8010ba4 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80109ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109d2:	4a3b      	ldr	r2, [pc, #236]	@ (8010ac0 <UART_SetConfig+0x248>)
 80109d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80109d8:	461a      	mov	r2, r3
 80109da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80109e0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80109e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109e4:	685a      	ldr	r2, [r3, #4]
 80109e6:	4613      	mov	r3, r2
 80109e8:	005b      	lsls	r3, r3, #1
 80109ea:	4413      	add	r3, r2
 80109ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80109ee:	429a      	cmp	r2, r3
 80109f0:	d305      	bcc.n	80109fe <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80109f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109f4:	685b      	ldr	r3, [r3, #4]
 80109f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80109f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d903      	bls.n	8010a06 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 80109fe:	2301      	movs	r3, #1
 8010a00:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010a04:	e048      	b.n	8010a98 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010a06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a08:	2200      	movs	r2, #0
 8010a0a:	61bb      	str	r3, [r7, #24]
 8010a0c:	61fa      	str	r2, [r7, #28]
 8010a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a12:	4a2b      	ldr	r2, [pc, #172]	@ (8010ac0 <UART_SetConfig+0x248>)
 8010a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a18:	b29b      	uxth	r3, r3
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	613b      	str	r3, [r7, #16]
 8010a1e:	617a      	str	r2, [r7, #20]
 8010a20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010a24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010a28:	f7ef fc44 	bl	80002b4 <__aeabi_uldivmod>
 8010a2c:	4602      	mov	r2, r0
 8010a2e:	460b      	mov	r3, r1
 8010a30:	4610      	mov	r0, r2
 8010a32:	4619      	mov	r1, r3
 8010a34:	f04f 0200 	mov.w	r2, #0
 8010a38:	f04f 0300 	mov.w	r3, #0
 8010a3c:	020b      	lsls	r3, r1, #8
 8010a3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010a42:	0202      	lsls	r2, r0, #8
 8010a44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010a46:	6849      	ldr	r1, [r1, #4]
 8010a48:	0849      	lsrs	r1, r1, #1
 8010a4a:	2000      	movs	r0, #0
 8010a4c:	460c      	mov	r4, r1
 8010a4e:	4605      	mov	r5, r0
 8010a50:	eb12 0804 	adds.w	r8, r2, r4
 8010a54:	eb43 0905 	adc.w	r9, r3, r5
 8010a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a5a:	685b      	ldr	r3, [r3, #4]
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	60bb      	str	r3, [r7, #8]
 8010a60:	60fa      	str	r2, [r7, #12]
 8010a62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010a66:	4640      	mov	r0, r8
 8010a68:	4649      	mov	r1, r9
 8010a6a:	f7ef fc23 	bl	80002b4 <__aeabi_uldivmod>
 8010a6e:	4602      	mov	r2, r0
 8010a70:	460b      	mov	r3, r1
 8010a72:	4613      	mov	r3, r2
 8010a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010a7c:	d308      	bcc.n	8010a90 <UART_SetConfig+0x218>
 8010a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010a84:	d204      	bcs.n	8010a90 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8010a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010a8c:	60da      	str	r2, [r3, #12]
 8010a8e:	e003      	b.n	8010a98 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8010a90:	2301      	movs	r3, #1
 8010a92:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8010a96:	e085      	b.n	8010ba4 <UART_SetConfig+0x32c>
 8010a98:	e084      	b.n	8010ba4 <UART_SetConfig+0x32c>
 8010a9a:	bf00      	nop
 8010a9c:	46002400 	.word	0x46002400
 8010aa0:	cfff69f3 	.word	0xcfff69f3
 8010aa4:	56002400 	.word	0x56002400
 8010aa8:	40013800 	.word	0x40013800
 8010aac:	40004400 	.word	0x40004400
 8010ab0:	40004800 	.word	0x40004800
 8010ab4:	40004c00 	.word	0x40004c00
 8010ab8:	40005000 	.word	0x40005000
 8010abc:	40006400 	.word	0x40006400
 8010ac0:	08011cdc 	.word	0x08011cdc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ac6:	69db      	ldr	r3, [r3, #28]
 8010ac8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010acc:	d13c      	bne.n	8010b48 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010ace:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	603b      	str	r3, [r7, #0]
 8010ad4:	607a      	str	r2, [r7, #4]
 8010ad6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010ada:	f7fb fd49 	bl	800c570 <HAL_RCCEx_GetPeriphCLKFreq>
 8010ade:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d05e      	beq.n	8010ba4 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010aea:	4a39      	ldr	r2, [pc, #228]	@ (8010bd0 <UART_SetConfig+0x358>)
 8010aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010af0:	461a      	mov	r2, r3
 8010af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010af4:	fbb3 f3f2 	udiv	r3, r3, r2
 8010af8:	005a      	lsls	r2, r3, #1
 8010afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010afc:	685b      	ldr	r3, [r3, #4]
 8010afe:	085b      	lsrs	r3, r3, #1
 8010b00:	441a      	add	r2, r3
 8010b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b0e:	2b0f      	cmp	r3, #15
 8010b10:	d916      	bls.n	8010b40 <UART_SetConfig+0x2c8>
 8010b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010b18:	d212      	bcs.n	8010b40 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b1c:	b29b      	uxth	r3, r3
 8010b1e:	f023 030f 	bic.w	r3, r3, #15
 8010b22:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b26:	085b      	lsrs	r3, r3, #1
 8010b28:	b29b      	uxth	r3, r3
 8010b2a:	f003 0307 	and.w	r3, r3, #7
 8010b2e:	b29a      	uxth	r2, r3
 8010b30:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010b32:	4313      	orrs	r3, r2
 8010b34:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8010b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010b3c:	60da      	str	r2, [r3, #12]
 8010b3e:	e031      	b.n	8010ba4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8010b40:	2301      	movs	r3, #1
 8010b42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010b46:	e02d      	b.n	8010ba4 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010b48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	469a      	mov	sl, r3
 8010b4e:	4693      	mov	fp, r2
 8010b50:	4650      	mov	r0, sl
 8010b52:	4659      	mov	r1, fp
 8010b54:	f7fb fd0c 	bl	800c570 <HAL_RCCEx_GetPeriphCLKFreq>
 8010b58:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8010b5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d021      	beq.n	8010ba4 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b64:	4a1a      	ldr	r2, [pc, #104]	@ (8010bd0 <UART_SetConfig+0x358>)
 8010b66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b6a:	461a      	mov	r2, r3
 8010b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b74:	685b      	ldr	r3, [r3, #4]
 8010b76:	085b      	lsrs	r3, r3, #1
 8010b78:	441a      	add	r2, r3
 8010b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b7c:	685b      	ldr	r3, [r3, #4]
 8010b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010b84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b86:	2b0f      	cmp	r3, #15
 8010b88:	d909      	bls.n	8010b9e <UART_SetConfig+0x326>
 8010b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010b90:	d205      	bcs.n	8010b9e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b94:	b29a      	uxth	r2, r3
 8010b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	60da      	str	r2, [r3, #12]
 8010b9c:	e002      	b.n	8010ba4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bae:	2201      	movs	r2, #1
 8010bb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010bc0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3750      	adds	r7, #80	@ 0x50
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010bce:	bf00      	nop
 8010bd0:	08011cdc 	.word	0x08011cdc

08010bd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010bd4:	b480      	push	{r7}
 8010bd6:	b083      	sub	sp, #12
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010be0:	f003 0308 	and.w	r3, r3, #8
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d00a      	beq.n	8010bfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	685b      	ldr	r3, [r3, #4]
 8010bee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	430a      	orrs	r2, r1
 8010bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c02:	f003 0301 	and.w	r3, r3, #1
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d00a      	beq.n	8010c20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	685b      	ldr	r3, [r3, #4]
 8010c10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	430a      	orrs	r2, r1
 8010c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c24:	f003 0302 	and.w	r3, r3, #2
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d00a      	beq.n	8010c42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	685b      	ldr	r3, [r3, #4]
 8010c32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	430a      	orrs	r2, r1
 8010c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c46:	f003 0304 	and.w	r3, r3, #4
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d00a      	beq.n	8010c64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	685b      	ldr	r3, [r3, #4]
 8010c54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	430a      	orrs	r2, r1
 8010c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c68:	f003 0310 	and.w	r3, r3, #16
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d00a      	beq.n	8010c86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	689b      	ldr	r3, [r3, #8]
 8010c76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	430a      	orrs	r2, r1
 8010c84:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c8a:	f003 0320 	and.w	r3, r3, #32
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d00a      	beq.n	8010ca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	689b      	ldr	r3, [r3, #8]
 8010c98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	430a      	orrs	r2, r1
 8010ca6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d01a      	beq.n	8010cea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	685b      	ldr	r3, [r3, #4]
 8010cba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	430a      	orrs	r2, r1
 8010cc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010cd2:	d10a      	bne.n	8010cea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	685b      	ldr	r3, [r3, #4]
 8010cda:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	430a      	orrs	r2, r1
 8010ce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d00a      	beq.n	8010d0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	430a      	orrs	r2, r1
 8010d0a:	605a      	str	r2, [r3, #4]
  }
}
 8010d0c:	bf00      	nop
 8010d0e:	370c      	adds	r7, #12
 8010d10:	46bd      	mov	sp, r7
 8010d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d16:	4770      	bx	lr

08010d18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b098      	sub	sp, #96	@ 0x60
 8010d1c:	af02      	add	r7, sp, #8
 8010d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2200      	movs	r2, #0
 8010d24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010d28:	f7f1 ffd8 	bl	8002cdc <HAL_GetTick>
 8010d2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	f003 0308 	and.w	r3, r3, #8
 8010d38:	2b08      	cmp	r3, #8
 8010d3a:	d12f      	bne.n	8010d9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010d3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010d40:	9300      	str	r3, [sp, #0]
 8010d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010d44:	2200      	movs	r2, #0
 8010d46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f000 f88e 	bl	8010e6c <UART_WaitOnFlagUntilTimeout>
 8010d50:	4603      	mov	r3, r0
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d022      	beq.n	8010d9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d5e:	e853 3f00 	ldrex	r3, [r3]
 8010d62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010d6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	461a      	mov	r2, r3
 8010d72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8010d76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010d7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010d7c:	e841 2300 	strex	r3, r2, [r1]
 8010d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d1e6      	bne.n	8010d56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2220      	movs	r2, #32
 8010d8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2200      	movs	r2, #0
 8010d94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010d98:	2303      	movs	r3, #3
 8010d9a:	e063      	b.n	8010e64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	f003 0304 	and.w	r3, r3, #4
 8010da6:	2b04      	cmp	r3, #4
 8010da8:	d149      	bne.n	8010e3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010daa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010dae:	9300      	str	r3, [sp, #0]
 8010db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010db2:	2200      	movs	r2, #0
 8010db4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f000 f857 	bl	8010e6c <UART_WaitOnFlagUntilTimeout>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d03c      	beq.n	8010e3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dcc:	e853 3f00 	ldrex	r3, [r3]
 8010dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8010dd2:	6a3b      	ldr	r3, [r7, #32]
 8010dd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	461a      	mov	r2, r3
 8010de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010de2:	633b      	str	r3, [r7, #48]	@ 0x30
 8010de4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010de6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010de8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010dea:	e841 2300 	strex	r3, r2, [r1]
 8010dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d1e6      	bne.n	8010dc4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	3308      	adds	r3, #8
 8010dfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dfe:	693b      	ldr	r3, [r7, #16]
 8010e00:	e853 3f00 	ldrex	r3, [r3]
 8010e04:	60fb      	str	r3, [r7, #12]
   return(result);
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	f023 0301 	bic.w	r3, r3, #1
 8010e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	3308      	adds	r3, #8
 8010e14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010e16:	61fa      	str	r2, [r7, #28]
 8010e18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e1a:	69b9      	ldr	r1, [r7, #24]
 8010e1c:	69fa      	ldr	r2, [r7, #28]
 8010e1e:	e841 2300 	strex	r3, r2, [r1]
 8010e22:	617b      	str	r3, [r7, #20]
   return(result);
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d1e5      	bne.n	8010df6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2220      	movs	r2, #32
 8010e2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2200      	movs	r2, #0
 8010e36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010e3a:	2303      	movs	r3, #3
 8010e3c:	e012      	b.n	8010e64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2220      	movs	r2, #32
 8010e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	2220      	movs	r2, #32
 8010e4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2200      	movs	r2, #0
 8010e52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2200      	movs	r2, #0
 8010e58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010e62:	2300      	movs	r3, #0
}
 8010e64:	4618      	mov	r0, r3
 8010e66:	3758      	adds	r7, #88	@ 0x58
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}

08010e6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b084      	sub	sp, #16
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	60f8      	str	r0, [r7, #12]
 8010e74:	60b9      	str	r1, [r7, #8]
 8010e76:	603b      	str	r3, [r7, #0]
 8010e78:	4613      	mov	r3, r2
 8010e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010e7c:	e04f      	b.n	8010f1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010e7e:	69bb      	ldr	r3, [r7, #24]
 8010e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e84:	d04b      	beq.n	8010f1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010e86:	f7f1 ff29 	bl	8002cdc <HAL_GetTick>
 8010e8a:	4602      	mov	r2, r0
 8010e8c:	683b      	ldr	r3, [r7, #0]
 8010e8e:	1ad3      	subs	r3, r2, r3
 8010e90:	69ba      	ldr	r2, [r7, #24]
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d302      	bcc.n	8010e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8010e96:	69bb      	ldr	r3, [r7, #24]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d101      	bne.n	8010ea0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010e9c:	2303      	movs	r3, #3
 8010e9e:	e04e      	b.n	8010f3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	f003 0304 	and.w	r3, r3, #4
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d037      	beq.n	8010f1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	2b80      	cmp	r3, #128	@ 0x80
 8010eb2:	d034      	beq.n	8010f1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	2b40      	cmp	r3, #64	@ 0x40
 8010eb8:	d031      	beq.n	8010f1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	69db      	ldr	r3, [r3, #28]
 8010ec0:	f003 0308 	and.w	r3, r3, #8
 8010ec4:	2b08      	cmp	r3, #8
 8010ec6:	d110      	bne.n	8010eea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	2208      	movs	r2, #8
 8010ece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010ed0:	68f8      	ldr	r0, [r7, #12]
 8010ed2:	f000 f838 	bl	8010f46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	2208      	movs	r2, #8
 8010eda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	e029      	b.n	8010f3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	69db      	ldr	r3, [r3, #28]
 8010ef0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010ef4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010ef8:	d111      	bne.n	8010f1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010f02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010f04:	68f8      	ldr	r0, [r7, #12]
 8010f06:	f000 f81e 	bl	8010f46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	2220      	movs	r2, #32
 8010f0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	2200      	movs	r2, #0
 8010f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010f1a:	2303      	movs	r3, #3
 8010f1c:	e00f      	b.n	8010f3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	69da      	ldr	r2, [r3, #28]
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	4013      	ands	r3, r2
 8010f28:	68ba      	ldr	r2, [r7, #8]
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	bf0c      	ite	eq
 8010f2e:	2301      	moveq	r3, #1
 8010f30:	2300      	movne	r3, #0
 8010f32:	b2db      	uxtb	r3, r3
 8010f34:	461a      	mov	r2, r3
 8010f36:	79fb      	ldrb	r3, [r7, #7]
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d0a0      	beq.n	8010e7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010f3c:	2300      	movs	r3, #0
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3710      	adds	r7, #16
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}

08010f46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010f46:	b480      	push	{r7}
 8010f48:	b095      	sub	sp, #84	@ 0x54
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f56:	e853 3f00 	ldrex	r3, [r3]
 8010f5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	461a      	mov	r2, r3
 8010f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8010f6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010f72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010f74:	e841 2300 	strex	r3, r2, [r1]
 8010f78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d1e6      	bne.n	8010f4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	3308      	adds	r3, #8
 8010f86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f88:	6a3b      	ldr	r3, [r7, #32]
 8010f8a:	e853 3f00 	ldrex	r3, [r3]
 8010f8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010f90:	69fb      	ldr	r3, [r7, #28]
 8010f92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010f96:	f023 0301 	bic.w	r3, r3, #1
 8010f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	3308      	adds	r3, #8
 8010fa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010fa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010fac:	e841 2300 	strex	r3, r2, [r1]
 8010fb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d1e3      	bne.n	8010f80 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010fbc:	2b01      	cmp	r3, #1
 8010fbe:	d118      	bne.n	8010ff2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	e853 3f00 	ldrex	r3, [r3]
 8010fcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8010fce:	68bb      	ldr	r3, [r7, #8]
 8010fd0:	f023 0310 	bic.w	r3, r3, #16
 8010fd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	461a      	mov	r2, r3
 8010fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010fde:	61bb      	str	r3, [r7, #24]
 8010fe0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fe2:	6979      	ldr	r1, [r7, #20]
 8010fe4:	69ba      	ldr	r2, [r7, #24]
 8010fe6:	e841 2300 	strex	r3, r2, [r1]
 8010fea:	613b      	str	r3, [r7, #16]
   return(result);
 8010fec:	693b      	ldr	r3, [r7, #16]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d1e6      	bne.n	8010fc0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2220      	movs	r2, #32
 8010ff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2200      	movs	r2, #0
 8011004:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011006:	bf00      	nop
 8011008:	3754      	adds	r7, #84	@ 0x54
 801100a:	46bd      	mov	sp, r7
 801100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011010:	4770      	bx	lr

08011012 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011012:	b580      	push	{r7, lr}
 8011014:	b084      	sub	sp, #16
 8011016:	af00      	add	r7, sp, #0
 8011018:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801101e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	2200      	movs	r2, #0
 8011024:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	2200      	movs	r2, #0
 801102c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011030:	68f8      	ldr	r0, [r7, #12]
 8011032:	f7ff fc0b 	bl	801084c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011036:	bf00      	nop
 8011038:	3710      	adds	r7, #16
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}

0801103e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801103e:	b580      	push	{r7, lr}
 8011040:	b088      	sub	sp, #32
 8011042:	af00      	add	r7, sp, #0
 8011044:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	e853 3f00 	ldrex	r3, [r3]
 8011052:	60bb      	str	r3, [r7, #8]
   return(result);
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801105a:	61fb      	str	r3, [r7, #28]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	461a      	mov	r2, r3
 8011062:	69fb      	ldr	r3, [r7, #28]
 8011064:	61bb      	str	r3, [r7, #24]
 8011066:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011068:	6979      	ldr	r1, [r7, #20]
 801106a:	69ba      	ldr	r2, [r7, #24]
 801106c:	e841 2300 	strex	r3, r2, [r1]
 8011070:	613b      	str	r3, [r7, #16]
   return(result);
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d1e6      	bne.n	8011046 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2220      	movs	r2, #32
 801107c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2200      	movs	r2, #0
 8011084:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f7ff fbd6 	bl	8010838 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801108c:	bf00      	nop
 801108e:	3720      	adds	r7, #32
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}

08011094 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011094:	b480      	push	{r7}
 8011096:	b083      	sub	sp, #12
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801109c:	bf00      	nop
 801109e:	370c      	adds	r7, #12
 80110a0:	46bd      	mov	sp, r7
 80110a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a6:	4770      	bx	lr

080110a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80110a8:	b480      	push	{r7}
 80110aa:	b083      	sub	sp, #12
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80110b0:	bf00      	nop
 80110b2:	370c      	adds	r7, #12
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	4770      	bx	lr

080110bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80110bc:	b480      	push	{r7}
 80110be:	b085      	sub	sp, #20
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80110ca:	2b01      	cmp	r3, #1
 80110cc:	d101      	bne.n	80110d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80110ce:	2302      	movs	r3, #2
 80110d0:	e027      	b.n	8011122 <HAL_UARTEx_DisableFifoMode+0x66>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2201      	movs	r2, #1
 80110d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2224      	movs	r2, #36	@ 0x24
 80110de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	681a      	ldr	r2, [r3, #0]
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	f022 0201 	bic.w	r2, r2, #1
 80110f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011100:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2200      	movs	r2, #0
 8011106:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	68fa      	ldr	r2, [r7, #12]
 801110e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2220      	movs	r2, #32
 8011114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2200      	movs	r2, #0
 801111c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011120:	2300      	movs	r3, #0
}
 8011122:	4618      	mov	r0, r3
 8011124:	3714      	adds	r7, #20
 8011126:	46bd      	mov	sp, r7
 8011128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112c:	4770      	bx	lr

0801112e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801112e:	b580      	push	{r7, lr}
 8011130:	b084      	sub	sp, #16
 8011132:	af00      	add	r7, sp, #0
 8011134:	6078      	str	r0, [r7, #4]
 8011136:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801113e:	2b01      	cmp	r3, #1
 8011140:	d101      	bne.n	8011146 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011142:	2302      	movs	r3, #2
 8011144:	e02d      	b.n	80111a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	2201      	movs	r2, #1
 801114a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2224      	movs	r2, #36	@ 0x24
 8011152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	681a      	ldr	r2, [r3, #0]
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f022 0201 	bic.w	r2, r2, #1
 801116c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	689b      	ldr	r3, [r3, #8]
 8011174:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	683a      	ldr	r2, [r7, #0]
 801117e:	430a      	orrs	r2, r1
 8011180:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f000 f850 	bl	8011228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	68fa      	ldr	r2, [r7, #12]
 801118e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2220      	movs	r2, #32
 8011194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2200      	movs	r2, #0
 801119c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80111a0:	2300      	movs	r3, #0
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	3710      	adds	r7, #16
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}

080111aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80111aa:	b580      	push	{r7, lr}
 80111ac:	b084      	sub	sp, #16
 80111ae:	af00      	add	r7, sp, #0
 80111b0:	6078      	str	r0, [r7, #4]
 80111b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80111ba:	2b01      	cmp	r3, #1
 80111bc:	d101      	bne.n	80111c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80111be:	2302      	movs	r3, #2
 80111c0:	e02d      	b.n	801121e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2201      	movs	r2, #1
 80111c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	2224      	movs	r2, #36	@ 0x24
 80111ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	681a      	ldr	r2, [r3, #0]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	f022 0201 	bic.w	r2, r2, #1
 80111e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	689b      	ldr	r3, [r3, #8]
 80111f0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	683a      	ldr	r2, [r7, #0]
 80111fa:	430a      	orrs	r2, r1
 80111fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f000 f812 	bl	8011228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	68fa      	ldr	r2, [r7, #12]
 801120a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2220      	movs	r2, #32
 8011210:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2200      	movs	r2, #0
 8011218:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801121c:	2300      	movs	r3, #0
}
 801121e:	4618      	mov	r0, r3
 8011220:	3710      	adds	r7, #16
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}
	...

08011228 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011228:	b480      	push	{r7}
 801122a:	b085      	sub	sp, #20
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011234:	2b00      	cmp	r3, #0
 8011236:	d108      	bne.n	801124a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2201      	movs	r2, #1
 801123c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2201      	movs	r2, #1
 8011244:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011248:	e031      	b.n	80112ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801124a:	2308      	movs	r3, #8
 801124c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801124e:	2308      	movs	r3, #8
 8011250:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	689b      	ldr	r3, [r3, #8]
 8011258:	0e5b      	lsrs	r3, r3, #25
 801125a:	b2db      	uxtb	r3, r3
 801125c:	f003 0307 	and.w	r3, r3, #7
 8011260:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	689b      	ldr	r3, [r3, #8]
 8011268:	0f5b      	lsrs	r3, r3, #29
 801126a:	b2db      	uxtb	r3, r3
 801126c:	f003 0307 	and.w	r3, r3, #7
 8011270:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011272:	7bbb      	ldrb	r3, [r7, #14]
 8011274:	7b3a      	ldrb	r2, [r7, #12]
 8011276:	4911      	ldr	r1, [pc, #68]	@ (80112bc <UARTEx_SetNbDataToProcess+0x94>)
 8011278:	5c8a      	ldrb	r2, [r1, r2]
 801127a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801127e:	7b3a      	ldrb	r2, [r7, #12]
 8011280:	490f      	ldr	r1, [pc, #60]	@ (80112c0 <UARTEx_SetNbDataToProcess+0x98>)
 8011282:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011284:	fb93 f3f2 	sdiv	r3, r3, r2
 8011288:	b29a      	uxth	r2, r3
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011290:	7bfb      	ldrb	r3, [r7, #15]
 8011292:	7b7a      	ldrb	r2, [r7, #13]
 8011294:	4909      	ldr	r1, [pc, #36]	@ (80112bc <UARTEx_SetNbDataToProcess+0x94>)
 8011296:	5c8a      	ldrb	r2, [r1, r2]
 8011298:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801129c:	7b7a      	ldrb	r2, [r7, #13]
 801129e:	4908      	ldr	r1, [pc, #32]	@ (80112c0 <UARTEx_SetNbDataToProcess+0x98>)
 80112a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80112a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80112a6:	b29a      	uxth	r2, r3
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80112ae:	bf00      	nop
 80112b0:	3714      	adds	r7, #20
 80112b2:	46bd      	mov	sp, r7
 80112b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b8:	4770      	bx	lr
 80112ba:	bf00      	nop
 80112bc:	08011cf4 	.word	0x08011cf4
 80112c0:	08011cfc 	.word	0x08011cfc

080112c4 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b086      	sub	sp, #24
 80112c8:	af02      	add	r7, sp, #8
 80112ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80112cc:	2300      	movs	r3, #0
 80112ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80112d0:	f7f1 fd04 	bl	8002cdc <HAL_GetTick>
 80112d4:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d102      	bne.n	80112e2 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80112dc:	2301      	movs	r3, #1
 80112de:	73fb      	strb	r3, [r7, #15]
 80112e0:	e137      	b.n	8011552 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	4a76      	ldr	r2, [pc, #472]	@ (80114c0 <HAL_XSPI_Init+0x1fc>)
 80112e8:	4293      	cmp	r3, r2
 80112ea:	d008      	beq.n	80112fe <HAL_XSPI_Init+0x3a>
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	4a74      	ldr	r2, [pc, #464]	@ (80114c4 <HAL_XSPI_Init+0x200>)
 80112f2:	4293      	cmp	r3, r2
 80112f4:	d003      	beq.n	80112fe <HAL_XSPI_Init+0x3a>
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	4a73      	ldr	r2, [pc, #460]	@ (80114c8 <HAL_XSPI_Init+0x204>)
 80112fc:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	4a72      	ldr	r2, [pc, #456]	@ (80114cc <HAL_XSPI_Init+0x208>)
 8011304:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	4a6d      	ldr	r2, [pc, #436]	@ (80114c0 <HAL_XSPI_Init+0x1fc>)
 801130c:	4293      	cmp	r3, r2
 801130e:	d008      	beq.n	8011322 <HAL_XSPI_Init+0x5e>
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	4a6b      	ldr	r2, [pc, #428]	@ (80114c4 <HAL_XSPI_Init+0x200>)
 8011316:	4293      	cmp	r3, r2
 8011318:	d003      	beq.n	8011322 <HAL_XSPI_Init+0x5e>
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	4a6a      	ldr	r2, [pc, #424]	@ (80114c8 <HAL_XSPI_Init+0x204>)
 8011320:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	4a66      	ldr	r2, [pc, #408]	@ (80114c0 <HAL_XSPI_Init+0x1fc>)
 8011328:	4293      	cmp	r3, r2
 801132a:	d008      	beq.n	801133e <HAL_XSPI_Init+0x7a>
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	4a64      	ldr	r2, [pc, #400]	@ (80114c4 <HAL_XSPI_Init+0x200>)
 8011332:	4293      	cmp	r3, r2
 8011334:	d003      	beq.n	801133e <HAL_XSPI_Init+0x7a>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	4a63      	ldr	r2, [pc, #396]	@ (80114c8 <HAL_XSPI_Init+0x204>)
 801133c:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2200      	movs	r2, #0
 8011342:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011348:	2b00      	cmp	r3, #0
 801134a:	f040 8102 	bne.w	8011552 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f7f0 fcc2 	bl	8001cd8 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8011354:	f241 3188 	movw	r1, #5000	@ 0x1388
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	f000 f8ff 	bl	801155c <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	689a      	ldr	r2, [r3, #8]
 8011364:	4b5a      	ldr	r3, [pc, #360]	@ (80114d0 <HAL_XSPI_Init+0x20c>)
 8011366:	4013      	ands	r3, r2
 8011368:	687a      	ldr	r2, [r7, #4]
 801136a:	68d1      	ldr	r1, [r2, #12]
 801136c:	687a      	ldr	r2, [r7, #4]
 801136e:	6912      	ldr	r2, [r2, #16]
 8011370:	0412      	lsls	r2, r2, #16
 8011372:	4311      	orrs	r1, r2
 8011374:	687a      	ldr	r2, [r7, #4]
 8011376:	6952      	ldr	r2, [r2, #20]
 8011378:	3a01      	subs	r2, #1
 801137a:	0212      	lsls	r2, r2, #8
 801137c:	4311      	orrs	r1, r2
 801137e:	687a      	ldr	r2, [r7, #4]
 8011380:	69d2      	ldr	r2, [r2, #28]
 8011382:	4311      	orrs	r1, r2
 8011384:	687a      	ldr	r2, [r7, #4]
 8011386:	6812      	ldr	r2, [r2, #0]
 8011388:	430b      	orrs	r3, r1
 801138a:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	4a4b      	ldr	r2, [pc, #300]	@ (80114c0 <HAL_XSPI_Init+0x1fc>)
 8011392:	4293      	cmp	r3, r2
 8011394:	d00e      	beq.n	80113b4 <HAL_XSPI_Init+0xf0>
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	4a4a      	ldr	r2, [pc, #296]	@ (80114c4 <HAL_XSPI_Init+0x200>)
 801139c:	4293      	cmp	r3, r2
 801139e:	d009      	beq.n	80113b4 <HAL_XSPI_Init+0xf0>
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	4a48      	ldr	r2, [pc, #288]	@ (80114c8 <HAL_XSPI_Init+0x204>)
 80113a6:	4293      	cmp	r3, r2
 80113a8:	d004      	beq.n	80113b4 <HAL_XSPI_Init+0xf0>
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	4a49      	ldr	r2, [pc, #292]	@ (80114d4 <HAL_XSPI_Init+0x210>)
 80113b0:	4293      	cmp	r3, r2
 80113b2:	d10a      	bne.n	80113ca <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	689b      	ldr	r3, [r3, #8]
 80113ba:	f023 0108 	bic.w	r1, r3, #8
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	430a      	orrs	r2, r1
 80113c8:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	68db      	ldr	r3, [r3, #12]
 80113d0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	6a1a      	ldr	r2, [r3, #32]
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	430a      	orrs	r2, r1
 80113de:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	691b      	ldr	r3, [r3, #16]
 80113e6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113ee:	041a      	lsls	r2, r3, #16
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	430a      	orrs	r2, r1
 80113f6:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	4a30      	ldr	r2, [pc, #192]	@ (80114c0 <HAL_XSPI_Init+0x1fc>)
 80113fe:	4293      	cmp	r3, r2
 8011400:	d00e      	beq.n	8011420 <HAL_XSPI_Init+0x15c>
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	4a2f      	ldr	r2, [pc, #188]	@ (80114c4 <HAL_XSPI_Init+0x200>)
 8011408:	4293      	cmp	r3, r2
 801140a:	d009      	beq.n	8011420 <HAL_XSPI_Init+0x15c>
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	4a2d      	ldr	r2, [pc, #180]	@ (80114c8 <HAL_XSPI_Init+0x204>)
 8011412:	4293      	cmp	r3, r2
 8011414:	d004      	beq.n	8011420 <HAL_XSPI_Init+0x15c>
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	4a2e      	ldr	r2, [pc, #184]	@ (80114d4 <HAL_XSPI_Init+0x210>)
 801141c:	4293      	cmp	r3, r2
 801141e:	d10a      	bne.n	8011436 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	691b      	ldr	r3, [r3, #16]
 8011426:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	430a      	orrs	r2, r1
 8011434:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	687a      	ldr	r2, [r7, #4]
 801143c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801143e:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	685b      	ldr	r3, [r3, #4]
 801144e:	3b01      	subs	r3, #1
 8011450:	021a      	lsls	r2, r3, #8
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	430a      	orrs	r2, r1
 8011458:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801145e:	9300      	str	r3, [sp, #0]
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	2200      	movs	r2, #0
 8011464:	2120      	movs	r1, #32
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f000 f887 	bl	801157a <XSPI_WaitFlagStateUntilTimeout>
 801146c:	4603      	mov	r3, r0
 801146e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8011470:	7bfb      	ldrb	r3, [r7, #15]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d16d      	bne.n	8011552 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	68db      	ldr	r3, [r3, #12]
 801147c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	430a      	orrs	r2, r1
 801148a:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	4a0e      	ldr	r2, [pc, #56]	@ (80114cc <HAL_XSPI_Init+0x208>)
 8011492:	4293      	cmp	r3, r2
 8011494:	d004      	beq.n	80114a0 <HAL_XSPI_Init+0x1dc>
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	4a0f      	ldr	r2, [pc, #60]	@ (80114d8 <HAL_XSPI_Init+0x214>)
 801149c:	4293      	cmp	r3, r2
 801149e:	d11d      	bne.n	80114dc <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80114a4:	9300      	str	r3, [sp, #0]
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	2200      	movs	r2, #0
 80114aa:	2120      	movs	r1, #32
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	f000 f864 	bl	801157a <XSPI_WaitFlagStateUntilTimeout>
 80114b2:	4603      	mov	r3, r0
 80114b4:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 80114b6:	7bfb      	ldrb	r3, [r7, #15]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d00f      	beq.n	80114dc <HAL_XSPI_Init+0x218>
          {
            return status;
 80114bc:	7bfb      	ldrb	r3, [r7, #15]
 80114be:	e049      	b.n	8011554 <HAL_XSPI_Init+0x290>
 80114c0:	420d1400 	.word	0x420d1400
 80114c4:	520d1400 	.word	0x520d1400
 80114c8:	420d2400 	.word	0x420d2400
 80114cc:	420d3400 	.word	0x420d3400
 80114d0:	f8e0c0fc 	.word	0xf8e0c0fc
 80114d4:	520d2400 	.word	0x520d2400
 80114d8:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	689a      	ldr	r2, [r3, #8]
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	430a      	orrs	r2, r1
 80114f0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80114fa:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011506:	431a      	orrs	r2, r3
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	430a      	orrs	r2, r1
 801150e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	681a      	ldr	r2, [r3, #0]
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	f042 0201 	orr.w	r2, r2, #1
 8011520:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	699b      	ldr	r3, [r3, #24]
 8011526:	2b02      	cmp	r3, #2
 8011528:	d107      	bne.n	801153a <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	689a      	ldr	r2, [r3, #8]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	f042 0202 	orr.w	r2, r2, #2
 8011538:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	68db      	ldr	r3, [r3, #12]
 801153e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011542:	d103      	bne.n	801154c <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2201      	movs	r2, #1
 8011548:	655a      	str	r2, [r3, #84]	@ 0x54
 801154a:	e002      	b.n	8011552 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2202      	movs	r2, #2
 8011550:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8011552:	7bfb      	ldrb	r3, [r7, #15]
}
 8011554:	4618      	mov	r0, r3
 8011556:	3710      	adds	r7, #16
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}

0801155c <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 801155c:	b480      	push	{r7}
 801155e:	b083      	sub	sp, #12
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
 8011564:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	683a      	ldr	r2, [r7, #0]
 801156a:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 801156c:	2300      	movs	r3, #0
}
 801156e:	4618      	mov	r0, r3
 8011570:	370c      	adds	r7, #12
 8011572:	46bd      	mov	sp, r7
 8011574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011578:	4770      	bx	lr

0801157a <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 801157a:	b580      	push	{r7, lr}
 801157c:	b084      	sub	sp, #16
 801157e:	af00      	add	r7, sp, #0
 8011580:	60f8      	str	r0, [r7, #12]
 8011582:	60b9      	str	r1, [r7, #8]
 8011584:	603b      	str	r3, [r7, #0]
 8011586:	4613      	mov	r3, r2
 8011588:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 801158a:	e01a      	b.n	80115c2 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801158c:	69bb      	ldr	r3, [r7, #24]
 801158e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011592:	d016      	beq.n	80115c2 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011594:	f7f1 fba2 	bl	8002cdc <HAL_GetTick>
 8011598:	4602      	mov	r2, r0
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	1ad3      	subs	r3, r2, r3
 801159e:	69ba      	ldr	r2, [r7, #24]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d302      	bcc.n	80115aa <XSPI_WaitFlagStateUntilTimeout+0x30>
 80115a4:	69bb      	ldr	r3, [r7, #24]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d10b      	bne.n	80115c2 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80115b0:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80115b6:	f043 0201 	orr.w	r2, r3, #1
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 80115be:	2303      	movs	r3, #3
 80115c0:	e00e      	b.n	80115e0 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	6a1a      	ldr	r2, [r3, #32]
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	4013      	ands	r3, r2
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	bf14      	ite	ne
 80115d0:	2301      	movne	r3, #1
 80115d2:	2300      	moveq	r3, #0
 80115d4:	b2db      	uxtb	r3, r3
 80115d6:	461a      	mov	r2, r3
 80115d8:	79fb      	ldrb	r3, [r7, #7]
 80115da:	429a      	cmp	r2, r3
 80115dc:	d1d6      	bne.n	801158c <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80115de:	2300      	movs	r3, #0
}
 80115e0:	4618      	mov	r0, r3
 80115e2:	3710      	adds	r7, #16
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd80      	pop	{r7, pc}

080115e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80115e8:	b084      	sub	sp, #16
 80115ea:	b580      	push	{r7, lr}
 80115ec:	b084      	sub	sp, #16
 80115ee:	af00      	add	r7, sp, #0
 80115f0:	6078      	str	r0, [r7, #4]
 80115f2:	f107 001c 	add.w	r0, r7, #28
 80115f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80115fa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80115fe:	2b03      	cmp	r3, #3
 8011600:	d105      	bne.n	801160e <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	68db      	ldr	r3, [r3, #12]
 8011606:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 801160e:	6878      	ldr	r0, [r7, #4]
 8011610:	f000 fa8e 	bl	8011b30 <USB_CoreReset>
 8011614:	4603      	mov	r3, r0
 8011616:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8011618:	7fbb      	ldrb	r3, [r7, #30]
 801161a:	2b01      	cmp	r3, #1
 801161c:	d10b      	bne.n	8011636 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	689b      	ldr	r3, [r3, #8]
 8011622:	f043 0208 	orr.w	r2, r3, #8
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	689b      	ldr	r3, [r3, #8]
 801162e:	f043 0220 	orr.w	r2, r3, #32
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8011636:	7bfb      	ldrb	r3, [r7, #15]
}
 8011638:	4618      	mov	r0, r3
 801163a:	3710      	adds	r7, #16
 801163c:	46bd      	mov	sp, r7
 801163e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011642:	b004      	add	sp, #16
 8011644:	4770      	bx	lr

08011646 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011646:	b480      	push	{r7}
 8011648:	b083      	sub	sp, #12
 801164a:	af00      	add	r7, sp, #0
 801164c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	689b      	ldr	r3, [r3, #8]
 8011652:	f023 0201 	bic.w	r2, r3, #1
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801165a:	2300      	movs	r3, #0
}
 801165c:	4618      	mov	r0, r3
 801165e:	370c      	adds	r7, #12
 8011660:	46bd      	mov	sp, r7
 8011662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011666:	4770      	bx	lr

08011668 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b084      	sub	sp, #16
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
 8011670:	460b      	mov	r3, r1
 8011672:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011674:	2300      	movs	r3, #0
 8011676:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	68db      	ldr	r3, [r3, #12]
 801167c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011684:	78fb      	ldrb	r3, [r7, #3]
 8011686:	2b01      	cmp	r3, #1
 8011688:	d115      	bne.n	80116b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	68db      	ldr	r3, [r3, #12]
 801168e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011696:	200a      	movs	r0, #10
 8011698:	f7f1 fb2c 	bl	8002cf4 <HAL_Delay>
      ms += 10U;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	330a      	adds	r3, #10
 80116a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80116a2:	6878      	ldr	r0, [r7, #4]
 80116a4:	f000 fa36 	bl	8011b14 <USB_GetMode>
 80116a8:	4603      	mov	r3, r0
 80116aa:	2b01      	cmp	r3, #1
 80116ac:	d01e      	beq.n	80116ec <USB_SetCurrentMode+0x84>
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80116b2:	d9f0      	bls.n	8011696 <USB_SetCurrentMode+0x2e>
 80116b4:	e01a      	b.n	80116ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80116b6:	78fb      	ldrb	r3, [r7, #3]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d115      	bne.n	80116e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	68db      	ldr	r3, [r3, #12]
 80116c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80116c8:	200a      	movs	r0, #10
 80116ca:	f7f1 fb13 	bl	8002cf4 <HAL_Delay>
      ms += 10U;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	330a      	adds	r3, #10
 80116d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f000 fa1d 	bl	8011b14 <USB_GetMode>
 80116da:	4603      	mov	r3, r0
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d005      	beq.n	80116ec <USB_SetCurrentMode+0x84>
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80116e4:	d9f0      	bls.n	80116c8 <USB_SetCurrentMode+0x60>
 80116e6:	e001      	b.n	80116ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80116e8:	2301      	movs	r3, #1
 80116ea:	e005      	b.n	80116f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80116f0:	d101      	bne.n	80116f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80116f2:	2301      	movs	r3, #1
 80116f4:	e000      	b.n	80116f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80116f6:	2300      	movs	r3, #0
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	3710      	adds	r7, #16
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}

08011700 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011700:	b084      	sub	sp, #16
 8011702:	b580      	push	{r7, lr}
 8011704:	b086      	sub	sp, #24
 8011706:	af00      	add	r7, sp, #0
 8011708:	6078      	str	r0, [r7, #4]
 801170a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801170e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011712:	2300      	movs	r3, #0
 8011714:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801171a:	2300      	movs	r3, #0
 801171c:	613b      	str	r3, [r7, #16]
 801171e:	e009      	b.n	8011734 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011720:	687a      	ldr	r2, [r7, #4]
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	3340      	adds	r3, #64	@ 0x40
 8011726:	009b      	lsls	r3, r3, #2
 8011728:	4413      	add	r3, r2
 801172a:	2200      	movs	r2, #0
 801172c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801172e:	693b      	ldr	r3, [r7, #16]
 8011730:	3301      	adds	r3, #1
 8011732:	613b      	str	r3, [r7, #16]
 8011734:	693b      	ldr	r3, [r7, #16]
 8011736:	2b0e      	cmp	r3, #14
 8011738:	d9f2      	bls.n	8011720 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801173e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011746:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801174a:	2b00      	cmp	r3, #0
 801174c:	d11c      	bne.n	8011788 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011754:	685b      	ldr	r3, [r3, #4]
 8011756:	68fa      	ldr	r2, [r7, #12]
 8011758:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801175c:	f043 0302 	orr.w	r3, r3, #2
 8011760:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011766:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011772:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801177e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	639a      	str	r2, [r3, #56]	@ 0x38
 8011786:	e011      	b.n	80117ac <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801178c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011798:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80117b2:	461a      	mov	r2, r3
 80117b4:	2300      	movs	r3, #0
 80117b6:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80117b8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80117bc:	2b03      	cmp	r3, #3
 80117be:	d10d      	bne.n	80117dc <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80117c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d104      	bne.n	80117d2 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80117c8:	2100      	movs	r1, #0
 80117ca:	6878      	ldr	r0, [r7, #4]
 80117cc:	f000 f968 	bl	8011aa0 <USB_SetDevSpeed>
 80117d0:	e008      	b.n	80117e4 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80117d2:	2101      	movs	r1, #1
 80117d4:	6878      	ldr	r0, [r7, #4]
 80117d6:	f000 f963 	bl	8011aa0 <USB_SetDevSpeed>
 80117da:	e003      	b.n	80117e4 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80117dc:	2103      	movs	r1, #3
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f000 f95e 	bl	8011aa0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80117e4:	2110      	movs	r1, #16
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	f000 f8fa 	bl	80119e0 <USB_FlushTxFifo>
 80117ec:	4603      	mov	r3, r0
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d001      	beq.n	80117f6 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 80117f2:	2301      	movs	r3, #1
 80117f4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f000 f924 	bl	8011a44 <USB_FlushRxFifo>
 80117fc:	4603      	mov	r3, r0
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d001      	beq.n	8011806 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8011802:	2301      	movs	r3, #1
 8011804:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801180c:	461a      	mov	r2, r3
 801180e:	2300      	movs	r3, #0
 8011810:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011818:	461a      	mov	r2, r3
 801181a:	2300      	movs	r3, #0
 801181c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011824:	461a      	mov	r2, r3
 8011826:	2300      	movs	r3, #0
 8011828:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801182a:	2300      	movs	r3, #0
 801182c:	613b      	str	r3, [r7, #16]
 801182e:	e043      	b.n	80118b8 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011830:	693b      	ldr	r3, [r7, #16]
 8011832:	015a      	lsls	r2, r3, #5
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	4413      	add	r3, r2
 8011838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011842:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011846:	d118      	bne.n	801187a <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d10a      	bne.n	8011864 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801184e:	693b      	ldr	r3, [r7, #16]
 8011850:	015a      	lsls	r2, r3, #5
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	4413      	add	r3, r2
 8011856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801185a:	461a      	mov	r2, r3
 801185c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011860:	6013      	str	r3, [r2, #0]
 8011862:	e013      	b.n	801188c <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011864:	693b      	ldr	r3, [r7, #16]
 8011866:	015a      	lsls	r2, r3, #5
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	4413      	add	r3, r2
 801186c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011870:	461a      	mov	r2, r3
 8011872:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011876:	6013      	str	r3, [r2, #0]
 8011878:	e008      	b.n	801188c <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801187a:	693b      	ldr	r3, [r7, #16]
 801187c:	015a      	lsls	r2, r3, #5
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	4413      	add	r3, r2
 8011882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011886:	461a      	mov	r2, r3
 8011888:	2300      	movs	r3, #0
 801188a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801188c:	693b      	ldr	r3, [r7, #16]
 801188e:	015a      	lsls	r2, r3, #5
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	4413      	add	r3, r2
 8011894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011898:	461a      	mov	r2, r3
 801189a:	2300      	movs	r3, #0
 801189c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	015a      	lsls	r2, r3, #5
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	4413      	add	r3, r2
 80118a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80118aa:	461a      	mov	r2, r3
 80118ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80118b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80118b2:	693b      	ldr	r3, [r7, #16]
 80118b4:	3301      	adds	r3, #1
 80118b6:	613b      	str	r3, [r7, #16]
 80118b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80118bc:	461a      	mov	r2, r3
 80118be:	693b      	ldr	r3, [r7, #16]
 80118c0:	4293      	cmp	r3, r2
 80118c2:	d3b5      	bcc.n	8011830 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80118c4:	2300      	movs	r3, #0
 80118c6:	613b      	str	r3, [r7, #16]
 80118c8:	e043      	b.n	8011952 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80118ca:	693b      	ldr	r3, [r7, #16]
 80118cc:	015a      	lsls	r2, r3, #5
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	4413      	add	r3, r2
 80118d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80118dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80118e0:	d118      	bne.n	8011914 <USB_DevInit+0x214>
    {
      if (i == 0U)
 80118e2:	693b      	ldr	r3, [r7, #16]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d10a      	bne.n	80118fe <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	015a      	lsls	r2, r3, #5
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	4413      	add	r3, r2
 80118f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118f4:	461a      	mov	r2, r3
 80118f6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80118fa:	6013      	str	r3, [r2, #0]
 80118fc:	e013      	b.n	8011926 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80118fe:	693b      	ldr	r3, [r7, #16]
 8011900:	015a      	lsls	r2, r3, #5
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	4413      	add	r3, r2
 8011906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801190a:	461a      	mov	r2, r3
 801190c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011910:	6013      	str	r3, [r2, #0]
 8011912:	e008      	b.n	8011926 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011914:	693b      	ldr	r3, [r7, #16]
 8011916:	015a      	lsls	r2, r3, #5
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	4413      	add	r3, r2
 801191c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011920:	461a      	mov	r2, r3
 8011922:	2300      	movs	r3, #0
 8011924:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011926:	693b      	ldr	r3, [r7, #16]
 8011928:	015a      	lsls	r2, r3, #5
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	4413      	add	r3, r2
 801192e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011932:	461a      	mov	r2, r3
 8011934:	2300      	movs	r3, #0
 8011936:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011938:	693b      	ldr	r3, [r7, #16]
 801193a:	015a      	lsls	r2, r3, #5
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	4413      	add	r3, r2
 8011940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011944:	461a      	mov	r2, r3
 8011946:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801194a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	3301      	adds	r3, #1
 8011950:	613b      	str	r3, [r7, #16]
 8011952:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011956:	461a      	mov	r2, r3
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	4293      	cmp	r3, r2
 801195c:	d3b5      	bcc.n	80118ca <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011964:	691b      	ldr	r3, [r3, #16]
 8011966:	68fa      	ldr	r2, [r7, #12]
 8011968:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801196c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011970:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2200      	movs	r2, #0
 8011976:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801197e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011980:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011984:	2b00      	cmp	r3, #0
 8011986:	d105      	bne.n	8011994 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	699b      	ldr	r3, [r3, #24]
 801198c:	f043 0210 	orr.w	r2, r3, #16
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	699a      	ldr	r2, [r3, #24]
 8011998:	4b10      	ldr	r3, [pc, #64]	@ (80119dc <USB_DevInit+0x2dc>)
 801199a:	4313      	orrs	r3, r2
 801199c:	687a      	ldr	r2, [r7, #4]
 801199e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80119a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d005      	beq.n	80119b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	699b      	ldr	r3, [r3, #24]
 80119ac:	f043 0208 	orr.w	r2, r3, #8
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80119b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80119b8:	2b01      	cmp	r3, #1
 80119ba:	d107      	bne.n	80119cc <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	699b      	ldr	r3, [r3, #24]
 80119c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80119c4:	f043 0304 	orr.w	r3, r3, #4
 80119c8:	687a      	ldr	r2, [r7, #4]
 80119ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80119cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3718      	adds	r7, #24
 80119d2:	46bd      	mov	sp, r7
 80119d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80119d8:	b004      	add	sp, #16
 80119da:	4770      	bx	lr
 80119dc:	803c3800 	.word	0x803c3800

080119e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80119e0:	b480      	push	{r7}
 80119e2:	b085      	sub	sp, #20
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
 80119e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80119ea:	2300      	movs	r3, #0
 80119ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	3301      	adds	r3, #1
 80119f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80119fa:	d901      	bls.n	8011a00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80119fc:	2303      	movs	r3, #3
 80119fe:	e01b      	b.n	8011a38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	691b      	ldr	r3, [r3, #16]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	daf2      	bge.n	80119ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011a08:	2300      	movs	r3, #0
 8011a0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	019b      	lsls	r3, r3, #6
 8011a10:	f043 0220 	orr.w	r2, r3, #32
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	3301      	adds	r3, #1
 8011a1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011a24:	d901      	bls.n	8011a2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011a26:	2303      	movs	r3, #3
 8011a28:	e006      	b.n	8011a38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	691b      	ldr	r3, [r3, #16]
 8011a2e:	f003 0320 	and.w	r3, r3, #32
 8011a32:	2b20      	cmp	r3, #32
 8011a34:	d0f0      	beq.n	8011a18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011a36:	2300      	movs	r3, #0
}
 8011a38:	4618      	mov	r0, r3
 8011a3a:	3714      	adds	r7, #20
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a42:	4770      	bx	lr

08011a44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011a44:	b480      	push	{r7}
 8011a46:	b085      	sub	sp, #20
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	3301      	adds	r3, #1
 8011a54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011a5c:	d901      	bls.n	8011a62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011a5e:	2303      	movs	r3, #3
 8011a60:	e018      	b.n	8011a94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	691b      	ldr	r3, [r3, #16]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	daf2      	bge.n	8011a50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2210      	movs	r2, #16
 8011a72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	3301      	adds	r3, #1
 8011a78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011a80:	d901      	bls.n	8011a86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011a82:	2303      	movs	r3, #3
 8011a84:	e006      	b.n	8011a94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	691b      	ldr	r3, [r3, #16]
 8011a8a:	f003 0310 	and.w	r3, r3, #16
 8011a8e:	2b10      	cmp	r3, #16
 8011a90:	d0f0      	beq.n	8011a74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011a92:	2300      	movs	r3, #0
}
 8011a94:	4618      	mov	r0, r3
 8011a96:	3714      	adds	r7, #20
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9e:	4770      	bx	lr

08011aa0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011aa0:	b480      	push	{r7}
 8011aa2:	b085      	sub	sp, #20
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ab6:	681a      	ldr	r2, [r3, #0]
 8011ab8:	78fb      	ldrb	r3, [r7, #3]
 8011aba:	68f9      	ldr	r1, [r7, #12]
 8011abc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011ac0:	4313      	orrs	r3, r2
 8011ac2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011ac4:	2300      	movs	r3, #0
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3714      	adds	r7, #20
 8011aca:	46bd      	mov	sp, r7
 8011acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad0:	4770      	bx	lr

08011ad2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011ad2:	b480      	push	{r7}
 8011ad4:	b085      	sub	sp, #20
 8011ad6:	af00      	add	r7, sp, #0
 8011ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	68fa      	ldr	r2, [r7, #12]
 8011ae8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011aec:	f023 0303 	bic.w	r3, r3, #3
 8011af0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011af8:	685b      	ldr	r3, [r3, #4]
 8011afa:	68fa      	ldr	r2, [r7, #12]
 8011afc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011b00:	f043 0302 	orr.w	r3, r3, #2
 8011b04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011b06:	2300      	movs	r3, #0
}
 8011b08:	4618      	mov	r0, r3
 8011b0a:	3714      	adds	r7, #20
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b12:	4770      	bx	lr

08011b14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011b14:	b480      	push	{r7}
 8011b16:	b083      	sub	sp, #12
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	695b      	ldr	r3, [r3, #20]
 8011b20:	f003 0301 	and.w	r3, r3, #1
}
 8011b24:	4618      	mov	r0, r3
 8011b26:	370c      	adds	r7, #12
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2e:	4770      	bx	lr

08011b30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011b30:	b480      	push	{r7}
 8011b32:	b085      	sub	sp, #20
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011b38:	2300      	movs	r3, #0
 8011b3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	3301      	adds	r3, #1
 8011b40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011b48:	d901      	bls.n	8011b4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011b4a:	2303      	movs	r3, #3
 8011b4c:	e01b      	b.n	8011b86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	691b      	ldr	r3, [r3, #16]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	daf2      	bge.n	8011b3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011b56:	2300      	movs	r3, #0
 8011b58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	691b      	ldr	r3, [r3, #16]
 8011b5e:	f043 0201 	orr.w	r2, r3, #1
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	3301      	adds	r3, #1
 8011b6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011b72:	d901      	bls.n	8011b78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011b74:	2303      	movs	r3, #3
 8011b76:	e006      	b.n	8011b86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	691b      	ldr	r3, [r3, #16]
 8011b7c:	f003 0301 	and.w	r3, r3, #1
 8011b80:	2b01      	cmp	r3, #1
 8011b82:	d0f0      	beq.n	8011b66 <USB_CoreReset+0x36>

  return HAL_OK;
 8011b84:	2300      	movs	r3, #0
}
 8011b86:	4618      	mov	r0, r3
 8011b88:	3714      	adds	r7, #20
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b90:	4770      	bx	lr

08011b92 <memset>:
 8011b92:	4402      	add	r2, r0
 8011b94:	4603      	mov	r3, r0
 8011b96:	4293      	cmp	r3, r2
 8011b98:	d100      	bne.n	8011b9c <memset+0xa>
 8011b9a:	4770      	bx	lr
 8011b9c:	f803 1b01 	strb.w	r1, [r3], #1
 8011ba0:	e7f9      	b.n	8011b96 <memset+0x4>
	...

08011ba4 <__libc_init_array>:
 8011ba4:	b570      	push	{r4, r5, r6, lr}
 8011ba6:	4d0d      	ldr	r5, [pc, #52]	@ (8011bdc <__libc_init_array+0x38>)
 8011ba8:	2600      	movs	r6, #0
 8011baa:	4c0d      	ldr	r4, [pc, #52]	@ (8011be0 <__libc_init_array+0x3c>)
 8011bac:	1b64      	subs	r4, r4, r5
 8011bae:	10a4      	asrs	r4, r4, #2
 8011bb0:	42a6      	cmp	r6, r4
 8011bb2:	d109      	bne.n	8011bc8 <__libc_init_array+0x24>
 8011bb4:	4d0b      	ldr	r5, [pc, #44]	@ (8011be4 <__libc_init_array+0x40>)
 8011bb6:	2600      	movs	r6, #0
 8011bb8:	4c0b      	ldr	r4, [pc, #44]	@ (8011be8 <__libc_init_array+0x44>)
 8011bba:	f000 f817 	bl	8011bec <_init>
 8011bbe:	1b64      	subs	r4, r4, r5
 8011bc0:	10a4      	asrs	r4, r4, #2
 8011bc2:	42a6      	cmp	r6, r4
 8011bc4:	d105      	bne.n	8011bd2 <__libc_init_array+0x2e>
 8011bc6:	bd70      	pop	{r4, r5, r6, pc}
 8011bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8011bcc:	3601      	adds	r6, #1
 8011bce:	4798      	blx	r3
 8011bd0:	e7ee      	b.n	8011bb0 <__libc_init_array+0xc>
 8011bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8011bd6:	3601      	adds	r6, #1
 8011bd8:	4798      	blx	r3
 8011bda:	e7f2      	b.n	8011bc2 <__libc_init_array+0x1e>
 8011bdc:	08011d0c 	.word	0x08011d0c
 8011be0:	08011d0c 	.word	0x08011d0c
 8011be4:	08011d0c 	.word	0x08011d0c
 8011be8:	08011d10 	.word	0x08011d10

08011bec <_init>:
 8011bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bee:	bf00      	nop
 8011bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bf2:	bc08      	pop	{r3}
 8011bf4:	469e      	mov	lr, r3
 8011bf6:	4770      	bx	lr

08011bf8 <_fini>:
 8011bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bfa:	bf00      	nop
 8011bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bfe:	bc08      	pop	{r3}
 8011c00:	469e      	mov	lr, r3
 8011c02:	4770      	bx	lr
