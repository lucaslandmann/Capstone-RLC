
Prototype V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104f0  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08010764  08010764  00011764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010864  08010864  00012028  2**0
                  CONTENTS
  4 .ARM          00000008  08010864  08010864  00011864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801086c  0801086c  00012028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801086c  0801086c  0001186c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010870  08010870  00011870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08010874  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e914  20000028  0801089c  00012028  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000e93c  0801089c  0001293c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00012028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d568  00000000  00000000  0001205e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000451e  00000000  00000000  0003f5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002720  00000000  00000000  00043ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ebe  00000000  00000000  00046208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000461ae  00000000  00000000  000480c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030c3d  00000000  00000000  0008e274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001ba66b  00000000  00000000  000beeb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0027951c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad6c  00000000  00000000  00279560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  002842cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	20000028 	.word	0x20000028
 8000290:	00000000 	.word	0x00000000
 8000294:	0801074c 	.word	0x0801074c

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	2000002c 	.word	0x2000002c
 80002b0:	0801074c 	.word	0x0801074c

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f002 f8a5 	bl	8002720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f90b 	bl	80007f0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005da:	f000 f975 	bl	80008c8 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005de:	f000 f9aa 	bl	8000936 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 fe99 	bl	8001318 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005e6:	f000 fba5 	bl	8000d34 <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 80005ea:	f000 fb65 	bl	8000cb8 <MX_DMA2D_Init>
  MX_HSPI1_Init();
 80005ee:	f000 fbd9 	bl	8000da4 <MX_HSPI1_Init>
  MX_I2C2_Init();
 80005f2:	f000 fc55 	bl	8000ea0 <MX_I2C2_Init>
  MX_ICACHE_Init();
 80005f6:	f000 fc93 	bl	8000f20 <MX_ICACHE_Init>
  MX_LTDC_Init();
 80005fa:	f000 fca5 	bl	8000f48 <MX_LTDC_Init>
  MX_RTC_Init();
 80005fe:	f000 fd23 	bl	8001048 <MX_RTC_Init>
  MX_TIM3_Init();
 8000602:	f000 fddb 	bl	80011bc <MX_TIM3_Init>
  MX_ADC1_Init();
 8000606:	f000 f9a5 	bl	8000954 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800060a:	f000 fe39 	bl	8001280 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 800060e:	f000 fd69 	bl	80010e4 <MX_SAI2_Init>
  MX_ADC4_Init();
 8000612:	f000 fad7 	bl	8000bc4 <MX_ADC4_Init>
  MX_I2C1_Init();
 8000616:	f000 fc03 	bl	8000e20 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcGroup1, DIM(adcGroup1)); //Begins DMA transfer for first ADC
 800061a:	220d      	movs	r2, #13
 800061c:	496a      	ldr	r1, [pc, #424]	@ (80007c8 <main+0x1fc>)
 800061e:	486b      	ldr	r0, [pc, #428]	@ (80007cc <main+0x200>)
 8000620:	f002 ffa2 	bl	8003568 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adcGroup4, DIM(adcGroup4)); //begins DMA transfer for fourth ADC
 8000624:	2202      	movs	r2, #2
 8000626:	496a      	ldr	r1, [pc, #424]	@ (80007d0 <main+0x204>)
 8000628:	486a      	ldr	r0, [pc, #424]	@ (80007d4 <main+0x208>)
 800062a:	f002 ff9d 	bl	8003568 <HAL_ADC_Start_DMA>

  HAL_Delay(10);
 800062e:	200a      	movs	r0, #10
 8000630:	f002 f93c 	bl	80028ac <HAL_Delay>
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET); //Powers SHDNZ High to enable PCM6260
 8000634:	2201      	movs	r2, #1
 8000636:	2104      	movs	r1, #4
 8000638:	4867      	ldr	r0, [pc, #412]	@ (80007d8 <main+0x20c>)
 800063a:	f006 fef9 	bl	8007430 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800063e:	200a      	movs	r0, #10
 8000640:	f002 f934 	bl	80028ac <HAL_Delay>

  //Transmits each instruction sequentially from pcm6260Config array
  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	e010      	b.n	800066c <main+0xa0>
  {
	  HAL_I2C_Master_Transmit(&hi2c1, devAddress, pcm6260Config[i], DIM(pcm6260Config[i]), 100);
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4a63      	ldr	r2, [pc, #396]	@ (80007dc <main+0x210>)
 8000650:	441a      	add	r2, r3
 8000652:	2364      	movs	r3, #100	@ 0x64
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2302      	movs	r3, #2
 8000658:	2190      	movs	r1, #144	@ 0x90
 800065a:	4861      	ldr	r0, [pc, #388]	@ (80007e0 <main+0x214>)
 800065c:	f006 ffd8 	bl	8007610 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000660:	200a      	movs	r0, #10
 8000662:	f002 f923 	bl	80028ac <HAL_Delay>
  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	3301      	adds	r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	2b19      	cmp	r3, #25
 8000670:	d9eb      	bls.n	800064a <main+0x7e>
  }

  HAL_Delay(10);
 8000672:	200a      	movs	r0, #10
 8000674:	f002 f91a 	bl	80028ac <HAL_Delay>
  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pcmData, DIM(pcmData)); //Begins DMA transfer for PCM6260
 8000678:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800067c:	4959      	ldr	r1, [pc, #356]	@ (80007e4 <main+0x218>)
 800067e:	485a      	ldr	r0, [pc, #360]	@ (80007e8 <main+0x21c>)
 8000680:	f00d fbf0 	bl	800de64 <HAL_SAI_Receive_DMA>

  //Populates each channel in the channels struct with initializer values
  for(int i = 0; i < sizeof(channels); i++)
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	e095      	b.n	80007b6 <main+0x1ea>
  {
	  for(int s = 0; s < sizeof(channels[i].channelData); s++)
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	e00d      	b.n	80006ac <main+0xe0>
	  {
		  channels[i].channelData[s] = 0;
 8000690:	4956      	ldr	r1, [pc, #344]	@ (80007ec <main+0x220>)
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	f240 420b 	movw	r2, #1035	@ 0x40b
 8000698:	fb03 f202 	mul.w	r2, r3, r2
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	2200      	movs	r2, #0
 80006a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int s = 0; s < sizeof(channels[i].channelData); s++)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	3301      	adds	r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80006b2:	d3ed      	bcc.n	8000690 <main+0xc4>
	  }
	  channels[i].channelNum = i;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	b2d8      	uxtb	r0, r3
 80006b8:	4a4c      	ldr	r2, [pc, #304]	@ (80007ec <main+0x220>)
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	f241 012c 	movw	r1, #4140	@ 0x102c
 80006c0:	fb01 f303 	mul.w	r3, r1, r3
 80006c4:	4413      	add	r3, r2
 80006c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80006ca:	4602      	mov	r2, r0
 80006cc:	701a      	strb	r2, [r3, #0]
	  channels[i].volume = 0.0;
 80006ce:	4a47      	ldr	r2, [pc, #284]	@ (80007ec <main+0x220>)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	f241 012c 	movw	r1, #4140	@ 0x102c
 80006d6:	fb01 f303 	mul.w	r3, r1, r3
 80006da:	4413      	add	r3, r2
 80006dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80006e0:	3304      	adds	r3, #4
 80006e2:	f04f 0200 	mov.w	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
	  channels[i].LRPan = 0.0;
 80006e8:	4a40      	ldr	r2, [pc, #256]	@ (80007ec <main+0x220>)
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	f241 012c 	movw	r1, #4140	@ 0x102c
 80006f0:	fb01 f303 	mul.w	r3, r1, r3
 80006f4:	4413      	add	r3, r2
 80006f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80006fa:	3308      	adds	r3, #8
 80006fc:	f04f 0200 	mov.w	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
	  channels[i].reverbEnable = false;
 8000702:	4a3a      	ldr	r2, [pc, #232]	@ (80007ec <main+0x220>)
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	f241 012c 	movw	r1, #4140	@ 0x102c
 800070a:	fb01 f303 	mul.w	r3, r1, r3
 800070e:	4413      	add	r3, r2
 8000710:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000714:	330c      	adds	r3, #12
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
	  channels[i].EQEnable = false;
 800071a:	4a34      	ldr	r2, [pc, #208]	@ (80007ec <main+0x220>)
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	f241 012c 	movw	r1, #4140	@ 0x102c
 8000722:	fb01 f303 	mul.w	r3, r1, r3
 8000726:	4413      	add	r3, r2
 8000728:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800072c:	330d      	adds	r3, #13
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
	  channels[i].distortionEnable = false;
 8000732:	4a2e      	ldr	r2, [pc, #184]	@ (80007ec <main+0x220>)
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	f241 012c 	movw	r1, #4140	@ 0x102c
 800073a:	fb01 f303 	mul.w	r3, r1, r3
 800073e:	4413      	add	r3, r2
 8000740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000744:	330e      	adds	r3, #14
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
	  channels[i].reverbStrength = 0.0;
 800074a:	4a28      	ldr	r2, [pc, #160]	@ (80007ec <main+0x220>)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	f241 012c 	movw	r1, #4140	@ 0x102c
 8000752:	fb01 f303 	mul.w	r3, r1, r3
 8000756:	4413      	add	r3, r2
 8000758:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800075c:	3310      	adds	r3, #16
 800075e:	f04f 0200 	mov.w	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
	  for(int r = 0; r < sizeof(channels[i].eqLevels);r++)
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	e012      	b.n	8000790 <main+0x1c4>
	  {
		  channels[i].eqLevels[r] = 0.0;
 800076a:	4920      	ldr	r1, [pc, #128]	@ (80007ec <main+0x220>)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	f240 420b 	movw	r2, #1035	@ 0x40b
 8000772:	fb03 f202 	mul.w	r2, r3, r2
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	4413      	add	r3, r2
 800077a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	440b      	add	r3, r1
 8000782:	3304      	adds	r3, #4
 8000784:	f04f 0200 	mov.w	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
	  for(int r = 0; r < sizeof(channels[i].eqLevels);r++)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	3301      	adds	r3, #1
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	2b13      	cmp	r3, #19
 8000794:	d9e9      	bls.n	800076a <main+0x19e>
	  }
	  channels[i].distortionStrength = 0.0;
 8000796:	4a15      	ldr	r2, [pc, #84]	@ (80007ec <main+0x220>)
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	f241 012c 	movw	r1, #4140	@ 0x102c
 800079e:	fb01 f303 	mul.w	r3, r1, r3
 80007a2:	4413      	add	r3, r2
 80007a4:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80007a8:	3308      	adds	r3, #8
 80007aa:	f04f 0200 	mov.w	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < sizeof(channels); i++)
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	3301      	adds	r3, #1
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	f246 1207 	movw	r2, #24839	@ 0x6107
 80007bc:	4293      	cmp	r3, r2
 80007be:	f67f af64 	bls.w	800068a <main+0xbe>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c2:	bf00      	nop
 80007c4:	e7fd      	b.n	80007c2 <main+0x1f6>
 80007c6:	bf00      	nop
 80007c8:	2000080c 	.word	0x2000080c
 80007cc:	20000044 	.word	0x20000044
 80007d0:	20000828 	.word	0x20000828
 80007d4:	200000d0 	.word	0x200000d0
 80007d8:	42021000 	.word	0x42021000
 80007dc:	20000000 	.word	0x20000000
 80007e0:	20000350 	.word	0x20000350
 80007e4:	2000082c 	.word	0x2000082c
 80007e8:	20000568 	.word	0x20000568
 80007ec:	2000882c 	.word	0x2000882c

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b09e      	sub	sp, #120	@ 0x78
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0318 	add.w	r3, r7, #24
 80007fa:	2260      	movs	r2, #96	@ 0x60
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f00f ff78 	bl	80106f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000814:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000818:	f008 fc0e 	bl	8009038 <HAL_PWREx_ControlVoltageScaling>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000822:	f000 febd 	bl	80015a0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000826:	f008 fbf7 	bl	8009018 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800082a:	4b26      	ldr	r3, [pc, #152]	@ (80008c4 <SystemClock_Config+0xd4>)
 800082c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000830:	4a24      	ldr	r2, [pc, #144]	@ (80008c4 <SystemClock_Config+0xd4>)
 8000832:	f023 0318 	bic.w	r3, r3, #24
 8000836:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800083a:	2307      	movs	r3, #7
 800083c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800083e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000842:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000844:	2381      	movs	r3, #129	@ 0x81
 8000846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000848:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084e:	2310      	movs	r3, #16
 8000850:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000852:	2302      	movs	r3, #2
 8000854:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000856:	2303      	movs	r3, #3
 8000858:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800085e:	2301      	movs	r3, #1
 8000860:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000862:	2308      	movs	r3, #8
 8000864:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000866:	2308      	movs	r3, #8
 8000868:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800086a:	2302      	movs	r3, #2
 800086c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800086e:	2301      	movs	r3, #1
 8000870:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000872:	230c      	movs	r3, #12
 8000874:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087a:	f107 0318 	add.w	r3, r7, #24
 800087e:	4618      	mov	r0, r3
 8000880:	f008 fcd6 	bl	8009230 <HAL_RCC_OscConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800088a:	f000 fe89 	bl	80015a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088e:	231f      	movs	r3, #31
 8000890:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000892:	2303      	movs	r3, #3
 8000894:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008a6:	463b      	mov	r3, r7
 80008a8:	2103      	movs	r1, #3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f009 fb9c 	bl	8009fe8 <HAL_RCC_ClockConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008b6:	f000 fe73 	bl	80015a0 <Error_Handler>
  }
}
 80008ba:	bf00      	nop
 80008bc:	3778      	adds	r7, #120	@ 0x78
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	46020c00 	.word	0x46020c00

080008c8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b0b8      	sub	sp, #224	@ 0xe0
 80008cc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ce:	463b      	mov	r3, r7
 80008d0:	22e0      	movs	r2, #224	@ 0xe0
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f00f ff0d 	bl	80106f4 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 80008da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008de:	f04f 0301 	mov.w	r3, #1
 80008e2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 80008e6:	2300      	movs	r3, #0
 80008e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 80008ec:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80008f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 80008f4:	2303      	movs	r3, #3
 80008f6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 9;
 80008fc:	2309      	movs	r3, #9
 80008fe:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 3;
 8000900:	2303      	movs	r3, #3
 8000902:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 8000904:	2303      	movs	r3, #3
 8000906:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 8000908:	2304      	movs	r3, #4
 800090a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 800090c:	230c      	movs	r3, #12
 800090e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 3072;
 8000910:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 8000916:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800091a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800091c:	463b      	mov	r3, r7
 800091e:	4618      	mov	r0, r3
 8000920:	f009 ff32 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 800092a:	f000 fe39 	bl	80015a0 <Error_Handler>
  }
}
 800092e:	bf00      	nop
 8000930:	37e0      	adds	r7, #224	@ 0xe0
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800093a:	f008 fc59 	bl	80091f0 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800093e:	2002      	movs	r0, #2
 8000940:	f008 fc06 	bl	8009150 <HAL_PWREx_ConfigSupply>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemPower_Config+0x18>
  {
    Error_Handler();
 800094a:	f000 fe29 	bl	80015a0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	2220      	movs	r2, #32
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f00f fec7 	bl	80106f4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000966:	4b88      	ldr	r3, [pc, #544]	@ (8000b88 <MX_ADC1_Init+0x234>)
 8000968:	4a88      	ldr	r2, [pc, #544]	@ (8000b8c <MX_ADC1_Init+0x238>)
 800096a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800096c:	4b86      	ldr	r3, [pc, #536]	@ (8000b88 <MX_ADC1_Init+0x234>)
 800096e:	2200      	movs	r2, #0
 8000970:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000972:	4b85      	ldr	r3, [pc, #532]	@ (8000b88 <MX_ADC1_Init+0x234>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000978:	4b83      	ldr	r3, [pc, #524]	@ (8000b88 <MX_ADC1_Init+0x234>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800097e:	4b82      	ldr	r3, [pc, #520]	@ (8000b88 <MX_ADC1_Init+0x234>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000984:	4b80      	ldr	r3, [pc, #512]	@ (8000b88 <MX_ADC1_Init+0x234>)
 8000986:	2201      	movs	r2, #1
 8000988:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800098a:	4b7f      	ldr	r3, [pc, #508]	@ (8000b88 <MX_ADC1_Init+0x234>)
 800098c:	2204      	movs	r2, #4
 800098e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000990:	4b7d      	ldr	r3, [pc, #500]	@ (8000b88 <MX_ADC1_Init+0x234>)
 8000992:	2201      	movs	r2, #1
 8000994:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000996:	4b7c      	ldr	r3, [pc, #496]	@ (8000b88 <MX_ADC1_Init+0x234>)
 8000998:	2201      	movs	r2, #1
 800099a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 800099e:	4b7a      	ldr	r3, [pc, #488]	@ (8000b88 <MX_ADC1_Init+0x234>)
 80009a0:	220d      	movs	r2, #13
 80009a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009a4:	4b78      	ldr	r3, [pc, #480]	@ (8000b88 <MX_ADC1_Init+0x234>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ac:	4b76      	ldr	r3, [pc, #472]	@ (8000b88 <MX_ADC1_Init+0x234>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009b2:	4b75      	ldr	r3, [pc, #468]	@ (8000b88 <MX_ADC1_Init+0x234>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009b8:	4b73      	ldr	r3, [pc, #460]	@ (8000b88 <MX_ADC1_Init+0x234>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80009c0:	4b71      	ldr	r3, [pc, #452]	@ (8000b88 <MX_ADC1_Init+0x234>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009c6:	4b70      	ldr	r3, [pc, #448]	@ (8000b88 <MX_ADC1_Init+0x234>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009cc:	4b6e      	ldr	r3, [pc, #440]	@ (8000b88 <MX_ADC1_Init+0x234>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80009d2:	4b6d      	ldr	r3, [pc, #436]	@ (8000b88 <MX_ADC1_Init+0x234>)
 80009d4:	2203      	movs	r2, #3
 80009d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80009d8:	4b6b      	ldr	r3, [pc, #428]	@ (8000b88 <MX_ADC1_Init+0x234>)
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e0:	4869      	ldr	r0, [pc, #420]	@ (8000b88 <MX_ADC1_Init+0x234>)
 80009e2:	f002 fad9 	bl	8002f98 <HAL_ADC_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80009ec:	f000 fdd8 	bl	80015a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009f0:	4b67      	ldr	r3, [pc, #412]	@ (8000b90 <MX_ADC1_Init+0x23c>)
 80009f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f4:	2306      	movs	r3, #6
 80009f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a00:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a02:	2304      	movs	r3, #4
 8000a04:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	485e      	ldr	r0, [pc, #376]	@ (8000b88 <MX_ADC1_Init+0x234>)
 8000a10:	f003 f9f0 	bl	8003df4 <HAL_ADC_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000a1a:	f000 fdc1 	bl	80015a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a1e:	4b5d      	ldr	r3, [pc, #372]	@ (8000b94 <MX_ADC1_Init+0x240>)
 8000a20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a22:	230c      	movs	r3, #12
 8000a24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a26:	463b      	mov	r3, r7
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4857      	ldr	r0, [pc, #348]	@ (8000b88 <MX_ADC1_Init+0x234>)
 8000a2c:	f003 f9e2 	bl	8003df4 <HAL_ADC_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000a36:	f000 fdb3 	bl	80015a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a3a:	4b57      	ldr	r3, [pc, #348]	@ (8000b98 <MX_ADC1_Init+0x244>)
 8000a3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a3e:	2312      	movs	r3, #18
 8000a40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	4619      	mov	r1, r3
 8000a46:	4850      	ldr	r0, [pc, #320]	@ (8000b88 <MX_ADC1_Init+0x234>)
 8000a48:	f003 f9d4 	bl	8003df4 <HAL_ADC_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000a52:	f000 fda5 	bl	80015a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a56:	4b51      	ldr	r3, [pc, #324]	@ (8000b9c <MX_ADC1_Init+0x248>)
 8000a58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a5a:	2318      	movs	r3, #24
 8000a5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5e:	463b      	mov	r3, r7
 8000a60:	4619      	mov	r1, r3
 8000a62:	4849      	ldr	r0, [pc, #292]	@ (8000b88 <MX_ADC1_Init+0x234>)
 8000a64:	f003 f9c6 	bl	8003df4 <HAL_ADC_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000a6e:	f000 fd97 	bl	80015a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a72:	4b4b      	ldr	r3, [pc, #300]	@ (8000ba0 <MX_ADC1_Init+0x24c>)
 8000a74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4841      	ldr	r0, [pc, #260]	@ (8000b88 <MX_ADC1_Init+0x234>)
 8000a82:	f003 f9b7 	bl	8003df4 <HAL_ADC_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8000a8c:	f000 fd88 	bl	80015a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a90:	4b44      	ldr	r3, [pc, #272]	@ (8000ba4 <MX_ADC1_Init+0x250>)
 8000a92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a94:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000a98:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	483a      	ldr	r0, [pc, #232]	@ (8000b88 <MX_ADC1_Init+0x234>)
 8000aa0:	f003 f9a8 	bl	8003df4 <HAL_ADC_ConfigChannel>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 8000aaa:	f000 fd79 	bl	80015a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000aae:	4b3e      	ldr	r3, [pc, #248]	@ (8000ba8 <MX_ADC1_Init+0x254>)
 8000ab0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000ab2:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000ab6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab8:	463b      	mov	r3, r7
 8000aba:	4619      	mov	r1, r3
 8000abc:	4832      	ldr	r0, [pc, #200]	@ (8000b88 <MX_ADC1_Init+0x234>)
 8000abe:	f003 f999 	bl	8003df4 <HAL_ADC_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC1_Init+0x178>
  {
    Error_Handler();
 8000ac8:	f000 fd6a 	bl	80015a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000acc:	4b37      	ldr	r3, [pc, #220]	@ (8000bac <MX_ADC1_Init+0x258>)
 8000ace:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000ad0:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000ad4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	4619      	mov	r1, r3
 8000ada:	482b      	ldr	r0, [pc, #172]	@ (8000b88 <MX_ADC1_Init+0x234>)
 8000adc:	f003 f98a 	bl	8003df4 <HAL_ADC_ConfigChannel>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 8000ae6:	f000 fd5b 	bl	80015a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000aea:	4b31      	ldr	r3, [pc, #196]	@ (8000bb0 <MX_ADC1_Init+0x25c>)
 8000aec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000aee:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000af2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	4619      	mov	r1, r3
 8000af8:	4823      	ldr	r0, [pc, #140]	@ (8000b88 <MX_ADC1_Init+0x234>)
 8000afa:	f003 f97b 	bl	8003df4 <HAL_ADC_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ADC1_Init+0x1b4>
  {
    Error_Handler();
 8000b04:	f000 fd4c 	bl	80015a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000b08:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb4 <MX_ADC1_Init+0x260>)
 8000b0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000b0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b10:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b12:	463b      	mov	r3, r7
 8000b14:	4619      	mov	r1, r3
 8000b16:	481c      	ldr	r0, [pc, #112]	@ (8000b88 <MX_ADC1_Init+0x234>)
 8000b18:	f003 f96c 	bl	8003df4 <HAL_ADC_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_ADC1_Init+0x1d2>
  {
    Error_Handler();
 8000b22:	f000 fd3d 	bl	80015a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000b26:	4b24      	ldr	r3, [pc, #144]	@ (8000bb8 <MX_ADC1_Init+0x264>)
 8000b28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000b2a:	f240 2306 	movw	r3, #518	@ 0x206
 8000b2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b30:	463b      	mov	r3, r7
 8000b32:	4619      	mov	r1, r3
 8000b34:	4814      	ldr	r0, [pc, #80]	@ (8000b88 <MX_ADC1_Init+0x234>)
 8000b36:	f003 f95d 	bl	8003df4 <HAL_ADC_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_ADC1_Init+0x1f0>
  {
    Error_Handler();
 8000b40:	f000 fd2e 	bl	80015a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000b44:	4b1d      	ldr	r3, [pc, #116]	@ (8000bbc <MX_ADC1_Init+0x268>)
 8000b46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000b48:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000b4c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4e:	463b      	mov	r3, r7
 8000b50:	4619      	mov	r1, r3
 8000b52:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <MX_ADC1_Init+0x234>)
 8000b54:	f003 f94e 	bl	8003df4 <HAL_ADC_ConfigChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8000b5e:	f000 fd1f 	bl	80015a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b62:	4b17      	ldr	r3, [pc, #92]	@ (8000bc0 <MX_ADC1_Init+0x26c>)
 8000b64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000b66:	f240 2312 	movw	r3, #530	@ 0x212
 8000b6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <MX_ADC1_Init+0x234>)
 8000b72:	f003 f93f 	bl	8003df4 <HAL_ADC_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_ADC1_Init+0x22c>
  {
    Error_Handler();
 8000b7c:	f000 fd10 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000044 	.word	0x20000044
 8000b8c:	42028000 	.word	0x42028000
 8000b90:	04000002 	.word	0x04000002
 8000b94:	08000004 	.word	0x08000004
 8000b98:	0c000008 	.word	0x0c000008
 8000b9c:	10000010 	.word	0x10000010
 8000ba0:	14000020 	.word	0x14000020
 8000ba4:	1c000080 	.word	0x1c000080
 8000ba8:	20000100 	.word	0x20000100
 8000bac:	2a000400 	.word	0x2a000400
 8000bb0:	2e000800 	.word	0x2e000800
 8000bb4:	32001000 	.word	0x32001000
 8000bb8:	3e008000 	.word	0x3e008000
 8000bbc:	42010000 	.word	0x42010000
 8000bc0:	ce080000 	.word	0xce080000

08000bc4 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2220      	movs	r2, #32
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f00f fd8f 	bl	80106f4 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000bd6:	4b34      	ldr	r3, [pc, #208]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000bd8:	4a34      	ldr	r2, [pc, #208]	@ (8000cac <MX_ADC4_Init+0xe8>)
 8000bda:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bdc:	4b32      	ldr	r3, [pc, #200]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000be2:	4b31      	ldr	r3, [pc, #196]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000be4:	2204      	movs	r2, #4
 8000be6:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000be8:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8000bee:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000bf0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000bf4:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8000bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000c02:	4b29      	ldr	r3, [pc, #164]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000c08:	4b27      	ldr	r3, [pc, #156]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8000c10:	4b25      	ldr	r3, [pc, #148]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000c12:	2202      	movs	r2, #2
 8000c14:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c16:	4b24      	ldr	r3, [pc, #144]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000c22:	4b21      	ldr	r3, [pc, #132]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000c2c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000c30:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c32:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8000c38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000c44:	4b18      	ldr	r3, [pc, #96]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000c4c:	4816      	ldr	r0, [pc, #88]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000c4e:	f002 f9a3 	bl	8002f98 <HAL_ADC_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8000c58:	f000 fca2 	bl	80015a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <MX_ADC4_Init+0xec>)
 8000c5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c70:	463b      	mov	r3, r7
 8000c72:	4619      	mov	r1, r3
 8000c74:	480c      	ldr	r0, [pc, #48]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000c76:	f003 f8bd 	bl	8003df4 <HAL_ADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC4_Init+0xc0>
  {
    Error_Handler();
 8000c80:	f000 fc8e 	bl	80015a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c84:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <MX_ADC4_Init+0xf0>)
 8000c86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8000c88:	2304      	movs	r3, #4
 8000c8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	@ (8000ca8 <MX_ADC4_Init+0xe4>)
 8000c92:	f003 f8af 	bl	8003df4 <HAL_ADC_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_ADC4_Init+0xdc>
  {
    Error_Handler();
 8000c9c:	f000 fc80 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	3720      	adds	r7, #32
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200000d0 	.word	0x200000d0
 8000cac:	46021000 	.word	0x46021000
 8000cb0:	1c000080 	.word	0x1c000080
 8000cb4:	20000100 	.word	0x20000100

08000cb8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <MX_DMA2D_Init+0x74>)
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8000d30 <MX_DMA2D_Init+0x78>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <MX_DMA2D_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <MX_DMA2D_Init+0x74>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000cce:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <MX_DMA2D_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <MX_DMA2D_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000cda:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <MX_DMA2D_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <MX_DMA2D_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <MX_DMA2D_Init+0x74>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <MX_DMA2D_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <MX_DMA2D_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <MX_DMA2D_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <MX_DMA2D_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d04:	4809      	ldr	r0, [pc, #36]	@ (8000d2c <MX_DMA2D_Init+0x74>)
 8000d06:	f004 ffff 	bl	8005d08 <HAL_DMA2D_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000d10:	f000 fc46 	bl	80015a0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d14:	2101      	movs	r1, #1
 8000d16:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <MX_DMA2D_Init+0x74>)
 8000d18:	f005 f858 	bl	8005dcc <HAL_DMA2D_ConfigLayer>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000d22:	f000 fc3d 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000288 	.word	0x20000288
 8000d30:	4002b000 	.word	0x4002b000

08000d34 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000d3a:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <MX_GPDMA1_Init+0x6c>)
 8000d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d40:	4a17      	ldr	r2, [pc, #92]	@ (8000da0 <MX_GPDMA1_Init+0x6c>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <MX_GPDMA1_Init+0x6c>)
 8000d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	201d      	movs	r0, #29
 8000d5e:	f004 f875 	bl	8004e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000d62:	201d      	movs	r0, #29
 8000d64:	f004 f88c 	bl	8004e80 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	201e      	movs	r0, #30
 8000d6e:	f004 f86d 	bl	8004e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000d72:	201e      	movs	r0, #30
 8000d74:	f004 f884 	bl	8004e80 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	201f      	movs	r0, #31
 8000d7e:	f004 f865 	bl	8004e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000d82:	201f      	movs	r0, #31
 8000d84:	f004 f87c 	bl	8004e80 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2020      	movs	r0, #32
 8000d8e:	f004 f85d 	bl	8004e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8000d92:	2020      	movs	r0, #32
 8000d94:	f004 f874 	bl	8004e80 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	46020c00 	.word	0x46020c00

08000da4 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <MX_HSPI1_Init+0x74>)
 8000daa:	4a1c      	ldr	r2, [pc, #112]	@ (8000e1c <MX_HSPI1_Init+0x78>)
 8000dac:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <MX_HSPI1_Init+0x74>)
 8000db0:	2204      	movs	r2, #4
 8000db2:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000db4:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <MX_HSPI1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000dba:	4b17      	ldr	r3, [pc, #92]	@ (8000e18 <MX_HSPI1_Init+0x74>)
 8000dbc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000dc0:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 8000dc2:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <MX_HSPI1_Init+0x74>)
 8000dc4:	221a      	movs	r2, #26
 8000dc6:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 8000dc8:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <MX_HSPI1_Init+0x74>)
 8000dca:	2202      	movs	r2, #2
 8000dcc:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000dce:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <MX_HSPI1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000dd4:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <MX_HSPI1_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000dda:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <MX_HSPI1_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8000de0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e18 <MX_HSPI1_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000de6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <MX_HSPI1_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8000dec:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <MX_HSPI1_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <MX_HSPI1_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8000df8:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <MX_HSPI1_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <MX_HSPI1_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8000e04:	4804      	ldr	r0, [pc, #16]	@ (8000e18 <MX_HSPI1_Init+0x74>)
 8000e06:	f00f fae3 	bl	80103d0 <HAL_XSPI_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8000e10:	f000 fbc6 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200002f0 	.word	0x200002f0
 8000e1c:	420d3400 	.word	0x420d3400

08000e20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e26:	4a1c      	ldr	r2, [pc, #112]	@ (8000e98 <MX_I2C1_Init+0x78>)
 8000e28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e9c <MX_I2C1_Init+0x7c>)
 8000e2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e30:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e36:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e3c:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e42:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e5a:	480e      	ldr	r0, [pc, #56]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e5c:	f006 fb3c 	bl	80074d8 <HAL_I2C_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e66:	f000 fb9b 	bl	80015a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4809      	ldr	r0, [pc, #36]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e6e:	f007 fcc7 	bl	8008800 <HAL_I2CEx_ConfigAnalogFilter>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e78:	f000 fb92 	bl	80015a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <MX_I2C1_Init+0x74>)
 8000e80:	f007 fd09 	bl	8008896 <HAL_I2CEx_ConfigDigitalFilter>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e8a:	f000 fb89 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000350 	.word	0x20000350
 8000e98:	40005400 	.word	0x40005400
 8000e9c:	20a0c4df 	.word	0x20a0c4df

08000ea0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f14 <MX_I2C2_Init+0x74>)
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f18 <MX_I2C2_Init+0x78>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <MX_I2C2_Init+0x74>)
 8000eac:	4a1b      	ldr	r2, [pc, #108]	@ (8000f1c <MX_I2C2_Init+0x7c>)
 8000eae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	@ (8000f14 <MX_I2C2_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <MX_I2C2_Init+0x74>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <MX_I2C2_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <MX_I2C2_Init+0x74>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <MX_I2C2_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ece:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <MX_I2C2_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <MX_I2C2_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000eda:	480e      	ldr	r0, [pc, #56]	@ (8000f14 <MX_I2C2_Init+0x74>)
 8000edc:	f006 fafc 	bl	80074d8 <HAL_I2C_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ee6:	f000 fb5b 	bl	80015a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eea:	2100      	movs	r1, #0
 8000eec:	4809      	ldr	r0, [pc, #36]	@ (8000f14 <MX_I2C2_Init+0x74>)
 8000eee:	f007 fc87 	bl	8008800 <HAL_I2CEx_ConfigAnalogFilter>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ef8:	f000 fb52 	bl	80015a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000efc:	2100      	movs	r1, #0
 8000efe:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <MX_I2C2_Init+0x74>)
 8000f00:	f007 fcc9 	bl	8008896 <HAL_I2CEx_ConfigDigitalFilter>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f0a:	f000 fb49 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200003a4 	.word	0x200003a4
 8000f18:	40005800 	.word	0x40005800
 8000f1c:	20a0c4df 	.word	0x20a0c4df

08000f20 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000f24:	2000      	movs	r0, #0
 8000f26:	f007 fd03 	bl	8008930 <HAL_ICACHE_ConfigAssociativityMode>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000f30:	f000 fb36 	bl	80015a0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000f34:	f007 fd1c 	bl	8008970 <HAL_ICACHE_Enable>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000f3e:	f000 fb2f 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08e      	sub	sp, #56	@ 0x38
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2234      	movs	r2, #52	@ 0x34
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f00f fbcd 	bl	80106f4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f5a:	4b39      	ldr	r3, [pc, #228]	@ (8001040 <MX_LTDC_Init+0xf8>)
 8000f5c:	4a39      	ldr	r2, [pc, #228]	@ (8001044 <MX_LTDC_Init+0xfc>)
 8000f5e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f60:	4b37      	ldr	r3, [pc, #220]	@ (8001040 <MX_LTDC_Init+0xf8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f66:	4b36      	ldr	r3, [pc, #216]	@ (8001040 <MX_LTDC_Init+0xf8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f6c:	4b34      	ldr	r3, [pc, #208]	@ (8001040 <MX_LTDC_Init+0xf8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f72:	4b33      	ldr	r3, [pc, #204]	@ (8001040 <MX_LTDC_Init+0xf8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8000f78:	4b31      	ldr	r3, [pc, #196]	@ (8001040 <MX_LTDC_Init+0xf8>)
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f7e:	4b30      	ldr	r3, [pc, #192]	@ (8001040 <MX_LTDC_Init+0xf8>)
 8000f80:	2203      	movs	r2, #3
 8000f82:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8000f84:	4b2e      	ldr	r3, [pc, #184]	@ (8001040 <MX_LTDC_Init+0xf8>)
 8000f86:	220b      	movs	r2, #11
 8000f88:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001040 <MX_LTDC_Init+0xf8>)
 8000f8c:	220b      	movs	r2, #11
 8000f8e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8000f90:	4b2b      	ldr	r3, [pc, #172]	@ (8001040 <MX_LTDC_Init+0xf8>)
 8000f92:	f240 322b 	movw	r2, #811	@ 0x32b
 8000f96:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8000f98:	4b29      	ldr	r3, [pc, #164]	@ (8001040 <MX_LTDC_Init+0xf8>)
 8000f9a:	f240 12eb 	movw	r2, #491	@ 0x1eb
 8000f9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8000fa0:	4b27      	ldr	r3, [pc, #156]	@ (8001040 <MX_LTDC_Init+0xf8>)
 8000fa2:	f240 3233 	movw	r2, #819	@ 0x333
 8000fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8000fa8:	4b25      	ldr	r3, [pc, #148]	@ (8001040 <MX_LTDC_Init+0xf8>)
 8000faa:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000fae:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fb0:	4b23      	ldr	r3, [pc, #140]	@ (8001040 <MX_LTDC_Init+0xf8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fb8:	4b21      	ldr	r3, [pc, #132]	@ (8001040 <MX_LTDC_Init+0xf8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001040 <MX_LTDC_Init+0xf8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fc8:	481d      	ldr	r0, [pc, #116]	@ (8001040 <MX_LTDC_Init+0xf8>)
 8000fca:	f007 fce1 	bl	8008990 <HAL_LTDC_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000fd4:	f000 fae4 	bl	80015a0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8000fdc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000fe0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000fe6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000fea:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000fec:	2301      	movs	r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000ff0:	23ff      	movs	r3, #255	@ 0xff
 8000ff2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000ff8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ffc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ffe:	2307      	movs	r3, #7
 8001000:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2200      	movs	r2, #0
 8001024:	4619      	mov	r1, r3
 8001026:	4806      	ldr	r0, [pc, #24]	@ (8001040 <MX_LTDC_Init+0xf8>)
 8001028:	f007 fe44 	bl	8008cb4 <HAL_LTDC_ConfigLayer>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8001032:	f000 fab5 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	3738      	adds	r7, #56	@ 0x38
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200003f8 	.word	0x200003f8
 8001044:	40016800 	.word	0x40016800

08001048 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
 800105c:	615a      	str	r2, [r3, #20]
 800105e:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001060:	4b1e      	ldr	r3, [pc, #120]	@ (80010dc <MX_RTC_Init+0x94>)
 8001062:	4a1f      	ldr	r2, [pc, #124]	@ (80010e0 <MX_RTC_Init+0x98>)
 8001064:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001066:	4b1d      	ldr	r3, [pc, #116]	@ (80010dc <MX_RTC_Init+0x94>)
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800106c:	4b1b      	ldr	r3, [pc, #108]	@ (80010dc <MX_RTC_Init+0x94>)
 800106e:	227f      	movs	r2, #127	@ 0x7f
 8001070:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001072:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <MX_RTC_Init+0x94>)
 8001074:	22ff      	movs	r2, #255	@ 0xff
 8001076:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001078:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <MX_RTC_Init+0x94>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800107e:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <MX_RTC_Init+0x94>)
 8001080:	2200      	movs	r2, #0
 8001082:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001084:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <MX_RTC_Init+0x94>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800108a:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <MX_RTC_Init+0x94>)
 800108c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001090:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001092:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <MX_RTC_Init+0x94>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001098:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <MX_RTC_Init+0x94>)
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800109e:	480f      	ldr	r0, [pc, #60]	@ (80010dc <MX_RTC_Init+0x94>)
 80010a0:	f00c fb6e 	bl	800d780 <HAL_RTC_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80010aa:	f000 fa79 	bl	80015a0 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	4619      	mov	r1, r3
 80010c2:	4806      	ldr	r0, [pc, #24]	@ (80010dc <MX_RTC_Init+0x94>)
 80010c4:	f00c fc8a 	bl	800d9dc <HAL_RTCEx_PrivilegeModeSet>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80010ce:	f000 fa67 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	3720      	adds	r7, #32
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200004a0 	.word	0x200004a0
 80010e0:	46007800 	.word	0x46007800

080010e4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80010e8:	4b2f      	ldr	r3, [pc, #188]	@ (80011a8 <MX_SAI2_Init+0xc4>)
 80010ea:	4a30      	ldr	r2, [pc, #192]	@ (80011ac <MX_SAI2_Init+0xc8>)
 80010ec:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80010ee:	4b2e      	ldr	r3, [pc, #184]	@ (80011a8 <MX_SAI2_Init+0xc4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80010f4:	4b2c      	ldr	r3, [pc, #176]	@ (80011a8 <MX_SAI2_Init+0xc4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010fa:	4b2b      	ldr	r3, [pc, #172]	@ (80011a8 <MX_SAI2_Init+0xc4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001100:	4b29      	ldr	r3, [pc, #164]	@ (80011a8 <MX_SAI2_Init+0xc4>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001106:	4b28      	ldr	r3, [pc, #160]	@ (80011a8 <MX_SAI2_Init+0xc4>)
 8001108:	2200      	movs	r2, #0
 800110a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 800110c:	4b26      	ldr	r3, [pc, #152]	@ (80011a8 <MX_SAI2_Init+0xc4>)
 800110e:	4a28      	ldr	r2, [pc, #160]	@ (80011b0 <MX_SAI2_Init+0xcc>)
 8001110:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001112:	4b25      	ldr	r3, [pc, #148]	@ (80011a8 <MX_SAI2_Init+0xc4>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001118:	4b23      	ldr	r3, [pc, #140]	@ (80011a8 <MX_SAI2_Init+0xc4>)
 800111a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800111e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001120:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <MX_SAI2_Init+0xc4>)
 8001122:	2200      	movs	r2, #0
 8001124:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001126:	4b20      	ldr	r3, [pc, #128]	@ (80011a8 <MX_SAI2_Init+0xc4>)
 8001128:	2200      	movs	r2, #0
 800112a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 800112c:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <MX_SAI2_Init+0xc4>)
 800112e:	2210      	movs	r2, #16
 8001130:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001132:	2302      	movs	r3, #2
 8001134:	2202      	movs	r2, #2
 8001136:	2101      	movs	r1, #1
 8001138:	481b      	ldr	r0, [pc, #108]	@ (80011a8 <MX_SAI2_Init+0xc4>)
 800113a:	f00c fc7d 	bl	800da38 <HAL_SAI_InitProtocol>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_SAI2_Init+0x64>
  {
    Error_Handler();
 8001144:	f000 fa2c 	bl	80015a0 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001148:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <MX_SAI2_Init+0xd0>)
 800114a:	4a1b      	ldr	r2, [pc, #108]	@ (80011b8 <MX_SAI2_Init+0xd4>)
 800114c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 800114e:	4b19      	ldr	r3, [pc, #100]	@ (80011b4 <MX_SAI2_Init+0xd0>)
 8001150:	2201      	movs	r2, #1
 8001152:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001154:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <MX_SAI2_Init+0xd0>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800115a:	4b16      	ldr	r3, [pc, #88]	@ (80011b4 <MX_SAI2_Init+0xd0>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001160:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <MX_SAI2_Init+0xd0>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 8001166:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <MX_SAI2_Init+0xd0>)
 8001168:	2202      	movs	r2, #2
 800116a:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 800116c:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <MX_SAI2_Init+0xd0>)
 800116e:	4a10      	ldr	r2, [pc, #64]	@ (80011b0 <MX_SAI2_Init+0xcc>)
 8001170:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <MX_SAI2_Init+0xd0>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8001178:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_SAI2_Init+0xd0>)
 800117a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800117e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <MX_SAI2_Init+0xd0>)
 8001182:	2200      	movs	r2, #0
 8001184:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001186:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <MX_SAI2_Init+0xd0>)
 8001188:	2200      	movs	r2, #0
 800118a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 800118c:	2308      	movs	r3, #8
 800118e:	2202      	movs	r2, #2
 8001190:	2100      	movs	r1, #0
 8001192:	4808      	ldr	r0, [pc, #32]	@ (80011b4 <MX_SAI2_Init+0xd0>)
 8001194:	f00c fc50 	bl	800da38 <HAL_SAI_InitProtocol>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_SAI2_Init+0xbe>
  {
    Error_Handler();
 800119e:	f000 f9ff 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200004d0 	.word	0x200004d0
 80011ac:	40015804 	.word	0x40015804
 80011b0:	00017700 	.word	0x00017700
 80011b4:	20000568 	.word	0x20000568
 80011b8:	40015824 	.word	0x40015824

080011bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	@ 0x28
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ce:	463b      	mov	r3, r7
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
 80011dc:	615a      	str	r2, [r3, #20]
 80011de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011e0:	4b25      	ldr	r3, [pc, #148]	@ (8001278 <MX_TIM3_Init+0xbc>)
 80011e2:	4a26      	ldr	r2, [pc, #152]	@ (800127c <MX_TIM3_Init+0xc0>)
 80011e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 80011e6:	4b24      	ldr	r3, [pc, #144]	@ (8001278 <MX_TIM3_Init+0xbc>)
 80011e8:	22a0      	movs	r2, #160	@ 0xa0
 80011ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b22      	ldr	r3, [pc, #136]	@ (8001278 <MX_TIM3_Init+0xbc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80011f2:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <MX_TIM3_Init+0xbc>)
 80011f4:	2264      	movs	r2, #100	@ 0x64
 80011f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001278 <MX_TIM3_Init+0xbc>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001278 <MX_TIM3_Init+0xbc>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001204:	481c      	ldr	r0, [pc, #112]	@ (8001278 <MX_TIM3_Init+0xbc>)
 8001206:	f00d f937 	bl	800e478 <HAL_TIM_PWM_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001210:	f000 f9c6 	bl	80015a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	4815      	ldr	r0, [pc, #84]	@ (8001278 <MX_TIM3_Init+0xbc>)
 8001224:	f00d ff70 	bl	800f108 <HAL_TIMEx_MasterConfigSynchronization>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800122e:	f000 f9b7 	bl	80015a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001232:	2360      	movs	r3, #96	@ 0x60
 8001234:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 8001236:	234b      	movs	r3, #75	@ 0x4b
 8001238:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001242:	463b      	mov	r3, r7
 8001244:	220c      	movs	r2, #12
 8001246:	4619      	mov	r1, r3
 8001248:	480b      	ldr	r0, [pc, #44]	@ (8001278 <MX_TIM3_Init+0xbc>)
 800124a:	f00d f96d 	bl	800e528 <HAL_TIM_PWM_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001254:	f000 f9a4 	bl	80015a0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 8001258:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <MX_TIM3_Init+0xbc>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	69da      	ldr	r2, [r3, #28]
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <MX_TIM3_Init+0xbc>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001266:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001268:	4803      	ldr	r0, [pc, #12]	@ (8001278 <MX_TIM3_Init+0xbc>)
 800126a:	f000 ff1d 	bl	80020a8 <HAL_TIM_MspPostInit>

}
 800126e:	bf00      	nop
 8001270:	3728      	adds	r7, #40	@ 0x28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000072c 	.word	0x2000072c
 800127c:	40000400 	.word	0x40000400

08001280 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001284:	4b22      	ldr	r3, [pc, #136]	@ (8001310 <MX_USART1_UART_Init+0x90>)
 8001286:	4a23      	ldr	r2, [pc, #140]	@ (8001314 <MX_USART1_UART_Init+0x94>)
 8001288:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800128a:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <MX_USART1_UART_Init+0x90>)
 800128c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001290:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <MX_USART1_UART_Init+0x90>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b1d      	ldr	r3, [pc, #116]	@ (8001310 <MX_USART1_UART_Init+0x90>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800129e:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <MX_USART1_UART_Init+0x90>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <MX_USART1_UART_Init+0x90>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <MX_USART1_UART_Init+0x90>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <MX_USART1_UART_Init+0x90>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b6:	4b16      	ldr	r3, [pc, #88]	@ (8001310 <MX_USART1_UART_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <MX_USART1_UART_Init+0x90>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <MX_USART1_UART_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012c8:	4811      	ldr	r0, [pc, #68]	@ (8001310 <MX_USART1_UART_Init+0x90>)
 80012ca:	f00d ffdf 	bl	800f28c <HAL_UART_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80012d4:	f000 f964 	bl	80015a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d8:	2100      	movs	r1, #0
 80012da:	480d      	ldr	r0, [pc, #52]	@ (8001310 <MX_USART1_UART_Init+0x90>)
 80012dc:	f00e ffad 	bl	801023a <HAL_UARTEx_SetTxFifoThreshold>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012e6:	f000 f95b 	bl	80015a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ea:	2100      	movs	r1, #0
 80012ec:	4808      	ldr	r0, [pc, #32]	@ (8001310 <MX_USART1_UART_Init+0x90>)
 80012ee:	f00e ffe2 	bl	80102b6 <HAL_UARTEx_SetRxFifoThreshold>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012f8:	f000 f952 	bl	80015a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	@ (8001310 <MX_USART1_UART_Init+0x90>)
 80012fe:	f00e ff63 	bl	80101c8 <HAL_UARTEx_DisableFifoMode>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001308:	f000 f94a 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000778 	.word	0x20000778
 8001314:	40013800 	.word	0x40013800

08001318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08e      	sub	sp, #56	@ 0x38
 800131c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800132e:	4b93      	ldr	r3, [pc, #588]	@ (800157c <MX_GPIO_Init+0x264>)
 8001330:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001334:	4a91      	ldr	r2, [pc, #580]	@ (800157c <MX_GPIO_Init+0x264>)
 8001336:	f043 0310 	orr.w	r3, r3, #16
 800133a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800133e:	4b8f      	ldr	r3, [pc, #572]	@ (800157c <MX_GPIO_Init+0x264>)
 8001340:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001344:	f003 0310 	and.w	r3, r3, #16
 8001348:	623b      	str	r3, [r7, #32]
 800134a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134c:	4b8b      	ldr	r3, [pc, #556]	@ (800157c <MX_GPIO_Init+0x264>)
 800134e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001352:	4a8a      	ldr	r2, [pc, #552]	@ (800157c <MX_GPIO_Init+0x264>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800135c:	4b87      	ldr	r3, [pc, #540]	@ (800157c <MX_GPIO_Init+0x264>)
 800135e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	61fb      	str	r3, [r7, #28]
 8001368:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136a:	4b84      	ldr	r3, [pc, #528]	@ (800157c <MX_GPIO_Init+0x264>)
 800136c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001370:	4a82      	ldr	r2, [pc, #520]	@ (800157c <MX_GPIO_Init+0x264>)
 8001372:	f043 0320 	orr.w	r3, r3, #32
 8001376:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800137a:	4b80      	ldr	r3, [pc, #512]	@ (800157c <MX_GPIO_Init+0x264>)
 800137c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001380:	f003 0320 	and.w	r3, r3, #32
 8001384:	61bb      	str	r3, [r7, #24]
 8001386:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001388:	4b7c      	ldr	r3, [pc, #496]	@ (800157c <MX_GPIO_Init+0x264>)
 800138a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800138e:	4a7b      	ldr	r2, [pc, #492]	@ (800157c <MX_GPIO_Init+0x264>)
 8001390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001394:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001398:	4b78      	ldr	r3, [pc, #480]	@ (800157c <MX_GPIO_Init+0x264>)
 800139a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800139e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	4b75      	ldr	r3, [pc, #468]	@ (800157c <MX_GPIO_Init+0x264>)
 80013a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ac:	4a73      	ldr	r2, [pc, #460]	@ (800157c <MX_GPIO_Init+0x264>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013b6:	4b71      	ldr	r3, [pc, #452]	@ (800157c <MX_GPIO_Init+0x264>)
 80013b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c4:	4b6d      	ldr	r3, [pc, #436]	@ (800157c <MX_GPIO_Init+0x264>)
 80013c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ca:	4a6c      	ldr	r2, [pc, #432]	@ (800157c <MX_GPIO_Init+0x264>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013d4:	4b69      	ldr	r3, [pc, #420]	@ (800157c <MX_GPIO_Init+0x264>)
 80013d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013e2:	4b66      	ldr	r3, [pc, #408]	@ (800157c <MX_GPIO_Init+0x264>)
 80013e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013e8:	4a64      	ldr	r2, [pc, #400]	@ (800157c <MX_GPIO_Init+0x264>)
 80013ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013f2:	4b62      	ldr	r3, [pc, #392]	@ (800157c <MX_GPIO_Init+0x264>)
 80013f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001400:	4b5e      	ldr	r3, [pc, #376]	@ (800157c <MX_GPIO_Init+0x264>)
 8001402:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001406:	4a5d      	ldr	r2, [pc, #372]	@ (800157c <MX_GPIO_Init+0x264>)
 8001408:	f043 0308 	orr.w	r3, r3, #8
 800140c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001410:	4b5a      	ldr	r3, [pc, #360]	@ (800157c <MX_GPIO_Init+0x264>)
 8001412:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800141e:	4b57      	ldr	r3, [pc, #348]	@ (800157c <MX_GPIO_Init+0x264>)
 8001420:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001424:	4a55      	ldr	r2, [pc, #340]	@ (800157c <MX_GPIO_Init+0x264>)
 8001426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800142a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800142e:	4b53      	ldr	r3, [pc, #332]	@ (800157c <MX_GPIO_Init+0x264>)
 8001430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	2104      	movs	r1, #4
 8001440:	484f      	ldr	r0, [pc, #316]	@ (8001580 <MX_GPIO_Init+0x268>)
 8001442:	f005 fff5 	bl	8007430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 8001446:	2201      	movs	r2, #1
 8001448:	2110      	movs	r1, #16
 800144a:	484d      	ldr	r0, [pc, #308]	@ (8001580 <MX_GPIO_Init+0x268>)
 800144c:	f005 fff0 	bl	8007430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	2114      	movs	r1, #20
 8001454:	484b      	ldr	r0, [pc, #300]	@ (8001584 <MX_GPIO_Init+0x26c>)
 8001456:	f005 ffeb 	bl	8007430 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 800145a:	2314      	movs	r3, #20
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800146a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800146e:	4619      	mov	r1, r3
 8001470:	4843      	ldr	r0, [pc, #268]	@ (8001580 <MX_GPIO_Init+0x268>)
 8001472:	f005 fe05 	bl	8007080 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001476:	2320      	movs	r3, #32
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800147a:	4b43      	ldr	r3, [pc, #268]	@ (8001588 <MX_GPIO_Init+0x270>)
 800147c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001482:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001486:	4619      	mov	r1, r3
 8001488:	483d      	ldr	r0, [pc, #244]	@ (8001580 <MX_GPIO_Init+0x268>)
 800148a:	f005 fdf9 	bl	8007080 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 800148e:	2302      	movs	r3, #2
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001492:	4b3e      	ldr	r3, [pc, #248]	@ (800158c <MX_GPIO_Init+0x274>)
 8001494:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 800149a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800149e:	4619      	mov	r1, r3
 80014a0:	483b      	ldr	r0, [pc, #236]	@ (8001590 <MX_GPIO_Init+0x278>)
 80014a2:	f005 fded 	bl	8007080 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 80014a6:	2310      	movs	r3, #16
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001594 <MX_GPIO_Init+0x27c>)
 80014ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 80014b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b6:	4619      	mov	r1, r3
 80014b8:	4835      	ldr	r0, [pc, #212]	@ (8001590 <MX_GPIO_Init+0x278>)
 80014ba:	f005 fde1 	bl	8007080 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80014be:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d4:	4619      	mov	r1, r3
 80014d6:	482e      	ldr	r0, [pc, #184]	@ (8001590 <MX_GPIO_Init+0x278>)
 80014d8:	f005 fdd2 	bl	8007080 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 80014dc:	2314      	movs	r3, #20
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f0:	4619      	mov	r1, r3
 80014f2:	4824      	ldr	r0, [pc, #144]	@ (8001584 <MX_GPIO_Init+0x26c>)
 80014f4:	f005 fdc4 	bl	8007080 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 80014f8:	2380      	movs	r3, #128	@ 0x80
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 8001504:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001508:	4619      	mov	r1, r3
 800150a:	481e      	ldr	r0, [pc, #120]	@ (8001584 <MX_GPIO_Init+0x26c>)
 800150c:	f005 fdb8 	bl	8007080 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 8001510:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001516:	2300      	movs	r3, #0
 8001518:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800151e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001522:	4619      	mov	r1, r3
 8001524:	481c      	ldr	r0, [pc, #112]	@ (8001598 <MX_GPIO_Init+0x280>)
 8001526:	f005 fdab 	bl	8007080 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 800152a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800152e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800153c:	4619      	mov	r1, r3
 800153e:	4817      	ldr	r0, [pc, #92]	@ (800159c <MX_GPIO_Init+0x284>)
 8001540:	f005 fd9e 	bl	8007080 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	2100      	movs	r1, #0
 8001548:	200c      	movs	r0, #12
 800154a:	f003 fc7f 	bl	8004e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800154e:	200c      	movs	r0, #12
 8001550:	f003 fc96 	bl	8004e80 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2100      	movs	r1, #0
 8001558:	200f      	movs	r0, #15
 800155a:	f003 fc77 	bl	8004e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800155e:	200f      	movs	r0, #15
 8001560:	f003 fc8e 	bl	8004e80 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	2100      	movs	r1, #0
 8001568:	2010      	movs	r0, #16
 800156a:	f003 fc6f 	bl	8004e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 800156e:	2010      	movs	r0, #16
 8001570:	f003 fc86 	bl	8004e80 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001574:	bf00      	nop
 8001576:	3738      	adds	r7, #56	@ 0x38
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	46020c00 	.word	0x46020c00
 8001580:	42021000 	.word	0x42021000
 8001584:	42020c00 	.word	0x42020c00
 8001588:	10110000 	.word	0x10110000
 800158c:	10310000 	.word	0x10310000
 8001590:	42020000 	.word	0x42020000
 8001594:	10210000 	.word	0x10210000
 8001598:	42021800 	.word	0x42021800
 800159c:	42020400 	.word	0x42020400

080015a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <Error_Handler+0x8>

080015ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <HAL_MspInit+0x30>)
 80015b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015b8:	4a08      	ldr	r2, [pc, #32]	@ (80015dc <HAL_MspInit+0x30>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <HAL_MspInit+0x30>)
 80015c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 80015d0:	f007 fe1e 	bl	8009210 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	46020c00 	.word	0x46020c00

080015e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b0e0      	sub	sp, #384	@ 0x180
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80015ea:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80015ee:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001600:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001604:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001608:	4618      	mov	r0, r3
 800160a:	23e0      	movs	r3, #224	@ 0xe0
 800160c:	461a      	mov	r2, r3
 800160e:	2100      	movs	r1, #0
 8001610:	f00f f870 	bl	80106f4 <memset>
  if(hadc->Instance==ADC1)
 8001614:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001618:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a9d      	ldr	r2, [pc, #628]	@ (8001898 <HAL_ADC_MspInit+0x2b8>)
 8001622:	4293      	cmp	r3, r2
 8001624:	f040 814a 	bne.w	80018bc <HAL_ADC_MspInit+0x2dc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001628:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800162c:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001630:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800163c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001640:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001644:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001648:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800164c:	f107 0320 	add.w	r3, r7, #32
 8001650:	4618      	mov	r0, r3
 8001652:	f009 f899 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 800165c:	f7ff ffa0 	bl	80015a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001660:	4b8e      	ldr	r3, [pc, #568]	@ (800189c <HAL_ADC_MspInit+0x2bc>)
 8001662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001666:	4a8d      	ldr	r2, [pc, #564]	@ (800189c <HAL_ADC_MspInit+0x2bc>)
 8001668:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800166c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001670:	4b8a      	ldr	r3, [pc, #552]	@ (800189c <HAL_ADC_MspInit+0x2bc>)
 8001672:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001676:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800167a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800167e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001688:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800168c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800168e:	4b83      	ldr	r3, [pc, #524]	@ (800189c <HAL_ADC_MspInit+0x2bc>)
 8001690:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001694:	4a81      	ldr	r2, [pc, #516]	@ (800189c <HAL_ADC_MspInit+0x2bc>)
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800169e:	4b7f      	ldr	r3, [pc, #508]	@ (800189c <HAL_ADC_MspInit+0x2bc>)
 80016a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016a4:	f003 0204 	and.w	r2, r3, #4
 80016a8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80016ac:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80016b6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80016ba:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016bc:	4b77      	ldr	r3, [pc, #476]	@ (800189c <HAL_ADC_MspInit+0x2bc>)
 80016be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016c2:	4a76      	ldr	r2, [pc, #472]	@ (800189c <HAL_ADC_MspInit+0x2bc>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016cc:	4b73      	ldr	r3, [pc, #460]	@ (800189c <HAL_ADC_MspInit+0x2bc>)
 80016ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016d2:	f003 0201 	and.w	r2, r3, #1
 80016d6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80016da:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80016e4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80016e8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	4b6c      	ldr	r3, [pc, #432]	@ (800189c <HAL_ADC_MspInit+0x2bc>)
 80016ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016f0:	4a6a      	ldr	r2, [pc, #424]	@ (800189c <HAL_ADC_MspInit+0x2bc>)
 80016f2:	f043 0302 	orr.w	r3, r3, #2
 80016f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016fa:	4b68      	ldr	r3, [pc, #416]	@ (800189c <HAL_ADC_MspInit+0x2bc>)
 80016fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001700:	f003 0202 	and.w	r2, r3, #2
 8001704:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001708:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001712:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001716:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 8001718:	230f      	movs	r3, #15
 800171a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800171e:	2303      	movs	r3, #3
 8001720:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172a:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800172e:	4619      	mov	r1, r3
 8001730:	485b      	ldr	r0, [pc, #364]	@ (80018a0 <HAL_ADC_MspInit+0x2c0>)
 8001732:	f005 fca5 	bl	8007080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 8001736:	23ed      	movs	r3, #237	@ 0xed
 8001738:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800173c:	2303      	movs	r3, #3
 800173e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001748:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800174c:	4619      	mov	r1, r3
 800174e:	4855      	ldr	r0, [pc, #340]	@ (80018a4 <HAL_ADC_MspInit+0x2c4>)
 8001750:	f005 fc96 	bl	8007080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 8001754:	2303      	movs	r3, #3
 8001756:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175a:	2303      	movs	r3, #3
 800175c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001766:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800176a:	4619      	mov	r1, r3
 800176c:	484e      	ldr	r0, [pc, #312]	@ (80018a8 <HAL_ADC_MspInit+0x2c8>)
 800176e:	f005 fc87 	bl	8007080 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001772:	2321      	movs	r3, #33	@ 0x21
 8001774:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001784:	2300      	movs	r3, #0
 8001786:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001790:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001794:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001798:	2301      	movs	r3, #1
 800179a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800179e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcBurstLength = 1;
 80017a6:	2301      	movs	r3, #1
 80017a8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.DestBurstLength = 1;
 80017ac:	2301      	movs	r3, #1
 80017ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 80017b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017b6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Mode = DMA_NORMAL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80017d8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80017dc:	4933      	ldr	r1, [pc, #204]	@ (80018ac <HAL_ADC_MspInit+0x2cc>)
 80017de:	4618      	mov	r0, r3
 80017e0:	f004 fd62 	bl	80062a8 <HAL_DMAEx_List_BuildNode>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_ADC_MspInit+0x20e>
    {
      Error_Handler();
 80017ea:	f7ff fed9 	bl	80015a0 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 80017ee:	4a2f      	ldr	r2, [pc, #188]	@ (80018ac <HAL_ADC_MspInit+0x2cc>)
 80017f0:	2100      	movs	r1, #0
 80017f2:	482f      	ldr	r0, [pc, #188]	@ (80018b0 <HAL_ADC_MspInit+0x2d0>)
 80017f4:	f004 fd84 	bl	8006300 <HAL_DMAEx_List_InsertNode>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_ADC_MspInit+0x222>
    {
      Error_Handler();
 80017fe:	f7ff fecf 	bl	80015a0 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8001802:	482b      	ldr	r0, [pc, #172]	@ (80018b0 <HAL_ADC_MspInit+0x2d0>)
 8001804:	f004 fe45 	bl	8006492 <HAL_DMAEx_List_SetCircularMode>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_ADC_MspInit+0x232>
    {
      Error_Handler();
 800180e:	f7ff fec7 	bl	80015a0 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001812:	4b28      	ldr	r3, [pc, #160]	@ (80018b4 <HAL_ADC_MspInit+0x2d4>)
 8001814:	4a28      	ldr	r2, [pc, #160]	@ (80018b8 <HAL_ADC_MspInit+0x2d8>)
 8001816:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001818:	4b26      	ldr	r3, [pc, #152]	@ (80018b4 <HAL_ADC_MspInit+0x2d4>)
 800181a:	2200      	movs	r2, #0
 800181c:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800181e:	4b25      	ldr	r3, [pc, #148]	@ (80018b4 <HAL_ADC_MspInit+0x2d4>)
 8001820:	2200      	movs	r2, #0
 8001822:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001824:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <HAL_ADC_MspInit+0x2d4>)
 8001826:	2200      	movs	r2, #0
 8001828:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800182a:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <HAL_ADC_MspInit+0x2d4>)
 800182c:	2200      	movs	r2, #0
 800182e:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001830:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <HAL_ADC_MspInit+0x2d4>)
 8001832:	2281      	movs	r2, #129	@ 0x81
 8001834:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001836:	481f      	ldr	r0, [pc, #124]	@ (80018b4 <HAL_ADC_MspInit+0x2d4>)
 8001838:	f004 fb76 	bl	8005f28 <HAL_DMAEx_List_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_ADC_MspInit+0x266>
    {
      Error_Handler();
 8001842:	f7ff fead 	bl	80015a0 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8001846:	491a      	ldr	r1, [pc, #104]	@ (80018b0 <HAL_ADC_MspInit+0x2d0>)
 8001848:	481a      	ldr	r0, [pc, #104]	@ (80018b4 <HAL_ADC_MspInit+0x2d4>)
 800184a:	f004 fe83 	bl	8006554 <HAL_DMAEx_List_LinkQ>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_ADC_MspInit+0x278>
    {
      Error_Handler();
 8001854:	f7ff fea4 	bl	80015a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8001858:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800185c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a14      	ldr	r2, [pc, #80]	@ (80018b4 <HAL_ADC_MspInit+0x2d4>)
 8001864:	671a      	str	r2, [r3, #112]	@ 0x70
 8001866:	4a13      	ldr	r2, [pc, #76]	@ (80018b4 <HAL_ADC_MspInit+0x2d4>)
 8001868:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800186c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001874:	2110      	movs	r1, #16
 8001876:	480f      	ldr	r0, [pc, #60]	@ (80018b4 <HAL_ADC_MspInit+0x2d4>)
 8001878:	f003 ff64 	bl	8005744 <HAL_DMA_ConfigChannelAttributes>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_ADC_MspInit+0x2a6>
    {
      Error_Handler();
 8001882:	f7ff fe8d 	bl	80015a0 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	2025      	movs	r0, #37	@ 0x25
 800188c:	f003 fade 	bl	8004e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001890:	2025      	movs	r0, #37	@ 0x25
 8001892:	f003 faf5 	bl	8004e80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001896:	e0bf      	b.n	8001a18 <HAL_ADC_MspInit+0x438>
 8001898:	42028000 	.word	0x42028000
 800189c:	46020c00 	.word	0x46020c00
 80018a0:	42020800 	.word	0x42020800
 80018a4:	42020000 	.word	0x42020000
 80018a8:	42020400 	.word	0x42020400
 80018ac:	2000015c 	.word	0x2000015c
 80018b0:	20000180 	.word	0x20000180
 80018b4:	20000198 	.word	0x20000198
 80018b8:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 80018bc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018c0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a56      	ldr	r2, [pc, #344]	@ (8001a24 <HAL_ADC_MspInit+0x444>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	f040 80a4 	bne.w	8001a18 <HAL_ADC_MspInit+0x438>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80018d0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018d4:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 80018d8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80018e4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018e8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80018ec:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018f0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f4:	f107 0320 	add.w	r3, r7, #32
 80018f8:	4618      	mov	r0, r3
 80018fa:	f008 ff45 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_ADC_MspInit+0x328>
      Error_Handler();
 8001904:	f7ff fe4c 	bl	80015a0 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8001908:	4b47      	ldr	r3, [pc, #284]	@ (8001a28 <HAL_ADC_MspInit+0x448>)
 800190a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800190e:	4a46      	ldr	r2, [pc, #280]	@ (8001a28 <HAL_ADC_MspInit+0x448>)
 8001910:	f043 0320 	orr.w	r3, r3, #32
 8001914:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001918:	4b43      	ldr	r3, [pc, #268]	@ (8001a28 <HAL_ADC_MspInit+0x448>)
 800191a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800191e:	f003 0220 	and.w	r2, r3, #32
 8001922:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001926:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001930:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001934:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001936:	4b3c      	ldr	r3, [pc, #240]	@ (8001a28 <HAL_ADC_MspInit+0x448>)
 8001938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800193c:	4a3a      	ldr	r2, [pc, #232]	@ (8001a28 <HAL_ADC_MspInit+0x448>)
 800193e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001942:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001946:	4b38      	ldr	r3, [pc, #224]	@ (8001a28 <HAL_ADC_MspInit+0x448>)
 8001948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800194c:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001950:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001954:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800195e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001962:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8001964:	2303      	movs	r3, #3
 8001966:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196a:	2303      	movs	r3, #3
 800196c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001976:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800197a:	4619      	mov	r1, r3
 800197c:	482b      	ldr	r0, [pc, #172]	@ (8001a2c <HAL_ADC_MspInit+0x44c>)
 800197e:	f005 fb7f 	bl	8007080 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001982:	4b2b      	ldr	r3, [pc, #172]	@ (8001a30 <HAL_ADC_MspInit+0x450>)
 8001984:	4a2b      	ldr	r2, [pc, #172]	@ (8001a34 <HAL_ADC_MspInit+0x454>)
 8001986:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8001988:	4b29      	ldr	r3, [pc, #164]	@ (8001a30 <HAL_ADC_MspInit+0x450>)
 800198a:	2201      	movs	r2, #1
 800198c:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800198e:	4b28      	ldr	r3, [pc, #160]	@ (8001a30 <HAL_ADC_MspInit+0x450>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001994:	4b26      	ldr	r3, [pc, #152]	@ (8001a30 <HAL_ADC_MspInit+0x450>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 800199a:	4b25      	ldr	r3, [pc, #148]	@ (8001a30 <HAL_ADC_MspInit+0x450>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 80019a0:	4b23      	ldr	r3, [pc, #140]	@ (8001a30 <HAL_ADC_MspInit+0x450>)
 80019a2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80019a6:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80019a8:	4b21      	ldr	r3, [pc, #132]	@ (8001a30 <HAL_ADC_MspInit+0x450>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80019ae:	4b20      	ldr	r3, [pc, #128]	@ (8001a30 <HAL_ADC_MspInit+0x450>)
 80019b0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019b4:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80019b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a30 <HAL_ADC_MspInit+0x450>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 80019bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a30 <HAL_ADC_MspInit+0x450>)
 80019be:	2201      	movs	r2, #1
 80019c0:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 80019c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a30 <HAL_ADC_MspInit+0x450>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80019c8:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <HAL_ADC_MspInit+0x450>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80019ce:	4b18      	ldr	r3, [pc, #96]	@ (8001a30 <HAL_ADC_MspInit+0x450>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 80019d4:	4b16      	ldr	r3, [pc, #88]	@ (8001a30 <HAL_ADC_MspInit+0x450>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 80019da:	4815      	ldr	r0, [pc, #84]	@ (8001a30 <HAL_ADC_MspInit+0x450>)
 80019dc:	f003 fb12 	bl	8005004 <HAL_DMA_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_ADC_MspInit+0x40a>
      Error_Handler();
 80019e6:	f7ff fddb 	bl	80015a0 <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 80019ea:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80019ee:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001a30 <HAL_ADC_MspInit+0x450>)
 80019f6:	671a      	str	r2, [r3, #112]	@ 0x70
 80019f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a30 <HAL_ADC_MspInit+0x450>)
 80019fa:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80019fe:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a06:	2110      	movs	r1, #16
 8001a08:	4809      	ldr	r0, [pc, #36]	@ (8001a30 <HAL_ADC_MspInit+0x450>)
 8001a0a:	f003 fe9b 	bl	8005744 <HAL_DMA_ConfigChannelAttributes>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_ADC_MspInit+0x438>
      Error_Handler();
 8001a14:	f7ff fdc4 	bl	80015a0 <Error_Handler>
}
 8001a18:	bf00      	nop
 8001a1a:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	46021000 	.word	0x46021000
 8001a28:	46020c00 	.word	0x46020c00
 8001a2c:	42021800 	.word	0x42021800
 8001a30:	20000210 	.word	0x20000210
 8001a34:	40020150 	.word	0x40020150

08001a38 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0b      	ldr	r2, [pc, #44]	@ (8001a74 <HAL_DMA2D_MspInit+0x3c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d10e      	bne.n	8001a68 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <HAL_DMA2D_MspInit+0x40>)
 8001a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a50:	4a09      	ldr	r2, [pc, #36]	@ (8001a78 <HAL_DMA2D_MspInit+0x40>)
 8001a52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a56:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001a5a:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <HAL_DMA2D_MspInit+0x40>)
 8001a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	4002b000 	.word	0x4002b000
 8001a78:	46020c00 	.word	0x46020c00

08001a7c <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	@ 0x28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a2a      	ldr	r2, [pc, #168]	@ (8001b44 <HAL_XSPI_MspInit+0xc8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d14d      	bne.n	8001b3a <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b48 <HAL_XSPI_MspInit+0xcc>)
 8001aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aa4:	4a28      	ldr	r2, [pc, #160]	@ (8001b48 <HAL_XSPI_MspInit+0xcc>)
 8001aa6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001aaa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001aae:	4b26      	ldr	r3, [pc, #152]	@ (8001b48 <HAL_XSPI_MspInit+0xcc>)
 8001ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ab4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001abc:	4b22      	ldr	r3, [pc, #136]	@ (8001b48 <HAL_XSPI_MspInit+0xcc>)
 8001abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ac2:	4a21      	ldr	r2, [pc, #132]	@ (8001b48 <HAL_XSPI_MspInit+0xcc>)
 8001ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ac8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001acc:	4b1e      	ldr	r3, [pc, #120]	@ (8001b48 <HAL_XSPI_MspInit+0xcc>)
 8001ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ada:	4b1b      	ldr	r3, [pc, #108]	@ (8001b48 <HAL_XSPI_MspInit+0xcc>)
 8001adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ae0:	4a19      	ldr	r2, [pc, #100]	@ (8001b48 <HAL_XSPI_MspInit+0xcc>)
 8001ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001aea:	4b17      	ldr	r3, [pc, #92]	@ (8001b48 <HAL_XSPI_MspInit+0xcc>)
 8001aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001af8:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8001afc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afe:	2302      	movs	r3, #2
 8001b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b06:	2303      	movs	r3, #3
 8001b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001b0a:	2308      	movs	r3, #8
 8001b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4619      	mov	r1, r3
 8001b14:	480d      	ldr	r0, [pc, #52]	@ (8001b4c <HAL_XSPI_MspInit+0xd0>)
 8001b16:	f005 fab3 	bl	8007080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b1a:	230f      	movs	r3, #15
 8001b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001b2a:	2308      	movs	r3, #8
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	4619      	mov	r1, r3
 8001b34:	4806      	ldr	r0, [pc, #24]	@ (8001b50 <HAL_XSPI_MspInit+0xd4>)
 8001b36:	f005 faa3 	bl	8007080 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8001b3a:	bf00      	nop
 8001b3c:	3728      	adds	r7, #40	@ 0x28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	420d3400 	.word	0x420d3400
 8001b48:	46020c00 	.word	0x46020c00
 8001b4c:	42021c00 	.word	0x42021c00
 8001b50:	42022000 	.word	0x42022000

08001b54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b0c4      	sub	sp, #272	@ 0x110
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b62:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b74:	f107 0318 	add.w	r3, r7, #24
 8001b78:	22e0      	movs	r2, #224	@ 0xe0
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f00e fdb9 	bl	80106f4 <memset>
  if(hi2c->Instance==I2C1)
 8001b82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a63      	ldr	r2, [pc, #396]	@ (8001d1c <HAL_I2C_MspInit+0x1c8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d14f      	bne.n	8001c34 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b94:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba6:	f107 0318 	add.w	r3, r7, #24
 8001baa:	4618      	mov	r0, r3
 8001bac:	f008 fdec 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001bb6:	f7ff fcf3 	bl	80015a0 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bba:	4b59      	ldr	r3, [pc, #356]	@ (8001d20 <HAL_I2C_MspInit+0x1cc>)
 8001bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bc0:	4a57      	ldr	r2, [pc, #348]	@ (8001d20 <HAL_I2C_MspInit+0x1cc>)
 8001bc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bc6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bca:	4b55      	ldr	r3, [pc, #340]	@ (8001d20 <HAL_I2C_MspInit+0x1cc>)
 8001bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001bd8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001bdc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be0:	2312      	movs	r3, #18
 8001be2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bf8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4849      	ldr	r0, [pc, #292]	@ (8001d24 <HAL_I2C_MspInit+0x1d0>)
 8001c00:	f005 fa3e 	bl	8007080 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c04:	4b46      	ldr	r3, [pc, #280]	@ (8001d20 <HAL_I2C_MspInit+0x1cc>)
 8001c06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c0a:	4a45      	ldr	r2, [pc, #276]	@ (8001d20 <HAL_I2C_MspInit+0x1cc>)
 8001c0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c10:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001c14:	4b42      	ldr	r3, [pc, #264]	@ (8001d20 <HAL_I2C_MspInit+0x1cc>)
 8001c16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c1a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001c1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c22:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c2c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001c30:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c32:	e06e      	b.n	8001d12 <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8001c34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c38:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a39      	ldr	r2, [pc, #228]	@ (8001d28 <HAL_I2C_MspInit+0x1d4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d165      	bne.n	8001d12 <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c46:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c58:	f107 0318 	add.w	r3, r7, #24
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f008 fd93 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8001c68:	f7ff fc9a 	bl	80015a0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001d20 <HAL_I2C_MspInit+0x1cc>)
 8001c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c72:	4a2b      	ldr	r2, [pc, #172]	@ (8001d20 <HAL_I2C_MspInit+0x1cc>)
 8001c74:	f043 0320 	orr.w	r3, r3, #32
 8001c78:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c7c:	4b28      	ldr	r3, [pc, #160]	@ (8001d20 <HAL_I2C_MspInit+0x1cc>)
 8001c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c82:	f003 0220 	and.w	r2, r3, #32
 8001c86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c98:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ca0:	2312      	movs	r3, #18
 8001ca2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cb8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	481b      	ldr	r0, [pc, #108]	@ (8001d2c <HAL_I2C_MspInit+0x1d8>)
 8001cc0:	f005 f9de 	bl	8007080 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cc4:	4b16      	ldr	r3, [pc, #88]	@ (8001d20 <HAL_I2C_MspInit+0x1cc>)
 8001cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001cca:	4a15      	ldr	r2, [pc, #84]	@ (8001d20 <HAL_I2C_MspInit+0x1cc>)
 8001ccc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cd0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001cd4:	4b12      	ldr	r3, [pc, #72]	@ (8001d20 <HAL_I2C_MspInit+0x1cc>)
 8001cd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001cda:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001cf0:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2039      	movs	r0, #57	@ 0x39
 8001cf8:	f003 f8a8 	bl	8004e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001cfc:	2039      	movs	r0, #57	@ 0x39
 8001cfe:	f003 f8bf 	bl	8004e80 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	203a      	movs	r0, #58	@ 0x3a
 8001d08:	f003 f8a0 	bl	8004e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001d0c:	203a      	movs	r0, #58	@ 0x3a
 8001d0e:	f003 f8b7 	bl	8004e80 <HAL_NVIC_EnableIRQ>
}
 8001d12:	bf00      	nop
 8001d14:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40005400 	.word	0x40005400
 8001d20:	46020c00 	.word	0x46020c00
 8001d24:	42021800 	.word	0x42021800
 8001d28:	40005800 	.word	0x40005800
 8001d2c:	42021400 	.word	0x42021400

08001d30 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b0c6      	sub	sp, #280	@ 0x118
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d3a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d3e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d50:	f107 0320 	add.w	r3, r7, #32
 8001d54:	22e0      	movs	r2, #224	@ 0xe0
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f00e fccb 	bl	80106f4 <memset>
  if(hltdc->Instance==LTDC)
 8001d5e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d62:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a92      	ldr	r2, [pc, #584]	@ (8001fb4 <HAL_LTDC_MspInit+0x284>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	f040 811b 	bne.w	8001fa8 <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0302 	mov.w	r3, #2
 8001d7a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001d84:	2303      	movs	r3, #3
 8001d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8001d88:	2304      	movs	r3, #4
 8001d8a:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8001d8c:	2332      	movs	r3, #50	@ 0x32
 8001d8e:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8001d90:	2302      	movs	r3, #2
 8001d92:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8001d94:	2302      	movs	r3, #2
 8001d96:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8001d98:	2308      	movs	r3, #8
 8001d9a:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8001da4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001da8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001daa:	f107 0320 	add.w	r3, r7, #32
 8001dae:	4618      	mov	r0, r3
 8001db0:	f008 fcea 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8001dba:	f7ff fbf1 	bl	80015a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001dbe:	4b7e      	ldr	r3, [pc, #504]	@ (8001fb8 <HAL_LTDC_MspInit+0x288>)
 8001dc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001dc4:	4a7c      	ldr	r2, [pc, #496]	@ (8001fb8 <HAL_LTDC_MspInit+0x288>)
 8001dc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001dca:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001dce:	4b7a      	ldr	r3, [pc, #488]	@ (8001fb8 <HAL_LTDC_MspInit+0x288>)
 8001dd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001dd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ddc:	4b76      	ldr	r3, [pc, #472]	@ (8001fb8 <HAL_LTDC_MspInit+0x288>)
 8001dde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001de2:	4a75      	ldr	r2, [pc, #468]	@ (8001fb8 <HAL_LTDC_MspInit+0x288>)
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001dec:	4b72      	ldr	r3, [pc, #456]	@ (8001fb8 <HAL_LTDC_MspInit+0x288>)
 8001dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001df2:	f003 0202 	and.w	r2, r3, #2
 8001df6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001dfa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e04:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e08:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e0a:	4b6b      	ldr	r3, [pc, #428]	@ (8001fb8 <HAL_LTDC_MspInit+0x288>)
 8001e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e10:	4a69      	ldr	r2, [pc, #420]	@ (8001fb8 <HAL_LTDC_MspInit+0x288>)
 8001e12:	f043 0310 	orr.w	r3, r3, #16
 8001e16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e1a:	4b67      	ldr	r3, [pc, #412]	@ (8001fb8 <HAL_LTDC_MspInit+0x288>)
 8001e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e20:	f003 0210 	and.w	r2, r3, #16
 8001e24:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e36:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e38:	4b5f      	ldr	r3, [pc, #380]	@ (8001fb8 <HAL_LTDC_MspInit+0x288>)
 8001e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e3e:	4a5e      	ldr	r2, [pc, #376]	@ (8001fb8 <HAL_LTDC_MspInit+0x288>)
 8001e40:	f043 0308 	orr.w	r3, r3, #8
 8001e44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e48:	4b5b      	ldr	r3, [pc, #364]	@ (8001fb8 <HAL_LTDC_MspInit+0x288>)
 8001e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e4e:	f003 0208 	and.w	r2, r3, #8
 8001e52:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e64:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e66:	4b54      	ldr	r3, [pc, #336]	@ (8001fb8 <HAL_LTDC_MspInit+0x288>)
 8001e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e6c:	4a52      	ldr	r2, [pc, #328]	@ (8001fb8 <HAL_LTDC_MspInit+0x288>)
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e76:	4b50      	ldr	r3, [pc, #320]	@ (8001fb8 <HAL_LTDC_MspInit+0x288>)
 8001e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e7c:	f003 0204 	and.w	r2, r3, #4
 8001e80:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e84:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e92:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e94:	2304      	movs	r3, #4
 8001e96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8001eac:	2308      	movs	r3, #8
 8001eae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb2:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4840      	ldr	r0, [pc, #256]	@ (8001fbc <HAL_LTDC_MspInit+0x28c>)
 8001eba:	f005 f8e1 	bl	8007080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001ebe:	f64f 7381 	movw	r3, #65409	@ 0xff81
 8001ec2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ede:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4836      	ldr	r0, [pc, #216]	@ (8001fc0 <HAL_LTDC_MspInit+0x290>)
 8001ee6:	f005 f8cb 	bl	8007080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001eea:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 8001eee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8001f04:	2308      	movs	r3, #8
 8001f06:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f0a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001f0e:	4619      	mov	r1, r3
 8001f10:	482c      	ldr	r0, [pc, #176]	@ (8001fc4 <HAL_LTDC_MspInit+0x294>)
 8001f12:	f005 f8b5 	bl	8007080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f16:	23c0      	movs	r3, #192	@ 0xc0
 8001f18:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8001f2e:	2307      	movs	r3, #7
 8001f30:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f34:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4823      	ldr	r0, [pc, #140]	@ (8001fc8 <HAL_LTDC_MspInit+0x298>)
 8001f3c:	f005 f8a0 	bl	8007080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f40:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f60:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001f64:	4619      	mov	r1, r3
 8001f66:	4818      	ldr	r0, [pc, #96]	@ (8001fc8 <HAL_LTDC_MspInit+0x298>)
 8001f68:	f005 f88a 	bl	8007080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8001f86:	2307      	movs	r3, #7
 8001f88:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001f90:	4619      	mov	r1, r3
 8001f92:	480a      	ldr	r0, [pc, #40]	@ (8001fbc <HAL_LTDC_MspInit+0x28c>)
 8001f94:	f005 f874 	bl	8007080 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	2087      	movs	r0, #135	@ 0x87
 8001f9e:	f002 ff55 	bl	8004e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001fa2:	2087      	movs	r0, #135	@ 0x87
 8001fa4:	f002 ff6c 	bl	8004e80 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001fa8:	bf00      	nop
 8001faa:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40016800 	.word	0x40016800
 8001fb8:	46020c00 	.word	0x46020c00
 8001fbc:	42020400 	.word	0x42020400
 8001fc0:	42021000 	.word	0x42021000
 8001fc4:	42020c00 	.word	0x42020c00
 8001fc8:	42020800 	.word	0x42020800

08001fcc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b0bc      	sub	sp, #240	@ 0xf0
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fd4:	f107 0310 	add.w	r3, r7, #16
 8001fd8:	22e0      	movs	r2, #224	@ 0xe0
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f00e fb89 	bl	80106f4 <memset>
  if(hrtc->Instance==RTC)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800205c <HAL_RTC_MspInit+0x90>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d132      	bne.n	8002052 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001fec:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ff8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002000:	f107 0310 	add.w	r3, r7, #16
 8002004:	4618      	mov	r0, r3
 8002006:	f008 fbbf 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002010:	f7ff fac6 	bl	80015a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002014:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <HAL_RTC_MspInit+0x94>)
 8002016:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800201a:	4a11      	ldr	r2, [pc, #68]	@ (8002060 <HAL_RTC_MspInit+0x94>)
 800201c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002020:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002024:	4b0e      	ldr	r3, [pc, #56]	@ (8002060 <HAL_RTC_MspInit+0x94>)
 8002026:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800202a:	4a0d      	ldr	r2, [pc, #52]	@ (8002060 <HAL_RTC_MspInit+0x94>)
 800202c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002030:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002034:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <HAL_RTC_MspInit+0x94>)
 8002036:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800203a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8002042:	4b07      	ldr	r3, [pc, #28]	@ (8002060 <HAL_RTC_MspInit+0x94>)
 8002044:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002048:	4a05      	ldr	r2, [pc, #20]	@ (8002060 <HAL_RTC_MspInit+0x94>)
 800204a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800204e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002052:	bf00      	nop
 8002054:	37f0      	adds	r7, #240	@ 0xf0
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	46007800 	.word	0x46007800
 8002060:	46020c00 	.word	0x46020c00

08002064 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0b      	ldr	r2, [pc, #44]	@ (80020a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d10e      	bne.n	8002094 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002076:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <HAL_TIM_PWM_MspInit+0x40>)
 8002078:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800207c:	4a09      	ldr	r2, [pc, #36]	@ (80020a4 <HAL_TIM_PWM_MspInit+0x40>)
 800207e:	f043 0302 	orr.w	r3, r3, #2
 8002082:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002086:	4b07      	ldr	r3, [pc, #28]	@ (80020a4 <HAL_TIM_PWM_MspInit+0x40>)
 8002088:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	40000400 	.word	0x40000400
 80020a4:	46020c00 	.word	0x46020c00

080020a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a12      	ldr	r2, [pc, #72]	@ (8002110 <HAL_TIM_MspPostInit+0x68>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d11e      	bne.n	8002108 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ca:	4b12      	ldr	r3, [pc, #72]	@ (8002114 <HAL_TIM_MspPostInit+0x6c>)
 80020cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020d0:	4a10      	ldr	r2, [pc, #64]	@ (8002114 <HAL_TIM_MspPostInit+0x6c>)
 80020d2:	f043 0310 	orr.w	r3, r3, #16
 80020d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020da:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <HAL_TIM_MspPostInit+0x6c>)
 80020dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 80020e8:	2340      	movs	r3, #64	@ 0x40
 80020ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020f8:	2302      	movs	r3, #2
 80020fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80020fc:	f107 030c 	add.w	r3, r7, #12
 8002100:	4619      	mov	r1, r3
 8002102:	4805      	ldr	r0, [pc, #20]	@ (8002118 <HAL_TIM_MspPostInit+0x70>)
 8002104:	f004 ffbc 	bl	8007080 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002108:	bf00      	nop
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40000400 	.word	0x40000400
 8002114:	46020c00 	.word	0x46020c00
 8002118:	42021000 	.word	0x42021000

0800211c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b0c2      	sub	sp, #264	@ 0x108
 8002120:	af00      	add	r7, sp, #0
 8002122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002126:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800212a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800213c:	f107 0310 	add.w	r3, r7, #16
 8002140:	22e0      	movs	r2, #224	@ 0xe0
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f00e fad5 	bl	80106f4 <memset>
  if(huart->Instance==USART1)
 800214a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800214e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a2f      	ldr	r2, [pc, #188]	@ (8002214 <HAL_UART_MspInit+0xf8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d155      	bne.n	8002208 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800215c:	f04f 0201 	mov.w	r2, #1
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002168:	2300      	movs	r3, #0
 800216a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	4618      	mov	r0, r3
 8002172:	f008 fb09 	bl	800a788 <HAL_RCCEx_PeriphCLKConfig>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 800217c:	f7ff fa10 	bl	80015a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002180:	4b25      	ldr	r3, [pc, #148]	@ (8002218 <HAL_UART_MspInit+0xfc>)
 8002182:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002186:	4a24      	ldr	r2, [pc, #144]	@ (8002218 <HAL_UART_MspInit+0xfc>)
 8002188:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800218c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002190:	4b21      	ldr	r3, [pc, #132]	@ (8002218 <HAL_UART_MspInit+0xfc>)
 8002192:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	4b1e      	ldr	r3, [pc, #120]	@ (8002218 <HAL_UART_MspInit+0xfc>)
 80021a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002218 <HAL_UART_MspInit+0xfc>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <HAL_UART_MspInit+0xfc>)
 80021b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021b4:	f003 0201 	and.w	r2, r3, #1
 80021b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80021bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80021c6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021ca:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021cc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80021d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021e6:	2307      	movs	r3, #7
 80021e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ec:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80021f0:	4619      	mov	r1, r3
 80021f2:	480a      	ldr	r0, [pc, #40]	@ (800221c <HAL_UART_MspInit+0x100>)
 80021f4:	f004 ff44 	bl	8007080 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021f8:	2200      	movs	r2, #0
 80021fa:	2100      	movs	r1, #0
 80021fc:	203d      	movs	r0, #61	@ 0x3d
 80021fe:	f002 fe25 	bl	8004e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002202:	203d      	movs	r0, #61	@ 0x3d
 8002204:	f002 fe3c 	bl	8004e80 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002208:	bf00      	nop
 800220a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40013800 	.word	0x40013800
 8002218:	46020c00 	.word	0x46020c00
 800221c:	42020000 	.word	0x42020000

08002220 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b0a4      	sub	sp, #144	@ 0x90
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4aae      	ldr	r2, [pc, #696]	@ (80024e8 <HAL_SAI_MspInit+0x2c8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	f040 8086 	bne.w	8002340 <HAL_SAI_MspInit+0x120>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002234:	4bad      	ldr	r3, [pc, #692]	@ (80024ec <HAL_SAI_MspInit+0x2cc>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10e      	bne.n	800225a <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800223c:	4bac      	ldr	r3, [pc, #688]	@ (80024f0 <HAL_SAI_MspInit+0x2d0>)
 800223e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002242:	4aab      	ldr	r2, [pc, #684]	@ (80024f0 <HAL_SAI_MspInit+0x2d0>)
 8002244:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002248:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800224c:	4ba8      	ldr	r3, [pc, #672]	@ (80024f0 <HAL_SAI_MspInit+0x2d0>)
 800224e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 800225a:	4ba4      	ldr	r3, [pc, #656]	@ (80024ec <HAL_SAI_MspInit+0x2cc>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	3301      	adds	r3, #1
 8002260:	4aa2      	ldr	r2, [pc, #648]	@ (80024ec <HAL_SAI_MspInit+0x2cc>)
 8002262:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002264:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002268:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002276:	2300      	movs	r3, #0
 8002278:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800227c:	230d      	movs	r3, #13
 800227e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002282:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002286:	4619      	mov	r1, r3
 8002288:	489a      	ldr	r0, [pc, #616]	@ (80024f4 <HAL_SAI_MspInit+0x2d4>)
 800228a:	f004 fef9 	bl	8007080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800228e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002292:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80022a6:	230d      	movs	r3, #13
 80022a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022ac:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80022b0:	4619      	mov	r1, r3
 80022b2:	4891      	ldr	r0, [pc, #580]	@ (80024f8 <HAL_SAI_MspInit+0x2d8>)
 80022b4:	f004 fee4 	bl	8007080 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 80022b8:	4b90      	ldr	r3, [pc, #576]	@ (80024fc <HAL_SAI_MspInit+0x2dc>)
 80022ba:	4a91      	ldr	r2, [pc, #580]	@ (8002500 <HAL_SAI_MspInit+0x2e0>)
 80022bc:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_SAI2_A;
 80022be:	4b8f      	ldr	r3, [pc, #572]	@ (80024fc <HAL_SAI_MspInit+0x2dc>)
 80022c0:	2226      	movs	r2, #38	@ 0x26
 80022c2:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80022c4:	4b8d      	ldr	r3, [pc, #564]	@ (80024fc <HAL_SAI_MspInit+0x2dc>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022ca:	4b8c      	ldr	r3, [pc, #560]	@ (80024fc <HAL_SAI_MspInit+0x2dc>)
 80022cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022d0:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 80022d2:	4b8a      	ldr	r3, [pc, #552]	@ (80024fc <HAL_SAI_MspInit+0x2dc>)
 80022d4:	2208      	movs	r2, #8
 80022d6:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 80022d8:	4b88      	ldr	r3, [pc, #544]	@ (80024fc <HAL_SAI_MspInit+0x2dc>)
 80022da:	2200      	movs	r2, #0
 80022dc:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80022de:	4b87      	ldr	r3, [pc, #540]	@ (80024fc <HAL_SAI_MspInit+0x2dc>)
 80022e0:	2202      	movs	r2, #2
 80022e2:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80022e4:	4b85      	ldr	r3, [pc, #532]	@ (80024fc <HAL_SAI_MspInit+0x2dc>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 80022ea:	4b84      	ldr	r3, [pc, #528]	@ (80024fc <HAL_SAI_MspInit+0x2dc>)
 80022ec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80022f0:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 80022f2:	4b82      	ldr	r3, [pc, #520]	@ (80024fc <HAL_SAI_MspInit+0x2dc>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 80022f8:	4b80      	ldr	r3, [pc, #512]	@ (80024fc <HAL_SAI_MspInit+0x2dc>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80022fe:	4b7f      	ldr	r3, [pc, #508]	@ (80024fc <HAL_SAI_MspInit+0x2dc>)
 8002300:	2200      	movs	r2, #0
 8002302:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002304:	4b7d      	ldr	r3, [pc, #500]	@ (80024fc <HAL_SAI_MspInit+0x2dc>)
 8002306:	2200      	movs	r2, #0
 8002308:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 800230a:	4b7c      	ldr	r3, [pc, #496]	@ (80024fc <HAL_SAI_MspInit+0x2dc>)
 800230c:	2200      	movs	r2, #0
 800230e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8002310:	487a      	ldr	r0, [pc, #488]	@ (80024fc <HAL_SAI_MspInit+0x2dc>)
 8002312:	f002 fe77 	bl	8005004 <HAL_DMA_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_SAI_MspInit+0x100>
    {
      Error_Handler();
 800231c:	f7ff f940 	bl	80015a0 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel3);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a76      	ldr	r2, [pc, #472]	@ (80024fc <HAL_SAI_MspInit+0x2dc>)
 8002324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002328:	4a74      	ldr	r2, [pc, #464]	@ (80024fc <HAL_SAI_MspInit+0x2dc>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 800232e:	2110      	movs	r1, #16
 8002330:	4872      	ldr	r0, [pc, #456]	@ (80024fc <HAL_SAI_MspInit+0x2dc>)
 8002332:	f003 fa07 	bl	8005744 <HAL_DMA_ConfigChannelAttributes>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <HAL_SAI_MspInit+0x120>
    {
      Error_Handler();
 800233c:	f7ff f930 	bl	80015a0 <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a6f      	ldr	r2, [pc, #444]	@ (8002504 <HAL_SAI_MspInit+0x2e4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	f040 80ca 	bne.w	80024e0 <HAL_SAI_MspInit+0x2c0>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800234c:	4b67      	ldr	r3, [pc, #412]	@ (80024ec <HAL_SAI_MspInit+0x2cc>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10e      	bne.n	8002372 <HAL_SAI_MspInit+0x152>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002354:	4b66      	ldr	r3, [pc, #408]	@ (80024f0 <HAL_SAI_MspInit+0x2d0>)
 8002356:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800235a:	4a65      	ldr	r2, [pc, #404]	@ (80024f0 <HAL_SAI_MspInit+0x2d0>)
 800235c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002360:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002364:	4b62      	ldr	r3, [pc, #392]	@ (80024f0 <HAL_SAI_MspInit+0x2d0>)
 8002366:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800236a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8002372:	4b5e      	ldr	r3, [pc, #376]	@ (80024ec <HAL_SAI_MspInit+0x2cc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	3301      	adds	r3, #1
 8002378:	4a5c      	ldr	r2, [pc, #368]	@ (80024ec <HAL_SAI_MspInit+0x2cc>)
 800237a:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800237c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002380:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238e:	2303      	movs	r3, #3
 8002390:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002394:	230d      	movs	r3, #13
 8002396:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800239e:	4619      	mov	r1, r3
 80023a0:	4859      	ldr	r0, [pc, #356]	@ (8002508 <HAL_SAI_MspInit+0x2e8>)
 80023a2:	f004 fe6d 	bl	8007080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023a6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80023aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ac:	2302      	movs	r3, #2
 80023ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b8:	2303      	movs	r3, #3
 80023ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80023be:	230d      	movs	r3, #13
 80023c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80023c8:	4619      	mov	r1, r3
 80023ca:	4850      	ldr	r0, [pc, #320]	@ (800250c <HAL_SAI_MspInit+0x2ec>)
 80023cc:	f004 fe58 	bl	8007080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80023d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d6:	2302      	movs	r3, #2
 80023d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80023e8:	230d      	movs	r3, #13
 80023ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ee:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80023f2:	4619      	mov	r1, r3
 80023f4:	4845      	ldr	r0, [pc, #276]	@ (800250c <HAL_SAI_MspInit+0x2ec>)
 80023f6:	f004 fe43 	bl	8007080 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80023fa:	2321      	movs	r3, #33	@ 0x21
 80023fc:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 80023fe:	2327      	movs	r3, #39	@ 0x27
 8002400:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 800240e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002412:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002414:	2302      	movs	r3, #2
 8002416:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002418:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800241c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 800241e:	2301      	movs	r3, #1
 8002420:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 8002422:	2301      	movs	r3, #1
 8002424:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002426:	2300      	movs	r3, #0
 8002428:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800242a:	2300      	movs	r3, #0
 800242c:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 800242e:	2300      	movs	r3, #0
 8002430:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002432:	2300      	movs	r3, #0
 8002434:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002436:	2300      	movs	r3, #0
 8002438:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800243a:	2300      	movs	r3, #0
 800243c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 800243e:	f107 0310 	add.w	r3, r7, #16
 8002442:	4933      	ldr	r1, [pc, #204]	@ (8002510 <HAL_SAI_MspInit+0x2f0>)
 8002444:	4618      	mov	r0, r3
 8002446:	f003 ff2f 	bl	80062a8 <HAL_DMAEx_List_BuildNode>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_SAI_MspInit+0x234>
    {
      Error_Handler();
 8002450:	f7ff f8a6 	bl	80015a0 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8002454:	4a2e      	ldr	r2, [pc, #184]	@ (8002510 <HAL_SAI_MspInit+0x2f0>)
 8002456:	2100      	movs	r1, #0
 8002458:	482e      	ldr	r0, [pc, #184]	@ (8002514 <HAL_SAI_MspInit+0x2f4>)
 800245a:	f003 ff51 	bl	8006300 <HAL_DMAEx_List_InsertNode>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_SAI_MspInit+0x248>
    {
      Error_Handler();
 8002464:	f7ff f89c 	bl	80015a0 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8002468:	482a      	ldr	r0, [pc, #168]	@ (8002514 <HAL_SAI_MspInit+0x2f4>)
 800246a:	f004 f812 	bl	8006492 <HAL_DMAEx_List_SetCircularMode>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_SAI_MspInit+0x258>
    {
      Error_Handler();
 8002474:	f7ff f894 	bl	80015a0 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8002478:	4b27      	ldr	r3, [pc, #156]	@ (8002518 <HAL_SAI_MspInit+0x2f8>)
 800247a:	4a28      	ldr	r2, [pc, #160]	@ (800251c <HAL_SAI_MspInit+0x2fc>)
 800247c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 800247e:	4b26      	ldr	r3, [pc, #152]	@ (8002518 <HAL_SAI_MspInit+0x2f8>)
 8002480:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002484:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002486:	4b24      	ldr	r3, [pc, #144]	@ (8002518 <HAL_SAI_MspInit+0x2f8>)
 8002488:	2200      	movs	r2, #0
 800248a:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800248c:	4b22      	ldr	r3, [pc, #136]	@ (8002518 <HAL_SAI_MspInit+0x2f8>)
 800248e:	2200      	movs	r2, #0
 8002490:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002492:	4b21      	ldr	r3, [pc, #132]	@ (8002518 <HAL_SAI_MspInit+0x2f8>)
 8002494:	2200      	movs	r2, #0
 8002496:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002498:	4b1f      	ldr	r3, [pc, #124]	@ (8002518 <HAL_SAI_MspInit+0x2f8>)
 800249a:	2281      	movs	r2, #129	@ 0x81
 800249c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 800249e:	481e      	ldr	r0, [pc, #120]	@ (8002518 <HAL_SAI_MspInit+0x2f8>)
 80024a0:	f003 fd42 	bl	8005f28 <HAL_DMAEx_List_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_SAI_MspInit+0x28e>
    {
      Error_Handler();
 80024aa:	f7ff f879 	bl	80015a0 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 80024ae:	4919      	ldr	r1, [pc, #100]	@ (8002514 <HAL_SAI_MspInit+0x2f4>)
 80024b0:	4819      	ldr	r0, [pc, #100]	@ (8002518 <HAL_SAI_MspInit+0x2f8>)
 80024b2:	f004 f84f 	bl	8006554 <HAL_DMAEx_List_LinkQ>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_SAI_MspInit+0x2a0>
    {
      Error_Handler();
 80024bc:	f7ff f870 	bl	80015a0 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a15      	ldr	r2, [pc, #84]	@ (8002518 <HAL_SAI_MspInit+0x2f8>)
 80024c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80024c8:	4a13      	ldr	r2, [pc, #76]	@ (8002518 <HAL_SAI_MspInit+0x2f8>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80024ce:	2110      	movs	r1, #16
 80024d0:	4811      	ldr	r0, [pc, #68]	@ (8002518 <HAL_SAI_MspInit+0x2f8>)
 80024d2:	f003 f937 	bl	8005744 <HAL_DMA_ConfigChannelAttributes>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_SAI_MspInit+0x2c0>
    {
      Error_Handler();
 80024dc:	f7ff f860 	bl	80015a0 <Error_Handler>
    }

    }
}
 80024e0:	bf00      	nop
 80024e2:	3790      	adds	r7, #144	@ 0x90
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40015804 	.word	0x40015804
 80024ec:	2000e934 	.word	0x2000e934
 80024f0:	46020c00 	.word	0x46020c00
 80024f4:	42020400 	.word	0x42020400
 80024f8:	42021800 	.word	0x42021800
 80024fc:	20000600 	.word	0x20000600
 8002500:	400201d0 	.word	0x400201d0
 8002504:	40015824 	.word	0x40015824
 8002508:	42020000 	.word	0x42020000
 800250c:	42020800 	.word	0x42020800
 8002510:	20000678 	.word	0x20000678
 8002514:	2000069c 	.word	0x2000069c
 8002518:	200006b4 	.word	0x200006b4
 800251c:	400200d0 	.word	0x400200d0

08002520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002524:	bf00      	nop
 8002526:	e7fd      	b.n	8002524 <NMI_Handler+0x4>

08002528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <HardFault_Handler+0x4>

08002530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <MemManage_Handler+0x4>

08002538 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <BusFault_Handler+0x4>

08002540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <UsageFault_Handler+0x4>

08002548 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002576:	f000 f979 	bl	800286c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}

0800257e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 8002582:	2002      	movs	r0, #2
 8002584:	f004 ff6c 	bl	8007460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	bd80      	pop	{r7, pc}

0800258c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 8002590:	2010      	movs	r0, #16
 8002592:	f004 ff65 	bl	8007460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}

0800259a <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 800259e:	2020      	movs	r0, #32
 80025a0:	f004 ff5e 	bl	8007460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80025ac:	4802      	ldr	r0, [pc, #8]	@ (80025b8 <GPDMA1_Channel0_IRQHandler+0x10>)
 80025ae:	f002 ff5a 	bl	8005466 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000198 	.word	0x20000198

080025bc <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 80025c0:	4802      	ldr	r0, [pc, #8]	@ (80025cc <GPDMA1_Channel1_IRQHandler+0x10>)
 80025c2:	f002 ff50 	bl	8005466 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	200006b4 	.word	0x200006b4

080025d0 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 80025d4:	4802      	ldr	r0, [pc, #8]	@ (80025e0 <GPDMA1_Channel2_IRQHandler+0x10>)
 80025d6:	f002 ff46 	bl	8005466 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000210 	.word	0x20000210

080025e4 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 80025e8:	4802      	ldr	r0, [pc, #8]	@ (80025f4 <GPDMA1_Channel3_IRQHandler+0x10>)
 80025ea:	f002 ff3c 	bl	8005466 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000600 	.word	0x20000600

080025f8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80025fc:	4802      	ldr	r0, [pc, #8]	@ (8002608 <ADC1_2_IRQHandler+0x10>)
 80025fe:	f001 f8fd 	bl	80037fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000044 	.word	0x20000044

0800260c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002610:	4802      	ldr	r0, [pc, #8]	@ (800261c <I2C2_EV_IRQHandler+0x10>)
 8002612:	f005 f8f1 	bl	80077f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200003a4 	.word	0x200003a4

08002620 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002624:	4802      	ldr	r0, [pc, #8]	@ (8002630 <I2C2_ER_IRQHandler+0x10>)
 8002626:	f005 f901 	bl	800782c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	200003a4 	.word	0x200003a4

08002634 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002638:	4802      	ldr	r0, [pc, #8]	@ (8002644 <USART1_IRQHandler+0x10>)
 800263a:	f00c fe77 	bl	800f32c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000778 	.word	0x20000778

08002648 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800264c:	4802      	ldr	r0, [pc, #8]	@ (8002658 <LTDC_IRQHandler+0x10>)
 800264e:	f006 fa6f 	bl	8008b30 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200003f8 	.word	0x200003f8

0800265c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002660:	4b18      	ldr	r3, [pc, #96]	@ (80026c4 <SystemInit+0x68>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002666:	4a17      	ldr	r2, [pc, #92]	@ (80026c4 <SystemInit+0x68>)
 8002668:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800266c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002670:	4b15      	ldr	r3, [pc, #84]	@ (80026c8 <SystemInit+0x6c>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002676:	4b14      	ldr	r3, [pc, #80]	@ (80026c8 <SystemInit+0x6c>)
 8002678:	2200      	movs	r2, #0
 800267a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800267c:	4b12      	ldr	r3, [pc, #72]	@ (80026c8 <SystemInit+0x6c>)
 800267e:	2200      	movs	r2, #0
 8002680:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002682:	4b11      	ldr	r3, [pc, #68]	@ (80026c8 <SystemInit+0x6c>)
 8002684:	2200      	movs	r2, #0
 8002686:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002688:	4b0f      	ldr	r3, [pc, #60]	@ (80026c8 <SystemInit+0x6c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0e      	ldr	r2, [pc, #56]	@ (80026c8 <SystemInit+0x6c>)
 800268e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002692:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002696:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002698:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <SystemInit+0x6c>)
 800269a:	2200      	movs	r2, #0
 800269c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800269e:	4b0a      	ldr	r3, [pc, #40]	@ (80026c8 <SystemInit+0x6c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a09      	ldr	r2, [pc, #36]	@ (80026c8 <SystemInit+0x6c>)
 80026a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80026aa:	4b07      	ldr	r3, [pc, #28]	@ (80026c8 <SystemInit+0x6c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026b0:	4b04      	ldr	r3, [pc, #16]	@ (80026c4 <SystemInit+0x68>)
 80026b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80026b6:	609a      	str	r2, [r3, #8]
  #endif
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000ed00 	.word	0xe000ed00
 80026c8:	46020c00 	.word	0x46020c00

080026cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80026cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002704 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026d0:	f7ff ffc4 	bl	800265c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80026d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80026d6:	e003      	b.n	80026e0 <LoopCopyDataInit>

080026d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80026d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80026da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80026dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80026de:	3104      	adds	r1, #4

080026e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80026e0:	480a      	ldr	r0, [pc, #40]	@ (800270c <LoopForever+0xa>)
	ldr	r3, =_edata
 80026e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <LoopForever+0xe>)
	adds	r2, r0, r1
 80026e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80026e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80026e8:	d3f6      	bcc.n	80026d8 <CopyDataInit>
	ldr	r2, =_sbss
 80026ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002714 <LoopForever+0x12>)
	b	LoopFillZerobss
 80026ec:	e002      	b.n	80026f4 <LoopFillZerobss>

080026ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80026ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80026f0:	f842 3b04 	str.w	r3, [r2], #4

080026f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80026f4:	4b08      	ldr	r3, [pc, #32]	@ (8002718 <LoopForever+0x16>)
	cmp	r2, r3
 80026f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80026f8:	d3f9      	bcc.n	80026ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026fa:	f00e f803 	bl	8010704 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026fe:	f7fd ff65 	bl	80005cc <main>

08002702 <LoopForever>:

LoopForever:
    b LoopForever
 8002702:	e7fe      	b.n	8002702 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002704:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 8002708:	08010874 	.word	0x08010874
	ldr	r0, =_sdata
 800270c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002710:	20000028 	.word	0x20000028
	ldr	r2, =_sbss
 8002714:	20000028 	.word	0x20000028
	ldr	r3, = _ebss
 8002718:	2000e93c 	.word	0x2000e93c

0800271c <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800271c:	e7fe      	b.n	800271c <ADC4_IRQHandler>
	...

08002720 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002724:	4b12      	ldr	r3, [pc, #72]	@ (8002770 <HAL_Init+0x50>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a11      	ldr	r2, [pc, #68]	@ (8002770 <HAL_Init+0x50>)
 800272a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800272e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002730:	2003      	movs	r0, #3
 8002732:	f002 fb80 	bl	8004e36 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002736:	f007 fe49 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800273a:	4602      	mov	r2, r0
 800273c:	4b0d      	ldr	r3, [pc, #52]	@ (8002774 <HAL_Init+0x54>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	f003 030f 	and.w	r3, r3, #15
 8002744:	490c      	ldr	r1, [pc, #48]	@ (8002778 <HAL_Init+0x58>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
 800274c:	4a0b      	ldr	r2, [pc, #44]	@ (800277c <HAL_Init+0x5c>)
 800274e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002750:	2004      	movs	r0, #4
 8002752:	f002 fbc5 	bl	8004ee0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002756:	200f      	movs	r0, #15
 8002758:	f000 f812 	bl	8002780 <HAL_InitTick>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e002      	b.n	800276c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002766:	f7fe ff21 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40022000 	.word	0x40022000
 8002774:	46020c00 	.word	0x46020c00
 8002778:	08010764 	.word	0x08010764
 800277c:	2000001c 	.word	0x2000001c

08002780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800278c:	4b33      	ldr	r3, [pc, #204]	@ (800285c <HAL_InitTick+0xdc>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e05c      	b.n	8002852 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002798:	4b31      	ldr	r3, [pc, #196]	@ (8002860 <HAL_InitTick+0xe0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d10c      	bne.n	80027be <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80027a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002864 <HAL_InitTick+0xe4>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b2c      	ldr	r3, [pc, #176]	@ (800285c <HAL_InitTick+0xdc>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	4619      	mov	r1, r3
 80027ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	e037      	b.n	800282e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80027be:	f002 fbe7 	bl	8004f90 <HAL_SYSTICK_GetCLKSourceConfig>
 80027c2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d023      	beq.n	8002812 <HAL_InitTick+0x92>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d82d      	bhi.n	800282c <HAL_InitTick+0xac>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_InitTick+0x5e>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d00d      	beq.n	80027f8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80027dc:	e026      	b.n	800282c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80027de:	4b21      	ldr	r3, [pc, #132]	@ (8002864 <HAL_InitTick+0xe4>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	4b1e      	ldr	r3, [pc, #120]	@ (800285c <HAL_InitTick+0xdc>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	4619      	mov	r1, r3
 80027e8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80027ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80027f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f4:	60fb      	str	r3, [r7, #12]
        break;
 80027f6:	e01a      	b.n	800282e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80027f8:	4b18      	ldr	r3, [pc, #96]	@ (800285c <HAL_InitTick+0xdc>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002802:	fbb3 f3f2 	udiv	r3, r3, r2
 8002806:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	60fb      	str	r3, [r7, #12]
        break;
 8002810:	e00d      	b.n	800282e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002812:	4b12      	ldr	r3, [pc, #72]	@ (800285c <HAL_InitTick+0xdc>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800281c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002820:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	60fb      	str	r3, [r7, #12]
        break;
 800282a:	e000      	b.n	800282e <HAL_InitTick+0xae>
        break;
 800282c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f002 fb34 	bl	8004e9c <HAL_SYSTICK_Config>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e009      	b.n	8002852 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800283e:	2200      	movs	r2, #0
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	f04f 30ff 	mov.w	r0, #4294967295
 8002846:	f002 fb01 	bl	8004e4c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800284a:	4a07      	ldr	r2, [pc, #28]	@ (8002868 <HAL_InitTick+0xe8>)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000024 	.word	0x20000024
 8002860:	e000e010 	.word	0xe000e010
 8002864:	2000001c 	.word	0x2000001c
 8002868:	20000020 	.word	0x20000020

0800286c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002870:	4b06      	ldr	r3, [pc, #24]	@ (800288c <HAL_IncTick+0x20>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <HAL_IncTick+0x24>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4413      	add	r3, r2
 800287c:	4a04      	ldr	r2, [pc, #16]	@ (8002890 <HAL_IncTick+0x24>)
 800287e:	6013      	str	r3, [r2, #0]
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000024 	.word	0x20000024
 8002890:	2000e938 	.word	0x2000e938

08002894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return uwTick;
 8002898:	4b03      	ldr	r3, [pc, #12]	@ (80028a8 <HAL_GetTick+0x14>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	2000e938 	.word	0x2000e938

080028ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028b4:	f7ff ffee 	bl	8002894 <HAL_GetTick>
 80028b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d005      	beq.n	80028d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028c6:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <HAL_Delay+0x44>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028d2:	bf00      	nop
 80028d4:	f7ff ffde 	bl	8002894 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d8f7      	bhi.n	80028d4 <HAL_Delay+0x28>
  {
  }
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000024 	.word	0x20000024

080028f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	609a      	str	r2, [r3, #8]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	609a      	str	r2, [r3, #8]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a0a      	ldr	r2, [pc, #40]	@ (8002998 <LL_ADC_SetResolution+0x3c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d104      	bne.n	800297c <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3b01      	subs	r3, #1
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f023 020c 	bic.w	r2, r3, #12
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	60da      	str	r2, [r3, #12]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	46021000 	.word	0x46021000

0800299c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3360      	adds	r3, #96	@ 0x60
 80029ae:	461a      	mov	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	430b      	orrs	r3, r1
 80029cc:	431a      	orrs	r2, r3
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 80029d2:	bf00      	nop
 80029d4:	371c      	adds	r7, #28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3360      	adds	r3, #96	@ 0x60
 80029ec:	461a      	mov	r2, r3
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b087      	sub	sp, #28
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3360      	adds	r3, #96	@ 0x60
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	601a      	str	r2, [r3, #0]
}
 8002a34:	bf00      	nop
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3360      	adds	r3, #96	@ 0x60
 8002a50:	461a      	mov	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	601a      	str	r2, [r3, #0]
}
 8002a6a:	bf00      	nop
 8002a6c:	371c      	adds	r7, #28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b087      	sub	sp, #28
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	3360      	adds	r3, #96	@ 0x60
 8002a86:	461a      	mov	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	601a      	str	r2, [r3, #0]
}
 8002aa0:	bf00      	nop
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aba:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002abe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ace:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	2a00      	cmp	r2, #0
 8002ad6:	d002      	beq.n	8002ade <LL_ADC_SetGainCompensation+0x32>
 8002ad8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002adc:	e000      	b.n	8002ae0 <LL_ADC_SetGainCompensation+0x34>
 8002ade:	2200      	movs	r2, #0
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b085      	sub	sp, #20
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2107      	movs	r1, #7
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	401a      	ands	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b44:	2301      	movs	r3, #1
 8002b46:	e000      	b.n	8002b4a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b089      	sub	sp, #36	@ 0x24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4a2b      	ldr	r2, [pc, #172]	@ (8002c14 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d020      	beq.n	8002bae <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	3330      	adds	r3, #48	@ 0x30
 8002b70:	461a      	mov	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	4413      	add	r3, r2
 8002b7e:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	211f      	movs	r1, #31
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	401a      	ands	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	0e9b      	lsrs	r3, r3, #26
 8002b98:	f003 011f 	and.w	r1, r3, #31
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002bac:	e02b      	b.n	8002c06 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f003 031f 	and.w	r3, r3, #31
 8002bb8:	210f      	movs	r1, #15
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	401a      	ands	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d104      	bne.n	8002bd6 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	0e9b      	lsrs	r3, r3, #26
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	e010      	b.n	8002bf8 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	613b      	str	r3, [r7, #16]
  return result;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8002bec:	2320      	movs	r3, #32
 8002bee:	e003      	b.n	8002bf8 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	f001 011f 	and.w	r1, r1, #31
 8002bfe:	408b      	lsls	r3, r1
 8002c00:	431a      	orrs	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c06:	bf00      	nop
 8002c08:	3724      	adds	r7, #36	@ 0x24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	46021000 	.word	0x46021000

08002c18 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d107      	bne.n	8002c3c <LL_ADC_REG_SetSequencerChAdd+0x24>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	0e9b      	lsrs	r3, r3, #26
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	2201      	movs	r2, #1
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	e015      	b.n	8002c68 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	60fb      	str	r3, [r7, #12]
  return result;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8002c52:	2320      	movs	r3, #32
 8002c54:	e003      	b.n	8002c5e <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	fab3 f383 	clz	r3, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	f003 031f 	and.w	r3, r3, #31
 8002c62:	2201      	movs	r2, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	0e9b      	lsrs	r3, r3, #26
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	2101      	movs	r1, #1
 8002c96:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	401a      	ands	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f003 0303 	and.w	r3, r3, #3
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b08b      	sub	sp, #44	@ 0x2c
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4a2d      	ldr	r2, [pc, #180]	@ (8002db4 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d042      	beq.n	8002d8a <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d104      	bne.n	8002d18 <LL_ADC_SetChannelSamplingTime+0x28>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	0e9b      	lsrs	r3, r3, #26
 8002d12:	f003 021f 	and.w	r2, r3, #31
 8002d16:	e011      	b.n	8002d3c <LL_ADC_SetChannelSamplingTime+0x4c>
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	617b      	str	r3, [r7, #20]
  return result;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8002d2e:	2320      	movs	r3, #32
 8002d30:	e003      	b.n	8002d3a <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	0e5b      	lsrs	r3, r3, #25
 8002d40:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002d44:	460b      	mov	r3, r1
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	1ad2      	subs	r2, r2, r3
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	3314      	adds	r3, #20
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	0e5b      	lsrs	r3, r3, #25
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	4413      	add	r3, r2
 8002d68:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	2107      	movs	r1, #7
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	401a      	ands	r2, r3
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	431a      	orrs	r2, r3
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8002d88:	e00e      	b.n	8002da8 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	43db      	mvns	r3, r3
 8002d94:	401a      	ands	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	0219      	lsls	r1, r3, #8
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	400b      	ands	r3, r1
 8002d9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002da2:	431a      	orrs	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	615a      	str	r2, [r3, #20]
}
 8002da8:	bf00      	nop
 8002daa:	372c      	adds	r7, #44	@ 0x2c
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	46021000 	.word	0x46021000

08002db8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f003 0318 	and.w	r3, r3, #24
 8002dda:	4908      	ldr	r1, [pc, #32]	@ (8002dfc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ddc:	40d9      	lsrs	r1, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	400b      	ands	r3, r1
 8002de2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002de6:	431a      	orrs	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	000fffff 	.word	0x000fffff

08002e00 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 031f 	and.w	r3, r3, #31
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002e48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6093      	str	r3, [r2, #8]
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e70:	d101      	bne.n	8002e76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002e94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e98:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ebc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ec0:	d101      	bne.n	8002ec6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ee4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ee8:	f043 0201 	orr.w	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	609a      	str	r2, [r3, #8]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <LL_ADC_IsEnabled+0x18>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <LL_ADC_IsEnabled+0x1a>
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f32:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f36:	f043 0204 	orr.w	r2, r3, #4
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	609a      	str	r2, [r3, #8]
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d101      	bne.n	8002f62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d101      	bne.n	8002f88 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f98:	b590      	push	{r4, r7, lr}
 8002f9a:	b08b      	sub	sp, #44	@ 0x2c
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e2ce      	b.n	8003556 <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a95      	ldr	r2, [pc, #596]	@ (800321c <HAL_ADC_Init+0x284>)
 8002fc6:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d109      	bne.n	8002fe4 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7fe fb05 	bl	80015e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff ff37 	bl	8002e5c <LL_ADC_IsDeepPowerDownEnabled>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d004      	beq.n	8002ffe <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff ff1d 	bl	8002e38 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff ff52 	bl	8002eac <LL_ADC_IsInternalRegulatorEnabled>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d115      	bne.n	800303a <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff ff36 	bl	8002e84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003018:	4b81      	ldr	r3, [pc, #516]	@ (8003220 <HAL_ADC_Init+0x288>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	099b      	lsrs	r3, r3, #6
 800301e:	4a81      	ldr	r2, [pc, #516]	@ (8003224 <HAL_ADC_Init+0x28c>)
 8003020:	fba2 2303 	umull	r2, r3, r2, r3
 8003024:	099b      	lsrs	r3, r3, #6
 8003026:	3301      	adds	r3, #1
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800302c:	e002      	b.n	8003034 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	3b01      	subs	r3, #1
 8003032:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f9      	bne.n	800302e <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff ff34 	bl	8002eac <LL_ADC_IsInternalRegulatorEnabled>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10e      	bne.n	8003068 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800304e:	f043 0210 	orr.w	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800305a:	f043 0201 	orr.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff6c 	bl	8002f4a <LL_ADC_REG_IsConversionOngoing>
 8003072:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b00      	cmp	r3, #0
 800307e:	f040 825f 	bne.w	8003540 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	f040 825b 	bne.w	8003540 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800308e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003092:	f043 0202 	orr.w	r2, r3, #2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff ff2c 	bl	8002efc <LL_ADC_IsEnabled>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d14f      	bne.n	800314a <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a5b      	ldr	r2, [pc, #364]	@ (800321c <HAL_ADC_Init+0x284>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d037      	beq.n	8003124 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a5b      	ldr	r2, [pc, #364]	@ (8003228 <HAL_ADC_Init+0x290>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d004      	beq.n	80030c8 <HAL_ADC_Init+0x130>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a5a      	ldr	r2, [pc, #360]	@ (800322c <HAL_ADC_Init+0x294>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d10e      	bne.n	80030e6 <HAL_ADC_Init+0x14e>
 80030c8:	4857      	ldr	r0, [pc, #348]	@ (8003228 <HAL_ADC_Init+0x290>)
 80030ca:	f7ff ff17 	bl	8002efc <LL_ADC_IsEnabled>
 80030ce:	4604      	mov	r4, r0
 80030d0:	4856      	ldr	r0, [pc, #344]	@ (800322c <HAL_ADC_Init+0x294>)
 80030d2:	f7ff ff13 	bl	8002efc <LL_ADC_IsEnabled>
 80030d6:	4603      	mov	r3, r0
 80030d8:	4323      	orrs	r3, r4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bf0c      	ite	eq
 80030de:	2301      	moveq	r3, #1
 80030e0:	2300      	movne	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	e008      	b.n	80030f8 <HAL_ADC_Init+0x160>
 80030e6:	484d      	ldr	r0, [pc, #308]	@ (800321c <HAL_ADC_Init+0x284>)
 80030e8:	f7ff ff08 	bl	8002efc <LL_ADC_IsEnabled>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	bf0c      	ite	eq
 80030f2:	2301      	moveq	r3, #1
 80030f4:	2300      	movne	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d026      	beq.n	800314a <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a49      	ldr	r2, [pc, #292]	@ (8003228 <HAL_ADC_Init+0x290>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d004      	beq.n	8003110 <HAL_ADC_Init+0x178>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a48      	ldr	r2, [pc, #288]	@ (800322c <HAL_ADC_Init+0x294>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d101      	bne.n	8003114 <HAL_ADC_Init+0x17c>
 8003110:	4a47      	ldr	r2, [pc, #284]	@ (8003230 <HAL_ADC_Init+0x298>)
 8003112:	e000      	b.n	8003116 <HAL_ADC_Init+0x17e>
 8003114:	4a47      	ldr	r2, [pc, #284]	@ (8003234 <HAL_ADC_Init+0x29c>)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4619      	mov	r1, r3
 800311c:	4610      	mov	r0, r2
 800311e:	f7ff fbe9 	bl	80028f4 <LL_ADC_SetCommonClock>
 8003122:	e012      	b.n	800314a <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4619      	mov	r1, r3
 800312e:	4610      	mov	r0, r2
 8003130:	f7ff fc14 	bl	800295c <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8003134:	4b3f      	ldr	r3, [pc, #252]	@ (8003234 <HAL_ADC_Init+0x29c>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003144:	493b      	ldr	r1, [pc, #236]	@ (8003234 <HAL_ADC_Init+0x29c>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a33      	ldr	r2, [pc, #204]	@ (800321c <HAL_ADC_Init+0x284>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d010      	beq.n	8003176 <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800315a:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003160:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8003166:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800316e:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003170:	4313      	orrs	r3, r2
 8003172:	623b      	str	r3, [r7, #32]
 8003174:	e035      	b.n	80031e2 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	7f1b      	ldrb	r3, [r3, #28]
 800317a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003182:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003184:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800318a:	2a00      	cmp	r2, #0
 800318c:	d002      	beq.n	8003194 <HAL_ADC_Init+0x1fc>
 800318e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003192:	e000      	b.n	8003196 <HAL_ADC_Init+0x1fe>
 8003194:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003196:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800319c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	da04      	bge.n	80031b0 <HAL_ADC_Init+0x218>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031ae:	e001      	b.n	80031b4 <HAL_ADC_Init+0x21c>
 80031b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 80031b4:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	491b      	ldr	r1, [pc, #108]	@ (8003228 <HAL_ADC_Init+0x290>)
 80031bc:	428b      	cmp	r3, r1
 80031be:	d004      	beq.n	80031ca <HAL_ADC_Init+0x232>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4919      	ldr	r1, [pc, #100]	@ (800322c <HAL_ADC_Init+0x294>)
 80031c6:	428b      	cmp	r3, r1
 80031c8:	d103      	bne.n	80031d2 <HAL_ADC_Init+0x23a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031d0:	e003      	b.n	80031da <HAL_ADC_Init+0x242>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031d8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80031da:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031dc:	6a3a      	ldr	r2, [r7, #32]
 80031de:	4313      	orrs	r3, r2
 80031e0:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d131      	bne.n	8003250 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0a      	ldr	r2, [pc, #40]	@ (800321c <HAL_ADC_Init+0x284>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d007      	beq.n	8003206 <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	3b01      	subs	r3, #1
 80031fc:	045b      	lsls	r3, r3, #17
 80031fe:	6a3a      	ldr	r2, [r7, #32]
 8003200:	4313      	orrs	r3, r2
 8003202:	623b      	str	r3, [r7, #32]
 8003204:	e024      	b.n	8003250 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800320c:	2b00      	cmp	r3, #0
 800320e:	d113      	bne.n	8003238 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003216:	623b      	str	r3, [r7, #32]
 8003218:	e01a      	b.n	8003250 <HAL_ADC_Init+0x2b8>
 800321a:	bf00      	nop
 800321c:	46021000 	.word	0x46021000
 8003220:	2000001c 	.word	0x2000001c
 8003224:	053e2d63 	.word	0x053e2d63
 8003228:	42028000 	.word	0x42028000
 800322c:	42028100 	.word	0x42028100
 8003230:	42028300 	.word	0x42028300
 8003234:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800323c:	f043 0220 	orr.w	r2, r3, #32
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003248:	f043 0201 	orr.w	r2, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a75      	ldr	r2, [pc, #468]	@ (800342c <HAL_ADC_Init+0x494>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d018      	beq.n	800328c <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003266:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800326e:	4313      	orrs	r3, r2
 8003270:	6a3a      	ldr	r2, [r7, #32]
 8003272:	4313      	orrs	r3, r2
 8003274:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	4b6c      	ldr	r3, [pc, #432]	@ (8003430 <HAL_ADC_Init+0x498>)
 800327e:	4013      	ands	r3, r2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	6a39      	ldr	r1, [r7, #32]
 8003286:	430b      	orrs	r3, r1
 8003288:	60d3      	str	r3, [r2, #12]
 800328a:	e031      	b.n	80032f0 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003290:	2b00      	cmp	r3, #0
 8003292:	d009      	beq.n	80032a8 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003298:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a0:	4313      	orrs	r3, r2
 80032a2:	6a3a      	ldr	r2, [r7, #32]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	4b61      	ldr	r3, [pc, #388]	@ (8003434 <HAL_ADC_Init+0x49c>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	6a39      	ldr	r1, [r7, #32]
 80032b8:	430b      	orrs	r3, r1
 80032ba:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1a      	ldr	r2, [r3, #32]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d008      	beq.n	80032f0 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a4d      	ldr	r2, [pc, #308]	@ (800342c <HAL_ADC_Init+0x494>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	f000 80a4 	beq.w	8003444 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff fe22 	bl	8002f4a <LL_ADC_REG_IsConversionOngoing>
 8003306:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fe2f 	bl	8002f70 <LL_ADC_INJ_IsConversionOngoing>
 8003312:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d166      	bne.n	80033e8 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d163      	bne.n	80033e8 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	7f1b      	ldrb	r3, [r3, #28]
 8003324:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4943      	ldr	r1, [pc, #268]	@ (8003438 <HAL_ADC_Init+0x4a0>)
 800332c:	428b      	cmp	r3, r1
 800332e:	d004      	beq.n	800333a <HAL_ADC_Init+0x3a2>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4941      	ldr	r1, [pc, #260]	@ (800343c <HAL_ADC_Init+0x4a4>)
 8003336:	428b      	cmp	r3, r1
 8003338:	d102      	bne.n	8003340 <HAL_ADC_Init+0x3a8>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333e:	e002      	b.n	8003346 <HAL_ADC_Init+0x3ae>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003344:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003346:	4313      	orrs	r3, r2
 8003348:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003354:	f023 0303 	bic.w	r3, r3, #3
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	6a39      	ldr	r1, [r7, #32]
 800335e:	430b      	orrs	r3, r1
 8003360:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	4619      	mov	r1, r3
 8003374:	4610      	mov	r0, r2
 8003376:	f7ff fb99 	bl	8002aac <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003380:	2b01      	cmp	r3, #1
 8003382:	d11e      	bne.n	80033c2 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003388:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	4b2b      	ldr	r3, [pc, #172]	@ (8003440 <HAL_ADC_Init+0x4a8>)
 8003392:	4013      	ands	r3, r2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003398:	0411      	lsls	r1, r2, #16
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800339e:	4311      	orrs	r1, r2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80033a4:	4311      	orrs	r1, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80033aa:	4311      	orrs	r1, r2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80033b0:	0892      	lsrs	r2, r2, #2
 80033b2:	430a      	orrs	r2, r1
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	611a      	str	r2, [r3, #16]
 80033c0:	e007      	b.n	80033d2 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0201 	bic.w	r2, r2, #1
 80033d0:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d10c      	bne.n	800340a <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	f023 010f 	bic.w	r1, r3, #15
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fe:	1e5a      	subs	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	631a      	str	r2, [r3, #48]	@ 0x30
 8003408:	e007      	b.n	800341a <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 020f 	bic.w	r2, r2, #15
 8003418:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800341e:	f023 0303 	bic.w	r3, r3, #3
 8003422:	f043 0201 	orr.w	r2, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800342a:	e092      	b.n	8003552 <HAL_ADC_Init+0x5ba>
 800342c:	46021000 	.word	0x46021000
 8003430:	fff0c013 	.word	0xfff0c013
 8003434:	ffde800d 	.word	0xffde800d
 8003438:	42028000 	.word	0x42028000
 800343c:	42028100 	.word	0x42028100
 8003440:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800344a:	2b01      	cmp	r3, #1
 800344c:	d111      	bne.n	8003472 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003456:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 800345c:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8003462:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	4313      	orrs	r3, r2
 8003468:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	4b39      	ldr	r3, [pc, #228]	@ (8003560 <HAL_ADC_Init+0x5c8>)
 800347a:	4013      	ands	r3, r2
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	69f9      	ldr	r1, [r7, #28]
 8003482:	430b      	orrs	r3, r1
 8003484:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800348e:	461a      	mov	r2, r3
 8003490:	2100      	movs	r1, #0
 8003492:	f7ff fb2e 	bl	8002af2 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800349e:	461a      	mov	r2, r3
 80034a0:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80034a4:	f7ff fb25 	bl	8002af2 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d108      	bne.n	80034c2 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f062 020f 	orn	r2, r2, #15
 80034be:	629a      	str	r2, [r3, #40]	@ 0x28
 80034c0:	e018      	b.n	80034f4 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034ca:	d113      	bne.n	80034f4 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d6:	3b01      	subs	r3, #1
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	f003 031c 	and.w	r3, r3, #28
 80034de:	f06f 020f 	mvn.w	r2, #15
 80034e2:	fa02 f103 	lsl.w	r1, r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003564 <HAL_ADC_Init+0x5cc>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	6a3a      	ldr	r2, [r7, #32]
 8003500:	429a      	cmp	r2, r3
 8003502:	d10b      	bne.n	800351c <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800350e:	f023 0303 	bic.w	r3, r3, #3
 8003512:	f043 0201 	orr.w	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800351a:	e01a      	b.n	8003552 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003520:	f023 0312 	bic.w	r3, r3, #18
 8003524:	f043 0210 	orr.w	r2, r3, #16
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003530:	f043 0201 	orr.w	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800353e:	e008      	b.n	8003552 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003544:	f043 0210 	orr.w	r2, r3, #16
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8003552:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003556:	4618      	mov	r0, r3
 8003558:	372c      	adds	r7, #44	@ 0x2c
 800355a:	46bd      	mov	sp, r7
 800355c:	bd90      	pop	{r4, r7, pc}
 800355e:	bf00      	nop
 8003560:	f7fffc02 	.word	0xf7fffc02
 8003564:	833ffff3 	.word	0x833ffff3

08003568 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b0a2      	sub	sp, #136	@ 0x88
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a98      	ldr	r2, [pc, #608]	@ (80037dc <HAL_ADC_Start_DMA+0x274>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d004      	beq.n	8003588 <HAL_ADC_Start_DMA+0x20>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a97      	ldr	r2, [pc, #604]	@ (80037e0 <HAL_ADC_Start_DMA+0x278>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d101      	bne.n	800358c <HAL_ADC_Start_DMA+0x24>
 8003588:	4b96      	ldr	r3, [pc, #600]	@ (80037e4 <HAL_ADC_Start_DMA+0x27c>)
 800358a:	e000      	b.n	800358e <HAL_ADC_Start_DMA+0x26>
 800358c:	4b96      	ldr	r3, [pc, #600]	@ (80037e8 <HAL_ADC_Start_DMA+0x280>)
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff fc36 	bl	8002e00 <LL_ADC_GetMultimode>
 8003594:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fcd5 	bl	8002f4a <LL_ADC_REG_IsConversionOngoing>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f040 8111 	bne.w	80037ca <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_ADC_Start_DMA+0x4e>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e10e      	b.n	80037d4 <HAL_ADC_Start_DMA+0x26c>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d006      	beq.n	80035d2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035c6:	2b05      	cmp	r3, #5
 80035c8:	d003      	beq.n	80035d2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035cc:	2b09      	cmp	r3, #9
 80035ce:	f040 80f4 	bne.w	80037ba <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f001 fa2c 	bl	8004a30 <ADC_Enable>
 80035d8:	4603      	mov	r3, r0
 80035da:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80035de:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f040 80e4 	bne.w	80037b0 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a7a      	ldr	r2, [pc, #488]	@ (80037ec <HAL_ADC_Start_DMA+0x284>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d026      	beq.n	8003654 <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a75      	ldr	r2, [pc, #468]	@ (80037e0 <HAL_ADC_Start_DMA+0x278>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d002      	beq.n	8003616 <HAL_ADC_Start_DMA+0xae>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	e000      	b.n	8003618 <HAL_ADC_Start_DMA+0xb0>
 8003616:	4b71      	ldr	r3, [pc, #452]	@ (80037dc <HAL_ADC_Start_DMA+0x274>)
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	4293      	cmp	r3, r2
 800361e:	d002      	beq.n	8003626 <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003620:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d105      	bne.n	8003632 <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800362a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003636:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d006      	beq.n	800364c <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003642:	f023 0206 	bic.w	r2, r3, #6
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	67da      	str	r2, [r3, #124]	@ 0x7c
 800364a:	e006      	b.n	800365a <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003652:	e002      	b.n	800365a <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365e:	4a64      	ldr	r2, [pc, #400]	@ (80037f0 <HAL_ADC_Start_DMA+0x288>)
 8003660:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003666:	4a63      	ldr	r2, [pc, #396]	@ (80037f4 <HAL_ADC_Start_DMA+0x28c>)
 8003668:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366e:	4a62      	ldr	r2, [pc, #392]	@ (80037f8 <HAL_ADC_Start_DMA+0x290>)
 8003670:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	221c      	movs	r2, #28
 8003678:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0210 	orr.w	r2, r2, #16
 8003690:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a55      	ldr	r2, [pc, #340]	@ (80037ec <HAL_ADC_Start_DMA+0x284>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d107      	bne.n	80036ac <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d04f      	beq.n	800375a <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d046      	beq.n	8003752 <HAL_ADC_Start_DMA+0x1ea>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d040      	beq.n	8003752 <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	f107 0310 	add.w	r3, r7, #16
 80036dc:	4611      	mov	r1, r2
 80036de:	4618      	mov	r0, r3
 80036e0:	f002 fdf8 	bl	80062d4 <HAL_DMAEx_List_GetNodeConfig>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e072      	b.n	80037d4 <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80036ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d104      	bne.n	80036fe <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036fc:	e00a      	b.n	8003714 <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80036fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003700:	2b01      	cmp	r3, #1
 8003702:	d104      	bne.n	800370e <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800370c:	e002      	b.n	8003714 <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003720:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003744:	4618      	mov	r0, r3
 8003746:	f002 fd1b 	bl	8006180 <HAL_DMAEx_List_Start_IT>
 800374a:	4603      	mov	r3, r0
 800374c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003750:	e028      	b.n	80037a4 <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003758:	e024      	b.n	80037a4 <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	2b02      	cmp	r3, #2
 8003762:	d104      	bne.n	800376e <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800376c:	e00c      	b.n	8003788 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d104      	bne.n	8003782 <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003780:	e002      	b.n	8003788 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3340      	adds	r3, #64	@ 0x40
 8003792:	4619      	mov	r1, r3
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800379a:	f001 fd5f 	bl	800525c <HAL_DMA_Start_IT>
 800379e:	4603      	mov	r3, r0
 80037a0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff fbba 	bl	8002f22 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80037ae:	e00f      	b.n	80037d0 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 80037b8:	e00a      	b.n	80037d0 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 80037c8:	e002      	b.n	80037d0 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037ca:	2302      	movs	r3, #2
 80037cc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 80037d0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3788      	adds	r7, #136	@ 0x88
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	42028000 	.word	0x42028000
 80037e0:	42028100 	.word	0x42028100
 80037e4:	42028300 	.word	0x42028300
 80037e8:	46021300 	.word	0x46021300
 80037ec:	46021000 	.word	0x46021000
 80037f0:	08004b65 	.word	0x08004b65
 80037f4:	08004c3d 	.word	0x08004c3d
 80037f8:	08004c59 	.word	0x08004c59

080037fc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	@ 0x28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003804:	2300      	movs	r3, #0
 8003806:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a77      	ldr	r2, [pc, #476]	@ (80039fc <HAL_ADC_IRQHandler+0x200>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d004      	beq.n	800382c <HAL_ADC_IRQHandler+0x30>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a76      	ldr	r2, [pc, #472]	@ (8003a00 <HAL_ADC_IRQHandler+0x204>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d101      	bne.n	8003830 <HAL_ADC_IRQHandler+0x34>
 800382c:	4b75      	ldr	r3, [pc, #468]	@ (8003a04 <HAL_ADC_IRQHandler+0x208>)
 800382e:	e000      	b.n	8003832 <HAL_ADC_IRQHandler+0x36>
 8003830:	4b75      	ldr	r3, [pc, #468]	@ (8003a08 <HAL_ADC_IRQHandler+0x20c>)
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fae4 	bl	8002e00 <LL_ADC_GetMultimode>
 8003838:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d017      	beq.n	8003874 <HAL_ADC_IRQHandler+0x78>
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d012      	beq.n	8003874 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b00      	cmp	r3, #0
 8003858:	d105      	bne.n	8003866 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800385e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f001 fa2e 	bl	8004cc8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2202      	movs	r2, #2
 8003872:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b00      	cmp	r3, #0
 800387c:	d004      	beq.n	8003888 <HAL_ADC_IRQHandler+0x8c>
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10b      	bne.n	80038a0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 80d1 	beq.w	8003a36 <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80cb 	beq.w	8003a36 <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d105      	bne.n	80038b8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a53      	ldr	r2, [pc, #332]	@ (8003a0c <HAL_ADC_IRQHandler+0x210>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d06c      	beq.n	800399c <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff f932 	bl	8002b30 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 80aa 	beq.w	8003a28 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a49      	ldr	r2, [pc, #292]	@ (8003a00 <HAL_ADC_IRQHandler+0x204>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d002      	beq.n	80038e4 <HAL_ADC_IRQHandler+0xe8>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	e000      	b.n	80038e6 <HAL_ADC_IRQHandler+0xea>
 80038e4:	4b45      	ldr	r3, [pc, #276]	@ (80039fc <HAL_ADC_IRQHandler+0x200>)
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d008      	beq.n	8003900 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b05      	cmp	r3, #5
 80038f8:	d002      	beq.n	8003900 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b09      	cmp	r3, #9
 80038fe:	d104      	bne.n	800390a <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	623b      	str	r3, [r7, #32]
 8003908:	e00c      	b.n	8003924 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a3c      	ldr	r2, [pc, #240]	@ (8003a00 <HAL_ADC_IRQHandler+0x204>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d002      	beq.n	800391a <HAL_ADC_IRQHandler+0x11e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	e000      	b.n	800391c <HAL_ADC_IRQHandler+0x120>
 800391a:	4b38      	ldr	r3, [pc, #224]	@ (80039fc <HAL_ADC_IRQHandler+0x200>)
 800391c:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d17c      	bne.n	8003a28 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b08      	cmp	r3, #8
 800393a:	d175      	bne.n	8003a28 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fb02 	bl	8002f4a <LL_ADC_REG_IsConversionOngoing>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d11a      	bne.n	8003982 <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 020c 	bic.w	r2, r2, #12
 800395a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003960:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800396c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d159      	bne.n	8003a28 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003978:	f043 0201 	orr.w	r2, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	679a      	str	r2, [r3, #120]	@ 0x78
 8003980:	e052      	b.n	8003a28 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003986:	f043 0210 	orr.w	r2, r3, #16
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003992:	f043 0201 	orr.w	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	67da      	str	r2, [r3, #124]	@ 0x7c
 800399a:	e045      	b.n	8003a28 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff f8c5 	bl	8002b30 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d03d      	beq.n	8003a28 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d138      	bne.n	8003a28 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d131      	bne.n	8003a28 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff fabe 	bl	8002f4a <LL_ADC_REG_IsConversionOngoing>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d11d      	bne.n	8003a10 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 020c 	bic.w	r2, r2, #12
 80039e2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	f043 0201 	orr.w	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	679a      	str	r2, [r3, #120]	@ 0x78
 80039f8:	e016      	b.n	8003a28 <HAL_ADC_IRQHandler+0x22c>
 80039fa:	bf00      	nop
 80039fc:	42028000 	.word	0x42028000
 8003a00:	42028100 	.word	0x42028100
 8003a04:	42028300 	.word	0x42028300
 8003a08:	46021300 	.word	0x46021300
 8003a0c:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a14:	f043 0220 	orr.w	r2, r3, #32
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a20:	f043 0201 	orr.w	r2, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f99d 	bl	8003d68 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	220c      	movs	r2, #12
 8003a34:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a8c      	ldr	r2, [pc, #560]	@ (8003c6c <HAL_ADC_IRQHandler+0x470>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	f000 8095 	beq.w	8003b6c <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d004      	beq.n	8003a56 <HAL_ADC_IRQHandler+0x25a>
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10a      	bne.n	8003a6c <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8085 	beq.w	8003b6c <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d07f      	beq.n	8003b6c <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d105      	bne.n	8003a84 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a7c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff f91e 	bl	8002cca <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003a8e:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff f84b 	bl	8002b30 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a9a:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a73      	ldr	r2, [pc, #460]	@ (8003c70 <HAL_ADC_IRQHandler+0x474>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d002      	beq.n	8003aac <HAL_ADC_IRQHandler+0x2b0>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	e000      	b.n	8003aae <HAL_ADC_IRQHandler+0x2b2>
 8003aac:	4b71      	ldr	r3, [pc, #452]	@ (8003c74 <HAL_ADC_IRQHandler+0x478>)
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6812      	ldr	r2, [r2, #0]
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d008      	beq.n	8003ac8 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2b06      	cmp	r3, #6
 8003ac0:	d002      	beq.n	8003ac8 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b07      	cmp	r3, #7
 8003ac6:	d104      	bne.n	8003ad2 <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	623b      	str	r3, [r7, #32]
 8003ad0:	e00c      	b.n	8003aec <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a66      	ldr	r2, [pc, #408]	@ (8003c70 <HAL_ADC_IRQHandler+0x474>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d002      	beq.n	8003ae2 <HAL_ADC_IRQHandler+0x2e6>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	e000      	b.n	8003ae4 <HAL_ADC_IRQHandler+0x2e8>
 8003ae2:	4b64      	ldr	r3, [pc, #400]	@ (8003c74 <HAL_ADC_IRQHandler+0x478>)
 8003ae4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d035      	beq.n	8003b5e <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <HAL_ADC_IRQHandler+0x310>
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d02d      	beq.n	8003b5e <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d128      	bne.n	8003b5e <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b16:	2b40      	cmp	r3, #64	@ 0x40
 8003b18:	d121      	bne.n	8003b5e <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fa26 	bl	8002f70 <LL_ADC_INJ_IsConversionOngoing>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d119      	bne.n	8003b5e <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b38:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d105      	bne.n	8003b5e <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b56:	f043 0201 	orr.w	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f001 f894 	bl	8004c8c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2260      	movs	r2, #96	@ 0x60
 8003b6a:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d011      	beq.n	8003b9a <HAL_ADC_IRQHandler+0x39e>
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00c      	beq.n	8003b9a <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b84:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f8ff 	bl	8003d90 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2280      	movs	r2, #128	@ 0x80
 8003b98:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d012      	beq.n	8003bca <HAL_ADC_IRQHandler+0x3ce>
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00d      	beq.n	8003bca <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bb2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f001 f870 	bl	8004ca0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003bc8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d012      	beq.n	8003bfa <HAL_ADC_IRQHandler+0x3fe>
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00d      	beq.n	8003bfa <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003be2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f001 f862 	bl	8004cb4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bf8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d05d      	beq.n	8003cc0 <HAL_ADC_IRQHandler+0x4c4>
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d058      	beq.n	8003cc0 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d102      	bne.n	8003c1c <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 8003c16:	2301      	movs	r3, #1
 8003c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c1a:	e03b      	b.n	8003c94 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a12      	ldr	r2, [pc, #72]	@ (8003c6c <HAL_ADC_IRQHandler+0x470>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d02c      	beq.n	8003c80 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d015      	beq.n	8003c58 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a10      	ldr	r2, [pc, #64]	@ (8003c74 <HAL_ADC_IRQHandler+0x478>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d004      	beq.n	8003c40 <HAL_ADC_IRQHandler+0x444>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8003c70 <HAL_ADC_IRQHandler+0x474>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d101      	bne.n	8003c44 <HAL_ADC_IRQHandler+0x448>
 8003c40:	4b0d      	ldr	r3, [pc, #52]	@ (8003c78 <HAL_ADC_IRQHandler+0x47c>)
 8003c42:	e000      	b.n	8003c46 <HAL_ADC_IRQHandler+0x44a>
 8003c44:	4b0d      	ldr	r3, [pc, #52]	@ (8003c7c <HAL_ADC_IRQHandler+0x480>)
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff f8e8 	bl	8002e1c <LL_ADC_GetMultiDMATransfer>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d020      	beq.n	8003c94 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8003c52:	2301      	movs	r3, #1
 8003c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c56:	e01d      	b.n	8003c94 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d016      	beq.n	8003c94 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8003c66:	2301      	movs	r3, #1
 8003c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c6a:	e013      	b.n	8003c94 <HAL_ADC_IRQHandler+0x498>
 8003c6c:	46021000 	.word	0x46021000
 8003c70:	42028100 	.word	0x42028100
 8003c74:	42028000 	.word	0x42028000
 8003c78:	42028300 	.word	0x42028300
 8003c7c:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff f812 	bl	8002cae <LL_ADC_REG_GetDMATransfer>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 8003c90:	2301      	movs	r3, #1
 8003c92:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d10e      	bne.n	8003cb8 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c9e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003caa:	f043 0202 	orr.w	r2, r3, #2
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f876 	bl	8003da4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2210      	movs	r2, #16
 8003cbe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d01b      	beq.n	8003d02 <HAL_ADC_IRQHandler+0x506>
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d016      	beq.n	8003d02 <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d105      	bne.n	8003cec <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ce4:	f043 0201 	orr.w	r2, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f877 	bl	8003de0 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0201 	bic.w	r2, r2, #1
 8003d00:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a17      	ldr	r2, [pc, #92]	@ (8003d64 <HAL_ADC_IRQHandler+0x568>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d126      	bne.n	8003d5a <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00c      	beq.n	8003d30 <HAL_ADC_IRQHandler+0x534>
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f849 	bl	8003db8 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d2e:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00f      	beq.n	8003d5a <HAL_ADC_IRQHandler+0x55e>
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f841 	bl	8003dcc <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d58:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003d5a:	bf00      	nop
 8003d5c:	3728      	adds	r7, #40	@ 0x28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	46021000 	.word	0x46021000

08003d68 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b0b7      	sub	sp, #220	@ 0xdc
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4aa8      	ldr	r2, [pc, #672]	@ (80040b0 <HAL_ADC_ConfigChannel+0x2bc>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d103      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d102      	bne.n	8003e2a <HAL_ADC_ConfigChannel+0x36>
 8003e24:	2302      	movs	r3, #2
 8003e26:	f000 bdfe 	b.w	8004a26 <HAL_ADC_ConfigChannel+0xc32>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff f887 	bl	8002f4a <LL_ADC_REG_IsConversionOngoing>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f040 85c1 	bne.w	80049c6 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a99      	ldr	r2, [pc, #612]	@ (80040b0 <HAL_ADC_ConfigChannel+0x2bc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	f000 8409 	beq.w	8004662 <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d108      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x7a>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	0e9b      	lsrs	r3, r3, #26
 8003e62:	f003 031f 	and.w	r3, r3, #31
 8003e66:	2201      	movs	r2, #1
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	e01d      	b.n	8003eaa <HAL_ADC_ConfigChannel+0xb6>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e7a:	fa93 f3a3 	rbit	r3, r3
 8003e7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003e82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003e86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003e8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8003e92:	2320      	movs	r3, #32
 8003e94:	e004      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8003e96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003e9a:	fab3 f383 	clz	r3, r3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	69d1      	ldr	r1, [r2, #28]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	6859      	ldr	r1, [r3, #4]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f7fe fe47 	bl	8002b58 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff f83b 	bl	8002f4a <LL_ADC_REG_IsConversionOngoing>
 8003ed4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff f847 	bl	8002f70 <LL_ADC_INJ_IsConversionOngoing>
 8003ee2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ee6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 81df 	bne.w	80042ae <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f040 81da 	bne.w	80042ae <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6819      	ldr	r1, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	461a      	mov	r2, r3
 8003f08:	f7fe fef2 	bl	8002cf0 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	695a      	ldr	r2, [r3, #20]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	089b      	lsrs	r3, r3, #2
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d046      	beq.n	8003fbc <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6919      	ldr	r1, [r3, #16]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f3e:	f7fe fd2d 	bl	800299c <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	6919      	ldr	r1, [r3, #16]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f7fe fd5b 	bl	8002a0a <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	7e9b      	ldrb	r3, [r3, #26]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d11e      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d102      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x17e>
 8003f6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f70:	e000      	b.n	8003f74 <HAL_ADC_ConfigChannel+0x180>
 8003f72:	2300      	movs	r3, #0
 8003f74:	461a      	mov	r2, r3
 8003f76:	f7fe fd7e 	bl	8002a76 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d102      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x19c>
 8003f8a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003f8e:	e000      	b.n	8003f92 <HAL_ADC_ConfigChannel+0x19e>
 8003f90:	2300      	movs	r3, #0
 8003f92:	461a      	mov	r2, r3
 8003f94:	f7fe fd54 	bl	8002a40 <LL_ADC_SetOffsetSignedSaturation>
 8003f98:	e189      	b.n	80042ae <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f7fe fd66 	bl	8002a76 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	f7fe fd43 	bl	8002a40 <LL_ADC_SetOffsetSignedSaturation>
 8003fba:	e178      	b.n	80042ae <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe fd0b 	bl	80029de <LL_ADC_GetOffsetChannel>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10a      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x1f4>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe fd00 	bl	80029de <LL_ADC_GetOffsetChannel>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	0e9b      	lsrs	r3, r3, #26
 8003fe2:	f003 021f 	and.w	r2, r3, #31
 8003fe6:	e01e      	b.n	8004026 <HAL_ADC_ConfigChannel+0x232>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2100      	movs	r1, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fe fcf5 	bl	80029de <LL_ADC_GetOffsetChannel>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ffe:	fa93 f3a3 	rbit	r3, r3
 8004002:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004006:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800400a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800400e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8004016:	2320      	movs	r3, #32
 8004018:	e004      	b.n	8004024 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 800401a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800401e:	fab3 f383 	clz	r3, r3
 8004022:	b2db      	uxtb	r3, r3
 8004024:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d105      	bne.n	800403e <HAL_ADC_ConfigChannel+0x24a>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	0e9b      	lsrs	r3, r3, #26
 8004038:	f003 031f 	and.w	r3, r3, #31
 800403c:	e018      	b.n	8004070 <HAL_ADC_ConfigChannel+0x27c>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004046:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800404a:	fa93 f3a3 	rbit	r3, r3
 800404e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004052:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004056:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800405a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8004062:	2320      	movs	r3, #32
 8004064:	e004      	b.n	8004070 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8004066:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800406a:	fab3 f383 	clz	r3, r3
 800406e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004070:	429a      	cmp	r2, r3
 8004072:	d107      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	2300      	movs	r3, #0
 800407e:	2100      	movs	r1, #0
 8004080:	f7fe fc8c 	bl	800299c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2101      	movs	r1, #1
 800408a:	4618      	mov	r0, r3
 800408c:	f7fe fca7 	bl	80029de <LL_ADC_GetOffsetChannel>
 8004090:	4603      	mov	r3, r0
 8004092:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10c      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x2c0>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2101      	movs	r1, #1
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fe fc9c 	bl	80029de <LL_ADC_GetOffsetChannel>
 80040a6:	4603      	mov	r3, r0
 80040a8:	0e9b      	lsrs	r3, r3, #26
 80040aa:	f003 021f 	and.w	r2, r3, #31
 80040ae:	e020      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x2fe>
 80040b0:	46021000 	.word	0x46021000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2101      	movs	r1, #1
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe fc8f 	bl	80029de <LL_ADC_GetOffsetChannel>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040ca:	fa93 f3a3 	rbit	r3, r3
 80040ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80040d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80040da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 80040e2:	2320      	movs	r3, #32
 80040e4:	e004      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 80040e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040ea:	fab3 f383 	clz	r3, r3
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d105      	bne.n	800410a <HAL_ADC_ConfigChannel+0x316>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	0e9b      	lsrs	r3, r3, #26
 8004104:	f003 031f 	and.w	r3, r3, #31
 8004108:	e018      	b.n	800413c <HAL_ADC_ConfigChannel+0x348>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004116:	fa93 f3a3 	rbit	r3, r3
 800411a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800411e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004122:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004126:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 800412e:	2320      	movs	r3, #32
 8004130:	e004      	b.n	800413c <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8004132:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004136:	fab3 f383 	clz	r3, r3
 800413a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800413c:	429a      	cmp	r2, r3
 800413e:	d107      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6818      	ldr	r0, [r3, #0]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	2300      	movs	r3, #0
 800414a:	2101      	movs	r1, #1
 800414c:	f7fe fc26 	bl	800299c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2102      	movs	r1, #2
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe fc41 	bl	80029de <LL_ADC_GetOffsetChannel>
 800415c:	4603      	mov	r3, r0
 800415e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10a      	bne.n	800417c <HAL_ADC_ConfigChannel+0x388>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2102      	movs	r1, #2
 800416c:	4618      	mov	r0, r3
 800416e:	f7fe fc36 	bl	80029de <LL_ADC_GetOffsetChannel>
 8004172:	4603      	mov	r3, r0
 8004174:	0e9b      	lsrs	r3, r3, #26
 8004176:	f003 021f 	and.w	r2, r3, #31
 800417a:	e01a      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x3be>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2102      	movs	r1, #2
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe fc2b 	bl	80029de <LL_ADC_GetOffsetChannel>
 8004188:	4603      	mov	r3, r0
 800418a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800418e:	fa93 f3a3 	rbit	r3, r3
 8004192:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004194:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004196:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800419a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80041a2:	2320      	movs	r3, #32
 80041a4:	e004      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 80041a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041aa:	fab3 f383 	clz	r3, r3
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d105      	bne.n	80041ca <HAL_ADC_ConfigChannel+0x3d6>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	0e9b      	lsrs	r3, r3, #26
 80041c4:	f003 031f 	and.w	r3, r3, #31
 80041c8:	e011      	b.n	80041ee <HAL_ADC_ConfigChannel+0x3fa>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041d2:	fa93 f3a3 	rbit	r3, r3
 80041d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80041d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041da:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80041dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80041e2:	2320      	movs	r3, #32
 80041e4:	e003      	b.n	80041ee <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80041e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041e8:	fab3 f383 	clz	r3, r3
 80041ec:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d107      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	2300      	movs	r3, #0
 80041fc:	2102      	movs	r1, #2
 80041fe:	f7fe fbcd 	bl	800299c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2103      	movs	r1, #3
 8004208:	4618      	mov	r0, r3
 800420a:	f7fe fbe8 	bl	80029de <LL_ADC_GetOffsetChannel>
 800420e:	4603      	mov	r3, r0
 8004210:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10a      	bne.n	800422e <HAL_ADC_ConfigChannel+0x43a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2103      	movs	r1, #3
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe fbdd 	bl	80029de <LL_ADC_GetOffsetChannel>
 8004224:	4603      	mov	r3, r0
 8004226:	0e9b      	lsrs	r3, r3, #26
 8004228:	f003 021f 	and.w	r2, r3, #31
 800422c:	e017      	b.n	800425e <HAL_ADC_ConfigChannel+0x46a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2103      	movs	r1, #3
 8004234:	4618      	mov	r0, r3
 8004236:	f7fe fbd2 	bl	80029de <LL_ADC_GetOffsetChannel>
 800423a:	4603      	mov	r3, r0
 800423c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004240:	fa93 f3a3 	rbit	r3, r3
 8004244:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004246:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004248:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800424a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8004250:	2320      	movs	r3, #32
 8004252:	e003      	b.n	800425c <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8004254:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004256:	fab3 f383 	clz	r3, r3
 800425a:	b2db      	uxtb	r3, r3
 800425c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d105      	bne.n	8004276 <HAL_ADC_ConfigChannel+0x482>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	0e9b      	lsrs	r3, r3, #26
 8004270:	f003 031f 	and.w	r3, r3, #31
 8004274:	e011      	b.n	800429a <HAL_ADC_ConfigChannel+0x4a6>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800427e:	fa93 f3a3 	rbit	r3, r3
 8004282:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004286:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004288:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 800428e:	2320      	movs	r3, #32
 8004290:	e003      	b.n	800429a <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8004292:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004294:	fab3 f383 	clz	r3, r3
 8004298:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800429a:	429a      	cmp	r2, r3
 800429c:	d107      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	2300      	movs	r3, #0
 80042a8:	2103      	movs	r1, #3
 80042aa:	f7fe fb77 	bl	800299c <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe fe22 	bl	8002efc <LL_ADC_IsEnabled>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f040 83ad 	bne.w	8004a1a <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	6819      	ldr	r1, [r3, #0]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	461a      	mov	r2, r3
 80042ce:	f7fe fd73 	bl	8002db8 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042da:	f040 80d6 	bne.w	800448a <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10b      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x50e>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	0e9b      	lsrs	r3, r3, #26
 80042f0:	3301      	adds	r3, #1
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	2b09      	cmp	r3, #9
 80042f8:	bf94      	ite	ls
 80042fa:	2301      	movls	r3, #1
 80042fc:	2300      	movhi	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	e019      	b.n	8004336 <HAL_ADC_ConfigChannel+0x542>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800430a:	fa93 f3a3 	rbit	r3, r3
 800430e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004310:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004312:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800431a:	2320      	movs	r3, #32
 800431c:	e003      	b.n	8004326 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800431e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004320:	fab3 f383 	clz	r3, r3
 8004324:	b2db      	uxtb	r3, r3
 8004326:	3301      	adds	r3, #1
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	2b09      	cmp	r3, #9
 800432e:	bf94      	ite	ls
 8004330:	2301      	movls	r3, #1
 8004332:	2300      	movhi	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d04d      	beq.n	80043d6 <HAL_ADC_ConfigChannel+0x5e2>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d107      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x562>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	0e9b      	lsrs	r3, r3, #26
 800434c:	3301      	adds	r3, #1
 800434e:	069b      	lsls	r3, r3, #26
 8004350:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004354:	e015      	b.n	8004382 <HAL_ADC_ConfigChannel+0x58e>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800435e:	fa93 f3a3 	rbit	r3, r3
 8004362:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004366:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800436e:	2320      	movs	r3, #32
 8004370:	e003      	b.n	800437a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004372:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004374:	fab3 f383 	clz	r3, r3
 8004378:	b2db      	uxtb	r3, r3
 800437a:	3301      	adds	r3, #1
 800437c:	069b      	lsls	r3, r3, #26
 800437e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d109      	bne.n	80043a2 <HAL_ADC_ConfigChannel+0x5ae>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	0e9b      	lsrs	r3, r3, #26
 8004394:	3301      	adds	r3, #1
 8004396:	f003 031f 	and.w	r3, r3, #31
 800439a:	2101      	movs	r1, #1
 800439c:	fa01 f303 	lsl.w	r3, r1, r3
 80043a0:	e017      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x5de>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043aa:	fa93 f3a3 	rbit	r3, r3
 80043ae:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80043b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80043b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 80043ba:	2320      	movs	r3, #32
 80043bc:	e003      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 80043be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c0:	fab3 f383 	clz	r3, r3
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	3301      	adds	r3, #1
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	2101      	movs	r1, #1
 80043ce:	fa01 f303 	lsl.w	r3, r1, r3
 80043d2:	4313      	orrs	r3, r2
 80043d4:	e04e      	b.n	8004474 <HAL_ADC_ConfigChannel+0x680>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d107      	bne.n	80043f2 <HAL_ADC_ConfigChannel+0x5fe>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	0e9b      	lsrs	r3, r3, #26
 80043e8:	3301      	adds	r3, #1
 80043ea:	069b      	lsls	r3, r3, #26
 80043ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043f0:	e015      	b.n	800441e <HAL_ADC_ConfigChannel+0x62a>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fa:	fa93 f3a3 	rbit	r3, r3
 80043fe:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004402:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 800440a:	2320      	movs	r3, #32
 800440c:	e003      	b.n	8004416 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 800440e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004410:	fab3 f383 	clz	r3, r3
 8004414:	b2db      	uxtb	r3, r3
 8004416:	3301      	adds	r3, #1
 8004418:	069b      	lsls	r3, r3, #26
 800441a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <HAL_ADC_ConfigChannel+0x64a>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	0e9b      	lsrs	r3, r3, #26
 8004430:	3301      	adds	r3, #1
 8004432:	f003 031f 	and.w	r3, r3, #31
 8004436:	2101      	movs	r1, #1
 8004438:	fa01 f303 	lsl.w	r3, r1, r3
 800443c:	e017      	b.n	800446e <HAL_ADC_ConfigChannel+0x67a>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	fa93 f3a3 	rbit	r3, r3
 800444a:	61bb      	str	r3, [r7, #24]
  return result;
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8004456:	2320      	movs	r3, #32
 8004458:	e003      	b.n	8004462 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	fab3 f383 	clz	r3, r3
 8004460:	b2db      	uxtb	r3, r3
 8004462:	3301      	adds	r3, #1
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	2101      	movs	r1, #1
 800446a:	fa01 f303 	lsl.w	r3, r1, r3
 800446e:	4313      	orrs	r3, r2
 8004470:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004474:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	461a      	mov	r2, r3
 8004482:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004486:	f7fe fc33 	bl	8002cf0 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f280 82c3 	bge.w	8004a1a <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a92      	ldr	r2, [pc, #584]	@ (80046e4 <HAL_ADC_ConfigChannel+0x8f0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d004      	beq.n	80044a8 <HAL_ADC_ConfigChannel+0x6b4>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a91      	ldr	r2, [pc, #580]	@ (80046e8 <HAL_ADC_ConfigChannel+0x8f4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d101      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x6b8>
 80044a8:	4b90      	ldr	r3, [pc, #576]	@ (80046ec <HAL_ADC_ConfigChannel+0x8f8>)
 80044aa:	e000      	b.n	80044ae <HAL_ADC_ConfigChannel+0x6ba>
 80044ac:	4b90      	ldr	r3, [pc, #576]	@ (80046f0 <HAL_ADC_ConfigChannel+0x8fc>)
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fe fa46 	bl	8002940 <LL_ADC_GetCommonPathInternalCh>
 80044b4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a89      	ldr	r2, [pc, #548]	@ (80046e4 <HAL_ADC_ConfigChannel+0x8f0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d004      	beq.n	80044cc <HAL_ADC_ConfigChannel+0x6d8>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a88      	ldr	r2, [pc, #544]	@ (80046e8 <HAL_ADC_ConfigChannel+0x8f4>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d10e      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x6f6>
 80044cc:	4885      	ldr	r0, [pc, #532]	@ (80046e4 <HAL_ADC_ConfigChannel+0x8f0>)
 80044ce:	f7fe fd15 	bl	8002efc <LL_ADC_IsEnabled>
 80044d2:	4604      	mov	r4, r0
 80044d4:	4884      	ldr	r0, [pc, #528]	@ (80046e8 <HAL_ADC_ConfigChannel+0x8f4>)
 80044d6:	f7fe fd11 	bl	8002efc <LL_ADC_IsEnabled>
 80044da:	4603      	mov	r3, r0
 80044dc:	4323      	orrs	r3, r4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	bf0c      	ite	eq
 80044e2:	2301      	moveq	r3, #1
 80044e4:	2300      	movne	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	e008      	b.n	80044fc <HAL_ADC_ConfigChannel+0x708>
 80044ea:	4882      	ldr	r0, [pc, #520]	@ (80046f4 <HAL_ADC_ConfigChannel+0x900>)
 80044ec:	f7fe fd06 	bl	8002efc <LL_ADC_IsEnabled>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bf0c      	ite	eq
 80044f6:	2301      	moveq	r3, #1
 80044f8:	2300      	movne	r3, #0
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80a6 	beq.w	800464e <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a7c      	ldr	r2, [pc, #496]	@ (80046f8 <HAL_ADC_ConfigChannel+0x904>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d13c      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800450c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004510:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d136      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a71      	ldr	r2, [pc, #452]	@ (80046e4 <HAL_ADC_ConfigChannel+0x8f0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00a      	beq.n	8004538 <HAL_ADC_ConfigChannel+0x744>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a70      	ldr	r2, [pc, #448]	@ (80046e8 <HAL_ADC_ConfigChannel+0x8f4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d005      	beq.n	8004538 <HAL_ADC_ConfigChannel+0x744>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a70      	ldr	r2, [pc, #448]	@ (80046f4 <HAL_ADC_ConfigChannel+0x900>)
 8004532:	4293      	cmp	r3, r2
 8004534:	f040 826e 	bne.w	8004a14 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a69      	ldr	r2, [pc, #420]	@ (80046e4 <HAL_ADC_ConfigChannel+0x8f0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d004      	beq.n	800454c <HAL_ADC_ConfigChannel+0x758>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a68      	ldr	r2, [pc, #416]	@ (80046e8 <HAL_ADC_ConfigChannel+0x8f4>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d101      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x75c>
 800454c:	4a67      	ldr	r2, [pc, #412]	@ (80046ec <HAL_ADC_ConfigChannel+0x8f8>)
 800454e:	e000      	b.n	8004552 <HAL_ADC_ConfigChannel+0x75e>
 8004550:	4a67      	ldr	r2, [pc, #412]	@ (80046f0 <HAL_ADC_ConfigChannel+0x8fc>)
 8004552:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004556:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800455a:	4619      	mov	r1, r3
 800455c:	4610      	mov	r0, r2
 800455e:	f7fe f9dc 	bl	800291a <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004562:	4b66      	ldr	r3, [pc, #408]	@ (80046fc <HAL_ADC_ConfigChannel+0x908>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	099b      	lsrs	r3, r3, #6
 8004568:	4a65      	ldr	r2, [pc, #404]	@ (8004700 <HAL_ADC_ConfigChannel+0x90c>)
 800456a:	fba2 2303 	umull	r2, r3, r2, r3
 800456e:	099b      	lsrs	r3, r3, #6
 8004570:	3301      	adds	r3, #1
 8004572:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8004574:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004576:	e002      	b.n	800457e <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	3b01      	subs	r3, #1
 800457c:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f9      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004584:	e246      	b.n	8004a14 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a5e      	ldr	r2, [pc, #376]	@ (8004704 <HAL_ADC_ConfigChannel+0x910>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d12b      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004590:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004594:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004598:	2b00      	cmp	r3, #0
 800459a:	d125      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a50      	ldr	r2, [pc, #320]	@ (80046e4 <HAL_ADC_ConfigChannel+0x8f0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00a      	beq.n	80045bc <HAL_ADC_ConfigChannel+0x7c8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a4f      	ldr	r2, [pc, #316]	@ (80046e8 <HAL_ADC_ConfigChannel+0x8f4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d005      	beq.n	80045bc <HAL_ADC_ConfigChannel+0x7c8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a4f      	ldr	r2, [pc, #316]	@ (80046f4 <HAL_ADC_ConfigChannel+0x900>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	f040 822e 	bne.w	8004a18 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a48      	ldr	r2, [pc, #288]	@ (80046e4 <HAL_ADC_ConfigChannel+0x8f0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d004      	beq.n	80045d0 <HAL_ADC_ConfigChannel+0x7dc>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a47      	ldr	r2, [pc, #284]	@ (80046e8 <HAL_ADC_ConfigChannel+0x8f4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d101      	bne.n	80045d4 <HAL_ADC_ConfigChannel+0x7e0>
 80045d0:	4a46      	ldr	r2, [pc, #280]	@ (80046ec <HAL_ADC_ConfigChannel+0x8f8>)
 80045d2:	e000      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x7e2>
 80045d4:	4a46      	ldr	r2, [pc, #280]	@ (80046f0 <HAL_ADC_ConfigChannel+0x8fc>)
 80045d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045de:	4619      	mov	r1, r3
 80045e0:	4610      	mov	r0, r2
 80045e2:	f7fe f99a 	bl	800291a <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045e6:	e217      	b.n	8004a18 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a46      	ldr	r2, [pc, #280]	@ (8004708 <HAL_ADC_ConfigChannel+0x914>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	f040 8213 	bne.w	8004a1a <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f040 820c 	bne.w	8004a1a <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a37      	ldr	r2, [pc, #220]	@ (80046e4 <HAL_ADC_ConfigChannel+0x8f0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00a      	beq.n	8004622 <HAL_ADC_ConfigChannel+0x82e>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a35      	ldr	r2, [pc, #212]	@ (80046e8 <HAL_ADC_ConfigChannel+0x8f4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d005      	beq.n	8004622 <HAL_ADC_ConfigChannel+0x82e>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a36      	ldr	r2, [pc, #216]	@ (80046f4 <HAL_ADC_ConfigChannel+0x900>)
 800461c:	4293      	cmp	r3, r2
 800461e:	f040 81fc 	bne.w	8004a1a <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a2f      	ldr	r2, [pc, #188]	@ (80046e4 <HAL_ADC_ConfigChannel+0x8f0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d004      	beq.n	8004636 <HAL_ADC_ConfigChannel+0x842>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a2d      	ldr	r2, [pc, #180]	@ (80046e8 <HAL_ADC_ConfigChannel+0x8f4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d101      	bne.n	800463a <HAL_ADC_ConfigChannel+0x846>
 8004636:	4a2d      	ldr	r2, [pc, #180]	@ (80046ec <HAL_ADC_ConfigChannel+0x8f8>)
 8004638:	e000      	b.n	800463c <HAL_ADC_ConfigChannel+0x848>
 800463a:	4a2d      	ldr	r2, [pc, #180]	@ (80046f0 <HAL_ADC_ConfigChannel+0x8fc>)
 800463c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004640:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004644:	4619      	mov	r1, r3
 8004646:	4610      	mov	r0, r2
 8004648:	f7fe f967 	bl	800291a <LL_ADC_SetCommonPathInternalCh>
 800464c:	e1e5      	b.n	8004a1a <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004652:	f043 0220 	orr.w	r2, r3, #32
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004660:	e1db      	b.n	8004a1a <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b02      	cmp	r3, #2
 8004670:	f000 811b 	beq.w	80048aa <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800467c:	d004      	beq.n	8004688 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004682:	4a22      	ldr	r2, [pc, #136]	@ (800470c <HAL_ADC_ConfigChannel+0x918>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d107      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004690:	4618      	mov	r0, r3
 8004692:	f7fe fac1 	bl	8002c18 <LL_ADC_REG_SetSequencerChAdd>
 8004696:	e059      	b.n	800474c <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	210f      	movs	r1, #15
 80046a8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ac:	43db      	mvns	r3, r3
 80046ae:	401a      	ands	r2, r3
 80046b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80046b4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d105      	bne.n	80046c8 <HAL_ADC_ConfigChannel+0x8d4>
 80046bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80046c0:	0e9b      	lsrs	r3, r3, #26
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	e027      	b.n	8004718 <HAL_ADC_ConfigChannel+0x924>
 80046c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80046cc:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	fa93 f3a3 	rbit	r3, r3
 80046d4:	60fb      	str	r3, [r7, #12]
  return result;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d117      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 80046e0:	2320      	movs	r3, #32
 80046e2:	e019      	b.n	8004718 <HAL_ADC_ConfigChannel+0x924>
 80046e4:	42028000 	.word	0x42028000
 80046e8:	42028100 	.word	0x42028100
 80046ec:	42028300 	.word	0x42028300
 80046f0:	46021300 	.word	0x46021300
 80046f4:	46021000 	.word	0x46021000
 80046f8:	ce080000 	.word	0xce080000
 80046fc:	2000001c 	.word	0x2000001c
 8004700:	053e2d63 	.word	0x053e2d63
 8004704:	ca040000 	.word	0xca040000
 8004708:	80000001 	.word	0x80000001
 800470c:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	fab3 f383 	clz	r3, r3
 8004716:	b2db      	uxtb	r3, r3
 8004718:	6839      	ldr	r1, [r7, #0]
 800471a:	6849      	ldr	r1, [r1, #4]
 800471c:	f001 011f 	and.w	r1, r1, #31
 8004720:	408b      	lsls	r3, r1
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	089b      	lsrs	r3, r3, #2
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004736:	429a      	cmp	r2, r3
 8004738:	d808      	bhi.n	800474c <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004746:	4619      	mov	r1, r3
 8004748:	f7fe fa06 	bl	8002b58 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	461a      	mov	r2, r3
 8004756:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800475a:	f7fe fac9 	bl	8002cf0 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	f280 8159 	bge.w	8004a1a <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a9b      	ldr	r2, [pc, #620]	@ (80049dc <HAL_ADC_ConfigChannel+0xbe8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_ADC_ConfigChannel+0x988>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a9a      	ldr	r2, [pc, #616]	@ (80049e0 <HAL_ADC_ConfigChannel+0xbec>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d101      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x98c>
 800477c:	4b99      	ldr	r3, [pc, #612]	@ (80049e4 <HAL_ADC_ConfigChannel+0xbf0>)
 800477e:	e000      	b.n	8004782 <HAL_ADC_ConfigChannel+0x98e>
 8004780:	4b99      	ldr	r3, [pc, #612]	@ (80049e8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004782:	4618      	mov	r0, r3
 8004784:	f7fe f8dc 	bl	8002940 <LL_ADC_GetCommonPathInternalCh>
 8004788:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a96      	ldr	r2, [pc, #600]	@ (80049ec <HAL_ADC_ConfigChannel+0xbf8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d12b      	bne.n	80047ee <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004796:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800479a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d125      	bne.n	80047ee <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a8d      	ldr	r2, [pc, #564]	@ (80049dc <HAL_ADC_ConfigChannel+0xbe8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d004      	beq.n	80047b6 <HAL_ADC_ConfigChannel+0x9c2>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a8b      	ldr	r2, [pc, #556]	@ (80049e0 <HAL_ADC_ConfigChannel+0xbec>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d101      	bne.n	80047ba <HAL_ADC_ConfigChannel+0x9c6>
 80047b6:	4a8b      	ldr	r2, [pc, #556]	@ (80049e4 <HAL_ADC_ConfigChannel+0xbf0>)
 80047b8:	e000      	b.n	80047bc <HAL_ADC_ConfigChannel+0x9c8>
 80047ba:	4a8b      	ldr	r2, [pc, #556]	@ (80049e8 <HAL_ADC_ConfigChannel+0xbf4>)
 80047bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047c4:	4619      	mov	r1, r3
 80047c6:	4610      	mov	r0, r2
 80047c8:	f7fe f8a7 	bl	800291a <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80047cc:	4b88      	ldr	r3, [pc, #544]	@ (80049f0 <HAL_ADC_ConfigChannel+0xbfc>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	099b      	lsrs	r3, r3, #6
 80047d2:	4a88      	ldr	r2, [pc, #544]	@ (80049f4 <HAL_ADC_ConfigChannel+0xc00>)
 80047d4:	fba2 2303 	umull	r2, r3, r2, r3
 80047d8:	099b      	lsrs	r3, r3, #6
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80047de:	e002      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f9      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80047ec:	e045      	b.n	800487a <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a81      	ldr	r2, [pc, #516]	@ (80049f8 <HAL_ADC_ConfigChannel+0xc04>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d11b      	bne.n	8004830 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80047f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004800:	2b00      	cmp	r3, #0
 8004802:	d115      	bne.n	8004830 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a74      	ldr	r2, [pc, #464]	@ (80049dc <HAL_ADC_ConfigChannel+0xbe8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d004      	beq.n	8004818 <HAL_ADC_ConfigChannel+0xa24>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a73      	ldr	r2, [pc, #460]	@ (80049e0 <HAL_ADC_ConfigChannel+0xbec>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d101      	bne.n	800481c <HAL_ADC_ConfigChannel+0xa28>
 8004818:	4a72      	ldr	r2, [pc, #456]	@ (80049e4 <HAL_ADC_ConfigChannel+0xbf0>)
 800481a:	e000      	b.n	800481e <HAL_ADC_ConfigChannel+0xa2a>
 800481c:	4a72      	ldr	r2, [pc, #456]	@ (80049e8 <HAL_ADC_ConfigChannel+0xbf4>)
 800481e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004822:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004826:	4619      	mov	r1, r3
 8004828:	4610      	mov	r0, r2
 800482a:	f7fe f876 	bl	800291a <LL_ADC_SetCommonPathInternalCh>
 800482e:	e024      	b.n	800487a <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a71      	ldr	r2, [pc, #452]	@ (80049fc <HAL_ADC_ConfigChannel+0xc08>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d11f      	bne.n	800487a <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800483a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800483e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d115      	bne.n	8004872 <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a64      	ldr	r2, [pc, #400]	@ (80049dc <HAL_ADC_ConfigChannel+0xbe8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d004      	beq.n	800485a <HAL_ADC_ConfigChannel+0xa66>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a62      	ldr	r2, [pc, #392]	@ (80049e0 <HAL_ADC_ConfigChannel+0xbec>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d101      	bne.n	800485e <HAL_ADC_ConfigChannel+0xa6a>
 800485a:	4a62      	ldr	r2, [pc, #392]	@ (80049e4 <HAL_ADC_ConfigChannel+0xbf0>)
 800485c:	e000      	b.n	8004860 <HAL_ADC_ConfigChannel+0xa6c>
 800485e:	4a62      	ldr	r2, [pc, #392]	@ (80049e8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004860:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004864:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004868:	4619      	mov	r1, r3
 800486a:	4610      	mov	r0, r2
 800486c:	f7fe f855 	bl	800291a <LL_ADC_SetCommonPathInternalCh>
 8004870:	e003      	b.n	800487a <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a62      	ldr	r2, [pc, #392]	@ (8004a00 <HAL_ADC_ConfigChannel+0xc0c>)
 8004878:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a61      	ldr	r2, [pc, #388]	@ (8004a04 <HAL_ADC_ConfigChannel+0xc10>)
 8004880:	4293      	cmp	r3, r2
 8004882:	f040 80ca 	bne.w	8004a1a <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004886:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800488a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800488e:	2b00      	cmp	r3, #0
 8004890:	f040 80c3 	bne.w	8004a1a <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0201 	orr.w	r2, r2, #1
 80048a4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80048a8:	e0b7      	b.n	8004a1a <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048b2:	d004      	beq.n	80048be <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80048b8:	4a53      	ldr	r2, [pc, #332]	@ (8004a08 <HAL_ADC_ConfigChannel+0xc14>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d106      	bne.n	80048cc <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe f9d9 	bl	8002c7e <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f280 80a2 	bge.w	8004a1a <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a40      	ldr	r2, [pc, #256]	@ (80049dc <HAL_ADC_ConfigChannel+0xbe8>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d004      	beq.n	80048ea <HAL_ADC_ConfigChannel+0xaf6>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a3e      	ldr	r2, [pc, #248]	@ (80049e0 <HAL_ADC_ConfigChannel+0xbec>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d101      	bne.n	80048ee <HAL_ADC_ConfigChannel+0xafa>
 80048ea:	4b3e      	ldr	r3, [pc, #248]	@ (80049e4 <HAL_ADC_ConfigChannel+0xbf0>)
 80048ec:	e000      	b.n	80048f0 <HAL_ADC_ConfigChannel+0xafc>
 80048ee:	4b3e      	ldr	r3, [pc, #248]	@ (80049e8 <HAL_ADC_ConfigChannel+0xbf4>)
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fe f825 	bl	8002940 <LL_ADC_GetCommonPathInternalCh>
 80048f6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a43      	ldr	r2, [pc, #268]	@ (8004a0c <HAL_ADC_ConfigChannel+0xc18>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d115      	bne.n	8004930 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a34      	ldr	r2, [pc, #208]	@ (80049dc <HAL_ADC_ConfigChannel+0xbe8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d004      	beq.n	8004918 <HAL_ADC_ConfigChannel+0xb24>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a33      	ldr	r2, [pc, #204]	@ (80049e0 <HAL_ADC_ConfigChannel+0xbec>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d101      	bne.n	800491c <HAL_ADC_ConfigChannel+0xb28>
 8004918:	4a32      	ldr	r2, [pc, #200]	@ (80049e4 <HAL_ADC_ConfigChannel+0xbf0>)
 800491a:	e000      	b.n	800491e <HAL_ADC_ConfigChannel+0xb2a>
 800491c:	4a32      	ldr	r2, [pc, #200]	@ (80049e8 <HAL_ADC_ConfigChannel+0xbf4>)
 800491e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004922:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004926:	4619      	mov	r1, r3
 8004928:	4610      	mov	r0, r2
 800492a:	f7fd fff6 	bl	800291a <LL_ADC_SetCommonPathInternalCh>
 800492e:	e034      	b.n	800499a <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a36      	ldr	r2, [pc, #216]	@ (8004a10 <HAL_ADC_ConfigChannel+0xc1c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d115      	bne.n	8004966 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a27      	ldr	r2, [pc, #156]	@ (80049dc <HAL_ADC_ConfigChannel+0xbe8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d004      	beq.n	800494e <HAL_ADC_ConfigChannel+0xb5a>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a25      	ldr	r2, [pc, #148]	@ (80049e0 <HAL_ADC_ConfigChannel+0xbec>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d101      	bne.n	8004952 <HAL_ADC_ConfigChannel+0xb5e>
 800494e:	4a25      	ldr	r2, [pc, #148]	@ (80049e4 <HAL_ADC_ConfigChannel+0xbf0>)
 8004950:	e000      	b.n	8004954 <HAL_ADC_ConfigChannel+0xb60>
 8004952:	4a25      	ldr	r2, [pc, #148]	@ (80049e8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004954:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004958:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800495c:	4619      	mov	r1, r3
 800495e:	4610      	mov	r0, r2
 8004960:	f7fd ffdb 	bl	800291a <LL_ADC_SetCommonPathInternalCh>
 8004964:	e019      	b.n	800499a <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a24      	ldr	r2, [pc, #144]	@ (80049fc <HAL_ADC_ConfigChannel+0xc08>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d114      	bne.n	800499a <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a19      	ldr	r2, [pc, #100]	@ (80049dc <HAL_ADC_ConfigChannel+0xbe8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d004      	beq.n	8004984 <HAL_ADC_ConfigChannel+0xb90>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a18      	ldr	r2, [pc, #96]	@ (80049e0 <HAL_ADC_ConfigChannel+0xbec>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d101      	bne.n	8004988 <HAL_ADC_ConfigChannel+0xb94>
 8004984:	4a17      	ldr	r2, [pc, #92]	@ (80049e4 <HAL_ADC_ConfigChannel+0xbf0>)
 8004986:	e000      	b.n	800498a <HAL_ADC_ConfigChannel+0xb96>
 8004988:	4a17      	ldr	r2, [pc, #92]	@ (80049e8 <HAL_ADC_ConfigChannel+0xbf4>)
 800498a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800498e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f7fd ffc0 	bl	800291a <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a19      	ldr	r2, [pc, #100]	@ (8004a04 <HAL_ADC_ConfigChannel+0xc10>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d13a      	bne.n	8004a1a <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d134      	bne.n	8004a1a <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80049c4:	e029      	b.n	8004a1a <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049ca:	f043 0220 	orr.w	r2, r3, #32
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80049d8:	e01f      	b.n	8004a1a <HAL_ADC_ConfigChannel+0xc26>
 80049da:	bf00      	nop
 80049dc:	42028000 	.word	0x42028000
 80049e0:	42028100 	.word	0x42028100
 80049e4:	42028300 	.word	0x42028300
 80049e8:	46021300 	.word	0x46021300
 80049ec:	b6002000 	.word	0xb6002000
 80049f0:	2000001c 	.word	0x2000001c
 80049f4:	053e2d63 	.word	0x053e2d63
 80049f8:	ba004000 	.word	0xba004000
 80049fc:	80000001 	.word	0x80000001
 8004a00:	b2001000 	.word	0xb2001000
 8004a04:	d7200000 	.word	0xd7200000
 8004a08:	80000010 	.word	0x80000010
 8004a0c:	ce080000 	.word	0xce080000
 8004a10:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a14:	bf00      	nop
 8004a16:	e000      	b.n	8004a1a <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a18:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004a22:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	37dc      	adds	r7, #220	@ 0xdc
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd90      	pop	{r4, r7, pc}
 8004a2e:	bf00      	nop

08004a30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fe fa5d 	bl	8002efc <LL_ADC_IsEnabled>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d17b      	bne.n	8004b40 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b4c <ADC_Enable+0x11c>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00d      	beq.n	8004a72 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a5a:	f043 0210 	orr.w	r2, r3, #16
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a66:	f043 0201 	orr.w	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e067      	b.n	8004b42 <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2201      	movs	r2, #1
 8004a78:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fe fa28 	bl	8002ed4 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d004      	beq.n	8004a96 <ADC_Enable+0x66>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a2f      	ldr	r2, [pc, #188]	@ (8004b50 <ADC_Enable+0x120>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d054      	beq.n	8004b40 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004a96:	f7fd fefd 	bl	8002894 <HAL_GetTick>
 8004a9a:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a2c      	ldr	r2, [pc, #176]	@ (8004b54 <ADC_Enable+0x124>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <ADC_Enable+0x80>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a2b      	ldr	r2, [pc, #172]	@ (8004b58 <ADC_Enable+0x128>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d101      	bne.n	8004ab4 <ADC_Enable+0x84>
 8004ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8004b5c <ADC_Enable+0x12c>)
 8004ab2:	e000      	b.n	8004ab6 <ADC_Enable+0x86>
 8004ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8004b60 <ADC_Enable+0x130>)
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fe f9a2 	bl	8002e00 <LL_ADC_GetMultimode>
 8004abc:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a25      	ldr	r2, [pc, #148]	@ (8004b58 <ADC_Enable+0x128>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d002      	beq.n	8004ace <ADC_Enable+0x9e>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	e000      	b.n	8004ad0 <ADC_Enable+0xa0>
 8004ace:	4b21      	ldr	r3, [pc, #132]	@ (8004b54 <ADC_Enable+0x124>)
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6812      	ldr	r2, [r2, #0]
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d02c      	beq.n	8004b32 <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d130      	bne.n	8004b40 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ade:	e028      	b.n	8004b32 <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fe fa09 	bl	8002efc <LL_ADC_IsEnabled>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d104      	bne.n	8004afa <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fe f9ed 	bl	8002ed4 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004afa:	f7fd fecb 	bl	8002894 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d914      	bls.n	8004b32 <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d00d      	beq.n	8004b32 <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b1a:	f043 0210 	orr.w	r2, r3, #16
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b26:	f043 0201 	orr.w	r2, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e007      	b.n	8004b42 <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d1cf      	bne.n	8004ae0 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	8000003f 	.word	0x8000003f
 8004b50:	46021000 	.word	0x46021000
 8004b54:	42028000 	.word	0x42028000
 8004b58:	42028100 	.word	0x42028100
 8004b5c:	42028300 	.word	0x42028300
 8004b60:	46021300 	.word	0x46021300

08004b64 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b70:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b76:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d14b      	bne.n	8004c16 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b82:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d021      	beq.n	8004bdc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fd ffc7 	bl	8002b30 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d032      	beq.n	8004c0e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d12b      	bne.n	8004c0e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d11f      	bne.n	8004c0e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bd2:	f043 0201 	orr.w	r2, r3, #1
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	679a      	str	r2, [r3, #120]	@ 0x78
 8004bda:	e018      	b.n	8004c0e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d111      	bne.n	8004c0e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d105      	bne.n	8004c0e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c06:	f043 0201 	orr.w	r2, r3, #1
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f7ff f8aa 	bl	8003d68 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c14:	e00e      	b.n	8004c34 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c1a:	f003 0310 	and.w	r3, r3, #16
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f7ff f8be 	bl	8003da4 <HAL_ADC_ErrorCallback>
}
 8004c28:	e004      	b.n	8004c34 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	4798      	blx	r3
}
 8004c34:	bf00      	nop
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f7ff f896 	bl	8003d7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c76:	f043 0204 	orr.w	r2, r3, #4
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f7ff f890 	bl	8003da4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c84:	bf00      	nop
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cec:	4b0c      	ldr	r3, [pc, #48]	@ (8004d20 <__NVIC_SetPriorityGrouping+0x44>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d0e:	4a04      	ldr	r2, [pc, #16]	@ (8004d20 <__NVIC_SetPriorityGrouping+0x44>)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	60d3      	str	r3, [r2, #12]
}
 8004d14:	bf00      	nop
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	e000ed00 	.word	0xe000ed00

08004d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d28:	4b04      	ldr	r3, [pc, #16]	@ (8004d3c <__NVIC_GetPriorityGrouping+0x18>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	0a1b      	lsrs	r3, r3, #8
 8004d2e:	f003 0307 	and.w	r3, r3, #7
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	e000ed00 	.word	0xe000ed00

08004d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	db0b      	blt.n	8004d6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d52:	88fb      	ldrh	r3, [r7, #6]
 8004d54:	f003 021f 	and.w	r2, r3, #31
 8004d58:	4907      	ldr	r1, [pc, #28]	@ (8004d78 <__NVIC_EnableIRQ+0x38>)
 8004d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	2001      	movs	r0, #1
 8004d62:	fa00 f202 	lsl.w	r2, r0, r2
 8004d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	e000e100 	.word	0xe000e100

08004d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	6039      	str	r1, [r7, #0]
 8004d86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	db0a      	blt.n	8004da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	490c      	ldr	r1, [pc, #48]	@ (8004dc8 <__NVIC_SetPriority+0x4c>)
 8004d96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d9a:	0112      	lsls	r2, r2, #4
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	440b      	add	r3, r1
 8004da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004da4:	e00a      	b.n	8004dbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	4908      	ldr	r1, [pc, #32]	@ (8004dcc <__NVIC_SetPriority+0x50>)
 8004dac:	88fb      	ldrh	r3, [r7, #6]
 8004dae:	f003 030f 	and.w	r3, r3, #15
 8004db2:	3b04      	subs	r3, #4
 8004db4:	0112      	lsls	r2, r2, #4
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	440b      	add	r3, r1
 8004dba:	761a      	strb	r2, [r3, #24]
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	e000e100 	.word	0xe000e100
 8004dcc:	e000ed00 	.word	0xe000ed00

08004dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b089      	sub	sp, #36	@ 0x24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f003 0307 	and.w	r3, r3, #7
 8004de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f1c3 0307 	rsb	r3, r3, #7
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	bf28      	it	cs
 8004dee:	2304      	movcs	r3, #4
 8004df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	3304      	adds	r3, #4
 8004df6:	2b06      	cmp	r3, #6
 8004df8:	d902      	bls.n	8004e00 <NVIC_EncodePriority+0x30>
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	3b03      	subs	r3, #3
 8004dfe:	e000      	b.n	8004e02 <NVIC_EncodePriority+0x32>
 8004e00:	2300      	movs	r3, #0
 8004e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e04:	f04f 32ff 	mov.w	r2, #4294967295
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	43da      	mvns	r2, r3
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	401a      	ands	r2, r3
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e18:	f04f 31ff 	mov.w	r1, #4294967295
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e22:	43d9      	mvns	r1, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e28:	4313      	orrs	r3, r2
         );
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3724      	adds	r7, #36	@ 0x24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7ff ff4c 	bl	8004cdc <__NVIC_SetPriorityGrouping>
}
 8004e44:	bf00      	nop
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e5a:	f7ff ff63 	bl	8004d24 <__NVIC_GetPriorityGrouping>
 8004e5e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	6978      	ldr	r0, [r7, #20]
 8004e66:	f7ff ffb3 	bl	8004dd0 <NVIC_EncodePriority>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e70:	4611      	mov	r1, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff ff82 	bl	8004d7c <__NVIC_SetPriority>
}
 8004e78:	bf00      	nop
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	4603      	mov	r3, r0
 8004e88:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff ff56 	bl	8004d40 <__NVIC_EnableIRQ>
}
 8004e94:	bf00      	nop
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004eac:	d301      	bcc.n	8004eb2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e00d      	b.n	8004ece <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8004eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8004edc <HAL_SYSTICK_Config+0x40>)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8004eba:	4b08      	ldr	r3, [pc, #32]	@ (8004edc <HAL_SYSTICK_Config+0x40>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8004ec0:	4b06      	ldr	r3, [pc, #24]	@ (8004edc <HAL_SYSTICK_Config+0x40>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a05      	ldr	r2, [pc, #20]	@ (8004edc <HAL_SYSTICK_Config+0x40>)
 8004ec6:	f043 0303 	orr.w	r3, r3, #3
 8004eca:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	e000e010 	.word	0xe000e010

08004ee0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d844      	bhi.n	8004f78 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004eee:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef4:	08004f17 	.word	0x08004f17
 8004ef8:	08004f35 	.word	0x08004f35
 8004efc:	08004f57 	.word	0x08004f57
 8004f00:	08004f79 	.word	0x08004f79
 8004f04:	08004f09 	.word	0x08004f09
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004f08:	4b1f      	ldr	r3, [pc, #124]	@ (8004f88 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1e      	ldr	r2, [pc, #120]	@ (8004f88 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004f0e:	f043 0304 	orr.w	r3, r3, #4
 8004f12:	6013      	str	r3, [r2, #0]
      break;
 8004f14:	e031      	b.n	8004f7a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004f16:	4b1c      	ldr	r3, [pc, #112]	@ (8004f88 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004f88 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004f1c:	f023 0304 	bic.w	r3, r3, #4
 8004f20:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8004f22:	4b1a      	ldr	r3, [pc, #104]	@ (8004f8c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f28:	4a18      	ldr	r2, [pc, #96]	@ (8004f8c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004f2a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004f32:	e022      	b.n	8004f7a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004f34:	4b14      	ldr	r3, [pc, #80]	@ (8004f88 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a13      	ldr	r2, [pc, #76]	@ (8004f88 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004f3a:	f023 0304 	bic.w	r3, r3, #4
 8004f3e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8004f40:	4b12      	ldr	r3, [pc, #72]	@ (8004f8c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f46:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004f4a:	4a10      	ldr	r2, [pc, #64]	@ (8004f8c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004f4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004f54:	e011      	b.n	8004f7a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004f56:	4b0c      	ldr	r3, [pc, #48]	@ (8004f88 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a0b      	ldr	r2, [pc, #44]	@ (8004f88 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004f5c:	f023 0304 	bic.w	r3, r3, #4
 8004f60:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8004f62:	4b0a      	ldr	r3, [pc, #40]	@ (8004f8c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f68:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004f6c:	4a07      	ldr	r2, [pc, #28]	@ (8004f8c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004f6e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004f76:	e000      	b.n	8004f7a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8004f78:	bf00      	nop
  }
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	e000e010 	.word	0xe000e010
 8004f8c:	46020c00 	.word	0x46020c00

08004f90 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8004f96:	4b19      	ldr	r3, [pc, #100]	@ (8004ffc <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0304 	and.w	r3, r3, #4
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8004fa2:	2304      	movs	r3, #4
 8004fa4:	607b      	str	r3, [r7, #4]
 8004fa6:	e021      	b.n	8004fec <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8004fa8:	4b15      	ldr	r3, [pc, #84]	@ (8005000 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8004faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fae:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004fb2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fba:	d011      	beq.n	8004fe0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fc2:	d810      	bhi.n	8004fe6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d004      	beq.n	8004fd4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fd0:	d003      	beq.n	8004fda <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8004fd2:	e008      	b.n	8004fe6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	607b      	str	r3, [r7, #4]
        break;
 8004fd8:	e008      	b.n	8004fec <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	607b      	str	r3, [r7, #4]
        break;
 8004fde:	e005      	b.n	8004fec <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	607b      	str	r3, [r7, #4]
        break;
 8004fe4:	e002      	b.n	8004fec <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	607b      	str	r3, [r7, #4]
        break;
 8004fea:	bf00      	nop
    }
  }
  return systick_source;
 8004fec:	687b      	ldr	r3, [r7, #4]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	e000e010 	.word	0xe000e010
 8005000:	46020c00 	.word	0x46020c00

08005004 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800500c:	f7fd fc42 	bl	8002894 <HAL_GetTick>
 8005010:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e0db      	b.n	80051d4 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a6e      	ldr	r2, [pc, #440]	@ (80051dc <HAL_DMA_Init+0x1d8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	f000 809f 	beq.w	8005166 <HAL_DMA_Init+0x162>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a6c      	ldr	r2, [pc, #432]	@ (80051e0 <HAL_DMA_Init+0x1dc>)
 800502e:	4293      	cmp	r3, r2
 8005030:	f000 8099 	beq.w	8005166 <HAL_DMA_Init+0x162>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a6a      	ldr	r2, [pc, #424]	@ (80051e4 <HAL_DMA_Init+0x1e0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	f000 8093 	beq.w	8005166 <HAL_DMA_Init+0x162>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a68      	ldr	r2, [pc, #416]	@ (80051e8 <HAL_DMA_Init+0x1e4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	f000 808d 	beq.w	8005166 <HAL_DMA_Init+0x162>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a66      	ldr	r2, [pc, #408]	@ (80051ec <HAL_DMA_Init+0x1e8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	f000 8087 	beq.w	8005166 <HAL_DMA_Init+0x162>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a64      	ldr	r2, [pc, #400]	@ (80051f0 <HAL_DMA_Init+0x1ec>)
 800505e:	4293      	cmp	r3, r2
 8005060:	f000 8081 	beq.w	8005166 <HAL_DMA_Init+0x162>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a62      	ldr	r2, [pc, #392]	@ (80051f4 <HAL_DMA_Init+0x1f0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d07b      	beq.n	8005166 <HAL_DMA_Init+0x162>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a61      	ldr	r2, [pc, #388]	@ (80051f8 <HAL_DMA_Init+0x1f4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d076      	beq.n	8005166 <HAL_DMA_Init+0x162>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a5f      	ldr	r2, [pc, #380]	@ (80051fc <HAL_DMA_Init+0x1f8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d071      	beq.n	8005166 <HAL_DMA_Init+0x162>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a5e      	ldr	r2, [pc, #376]	@ (8005200 <HAL_DMA_Init+0x1fc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d06c      	beq.n	8005166 <HAL_DMA_Init+0x162>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a5c      	ldr	r2, [pc, #368]	@ (8005204 <HAL_DMA_Init+0x200>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d067      	beq.n	8005166 <HAL_DMA_Init+0x162>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a5b      	ldr	r2, [pc, #364]	@ (8005208 <HAL_DMA_Init+0x204>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d062      	beq.n	8005166 <HAL_DMA_Init+0x162>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a59      	ldr	r2, [pc, #356]	@ (800520c <HAL_DMA_Init+0x208>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d05d      	beq.n	8005166 <HAL_DMA_Init+0x162>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a58      	ldr	r2, [pc, #352]	@ (8005210 <HAL_DMA_Init+0x20c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d058      	beq.n	8005166 <HAL_DMA_Init+0x162>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a56      	ldr	r2, [pc, #344]	@ (8005214 <HAL_DMA_Init+0x210>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d053      	beq.n	8005166 <HAL_DMA_Init+0x162>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a55      	ldr	r2, [pc, #340]	@ (8005218 <HAL_DMA_Init+0x214>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d04e      	beq.n	8005166 <HAL_DMA_Init+0x162>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a53      	ldr	r2, [pc, #332]	@ (800521c <HAL_DMA_Init+0x218>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d049      	beq.n	8005166 <HAL_DMA_Init+0x162>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a52      	ldr	r2, [pc, #328]	@ (8005220 <HAL_DMA_Init+0x21c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d044      	beq.n	8005166 <HAL_DMA_Init+0x162>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a50      	ldr	r2, [pc, #320]	@ (8005224 <HAL_DMA_Init+0x220>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d03f      	beq.n	8005166 <HAL_DMA_Init+0x162>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a4f      	ldr	r2, [pc, #316]	@ (8005228 <HAL_DMA_Init+0x224>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d03a      	beq.n	8005166 <HAL_DMA_Init+0x162>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a4d      	ldr	r2, [pc, #308]	@ (800522c <HAL_DMA_Init+0x228>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d035      	beq.n	8005166 <HAL_DMA_Init+0x162>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a4c      	ldr	r2, [pc, #304]	@ (8005230 <HAL_DMA_Init+0x22c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d030      	beq.n	8005166 <HAL_DMA_Init+0x162>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a4a      	ldr	r2, [pc, #296]	@ (8005234 <HAL_DMA_Init+0x230>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d02b      	beq.n	8005166 <HAL_DMA_Init+0x162>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a49      	ldr	r2, [pc, #292]	@ (8005238 <HAL_DMA_Init+0x234>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d026      	beq.n	8005166 <HAL_DMA_Init+0x162>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a47      	ldr	r2, [pc, #284]	@ (800523c <HAL_DMA_Init+0x238>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d021      	beq.n	8005166 <HAL_DMA_Init+0x162>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a46      	ldr	r2, [pc, #280]	@ (8005240 <HAL_DMA_Init+0x23c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d01c      	beq.n	8005166 <HAL_DMA_Init+0x162>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a44      	ldr	r2, [pc, #272]	@ (8005244 <HAL_DMA_Init+0x240>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d017      	beq.n	8005166 <HAL_DMA_Init+0x162>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a43      	ldr	r2, [pc, #268]	@ (8005248 <HAL_DMA_Init+0x244>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d012      	beq.n	8005166 <HAL_DMA_Init+0x162>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a41      	ldr	r2, [pc, #260]	@ (800524c <HAL_DMA_Init+0x248>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00d      	beq.n	8005166 <HAL_DMA_Init+0x162>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a40      	ldr	r2, [pc, #256]	@ (8005250 <HAL_DMA_Init+0x24c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d008      	beq.n	8005166 <HAL_DMA_Init+0x162>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a3e      	ldr	r2, [pc, #248]	@ (8005254 <HAL_DMA_Init+0x250>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d003      	beq.n	8005166 <HAL_DMA_Init+0x162>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a3d      	ldr	r2, [pc, #244]	@ (8005258 <HAL_DMA_Init+0x254>)
 8005164:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695a      	ldr	r2, [r3, #20]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0206 	orr.w	r2, r2, #6
 8005184:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005186:	e00f      	b.n	80051a8 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005188:	f7fd fb84 	bl	8002894 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b05      	cmp	r3, #5
 8005194:	d908      	bls.n	80051a8 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2210      	movs	r2, #16
 800519a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2203      	movs	r2, #3
 80051a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e015      	b.n	80051d4 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e8      	bne.n	8005188 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fb26 	bl	8005808 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40020050 	.word	0x40020050
 80051e0:	50020050 	.word	0x50020050
 80051e4:	400200d0 	.word	0x400200d0
 80051e8:	500200d0 	.word	0x500200d0
 80051ec:	40020150 	.word	0x40020150
 80051f0:	50020150 	.word	0x50020150
 80051f4:	400201d0 	.word	0x400201d0
 80051f8:	500201d0 	.word	0x500201d0
 80051fc:	40020250 	.word	0x40020250
 8005200:	50020250 	.word	0x50020250
 8005204:	400202d0 	.word	0x400202d0
 8005208:	500202d0 	.word	0x500202d0
 800520c:	40020350 	.word	0x40020350
 8005210:	50020350 	.word	0x50020350
 8005214:	400203d0 	.word	0x400203d0
 8005218:	500203d0 	.word	0x500203d0
 800521c:	40020450 	.word	0x40020450
 8005220:	50020450 	.word	0x50020450
 8005224:	400204d0 	.word	0x400204d0
 8005228:	500204d0 	.word	0x500204d0
 800522c:	40020550 	.word	0x40020550
 8005230:	50020550 	.word	0x50020550
 8005234:	400205d0 	.word	0x400205d0
 8005238:	500205d0 	.word	0x500205d0
 800523c:	40020650 	.word	0x40020650
 8005240:	50020650 	.word	0x50020650
 8005244:	400206d0 	.word	0x400206d0
 8005248:	500206d0 	.word	0x500206d0
 800524c:	40020750 	.word	0x40020750
 8005250:	50020750 	.word	0x50020750
 8005254:	400207d0 	.word	0x400207d0
 8005258:	500207d0 	.word	0x500207d0

0800525c <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e04f      	b.n	8005314 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800527a:	2b01      	cmp	r3, #1
 800527c:	d101      	bne.n	8005282 <HAL_DMA_Start_IT+0x26>
 800527e:	2302      	movs	r3, #2
 8005280:	e048      	b.n	8005314 <HAL_DMA_Start_IT+0xb8>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b01      	cmp	r3, #1
 8005294:	d136      	bne.n	8005304 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2202      	movs	r2, #2
 800529a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 fa86 	bl	80057bc <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	695a      	ldr	r2, [r3, #20]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80052be:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d007      	beq.n	80052d8 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695a      	ldr	r2, [r3, #20]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052d6:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d007      	beq.n	80052f0 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052ee:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695a      	ldr	r2, [r3, #20]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0201 	orr.w	r2, r2, #1
 80052fe:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	e007      	b.n	8005314 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2240      	movs	r2, #64	@ 0x40
 8005308:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8005324:	f7fd fab6 	bl	8002894 <HAL_GetTick>
 8005328:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e06b      	b.n	800540c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d008      	beq.n	8005352 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e05c      	b.n	800540c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695a      	ldr	r2, [r3, #20]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f042 0204 	orr.w	r2, r2, #4
 8005360:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2205      	movs	r2, #5
 8005366:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800536a:	e020      	b.n	80053ae <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800536c:	f7fd fa92 	bl	8002894 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b05      	cmp	r3, #5
 8005378:	d919      	bls.n	80053ae <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800537e:	f043 0210 	orr.w	r2, r3, #16
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2203      	movs	r2, #3
 800538a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800539e:	2201      	movs	r2, #1
 80053a0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e02e      	b.n	800540c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0d7      	beq.n	800536c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695a      	ldr	r2, [r3, #20]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0202 	orr.w	r2, r2, #2
 80053ca:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2204      	movs	r2, #4
 80053d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80053dc:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d007      	beq.n	8005402 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053f6:	2201      	movs	r2, #1
 80053f8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2200      	movs	r2, #0
 8005400:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e019      	b.n	800545a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d004      	beq.n	800543c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e00e      	b.n	800545a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2204      	movs	r2, #4
 8005440:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6812      	ldr	r2, [r2, #0]
 800544e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005452:	f043 0304 	orr.w	r3, r3, #4
 8005456:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b086      	sub	sp, #24
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005476:	f023 030f 	bic.w	r3, r3, #15
 800547a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005484:	3b50      	subs	r3, #80	@ 0x50
 8005486:	09db      	lsrs	r3, r3, #7
 8005488:	f003 031f 	and.w	r3, r3, #31
 800548c:	2201      	movs	r2, #1
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4013      	ands	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 813b 	beq.w	800571c <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d011      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054ca:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d0:	f043 0201 	orr.w	r2, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d011      	beq.n	800550a <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00a      	beq.n	800550a <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054fc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005502:	f043 0202 	orr.w	r2, r3, #2
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d011      	beq.n	800553c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800552e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005534:	f043 0204 	orr.w	r2, r3, #4
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d011      	beq.n	800556e <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00a      	beq.n	800556e <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005560:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005566:	f043 0208 	orr.w	r2, r3, #8
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005578:	2b00      	cmp	r3, #0
 800557a:	d013      	beq.n	80055a4 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00c      	beq.n	80055a4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005592:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d04c      	beq.n	800564c <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d045      	beq.n	800564c <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80055c8:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d12e      	bne.n	8005634 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695a      	ldr	r2, [r3, #20]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055e4:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	695a      	ldr	r2, [r3, #20]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0202 	orr.w	r2, r2, #2
 80055f4:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005606:	2b00      	cmp	r3, #0
 8005608:	d007      	beq.n	800561a <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800560e:	2201      	movs	r2, #1
 8005610:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2200      	movs	r2, #0
 8005618:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005626:	2b00      	cmp	r3, #0
 8005628:	d07a      	beq.n	8005720 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	4798      	blx	r3
        }

        return;
 8005632:	e075      	b.n	8005720 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2205      	movs	r2, #5
 8005638:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005656:	2b00      	cmp	r3, #0
 8005658:	d039      	beq.n	80056ce <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005664:	2b00      	cmp	r3, #0
 8005666:	d032      	beq.n	80056ce <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800566c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005670:	2b00      	cmp	r3, #0
 8005672:	d012      	beq.n	800569a <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800567a:	2b00      	cmp	r3, #0
 800567c:	d116      	bne.n	80056ac <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005684:	2b00      	cmp	r3, #0
 8005686:	d111      	bne.n	80056ac <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005694:	2201      	movs	r2, #1
 8005696:	731a      	strb	r2, [r3, #12]
 8005698:	e008      	b.n	80056ac <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d103      	bne.n	80056ac <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80056b4:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d025      	beq.n	8005722 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	695a      	ldr	r2, [r3, #20]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0202 	orr.w	r2, r2, #2
 80056e4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056fe:	2201      	movs	r2, #1
 8005700:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	4798      	blx	r3
 800571a:	e002      	b.n	8005722 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800571c:	bf00      	nop
 800571e:	e000      	b.n	8005722 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8005720:	bf00      	nop
    }
  }
}
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005736:	b2db      	uxtb	r3, r3
}
 8005738:	4618      	mov	r0, r3
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e02b      	b.n	80057b0 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005760:	f023 030f 	bic.w	r3, r3, #15
 8005764:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800576e:	3b50      	subs	r3, #80	@ 0x50
 8005770:	09db      	lsrs	r3, r3, #7
 8005772:	f003 031f 	and.w	r3, r3, #31
 8005776:	2201      	movs	r2, #1
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	f003 0310 	and.w	r3, r3, #16
 8005784:	2b00      	cmp	r3, #0
 8005786:	d012      	beq.n	80057ae <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	f003 0311 	and.w	r3, r3, #17
 800578e:	2b11      	cmp	r3, #17
 8005790:	d106      	bne.n	80057a0 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	431a      	orrs	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	605a      	str	r2, [r3, #4]
 800579e:	e006      	b.n	80057ae <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	43db      	mvns	r3, r3
 80057a8:	401a      	ands	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057d0:	0c1b      	lsrs	r3, r3, #16
 80057d2:	041b      	lsls	r3, r3, #16
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	b291      	uxth	r1, r2
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	430b      	orrs	r3, r1
 80057de:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80057e8:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80057fa:	bf00      	nop
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
	...

08005808 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	430a      	orrs	r2, r1
 8005828:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695a      	ldr	r2, [r3, #20]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a53      	ldr	r2, [pc, #332]	@ (8005994 <DMA_Init+0x18c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	f000 80a0 	beq.w	800598e <DMA_Init+0x186>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a51      	ldr	r2, [pc, #324]	@ (8005998 <DMA_Init+0x190>)
 8005854:	4293      	cmp	r3, r2
 8005856:	f000 809a 	beq.w	800598e <DMA_Init+0x186>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a4f      	ldr	r2, [pc, #316]	@ (800599c <DMA_Init+0x194>)
 8005860:	4293      	cmp	r3, r2
 8005862:	f000 8094 	beq.w	800598e <DMA_Init+0x186>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a4d      	ldr	r2, [pc, #308]	@ (80059a0 <DMA_Init+0x198>)
 800586c:	4293      	cmp	r3, r2
 800586e:	f000 808e 	beq.w	800598e <DMA_Init+0x186>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a4b      	ldr	r2, [pc, #300]	@ (80059a4 <DMA_Init+0x19c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	f000 8088 	beq.w	800598e <DMA_Init+0x186>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a49      	ldr	r2, [pc, #292]	@ (80059a8 <DMA_Init+0x1a0>)
 8005884:	4293      	cmp	r3, r2
 8005886:	f000 8082 	beq.w	800598e <DMA_Init+0x186>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a47      	ldr	r2, [pc, #284]	@ (80059ac <DMA_Init+0x1a4>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d07c      	beq.n	800598e <DMA_Init+0x186>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a45      	ldr	r2, [pc, #276]	@ (80059b0 <DMA_Init+0x1a8>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d077      	beq.n	800598e <DMA_Init+0x186>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a44      	ldr	r2, [pc, #272]	@ (80059b4 <DMA_Init+0x1ac>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d072      	beq.n	800598e <DMA_Init+0x186>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a42      	ldr	r2, [pc, #264]	@ (80059b8 <DMA_Init+0x1b0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d06d      	beq.n	800598e <DMA_Init+0x186>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a41      	ldr	r2, [pc, #260]	@ (80059bc <DMA_Init+0x1b4>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d068      	beq.n	800598e <DMA_Init+0x186>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a3f      	ldr	r2, [pc, #252]	@ (80059c0 <DMA_Init+0x1b8>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d063      	beq.n	800598e <DMA_Init+0x186>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a3e      	ldr	r2, [pc, #248]	@ (80059c4 <DMA_Init+0x1bc>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d05e      	beq.n	800598e <DMA_Init+0x186>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a3c      	ldr	r2, [pc, #240]	@ (80059c8 <DMA_Init+0x1c0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d059      	beq.n	800598e <DMA_Init+0x186>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a3b      	ldr	r2, [pc, #236]	@ (80059cc <DMA_Init+0x1c4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d054      	beq.n	800598e <DMA_Init+0x186>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a39      	ldr	r2, [pc, #228]	@ (80059d0 <DMA_Init+0x1c8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d04f      	beq.n	800598e <DMA_Init+0x186>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a38      	ldr	r2, [pc, #224]	@ (80059d4 <DMA_Init+0x1cc>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d04a      	beq.n	800598e <DMA_Init+0x186>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a36      	ldr	r2, [pc, #216]	@ (80059d8 <DMA_Init+0x1d0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d045      	beq.n	800598e <DMA_Init+0x186>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a35      	ldr	r2, [pc, #212]	@ (80059dc <DMA_Init+0x1d4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d040      	beq.n	800598e <DMA_Init+0x186>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a33      	ldr	r2, [pc, #204]	@ (80059e0 <DMA_Init+0x1d8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d03b      	beq.n	800598e <DMA_Init+0x186>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a32      	ldr	r2, [pc, #200]	@ (80059e4 <DMA_Init+0x1dc>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d036      	beq.n	800598e <DMA_Init+0x186>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a30      	ldr	r2, [pc, #192]	@ (80059e8 <DMA_Init+0x1e0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d031      	beq.n	800598e <DMA_Init+0x186>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a2f      	ldr	r2, [pc, #188]	@ (80059ec <DMA_Init+0x1e4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d02c      	beq.n	800598e <DMA_Init+0x186>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a2d      	ldr	r2, [pc, #180]	@ (80059f0 <DMA_Init+0x1e8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d027      	beq.n	800598e <DMA_Init+0x186>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a2c      	ldr	r2, [pc, #176]	@ (80059f4 <DMA_Init+0x1ec>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d022      	beq.n	800598e <DMA_Init+0x186>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a2a      	ldr	r2, [pc, #168]	@ (80059f8 <DMA_Init+0x1f0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d01d      	beq.n	800598e <DMA_Init+0x186>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a29      	ldr	r2, [pc, #164]	@ (80059fc <DMA_Init+0x1f4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d018      	beq.n	800598e <DMA_Init+0x186>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a27      	ldr	r2, [pc, #156]	@ (8005a00 <DMA_Init+0x1f8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d013      	beq.n	800598e <DMA_Init+0x186>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a26      	ldr	r2, [pc, #152]	@ (8005a04 <DMA_Init+0x1fc>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d00e      	beq.n	800598e <DMA_Init+0x186>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a24      	ldr	r2, [pc, #144]	@ (8005a08 <DMA_Init+0x200>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d009      	beq.n	800598e <DMA_Init+0x186>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a23      	ldr	r2, [pc, #140]	@ (8005a0c <DMA_Init+0x204>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d004      	beq.n	800598e <DMA_Init+0x186>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a21      	ldr	r2, [pc, #132]	@ (8005a10 <DMA_Init+0x208>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d142      	bne.n	8005a14 <DMA_Init+0x20c>
 800598e:	2301      	movs	r3, #1
 8005990:	e041      	b.n	8005a16 <DMA_Init+0x20e>
 8005992:	bf00      	nop
 8005994:	40020050 	.word	0x40020050
 8005998:	50020050 	.word	0x50020050
 800599c:	400200d0 	.word	0x400200d0
 80059a0:	500200d0 	.word	0x500200d0
 80059a4:	40020150 	.word	0x40020150
 80059a8:	50020150 	.word	0x50020150
 80059ac:	400201d0 	.word	0x400201d0
 80059b0:	500201d0 	.word	0x500201d0
 80059b4:	40020250 	.word	0x40020250
 80059b8:	50020250 	.word	0x50020250
 80059bc:	400202d0 	.word	0x400202d0
 80059c0:	500202d0 	.word	0x500202d0
 80059c4:	40020350 	.word	0x40020350
 80059c8:	50020350 	.word	0x50020350
 80059cc:	400203d0 	.word	0x400203d0
 80059d0:	500203d0 	.word	0x500203d0
 80059d4:	40020450 	.word	0x40020450
 80059d8:	50020450 	.word	0x50020450
 80059dc:	400204d0 	.word	0x400204d0
 80059e0:	500204d0 	.word	0x500204d0
 80059e4:	40020550 	.word	0x40020550
 80059e8:	50020550 	.word	0x50020550
 80059ec:	400205d0 	.word	0x400205d0
 80059f0:	500205d0 	.word	0x500205d0
 80059f4:	40020650 	.word	0x40020650
 80059f8:	50020650 	.word	0x50020650
 80059fc:	400206d0 	.word	0x400206d0
 8005a00:	500206d0 	.word	0x500206d0
 8005a04:	40020750 	.word	0x40020750
 8005a08:	50020750 	.word	0x50020750
 8005a0c:	400207d0 	.word	0x400207d0
 8005a10:	500207d0 	.word	0x500207d0
 8005a14:	2300      	movs	r3, #0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d012      	beq.n	8005a40 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a22:	3b01      	subs	r3, #1
 8005a24:	051b      	lsls	r3, r3, #20
 8005a26:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005a2a:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a30:	3b01      	subs	r3, #1
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005a38:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a46:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a60:	431a      	orrs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a72:	f040 80b0 	bne.w	8005bd6 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a82      	ldr	r2, [pc, #520]	@ (8005c84 <DMA_Init+0x47c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	f000 80a0 	beq.w	8005bc2 <DMA_Init+0x3ba>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a80      	ldr	r2, [pc, #512]	@ (8005c88 <DMA_Init+0x480>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	f000 809a 	beq.w	8005bc2 <DMA_Init+0x3ba>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a7e      	ldr	r2, [pc, #504]	@ (8005c8c <DMA_Init+0x484>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	f000 8094 	beq.w	8005bc2 <DMA_Init+0x3ba>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a7c      	ldr	r2, [pc, #496]	@ (8005c90 <DMA_Init+0x488>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	f000 808e 	beq.w	8005bc2 <DMA_Init+0x3ba>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a7a      	ldr	r2, [pc, #488]	@ (8005c94 <DMA_Init+0x48c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	f000 8088 	beq.w	8005bc2 <DMA_Init+0x3ba>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a78      	ldr	r2, [pc, #480]	@ (8005c98 <DMA_Init+0x490>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	f000 8082 	beq.w	8005bc2 <DMA_Init+0x3ba>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a76      	ldr	r2, [pc, #472]	@ (8005c9c <DMA_Init+0x494>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d07c      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a74      	ldr	r2, [pc, #464]	@ (8005ca0 <DMA_Init+0x498>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d077      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a73      	ldr	r2, [pc, #460]	@ (8005ca4 <DMA_Init+0x49c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d072      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a71      	ldr	r2, [pc, #452]	@ (8005ca8 <DMA_Init+0x4a0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d06d      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a70      	ldr	r2, [pc, #448]	@ (8005cac <DMA_Init+0x4a4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d068      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a6e      	ldr	r2, [pc, #440]	@ (8005cb0 <DMA_Init+0x4a8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d063      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a6d      	ldr	r2, [pc, #436]	@ (8005cb4 <DMA_Init+0x4ac>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d05e      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a6b      	ldr	r2, [pc, #428]	@ (8005cb8 <DMA_Init+0x4b0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d059      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a6a      	ldr	r2, [pc, #424]	@ (8005cbc <DMA_Init+0x4b4>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d054      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a68      	ldr	r2, [pc, #416]	@ (8005cc0 <DMA_Init+0x4b8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d04f      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a67      	ldr	r2, [pc, #412]	@ (8005cc4 <DMA_Init+0x4bc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d04a      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a65      	ldr	r2, [pc, #404]	@ (8005cc8 <DMA_Init+0x4c0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d045      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a64      	ldr	r2, [pc, #400]	@ (8005ccc <DMA_Init+0x4c4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d040      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a62      	ldr	r2, [pc, #392]	@ (8005cd0 <DMA_Init+0x4c8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d03b      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a61      	ldr	r2, [pc, #388]	@ (8005cd4 <DMA_Init+0x4cc>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d036      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a5f      	ldr	r2, [pc, #380]	@ (8005cd8 <DMA_Init+0x4d0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d031      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a5e      	ldr	r2, [pc, #376]	@ (8005cdc <DMA_Init+0x4d4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d02c      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a5c      	ldr	r2, [pc, #368]	@ (8005ce0 <DMA_Init+0x4d8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d027      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a5b      	ldr	r2, [pc, #364]	@ (8005ce4 <DMA_Init+0x4dc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d022      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a59      	ldr	r2, [pc, #356]	@ (8005ce8 <DMA_Init+0x4e0>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d01d      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a58      	ldr	r2, [pc, #352]	@ (8005cec <DMA_Init+0x4e4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d018      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a56      	ldr	r2, [pc, #344]	@ (8005cf0 <DMA_Init+0x4e8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d013      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a55      	ldr	r2, [pc, #340]	@ (8005cf4 <DMA_Init+0x4ec>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00e      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a53      	ldr	r2, [pc, #332]	@ (8005cf8 <DMA_Init+0x4f0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d009      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a52      	ldr	r2, [pc, #328]	@ (8005cfc <DMA_Init+0x4f4>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d004      	beq.n	8005bc2 <DMA_Init+0x3ba>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a50      	ldr	r2, [pc, #320]	@ (8005d00 <DMA_Init+0x4f8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d101      	bne.n	8005bc6 <DMA_Init+0x3be>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <DMA_Init+0x3c0>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00d      	beq.n	8005be8 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	e008      	b.n	8005be8 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bde:	d103      	bne.n	8005be8 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005be6:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bee:	4b45      	ldr	r3, [pc, #276]	@ (8005d04 <DMA_Init+0x4fc>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6812      	ldr	r2, [r2, #0]
 8005bf6:	68f9      	ldr	r1, [r7, #12]
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2200      	movs	r2, #0
 8005c02:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a36      	ldr	r2, [pc, #216]	@ (8005ce4 <DMA_Init+0x4dc>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d022      	beq.n	8005c54 <DMA_Init+0x44c>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a35      	ldr	r2, [pc, #212]	@ (8005ce8 <DMA_Init+0x4e0>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d01d      	beq.n	8005c54 <DMA_Init+0x44c>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a33      	ldr	r2, [pc, #204]	@ (8005cec <DMA_Init+0x4e4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d018      	beq.n	8005c54 <DMA_Init+0x44c>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a32      	ldr	r2, [pc, #200]	@ (8005cf0 <DMA_Init+0x4e8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d013      	beq.n	8005c54 <DMA_Init+0x44c>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a30      	ldr	r2, [pc, #192]	@ (8005cf4 <DMA_Init+0x4ec>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00e      	beq.n	8005c54 <DMA_Init+0x44c>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a2f      	ldr	r2, [pc, #188]	@ (8005cf8 <DMA_Init+0x4f0>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d009      	beq.n	8005c54 <DMA_Init+0x44c>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a2d      	ldr	r2, [pc, #180]	@ (8005cfc <DMA_Init+0x4f4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d004      	beq.n	8005c54 <DMA_Init+0x44c>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a2c      	ldr	r2, [pc, #176]	@ (8005d00 <DMA_Init+0x4f8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d101      	bne.n	8005c58 <DMA_Init+0x450>
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <DMA_Init+0x452>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d007      	beq.n	8005c6e <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2200      	movs	r2, #0
 8005c64:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2200      	movs	r2, #0
 8005c74:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005c76:	bf00      	nop
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	40020050 	.word	0x40020050
 8005c88:	50020050 	.word	0x50020050
 8005c8c:	400200d0 	.word	0x400200d0
 8005c90:	500200d0 	.word	0x500200d0
 8005c94:	40020150 	.word	0x40020150
 8005c98:	50020150 	.word	0x50020150
 8005c9c:	400201d0 	.word	0x400201d0
 8005ca0:	500201d0 	.word	0x500201d0
 8005ca4:	40020250 	.word	0x40020250
 8005ca8:	50020250 	.word	0x50020250
 8005cac:	400202d0 	.word	0x400202d0
 8005cb0:	500202d0 	.word	0x500202d0
 8005cb4:	40020350 	.word	0x40020350
 8005cb8:	50020350 	.word	0x50020350
 8005cbc:	400203d0 	.word	0x400203d0
 8005cc0:	500203d0 	.word	0x500203d0
 8005cc4:	40020450 	.word	0x40020450
 8005cc8:	50020450 	.word	0x50020450
 8005ccc:	400204d0 	.word	0x400204d0
 8005cd0:	500204d0 	.word	0x500204d0
 8005cd4:	40020550 	.word	0x40020550
 8005cd8:	50020550 	.word	0x50020550
 8005cdc:	400205d0 	.word	0x400205d0
 8005ce0:	500205d0 	.word	0x500205d0
 8005ce4:	40020650 	.word	0x40020650
 8005ce8:	50020650 	.word	0x50020650
 8005cec:	400206d0 	.word	0x400206d0
 8005cf0:	500206d0 	.word	0x500206d0
 8005cf4:	40020750 	.word	0x40020750
 8005cf8:	50020750 	.word	0x50020750
 8005cfc:	400207d0 	.word	0x400207d0
 8005d00:	500207d0 	.word	0x500207d0
 8005d04:	3c803180 	.word	0x3c803180

08005d08 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e053      	b.n	8005dc2 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fb fe82 	bl	8001a38 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005d46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6851      	ldr	r1, [r2, #4]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	69d2      	ldr	r2, [r2, #28]
 8005d52:	4311      	orrs	r1, r2
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6812      	ldr	r2, [r2, #0]
 8005d58:	430b      	orrs	r3, r1
 8005d5a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d62:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8005d66:	f023 0301 	bic.w	r3, r3, #1
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	6891      	ldr	r1, [r2, #8]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6992      	ldr	r2, [r2, #24]
 8005d72:	4311      	orrs	r1, r2
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6812      	ldr	r2, [r2, #0]
 8005d78:	430b      	orrs	r3, r1
 8005d7a:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d82:	0c1b      	lsrs	r3, r3, #16
 8005d84:	041b      	lsls	r3, r3, #16
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	68d1      	ldr	r1, [r2, #12]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6812      	ldr	r2, [r2, #0]
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d98:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	051a      	lsls	r2, r3, #20
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	055b      	lsls	r3, r3, #21
 8005da8:	431a      	orrs	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_DMA2D_ConfigLayer+0x24>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e092      	b.n	8005f16 <HAL_DMA2D_ConfigLayer+0x14a>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	4613      	mov	r3, r2
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	1a9b      	subs	r3, r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	3328      	adds	r3, #40	@ 0x28
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	4413      	add	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	041b      	lsls	r3, r3, #16
 8005e1c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005e24:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005e30:	4b3c      	ldr	r3, [pc, #240]	@ (8005f24 <HAL_DMA2D_ConfigLayer+0x158>)
 8005e32:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2b0a      	cmp	r3, #10
 8005e3a:	d003      	beq.n	8005e44 <HAL_DMA2D_ConfigLayer+0x78>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	2b09      	cmp	r3, #9
 8005e42:	d107      	bne.n	8005e54 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]
 8005e52:	e005      	b.n	8005e60 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	061b      	lsls	r3, r3, #24
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d120      	bne.n	8005ea8 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	43db      	mvns	r3, r3
 8005e70:	ea02 0103 	and.w	r1, r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	6812      	ldr	r2, [r2, #0]
 8005e86:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2b0a      	cmp	r3, #10
 8005e8e:	d003      	beq.n	8005e98 <HAL_DMA2D_ConfigLayer+0xcc>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2b09      	cmp	r3, #9
 8005e96:	d135      	bne.n	8005f04 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	68da      	ldr	r2, [r3, #12]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005ea4:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ea6:	e02d      	b.n	8005f04 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	2b0b      	cmp	r3, #11
 8005eae:	d109      	bne.n	8005ec4 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	049b      	lsls	r3, r3, #18
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8005ec2:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	69da      	ldr	r2, [r3, #28]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	ea02 0103 	and.w	r1, r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	6812      	ldr	r2, [r2, #0]
 8005ee4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2b0a      	cmp	r3, #10
 8005eec:	d003      	beq.n	8005ef6 <HAL_DMA2D_ConfigLayer+0x12a>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2b09      	cmp	r3, #9
 8005ef4:	d106      	bne.n	8005f04 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005f02:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	ff33000f 	.word	0xff33000f

08005f28 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005f30:	f7fc fcb0 	bl	8002894 <HAL_GetTick>
 8005f34:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e0db      	b.n	80060f8 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a6e      	ldr	r2, [pc, #440]	@ (8006100 <HAL_DMAEx_List_Init+0x1d8>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	f000 809f 	beq.w	800608a <HAL_DMAEx_List_Init+0x162>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a6c      	ldr	r2, [pc, #432]	@ (8006104 <HAL_DMAEx_List_Init+0x1dc>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	f000 8099 	beq.w	800608a <HAL_DMAEx_List_Init+0x162>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a6a      	ldr	r2, [pc, #424]	@ (8006108 <HAL_DMAEx_List_Init+0x1e0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	f000 8093 	beq.w	800608a <HAL_DMAEx_List_Init+0x162>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a68      	ldr	r2, [pc, #416]	@ (800610c <HAL_DMAEx_List_Init+0x1e4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	f000 808d 	beq.w	800608a <HAL_DMAEx_List_Init+0x162>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a66      	ldr	r2, [pc, #408]	@ (8006110 <HAL_DMAEx_List_Init+0x1e8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	f000 8087 	beq.w	800608a <HAL_DMAEx_List_Init+0x162>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a64      	ldr	r2, [pc, #400]	@ (8006114 <HAL_DMAEx_List_Init+0x1ec>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	f000 8081 	beq.w	800608a <HAL_DMAEx_List_Init+0x162>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a62      	ldr	r2, [pc, #392]	@ (8006118 <HAL_DMAEx_List_Init+0x1f0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d07b      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a61      	ldr	r2, [pc, #388]	@ (800611c <HAL_DMAEx_List_Init+0x1f4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d076      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a5f      	ldr	r2, [pc, #380]	@ (8006120 <HAL_DMAEx_List_Init+0x1f8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d071      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a5e      	ldr	r2, [pc, #376]	@ (8006124 <HAL_DMAEx_List_Init+0x1fc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d06c      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a5c      	ldr	r2, [pc, #368]	@ (8006128 <HAL_DMAEx_List_Init+0x200>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d067      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a5b      	ldr	r2, [pc, #364]	@ (800612c <HAL_DMAEx_List_Init+0x204>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d062      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a59      	ldr	r2, [pc, #356]	@ (8006130 <HAL_DMAEx_List_Init+0x208>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d05d      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a58      	ldr	r2, [pc, #352]	@ (8006134 <HAL_DMAEx_List_Init+0x20c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d058      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a56      	ldr	r2, [pc, #344]	@ (8006138 <HAL_DMAEx_List_Init+0x210>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d053      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a55      	ldr	r2, [pc, #340]	@ (800613c <HAL_DMAEx_List_Init+0x214>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d04e      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a53      	ldr	r2, [pc, #332]	@ (8006140 <HAL_DMAEx_List_Init+0x218>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d049      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a52      	ldr	r2, [pc, #328]	@ (8006144 <HAL_DMAEx_List_Init+0x21c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d044      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a50      	ldr	r2, [pc, #320]	@ (8006148 <HAL_DMAEx_List_Init+0x220>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d03f      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a4f      	ldr	r2, [pc, #316]	@ (800614c <HAL_DMAEx_List_Init+0x224>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d03a      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a4d      	ldr	r2, [pc, #308]	@ (8006150 <HAL_DMAEx_List_Init+0x228>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d035      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a4c      	ldr	r2, [pc, #304]	@ (8006154 <HAL_DMAEx_List_Init+0x22c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d030      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a4a      	ldr	r2, [pc, #296]	@ (8006158 <HAL_DMAEx_List_Init+0x230>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d02b      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a49      	ldr	r2, [pc, #292]	@ (800615c <HAL_DMAEx_List_Init+0x234>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d026      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a47      	ldr	r2, [pc, #284]	@ (8006160 <HAL_DMAEx_List_Init+0x238>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d021      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a46      	ldr	r2, [pc, #280]	@ (8006164 <HAL_DMAEx_List_Init+0x23c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d01c      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a44      	ldr	r2, [pc, #272]	@ (8006168 <HAL_DMAEx_List_Init+0x240>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d017      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a43      	ldr	r2, [pc, #268]	@ (800616c <HAL_DMAEx_List_Init+0x244>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d012      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a41      	ldr	r2, [pc, #260]	@ (8006170 <HAL_DMAEx_List_Init+0x248>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00d      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a40      	ldr	r2, [pc, #256]	@ (8006174 <HAL_DMAEx_List_Init+0x24c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d008      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a3e      	ldr	r2, [pc, #248]	@ (8006178 <HAL_DMAEx_List_Init+0x250>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d003      	beq.n	800608a <HAL_DMAEx_List_Init+0x162>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a3d      	ldr	r2, [pc, #244]	@ (800617c <HAL_DMAEx_List_Init+0x254>)
 8006088:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2202      	movs	r2, #2
 8006096:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695a      	ldr	r2, [r3, #20]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f042 0206 	orr.w	r2, r2, #6
 80060a8:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80060aa:	e00f      	b.n	80060cc <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80060ac:	f7fc fbf2 	bl	8002894 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b05      	cmp	r3, #5
 80060b8:	d908      	bls.n	80060cc <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2210      	movs	r2, #16
 80060be:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2203      	movs	r2, #3
 80060c4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e015      	b.n	80060f8 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1e8      	bne.n	80060ac <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fae0 	bl	80066a0 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	40020050 	.word	0x40020050
 8006104:	50020050 	.word	0x50020050
 8006108:	400200d0 	.word	0x400200d0
 800610c:	500200d0 	.word	0x500200d0
 8006110:	40020150 	.word	0x40020150
 8006114:	50020150 	.word	0x50020150
 8006118:	400201d0 	.word	0x400201d0
 800611c:	500201d0 	.word	0x500201d0
 8006120:	40020250 	.word	0x40020250
 8006124:	50020250 	.word	0x50020250
 8006128:	400202d0 	.word	0x400202d0
 800612c:	500202d0 	.word	0x500202d0
 8006130:	40020350 	.word	0x40020350
 8006134:	50020350 	.word	0x50020350
 8006138:	400203d0 	.word	0x400203d0
 800613c:	500203d0 	.word	0x500203d0
 8006140:	40020450 	.word	0x40020450
 8006144:	50020450 	.word	0x50020450
 8006148:	400204d0 	.word	0x400204d0
 800614c:	500204d0 	.word	0x500204d0
 8006150:	40020550 	.word	0x40020550
 8006154:	50020550 	.word	0x50020550
 8006158:	400205d0 	.word	0x400205d0
 800615c:	500205d0 	.word	0x500205d0
 8006160:	40020650 	.word	0x40020650
 8006164:	50020650 	.word	0x50020650
 8006168:	400206d0 	.word	0x400206d0
 800616c:	500206d0 	.word	0x500206d0
 8006170:	40020750 	.word	0x40020750
 8006174:	50020750 	.word	0x50020750
 8006178:	400207d0 	.word	0x400207d0
 800617c:	500207d0 	.word	0x500207d0

08006180 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_DMAEx_List_Start_IT+0x16>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e082      	b.n	80062a0 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80061a0:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061ac:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80061ae:	7dfb      	ldrb	r3, [r7, #23]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d005      	beq.n	80061c0 <HAL_DMAEx_List_Start_IT+0x40>
 80061b4:	7dfb      	ldrb	r3, [r7, #23]
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d16a      	bne.n	8006290 <HAL_DMAEx_List_Start_IT+0x110>
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d067      	beq.n	8006290 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d157      	bne.n	800627c <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d101      	bne.n	80061da <HAL_DMAEx_List_Start_IT+0x5a>
 80061d6:	2302      	movs	r3, #2
 80061d8:	e062      	b.n	80062a0 <HAL_DMAEx_List_Start_IT+0x120>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2202      	movs	r2, #2
 80061e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ee:	2202      	movs	r2, #2
 80061f0:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061fc:	2200      	movs	r2, #0
 80061fe:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695a      	ldr	r2, [r3, #20]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800620e:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695a      	ldr	r2, [r3, #20]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006226:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800622c:	2b00      	cmp	r3, #0
 800622e:	d007      	beq.n	8006240 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	695a      	ldr	r2, [r3, #20]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800623e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f107 010c 	add.w	r1, r7, #12
 800624a:	2200      	movs	r2, #0
 800624c:	4618      	mov	r0, r3
 800624e:	f000 fe47 	bl	8006ee0 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4619      	mov	r1, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	0c0b      	lsrs	r3, r1, #16
 8006260:	041b      	lsls	r3, r3, #16
 8006262:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	461a      	mov	r2, r3
 800626c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006270:	4013      	ands	r3, r2
 8006272:	68f9      	ldr	r1, [r7, #12]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	6812      	ldr	r2, [r2, #0]
 8006278:	430b      	orrs	r3, r1
 800627a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695a      	ldr	r2, [r3, #20]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f042 0201 	orr.w	r2, r2, #1
 800628a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	e007      	b.n	80062a0 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2240      	movs	r2, #64	@ 0x40
 8006294:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <HAL_DMAEx_List_BuildNode+0x16>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e004      	b.n	80062cc <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fb43 	bl	8006950 <DMA_List_BuildNode>

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <HAL_DMAEx_List_GetNodeConfig+0x16>
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e004      	b.n	80062f8 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 80062ee:	6839      	ldr	r1, [r7, #0]
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fc7f 	bl	8006bf4 <DMA_List_GetNodeConfig>

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b08c      	sub	sp, #48	@ 0x30
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <HAL_DMAEx_List_InsertNode+0x18>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e0b6      	b.n	800648a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d104      	bne.n	800632e <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2204      	movs	r2, #4
 8006328:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e0ad      	b.n	800648a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	68b9      	ldr	r1, [r7, #8]
 8006336:	4618      	mov	r0, r3
 8006338:	f000 fd66 	bl	8006e08 <DMA_List_CheckNodesBaseAddresses>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d004      	beq.n	800634c <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2205      	movs	r2, #5
 8006346:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e09e      	b.n	800648a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	4618      	mov	r0, r3
 8006356:	f000 fd87 	bl	8006e68 <DMA_List_CheckNodesTypes>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d004      	beq.n	800636a <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2204      	movs	r2, #4
 8006364:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e08f      	b.n	800648a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2202      	movs	r2, #2
 800636e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8006376:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800637a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800637e:	4619      	mov	r1, r3
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fdad 	bl	8006ee0 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d11a      	bne.n	80063c4 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d106      	bne.n	80063a2 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	609a      	str	r2, [r3, #8]
 80063a0:	e06c      	b.n	800647c <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80063ae:	4013      	ands	r3, r2
 80063b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063b4:	4319      	orrs	r1, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2202      	movs	r2, #2
 80063c0:	609a      	str	r2, [r3, #8]
 80063c2:	e05b      	b.n	800647c <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10f      	bne.n	80063ea <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80063d4:	4013      	ands	r3, r2
 80063d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063da:	4319      	orrs	r1, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	e043      	b.n	8006472 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80063ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ec:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80063ee:	f107 0314 	add.w	r3, r7, #20
 80063f2:	461a      	mov	r2, r3
 80063f4:	68b9      	ldr	r1, [r7, #8]
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f000 fda2 	bl	8006f40 <DMA_List_FindNode>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d132      	bne.n	8006468 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	429a      	cmp	r2, r3
 800640a:	d11a      	bne.n	8006442 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00b      	beq.n	800642c <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	461a      	mov	r2, r3
 800641a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800641e:	4013      	ands	r3, r2
 8006420:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006422:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006424:	4319      	orrs	r1, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006432:	4013      	ands	r3, r2
 8006434:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006436:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006438:	4319      	orrs	r1, r3
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006440:	e017      	b.n	8006472 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8006442:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006444:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006458:	4013      	ands	r3, r2
 800645a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800645c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800645e:	4319      	orrs	r1, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006466:	e004      	b.n	8006472 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2206      	movs	r2, #6
 800646c:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e00b      	b.n	800648a <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2201      	movs	r2, #1
 8006486:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3730      	adds	r7, #48	@ 0x30
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b08a      	sub	sp, #40	@ 0x28
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e052      	b.n	800654a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d104      	bne.n	80064b6 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e049      	b.n	800654a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00c      	beq.n	80064d8 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d101      	bne.n	80064ce <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	e03d      	b.n	800654a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2204      	movs	r2, #4
 80064d2:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e038      	b.n	800654a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d104      	bne.n	80064ea <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2204      	movs	r2, #4
 80064e4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e02f      	b.n	800654a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2202      	movs	r2, #2
 80064ee:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f107 0220 	add.w	r2, r7, #32
 80064fe:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fcec 	bl	8006ee0 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 800650c:	f107 030c 	add.w	r3, r7, #12
 8006510:	461a      	mov	r2, r3
 8006512:	2100      	movs	r1, #0
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fd13 	bl	8006f40 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006524:	4013      	ands	r3, r2
 8006526:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	4610      	mov	r0, r2
 800652c:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800652e:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006530:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3728      	adds	r7, #40	@ 0x28
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <HAL_DMAEx_List_LinkQ+0x16>
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e072      	b.n	8006654 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006574:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d002      	beq.n	8006588 <HAL_DMAEx_List_LinkQ+0x34>
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	2b05      	cmp	r3, #5
 8006586:	d108      	bne.n	800659a <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2240      	movs	r2, #64	@ 0x40
 800658c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e05c      	b.n	8006654 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	7b1b      	ldrb	r3, [r3, #12]
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d104      	bne.n	80065ae <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	2201      	movs	r2, #1
 80065a8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e052      	b.n	8006654 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006660 <HAL_DMAEx_List_LinkQ+0x10c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d022      	beq.n	80065fe <HAL_DMAEx_List_LinkQ+0xaa>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a29      	ldr	r2, [pc, #164]	@ (8006664 <HAL_DMAEx_List_LinkQ+0x110>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d01d      	beq.n	80065fe <HAL_DMAEx_List_LinkQ+0xaa>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a28      	ldr	r2, [pc, #160]	@ (8006668 <HAL_DMAEx_List_LinkQ+0x114>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d018      	beq.n	80065fe <HAL_DMAEx_List_LinkQ+0xaa>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a26      	ldr	r2, [pc, #152]	@ (800666c <HAL_DMAEx_List_LinkQ+0x118>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d013      	beq.n	80065fe <HAL_DMAEx_List_LinkQ+0xaa>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a25      	ldr	r2, [pc, #148]	@ (8006670 <HAL_DMAEx_List_LinkQ+0x11c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d00e      	beq.n	80065fe <HAL_DMAEx_List_LinkQ+0xaa>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a23      	ldr	r2, [pc, #140]	@ (8006674 <HAL_DMAEx_List_LinkQ+0x120>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d009      	beq.n	80065fe <HAL_DMAEx_List_LinkQ+0xaa>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a22      	ldr	r2, [pc, #136]	@ (8006678 <HAL_DMAEx_List_LinkQ+0x124>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d004      	beq.n	80065fe <HAL_DMAEx_List_LinkQ+0xaa>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a20      	ldr	r2, [pc, #128]	@ (800667c <HAL_DMAEx_List_LinkQ+0x128>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d101      	bne.n	8006602 <HAL_DMAEx_List_LinkQ+0xae>
 80065fe:	2301      	movs	r3, #1
 8006600:	e000      	b.n	8006604 <HAL_DMAEx_List_LinkQ+0xb0>
 8006602:	2300      	movs	r3, #0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10b      	bne.n	8006620 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006612:	2b00      	cmp	r3, #0
 8006614:	d004      	beq.n	8006620 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2203      	movs	r2, #3
 800661a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e019      	b.n	8006654 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006624:	2b81      	cmp	r3, #129	@ 0x81
 8006626:	d108      	bne.n	800663a <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10d      	bne.n	800664c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2204      	movs	r2, #4
 8006634:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e00c      	b.n	8006654 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d004      	beq.n	800664c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2204      	movs	r2, #4
 8006646:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e003      	b.n	8006654 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	40020650 	.word	0x40020650
 8006664:	50020650 	.word	0x50020650
 8006668:	400206d0 	.word	0x400206d0
 800666c:	500206d0 	.word	0x500206d0
 8006670:	40020750 	.word	0x40020750
 8006674:	50020750 	.word	0x50020750
 8006678:	400207d0 	.word	0x400207d0
 800667c:	500207d0 	.word	0x500207d0

08006680 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	0c1b      	lsrs	r3, r3, #16
 8006690:	b2db      	uxtb	r3, r3
}
 8006692:	4618      	mov	r0, r3
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
	...

080066a0 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b0:	4313      	orrs	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a85      	ldr	r2, [pc, #532]	@ (80068d0 <DMA_List_Init+0x230>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	f000 80a0 	beq.w	8006800 <DMA_List_Init+0x160>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a83      	ldr	r2, [pc, #524]	@ (80068d4 <DMA_List_Init+0x234>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	f000 809a 	beq.w	8006800 <DMA_List_Init+0x160>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a81      	ldr	r2, [pc, #516]	@ (80068d8 <DMA_List_Init+0x238>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	f000 8094 	beq.w	8006800 <DMA_List_Init+0x160>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a7f      	ldr	r2, [pc, #508]	@ (80068dc <DMA_List_Init+0x23c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	f000 808e 	beq.w	8006800 <DMA_List_Init+0x160>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a7d      	ldr	r2, [pc, #500]	@ (80068e0 <DMA_List_Init+0x240>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	f000 8088 	beq.w	8006800 <DMA_List_Init+0x160>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a7b      	ldr	r2, [pc, #492]	@ (80068e4 <DMA_List_Init+0x244>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	f000 8082 	beq.w	8006800 <DMA_List_Init+0x160>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a79      	ldr	r2, [pc, #484]	@ (80068e8 <DMA_List_Init+0x248>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d07c      	beq.n	8006800 <DMA_List_Init+0x160>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a78      	ldr	r2, [pc, #480]	@ (80068ec <DMA_List_Init+0x24c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d077      	beq.n	8006800 <DMA_List_Init+0x160>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a76      	ldr	r2, [pc, #472]	@ (80068f0 <DMA_List_Init+0x250>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d072      	beq.n	8006800 <DMA_List_Init+0x160>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a75      	ldr	r2, [pc, #468]	@ (80068f4 <DMA_List_Init+0x254>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d06d      	beq.n	8006800 <DMA_List_Init+0x160>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a73      	ldr	r2, [pc, #460]	@ (80068f8 <DMA_List_Init+0x258>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d068      	beq.n	8006800 <DMA_List_Init+0x160>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a72      	ldr	r2, [pc, #456]	@ (80068fc <DMA_List_Init+0x25c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d063      	beq.n	8006800 <DMA_List_Init+0x160>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a70      	ldr	r2, [pc, #448]	@ (8006900 <DMA_List_Init+0x260>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d05e      	beq.n	8006800 <DMA_List_Init+0x160>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a6f      	ldr	r2, [pc, #444]	@ (8006904 <DMA_List_Init+0x264>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d059      	beq.n	8006800 <DMA_List_Init+0x160>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a6d      	ldr	r2, [pc, #436]	@ (8006908 <DMA_List_Init+0x268>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d054      	beq.n	8006800 <DMA_List_Init+0x160>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a6c      	ldr	r2, [pc, #432]	@ (800690c <DMA_List_Init+0x26c>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d04f      	beq.n	8006800 <DMA_List_Init+0x160>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a6a      	ldr	r2, [pc, #424]	@ (8006910 <DMA_List_Init+0x270>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d04a      	beq.n	8006800 <DMA_List_Init+0x160>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a69      	ldr	r2, [pc, #420]	@ (8006914 <DMA_List_Init+0x274>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d045      	beq.n	8006800 <DMA_List_Init+0x160>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a67      	ldr	r2, [pc, #412]	@ (8006918 <DMA_List_Init+0x278>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d040      	beq.n	8006800 <DMA_List_Init+0x160>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a66      	ldr	r2, [pc, #408]	@ (800691c <DMA_List_Init+0x27c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d03b      	beq.n	8006800 <DMA_List_Init+0x160>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a64      	ldr	r2, [pc, #400]	@ (8006920 <DMA_List_Init+0x280>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d036      	beq.n	8006800 <DMA_List_Init+0x160>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a63      	ldr	r2, [pc, #396]	@ (8006924 <DMA_List_Init+0x284>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d031      	beq.n	8006800 <DMA_List_Init+0x160>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a61      	ldr	r2, [pc, #388]	@ (8006928 <DMA_List_Init+0x288>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d02c      	beq.n	8006800 <DMA_List_Init+0x160>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a60      	ldr	r2, [pc, #384]	@ (800692c <DMA_List_Init+0x28c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d027      	beq.n	8006800 <DMA_List_Init+0x160>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a5e      	ldr	r2, [pc, #376]	@ (8006930 <DMA_List_Init+0x290>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d022      	beq.n	8006800 <DMA_List_Init+0x160>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a5d      	ldr	r2, [pc, #372]	@ (8006934 <DMA_List_Init+0x294>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d01d      	beq.n	8006800 <DMA_List_Init+0x160>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a5b      	ldr	r2, [pc, #364]	@ (8006938 <DMA_List_Init+0x298>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d018      	beq.n	8006800 <DMA_List_Init+0x160>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a5a      	ldr	r2, [pc, #360]	@ (800693c <DMA_List_Init+0x29c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d013      	beq.n	8006800 <DMA_List_Init+0x160>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a58      	ldr	r2, [pc, #352]	@ (8006940 <DMA_List_Init+0x2a0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d00e      	beq.n	8006800 <DMA_List_Init+0x160>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a57      	ldr	r2, [pc, #348]	@ (8006944 <DMA_List_Init+0x2a4>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d009      	beq.n	8006800 <DMA_List_Init+0x160>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a55      	ldr	r2, [pc, #340]	@ (8006948 <DMA_List_Init+0x2a8>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d004      	beq.n	8006800 <DMA_List_Init+0x160>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a54      	ldr	r2, [pc, #336]	@ (800694c <DMA_List_Init+0x2ac>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d101      	bne.n	8006804 <DMA_List_Init+0x164>
 8006800:	2301      	movs	r3, #1
 8006802:	e000      	b.n	8006806 <DMA_List_Init+0x166>
 8006804:	2300      	movs	r3, #0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d004      	beq.n	8006814 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	4313      	orrs	r3, r2
 8006812:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	430a      	orrs	r2, r1
 8006826:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2200      	movs	r2, #0
 800682e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006838:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2200      	movs	r2, #0
 8006840:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2200      	movs	r2, #0
 8006848:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2200      	movs	r2, #0
 8006850:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a36      	ldr	r2, [pc, #216]	@ (8006930 <DMA_List_Init+0x290>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d022      	beq.n	80068a2 <DMA_List_Init+0x202>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a34      	ldr	r2, [pc, #208]	@ (8006934 <DMA_List_Init+0x294>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d01d      	beq.n	80068a2 <DMA_List_Init+0x202>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a33      	ldr	r2, [pc, #204]	@ (8006938 <DMA_List_Init+0x298>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d018      	beq.n	80068a2 <DMA_List_Init+0x202>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a31      	ldr	r2, [pc, #196]	@ (800693c <DMA_List_Init+0x29c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d013      	beq.n	80068a2 <DMA_List_Init+0x202>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a30      	ldr	r2, [pc, #192]	@ (8006940 <DMA_List_Init+0x2a0>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d00e      	beq.n	80068a2 <DMA_List_Init+0x202>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a2e      	ldr	r2, [pc, #184]	@ (8006944 <DMA_List_Init+0x2a4>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d009      	beq.n	80068a2 <DMA_List_Init+0x202>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a2d      	ldr	r2, [pc, #180]	@ (8006948 <DMA_List_Init+0x2a8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d004      	beq.n	80068a2 <DMA_List_Init+0x202>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a2b      	ldr	r2, [pc, #172]	@ (800694c <DMA_List_Init+0x2ac>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d101      	bne.n	80068a6 <DMA_List_Init+0x206>
 80068a2:	2301      	movs	r3, #1
 80068a4:	e000      	b.n	80068a8 <DMA_List_Init+0x208>
 80068a6:	2300      	movs	r3, #0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d007      	beq.n	80068bc <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2200      	movs	r2, #0
 80068b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2200      	movs	r2, #0
 80068ba:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2200      	movs	r2, #0
 80068c2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80068c4:	bf00      	nop
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	40020050 	.word	0x40020050
 80068d4:	50020050 	.word	0x50020050
 80068d8:	400200d0 	.word	0x400200d0
 80068dc:	500200d0 	.word	0x500200d0
 80068e0:	40020150 	.word	0x40020150
 80068e4:	50020150 	.word	0x50020150
 80068e8:	400201d0 	.word	0x400201d0
 80068ec:	500201d0 	.word	0x500201d0
 80068f0:	40020250 	.word	0x40020250
 80068f4:	50020250 	.word	0x50020250
 80068f8:	400202d0 	.word	0x400202d0
 80068fc:	500202d0 	.word	0x500202d0
 8006900:	40020350 	.word	0x40020350
 8006904:	50020350 	.word	0x50020350
 8006908:	400203d0 	.word	0x400203d0
 800690c:	500203d0 	.word	0x500203d0
 8006910:	40020450 	.word	0x40020450
 8006914:	50020450 	.word	0x50020450
 8006918:	400204d0 	.word	0x400204d0
 800691c:	500204d0 	.word	0x500204d0
 8006920:	40020550 	.word	0x40020550
 8006924:	50020550 	.word	0x50020550
 8006928:	400205d0 	.word	0x400205d0
 800692c:	500205d0 	.word	0x500205d0
 8006930:	40020650 	.word	0x40020650
 8006934:	50020650 	.word	0x50020650
 8006938:	400206d0 	.word	0x400206d0
 800693c:	500206d0 	.word	0x500206d0
 8006940:	40020750 	.word	0x40020750
 8006944:	50020750 	.word	0x50020750
 8006948:	400207d0 	.word	0x400207d0
 800694c:	500207d0 	.word	0x500207d0

08006950 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006962:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8006968:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800696e:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8006974:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b00      	cmp	r3, #0
 8006984:	d017      	beq.n	80069b6 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006992:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006998:	3b01      	subs	r3, #1
 800699a:	051b      	lsls	r3, r3, #20
 800699c:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80069a0:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a6:	3b01      	subs	r3, #1
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80069ae:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80069b0:	431a      	orrs	r2, r3
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6859      	ldr	r1, [r3, #4]
 80069be:	f240 237f 	movw	r3, #639	@ 0x27f
 80069c2:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80069c4:	431a      	orrs	r2, r3
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069d2:	d10c      	bne.n	80069ee <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0320 	and.w	r3, r3, #32
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d011      	beq.n	8006a04 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	605a      	str	r2, [r3, #4]
 80069ec:	e00a      	b.n	8006a04 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069f6:	d105      	bne.n	8006a04 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00f      	beq.n	8006a2c <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a18:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a1e:	041b      	lsls	r3, r3, #16
 8006a20:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006a24:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006a26:	431a      	orrs	r2, r3
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d04e      	beq.n	8006ae0 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	0419      	lsls	r1, r3, #16
 8006a4e:	4b67      	ldr	r3, [pc, #412]	@ (8006bec <DMA_List_BuildNode+0x29c>)
 8006a50:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006a52:	431a      	orrs	r2, r3
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	da06      	bge.n	8006a6e <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	609a      	str	r2, [r3, #8]
 8006a6c:	e005      	b.n	8006a7a <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	da06      	bge.n	8006a90 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	609a      	str	r2, [r3, #8]
 8006a8e:	e005      	b.n	8006a9c <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	da06      	bge.n	8006ab2 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	609a      	str	r2, [r3, #8]
 8006ab0:	e005      	b.n	8006abe <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	da06      	bge.n	8006ad4 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	609a      	str	r2, [r3, #8]
 8006ad2:	e005      	b.n	8006ae0 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d059      	beq.n	8006bb0 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	da09      	bge.n	8006b18 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b08:	425b      	negs	r3, r3
 8006b0a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	615a      	str	r2, [r3, #20]
 8006b16:	e005      	b.n	8006b24 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b1c:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	da0d      	bge.n	8006b48 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b30:	425b      	negs	r3, r3
 8006b32:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	695a      	ldr	r2, [r3, #20]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	0419      	lsls	r1, r3, #16
 8006b3c:	4b2c      	ldr	r3, [pc, #176]	@ (8006bf0 <DMA_List_BuildNode+0x2a0>)
 8006b3e:	400b      	ands	r3, r1
 8006b40:	431a      	orrs	r2, r3
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	615a      	str	r2, [r3, #20]
 8006b46:	e009      	b.n	8006b5c <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b50:	0419      	lsls	r1, r3, #16
 8006b52:	4b27      	ldr	r3, [pc, #156]	@ (8006bf0 <DMA_List_BuildNode+0x2a0>)
 8006b54:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006b56:	431a      	orrs	r2, r3
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	da08      	bge.n	8006b76 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b68:	425b      	negs	r3, r3
 8006b6a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	619a      	str	r2, [r3, #24]
 8006b74:	e004      	b.n	8006b80 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b7a:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	da0b      	bge.n	8006ba0 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b8c:	425b      	negs	r3, r3
 8006b8e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	619a      	str	r2, [r3, #24]
 8006b9e:	e007      	b.n	8006bb0 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ba8:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006baa:	431a      	orrs	r2, r3
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d006      	beq.n	8006bd2 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8006bd0:	e005      	b.n	8006bde <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	621a      	str	r2, [r3, #32]
}
 8006bde:	bf00      	nop
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	07ff0000 	.word	0x07ff0000
 8006bf0:	1fff0000 	.word	0x1fff0000

08006bf4 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0208 	and.w	r2, r3, #8
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0203 	and.w	r2, r3, #3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8006c3c:	091b      	lsrs	r3, r3, #4
 8006c3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c42:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8006c4c:	0d1b      	lsrs	r3, r3, #20
 8006c4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c52:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	4b66      	ldr	r3, [pc, #408]	@ (8006e04 <DMA_List_GetNodeConfig+0x210>)
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d008      	beq.n	8006c9a <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c8e:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c96:	60da      	str	r2, [r3, #12]
 8006c98:	e013      	b.n	8006cc2 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d004      	beq.n	8006cbc <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006cb8:	60da      	str	r2, [r3, #12]
 8006cba:	e002      	b.n	8006cc2 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8006cea:	0c1b      	lsrs	r3, r3, #16
 8006cec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d008      	beq.n	8006d28 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	0c1b      	lsrs	r3, r3, #16
 8006d1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d20:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006d26:	e002      	b.n	8006d2e <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	68da      	ldr	r2, [r3, #12]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	691a      	ldr	r2, [r3, #16]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d04a      	beq.n	8006de0 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d54:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8006d56:	89fa      	ldrh	r2, [r7, #14]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	0c1b      	lsrs	r3, r3, #16
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d68:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8006d6a:	89fa      	ldrh	r2, [r7, #14]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d004      	beq.n	8006d86 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d80:	425a      	negs	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d004      	beq.n	8006d9c <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d96:	425a      	negs	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8006da2:	89fa      	ldrh	r2, [r7, #14]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	0c1b      	lsrs	r3, r3, #16
 8006dae:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8006db0:	89fa      	ldrh	r2, [r7, #14]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d004      	beq.n	8006dcc <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc6:	425a      	negs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	da11      	bge.n	8006df8 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dd8:	425a      	negs	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8006dde:	e00b      	b.n	8006df8 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006df8:	bf00      	nop
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	0c002000 	.word	0x0c002000

08006e08 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	0c1b      	lsrs	r3, r3, #16
 8006e20:	041b      	lsls	r3, r3, #16
 8006e22:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	617b      	str	r3, [r7, #20]
 8006e32:	e00a      	b.n	8006e4a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	617b      	str	r3, [r7, #20]
 8006e3e:	e004      	b.n	8006e4a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	0c1b      	lsrs	r3, r3, #16
 8006e4e:	041b      	lsls	r3, r3, #16
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d001      	beq.n	8006e5a <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e000      	b.n	8006e5c <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	371c      	adds	r7, #28
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d004      	beq.n	8006e88 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	e00e      	b.n	8006ea6 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d004      	beq.n	8006e98 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	617b      	str	r3, [r7, #20]
 8006e96:	e006      	b.n	8006ea6 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d007      	beq.n	8006ebc <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d001      	beq.n	8006ebc <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8006eb8:	2302      	movs	r3, #2
 8006eba:	e00b      	b.n	8006ed4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d007      	beq.n	8006ed2 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d001      	beq.n	8006ed2 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e000      	b.n	8006ed4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	371c      	adds	r7, #28
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00c      	beq.n	8006f12 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d002      	beq.n	8006f04 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	4a0d      	ldr	r2, [pc, #52]	@ (8006f38 <DMA_List_GetCLLRNodeInfo+0x58>)
 8006f02:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00f      	beq.n	8006f2a <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2207      	movs	r2, #7
 8006f0e:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8006f10:	e00b      	b.n	8006f2a <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d002      	beq.n	8006f1e <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	4a08      	ldr	r2, [pc, #32]	@ (8006f3c <DMA_List_GetCLLRNodeInfo+0x5c>)
 8006f1c:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2205      	movs	r2, #5
 8006f28:	601a      	str	r2, [r3, #0]
}
 8006f2a:	bf00      	nop
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	fe010000 	.word	0xfe010000
 8006f3c:	f8010000 	.word	0xf8010000

08006f40 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b089      	sub	sp, #36	@ 0x24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d142      	bne.n	8006fea <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8006f64:	e01d      	b.n	8006fa2 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d107      	bne.n	8006f7c <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	461a      	mov	r2, r3
 8006f72:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006f76:	4013      	ands	r3, r2
 8006f78:	61bb      	str	r3, [r7, #24]
 8006f7a:	e00f      	b.n	8006f9c <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	0c1b      	lsrs	r3, r3, #16
 8006f86:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8006f94:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006f98:	4013      	ands	r3, r2
 8006f9a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	69fa      	ldr	r2, [r7, #28]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d3dc      	bcc.n	8006f66 <DMA_List_FindNode+0x26>
 8006fac:	e029      	b.n	8007002 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d107      	bne.n	8006fc4 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	61bb      	str	r3, [r7, #24]
 8006fc2:	e00f      	b.n	8006fe4 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	0c1b      	lsrs	r3, r3, #16
 8006fce:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8006fdc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	69fa      	ldr	r2, [r7, #28]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d206      	bcs.n	8007002 <DMA_List_FindNode+0xc2>
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d1d5      	bne.n	8006fae <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d008      	beq.n	800701a <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800700e:	4013      	ands	r3, r2
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	429a      	cmp	r2, r3
 8007014:	d001      	beq.n	800701a <DMA_List_FindNode+0xda>
    {
      return 1U;
 8007016:	2301      	movs	r3, #1
 8007018:	e02b      	b.n	8007072 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	0c1b      	lsrs	r3, r3, #16
 8007026:	041b      	lsls	r3, r3, #16
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	431a      	orrs	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	0c1b      	lsrs	r3, r3, #16
 8007036:	041b      	lsls	r3, r3, #16
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	431a      	orrs	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	461a      	mov	r2, r3
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00f      	beq.n	8007070 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	461a      	mov	r2, r3
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800705c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8007060:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	0c1b      	lsrs	r3, r3, #16
 8007068:	041b      	lsls	r3, r3, #16
 800706a:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3724      	adds	r7, #36	@ 0x24
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
	...

08007080 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007080:	b480      	push	{r7}
 8007082:	b089      	sub	sp, #36	@ 0x24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007092:	e1ba      	b.n	800740a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	2101      	movs	r1, #1
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	fa01 f303 	lsl.w	r3, r1, r3
 80070a0:	4013      	ands	r3, r2
 80070a2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 81aa 	beq.w	8007404 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a55      	ldr	r2, [pc, #340]	@ (8007208 <HAL_GPIO_Init+0x188>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d15d      	bne.n	8007174 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80070be:	2201      	movs	r2, #1
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	fa02 f303 	lsl.w	r3, r2, r3
 80070c6:	43db      	mvns	r3, r3
 80070c8:	69fa      	ldr	r2, [r7, #28]
 80070ca:	4013      	ands	r3, r2
 80070cc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f003 0201 	and.w	r2, r3, #1
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	fa02 f303 	lsl.w	r3, r2, r3
 80070dc:	69fa      	ldr	r2, [r7, #28]
 80070de:	4313      	orrs	r3, r2
 80070e0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	69fa      	ldr	r2, [r7, #28]
 80070e6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80070e8:	4a48      	ldr	r2, [pc, #288]	@ (800720c <HAL_GPIO_Init+0x18c>)
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070f0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80070f2:	4a46      	ldr	r2, [pc, #280]	@ (800720c <HAL_GPIO_Init+0x18c>)
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	4413      	add	r3, r2
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	08da      	lsrs	r2, r3, #3
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	3208      	adds	r2, #8
 8007106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	220f      	movs	r2, #15
 8007116:	fa02 f303 	lsl.w	r3, r2, r3
 800711a:	43db      	mvns	r3, r3
 800711c:	69fa      	ldr	r2, [r7, #28]
 800711e:	4013      	ands	r3, r2
 8007120:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	f003 0307 	and.w	r3, r3, #7
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	220b      	movs	r2, #11
 800712c:	fa02 f303 	lsl.w	r3, r2, r3
 8007130:	69fa      	ldr	r2, [r7, #28]
 8007132:	4313      	orrs	r3, r2
 8007134:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	08da      	lsrs	r2, r3, #3
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	3208      	adds	r2, #8
 800713e:	69f9      	ldr	r1, [r7, #28]
 8007140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	2203      	movs	r2, #3
 8007150:	fa02 f303 	lsl.w	r3, r2, r3
 8007154:	43db      	mvns	r3, r3
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	4013      	ands	r3, r2
 800715a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	2202      	movs	r2, #2
 8007162:	fa02 f303 	lsl.w	r3, r2, r3
 8007166:	69fa      	ldr	r2, [r7, #28]
 8007168:	4313      	orrs	r3, r2
 800716a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	69fa      	ldr	r2, [r7, #28]
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	e067      	b.n	8007244 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	2b02      	cmp	r3, #2
 800717a:	d003      	beq.n	8007184 <HAL_GPIO_Init+0x104>
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	2b12      	cmp	r3, #18
 8007182:	d145      	bne.n	8007210 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	08da      	lsrs	r2, r3, #3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3208      	adds	r2, #8
 800718c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007190:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f003 0307 	and.w	r3, r3, #7
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	220f      	movs	r2, #15
 800719c:	fa02 f303 	lsl.w	r3, r2, r3
 80071a0:	43db      	mvns	r3, r3
 80071a2:	69fa      	ldr	r2, [r7, #28]
 80071a4:	4013      	ands	r3, r2
 80071a6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	f003 020f 	and.w	r2, r3, #15
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f003 0307 	and.w	r3, r3, #7
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	fa02 f303 	lsl.w	r3, r2, r3
 80071bc:	69fa      	ldr	r2, [r7, #28]
 80071be:	4313      	orrs	r3, r2
 80071c0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	08da      	lsrs	r2, r3, #3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3208      	adds	r2, #8
 80071ca:	69f9      	ldr	r1, [r7, #28]
 80071cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	005b      	lsls	r3, r3, #1
 80071da:	2203      	movs	r2, #3
 80071dc:	fa02 f303 	lsl.w	r3, r2, r3
 80071e0:	43db      	mvns	r3, r3
 80071e2:	69fa      	ldr	r2, [r7, #28]
 80071e4:	4013      	ands	r3, r2
 80071e6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f003 0203 	and.w	r2, r3, #3
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	fa02 f303 	lsl.w	r3, r2, r3
 80071f8:	69fa      	ldr	r2, [r7, #28]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	69fa      	ldr	r2, [r7, #28]
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	e01e      	b.n	8007244 <HAL_GPIO_Init+0x1c4>
 8007206:	bf00      	nop
 8007208:	46020000 	.word	0x46020000
 800720c:	080107bc 	.word	0x080107bc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	2203      	movs	r2, #3
 800721c:	fa02 f303 	lsl.w	r3, r2, r3
 8007220:	43db      	mvns	r3, r3
 8007222:	69fa      	ldr	r2, [r7, #28]
 8007224:	4013      	ands	r3, r2
 8007226:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f003 0203 	and.w	r2, r3, #3
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	005b      	lsls	r3, r3, #1
 8007234:	fa02 f303 	lsl.w	r3, r2, r3
 8007238:	69fa      	ldr	r2, [r7, #28]
 800723a:	4313      	orrs	r3, r2
 800723c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	69fa      	ldr	r2, [r7, #28]
 8007242:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d00b      	beq.n	8007264 <HAL_GPIO_Init+0x1e4>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	2b02      	cmp	r3, #2
 8007252:	d007      	beq.n	8007264 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007258:	2b11      	cmp	r3, #17
 800725a:	d003      	beq.n	8007264 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	2b12      	cmp	r3, #18
 8007262:	d130      	bne.n	80072c6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	005b      	lsls	r3, r3, #1
 800726e:	2203      	movs	r2, #3
 8007270:	fa02 f303 	lsl.w	r3, r2, r3
 8007274:	43db      	mvns	r3, r3
 8007276:	69fa      	ldr	r2, [r7, #28]
 8007278:	4013      	ands	r3, r2
 800727a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	68da      	ldr	r2, [r3, #12]
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	fa02 f303 	lsl.w	r3, r2, r3
 8007288:	69fa      	ldr	r2, [r7, #28]
 800728a:	4313      	orrs	r3, r2
 800728c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800729a:	2201      	movs	r2, #1
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	fa02 f303 	lsl.w	r3, r2, r3
 80072a2:	43db      	mvns	r3, r3
 80072a4:	69fa      	ldr	r2, [r7, #28]
 80072a6:	4013      	ands	r3, r2
 80072a8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	091b      	lsrs	r3, r3, #4
 80072b0:	f003 0201 	and.w	r2, r3, #1
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ba:	69fa      	ldr	r2, [r7, #28]
 80072bc:	4313      	orrs	r3, r2
 80072be:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	69fa      	ldr	r2, [r7, #28]
 80072c4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	d017      	beq.n	80072fe <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	005b      	lsls	r3, r3, #1
 80072d8:	2203      	movs	r2, #3
 80072da:	fa02 f303 	lsl.w	r3, r2, r3
 80072de:	43db      	mvns	r3, r3
 80072e0:	69fa      	ldr	r2, [r7, #28]
 80072e2:	4013      	ands	r3, r2
 80072e4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	689a      	ldr	r2, [r3, #8]
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	fa02 f303 	lsl.w	r3, r2, r3
 80072f2:	69fa      	ldr	r2, [r7, #28]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	69fa      	ldr	r2, [r7, #28]
 80072fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d07c      	beq.n	8007404 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800730a:	4a47      	ldr	r2, [pc, #284]	@ (8007428 <HAL_GPIO_Init+0x3a8>)
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	089b      	lsrs	r3, r3, #2
 8007310:	3318      	adds	r3, #24
 8007312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007316:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f003 0303 	and.w	r3, r3, #3
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	220f      	movs	r2, #15
 8007322:	fa02 f303 	lsl.w	r3, r2, r3
 8007326:	43db      	mvns	r3, r3
 8007328:	69fa      	ldr	r2, [r7, #28]
 800732a:	4013      	ands	r3, r2
 800732c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	0a9a      	lsrs	r2, r3, #10
 8007332:	4b3e      	ldr	r3, [pc, #248]	@ (800742c <HAL_GPIO_Init+0x3ac>)
 8007334:	4013      	ands	r3, r2
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	f002 0203 	and.w	r2, r2, #3
 800733c:	00d2      	lsls	r2, r2, #3
 800733e:	4093      	lsls	r3, r2
 8007340:	69fa      	ldr	r2, [r7, #28]
 8007342:	4313      	orrs	r3, r2
 8007344:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8007346:	4938      	ldr	r1, [pc, #224]	@ (8007428 <HAL_GPIO_Init+0x3a8>)
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	089b      	lsrs	r3, r3, #2
 800734c:	3318      	adds	r3, #24
 800734e:	69fa      	ldr	r2, [r7, #28]
 8007350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007354:	4b34      	ldr	r3, [pc, #208]	@ (8007428 <HAL_GPIO_Init+0x3a8>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	43db      	mvns	r3, r3
 800735e:	69fa      	ldr	r2, [r7, #28]
 8007360:	4013      	ands	r3, r2
 8007362:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007370:	69fa      	ldr	r2, [r7, #28]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	4313      	orrs	r3, r2
 8007376:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8007378:	4a2b      	ldr	r2, [pc, #172]	@ (8007428 <HAL_GPIO_Init+0x3a8>)
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800737e:	4b2a      	ldr	r3, [pc, #168]	@ (8007428 <HAL_GPIO_Init+0x3a8>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	43db      	mvns	r3, r3
 8007388:	69fa      	ldr	r2, [r7, #28]
 800738a:	4013      	ands	r3, r2
 800738c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800739a:	69fa      	ldr	r2, [r7, #28]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4313      	orrs	r3, r2
 80073a0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80073a2:	4a21      	ldr	r2, [pc, #132]	@ (8007428 <HAL_GPIO_Init+0x3a8>)
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80073a8:	4b1f      	ldr	r3, [pc, #124]	@ (8007428 <HAL_GPIO_Init+0x3a8>)
 80073aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073ae:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	43db      	mvns	r3, r3
 80073b4:	69fa      	ldr	r2, [r7, #28]
 80073b6:	4013      	ands	r3, r2
 80073b8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80073ce:	4a16      	ldr	r2, [pc, #88]	@ (8007428 <HAL_GPIO_Init+0x3a8>)
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80073d6:	4b14      	ldr	r3, [pc, #80]	@ (8007428 <HAL_GPIO_Init+0x3a8>)
 80073d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	43db      	mvns	r3, r3
 80073e2:	69fa      	ldr	r2, [r7, #28]
 80073e4:	4013      	ands	r3, r2
 80073e6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80073f4:	69fa      	ldr	r2, [r7, #28]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80073fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007428 <HAL_GPIO_Init+0x3a8>)
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	3301      	adds	r3, #1
 8007408:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	fa22 f303 	lsr.w	r3, r2, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	f47f ae3d 	bne.w	8007094 <HAL_GPIO_Init+0x14>
  }
}
 800741a:	bf00      	nop
 800741c:	bf00      	nop
 800741e:	3724      	adds	r7, #36	@ 0x24
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	46022000 	.word	0x46022000
 800742c:	002f7f7f 	.word	0x002f7f7f

08007430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	807b      	strh	r3, [r7, #2]
 800743c:	4613      	mov	r3, r2
 800743e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007440:	787b      	ldrb	r3, [r7, #1]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007446:	887a      	ldrh	r2, [r7, #2]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800744c:	e002      	b.n	8007454 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800744e:	887a      	ldrh	r2, [r7, #2]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	4603      	mov	r3, r0
 8007468:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800746a:	4b0f      	ldr	r3, [pc, #60]	@ (80074a8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	88fb      	ldrh	r3, [r7, #6]
 8007470:	4013      	ands	r3, r2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d006      	beq.n	8007484 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007476:	4a0c      	ldr	r2, [pc, #48]	@ (80074a8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007478:	88fb      	ldrh	r3, [r7, #6]
 800747a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800747c:	88fb      	ldrh	r3, [r7, #6]
 800747e:	4618      	mov	r0, r3
 8007480:	f000 f814 	bl	80074ac <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8007484:	4b08      	ldr	r3, [pc, #32]	@ (80074a8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007486:	691a      	ldr	r2, [r3, #16]
 8007488:	88fb      	ldrh	r3, [r7, #6]
 800748a:	4013      	ands	r3, r2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d006      	beq.n	800749e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007490:	4a05      	ldr	r2, [pc, #20]	@ (80074a8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007492:	88fb      	ldrh	r3, [r7, #6]
 8007494:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8007496:	88fb      	ldrh	r3, [r7, #6]
 8007498:	4618      	mov	r0, r3
 800749a:	f000 f812 	bl	80074c2 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800749e:	bf00      	nop
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	46022000 	.word	0x46022000

080074ac <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	4603      	mov	r3, r0
 80074b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	4603      	mov	r3, r0
 80074ca:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e08d      	b.n	8007606 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d106      	bne.n	8007504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7fa fb28 	bl	8001b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2224      	movs	r2, #36	@ 0x24
 8007508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f022 0201 	bic.w	r2, r2, #1
 800751a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007528:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689a      	ldr	r2, [r3, #8]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007538:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d107      	bne.n	8007552 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	689a      	ldr	r2, [r3, #8]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800754e:	609a      	str	r2, [r3, #8]
 8007550:	e006      	b.n	8007560 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689a      	ldr	r2, [r3, #8]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800755e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	2b02      	cmp	r3, #2
 8007566:	d108      	bne.n	800757a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685a      	ldr	r2, [r3, #4]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007576:	605a      	str	r2, [r3, #4]
 8007578:	e007      	b.n	800758a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007588:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6812      	ldr	r2, [r2, #0]
 8007594:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007598:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800759c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68da      	ldr	r2, [r3, #12]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80075ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	691a      	ldr	r2, [r3, #16]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	430a      	orrs	r2, r1
 80075c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	69d9      	ldr	r1, [r3, #28]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a1a      	ldr	r2, [r3, #32]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0201 	orr.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2220      	movs	r2, #32
 80075f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
	...

08007610 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b088      	sub	sp, #32
 8007614:	af02      	add	r7, sp, #8
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	607a      	str	r2, [r7, #4]
 800761a:	461a      	mov	r2, r3
 800761c:	460b      	mov	r3, r1
 800761e:	817b      	strh	r3, [r7, #10]
 8007620:	4613      	mov	r3, r2
 8007622:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b20      	cmp	r3, #32
 800762e:	f040 80da 	bne.w	80077e6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007638:	2b01      	cmp	r3, #1
 800763a:	d101      	bne.n	8007640 <HAL_I2C_Master_Transmit+0x30>
 800763c:	2302      	movs	r3, #2
 800763e:	e0d3      	b.n	80077e8 <HAL_I2C_Master_Transmit+0x1d8>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007648:	f7fb f924 	bl	8002894 <HAL_GetTick>
 800764c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	2319      	movs	r3, #25
 8007654:	2201      	movs	r2, #1
 8007656:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f000 fe7d 	bl	800835a <I2C_WaitOnFlagUntilTimeout>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e0be      	b.n	80077e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2221      	movs	r2, #33	@ 0x21
 800766e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2210      	movs	r2, #16
 8007676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	893a      	ldrh	r2, [r7, #8]
 800768a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007696:	b29b      	uxth	r3, r3
 8007698:	2bff      	cmp	r3, #255	@ 0xff
 800769a:	d90e      	bls.n	80076ba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	22ff      	movs	r2, #255	@ 0xff
 80076a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076a6:	b2da      	uxtb	r2, r3
 80076a8:	8979      	ldrh	r1, [r7, #10]
 80076aa:	4b51      	ldr	r3, [pc, #324]	@ (80077f0 <HAL_I2C_Master_Transmit+0x1e0>)
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f001 f814 	bl	80086e0 <I2C_TransferConfig>
 80076b8:	e06c      	b.n	8007794 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076be:	b29a      	uxth	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	8979      	ldrh	r1, [r7, #10]
 80076cc:	4b48      	ldr	r3, [pc, #288]	@ (80077f0 <HAL_I2C_Master_Transmit+0x1e0>)
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f001 f803 	bl	80086e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80076da:	e05b      	b.n	8007794 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	6a39      	ldr	r1, [r7, #32]
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 fe93 	bl	800840c <I2C_WaitOnTXISFlagUntilTimeout>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e07b      	b.n	80077e8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f4:	781a      	ldrb	r2, [r3, #0]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800770a:	b29b      	uxth	r3, r3
 800770c:	3b01      	subs	r3, #1
 800770e:	b29a      	uxth	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007718:	3b01      	subs	r3, #1
 800771a:	b29a      	uxth	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007724:	b29b      	uxth	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d034      	beq.n	8007794 <HAL_I2C_Master_Transmit+0x184>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800772e:	2b00      	cmp	r3, #0
 8007730:	d130      	bne.n	8007794 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	2200      	movs	r2, #0
 800773a:	2180      	movs	r1, #128	@ 0x80
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 fe0c 	bl	800835a <I2C_WaitOnFlagUntilTimeout>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e04d      	b.n	80077e8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007750:	b29b      	uxth	r3, r3
 8007752:	2bff      	cmp	r3, #255	@ 0xff
 8007754:	d90e      	bls.n	8007774 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	22ff      	movs	r2, #255	@ 0xff
 800775a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007760:	b2da      	uxtb	r2, r3
 8007762:	8979      	ldrh	r1, [r7, #10]
 8007764:	2300      	movs	r3, #0
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 ffb7 	bl	80086e0 <I2C_TransferConfig>
 8007772:	e00f      	b.n	8007794 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007778:	b29a      	uxth	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007782:	b2da      	uxtb	r2, r3
 8007784:	8979      	ldrh	r1, [r7, #10]
 8007786:	2300      	movs	r3, #0
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f000 ffa6 	bl	80086e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d19e      	bne.n	80076dc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	6a39      	ldr	r1, [r7, #32]
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f000 fe79 	bl	800849a <I2C_WaitOnSTOPFlagUntilTimeout>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e01a      	b.n	80077e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2220      	movs	r2, #32
 80077b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6859      	ldr	r1, [r3, #4]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	4b0b      	ldr	r3, [pc, #44]	@ (80077f4 <HAL_I2C_Master_Transmit+0x1e4>)
 80077c6:	400b      	ands	r3, r1
 80077c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	e000      	b.n	80077e8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80077e6:	2302      	movs	r3, #2
  }
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	80002000 	.word	0x80002000
 80077f4:	fe00e800 	.word	0xfe00e800

080077f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007814:	2b00      	cmp	r3, #0
 8007816:	d005      	beq.n	8007824 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	68f9      	ldr	r1, [r7, #12]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	4798      	blx	r3
  }
}
 8007824:	bf00      	nop
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00f      	beq.n	800786e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00a      	beq.n	800786e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800785c:	f043 0201 	orr.w	r2, r3, #1
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800786c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00f      	beq.n	8007898 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00a      	beq.n	8007898 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007886:	f043 0208 	orr.w	r2, r3, #8
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007896:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00f      	beq.n	80078c2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00a      	beq.n	80078c2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078b0:	f043 0202 	orr.w	r2, r3, #2
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078c0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f003 030b 	and.w	r3, r3, #11
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d003      	beq.n	80078da <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80078d2:	68f9      	ldr	r1, [r7, #12]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fbe7 	bl	80080a8 <I2C_ITError>
  }
}
 80078da:	bf00      	nop
 80078dc:	3718      	adds	r7, #24
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800790a:	b480      	push	{r7}
 800790c:	b083      	sub	sp, #12
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	460b      	mov	r3, r1
 8007914:	70fb      	strb	r3, [r7, #3]
 8007916:	4613      	mov	r3, r2
 8007918:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800791a:	bf00      	nop
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800792e:	bf00      	nop
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800793a:	b480      	push	{r7}
 800793c:	b083      	sub	sp, #12
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007956:	bf00      	nop
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b086      	sub	sp, #24
 8007966:	af00      	add	r7, sp, #0
 8007968:	60f8      	str	r0, [r7, #12]
 800796a:	60b9      	str	r1, [r7, #8]
 800796c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007972:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800797e:	2b01      	cmp	r3, #1
 8007980:	d101      	bne.n	8007986 <I2C_Slave_ISR_IT+0x24>
 8007982:	2302      	movs	r3, #2
 8007984:	e0e2      	b.n	8007b4c <I2C_Slave_ISR_IT+0x1ea>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f003 0320 	and.w	r3, r3, #32
 8007994:	2b00      	cmp	r3, #0
 8007996:	d009      	beq.n	80079ac <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d004      	beq.n	80079ac <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80079a2:	6939      	ldr	r1, [r7, #16]
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 f9b5 	bl	8007d14 <I2C_ITSlaveCplt>
 80079aa:	e0ca      	b.n	8007b42 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f003 0310 	and.w	r3, r3, #16
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d04b      	beq.n	8007a4e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d046      	beq.n	8007a4e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d128      	bne.n	8007a1c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b28      	cmp	r3, #40	@ 0x28
 80079d4:	d108      	bne.n	80079e8 <I2C_Slave_ISR_IT+0x86>
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079dc:	d104      	bne.n	80079e8 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80079de:	6939      	ldr	r1, [r7, #16]
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f000 fb0d 	bl	8008000 <I2C_ITListenCplt>
 80079e6:	e031      	b.n	8007a4c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b29      	cmp	r3, #41	@ 0x29
 80079f2:	d10e      	bne.n	8007a12 <I2C_Slave_ISR_IT+0xb0>
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80079fa:	d00a      	beq.n	8007a12 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2210      	movs	r2, #16
 8007a02:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 fc66 	bl	80082d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f000 f926 	bl	8007c5c <I2C_ITSlaveSeqCplt>
 8007a10:	e01c      	b.n	8007a4c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2210      	movs	r2, #16
 8007a18:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007a1a:	e08f      	b.n	8007b3c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2210      	movs	r2, #16
 8007a22:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a28:	f043 0204 	orr.w	r2, r3, #4
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <I2C_Slave_ISR_IT+0xdc>
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a3c:	d17e      	bne.n	8007b3c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a42:	4619      	mov	r1, r3
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 fb2f 	bl	80080a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007a4a:	e077      	b.n	8007b3c <I2C_Slave_ISR_IT+0x1da>
 8007a4c:	e076      	b.n	8007b3c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	f003 0304 	and.w	r3, r3, #4
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d02f      	beq.n	8007ab8 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d02a      	beq.n	8007ab8 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d018      	beq.n	8007a9e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a76:	b2d2      	uxtb	r2, r2
 8007a78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a7e:	1c5a      	adds	r2, r3, #1
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	3b01      	subs	r3, #1
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d14b      	bne.n	8007b40 <I2C_Slave_ISR_IT+0x1de>
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007aae:	d047      	beq.n	8007b40 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 f8d3 	bl	8007c5c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007ab6:	e043      	b.n	8007b40 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	f003 0308 	and.w	r3, r3, #8
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d009      	beq.n	8007ad6 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d004      	beq.n	8007ad6 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007acc:	6939      	ldr	r1, [r7, #16]
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f000 f840 	bl	8007b54 <I2C_ITAddrCplt>
 8007ad4:	e035      	b.n	8007b42 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d030      	beq.n	8007b42 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d02b      	beq.n	8007b42 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d018      	beq.n	8007b26 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af8:	781a      	ldrb	r2, [r3, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b04:	1c5a      	adds	r2, r3, #1
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	3b01      	subs	r3, #1
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007b24:	e00d      	b.n	8007b42 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b2c:	d002      	beq.n	8007b34 <I2C_Slave_ISR_IT+0x1d2>
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d106      	bne.n	8007b42 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 f891 	bl	8007c5c <I2C_ITSlaveSeqCplt>
 8007b3a:	e002      	b.n	8007b42 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8007b3c:	bf00      	nop
 8007b3e:	e000      	b.n	8007b42 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8007b40:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007b6a:	2b28      	cmp	r3, #40	@ 0x28
 8007b6c:	d16a      	bne.n	8007c44 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	0c1b      	lsrs	r3, r3, #16
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	f003 0301 	and.w	r3, r3, #1
 8007b7c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	0c1b      	lsrs	r3, r3, #16
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007b8c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b9a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007ba8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d138      	bne.n	8007c24 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007bb2:	897b      	ldrh	r3, [r7, #10]
 8007bb4:	09db      	lsrs	r3, r3, #7
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	89bb      	ldrh	r3, [r7, #12]
 8007bba:	4053      	eors	r3, r2
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	f003 0306 	and.w	r3, r3, #6
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d11c      	bne.n	8007c00 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007bc6:	897b      	ldrh	r3, [r7, #10]
 8007bc8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bce:	1c5a      	adds	r2, r3, #1
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d13b      	bne.n	8007c54 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2208      	movs	r2, #8
 8007be8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007bf2:	89ba      	ldrh	r2, [r7, #12]
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff fe86 	bl	800790a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007bfe:	e029      	b.n	8007c54 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007c00:	893b      	ldrh	r3, [r7, #8]
 8007c02:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007c04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fd9b 	bl	8008744 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007c16:	89ba      	ldrh	r2, [r7, #12]
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff fe74 	bl	800790a <HAL_I2C_AddrCallback>
}
 8007c22:	e017      	b.n	8007c54 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007c24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fd8b 	bl	8008744 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007c36:	89ba      	ldrh	r2, [r7, #12]
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f7ff fe64 	bl	800790a <HAL_I2C_AddrCallback>
}
 8007c42:	e007      	b.n	8007c54 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2208      	movs	r2, #8
 8007c4a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007c54:	bf00      	nop
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d008      	beq.n	8007c90 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	e00c      	b.n	8007caa <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d007      	beq.n	8007caa <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007ca8:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b29      	cmp	r3, #41	@ 0x29
 8007cb4:	d112      	bne.n	8007cdc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2228      	movs	r2, #40	@ 0x28
 8007cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2221      	movs	r2, #33	@ 0x21
 8007cc2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007cc4:	2101      	movs	r1, #1
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fd3c 	bl	8008744 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7ff fe04 	bl	80078e2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007cda:	e017      	b.n	8007d0c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ce6:	d111      	bne.n	8007d0c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2228      	movs	r2, #40	@ 0x28
 8007cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2222      	movs	r2, #34	@ 0x22
 8007cf4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007cf6:	2102      	movs	r1, #2
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fd23 	bl	8008744 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7ff fdf5 	bl	80078f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8007d0c:	bf00      	nop
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007d14:	b590      	push	{r4, r7, lr}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d2e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d36:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007d40:	7afb      	ldrb	r3, [r7, #11]
 8007d42:	2b21      	cmp	r3, #33	@ 0x21
 8007d44:	d002      	beq.n	8007d4c <I2C_ITSlaveCplt+0x38>
 8007d46:	7afb      	ldrb	r3, [r7, #11]
 8007d48:	2b29      	cmp	r3, #41	@ 0x29
 8007d4a:	d108      	bne.n	8007d5e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007d4c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fcf7 	bl	8008744 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2221      	movs	r2, #33	@ 0x21
 8007d5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d5c:	e019      	b.n	8007d92 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007d5e:	7afb      	ldrb	r3, [r7, #11]
 8007d60:	2b22      	cmp	r3, #34	@ 0x22
 8007d62:	d002      	beq.n	8007d6a <I2C_ITSlaveCplt+0x56>
 8007d64:	7afb      	ldrb	r3, [r7, #11]
 8007d66:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d68:	d108      	bne.n	8007d7c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007d6a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fce8 	bl	8008744 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2222      	movs	r2, #34	@ 0x22
 8007d78:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d7a:	e00a      	b.n	8007d92 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007d7c:	7afb      	ldrb	r3, [r7, #11]
 8007d7e:	2b28      	cmp	r3, #40	@ 0x28
 8007d80:	d107      	bne.n	8007d92 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007d82:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fcdc 	bl	8008744 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007da0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6859      	ldr	r1, [r3, #4]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	4b92      	ldr	r3, [pc, #584]	@ (8007ff8 <I2C_ITSlaveCplt+0x2e4>)
 8007dae:	400b      	ands	r3, r1
 8007db0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fa8f 	bl	80082d6 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d01c      	beq.n	8007dfc <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007dd0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d031      	beq.n	8007e3e <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007de2:	b29c      	uxth	r4, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fe fc49 	bl	8006680 <HAL_DMAEx_GetFifoLevel>
 8007dee:	4603      	mov	r3, r0
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	4423      	add	r3, r4
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007dfa:	e020      	b.n	8007e3e <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d01b      	beq.n	8007e3e <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007e14:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00f      	beq.n	8007e3e <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e26:	b29c      	uxth	r4, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7fe fc27 	bl	8006680 <HAL_DMAEx_GetFifoLevel>
 8007e32:	4603      	mov	r3, r0
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	4423      	add	r3, r4
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f003 0304 	and.w	r3, r3, #4
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d020      	beq.n	8007e8a <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f023 0304 	bic.w	r3, r3, #4
 8007e4e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e5a:	b2d2      	uxtb	r2, r2
 8007e5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e62:	1c5a      	adds	r2, r3, #1
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00c      	beq.n	8007e8a <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e74:	3b01      	subs	r3, #1
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	3b01      	subs	r3, #1
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d005      	beq.n	8007ea0 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e98:	f043 0204 	orr.w	r2, r3, #4
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	f003 0310 	and.w	r3, r3, #16
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d049      	beq.n	8007f3e <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d044      	beq.n	8007f3e <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d128      	bne.n	8007f10 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b28      	cmp	r3, #40	@ 0x28
 8007ec8:	d108      	bne.n	8007edc <I2C_ITSlaveCplt+0x1c8>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ed0:	d104      	bne.n	8007edc <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007ed2:	6979      	ldr	r1, [r7, #20]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f893 	bl	8008000 <I2C_ITListenCplt>
 8007eda:	e030      	b.n	8007f3e <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b29      	cmp	r3, #41	@ 0x29
 8007ee6:	d10e      	bne.n	8007f06 <I2C_ITSlaveCplt+0x1f2>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007eee:	d00a      	beq.n	8007f06 <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2210      	movs	r2, #16
 8007ef6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f9ec 	bl	80082d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7ff feac 	bl	8007c5c <I2C_ITSlaveSeqCplt>
 8007f04:	e01b      	b.n	8007f3e <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2210      	movs	r2, #16
 8007f0c:	61da      	str	r2, [r3, #28]
 8007f0e:	e016      	b.n	8007f3e <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2210      	movs	r2, #16
 8007f16:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f1c:	f043 0204 	orr.w	r2, r3, #4
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d003      	beq.n	8007f32 <I2C_ITSlaveCplt+0x21e>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f30:	d105      	bne.n	8007f3e <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f36:	4619      	mov	r1, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f8b5 	bl	80080a8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d010      	beq.n	8007f76 <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f8a4 	bl	80080a8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b28      	cmp	r3, #40	@ 0x28
 8007f6a:	d141      	bne.n	8007ff0 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007f6c:	6979      	ldr	r1, [r7, #20]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f846 	bl	8008000 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007f74:	e03c      	b.n	8007ff0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f7a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f7e:	d014      	beq.n	8007faa <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff fe6b 	bl	8007c5c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a1c      	ldr	r2, [pc, #112]	@ (8007ffc <I2C_ITSlaveCplt+0x2e8>)
 8007f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2220      	movs	r2, #32
 8007f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7ff fcbf 	bl	8007926 <HAL_I2C_ListenCpltCallback>
}
 8007fa8:	e022      	b.n	8007ff0 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b22      	cmp	r3, #34	@ 0x22
 8007fb4:	d10e      	bne.n	8007fd4 <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7ff fc92 	bl	80078f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8007fd2:	e00d      	b.n	8007ff0 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f7ff fc79 	bl	80078e2 <HAL_I2C_SlaveTxCpltCallback>
}
 8007ff0:	bf00      	nop
 8007ff2:	371c      	adds	r7, #28
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd90      	pop	{r4, r7, pc}
 8007ff8:	fe00e800 	.word	0xfe00e800
 8007ffc:	ffff0000 	.word	0xffff0000

08008000 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a25      	ldr	r2, [pc, #148]	@ (80080a4 <I2C_ITListenCplt+0xa4>)
 800800e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2220      	movs	r2, #32
 800801a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	f003 0304 	and.w	r3, r3, #4
 8008032:	2b00      	cmp	r3, #0
 8008034:	d022      	beq.n	800807c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008040:	b2d2      	uxtb	r2, r2
 8008042:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008052:	2b00      	cmp	r3, #0
 8008054:	d012      	beq.n	800807c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800805a:	3b01      	subs	r3, #1
 800805c:	b29a      	uxth	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008066:	b29b      	uxth	r3, r3
 8008068:	3b01      	subs	r3, #1
 800806a:	b29a      	uxth	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008074:	f043 0204 	orr.w	r2, r3, #4
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800807c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fb5f 	bl	8008744 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2210      	movs	r2, #16
 800808c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7ff fc45 	bl	8007926 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800809c:	bf00      	nop
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	ffff0000 	.word	0xffff0000

080080a8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080b8:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a6d      	ldr	r2, [pc, #436]	@ (800827c <I2C_ITError+0x1d4>)
 80080c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	431a      	orrs	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80080da:	7bfb      	ldrb	r3, [r7, #15]
 80080dc:	2b28      	cmp	r3, #40	@ 0x28
 80080de:	d005      	beq.n	80080ec <I2C_ITError+0x44>
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
 80080e2:	2b29      	cmp	r3, #41	@ 0x29
 80080e4:	d002      	beq.n	80080ec <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
 80080e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80080ea:	d10b      	bne.n	8008104 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80080ec:	2103      	movs	r1, #3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fb28 	bl	8008744 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2228      	movs	r2, #40	@ 0x28
 80080f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a60      	ldr	r2, [pc, #384]	@ (8008280 <I2C_ITError+0x1d8>)
 8008100:	635a      	str	r2, [r3, #52]	@ 0x34
 8008102:	e030      	b.n	8008166 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008104:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fb1b 	bl	8008744 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f8e1 	bl	80082d6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b60      	cmp	r3, #96	@ 0x60
 800811e:	d01f      	beq.n	8008160 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2220      	movs	r2, #32
 8008124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	f003 0320 	and.w	r3, r3, #32
 8008132:	2b20      	cmp	r3, #32
 8008134:	d114      	bne.n	8008160 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	f003 0310 	and.w	r3, r3, #16
 8008140:	2b10      	cmp	r3, #16
 8008142:	d109      	bne.n	8008158 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2210      	movs	r2, #16
 800814a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008150:	f043 0204 	orr.w	r2, r3, #4
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2220      	movs	r2, #32
 800815e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008170:	2b00      	cmp	r3, #0
 8008172:	d039      	beq.n	80081e8 <I2C_ITError+0x140>
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	2b11      	cmp	r3, #17
 8008178:	d002      	beq.n	8008180 <I2C_ITError+0xd8>
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	2b21      	cmp	r3, #33	@ 0x21
 800817e:	d133      	bne.n	80081e8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800818a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800818e:	d107      	bne.n	80081a0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800819e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fd fabf 	bl	8005728 <HAL_DMA_GetState>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d017      	beq.n	80081e0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b4:	4a33      	ldr	r2, [pc, #204]	@ (8008284 <I2C_ITError+0x1dc>)
 80081b6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fd f925 	bl	8005414 <HAL_DMA_Abort_IT>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d04d      	beq.n	800826c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80081da:	4610      	mov	r0, r2
 80081dc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80081de:	e045      	b.n	800826c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 f851 	bl	8008288 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80081e6:	e041      	b.n	800826c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d039      	beq.n	8008264 <I2C_ITError+0x1bc>
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2b12      	cmp	r3, #18
 80081f4:	d002      	beq.n	80081fc <I2C_ITError+0x154>
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2b22      	cmp	r3, #34	@ 0x22
 80081fa:	d133      	bne.n	8008264 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008206:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800820a:	d107      	bne.n	800821c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800821a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008220:	4618      	mov	r0, r3
 8008222:	f7fd fa81 	bl	8005728 <HAL_DMA_GetState>
 8008226:	4603      	mov	r3, r0
 8008228:	2b01      	cmp	r3, #1
 800822a:	d017      	beq.n	800825c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008230:	4a14      	ldr	r2, [pc, #80]	@ (8008284 <I2C_ITError+0x1dc>)
 8008232:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008240:	4618      	mov	r0, r3
 8008242:	f7fd f8e7 	bl	8005414 <HAL_DMA_Abort_IT>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d011      	beq.n	8008270 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008256:	4610      	mov	r0, r2
 8008258:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800825a:	e009      	b.n	8008270 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f813 	bl	8008288 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008262:	e005      	b.n	8008270 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f80f 	bl	8008288 <I2C_TreatErrorCallback>
  }
}
 800826a:	e002      	b.n	8008272 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800826c:	bf00      	nop
 800826e:	e000      	b.n	8008272 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008270:	bf00      	nop
}
 8008272:	bf00      	nop
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	ffff0000 	.word	0xffff0000
 8008280:	08007963 	.word	0x08007963
 8008284:	0800831f 	.word	0x0800831f

08008288 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b60      	cmp	r3, #96	@ 0x60
 800829a:	d10e      	bne.n	80082ba <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2220      	movs	r2, #32
 80082a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7ff fb4b 	bl	800794e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80082b8:	e009      	b.n	80082ce <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7ff fb36 	bl	800793a <HAL_I2C_ErrorCallback>
}
 80082ce:	bf00      	nop
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b083      	sub	sp, #12
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	f003 0302 	and.w	r3, r3, #2
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d103      	bne.n	80082f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2200      	movs	r2, #0
 80082f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d007      	beq.n	8008312 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	699a      	ldr	r2, [r3, #24]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f042 0201 	orr.w	r2, r2, #1
 8008310:	619a      	str	r2, [r3, #24]
  }
}
 8008312:	bf00      	nop
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b084      	sub	sp, #16
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800832a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008330:	2b00      	cmp	r3, #0
 8008332:	d003      	beq.n	800833c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008338:	2200      	movs	r2, #0
 800833a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008348:	2200      	movs	r2, #0
 800834a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f7ff ff9b 	bl	8008288 <I2C_TreatErrorCallback>
}
 8008352:	bf00      	nop
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	603b      	str	r3, [r7, #0]
 8008366:	4613      	mov	r3, r2
 8008368:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800836a:	e03b      	b.n	80083e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800836c:	69ba      	ldr	r2, [r7, #24]
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f000 f8d5 	bl	8008520 <I2C_IsErrorOccurred>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e041      	b.n	8008404 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008386:	d02d      	beq.n	80083e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008388:	f7fa fa84 	bl	8002894 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	429a      	cmp	r2, r3
 8008396:	d302      	bcc.n	800839e <I2C_WaitOnFlagUntilTimeout+0x44>
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d122      	bne.n	80083e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	699a      	ldr	r2, [r3, #24]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	4013      	ands	r3, r2
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	bf0c      	ite	eq
 80083ae:	2301      	moveq	r3, #1
 80083b0:	2300      	movne	r3, #0
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	461a      	mov	r2, r3
 80083b6:	79fb      	ldrb	r3, [r7, #7]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d113      	bne.n	80083e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c0:	f043 0220 	orr.w	r2, r3, #32
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2220      	movs	r2, #32
 80083cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e00f      	b.n	8008404 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	699a      	ldr	r2, [r3, #24]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	4013      	ands	r3, r2
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	bf0c      	ite	eq
 80083f4:	2301      	moveq	r3, #1
 80083f6:	2300      	movne	r3, #0
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	461a      	mov	r2, r3
 80083fc:	79fb      	ldrb	r3, [r7, #7]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d0b4      	beq.n	800836c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008418:	e033      	b.n	8008482 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	68b9      	ldr	r1, [r7, #8]
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f000 f87e 	bl	8008520 <I2C_IsErrorOccurred>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e031      	b.n	8008492 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008434:	d025      	beq.n	8008482 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008436:	f7fa fa2d 	bl	8002894 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	429a      	cmp	r2, r3
 8008444:	d302      	bcc.n	800844c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d11a      	bne.n	8008482 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	f003 0302 	and.w	r3, r3, #2
 8008456:	2b02      	cmp	r3, #2
 8008458:	d013      	beq.n	8008482 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800845e:	f043 0220 	orr.w	r2, r3, #32
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2220      	movs	r2, #32
 800846a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e007      	b.n	8008492 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	f003 0302 	and.w	r3, r3, #2
 800848c:	2b02      	cmp	r3, #2
 800848e:	d1c4      	bne.n	800841a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	60f8      	str	r0, [r7, #12]
 80084a2:	60b9      	str	r1, [r7, #8]
 80084a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80084a6:	e02f      	b.n	8008508 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	68b9      	ldr	r1, [r7, #8]
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f000 f837 	bl	8008520 <I2C_IsErrorOccurred>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e02d      	b.n	8008518 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084bc:	f7fa f9ea 	bl	8002894 <HAL_GetTick>
 80084c0:	4602      	mov	r2, r0
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d302      	bcc.n	80084d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d11a      	bne.n	8008508 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	f003 0320 	and.w	r3, r3, #32
 80084dc:	2b20      	cmp	r3, #32
 80084de:	d013      	beq.n	8008508 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084e4:	f043 0220 	orr.w	r2, r3, #32
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2220      	movs	r2, #32
 80084f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e007      	b.n	8008518 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	f003 0320 	and.w	r3, r3, #32
 8008512:	2b20      	cmp	r3, #32
 8008514:	d1c8      	bne.n	80084a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b08a      	sub	sp, #40	@ 0x28
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	f003 0310 	and.w	r3, r3, #16
 8008548:	2b00      	cmp	r3, #0
 800854a:	d068      	beq.n	800861e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2210      	movs	r2, #16
 8008552:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008554:	e049      	b.n	80085ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855c:	d045      	beq.n	80085ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800855e:	f7fa f999 	bl	8002894 <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	429a      	cmp	r2, r3
 800856c:	d302      	bcc.n	8008574 <I2C_IsErrorOccurred+0x54>
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d13a      	bne.n	80085ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800857e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008586:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008592:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008596:	d121      	bne.n	80085dc <I2C_IsErrorOccurred+0xbc>
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800859e:	d01d      	beq.n	80085dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80085a0:	7cfb      	ldrb	r3, [r7, #19]
 80085a2:	2b20      	cmp	r3, #32
 80085a4:	d01a      	beq.n	80085dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80085b6:	f7fa f96d 	bl	8002894 <HAL_GetTick>
 80085ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085bc:	e00e      	b.n	80085dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80085be:	f7fa f969 	bl	8002894 <HAL_GetTick>
 80085c2:	4602      	mov	r2, r0
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	2b19      	cmp	r3, #25
 80085ca:	d907      	bls.n	80085dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	f043 0320 	orr.w	r3, r3, #32
 80085d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80085da:	e006      	b.n	80085ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	f003 0320 	and.w	r3, r3, #32
 80085e6:	2b20      	cmp	r3, #32
 80085e8:	d1e9      	bne.n	80085be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	f003 0320 	and.w	r3, r3, #32
 80085f4:	2b20      	cmp	r3, #32
 80085f6:	d003      	beq.n	8008600 <I2C_IsErrorOccurred+0xe0>
 80085f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d0aa      	beq.n	8008556 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008600:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008604:	2b00      	cmp	r3, #0
 8008606:	d103      	bne.n	8008610 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2220      	movs	r2, #32
 800860e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	f043 0304 	orr.w	r3, r3, #4
 8008616:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00b      	beq.n	8008648 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008630:	6a3b      	ldr	r3, [r7, #32]
 8008632:	f043 0301 	orr.w	r3, r3, #1
 8008636:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008640:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00b      	beq.n	800866a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	f043 0308 	orr.w	r3, r3, #8
 8008658:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008662:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00b      	beq.n	800868c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	f043 0302 	orr.w	r3, r3, #2
 800867a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008684:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800868c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008690:	2b00      	cmp	r3, #0
 8008692:	d01c      	beq.n	80086ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f7ff fe1e 	bl	80082d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	6859      	ldr	r1, [r3, #4]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	4b0d      	ldr	r3, [pc, #52]	@ (80086dc <I2C_IsErrorOccurred+0x1bc>)
 80086a6:	400b      	ands	r3, r1
 80086a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086ae:	6a3b      	ldr	r3, [r7, #32]
 80086b0:	431a      	orrs	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2220      	movs	r2, #32
 80086ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80086ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3728      	adds	r7, #40	@ 0x28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	fe00e800 	.word	0xfe00e800

080086e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	607b      	str	r3, [r7, #4]
 80086ea:	460b      	mov	r3, r1
 80086ec:	817b      	strh	r3, [r7, #10]
 80086ee:	4613      	mov	r3, r2
 80086f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80086f2:	897b      	ldrh	r3, [r7, #10]
 80086f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80086f8:	7a7b      	ldrb	r3, [r7, #9]
 80086fa:	041b      	lsls	r3, r3, #16
 80086fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008700:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	4313      	orrs	r3, r2
 800870a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800870e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	0d5b      	lsrs	r3, r3, #21
 800871a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800871e:	4b08      	ldr	r3, [pc, #32]	@ (8008740 <I2C_TransferConfig+0x60>)
 8008720:	430b      	orrs	r3, r1
 8008722:	43db      	mvns	r3, r3
 8008724:	ea02 0103 	and.w	r1, r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	430a      	orrs	r2, r1
 8008730:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008732:	bf00      	nop
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	03ff63ff 	.word	0x03ff63ff

08008744 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	460b      	mov	r3, r1
 800874e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008750:	2300      	movs	r3, #0
 8008752:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008754:	887b      	ldrh	r3, [r7, #2]
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00f      	beq.n	800877e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008764:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800876c:	b2db      	uxtb	r3, r3
 800876e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008772:	2b28      	cmp	r3, #40	@ 0x28
 8008774:	d003      	beq.n	800877e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800877c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800877e:	887b      	ldrh	r3, [r7, #2]
 8008780:	f003 0302 	and.w	r3, r3, #2
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00f      	beq.n	80087a8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800878e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008796:	b2db      	uxtb	r3, r3
 8008798:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800879c:	2b28      	cmp	r3, #40	@ 0x28
 800879e:	d003      	beq.n	80087a8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80087a6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80087a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	da03      	bge.n	80087b8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80087b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80087b8:	887b      	ldrh	r3, [r7, #2]
 80087ba:	2b10      	cmp	r3, #16
 80087bc:	d103      	bne.n	80087c6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80087c4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80087c6:	887b      	ldrh	r3, [r7, #2]
 80087c8:	2b20      	cmp	r3, #32
 80087ca:	d103      	bne.n	80087d4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f043 0320 	orr.w	r3, r3, #32
 80087d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80087d4:	887b      	ldrh	r3, [r7, #2]
 80087d6:	2b40      	cmp	r3, #64	@ 0x40
 80087d8:	d103      	bne.n	80087e2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087e0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6819      	ldr	r1, [r3, #0]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	43da      	mvns	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	400a      	ands	r2, r1
 80087f2:	601a      	str	r2, [r3, #0]
}
 80087f4:	bf00      	nop
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b20      	cmp	r3, #32
 8008814:	d138      	bne.n	8008888 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800881c:	2b01      	cmp	r3, #1
 800881e:	d101      	bne.n	8008824 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008820:	2302      	movs	r3, #2
 8008822:	e032      	b.n	800888a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2224      	movs	r2, #36	@ 0x24
 8008830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f022 0201 	bic.w	r2, r2, #1
 8008842:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008852:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	6819      	ldr	r1, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	430a      	orrs	r2, r1
 8008862:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f042 0201 	orr.w	r2, r2, #1
 8008872:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2220      	movs	r2, #32
 8008878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	e000      	b.n	800888a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008888:	2302      	movs	r3, #2
  }
}
 800888a:	4618      	mov	r0, r3
 800888c:	370c      	adds	r7, #12
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008896:	b480      	push	{r7}
 8008898:	b085      	sub	sp, #20
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	2b20      	cmp	r3, #32
 80088aa:	d139      	bne.n	8008920 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d101      	bne.n	80088ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80088b6:	2302      	movs	r3, #2
 80088b8:	e033      	b.n	8008922 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2224      	movs	r2, #36	@ 0x24
 80088c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f022 0201 	bic.w	r2, r2, #1
 80088d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80088e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	021b      	lsls	r3, r3, #8
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f042 0201 	orr.w	r2, r2, #1
 800890a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2220      	movs	r2, #32
 8008910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800891c:	2300      	movs	r3, #0
 800891e:	e000      	b.n	8008922 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008920:	2302      	movs	r3, #2
  }
}
 8008922:	4618      	mov	r0, r3
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
	...

08008930 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800893c:	4b0b      	ldr	r3, [pc, #44]	@ (800896c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b00      	cmp	r3, #0
 8008946:	d002      	beq.n	800894e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	73fb      	strb	r3, [r7, #15]
 800894c:	e007      	b.n	800895e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800894e:	4b07      	ldr	r3, [pc, #28]	@ (800896c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f023 0204 	bic.w	r2, r3, #4
 8008956:	4905      	ldr	r1, [pc, #20]	@ (800896c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4313      	orrs	r3, r2
 800895c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800895e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	40030400 	.word	0x40030400

08008970 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8008970:	b480      	push	{r7}
 8008972:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8008974:	4b05      	ldr	r3, [pc, #20]	@ (800898c <HAL_ICACHE_Enable+0x1c>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a04      	ldr	r2, [pc, #16]	@ (800898c <HAL_ICACHE_Enable+0x1c>)
 800897a:	f043 0301 	orr.w	r3, r3, #1
 800897e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	40030400 	.word	0x40030400

08008990 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d101      	bne.n	80089a2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e0bf      	b.n	8008b22 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d106      	bne.n	80089bc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7f9 f9ba 	bl	8001d30 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2202      	movs	r2, #2
 80089c0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	699a      	ldr	r2, [r3, #24]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80089d2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	6999      	ldr	r1, [r3, #24]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80089e8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6899      	ldr	r1, [r3, #8]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	4b4a      	ldr	r3, [pc, #296]	@ (8008b2c <HAL_LTDC_Init+0x19c>)
 8008a04:	400b      	ands	r3, r1
 8008a06:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	695b      	ldr	r3, [r3, #20]
 8008a0c:	041b      	lsls	r3, r3, #16
 8008a0e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6899      	ldr	r1, [r3, #8]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	699a      	ldr	r2, [r3, #24]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	431a      	orrs	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68d9      	ldr	r1, [r3, #12]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	4b3e      	ldr	r3, [pc, #248]	@ (8008b2c <HAL_LTDC_Init+0x19c>)
 8008a32:	400b      	ands	r3, r1
 8008a34:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	041b      	lsls	r3, r3, #16
 8008a3c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68d9      	ldr	r1, [r3, #12]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a1a      	ldr	r2, [r3, #32]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	431a      	orrs	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	430a      	orrs	r2, r1
 8008a52:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6919      	ldr	r1, [r3, #16]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	4b33      	ldr	r3, [pc, #204]	@ (8008b2c <HAL_LTDC_Init+0x19c>)
 8008a60:	400b      	ands	r3, r1
 8008a62:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a68:	041b      	lsls	r3, r3, #16
 8008a6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6919      	ldr	r1, [r3, #16]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	431a      	orrs	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6959      	ldr	r1, [r3, #20]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	4b27      	ldr	r3, [pc, #156]	@ (8008b2c <HAL_LTDC_Init+0x19c>)
 8008a8e:	400b      	ands	r3, r1
 8008a90:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a96:	041b      	lsls	r3, r3, #16
 8008a98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	6959      	ldr	r1, [r3, #20]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	430a      	orrs	r2, r1
 8008aae:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008ab6:	021b      	lsls	r3, r3, #8
 8008ab8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008ac0:	041b      	lsls	r3, r3, #16
 8008ac2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8008ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	430a      	orrs	r2, r1
 8008aee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f042 0206 	orr.w	r2, r2, #6
 8008afe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	699a      	ldr	r2, [r3, #24]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f042 0201 	orr.w	r2, r2, #1
 8008b0e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	f000f800 	.word	0xf000f800

08008b30 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b3e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b46:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f003 0304 	and.w	r3, r3, #4
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d023      	beq.n	8008b9a <HAL_LTDC_IRQHandler+0x6a>
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f003 0304 	and.w	r3, r3, #4
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d01e      	beq.n	8008b9a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f022 0204 	bic.w	r2, r2, #4
 8008b6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2204      	movs	r2, #4
 8008b72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008b7a:	f043 0201 	orr.w	r2, r3, #1
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2204      	movs	r2, #4
 8008b88:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f86f 	bl	8008c78 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f003 0302 	and.w	r3, r3, #2
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d023      	beq.n	8008bec <HAL_LTDC_IRQHandler+0xbc>
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	f003 0302 	and.w	r3, r3, #2
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d01e      	beq.n	8008bec <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f022 0202 	bic.w	r2, r2, #2
 8008bbc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008bcc:	f043 0202 	orr.w	r2, r3, #2
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2204      	movs	r2, #4
 8008bda:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f846 	bl	8008c78 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d01b      	beq.n	8008c2e <HAL_LTDC_IRQHandler+0xfe>
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	f003 0301 	and.w	r3, r3, #1
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d016      	beq.n	8008c2e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f022 0201 	bic.w	r2, r2, #1
 8008c0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2201      	movs	r2, #1
 8008c16:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f82f 	bl	8008c8c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f003 0308 	and.w	r3, r3, #8
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d01b      	beq.n	8008c70 <HAL_LTDC_IRQHandler+0x140>
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	f003 0308 	and.w	r3, r3, #8
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d016      	beq.n	8008c70 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f022 0208 	bic.w	r2, r2, #8
 8008c50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2208      	movs	r2, #8
 8008c58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f818 	bl	8008ca0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008c70:	bf00      	nop
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008c94:	bf00      	nop
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008cb4:	b5b0      	push	{r4, r5, r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d101      	bne.n	8008cce <HAL_LTDC_ConfigLayer+0x1a>
 8008cca:	2302      	movs	r3, #2
 8008ccc:	e02c      	b.n	8008d28 <HAL_LTDC_ConfigLayer+0x74>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2202      	movs	r2, #2
 8008cda:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2134      	movs	r1, #52	@ 0x34
 8008ce4:	fb01 f303 	mul.w	r3, r1, r3
 8008ce8:	4413      	add	r3, r2
 8008cea:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	4614      	mov	r4, r2
 8008cf2:	461d      	mov	r5, r3
 8008cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	68b9      	ldr	r1, [r7, #8]
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 f811 	bl	8008d30 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2201      	movs	r2, #1
 8008d14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bdb0      	pop	{r4, r5, r7, pc}

08008d30 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b089      	sub	sp, #36	@ 0x24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	685a      	ldr	r2, [r3, #4]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	0c1b      	lsrs	r3, r3, #16
 8008d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d4c:	4413      	add	r3, r2
 8008d4e:	041b      	lsls	r3, r3, #16
 8008d50:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	461a      	mov	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	01db      	lsls	r3, r3, #7
 8008d5c:	4413      	add	r3, r2
 8008d5e:	3384      	adds	r3, #132	@ 0x84
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	6812      	ldr	r2, [r2, #0]
 8008d66:	4611      	mov	r1, r2
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	01d2      	lsls	r2, r2, #7
 8008d6c:	440a      	add	r2, r1
 8008d6e:	3284      	adds	r2, #132	@ 0x84
 8008d70:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8008d74:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	0c1b      	lsrs	r3, r3, #16
 8008d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008d86:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008d88:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4619      	mov	r1, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	01db      	lsls	r3, r3, #7
 8008d94:	440b      	add	r3, r1
 8008d96:	3384      	adds	r3, #132	@ 0x84
 8008d98:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008d9e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	68da      	ldr	r2, [r3, #12]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008dae:	4413      	add	r3, r2
 8008db0:	041b      	lsls	r3, r3, #16
 8008db2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	461a      	mov	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	01db      	lsls	r3, r3, #7
 8008dbe:	4413      	add	r3, r2
 8008dc0:	3384      	adds	r3, #132	@ 0x84
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	6812      	ldr	r2, [r2, #0]
 8008dc8:	4611      	mov	r1, r2
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	01d2      	lsls	r2, r2, #7
 8008dce:	440a      	add	r2, r1
 8008dd0:	3284      	adds	r2, #132	@ 0x84
 8008dd2:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8008dd6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	689a      	ldr	r2, [r3, #8]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008de6:	4413      	add	r3, r2
 8008de8:	1c5a      	adds	r2, r3, #1
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4619      	mov	r1, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	01db      	lsls	r3, r3, #7
 8008df4:	440b      	add	r3, r1
 8008df6:	3384      	adds	r3, #132	@ 0x84
 8008df8:	4619      	mov	r1, r3
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	461a      	mov	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	01db      	lsls	r3, r3, #7
 8008e0a:	4413      	add	r3, r2
 8008e0c:	3384      	adds	r3, #132	@ 0x84
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	6812      	ldr	r2, [r2, #0]
 8008e14:	4611      	mov	r1, r2
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	01d2      	lsls	r2, r2, #7
 8008e1a:	440a      	add	r2, r1
 8008e1c:	3284      	adds	r2, #132	@ 0x84
 8008e1e:	f023 0307 	bic.w	r3, r3, #7
 8008e22:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	01db      	lsls	r3, r3, #7
 8008e2e:	4413      	add	r3, r2
 8008e30:	3384      	adds	r3, #132	@ 0x84
 8008e32:	461a      	mov	r2, r3
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008e40:	021b      	lsls	r3, r3, #8
 8008e42:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008e4a:	041b      	lsls	r3, r3, #16
 8008e4c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	061b      	lsls	r3, r3, #24
 8008e54:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	431a      	orrs	r2, r3
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	431a      	orrs	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	01db      	lsls	r3, r3, #7
 8008e70:	440b      	add	r3, r1
 8008e72:	3384      	adds	r3, #132	@ 0x84
 8008e74:	4619      	mov	r1, r3
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	461a      	mov	r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	01db      	lsls	r3, r3, #7
 8008e86:	4413      	add	r3, r2
 8008e88:	3384      	adds	r3, #132	@ 0x84
 8008e8a:	695b      	ldr	r3, [r3, #20]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	6812      	ldr	r2, [r2, #0]
 8008e90:	4611      	mov	r1, r2
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	01d2      	lsls	r2, r2, #7
 8008e96:	440a      	add	r2, r1
 8008e98:	3284      	adds	r2, #132	@ 0x84
 8008e9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008e9e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	01db      	lsls	r3, r3, #7
 8008eaa:	4413      	add	r3, r2
 8008eac:	3384      	adds	r3, #132	@ 0x84
 8008eae:	461a      	mov	r2, r3
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	695b      	ldr	r3, [r3, #20]
 8008eb4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	01db      	lsls	r3, r3, #7
 8008ec0:	4413      	add	r3, r2
 8008ec2:	3384      	adds	r3, #132	@ 0x84
 8008ec4:	69db      	ldr	r3, [r3, #28]
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	6812      	ldr	r2, [r2, #0]
 8008eca:	4611      	mov	r1, r2
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	01d2      	lsls	r2, r2, #7
 8008ed0:	440a      	add	r2, r1
 8008ed2:	3284      	adds	r2, #132	@ 0x84
 8008ed4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008ed8:	f023 0307 	bic.w	r3, r3, #7
 8008edc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	69da      	ldr	r2, [r3, #28]
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	6a1b      	ldr	r3, [r3, #32]
 8008ee6:	68f9      	ldr	r1, [r7, #12]
 8008ee8:	6809      	ldr	r1, [r1, #0]
 8008eea:	4608      	mov	r0, r1
 8008eec:	6879      	ldr	r1, [r7, #4]
 8008eee:	01c9      	lsls	r1, r1, #7
 8008ef0:	4401      	add	r1, r0
 8008ef2:	3184      	adds	r1, #132	@ 0x84
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	461a      	mov	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	01db      	lsls	r3, r3, #7
 8008f02:	4413      	add	r3, r2
 8008f04:	3384      	adds	r3, #132	@ 0x84
 8008f06:	461a      	mov	r2, r3
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f0c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d102      	bne.n	8008f1c <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8008f16:	2304      	movs	r3, #4
 8008f18:	61fb      	str	r3, [r7, #28]
 8008f1a:	e01b      	b.n	8008f54 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d102      	bne.n	8008f2a <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8008f24:	2303      	movs	r3, #3
 8008f26:	61fb      	str	r3, [r7, #28]
 8008f28:	e014      	b.n	8008f54 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	2b04      	cmp	r3, #4
 8008f30:	d00b      	beq.n	8008f4a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d007      	beq.n	8008f4a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d003      	beq.n	8008f4a <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008f46:	2b07      	cmp	r3, #7
 8008f48:	d102      	bne.n	8008f50 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	61fb      	str	r3, [r7, #28]
 8008f4e:	e001      	b.n	8008f54 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8008f50:	2301      	movs	r3, #1
 8008f52:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	01db      	lsls	r3, r3, #7
 8008f5e:	4413      	add	r3, r2
 8008f60:	3384      	adds	r3, #132	@ 0x84
 8008f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	6812      	ldr	r2, [r2, #0]
 8008f68:	4611      	mov	r1, r2
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	01d2      	lsls	r2, r2, #7
 8008f6e:	440a      	add	r2, r1
 8008f70:	3284      	adds	r2, #132	@ 0x84
 8008f72:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008f76:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f7c:	69fa      	ldr	r2, [r7, #28]
 8008f7e:	fb02 f303 	mul.w	r3, r2, r3
 8008f82:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	6859      	ldr	r1, [r3, #4]
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	1acb      	subs	r3, r1, r3
 8008f8e:	69f9      	ldr	r1, [r7, #28]
 8008f90:	fb01 f303 	mul.w	r3, r1, r3
 8008f94:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008f96:	68f9      	ldr	r1, [r7, #12]
 8008f98:	6809      	ldr	r1, [r1, #0]
 8008f9a:	4608      	mov	r0, r1
 8008f9c:	6879      	ldr	r1, [r7, #4]
 8008f9e:	01c9      	lsls	r1, r1, #7
 8008fa0:	4401      	add	r1, r0
 8008fa2:	3184      	adds	r1, #132	@ 0x84
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	461a      	mov	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	01db      	lsls	r3, r3, #7
 8008fb2:	4413      	add	r3, r2
 8008fb4:	3384      	adds	r3, #132	@ 0x84
 8008fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	6812      	ldr	r2, [r2, #0]
 8008fbc:	4611      	mov	r1, r2
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	01d2      	lsls	r2, r2, #7
 8008fc2:	440a      	add	r2, r1
 8008fc4:	3284      	adds	r2, #132	@ 0x84
 8008fc6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008fca:	f023 0307 	bic.w	r3, r3, #7
 8008fce:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	01db      	lsls	r3, r3, #7
 8008fda:	4413      	add	r3, r2
 8008fdc:	3384      	adds	r3, #132	@ 0x84
 8008fde:	461a      	mov	r2, r3
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	461a      	mov	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	01db      	lsls	r3, r3, #7
 8008ff0:	4413      	add	r3, r2
 8008ff2:	3384      	adds	r3, #132	@ 0x84
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	6812      	ldr	r2, [r2, #0]
 8008ffa:	4611      	mov	r1, r2
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	01d2      	lsls	r2, r2, #7
 8009000:	440a      	add	r2, r1
 8009002:	3284      	adds	r2, #132	@ 0x84
 8009004:	f043 0301 	orr.w	r3, r3, #1
 8009008:	6013      	str	r3, [r2, #0]
}
 800900a:	bf00      	nop
 800900c:	3724      	adds	r7, #36	@ 0x24
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
	...

08009018 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009018:	b480      	push	{r7}
 800901a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800901c:	4b05      	ldr	r3, [pc, #20]	@ (8009034 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800901e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009020:	4a04      	ldr	r2, [pc, #16]	@ (8009034 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009022:	f043 0301 	orr.w	r3, r3, #1
 8009026:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8009028:	bf00      	nop
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	46020800 	.word	0x46020800

08009038 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8009040:	4b39      	ldr	r3, [pc, #228]	@ (8009128 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009044:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009048:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	429a      	cmp	r2, r3
 8009050:	d10b      	bne.n	800906a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009058:	d905      	bls.n	8009066 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800905a:	4b33      	ldr	r3, [pc, #204]	@ (8009128 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	4a32      	ldr	r2, [pc, #200]	@ (8009128 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009064:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	e057      	b.n	800911a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009070:	d90a      	bls.n	8009088 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8009072:	4b2d      	ldr	r3, [pc, #180]	@ (8009128 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4313      	orrs	r3, r2
 800907e:	4a2a      	ldr	r2, [pc, #168]	@ (8009128 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009084:	60d3      	str	r3, [r2, #12]
 8009086:	e007      	b.n	8009098 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8009088:	4b27      	ldr	r3, [pc, #156]	@ (8009128 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8009090:	4925      	ldr	r1, [pc, #148]	@ (8009128 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4313      	orrs	r3, r2
 8009096:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009098:	4b24      	ldr	r3, [pc, #144]	@ (800912c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a24      	ldr	r2, [pc, #144]	@ (8009130 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800909e:	fba2 2303 	umull	r2, r3, r2, r3
 80090a2:	099b      	lsrs	r3, r3, #6
 80090a4:	2232      	movs	r2, #50	@ 0x32
 80090a6:	fb02 f303 	mul.w	r3, r2, r3
 80090aa:	4a21      	ldr	r2, [pc, #132]	@ (8009130 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80090ac:	fba2 2303 	umull	r2, r3, r2, r3
 80090b0:	099b      	lsrs	r3, r3, #6
 80090b2:	3301      	adds	r3, #1
 80090b4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80090b6:	e002      	b.n	80090be <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3b01      	subs	r3, #1
 80090bc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80090be:	4b1a      	ldr	r3, [pc, #104]	@ (8009128 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d102      	bne.n	80090d0 <HAL_PWREx_ControlVoltageScaling+0x98>
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1f3      	bne.n	80090b8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d01b      	beq.n	800910e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80090d6:	4b15      	ldr	r3, [pc, #84]	@ (800912c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a15      	ldr	r2, [pc, #84]	@ (8009130 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80090dc:	fba2 2303 	umull	r2, r3, r2, r3
 80090e0:	099b      	lsrs	r3, r3, #6
 80090e2:	2232      	movs	r2, #50	@ 0x32
 80090e4:	fb02 f303 	mul.w	r3, r2, r3
 80090e8:	4a11      	ldr	r2, [pc, #68]	@ (8009130 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80090ea:	fba2 2303 	umull	r2, r3, r2, r3
 80090ee:	099b      	lsrs	r3, r3, #6
 80090f0:	3301      	adds	r3, #1
 80090f2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80090f4:	e002      	b.n	80090fc <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	3b01      	subs	r3, #1
 80090fa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80090fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009128 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80090fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009100:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d102      	bne.n	800910e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1f3      	bne.n	80090f6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d101      	bne.n	8009118 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e000      	b.n	800911a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	46020800 	.word	0x46020800
 800912c:	2000001c 	.word	0x2000001c
 8009130:	10624dd3 	.word	0x10624dd3

08009134 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009134:	b480      	push	{r7}
 8009136:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8009138:	4b04      	ldr	r3, [pc, #16]	@ (800914c <HAL_PWREx_GetVoltageRange+0x18>)
 800913a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800913c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8009140:	4618      	mov	r0, r3
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	46020800 	.word	0x46020800

08009150 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009158:	4b22      	ldr	r3, [pc, #136]	@ (80091e4 <HAL_PWREx_ConfigSupply+0x94>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a22      	ldr	r2, [pc, #136]	@ (80091e8 <HAL_PWREx_ConfigSupply+0x98>)
 800915e:	fba2 2303 	umull	r2, r3, r2, r3
 8009162:	099b      	lsrs	r3, r3, #6
 8009164:	2232      	movs	r2, #50	@ 0x32
 8009166:	fb02 f303 	mul.w	r3, r2, r3
 800916a:	4a1f      	ldr	r2, [pc, #124]	@ (80091e8 <HAL_PWREx_ConfigSupply+0x98>)
 800916c:	fba2 2303 	umull	r2, r3, r2, r3
 8009170:	099b      	lsrs	r3, r3, #6
 8009172:	3301      	adds	r3, #1
 8009174:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d113      	bne.n	80091a4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800917c:	4b1b      	ldr	r3, [pc, #108]	@ (80091ec <HAL_PWREx_ConfigSupply+0x9c>)
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	4a1a      	ldr	r2, [pc, #104]	@ (80091ec <HAL_PWREx_ConfigSupply+0x9c>)
 8009182:	f023 0302 	bic.w	r3, r3, #2
 8009186:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009188:	e002      	b.n	8009190 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	3b01      	subs	r3, #1
 800918e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009190:	4b16      	ldr	r3, [pc, #88]	@ (80091ec <HAL_PWREx_ConfigSupply+0x9c>)
 8009192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009194:	f003 0302 	and.w	r3, r3, #2
 8009198:	2b02      	cmp	r3, #2
 800919a:	d116      	bne.n	80091ca <HAL_PWREx_ConfigSupply+0x7a>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1f3      	bne.n	800918a <HAL_PWREx_ConfigSupply+0x3a>
 80091a2:	e012      	b.n	80091ca <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80091a4:	4b11      	ldr	r3, [pc, #68]	@ (80091ec <HAL_PWREx_ConfigSupply+0x9c>)
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	4a10      	ldr	r2, [pc, #64]	@ (80091ec <HAL_PWREx_ConfigSupply+0x9c>)
 80091aa:	f043 0302 	orr.w	r3, r3, #2
 80091ae:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80091b0:	e002      	b.n	80091b8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	3b01      	subs	r3, #1
 80091b6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80091b8:	4b0c      	ldr	r3, [pc, #48]	@ (80091ec <HAL_PWREx_ConfigSupply+0x9c>)
 80091ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091bc:	f003 0302 	and.w	r3, r3, #2
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d102      	bne.n	80091ca <HAL_PWREx_ConfigSupply+0x7a>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1f3      	bne.n	80091b2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d101      	bne.n	80091d4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	e000      	b.n	80091d6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	2000001c 	.word	0x2000001c
 80091e8:	10624dd3 	.word	0x10624dd3
 80091ec:	46020800 	.word	0x46020800

080091f0 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80091f0:	b480      	push	{r7}
 80091f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80091f4:	4b05      	ldr	r3, [pc, #20]	@ (800920c <HAL_PWREx_EnableVddIO2+0x1c>)
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	4a04      	ldr	r2, [pc, #16]	@ (800920c <HAL_PWREx_EnableVddIO2+0x1c>)
 80091fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80091fe:	6113      	str	r3, [r2, #16]
}
 8009200:	bf00      	nop
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	46020800 	.word	0x46020800

08009210 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8009210:	b480      	push	{r7}
 8009212:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8009214:	4b05      	ldr	r3, [pc, #20]	@ (800922c <HAL_PWREx_EnableVddA+0x1c>)
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	4a04      	ldr	r2, [pc, #16]	@ (800922c <HAL_PWREx_EnableVddA+0x1c>)
 800921a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800921e:	6113      	str	r3, [r2, #16]
}
 8009220:	bf00      	nop
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	46020800 	.word	0x46020800

08009230 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b08e      	sub	sp, #56	@ 0x38
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8009238:	2300      	movs	r3, #0
 800923a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d102      	bne.n	800924a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	f000 bec8 	b.w	8009fda <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800924a:	4b99      	ldr	r3, [pc, #612]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	f003 030c 	and.w	r3, r3, #12
 8009252:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009254:	4b96      	ldr	r3, [pc, #600]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 8009256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009258:	f003 0303 	and.w	r3, r3, #3
 800925c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f003 0310 	and.w	r3, r3, #16
 8009266:	2b00      	cmp	r3, #0
 8009268:	f000 816c 	beq.w	8009544 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800926c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926e:	2b00      	cmp	r3, #0
 8009270:	d007      	beq.n	8009282 <HAL_RCC_OscConfig+0x52>
 8009272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009274:	2b0c      	cmp	r3, #12
 8009276:	f040 80de 	bne.w	8009436 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800927a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800927c:	2b01      	cmp	r3, #1
 800927e:	f040 80da 	bne.w	8009436 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	69db      	ldr	r3, [r3, #28]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d102      	bne.n	8009290 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	f000 bea5 	b.w	8009fda <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009294:	4b86      	ldr	r3, [pc, #536]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800929c:	2b00      	cmp	r3, #0
 800929e:	d004      	beq.n	80092aa <HAL_RCC_OscConfig+0x7a>
 80092a0:	4b83      	ldr	r3, [pc, #524]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80092a8:	e005      	b.n	80092b6 <HAL_RCC_OscConfig+0x86>
 80092aa:	4b81      	ldr	r3, [pc, #516]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 80092ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80092b0:	041b      	lsls	r3, r3, #16
 80092b2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d255      	bcs.n	8009366 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80092ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10a      	bne.n	80092d6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c4:	4618      	mov	r0, r3
 80092c6:	f001 f9d9 	bl	800a67c <RCC_SetFlashLatencyFromMSIRange>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	f000 be82 	b.w	8009fda <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80092d6:	4b76      	ldr	r3, [pc, #472]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	4a75      	ldr	r2, [pc, #468]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 80092dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80092e0:	6093      	str	r3, [r2, #8]
 80092e2:	4b73      	ldr	r3, [pc, #460]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ee:	4970      	ldr	r1, [pc, #448]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 80092f0:	4313      	orrs	r3, r2
 80092f2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80092fc:	d309      	bcc.n	8009312 <HAL_RCC_OscConfig+0xe2>
 80092fe:	4b6c      	ldr	r3, [pc, #432]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	f023 021f 	bic.w	r2, r3, #31
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	4969      	ldr	r1, [pc, #420]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 800930c:	4313      	orrs	r3, r2
 800930e:	60cb      	str	r3, [r1, #12]
 8009310:	e07e      	b.n	8009410 <HAL_RCC_OscConfig+0x1e0>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009316:	2b00      	cmp	r3, #0
 8009318:	da0a      	bge.n	8009330 <HAL_RCC_OscConfig+0x100>
 800931a:	4b65      	ldr	r3, [pc, #404]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	015b      	lsls	r3, r3, #5
 8009328:	4961      	ldr	r1, [pc, #388]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 800932a:	4313      	orrs	r3, r2
 800932c:	60cb      	str	r3, [r1, #12]
 800932e:	e06f      	b.n	8009410 <HAL_RCC_OscConfig+0x1e0>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009338:	d30a      	bcc.n	8009350 <HAL_RCC_OscConfig+0x120>
 800933a:	4b5d      	ldr	r3, [pc, #372]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	029b      	lsls	r3, r3, #10
 8009348:	4959      	ldr	r1, [pc, #356]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 800934a:	4313      	orrs	r3, r2
 800934c:	60cb      	str	r3, [r1, #12]
 800934e:	e05f      	b.n	8009410 <HAL_RCC_OscConfig+0x1e0>
 8009350:	4b57      	ldr	r3, [pc, #348]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6a1b      	ldr	r3, [r3, #32]
 800935c:	03db      	lsls	r3, r3, #15
 800935e:	4954      	ldr	r1, [pc, #336]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 8009360:	4313      	orrs	r3, r2
 8009362:	60cb      	str	r3, [r1, #12]
 8009364:	e054      	b.n	8009410 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009366:	4b52      	ldr	r3, [pc, #328]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	4a51      	ldr	r2, [pc, #324]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 800936c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009370:	6093      	str	r3, [r2, #8]
 8009372:	4b4f      	ldr	r3, [pc, #316]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800937e:	494c      	ldr	r1, [pc, #304]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 8009380:	4313      	orrs	r3, r2
 8009382:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009388:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800938c:	d309      	bcc.n	80093a2 <HAL_RCC_OscConfig+0x172>
 800938e:	4b48      	ldr	r3, [pc, #288]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	f023 021f 	bic.w	r2, r3, #31
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	4945      	ldr	r1, [pc, #276]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 800939c:	4313      	orrs	r3, r2
 800939e:	60cb      	str	r3, [r1, #12]
 80093a0:	e028      	b.n	80093f4 <HAL_RCC_OscConfig+0x1c4>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	da0a      	bge.n	80093c0 <HAL_RCC_OscConfig+0x190>
 80093aa:	4b41      	ldr	r3, [pc, #260]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	015b      	lsls	r3, r3, #5
 80093b8:	493d      	ldr	r1, [pc, #244]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 80093ba:	4313      	orrs	r3, r2
 80093bc:	60cb      	str	r3, [r1, #12]
 80093be:	e019      	b.n	80093f4 <HAL_RCC_OscConfig+0x1c4>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093c8:	d30a      	bcc.n	80093e0 <HAL_RCC_OscConfig+0x1b0>
 80093ca:	4b39      	ldr	r3, [pc, #228]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	029b      	lsls	r3, r3, #10
 80093d8:	4935      	ldr	r1, [pc, #212]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 80093da:	4313      	orrs	r3, r2
 80093dc:	60cb      	str	r3, [r1, #12]
 80093de:	e009      	b.n	80093f4 <HAL_RCC_OscConfig+0x1c4>
 80093e0:	4b33      	ldr	r3, [pc, #204]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a1b      	ldr	r3, [r3, #32]
 80093ec:	03db      	lsls	r3, r3, #15
 80093ee:	4930      	ldr	r1, [pc, #192]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 80093f0:	4313      	orrs	r3, r2
 80093f2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80093f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10a      	bne.n	8009410 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093fe:	4618      	mov	r0, r3
 8009400:	f001 f93c 	bl	800a67c <RCC_SetFlashLatencyFromMSIRange>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d002      	beq.n	8009410 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	f000 bde5 	b.w	8009fda <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8009410:	f001 f8de 	bl	800a5d0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009414:	4b27      	ldr	r3, [pc, #156]	@ (80094b4 <HAL_RCC_OscConfig+0x284>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4618      	mov	r0, r3
 800941a:	f7f9 f9b1 	bl	8002780 <HAL_InitTick>
 800941e:	4603      	mov	r3, r0
 8009420:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8009424:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009428:	2b00      	cmp	r3, #0
 800942a:	f000 808a 	beq.w	8009542 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800942e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009432:	f000 bdd2 	b.w	8009fda <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	69db      	ldr	r3, [r3, #28]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d066      	beq.n	800950c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800943e:	4b1c      	ldr	r3, [pc, #112]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a1b      	ldr	r2, [pc, #108]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 8009444:	f043 0301 	orr.w	r3, r3, #1
 8009448:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800944a:	f7f9 fa23 	bl	8002894 <HAL_GetTick>
 800944e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009450:	e009      	b.n	8009466 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009452:	f7f9 fa1f 	bl	8002894 <HAL_GetTick>
 8009456:	4602      	mov	r2, r0
 8009458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	2b02      	cmp	r3, #2
 800945e:	d902      	bls.n	8009466 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	f000 bdba 	b.w	8009fda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009466:	4b12      	ldr	r3, [pc, #72]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0304 	and.w	r3, r3, #4
 800946e:	2b00      	cmp	r3, #0
 8009470:	d0ef      	beq.n	8009452 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009472:	4b0f      	ldr	r3, [pc, #60]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	4a0e      	ldr	r2, [pc, #56]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 8009478:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800947c:	6093      	str	r3, [r2, #8]
 800947e:	4b0c      	ldr	r3, [pc, #48]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800948a:	4909      	ldr	r1, [pc, #36]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 800948c:	4313      	orrs	r3, r2
 800948e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009494:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009498:	d30e      	bcc.n	80094b8 <HAL_RCC_OscConfig+0x288>
 800949a:	4b05      	ldr	r3, [pc, #20]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	f023 021f 	bic.w	r2, r3, #31
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a1b      	ldr	r3, [r3, #32]
 80094a6:	4902      	ldr	r1, [pc, #8]	@ (80094b0 <HAL_RCC_OscConfig+0x280>)
 80094a8:	4313      	orrs	r3, r2
 80094aa:	60cb      	str	r3, [r1, #12]
 80094ac:	e04a      	b.n	8009544 <HAL_RCC_OscConfig+0x314>
 80094ae:	bf00      	nop
 80094b0:	46020c00 	.word	0x46020c00
 80094b4:	20000020 	.word	0x20000020
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094bc:	2b00      	cmp	r3, #0
 80094be:	da0a      	bge.n	80094d6 <HAL_RCC_OscConfig+0x2a6>
 80094c0:	4b98      	ldr	r3, [pc, #608]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a1b      	ldr	r3, [r3, #32]
 80094cc:	015b      	lsls	r3, r3, #5
 80094ce:	4995      	ldr	r1, [pc, #596]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80094d0:	4313      	orrs	r3, r2
 80094d2:	60cb      	str	r3, [r1, #12]
 80094d4:	e036      	b.n	8009544 <HAL_RCC_OscConfig+0x314>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094de:	d30a      	bcc.n	80094f6 <HAL_RCC_OscConfig+0x2c6>
 80094e0:	4b90      	ldr	r3, [pc, #576]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a1b      	ldr	r3, [r3, #32]
 80094ec:	029b      	lsls	r3, r3, #10
 80094ee:	498d      	ldr	r1, [pc, #564]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80094f0:	4313      	orrs	r3, r2
 80094f2:	60cb      	str	r3, [r1, #12]
 80094f4:	e026      	b.n	8009544 <HAL_RCC_OscConfig+0x314>
 80094f6:	4b8b      	ldr	r3, [pc, #556]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a1b      	ldr	r3, [r3, #32]
 8009502:	03db      	lsls	r3, r3, #15
 8009504:	4987      	ldr	r1, [pc, #540]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 8009506:	4313      	orrs	r3, r2
 8009508:	60cb      	str	r3, [r1, #12]
 800950a:	e01b      	b.n	8009544 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800950c:	4b85      	ldr	r3, [pc, #532]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a84      	ldr	r2, [pc, #528]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 8009512:	f023 0301 	bic.w	r3, r3, #1
 8009516:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009518:	f7f9 f9bc 	bl	8002894 <HAL_GetTick>
 800951c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800951e:	e009      	b.n	8009534 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009520:	f7f9 f9b8 	bl	8002894 <HAL_GetTick>
 8009524:	4602      	mov	r2, r0
 8009526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	2b02      	cmp	r3, #2
 800952c:	d902      	bls.n	8009534 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800952e:	2303      	movs	r3, #3
 8009530:	f000 bd53 	b.w	8009fda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009534:	4b7b      	ldr	r3, [pc, #492]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 0304 	and.w	r3, r3, #4
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1ef      	bne.n	8009520 <HAL_RCC_OscConfig+0x2f0>
 8009540:	e000      	b.n	8009544 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009542:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 0301 	and.w	r3, r3, #1
 800954c:	2b00      	cmp	r3, #0
 800954e:	f000 808b 	beq.w	8009668 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009554:	2b08      	cmp	r3, #8
 8009556:	d005      	beq.n	8009564 <HAL_RCC_OscConfig+0x334>
 8009558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955a:	2b0c      	cmp	r3, #12
 800955c:	d109      	bne.n	8009572 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800955e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009560:	2b03      	cmp	r3, #3
 8009562:	d106      	bne.n	8009572 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d17d      	bne.n	8009668 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	f000 bd34 	b.w	8009fda <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800957a:	d106      	bne.n	800958a <HAL_RCC_OscConfig+0x35a>
 800957c:	4b69      	ldr	r3, [pc, #420]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a68      	ldr	r2, [pc, #416]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 8009582:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009586:	6013      	str	r3, [r2, #0]
 8009588:	e041      	b.n	800960e <HAL_RCC_OscConfig+0x3de>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009592:	d112      	bne.n	80095ba <HAL_RCC_OscConfig+0x38a>
 8009594:	4b63      	ldr	r3, [pc, #396]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a62      	ldr	r2, [pc, #392]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 800959a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800959e:	6013      	str	r3, [r2, #0]
 80095a0:	4b60      	ldr	r3, [pc, #384]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a5f      	ldr	r2, [pc, #380]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80095a6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80095aa:	6013      	str	r3, [r2, #0]
 80095ac:	4b5d      	ldr	r3, [pc, #372]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a5c      	ldr	r2, [pc, #368]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80095b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	e029      	b.n	800960e <HAL_RCC_OscConfig+0x3de>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80095c2:	d112      	bne.n	80095ea <HAL_RCC_OscConfig+0x3ba>
 80095c4:	4b57      	ldr	r3, [pc, #348]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a56      	ldr	r2, [pc, #344]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80095ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80095ce:	6013      	str	r3, [r2, #0]
 80095d0:	4b54      	ldr	r3, [pc, #336]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a53      	ldr	r2, [pc, #332]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80095d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095da:	6013      	str	r3, [r2, #0]
 80095dc:	4b51      	ldr	r3, [pc, #324]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a50      	ldr	r2, [pc, #320]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80095e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095e6:	6013      	str	r3, [r2, #0]
 80095e8:	e011      	b.n	800960e <HAL_RCC_OscConfig+0x3de>
 80095ea:	4b4e      	ldr	r3, [pc, #312]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a4d      	ldr	r2, [pc, #308]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80095f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095f4:	6013      	str	r3, [r2, #0]
 80095f6:	4b4b      	ldr	r3, [pc, #300]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a4a      	ldr	r2, [pc, #296]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80095fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009600:	6013      	str	r3, [r2, #0]
 8009602:	4b48      	ldr	r3, [pc, #288]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a47      	ldr	r2, [pc, #284]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 8009608:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800960c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d014      	beq.n	8009640 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8009616:	f7f9 f93d 	bl	8002894 <HAL_GetTick>
 800961a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800961c:	e009      	b.n	8009632 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800961e:	f7f9 f939 	bl	8002894 <HAL_GetTick>
 8009622:	4602      	mov	r2, r0
 8009624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	2b64      	cmp	r3, #100	@ 0x64
 800962a:	d902      	bls.n	8009632 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800962c:	2303      	movs	r3, #3
 800962e:	f000 bcd4 	b.w	8009fda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009632:	4b3c      	ldr	r3, [pc, #240]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800963a:	2b00      	cmp	r3, #0
 800963c:	d0ef      	beq.n	800961e <HAL_RCC_OscConfig+0x3ee>
 800963e:	e013      	b.n	8009668 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8009640:	f7f9 f928 	bl	8002894 <HAL_GetTick>
 8009644:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009646:	e009      	b.n	800965c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009648:	f7f9 f924 	bl	8002894 <HAL_GetTick>
 800964c:	4602      	mov	r2, r0
 800964e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	2b64      	cmp	r3, #100	@ 0x64
 8009654:	d902      	bls.n	800965c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009656:	2303      	movs	r3, #3
 8009658:	f000 bcbf 	b.w	8009fda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800965c:	4b31      	ldr	r3, [pc, #196]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1ef      	bne.n	8009648 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 0302 	and.w	r3, r3, #2
 8009670:	2b00      	cmp	r3, #0
 8009672:	d05f      	beq.n	8009734 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009676:	2b04      	cmp	r3, #4
 8009678:	d005      	beq.n	8009686 <HAL_RCC_OscConfig+0x456>
 800967a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967c:	2b0c      	cmp	r3, #12
 800967e:	d114      	bne.n	80096aa <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009682:	2b02      	cmp	r3, #2
 8009684:	d111      	bne.n	80096aa <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d102      	bne.n	8009694 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	f000 bca3 	b.w	8009fda <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009694:	4b23      	ldr	r3, [pc, #140]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	041b      	lsls	r3, r3, #16
 80096a2:	4920      	ldr	r1, [pc, #128]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80096a4:	4313      	orrs	r3, r2
 80096a6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80096a8:	e044      	b.n	8009734 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d024      	beq.n	80096fc <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80096b2:	4b1c      	ldr	r3, [pc, #112]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a1b      	ldr	r2, [pc, #108]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80096b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096bc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80096be:	f7f9 f8e9 	bl	8002894 <HAL_GetTick>
 80096c2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80096c4:	e009      	b.n	80096da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096c6:	f7f9 f8e5 	bl	8002894 <HAL_GetTick>
 80096ca:	4602      	mov	r2, r0
 80096cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d902      	bls.n	80096da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80096d4:	2303      	movs	r3, #3
 80096d6:	f000 bc80 	b.w	8009fda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80096da:	4b12      	ldr	r3, [pc, #72]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d0ef      	beq.n	80096c6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80096e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80096e8:	691b      	ldr	r3, [r3, #16]
 80096ea:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	041b      	lsls	r3, r3, #16
 80096f4:	490b      	ldr	r1, [pc, #44]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80096f6:	4313      	orrs	r3, r2
 80096f8:	610b      	str	r3, [r1, #16]
 80096fa:	e01b      	b.n	8009734 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80096fc:	4b09      	ldr	r3, [pc, #36]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a08      	ldr	r2, [pc, #32]	@ (8009724 <HAL_RCC_OscConfig+0x4f4>)
 8009702:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009706:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009708:	f7f9 f8c4 	bl	8002894 <HAL_GetTick>
 800970c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800970e:	e00b      	b.n	8009728 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009710:	f7f9 f8c0 	bl	8002894 <HAL_GetTick>
 8009714:	4602      	mov	r2, r0
 8009716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009718:	1ad3      	subs	r3, r2, r3
 800971a:	2b02      	cmp	r3, #2
 800971c:	d904      	bls.n	8009728 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800971e:	2303      	movs	r3, #3
 8009720:	f000 bc5b 	b.w	8009fda <HAL_RCC_OscConfig+0xdaa>
 8009724:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009728:	4baf      	ldr	r3, [pc, #700]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1ed      	bne.n	8009710 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 0308 	and.w	r3, r3, #8
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 80c8 	beq.w	80098d2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8009742:	2300      	movs	r3, #0
 8009744:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009748:	4ba7      	ldr	r3, [pc, #668]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 800974a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800974e:	f003 0304 	and.w	r3, r3, #4
 8009752:	2b00      	cmp	r3, #0
 8009754:	d111      	bne.n	800977a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009756:	4ba4      	ldr	r3, [pc, #656]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 8009758:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800975c:	4aa2      	ldr	r2, [pc, #648]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 800975e:	f043 0304 	orr.w	r3, r3, #4
 8009762:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009766:	4ba0      	ldr	r3, [pc, #640]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 8009768:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800976c:	f003 0304 	and.w	r3, r3, #4
 8009770:	617b      	str	r3, [r7, #20]
 8009772:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8009774:	2301      	movs	r3, #1
 8009776:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800977a:	4b9c      	ldr	r3, [pc, #624]	@ (80099ec <HAL_RCC_OscConfig+0x7bc>)
 800977c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800977e:	f003 0301 	and.w	r3, r3, #1
 8009782:	2b00      	cmp	r3, #0
 8009784:	d119      	bne.n	80097ba <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009786:	4b99      	ldr	r3, [pc, #612]	@ (80099ec <HAL_RCC_OscConfig+0x7bc>)
 8009788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800978a:	4a98      	ldr	r2, [pc, #608]	@ (80099ec <HAL_RCC_OscConfig+0x7bc>)
 800978c:	f043 0301 	orr.w	r3, r3, #1
 8009790:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009792:	f7f9 f87f 	bl	8002894 <HAL_GetTick>
 8009796:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009798:	e009      	b.n	80097ae <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800979a:	f7f9 f87b 	bl	8002894 <HAL_GetTick>
 800979e:	4602      	mov	r2, r0
 80097a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d902      	bls.n	80097ae <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80097a8:	2303      	movs	r3, #3
 80097aa:	f000 bc16 	b.w	8009fda <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80097ae:	4b8f      	ldr	r3, [pc, #572]	@ (80099ec <HAL_RCC_OscConfig+0x7bc>)
 80097b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d0ef      	beq.n	800979a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d05f      	beq.n	8009882 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80097c2:	4b89      	ldr	r3, [pc, #548]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 80097c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097c8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	699a      	ldr	r2, [r3, #24]
 80097ce:	6a3b      	ldr	r3, [r7, #32]
 80097d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d037      	beq.n	8009848 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80097d8:	6a3b      	ldr	r3, [r7, #32]
 80097da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d006      	beq.n	80097f0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80097e2:	6a3b      	ldr	r3, [r7, #32]
 80097e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d101      	bne.n	80097f0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	e3f4      	b.n	8009fda <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80097f0:	6a3b      	ldr	r3, [r7, #32]
 80097f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d01b      	beq.n	8009832 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80097fa:	4b7b      	ldr	r3, [pc, #492]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 80097fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009800:	4a79      	ldr	r2, [pc, #484]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 8009802:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009806:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800980a:	f7f9 f843 	bl	8002894 <HAL_GetTick>
 800980e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009810:	e008      	b.n	8009824 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009812:	f7f9 f83f 	bl	8002894 <HAL_GetTick>
 8009816:	4602      	mov	r2, r0
 8009818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	2b05      	cmp	r3, #5
 800981e:	d901      	bls.n	8009824 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e3da      	b.n	8009fda <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009824:	4b70      	ldr	r3, [pc, #448]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 8009826:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800982a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1ef      	bne.n	8009812 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8009832:	4b6d      	ldr	r3, [pc, #436]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 8009834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009838:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	4969      	ldr	r1, [pc, #420]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 8009842:	4313      	orrs	r3, r2
 8009844:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8009848:	4b67      	ldr	r3, [pc, #412]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 800984a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800984e:	4a66      	ldr	r2, [pc, #408]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 8009850:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009854:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009858:	f7f9 f81c 	bl	8002894 <HAL_GetTick>
 800985c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800985e:	e008      	b.n	8009872 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009860:	f7f9 f818 	bl	8002894 <HAL_GetTick>
 8009864:	4602      	mov	r2, r0
 8009866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	2b05      	cmp	r3, #5
 800986c:	d901      	bls.n	8009872 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800986e:	2303      	movs	r3, #3
 8009870:	e3b3      	b.n	8009fda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009872:	4b5d      	ldr	r3, [pc, #372]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 8009874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009878:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800987c:	2b00      	cmp	r3, #0
 800987e:	d0ef      	beq.n	8009860 <HAL_RCC_OscConfig+0x630>
 8009880:	e01b      	b.n	80098ba <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8009882:	4b59      	ldr	r3, [pc, #356]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 8009884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009888:	4a57      	ldr	r2, [pc, #348]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 800988a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800988e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009892:	f7f8 ffff 	bl	8002894 <HAL_GetTick>
 8009896:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009898:	e008      	b.n	80098ac <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800989a:	f7f8 fffb 	bl	8002894 <HAL_GetTick>
 800989e:	4602      	mov	r2, r0
 80098a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	2b05      	cmp	r3, #5
 80098a6:	d901      	bls.n	80098ac <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80098a8:	2303      	movs	r3, #3
 80098aa:	e396      	b.n	8009fda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80098ac:	4b4e      	ldr	r3, [pc, #312]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 80098ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1ef      	bne.n	800989a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80098ba:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d107      	bne.n	80098d2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80098c2:	4b49      	ldr	r3, [pc, #292]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 80098c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098c8:	4a47      	ldr	r2, [pc, #284]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 80098ca:	f023 0304 	bic.w	r3, r3, #4
 80098ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 0304 	and.w	r3, r3, #4
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 8111 	beq.w	8009b02 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80098e0:	2300      	movs	r3, #0
 80098e2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098e6:	4b40      	ldr	r3, [pc, #256]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 80098e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098ec:	f003 0304 	and.w	r3, r3, #4
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d111      	bne.n	8009918 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098f4:	4b3c      	ldr	r3, [pc, #240]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 80098f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098fa:	4a3b      	ldr	r2, [pc, #236]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 80098fc:	f043 0304 	orr.w	r3, r3, #4
 8009900:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009904:	4b38      	ldr	r3, [pc, #224]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 8009906:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800990a:	f003 0304 	and.w	r3, r3, #4
 800990e:	613b      	str	r3, [r7, #16]
 8009910:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8009912:	2301      	movs	r3, #1
 8009914:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009918:	4b34      	ldr	r3, [pc, #208]	@ (80099ec <HAL_RCC_OscConfig+0x7bc>)
 800991a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	2b00      	cmp	r3, #0
 8009922:	d118      	bne.n	8009956 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009924:	4b31      	ldr	r3, [pc, #196]	@ (80099ec <HAL_RCC_OscConfig+0x7bc>)
 8009926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009928:	4a30      	ldr	r2, [pc, #192]	@ (80099ec <HAL_RCC_OscConfig+0x7bc>)
 800992a:	f043 0301 	orr.w	r3, r3, #1
 800992e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009930:	f7f8 ffb0 	bl	8002894 <HAL_GetTick>
 8009934:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009936:	e008      	b.n	800994a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009938:	f7f8 ffac 	bl	8002894 <HAL_GetTick>
 800993c:	4602      	mov	r2, r0
 800993e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	2b02      	cmp	r3, #2
 8009944:	d901      	bls.n	800994a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	e347      	b.n	8009fda <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800994a:	4b28      	ldr	r3, [pc, #160]	@ (80099ec <HAL_RCC_OscConfig+0x7bc>)
 800994c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	2b00      	cmp	r3, #0
 8009954:	d0f0      	beq.n	8009938 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	f003 0301 	and.w	r3, r3, #1
 800995e:	2b00      	cmp	r3, #0
 8009960:	d01f      	beq.n	80099a2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	f003 0304 	and.w	r3, r3, #4
 800996a:	2b00      	cmp	r3, #0
 800996c:	d010      	beq.n	8009990 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800996e:	4b1e      	ldr	r3, [pc, #120]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 8009970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009974:	4a1c      	ldr	r2, [pc, #112]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 8009976:	f043 0304 	orr.w	r3, r3, #4
 800997a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800997e:	4b1a      	ldr	r3, [pc, #104]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 8009980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009984:	4a18      	ldr	r2, [pc, #96]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 8009986:	f043 0301 	orr.w	r3, r3, #1
 800998a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800998e:	e018      	b.n	80099c2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009990:	4b15      	ldr	r3, [pc, #84]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 8009992:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009996:	4a14      	ldr	r2, [pc, #80]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 8009998:	f043 0301 	orr.w	r3, r3, #1
 800999c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80099a0:	e00f      	b.n	80099c2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80099a2:	4b11      	ldr	r3, [pc, #68]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 80099a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099a8:	4a0f      	ldr	r2, [pc, #60]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 80099aa:	f023 0301 	bic.w	r3, r3, #1
 80099ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80099b2:	4b0d      	ldr	r3, [pc, #52]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 80099b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099b8:	4a0b      	ldr	r2, [pc, #44]	@ (80099e8 <HAL_RCC_OscConfig+0x7b8>)
 80099ba:	f023 0304 	bic.w	r3, r3, #4
 80099be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d057      	beq.n	8009a7a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80099ca:	f7f8 ff63 	bl	8002894 <HAL_GetTick>
 80099ce:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099d0:	e00e      	b.n	80099f0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099d2:	f7f8 ff5f 	bl	8002894 <HAL_GetTick>
 80099d6:	4602      	mov	r2, r0
 80099d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d905      	bls.n	80099f0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80099e4:	2303      	movs	r3, #3
 80099e6:	e2f8      	b.n	8009fda <HAL_RCC_OscConfig+0xdaa>
 80099e8:	46020c00 	.word	0x46020c00
 80099ec:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099f0:	4b9c      	ldr	r3, [pc, #624]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 80099f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099f6:	f003 0302 	and.w	r3, r3, #2
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d0e9      	beq.n	80099d2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d01b      	beq.n	8009a42 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009a0a:	4b96      	ldr	r3, [pc, #600]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a10:	4a94      	ldr	r2, [pc, #592]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009a1a:	e00a      	b.n	8009a32 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a1c:	f7f8 ff3a 	bl	8002894 <HAL_GetTick>
 8009a20:	4602      	mov	r2, r0
 8009a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d901      	bls.n	8009a32 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e2d3      	b.n	8009fda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009a32:	4b8c      	ldr	r3, [pc, #560]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009a34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d0ed      	beq.n	8009a1c <HAL_RCC_OscConfig+0x7ec>
 8009a40:	e053      	b.n	8009aea <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009a42:	4b88      	ldr	r3, [pc, #544]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009a44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a48:	4a86      	ldr	r2, [pc, #536]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009a4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009a52:	e00a      	b.n	8009a6a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a54:	f7f8 ff1e 	bl	8002894 <HAL_GetTick>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d901      	bls.n	8009a6a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8009a66:	2303      	movs	r3, #3
 8009a68:	e2b7      	b.n	8009fda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009a6a:	4b7e      	ldr	r3, [pc, #504]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009a6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1ed      	bne.n	8009a54 <HAL_RCC_OscConfig+0x824>
 8009a78:	e037      	b.n	8009aea <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8009a7a:	f7f8 ff0b 	bl	8002894 <HAL_GetTick>
 8009a7e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009a80:	e00a      	b.n	8009a98 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a82:	f7f8 ff07 	bl	8002894 <HAL_GetTick>
 8009a86:	4602      	mov	r2, r0
 8009a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d901      	bls.n	8009a98 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8009a94:	2303      	movs	r3, #3
 8009a96:	e2a0      	b.n	8009fda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009a98:	4b72      	ldr	r3, [pc, #456]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009a9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a9e:	f003 0302 	and.w	r3, r3, #2
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1ed      	bne.n	8009a82 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8009aa6:	4b6f      	ldr	r3, [pc, #444]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009aa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d01a      	beq.n	8009aea <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009ab4:	4b6b      	ldr	r3, [pc, #428]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009ab6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009aba:	4a6a      	ldr	r2, [pc, #424]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009abc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ac0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009ac4:	e00a      	b.n	8009adc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ac6:	f7f8 fee5 	bl	8002894 <HAL_GetTick>
 8009aca:	4602      	mov	r2, r0
 8009acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d901      	bls.n	8009adc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	e27e      	b.n	8009fda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009adc:	4b61      	ldr	r3, [pc, #388]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ae2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1ed      	bne.n	8009ac6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009aea:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d107      	bne.n	8009b02 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009af2:	4b5c      	ldr	r3, [pc, #368]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009af8:	4a5a      	ldr	r2, [pc, #360]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009afa:	f023 0304 	bic.w	r3, r3, #4
 8009afe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 0320 	and.w	r3, r3, #32
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d036      	beq.n	8009b7c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d019      	beq.n	8009b4a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8009b16:	4b53      	ldr	r3, [pc, #332]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a52      	ldr	r2, [pc, #328]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009b1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009b20:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009b22:	f7f8 feb7 	bl	8002894 <HAL_GetTick>
 8009b26:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009b28:	e008      	b.n	8009b3c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b2a:	f7f8 feb3 	bl	8002894 <HAL_GetTick>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d901      	bls.n	8009b3c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e24e      	b.n	8009fda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009b3c:	4b49      	ldr	r3, [pc, #292]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d0f0      	beq.n	8009b2a <HAL_RCC_OscConfig+0x8fa>
 8009b48:	e018      	b.n	8009b7c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8009b4a:	4b46      	ldr	r3, [pc, #280]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a45      	ldr	r2, [pc, #276]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009b50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b54:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009b56:	f7f8 fe9d 	bl	8002894 <HAL_GetTick>
 8009b5a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009b5c:	e008      	b.n	8009b70 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b5e:	f7f8 fe99 	bl	8002894 <HAL_GetTick>
 8009b62:	4602      	mov	r2, r0
 8009b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b66:	1ad3      	subs	r3, r2, r3
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d901      	bls.n	8009b70 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	e234      	b.n	8009fda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009b70:	4b3c      	ldr	r3, [pc, #240]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1f0      	bne.n	8009b5e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d036      	beq.n	8009bf6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d019      	beq.n	8009bc4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8009b90:	4b34      	ldr	r3, [pc, #208]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a33      	ldr	r2, [pc, #204]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009b96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009b9a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009b9c:	f7f8 fe7a 	bl	8002894 <HAL_GetTick>
 8009ba0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009ba2:	e008      	b.n	8009bb6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009ba4:	f7f8 fe76 	bl	8002894 <HAL_GetTick>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bac:	1ad3      	subs	r3, r2, r3
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	d901      	bls.n	8009bb6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	e211      	b.n	8009fda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009bb6:	4b2b      	ldr	r3, [pc, #172]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d0f0      	beq.n	8009ba4 <HAL_RCC_OscConfig+0x974>
 8009bc2:	e018      	b.n	8009bf6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8009bc4:	4b27      	ldr	r3, [pc, #156]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a26      	ldr	r2, [pc, #152]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009bca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009bce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009bd0:	f7f8 fe60 	bl	8002894 <HAL_GetTick>
 8009bd4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009bd6:	e008      	b.n	8009bea <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009bd8:	f7f8 fe5c 	bl	8002894 <HAL_GetTick>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	2b02      	cmp	r3, #2
 8009be4:	d901      	bls.n	8009bea <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e1f7      	b.n	8009fda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009bea:	4b1e      	ldr	r3, [pc, #120]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1f0      	bne.n	8009bd8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d07f      	beq.n	8009d02 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d062      	beq.n	8009cd0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8009c0a:	4b16      	ldr	r3, [pc, #88]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	4a15      	ldr	r2, [pc, #84]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009c10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009c14:	6093      	str	r3, [r2, #8]
 8009c16:	4b13      	ldr	r3, [pc, #76]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c22:	4910      	ldr	r1, [pc, #64]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009c24:	4313      	orrs	r3, r2
 8009c26:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c2c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009c30:	d309      	bcc.n	8009c46 <HAL_RCC_OscConfig+0xa16>
 8009c32:	4b0c      	ldr	r3, [pc, #48]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	f023 021f 	bic.w	r2, r3, #31
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	4909      	ldr	r1, [pc, #36]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009c40:	4313      	orrs	r3, r2
 8009c42:	60cb      	str	r3, [r1, #12]
 8009c44:	e02a      	b.n	8009c9c <HAL_RCC_OscConfig+0xa6c>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	da0c      	bge.n	8009c68 <HAL_RCC_OscConfig+0xa38>
 8009c4e:	4b05      	ldr	r3, [pc, #20]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	015b      	lsls	r3, r3, #5
 8009c5c:	4901      	ldr	r1, [pc, #4]	@ (8009c64 <HAL_RCC_OscConfig+0xa34>)
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	60cb      	str	r3, [r1, #12]
 8009c62:	e01b      	b.n	8009c9c <HAL_RCC_OscConfig+0xa6c>
 8009c64:	46020c00 	.word	0x46020c00
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c70:	d30a      	bcc.n	8009c88 <HAL_RCC_OscConfig+0xa58>
 8009c72:	4ba1      	ldr	r3, [pc, #644]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a1b      	ldr	r3, [r3, #32]
 8009c7e:	029b      	lsls	r3, r3, #10
 8009c80:	499d      	ldr	r1, [pc, #628]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009c82:	4313      	orrs	r3, r2
 8009c84:	60cb      	str	r3, [r1, #12]
 8009c86:	e009      	b.n	8009c9c <HAL_RCC_OscConfig+0xa6c>
 8009c88:	4b9b      	ldr	r3, [pc, #620]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a1b      	ldr	r3, [r3, #32]
 8009c94:	03db      	lsls	r3, r3, #15
 8009c96:	4998      	ldr	r1, [pc, #608]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8009c9c:	4b96      	ldr	r3, [pc, #600]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a95      	ldr	r2, [pc, #596]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009ca2:	f043 0310 	orr.w	r3, r3, #16
 8009ca6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009ca8:	f7f8 fdf4 	bl	8002894 <HAL_GetTick>
 8009cac:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8009cae:	e008      	b.n	8009cc2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009cb0:	f7f8 fdf0 	bl	8002894 <HAL_GetTick>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d901      	bls.n	8009cc2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	e18b      	b.n	8009fda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8009cc2:	4b8d      	ldr	r3, [pc, #564]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f003 0320 	and.w	r3, r3, #32
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d0f0      	beq.n	8009cb0 <HAL_RCC_OscConfig+0xa80>
 8009cce:	e018      	b.n	8009d02 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8009cd0:	4b89      	ldr	r3, [pc, #548]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a88      	ldr	r2, [pc, #544]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009cd6:	f023 0310 	bic.w	r3, r3, #16
 8009cda:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009cdc:	f7f8 fdda 	bl	8002894 <HAL_GetTick>
 8009ce0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009ce2:	e008      	b.n	8009cf6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009ce4:	f7f8 fdd6 	bl	8002894 <HAL_GetTick>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	2b02      	cmp	r3, #2
 8009cf0:	d901      	bls.n	8009cf6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e171      	b.n	8009fda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009cf6:	4b80      	ldr	r3, [pc, #512]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f003 0320 	and.w	r3, r3, #32
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1f0      	bne.n	8009ce4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f000 8166 	beq.w	8009fd8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009d12:	4b79      	ldr	r3, [pc, #484]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009d14:	69db      	ldr	r3, [r3, #28]
 8009d16:	f003 030c 	and.w	r3, r3, #12
 8009d1a:	2b0c      	cmp	r3, #12
 8009d1c:	f000 80f2 	beq.w	8009f04 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	f040 80c5 	bne.w	8009eb4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009d2a:	4b73      	ldr	r3, [pc, #460]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a72      	ldr	r2, [pc, #456]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009d30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009d34:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009d36:	f7f8 fdad 	bl	8002894 <HAL_GetTick>
 8009d3a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009d3c:	e008      	b.n	8009d50 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d3e:	f7f8 fda9 	bl	8002894 <HAL_GetTick>
 8009d42:	4602      	mov	r2, r0
 8009d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d901      	bls.n	8009d50 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e144      	b.n	8009fda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009d50:	4b69      	ldr	r3, [pc, #420]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1f0      	bne.n	8009d3e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d5c:	4b66      	ldr	r3, [pc, #408]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009d62:	f003 0304 	and.w	r3, r3, #4
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d111      	bne.n	8009d8e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8009d6a:	4b63      	ldr	r3, [pc, #396]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009d70:	4a61      	ldr	r2, [pc, #388]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009d72:	f043 0304 	orr.w	r3, r3, #4
 8009d76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009d80:	f003 0304 	and.w	r3, r3, #4
 8009d84:	60fb      	str	r3, [r7, #12]
 8009d86:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8009d8e:	4b5b      	ldr	r3, [pc, #364]	@ (8009efc <HAL_RCC_OscConfig+0xccc>)
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009d96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009d9a:	d102      	bne.n	8009da2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009da2:	4b56      	ldr	r3, [pc, #344]	@ (8009efc <HAL_RCC_OscConfig+0xccc>)
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	4a55      	ldr	r2, [pc, #340]	@ (8009efc <HAL_RCC_OscConfig+0xccc>)
 8009da8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009dac:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8009dae:	4b52      	ldr	r3, [pc, #328]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009db6:	f023 0303 	bic.w	r3, r3, #3
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009dc2:	3a01      	subs	r2, #1
 8009dc4:	0212      	lsls	r2, r2, #8
 8009dc6:	4311      	orrs	r1, r2
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009dcc:	430a      	orrs	r2, r1
 8009dce:	494a      	ldr	r1, [pc, #296]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	628b      	str	r3, [r1, #40]	@ 0x28
 8009dd4:	4b48      	ldr	r3, [pc, #288]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009dd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009dd8:	4b49      	ldr	r3, [pc, #292]	@ (8009f00 <HAL_RCC_OscConfig+0xcd0>)
 8009dda:	4013      	ands	r3, r2
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009de0:	3a01      	subs	r2, #1
 8009de2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009dea:	3a01      	subs	r2, #1
 8009dec:	0252      	lsls	r2, r2, #9
 8009dee:	b292      	uxth	r2, r2
 8009df0:	4311      	orrs	r1, r2
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009df6:	3a01      	subs	r2, #1
 8009df8:	0412      	lsls	r2, r2, #16
 8009dfa:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009dfe:	4311      	orrs	r1, r2
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009e04:	3a01      	subs	r2, #1
 8009e06:	0612      	lsls	r2, r2, #24
 8009e08:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009e0c:	430a      	orrs	r2, r1
 8009e0e:	493a      	ldr	r1, [pc, #232]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009e10:	4313      	orrs	r3, r2
 8009e12:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8009e14:	4b38      	ldr	r3, [pc, #224]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e18:	4a37      	ldr	r2, [pc, #220]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009e1a:	f023 0310 	bic.w	r3, r3, #16
 8009e1e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e24:	4a34      	ldr	r2, [pc, #208]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009e26:	00db      	lsls	r3, r3, #3
 8009e28:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8009e2a:	4b33      	ldr	r3, [pc, #204]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e2e:	4a32      	ldr	r2, [pc, #200]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009e30:	f043 0310 	orr.w	r3, r3, #16
 8009e34:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8009e36:	4b30      	ldr	r3, [pc, #192]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e3a:	f023 020c 	bic.w	r2, r3, #12
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e42:	492d      	ldr	r1, [pc, #180]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009e44:	4313      	orrs	r3, r2
 8009e46:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8009e48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d105      	bne.n	8009e5c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009e50:	4b2a      	ldr	r3, [pc, #168]	@ (8009efc <HAL_RCC_OscConfig+0xccc>)
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	4a29      	ldr	r2, [pc, #164]	@ (8009efc <HAL_RCC_OscConfig+0xccc>)
 8009e56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009e5a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8009e5c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d107      	bne.n	8009e74 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8009e64:	4b24      	ldr	r3, [pc, #144]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e6a:	4a23      	ldr	r2, [pc, #140]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009e6c:	f023 0304 	bic.w	r3, r3, #4
 8009e70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8009e74:	4b20      	ldr	r3, [pc, #128]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a1f      	ldr	r2, [pc, #124]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009e7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009e7e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009e80:	f7f8 fd08 	bl	8002894 <HAL_GetTick>
 8009e84:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009e86:	e008      	b.n	8009e9a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e88:	f7f8 fd04 	bl	8002894 <HAL_GetTick>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d901      	bls.n	8009e9a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8009e96:	2303      	movs	r3, #3
 8009e98:	e09f      	b.n	8009fda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009e9a:	4b17      	ldr	r3, [pc, #92]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d0f0      	beq.n	8009e88 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009ea6:	4b14      	ldr	r3, [pc, #80]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eaa:	4a13      	ldr	r2, [pc, #76]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009eac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009eb0:	6293      	str	r3, [r2, #40]	@ 0x28
 8009eb2:	e091      	b.n	8009fd8 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009eb4:	4b10      	ldr	r3, [pc, #64]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a0f      	ldr	r2, [pc, #60]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009eba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009ebe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009ec0:	f7f8 fce8 	bl	8002894 <HAL_GetTick>
 8009ec4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009ec6:	e008      	b.n	8009eda <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ec8:	f7f8 fce4 	bl	8002894 <HAL_GetTick>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d901      	bls.n	8009eda <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	e07f      	b.n	8009fda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009eda:	4b07      	ldr	r3, [pc, #28]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1f0      	bne.n	8009ec8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8009ee6:	4b04      	ldr	r3, [pc, #16]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eea:	4a03      	ldr	r2, [pc, #12]	@ (8009ef8 <HAL_RCC_OscConfig+0xcc8>)
 8009eec:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8009ef0:	f023 0303 	bic.w	r3, r3, #3
 8009ef4:	6293      	str	r3, [r2, #40]	@ 0x28
 8009ef6:	e06f      	b.n	8009fd8 <HAL_RCC_OscConfig+0xda8>
 8009ef8:	46020c00 	.word	0x46020c00
 8009efc:	46020800 	.word	0x46020800
 8009f00:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8009f04:	4b37      	ldr	r3, [pc, #220]	@ (8009fe4 <HAL_RCC_OscConfig+0xdb4>)
 8009f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f08:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009f0a:	4b36      	ldr	r3, [pc, #216]	@ (8009fe4 <HAL_RCC_OscConfig+0xdb4>)
 8009f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f0e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d039      	beq.n	8009f8c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	f003 0203 	and.w	r2, r3, #3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d132      	bne.n	8009f8c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	0a1b      	lsrs	r3, r3, #8
 8009f2a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f32:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d129      	bne.n	8009f8c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d122      	bne.n	8009f8c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f50:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d11a      	bne.n	8009f8c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	0a5b      	lsrs	r3, r3, #9
 8009f5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f62:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d111      	bne.n	8009f8c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	0c1b      	lsrs	r3, r3, #16
 8009f6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f74:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d108      	bne.n	8009f8c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8009f7a:	69bb      	ldr	r3, [r7, #24]
 8009f7c:	0e1b      	lsrs	r3, r3, #24
 8009f7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f86:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d001      	beq.n	8009f90 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e024      	b.n	8009fda <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8009f90:	4b14      	ldr	r3, [pc, #80]	@ (8009fe4 <HAL_RCC_OscConfig+0xdb4>)
 8009f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f94:	08db      	lsrs	r3, r3, #3
 8009f96:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d01a      	beq.n	8009fd8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8009fa2:	4b10      	ldr	r3, [pc, #64]	@ (8009fe4 <HAL_RCC_OscConfig+0xdb4>)
 8009fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8009fe4 <HAL_RCC_OscConfig+0xdb4>)
 8009fa8:	f023 0310 	bic.w	r3, r3, #16
 8009fac:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fae:	f7f8 fc71 	bl	8002894 <HAL_GetTick>
 8009fb2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8009fb4:	bf00      	nop
 8009fb6:	f7f8 fc6d 	bl	8002894 <HAL_GetTick>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d0f9      	beq.n	8009fb6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fc6:	4a07      	ldr	r2, [pc, #28]	@ (8009fe4 <HAL_RCC_OscConfig+0xdb4>)
 8009fc8:	00db      	lsls	r3, r3, #3
 8009fca:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8009fcc:	4b05      	ldr	r3, [pc, #20]	@ (8009fe4 <HAL_RCC_OscConfig+0xdb4>)
 8009fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fd0:	4a04      	ldr	r2, [pc, #16]	@ (8009fe4 <HAL_RCC_OscConfig+0xdb4>)
 8009fd2:	f043 0310 	orr.w	r3, r3, #16
 8009fd6:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3738      	adds	r7, #56	@ 0x38
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	46020c00 	.word	0x46020c00

08009fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d101      	bne.n	8009ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e1d9      	b.n	800a3b0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ffc:	4b9b      	ldr	r3, [pc, #620]	@ (800a26c <HAL_RCC_ClockConfig+0x284>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f003 030f 	and.w	r3, r3, #15
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	429a      	cmp	r2, r3
 800a008:	d910      	bls.n	800a02c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a00a:	4b98      	ldr	r3, [pc, #608]	@ (800a26c <HAL_RCC_ClockConfig+0x284>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f023 020f 	bic.w	r2, r3, #15
 800a012:	4996      	ldr	r1, [pc, #600]	@ (800a26c <HAL_RCC_ClockConfig+0x284>)
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	4313      	orrs	r3, r2
 800a018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a01a:	4b94      	ldr	r3, [pc, #592]	@ (800a26c <HAL_RCC_ClockConfig+0x284>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f003 030f 	and.w	r3, r3, #15
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	429a      	cmp	r2, r3
 800a026:	d001      	beq.n	800a02c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	e1c1      	b.n	800a3b0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 0310 	and.w	r3, r3, #16
 800a034:	2b00      	cmp	r3, #0
 800a036:	d010      	beq.n	800a05a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	695a      	ldr	r2, [r3, #20]
 800a03c:	4b8c      	ldr	r3, [pc, #560]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a03e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a040:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a044:	429a      	cmp	r2, r3
 800a046:	d908      	bls.n	800a05a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800a048:	4b89      	ldr	r3, [pc, #548]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a04c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	695b      	ldr	r3, [r3, #20]
 800a054:	4986      	ldr	r1, [pc, #536]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a056:	4313      	orrs	r3, r2
 800a058:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f003 0308 	and.w	r3, r3, #8
 800a062:	2b00      	cmp	r3, #0
 800a064:	d012      	beq.n	800a08c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	691a      	ldr	r2, [r3, #16]
 800a06a:	4b81      	ldr	r3, [pc, #516]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	091b      	lsrs	r3, r3, #4
 800a070:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a074:	429a      	cmp	r2, r3
 800a076:	d909      	bls.n	800a08c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a078:	4b7d      	ldr	r3, [pc, #500]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a07a:	6a1b      	ldr	r3, [r3, #32]
 800a07c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	691b      	ldr	r3, [r3, #16]
 800a084:	011b      	lsls	r3, r3, #4
 800a086:	497a      	ldr	r1, [pc, #488]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a088:	4313      	orrs	r3, r2
 800a08a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 0304 	and.w	r3, r3, #4
 800a094:	2b00      	cmp	r3, #0
 800a096:	d010      	beq.n	800a0ba <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	68da      	ldr	r2, [r3, #12]
 800a09c:	4b74      	ldr	r3, [pc, #464]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a09e:	6a1b      	ldr	r3, [r3, #32]
 800a0a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d908      	bls.n	800a0ba <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a0a8:	4b71      	ldr	r3, [pc, #452]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a0aa:	6a1b      	ldr	r3, [r3, #32]
 800a0ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	496e      	ldr	r1, [pc, #440]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f003 0302 	and.w	r3, r3, #2
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d010      	beq.n	800a0e8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	689a      	ldr	r2, [r3, #8]
 800a0ca:	4b69      	ldr	r3, [pc, #420]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a0cc:	6a1b      	ldr	r3, [r3, #32]
 800a0ce:	f003 030f 	and.w	r3, r3, #15
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d908      	bls.n	800a0e8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a0d6:	4b66      	ldr	r3, [pc, #408]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	f023 020f 	bic.w	r2, r3, #15
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	4963      	ldr	r1, [pc, #396]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 0301 	and.w	r3, r3, #1
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f000 80d2 	beq.w	800a29a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	2b03      	cmp	r3, #3
 800a100:	d143      	bne.n	800a18a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a102:	4b5b      	ldr	r3, [pc, #364]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a104:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a108:	f003 0304 	and.w	r3, r3, #4
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d110      	bne.n	800a132 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a110:	4b57      	ldr	r3, [pc, #348]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a112:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a116:	4a56      	ldr	r2, [pc, #344]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a118:	f043 0304 	orr.w	r3, r3, #4
 800a11c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a120:	4b53      	ldr	r3, [pc, #332]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a126:	f003 0304 	and.w	r3, r3, #4
 800a12a:	60bb      	str	r3, [r7, #8]
 800a12c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800a12e:	2301      	movs	r3, #1
 800a130:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800a132:	f7f8 fbaf 	bl	8002894 <HAL_GetTick>
 800a136:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800a138:	4b4e      	ldr	r3, [pc, #312]	@ (800a274 <HAL_RCC_ClockConfig+0x28c>)
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00f      	beq.n	800a164 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a144:	e008      	b.n	800a158 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800a146:	f7f8 fba5 	bl	8002894 <HAL_GetTick>
 800a14a:	4602      	mov	r2, r0
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	2b02      	cmp	r3, #2
 800a152:	d901      	bls.n	800a158 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800a154:	2303      	movs	r3, #3
 800a156:	e12b      	b.n	800a3b0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a158:	4b46      	ldr	r3, [pc, #280]	@ (800a274 <HAL_RCC_ClockConfig+0x28c>)
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a160:	2b00      	cmp	r3, #0
 800a162:	d0f0      	beq.n	800a146 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a164:	7dfb      	ldrb	r3, [r7, #23]
 800a166:	2b01      	cmp	r3, #1
 800a168:	d107      	bne.n	800a17a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a16a:	4b41      	ldr	r3, [pc, #260]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a16c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a170:	4a3f      	ldr	r2, [pc, #252]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a172:	f023 0304 	bic.w	r3, r3, #4
 800a176:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a17a:	4b3d      	ldr	r3, [pc, #244]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a182:	2b00      	cmp	r3, #0
 800a184:	d121      	bne.n	800a1ca <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	e112      	b.n	800a3b0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d107      	bne.n	800a1a2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a192:	4b37      	ldr	r3, [pc, #220]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d115      	bne.n	800a1ca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e106      	b.n	800a3b0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d107      	bne.n	800a1ba <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a1aa:	4b31      	ldr	r3, [pc, #196]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f003 0304 	and.w	r3, r3, #4
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d109      	bne.n	800a1ca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e0fa      	b.n	800a3b0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a1ba:	4b2d      	ldr	r3, [pc, #180]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d101      	bne.n	800a1ca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e0f2      	b.n	800a3b0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800a1ca:	4b29      	ldr	r3, [pc, #164]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a1cc:	69db      	ldr	r3, [r3, #28]
 800a1ce:	f023 0203 	bic.w	r2, r3, #3
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	4926      	ldr	r1, [pc, #152]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800a1dc:	f7f8 fb5a 	bl	8002894 <HAL_GetTick>
 800a1e0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	2b03      	cmp	r3, #3
 800a1e8:	d112      	bne.n	800a210 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a1ea:	e00a      	b.n	800a202 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1ec:	f7f8 fb52 	bl	8002894 <HAL_GetTick>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	1ad3      	subs	r3, r2, r3
 800a1f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d901      	bls.n	800a202 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800a1fe:	2303      	movs	r3, #3
 800a200:	e0d6      	b.n	800a3b0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a202:	4b1b      	ldr	r3, [pc, #108]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a204:	69db      	ldr	r3, [r3, #28]
 800a206:	f003 030c 	and.w	r3, r3, #12
 800a20a:	2b0c      	cmp	r3, #12
 800a20c:	d1ee      	bne.n	800a1ec <HAL_RCC_ClockConfig+0x204>
 800a20e:	e044      	b.n	800a29a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	2b02      	cmp	r3, #2
 800a216:	d112      	bne.n	800a23e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a218:	e00a      	b.n	800a230 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a21a:	f7f8 fb3b 	bl	8002894 <HAL_GetTick>
 800a21e:	4602      	mov	r2, r0
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	1ad3      	subs	r3, r2, r3
 800a224:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a228:	4293      	cmp	r3, r2
 800a22a:	d901      	bls.n	800a230 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a22c:	2303      	movs	r3, #3
 800a22e:	e0bf      	b.n	800a3b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a230:	4b0f      	ldr	r3, [pc, #60]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a232:	69db      	ldr	r3, [r3, #28]
 800a234:	f003 030c 	and.w	r3, r3, #12
 800a238:	2b08      	cmp	r3, #8
 800a23a:	d1ee      	bne.n	800a21a <HAL_RCC_ClockConfig+0x232>
 800a23c:	e02d      	b.n	800a29a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d123      	bne.n	800a28e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a246:	e00a      	b.n	800a25e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a248:	f7f8 fb24 	bl	8002894 <HAL_GetTick>
 800a24c:	4602      	mov	r2, r0
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	1ad3      	subs	r3, r2, r3
 800a252:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a256:	4293      	cmp	r3, r2
 800a258:	d901      	bls.n	800a25e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800a25a:	2303      	movs	r3, #3
 800a25c:	e0a8      	b.n	800a3b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a25e:	4b04      	ldr	r3, [pc, #16]	@ (800a270 <HAL_RCC_ClockConfig+0x288>)
 800a260:	69db      	ldr	r3, [r3, #28]
 800a262:	f003 030c 	and.w	r3, r3, #12
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1ee      	bne.n	800a248 <HAL_RCC_ClockConfig+0x260>
 800a26a:	e016      	b.n	800a29a <HAL_RCC_ClockConfig+0x2b2>
 800a26c:	40022000 	.word	0x40022000
 800a270:	46020c00 	.word	0x46020c00
 800a274:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a278:	f7f8 fb0c 	bl	8002894 <HAL_GetTick>
 800a27c:	4602      	mov	r2, r0
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a286:	4293      	cmp	r3, r2
 800a288:	d901      	bls.n	800a28e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800a28a:	2303      	movs	r3, #3
 800a28c:	e090      	b.n	800a3b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a28e:	4b4a      	ldr	r3, [pc, #296]	@ (800a3b8 <HAL_RCC_ClockConfig+0x3d0>)
 800a290:	69db      	ldr	r3, [r3, #28]
 800a292:	f003 030c 	and.w	r3, r3, #12
 800a296:	2b04      	cmp	r3, #4
 800a298:	d1ee      	bne.n	800a278 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0302 	and.w	r3, r3, #2
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d010      	beq.n	800a2c8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	689a      	ldr	r2, [r3, #8]
 800a2aa:	4b43      	ldr	r3, [pc, #268]	@ (800a3b8 <HAL_RCC_ClockConfig+0x3d0>)
 800a2ac:	6a1b      	ldr	r3, [r3, #32]
 800a2ae:	f003 030f 	and.w	r3, r3, #15
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d208      	bcs.n	800a2c8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a2b6:	4b40      	ldr	r3, [pc, #256]	@ (800a3b8 <HAL_RCC_ClockConfig+0x3d0>)
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	f023 020f 	bic.w	r2, r3, #15
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	493d      	ldr	r1, [pc, #244]	@ (800a3b8 <HAL_RCC_ClockConfig+0x3d0>)
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a2c8:	4b3c      	ldr	r3, [pc, #240]	@ (800a3bc <HAL_RCC_ClockConfig+0x3d4>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f003 030f 	and.w	r3, r3, #15
 800a2d0:	683a      	ldr	r2, [r7, #0]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d210      	bcs.n	800a2f8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2d6:	4b39      	ldr	r3, [pc, #228]	@ (800a3bc <HAL_RCC_ClockConfig+0x3d4>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f023 020f 	bic.w	r2, r3, #15
 800a2de:	4937      	ldr	r1, [pc, #220]	@ (800a3bc <HAL_RCC_ClockConfig+0x3d4>)
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2e6:	4b35      	ldr	r3, [pc, #212]	@ (800a3bc <HAL_RCC_ClockConfig+0x3d4>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f003 030f 	and.w	r3, r3, #15
 800a2ee:	683a      	ldr	r2, [r7, #0]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d001      	beq.n	800a2f8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e05b      	b.n	800a3b0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0304 	and.w	r3, r3, #4
 800a300:	2b00      	cmp	r3, #0
 800a302:	d010      	beq.n	800a326 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	68da      	ldr	r2, [r3, #12]
 800a308:	4b2b      	ldr	r3, [pc, #172]	@ (800a3b8 <HAL_RCC_ClockConfig+0x3d0>)
 800a30a:	6a1b      	ldr	r3, [r3, #32]
 800a30c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a310:	429a      	cmp	r2, r3
 800a312:	d208      	bcs.n	800a326 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a314:	4b28      	ldr	r3, [pc, #160]	@ (800a3b8 <HAL_RCC_ClockConfig+0x3d0>)
 800a316:	6a1b      	ldr	r3, [r3, #32]
 800a318:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	4925      	ldr	r1, [pc, #148]	@ (800a3b8 <HAL_RCC_ClockConfig+0x3d0>)
 800a322:	4313      	orrs	r3, r2
 800a324:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f003 0308 	and.w	r3, r3, #8
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d012      	beq.n	800a358 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	691a      	ldr	r2, [r3, #16]
 800a336:	4b20      	ldr	r3, [pc, #128]	@ (800a3b8 <HAL_RCC_ClockConfig+0x3d0>)
 800a338:	6a1b      	ldr	r3, [r3, #32]
 800a33a:	091b      	lsrs	r3, r3, #4
 800a33c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a340:	429a      	cmp	r2, r3
 800a342:	d209      	bcs.n	800a358 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a344:	4b1c      	ldr	r3, [pc, #112]	@ (800a3b8 <HAL_RCC_ClockConfig+0x3d0>)
 800a346:	6a1b      	ldr	r3, [r3, #32]
 800a348:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	011b      	lsls	r3, r3, #4
 800a352:	4919      	ldr	r1, [pc, #100]	@ (800a3b8 <HAL_RCC_ClockConfig+0x3d0>)
 800a354:	4313      	orrs	r3, r2
 800a356:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f003 0310 	and.w	r3, r3, #16
 800a360:	2b00      	cmp	r3, #0
 800a362:	d010      	beq.n	800a386 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	695a      	ldr	r2, [r3, #20]
 800a368:	4b13      	ldr	r3, [pc, #76]	@ (800a3b8 <HAL_RCC_ClockConfig+0x3d0>)
 800a36a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a36c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a370:	429a      	cmp	r2, r3
 800a372:	d208      	bcs.n	800a386 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800a374:	4b10      	ldr	r3, [pc, #64]	@ (800a3b8 <HAL_RCC_ClockConfig+0x3d0>)
 800a376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a378:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	695b      	ldr	r3, [r3, #20]
 800a380:	490d      	ldr	r1, [pc, #52]	@ (800a3b8 <HAL_RCC_ClockConfig+0x3d0>)
 800a382:	4313      	orrs	r3, r2
 800a384:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a386:	f000 f821 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800a38a:	4602      	mov	r2, r0
 800a38c:	4b0a      	ldr	r3, [pc, #40]	@ (800a3b8 <HAL_RCC_ClockConfig+0x3d0>)
 800a38e:	6a1b      	ldr	r3, [r3, #32]
 800a390:	f003 030f 	and.w	r3, r3, #15
 800a394:	490a      	ldr	r1, [pc, #40]	@ (800a3c0 <HAL_RCC_ClockConfig+0x3d8>)
 800a396:	5ccb      	ldrb	r3, [r1, r3]
 800a398:	fa22 f303 	lsr.w	r3, r2, r3
 800a39c:	4a09      	ldr	r2, [pc, #36]	@ (800a3c4 <HAL_RCC_ClockConfig+0x3dc>)
 800a39e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a3a0:	4b09      	ldr	r3, [pc, #36]	@ (800a3c8 <HAL_RCC_ClockConfig+0x3e0>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7f8 f9eb 	bl	8002780 <HAL_InitTick>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	73fb      	strb	r3, [r7, #15]

  return status;
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3718      	adds	r7, #24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	46020c00 	.word	0x46020c00
 800a3bc:	40022000 	.word	0x40022000
 800a3c0:	08010764 	.word	0x08010764
 800a3c4:	2000001c 	.word	0x2000001c
 800a3c8:	20000020 	.word	0x20000020

0800a3cc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b08b      	sub	sp, #44	@ 0x2c
 800a3d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3da:	4b78      	ldr	r3, [pc, #480]	@ (800a5bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	f003 030c 	and.w	r3, r3, #12
 800a3e2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a3e4:	4b75      	ldr	r3, [pc, #468]	@ (800a5bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3e8:	f003 0303 	and.w	r3, r3, #3
 800a3ec:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d005      	beq.n	800a400 <HAL_RCC_GetSysClockFreq+0x34>
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	2b0c      	cmp	r3, #12
 800a3f8:	d121      	bne.n	800a43e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d11e      	bne.n	800a43e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800a400:	4b6e      	ldr	r3, [pc, #440]	@ (800a5bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d107      	bne.n	800a41c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800a40c:	4b6b      	ldr	r3, [pc, #428]	@ (800a5bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a40e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a412:	0b1b      	lsrs	r3, r3, #12
 800a414:	f003 030f 	and.w	r3, r3, #15
 800a418:	627b      	str	r3, [r7, #36]	@ 0x24
 800a41a:	e005      	b.n	800a428 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800a41c:	4b67      	ldr	r3, [pc, #412]	@ (800a5bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	0f1b      	lsrs	r3, r3, #28
 800a422:	f003 030f 	and.w	r3, r3, #15
 800a426:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a428:	4a65      	ldr	r2, [pc, #404]	@ (800a5c0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800a42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a430:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d110      	bne.n	800a45a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a43c:	e00d      	b.n	800a45a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a43e:	4b5f      	ldr	r3, [pc, #380]	@ (800a5bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a440:	69db      	ldr	r3, [r3, #28]
 800a442:	f003 030c 	and.w	r3, r3, #12
 800a446:	2b04      	cmp	r3, #4
 800a448:	d102      	bne.n	800a450 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a44a:	4b5e      	ldr	r3, [pc, #376]	@ (800a5c4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800a44c:	623b      	str	r3, [r7, #32]
 800a44e:	e004      	b.n	800a45a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	2b08      	cmp	r3, #8
 800a454:	d101      	bne.n	800a45a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a456:	4b5b      	ldr	r3, [pc, #364]	@ (800a5c4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800a458:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	2b0c      	cmp	r3, #12
 800a45e:	f040 80a5 	bne.w	800a5ac <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a462:	4b56      	ldr	r3, [pc, #344]	@ (800a5bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a466:	f003 0303 	and.w	r3, r3, #3
 800a46a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a46c:	4b53      	ldr	r3, [pc, #332]	@ (800a5bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a46e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a470:	0a1b      	lsrs	r3, r3, #8
 800a472:	f003 030f 	and.w	r3, r3, #15
 800a476:	3301      	adds	r3, #1
 800a478:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a47a:	4b50      	ldr	r3, [pc, #320]	@ (800a5bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a47c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a47e:	091b      	lsrs	r3, r3, #4
 800a480:	f003 0301 	and.w	r3, r3, #1
 800a484:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a486:	4b4d      	ldr	r3, [pc, #308]	@ (800a5bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a48a:	08db      	lsrs	r3, r3, #3
 800a48c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a490:	68ba      	ldr	r2, [r7, #8]
 800a492:	fb02 f303 	mul.w	r3, r2, r3
 800a496:	ee07 3a90 	vmov	s15, r3
 800a49a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a49e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d003      	beq.n	800a4b0 <HAL_RCC_GetSysClockFreq+0xe4>
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	2b03      	cmp	r3, #3
 800a4ac:	d022      	beq.n	800a4f4 <HAL_RCC_GetSysClockFreq+0x128>
 800a4ae:	e043      	b.n	800a538 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	ee07 3a90 	vmov	s15, r3
 800a4b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ba:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800a5c8 <HAL_RCC_GetSysClockFreq+0x1fc>
 800a4be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4c2:	4b3e      	ldr	r3, [pc, #248]	@ (800a5bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a4c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ca:	ee07 3a90 	vmov	s15, r3
 800a4ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a4d2:	ed97 6a01 	vldr	s12, [r7, #4]
 800a4d6:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800a5cc <HAL_RCC_GetSysClockFreq+0x200>
 800a4da:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a4de:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a4e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a4ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4f2:	e046      	b.n	800a582 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	ee07 3a90 	vmov	s15, r3
 800a4fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4fe:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800a5c8 <HAL_RCC_GetSysClockFreq+0x1fc>
 800a502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a506:	4b2d      	ldr	r3, [pc, #180]	@ (800a5bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a50a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a50e:	ee07 3a90 	vmov	s15, r3
 800a512:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a516:	ed97 6a01 	vldr	s12, [r7, #4]
 800a51a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800a5cc <HAL_RCC_GetSysClockFreq+0x200>
 800a51e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a522:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a52a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a52e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a536:	e024      	b.n	800a582 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a53a:	ee07 3a90 	vmov	s15, r3
 800a53e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	ee07 3a90 	vmov	s15, r3
 800a548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a54c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a550:	4b1a      	ldr	r3, [pc, #104]	@ (800a5bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a558:	ee07 3a90 	vmov	s15, r3
 800a55c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a560:	ed97 6a01 	vldr	s12, [r7, #4]
 800a564:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800a5cc <HAL_RCC_GetSysClockFreq+0x200>
 800a568:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a56c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a570:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a574:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a57c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a580:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800a582:	4b0e      	ldr	r3, [pc, #56]	@ (800a5bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800a584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a586:	0e1b      	lsrs	r3, r3, #24
 800a588:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a58c:	3301      	adds	r3, #1
 800a58e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	ee07 3a90 	vmov	s15, r3
 800a596:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a59a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a59e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5a6:	ee17 3a90 	vmov	r3, s15
 800a5aa:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800a5ac:	6a3b      	ldr	r3, [r7, #32]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	372c      	adds	r7, #44	@ 0x2c
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	46020c00 	.word	0x46020c00
 800a5c0:	0801077c 	.word	0x0801077c
 800a5c4:	00f42400 	.word	0x00f42400
 800a5c8:	4b742400 	.word	0x4b742400
 800a5cc:	46000000 	.word	0x46000000

0800a5d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a5d4:	f7ff fefa 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	4b07      	ldr	r3, [pc, #28]	@ (800a5f8 <HAL_RCC_GetHCLKFreq+0x28>)
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	f003 030f 	and.w	r3, r3, #15
 800a5e2:	4906      	ldr	r1, [pc, #24]	@ (800a5fc <HAL_RCC_GetHCLKFreq+0x2c>)
 800a5e4:	5ccb      	ldrb	r3, [r1, r3]
 800a5e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ea:	4a05      	ldr	r2, [pc, #20]	@ (800a600 <HAL_RCC_GetHCLKFreq+0x30>)
 800a5ec:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800a5ee:	4b04      	ldr	r3, [pc, #16]	@ (800a600 <HAL_RCC_GetHCLKFreq+0x30>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	46020c00 	.word	0x46020c00
 800a5fc:	08010764 	.word	0x08010764
 800a600:	2000001c 	.word	0x2000001c

0800a604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800a608:	f7ff ffe2 	bl	800a5d0 <HAL_RCC_GetHCLKFreq>
 800a60c:	4602      	mov	r2, r0
 800a60e:	4b05      	ldr	r3, [pc, #20]	@ (800a624 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a610:	6a1b      	ldr	r3, [r3, #32]
 800a612:	091b      	lsrs	r3, r3, #4
 800a614:	f003 0307 	and.w	r3, r3, #7
 800a618:	4903      	ldr	r1, [pc, #12]	@ (800a628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a61a:	5ccb      	ldrb	r3, [r1, r3]
 800a61c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a620:	4618      	mov	r0, r3
 800a622:	bd80      	pop	{r7, pc}
 800a624:	46020c00 	.word	0x46020c00
 800a628:	08010774 	.word	0x08010774

0800a62c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800a630:	f7ff ffce 	bl	800a5d0 <HAL_RCC_GetHCLKFreq>
 800a634:	4602      	mov	r2, r0
 800a636:	4b05      	ldr	r3, [pc, #20]	@ (800a64c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	0a1b      	lsrs	r3, r3, #8
 800a63c:	f003 0307 	and.w	r3, r3, #7
 800a640:	4903      	ldr	r1, [pc, #12]	@ (800a650 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a642:	5ccb      	ldrb	r3, [r1, r3]
 800a644:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a648:	4618      	mov	r0, r3
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	46020c00 	.word	0x46020c00
 800a650:	08010774 	.word	0x08010774

0800a654 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800a658:	f7ff ffba 	bl	800a5d0 <HAL_RCC_GetHCLKFreq>
 800a65c:	4602      	mov	r2, r0
 800a65e:	4b05      	ldr	r3, [pc, #20]	@ (800a674 <HAL_RCC_GetPCLK3Freq+0x20>)
 800a660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a662:	091b      	lsrs	r3, r3, #4
 800a664:	f003 0307 	and.w	r3, r3, #7
 800a668:	4903      	ldr	r1, [pc, #12]	@ (800a678 <HAL_RCC_GetPCLK3Freq+0x24>)
 800a66a:	5ccb      	ldrb	r3, [r1, r3]
 800a66c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a670:	4618      	mov	r0, r3
 800a672:	bd80      	pop	{r7, pc}
 800a674:	46020c00 	.word	0x46020c00
 800a678:	08010774 	.word	0x08010774

0800a67c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b086      	sub	sp, #24
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a684:	4b3e      	ldr	r3, [pc, #248]	@ (800a780 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a68a:	f003 0304 	and.w	r3, r3, #4
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d003      	beq.n	800a69a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a692:	f7fe fd4f 	bl	8009134 <HAL_PWREx_GetVoltageRange>
 800a696:	6178      	str	r0, [r7, #20]
 800a698:	e019      	b.n	800a6ce <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a69a:	4b39      	ldr	r3, [pc, #228]	@ (800a780 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a69c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a6a0:	4a37      	ldr	r2, [pc, #220]	@ (800a780 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a6a2:	f043 0304 	orr.w	r3, r3, #4
 800a6a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a6aa:	4b35      	ldr	r3, [pc, #212]	@ (800a780 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a6ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a6b0:	f003 0304 	and.w	r3, r3, #4
 800a6b4:	60fb      	str	r3, [r7, #12]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a6b8:	f7fe fd3c 	bl	8009134 <HAL_PWREx_GetVoltageRange>
 800a6bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a6be:	4b30      	ldr	r3, [pc, #192]	@ (800a780 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a6c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a6c4:	4a2e      	ldr	r2, [pc, #184]	@ (800a780 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a6c6:	f023 0304 	bic.w	r3, r3, #4
 800a6ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a6d4:	d003      	beq.n	800a6de <RCC_SetFlashLatencyFromMSIRange+0x62>
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6dc:	d109      	bne.n	800a6f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6e4:	d202      	bcs.n	800a6ec <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800a6ea:	e033      	b.n	800a754 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800a6f0:	e030      	b.n	800a754 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6f8:	d208      	bcs.n	800a70c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a700:	d102      	bne.n	800a708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800a702:	2303      	movs	r3, #3
 800a704:	613b      	str	r3, [r7, #16]
 800a706:	e025      	b.n	800a754 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	e035      	b.n	800a778 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a712:	d90f      	bls.n	800a734 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d109      	bne.n	800a72e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a720:	d902      	bls.n	800a728 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800a722:	2300      	movs	r3, #0
 800a724:	613b      	str	r3, [r7, #16]
 800a726:	e015      	b.n	800a754 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800a728:	2301      	movs	r3, #1
 800a72a:	613b      	str	r3, [r7, #16]
 800a72c:	e012      	b.n	800a754 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800a72e:	2300      	movs	r3, #0
 800a730:	613b      	str	r3, [r7, #16]
 800a732:	e00f      	b.n	800a754 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a73a:	d109      	bne.n	800a750 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a742:	d102      	bne.n	800a74a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800a744:	2301      	movs	r3, #1
 800a746:	613b      	str	r3, [r7, #16]
 800a748:	e004      	b.n	800a754 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800a74a:	2302      	movs	r3, #2
 800a74c:	613b      	str	r3, [r7, #16]
 800a74e:	e001      	b.n	800a754 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800a750:	2301      	movs	r3, #1
 800a752:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a754:	4b0b      	ldr	r3, [pc, #44]	@ (800a784 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f023 020f 	bic.w	r2, r3, #15
 800a75c:	4909      	ldr	r1, [pc, #36]	@ (800a784 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	4313      	orrs	r3, r2
 800a762:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800a764:	4b07      	ldr	r3, [pc, #28]	@ (800a784 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f003 030f 	and.w	r3, r3, #15
 800a76c:	693a      	ldr	r2, [r7, #16]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d001      	beq.n	800a776 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	e000      	b.n	800a778 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3718      	adds	r7, #24
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	46020c00 	.word	0x46020c00
 800a784:	40022000 	.word	0x40022000

0800a788 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800a788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a78c:	b0c8      	sub	sp, #288	@ 0x120
 800a78e:	af00      	add	r7, sp, #0
 800a790:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a794:	2300      	movs	r3, #0
 800a796:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a79a:	2300      	movs	r3, #0
 800a79c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a7a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a8:	f002 0401 	and.w	r4, r2, #1
 800a7ac:	2500      	movs	r5, #0
 800a7ae:	ea54 0305 	orrs.w	r3, r4, r5
 800a7b2:	d00b      	beq.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800a7b4:	4bd5      	ldr	r3, [pc, #852]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a7b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a7ba:	f023 0103 	bic.w	r1, r3, #3
 800a7be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7c4:	4ad1      	ldr	r2, [pc, #836]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a7c6:	430b      	orrs	r3, r1
 800a7c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a7cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d4:	f002 0802 	and.w	r8, r2, #2
 800a7d8:	f04f 0900 	mov.w	r9, #0
 800a7dc:	ea58 0309 	orrs.w	r3, r8, r9
 800a7e0:	d00b      	beq.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800a7e2:	4bca      	ldr	r3, [pc, #808]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a7e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a7e8:	f023 010c 	bic.w	r1, r3, #12
 800a7ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7f2:	4ac6      	ldr	r2, [pc, #792]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a7f4:	430b      	orrs	r3, r1
 800a7f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a7fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a802:	f002 0a04 	and.w	sl, r2, #4
 800a806:	f04f 0b00 	mov.w	fp, #0
 800a80a:	ea5a 030b 	orrs.w	r3, sl, fp
 800a80e:	d00b      	beq.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800a810:	4bbe      	ldr	r3, [pc, #760]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a816:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a81a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a81e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a820:	4aba      	ldr	r2, [pc, #744]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a822:	430b      	orrs	r3, r1
 800a824:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a828:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a830:	f002 0308 	and.w	r3, r2, #8
 800a834:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a838:	2300      	movs	r3, #0
 800a83a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a83e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a842:	460b      	mov	r3, r1
 800a844:	4313      	orrs	r3, r2
 800a846:	d00b      	beq.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800a848:	4bb0      	ldr	r3, [pc, #704]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a84a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a84e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a852:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a858:	4aac      	ldr	r2, [pc, #688]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a85a:	430b      	orrs	r3, r1
 800a85c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a860:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a868:	f002 0310 	and.w	r3, r2, #16
 800a86c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a870:	2300      	movs	r3, #0
 800a872:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a876:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a87a:	460b      	mov	r3, r1
 800a87c:	4313      	orrs	r3, r2
 800a87e:	d00b      	beq.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800a880:	4ba2      	ldr	r3, [pc, #648]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a886:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a88a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a88e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a890:	4a9e      	ldr	r2, [pc, #632]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a892:	430b      	orrs	r3, r1
 800a894:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a8a4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a8ae:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	d00b      	beq.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800a8b8:	4b94      	ldr	r3, [pc, #592]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a8ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a8be:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a8c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8c8:	4a90      	ldr	r2, [pc, #576]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a8ca:	430b      	orrs	r3, r1
 800a8cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a8d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d8:	f002 0320 	and.w	r3, r2, #32
 800a8dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a8e6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	d00b      	beq.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800a8f0:	4b86      	ldr	r3, [pc, #536]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a8f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a8f6:	f023 0107 	bic.w	r1, r3, #7
 800a8fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a900:	4a82      	ldr	r2, [pc, #520]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a902:	430b      	orrs	r3, r1
 800a904:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a908:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a910:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a914:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a918:	2300      	movs	r3, #0
 800a91a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a91e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a922:	460b      	mov	r3, r1
 800a924:	4313      	orrs	r3, r2
 800a926:	d00b      	beq.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800a928:	4b78      	ldr	r3, [pc, #480]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a92a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a92e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800a932:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a938:	4a74      	ldr	r2, [pc, #464]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a93a:	430b      	orrs	r3, r1
 800a93c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a940:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a948:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a94c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a950:	2300      	movs	r3, #0
 800a952:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a956:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a95a:	460b      	mov	r3, r1
 800a95c:	4313      	orrs	r3, r2
 800a95e:	d00b      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800a960:	4b6a      	ldr	r3, [pc, #424]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a966:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a96a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a96e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a970:	4a66      	ldr	r2, [pc, #408]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a972:	430b      	orrs	r3, r1
 800a974:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a980:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800a984:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a988:	2300      	movs	r3, #0
 800a98a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a98e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a992:	460b      	mov	r3, r1
 800a994:	4313      	orrs	r3, r2
 800a996:	d00b      	beq.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800a998:	4b5c      	ldr	r3, [pc, #368]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a99a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a99e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a9a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9a8:	4a58      	ldr	r2, [pc, #352]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a9aa:	430b      	orrs	r3, r1
 800a9ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a9b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a9bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a9c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	d00b      	beq.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800a9d0:	4b4e      	ldr	r3, [pc, #312]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a9d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a9d6:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800a9da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a9e0:	4a4a      	ldr	r2, [pc, #296]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800a9e2:	430b      	orrs	r3, r1
 800a9e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800a9e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a9f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a9fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800aa02:	460b      	mov	r3, r1
 800aa04:	4313      	orrs	r3, r2
 800aa06:	d00b      	beq.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800aa08:	4b40      	ldr	r3, [pc, #256]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aa0e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800aa12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa18:	4a3c      	ldr	r2, [pc, #240]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa1a:	430b      	orrs	r3, r1
 800aa1c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800aa20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa28:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800aa2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aa30:	2300      	movs	r3, #0
 800aa32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800aa36:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	d00c      	beq.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800aa40:	4b32      	ldr	r3, [pc, #200]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aa46:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800aa4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa52:	4a2e      	ldr	r2, [pc, #184]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa54:	430b      	orrs	r3, r1
 800aa56:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800aa5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa62:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800aa66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aa70:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800aa74:	460b      	mov	r3, r1
 800aa76:	4313      	orrs	r3, r2
 800aa78:	d00c      	beq.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800aa7a:	4b24      	ldr	r3, [pc, #144]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aa80:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800aa84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa8c:	4a1f      	ldr	r2, [pc, #124]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aa8e:	430b      	orrs	r3, r1
 800aa90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800aa94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800aaa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aaaa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800aaae:	460b      	mov	r3, r1
 800aab0:	4313      	orrs	r3, r2
 800aab2:	d00c      	beq.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800aab4:	4b15      	ldr	r3, [pc, #84]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aaba:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800aabe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aac6:	4a11      	ldr	r2, [pc, #68]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aac8:	430b      	orrs	r3, r1
 800aaca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800aace:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800aada:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800aade:	2300      	movs	r3, #0
 800aae0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800aae4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800aae8:	460b      	mov	r3, r1
 800aaea:	4313      	orrs	r3, r2
 800aaec:	d010      	beq.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800aaee:	4b07      	ldr	r3, [pc, #28]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aaf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aaf4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800aaf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aafc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab00:	4a02      	ldr	r2, [pc, #8]	@ (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ab02:	430b      	orrs	r3, r1
 800ab04:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800ab08:	e002      	b.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800ab0a:	bf00      	nop
 800ab0c:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ab10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ab1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ab20:	2300      	movs	r3, #0
 800ab22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ab26:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	d04c      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800ab30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab38:	2b80      	cmp	r3, #128	@ 0x80
 800ab3a:	d02d      	beq.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800ab3c:	2b80      	cmp	r3, #128	@ 0x80
 800ab3e:	d827      	bhi.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800ab40:	2b60      	cmp	r3, #96	@ 0x60
 800ab42:	d02b      	beq.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800ab44:	2b60      	cmp	r3, #96	@ 0x60
 800ab46:	d823      	bhi.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800ab48:	2b40      	cmp	r3, #64	@ 0x40
 800ab4a:	d006      	beq.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800ab4c:	2b40      	cmp	r3, #64	@ 0x40
 800ab4e:	d81f      	bhi.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d009      	beq.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800ab54:	2b20      	cmp	r3, #32
 800ab56:	d011      	beq.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800ab58:	e01a      	b.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ab5a:	4bc0      	ldr	r3, [pc, #768]	@ (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ab5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab5e:	4abf      	ldr	r2, [pc, #764]	@ (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ab60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab64:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ab66:	e01a      	b.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ab68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab6c:	3308      	adds	r3, #8
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f002 fcd6 	bl	800d520 <RCCEx_PLL2_Config>
 800ab74:	4603      	mov	r3, r0
 800ab76:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ab7a:	e010      	b.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ab7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab80:	332c      	adds	r3, #44	@ 0x2c
 800ab82:	4618      	mov	r0, r3
 800ab84:	f002 fd64 	bl	800d650 <RCCEx_PLL3_Config>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ab8e:	e006      	b.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ab96:	e002      	b.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800ab98:	bf00      	nop
 800ab9a:	e000      	b.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800ab9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab9e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10d      	bne.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800aba6:	4bad      	ldr	r3, [pc, #692]	@ (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aba8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800abac:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800abb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800abb8:	4aa8      	ldr	r2, [pc, #672]	@ (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800abba:	430b      	orrs	r3, r1
 800abbc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800abc0:	e003      	b.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abc2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800abc6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800abca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800abd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800abda:	2300      	movs	r3, #0
 800abdc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800abe0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800abe4:	460b      	mov	r3, r1
 800abe6:	4313      	orrs	r3, r2
 800abe8:	d053      	beq.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800abea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800abf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abf6:	d033      	beq.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800abf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abfc:	d82c      	bhi.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800abfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac02:	d02f      	beq.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800ac04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac08:	d826      	bhi.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ac0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac0e:	d008      	beq.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800ac10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac14:	d820      	bhi.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00a      	beq.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800ac1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac1e:	d011      	beq.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ac20:	e01a      	b.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ac22:	4b8e      	ldr	r3, [pc, #568]	@ (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac26:	4a8d      	ldr	r2, [pc, #564]	@ (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac2c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ac2e:	e01a      	b.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ac30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac34:	3308      	adds	r3, #8
 800ac36:	4618      	mov	r0, r3
 800ac38:	f002 fc72 	bl	800d520 <RCCEx_PLL2_Config>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ac42:	e010      	b.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ac44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac48:	332c      	adds	r3, #44	@ 0x2c
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f002 fd00 	bl	800d650 <RCCEx_PLL3_Config>
 800ac50:	4603      	mov	r3, r0
 800ac52:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ac56:	e006      	b.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ac5e:	e002      	b.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800ac60:	bf00      	nop
 800ac62:	e000      	b.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800ac64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac66:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10d      	bne.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800ac6e:	4b7b      	ldr	r3, [pc, #492]	@ (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ac74:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800ac78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ac80:	4a76      	ldr	r2, [pc, #472]	@ (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ac82:	430b      	orrs	r3, r1
 800ac84:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ac88:	e003      	b.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac8a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ac8e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800ac92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ac9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aca2:	2300      	movs	r3, #0
 800aca4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800aca8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800acac:	460b      	mov	r3, r1
 800acae:	4313      	orrs	r3, r2
 800acb0:	d046      	beq.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800acb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800acba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800acbe:	d028      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800acc0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800acc4:	d821      	bhi.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800acc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800acca:	d022      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800accc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800acd0:	d81b      	bhi.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800acd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800acd6:	d01c      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800acd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800acdc:	d815      	bhi.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800acde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ace2:	d008      	beq.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800ace4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ace8:	d80f      	bhi.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800acea:	2b00      	cmp	r3, #0
 800acec:	d011      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800acee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acf2:	d00e      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800acf4:	e009      	b.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800acf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acfa:	3308      	adds	r3, #8
 800acfc:	4618      	mov	r0, r3
 800acfe:	f002 fc0f 	bl	800d520 <RCCEx_PLL2_Config>
 800ad02:	4603      	mov	r3, r0
 800ad04:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ad08:	e004      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ad10:	e000      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800ad12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad14:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d10d      	bne.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800ad1c:	4b4f      	ldr	r3, [pc, #316]	@ (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ad22:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ad26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ad2e:	4a4b      	ldr	r2, [pc, #300]	@ (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad30:	430b      	orrs	r3, r1
 800ad32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800ad36:	e003      	b.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad38:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ad3c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800ad40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad48:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ad4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ad50:	2300      	movs	r3, #0
 800ad52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ad56:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	d03f      	beq.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800ad60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad68:	2b04      	cmp	r3, #4
 800ad6a:	d81e      	bhi.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0x622>
 800ad6c:	a201      	add	r2, pc, #4	@ (adr r2, 800ad74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800ad6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad72:	bf00      	nop
 800ad74:	0800adb3 	.word	0x0800adb3
 800ad78:	0800ad89 	.word	0x0800ad89
 800ad7c:	0800ad97 	.word	0x0800ad97
 800ad80:	0800adb3 	.word	0x0800adb3
 800ad84:	0800adb3 	.word	0x0800adb3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ad88:	4b34      	ldr	r3, [pc, #208]	@ (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad8c:	4a33      	ldr	r2, [pc, #204]	@ (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad92:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800ad94:	e00e      	b.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ad96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad9a:	332c      	adds	r3, #44	@ 0x2c
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f002 fc57 	bl	800d650 <RCCEx_PLL3_Config>
 800ada2:	4603      	mov	r3, r0
 800ada4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ada8:	e004      	b.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800adb0:	e000      	b.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800adb2:	bf00      	nop
    }
    if (ret == HAL_OK)
 800adb4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10d      	bne.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800adbc:	4b27      	ldr	r3, [pc, #156]	@ (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800adbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800adc2:	f023 0107 	bic.w	r1, r3, #7
 800adc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800adce:	4a23      	ldr	r2, [pc, #140]	@ (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800add0:	430b      	orrs	r3, r1
 800add2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800add6:	e003      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800addc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800ade0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ade4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800adec:	67bb      	str	r3, [r7, #120]	@ 0x78
 800adee:	2300      	movs	r3, #0
 800adf0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800adf2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800adf6:	460b      	mov	r3, r1
 800adf8:	4313      	orrs	r3, r2
 800adfa:	d04c      	beq.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800adfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ae04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ae08:	d02a      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800ae0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ae0e:	d821      	bhi.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800ae10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ae14:	d026      	beq.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800ae16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ae1a:	d81b      	bhi.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800ae1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae20:	d00e      	beq.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800ae22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae26:	d815      	bhi.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d01d      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800ae2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae30:	d110      	bne.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ae32:	4b0a      	ldr	r3, [pc, #40]	@ (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae36:	4a09      	ldr	r2, [pc, #36]	@ (800ae5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae3c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800ae3e:	e014      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ae40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae44:	332c      	adds	r3, #44	@ 0x2c
 800ae46:	4618      	mov	r0, r3
 800ae48:	f002 fc02 	bl	800d650 <RCCEx_PLL3_Config>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ae52:	e00a      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800ae54:	2301      	movs	r3, #1
 800ae56:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ae5a:	e006      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800ae5c:	46020c00 	.word	0x46020c00
        break;
 800ae60:	bf00      	nop
 800ae62:	e002      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800ae64:	bf00      	nop
 800ae66:	e000      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800ae68:	bf00      	nop
    }
    if (ret == HAL_OK)
 800ae6a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d10d      	bne.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800ae72:	4baf      	ldr	r3, [pc, #700]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ae74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ae78:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800ae7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ae84:	4aaa      	ldr	r2, [pc, #680]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ae86:	430b      	orrs	r3, r1
 800ae88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800ae8c:	e003      	b.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae8e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ae92:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800aea2:	673b      	str	r3, [r7, #112]	@ 0x70
 800aea4:	2300      	movs	r3, #0
 800aea6:	677b      	str	r3, [r7, #116]	@ 0x74
 800aea8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800aeac:	460b      	mov	r3, r1
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	f000 80b5 	beq.w	800b01e <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aeba:	4b9d      	ldr	r3, [pc, #628]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800aebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aec0:	f003 0304 	and.w	r3, r3, #4
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d113      	bne.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aec8:	4b99      	ldr	r3, [pc, #612]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800aeca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aece:	4a98      	ldr	r2, [pc, #608]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800aed0:	f043 0304 	orr.w	r3, r3, #4
 800aed4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800aed8:	4b95      	ldr	r3, [pc, #596]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800aeda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aede:	f003 0304 	and.w	r3, r3, #4
 800aee2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800aee6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800aeea:	2301      	movs	r3, #1
 800aeec:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800aef0:	4b90      	ldr	r3, [pc, #576]	@ (800b134 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800aef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aef4:	4a8f      	ldr	r2, [pc, #572]	@ (800b134 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800aef6:	f043 0301 	orr.w	r3, r3, #1
 800aefa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aefc:	f7f7 fcca 	bl	8002894 <HAL_GetTick>
 800af00:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800af04:	e00b      	b.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af06:	f7f7 fcc5 	bl	8002894 <HAL_GetTick>
 800af0a:	4602      	mov	r2, r0
 800af0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	2b02      	cmp	r3, #2
 800af14:	d903      	bls.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800af16:	2303      	movs	r3, #3
 800af18:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800af1c:	e005      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800af1e:	4b85      	ldr	r3, [pc, #532]	@ (800b134 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800af20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af22:	f003 0301 	and.w	r3, r3, #1
 800af26:	2b00      	cmp	r3, #0
 800af28:	d0ed      	beq.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800af2a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d165      	bne.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800af32:	4b7f      	ldr	r3, [pc, #508]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800af34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af3c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800af40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800af44:	2b00      	cmp	r3, #0
 800af46:	d023      	beq.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800af48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af4c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800af50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800af54:	4293      	cmp	r3, r2
 800af56:	d01b      	beq.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800af58:	4b75      	ldr	r3, [pc, #468]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800af5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af62:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800af66:	4b72      	ldr	r3, [pc, #456]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800af68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af6c:	4a70      	ldr	r2, [pc, #448]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800af6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800af76:	4b6e      	ldr	r3, [pc, #440]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800af78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af7c:	4a6c      	ldr	r2, [pc, #432]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800af7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800af86:	4a6a      	ldr	r2, [pc, #424]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800af88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800af8c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800af90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800af94:	f003 0301 	and.w	r3, r3, #1
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d019      	beq.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af9c:	f7f7 fc7a 	bl	8002894 <HAL_GetTick>
 800afa0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800afa4:	e00d      	b.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afa6:	f7f7 fc75 	bl	8002894 <HAL_GetTick>
 800afaa:	4602      	mov	r2, r0
 800afac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afb0:	1ad2      	subs	r2, r2, r3
 800afb2:	f241 3388 	movw	r3, #5000	@ 0x1388
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d903      	bls.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800afba:	2303      	movs	r3, #3
 800afbc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800afc0:	e006      	b.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800afc2:	4b5b      	ldr	r3, [pc, #364]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800afc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800afc8:	f003 0302 	and.w	r3, r3, #2
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d0ea      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800afd0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d10d      	bne.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800afd8:	4b55      	ldr	r3, [pc, #340]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800afda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800afde:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800afe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afe6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800afea:	4a51      	ldr	r2, [pc, #324]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800afec:	430b      	orrs	r3, r1
 800afee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800aff2:	e008      	b.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aff4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800aff8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800affc:	e003      	b.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800affe:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b002:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b006:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d107      	bne.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b00e:	4b48      	ldr	r3, [pc, #288]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b010:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b014:	4a46      	ldr	r2, [pc, #280]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b016:	f023 0304 	bic.w	r3, r3, #4
 800b01a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800b01e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b026:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b02a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b02c:	2300      	movs	r3, #0
 800b02e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b030:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b034:	460b      	mov	r3, r1
 800b036:	4313      	orrs	r3, r2
 800b038:	d042      	beq.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800b03a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b03e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b042:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b046:	d022      	beq.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x906>
 800b048:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b04c:	d81b      	bhi.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b04e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b052:	d011      	beq.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800b054:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b058:	d815      	bhi.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d019      	beq.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800b05e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b062:	d110      	bne.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b064:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b068:	3308      	adds	r3, #8
 800b06a:	4618      	mov	r0, r3
 800b06c:	f002 fa58 	bl	800d520 <RCCEx_PLL2_Config>
 800b070:	4603      	mov	r3, r0
 800b072:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b076:	e00d      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b078:	4b2d      	ldr	r3, [pc, #180]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b07a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b07c:	4a2c      	ldr	r2, [pc, #176]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b07e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b082:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b084:	e006      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b086:	2301      	movs	r3, #1
 800b088:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b08c:	e002      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b08e:	bf00      	nop
 800b090:	e000      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b092:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b094:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10d      	bne.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800b09c:	4b24      	ldr	r3, [pc, #144]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b09e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b0a2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b0a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b0ae:	4a20      	ldr	r2, [pc, #128]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b0b0:	430b      	orrs	r3, r1
 800b0b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b0b6:	e003      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0b8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b0bc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b0c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b0cc:	663b      	str	r3, [r7, #96]	@ 0x60
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	667b      	str	r3, [r7, #100]	@ 0x64
 800b0d2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	d031      	beq.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800b0dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b0e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0e8:	d00b      	beq.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800b0ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0ee:	d804      	bhi.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x972>
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d008      	beq.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800b0f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0f8:	d007      	beq.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b100:	e004      	b.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b102:	bf00      	nop
 800b104:	e002      	b.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b106:	bf00      	nop
 800b108:	e000      	b.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b10a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b10c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b110:	2b00      	cmp	r3, #0
 800b112:	d111      	bne.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b114:	4b06      	ldr	r3, [pc, #24]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b116:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b11a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b11e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b122:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b126:	4a02      	ldr	r2, [pc, #8]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b128:	430b      	orrs	r3, r1
 800b12a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b12e:	e007      	b.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800b130:	46020c00 	.word	0x46020c00
 800b134:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b138:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b13c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800b140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b148:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b14c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b14e:	2300      	movs	r3, #0
 800b150:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b152:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b156:	460b      	mov	r3, r1
 800b158:	4313      	orrs	r3, r2
 800b15a:	d00c      	beq.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800b15c:	4bb2      	ldr	r3, [pc, #712]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b15e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b162:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800b166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b16a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b16e:	4aae      	ldr	r2, [pc, #696]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b170:	430b      	orrs	r3, r1
 800b172:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800b176:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b182:	653b      	str	r3, [r7, #80]	@ 0x50
 800b184:	2300      	movs	r3, #0
 800b186:	657b      	str	r3, [r7, #84]	@ 0x54
 800b188:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b18c:	460b      	mov	r3, r1
 800b18e:	4313      	orrs	r3, r2
 800b190:	d019      	beq.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800b192:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b196:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b19a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b19e:	d105      	bne.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b1a0:	4ba1      	ldr	r3, [pc, #644]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1a4:	4aa0      	ldr	r2, [pc, #640]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b1a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b1aa:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800b1ac:	4b9e      	ldr	r3, [pc, #632]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b1ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b1b2:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b1b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b1be:	4a9a      	ldr	r2, [pc, #616]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b1c0:	430b      	orrs	r3, r1
 800b1c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b1c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ce:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b1d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b1dc:	460b      	mov	r3, r1
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	d00c      	beq.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b1e2:	4b91      	ldr	r3, [pc, #580]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b1e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b1e8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b1ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1f0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b1f4:	4a8c      	ldr	r2, [pc, #560]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b1f6:	430b      	orrs	r3, r1
 800b1f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800b1fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b204:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b208:	643b      	str	r3, [r7, #64]	@ 0x40
 800b20a:	2300      	movs	r3, #0
 800b20c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b20e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b212:	460b      	mov	r3, r1
 800b214:	4313      	orrs	r3, r2
 800b216:	d00c      	beq.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800b218:	4b83      	ldr	r3, [pc, #524]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b21a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b21e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b222:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b226:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b22a:	4a7f      	ldr	r2, [pc, #508]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b22c:	430b      	orrs	r3, r1
 800b22e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800b232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b23e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b240:	2300      	movs	r3, #0
 800b242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b244:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b248:	460b      	mov	r3, r1
 800b24a:	4313      	orrs	r3, r2
 800b24c:	d00c      	beq.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800b24e:	4b76      	ldr	r3, [pc, #472]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b254:	f023 0118 	bic.w	r1, r3, #24
 800b258:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b25c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b260:	4a71      	ldr	r2, [pc, #452]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b262:	430b      	orrs	r3, r1
 800b264:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b268:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b270:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800b274:	633b      	str	r3, [r7, #48]	@ 0x30
 800b276:	2300      	movs	r3, #0
 800b278:	637b      	str	r3, [r7, #52]	@ 0x34
 800b27a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b27e:	460b      	mov	r3, r1
 800b280:	4313      	orrs	r3, r2
 800b282:	d032      	beq.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800b284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b288:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b28c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b290:	d105      	bne.n	800b29e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b292:	4b65      	ldr	r3, [pc, #404]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b296:	4a64      	ldr	r2, [pc, #400]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b29c:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800b29e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b2a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b2aa:	d108      	bne.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b2ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2b0:	3308      	adds	r3, #8
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f002 f934 	bl	800d520 <RCCEx_PLL2_Config>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800b2be:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d10d      	bne.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800b2c6:	4b58      	ldr	r3, [pc, #352]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b2c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b2cc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b2d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b2d8:	4a53      	ldr	r2, [pc, #332]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b2da:	430b      	orrs	r3, r1
 800b2dc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b2e0:	e003      	b.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2e2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b2e6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800b2ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b2f6:	f003 0301 	and.w	r3, r3, #1
 800b2fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b2fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b300:	460b      	mov	r3, r1
 800b302:	4313      	orrs	r3, r2
 800b304:	d04a      	beq.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800b306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b30a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b30e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b312:	d01e      	beq.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800b314:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b318:	d825      	bhi.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800b31a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b31e:	d00e      	beq.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800b320:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b324:	d81f      	bhi.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800b326:	2b00      	cmp	r3, #0
 800b328:	d021      	beq.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800b32a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b32e:	d11a      	bne.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b330:	4b3d      	ldr	r3, [pc, #244]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b334:	4a3c      	ldr	r2, [pc, #240]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b33a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b33c:	e018      	b.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b33e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b342:	3308      	adds	r3, #8
 800b344:	4618      	mov	r0, r3
 800b346:	f002 f8eb 	bl	800d520 <RCCEx_PLL2_Config>
 800b34a:	4603      	mov	r3, r0
 800b34c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b350:	e00e      	b.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b352:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b356:	332c      	adds	r3, #44	@ 0x2c
 800b358:	4618      	mov	r0, r3
 800b35a:	f002 f979 	bl	800d650 <RCCEx_PLL3_Config>
 800b35e:	4603      	mov	r3, r0
 800b360:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800b364:	e004      	b.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b36c:	e000      	b.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800b36e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b370:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b374:	2b00      	cmp	r3, #0
 800b376:	d10d      	bne.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800b378:	4b2b      	ldr	r3, [pc, #172]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b37a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b37e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b386:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b38a:	4927      	ldr	r1, [pc, #156]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b38c:	4313      	orrs	r3, r2
 800b38e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b392:	e003      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b394:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b398:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800b39c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800b3a8:	623b      	str	r3, [r7, #32]
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3ae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	d03d      	beq.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800b3b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b3c4:	d00e      	beq.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800b3c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b3ca:	d815      	bhi.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d017      	beq.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b3d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b3d4:	d110      	bne.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3d6:	4b14      	ldr	r3, [pc, #80]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b3d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3da:	4a13      	ldr	r2, [pc, #76]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b3dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b3e0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800b3e2:	e00e      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b3e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3e8:	3308      	adds	r3, #8
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f002 f898 	bl	800d520 <RCCEx_PLL2_Config>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800b3f6:	e004      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b3fe:	e000      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b400:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b402:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b406:	2b00      	cmp	r3, #0
 800b408:	d110      	bne.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800b40a:	4b07      	ldr	r3, [pc, #28]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b40c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b410:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b414:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b41c:	4902      	ldr	r1, [pc, #8]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b41e:	4313      	orrs	r3, r2
 800b420:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800b424:	e006      	b.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800b426:	bf00      	nop
 800b428:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b42c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b430:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800b434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b440:	61bb      	str	r3, [r7, #24]
 800b442:	2300      	movs	r3, #0
 800b444:	61fb      	str	r3, [r7, #28]
 800b446:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b44a:	460b      	mov	r3, r1
 800b44c:	4313      	orrs	r3, r2
 800b44e:	d00c      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800b450:	4b68      	ldr	r3, [pc, #416]	@ (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b452:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b456:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800b45a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b45e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b462:	4964      	ldr	r1, [pc, #400]	@ (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b464:	4313      	orrs	r3, r2
 800b466:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b46a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b472:	2100      	movs	r1, #0
 800b474:	6139      	str	r1, [r7, #16]
 800b476:	f003 0302 	and.w	r3, r3, #2
 800b47a:	617b      	str	r3, [r7, #20]
 800b47c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b480:	460b      	mov	r3, r1
 800b482:	4313      	orrs	r3, r2
 800b484:	d036      	beq.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800b486:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b48a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00c      	beq.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800b492:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b496:	d113      	bne.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b498:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b49c:	3308      	adds	r3, #8
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f002 f83e 	bl	800d520 <RCCEx_PLL2_Config>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800b4aa:	e00d      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b4ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4b0:	332c      	adds	r3, #44	@ 0x2c
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f002 f8cc 	bl	800d650 <RCCEx_PLL3_Config>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800b4be:	e003      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b4c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4c8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d10d      	bne.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800b4d0:	4b48      	ldr	r3, [pc, #288]	@ (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b4d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b4d6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800b4da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b4e2:	4944      	ldr	r1, [pc, #272]	@ (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b4ea:	e003      	b.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ec:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b4f0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800b4f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	60b9      	str	r1, [r7, #8]
 800b500:	f003 0304 	and.w	r3, r3, #4
 800b504:	60fb      	str	r3, [r7, #12]
 800b506:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b50a:	460b      	mov	r3, r1
 800b50c:	4313      	orrs	r3, r2
 800b50e:	d024      	beq.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800b510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b514:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d108      	bne.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b51c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b520:	332c      	adds	r3, #44	@ 0x2c
 800b522:	4618      	mov	r0, r3
 800b524:	f002 f894 	bl	800d650 <RCCEx_PLL3_Config>
 800b528:	4603      	mov	r3, r0
 800b52a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800b52e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b532:	2b00      	cmp	r3, #0
 800b534:	d10d      	bne.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800b536:	4b2f      	ldr	r3, [pc, #188]	@ (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b538:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b53c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800b540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b544:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b548:	492a      	ldr	r1, [pc, #168]	@ (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b54a:	4313      	orrs	r3, r2
 800b54c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b550:	e003      	b.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b552:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b556:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800b55a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b562:	2100      	movs	r1, #0
 800b564:	6039      	str	r1, [r7, #0]
 800b566:	f003 0308 	and.w	r3, r3, #8
 800b56a:	607b      	str	r3, [r7, #4]
 800b56c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b570:	460b      	mov	r3, r1
 800b572:	4313      	orrs	r3, r2
 800b574:	d036      	beq.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800b576:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b57a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b57e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b582:	d00d      	beq.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800b584:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b588:	d811      	bhi.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800b58a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b58e:	d012      	beq.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800b590:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b594:	d80b      	bhi.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00d      	beq.n	800b5b6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800b59a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b59e:	d106      	bne.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b5a0:	4b14      	ldr	r3, [pc, #80]	@ (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b5a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5a4:	4a13      	ldr	r2, [pc, #76]	@ (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b5a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b5aa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800b5ac:	e004      	b.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b5b4:	e000      	b.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800b5b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5b8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10d      	bne.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800b5c0:	4b0c      	ldr	r3, [pc, #48]	@ (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b5c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b5c6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800b5ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b5d2:	4908      	ldr	r1, [pc, #32]	@ (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800b5da:	e003      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5dc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b5e0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800b5e4:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b5f4:	46020c00 	.word	0x46020c00

0800b5f8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b089      	sub	sp, #36	@ 0x24
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800b600:	4ba6      	ldr	r3, [pc, #664]	@ (800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b608:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800b60a:	4ba4      	ldr	r3, [pc, #656]	@ (800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b60c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b60e:	f003 0303 	and.w	r3, r3, #3
 800b612:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800b614:	4ba1      	ldr	r3, [pc, #644]	@ (800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b618:	0a1b      	lsrs	r3, r3, #8
 800b61a:	f003 030f 	and.w	r3, r3, #15
 800b61e:	3301      	adds	r3, #1
 800b620:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800b622:	4b9e      	ldr	r3, [pc, #632]	@ (800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b626:	091b      	lsrs	r3, r3, #4
 800b628:	f003 0301 	and.w	r3, r3, #1
 800b62c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800b62e:	4b9b      	ldr	r3, [pc, #620]	@ (800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b632:	08db      	lsrs	r3, r3, #3
 800b634:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	fb02 f303 	mul.w	r3, r2, r3
 800b63e:	ee07 3a90 	vmov	s15, r3
 800b642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b646:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	2b03      	cmp	r3, #3
 800b64e:	d062      	beq.n	800b716 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	2b03      	cmp	r3, #3
 800b654:	f200 8081 	bhi.w	800b75a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d024      	beq.n	800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	2b02      	cmp	r3, #2
 800b662:	d17a      	bne.n	800b75a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	ee07 3a90 	vmov	s15, r3
 800b66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b66e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800b8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800b672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b676:	4b89      	ldr	r3, [pc, #548]	@ (800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b67e:	ee07 3a90 	vmov	s15, r3
 800b682:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b686:	ed97 6a02 	vldr	s12, [r7, #8]
 800b68a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800b8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b68e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b692:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b696:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b69a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b69e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b6a6:	e08f      	b.n	800b7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b6a8:	4b7c      	ldr	r3, [pc, #496]	@ (800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d005      	beq.n	800b6c0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800b6b4:	4b79      	ldr	r3, [pc, #484]	@ (800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	0f1b      	lsrs	r3, r3, #28
 800b6ba:	f003 030f 	and.w	r3, r3, #15
 800b6be:	e006      	b.n	800b6ce <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800b6c0:	4b76      	ldr	r3, [pc, #472]	@ (800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b6c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b6c6:	041b      	lsls	r3, r3, #16
 800b6c8:	0f1b      	lsrs	r3, r3, #28
 800b6ca:	f003 030f 	and.w	r3, r3, #15
 800b6ce:	4a76      	ldr	r2, [pc, #472]	@ (800b8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800b6d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6d4:	ee07 3a90 	vmov	s15, r3
 800b6d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	ee07 3a90 	vmov	s15, r3
 800b6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	ee07 3a90 	vmov	s15, r3
 800b6f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6f4:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6f8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800b8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b6fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b700:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b704:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b708:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b70c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b710:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b714:	e058      	b.n	800b7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	ee07 3a90 	vmov	s15, r3
 800b71c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b720:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800b724:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b728:	4b5c      	ldr	r3, [pc, #368]	@ (800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b72a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b72c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b730:	ee07 3a90 	vmov	s15, r3
 800b734:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b738:	ed97 6a02 	vldr	s12, [r7, #8]
 800b73c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800b8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b740:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b744:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800b748:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b74c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800b750:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b754:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b758:	e036      	b.n	800b7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b75a:	4b50      	ldr	r3, [pc, #320]	@ (800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b762:	2b00      	cmp	r3, #0
 800b764:	d005      	beq.n	800b772 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800b766:	4b4d      	ldr	r3, [pc, #308]	@ (800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	0f1b      	lsrs	r3, r3, #28
 800b76c:	f003 030f 	and.w	r3, r3, #15
 800b770:	e006      	b.n	800b780 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800b772:	4b4a      	ldr	r3, [pc, #296]	@ (800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b778:	041b      	lsls	r3, r3, #16
 800b77a:	0f1b      	lsrs	r3, r3, #28
 800b77c:	f003 030f 	and.w	r3, r3, #15
 800b780:	4a49      	ldr	r2, [pc, #292]	@ (800b8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800b782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b786:	ee07 3a90 	vmov	s15, r3
 800b78a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	ee07 3a90 	vmov	s15, r3
 800b794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	ee07 3a90 	vmov	s15, r3
 800b7a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7aa:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800b8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800b7ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800b7be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7c6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800b7c8:	4b34      	ldr	r3, [pc, #208]	@ (800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b7ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d017      	beq.n	800b804 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b7d4:	4b31      	ldr	r3, [pc, #196]	@ (800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b7d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7d8:	0a5b      	lsrs	r3, r3, #9
 800b7da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7de:	ee07 3a90 	vmov	s15, r3
 800b7e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800b7e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b7ea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b7ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7fa:	ee17 2a90 	vmov	r2, s15
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	601a      	str	r2, [r3, #0]
 800b802:	e002      	b.n	800b80a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800b80a:	4b24      	ldr	r3, [pc, #144]	@ (800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b80c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b80e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b812:	2b00      	cmp	r3, #0
 800b814:	d017      	beq.n	800b846 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b816:	4b21      	ldr	r3, [pc, #132]	@ (800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b81a:	0c1b      	lsrs	r3, r3, #16
 800b81c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b820:	ee07 3a90 	vmov	s15, r3
 800b824:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800b828:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b82c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b830:	edd7 6a07 	vldr	s13, [r7, #28]
 800b834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b83c:	ee17 2a90 	vmov	r2, s15
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	605a      	str	r2, [r3, #4]
 800b844:	e002      	b.n	800b84c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2200      	movs	r2, #0
 800b84a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800b84c:	4b13      	ldr	r3, [pc, #76]	@ (800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b84e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b850:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b854:	2b00      	cmp	r3, #0
 800b856:	d017      	beq.n	800b888 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b858:	4b10      	ldr	r3, [pc, #64]	@ (800b89c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800b85a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b85c:	0e1b      	lsrs	r3, r3, #24
 800b85e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b862:	ee07 3a90 	vmov	s15, r3
 800b866:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800b86a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b86e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800b872:	edd7 6a07 	vldr	s13, [r7, #28]
 800b876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b87a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b87e:	ee17 2a90 	vmov	r2, s15
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b886:	e002      	b.n	800b88e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	609a      	str	r2, [r3, #8]
}
 800b88e:	bf00      	nop
 800b890:	3724      	adds	r7, #36	@ 0x24
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr
 800b89a:	bf00      	nop
 800b89c:	46020c00 	.word	0x46020c00
 800b8a0:	4b742400 	.word	0x4b742400
 800b8a4:	46000000 	.word	0x46000000
 800b8a8:	0801077c 	.word	0x0801077c

0800b8ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b089      	sub	sp, #36	@ 0x24
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800b8b4:	4ba6      	ldr	r3, [pc, #664]	@ (800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b8b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8bc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800b8be:	4ba4      	ldr	r3, [pc, #656]	@ (800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b8c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8c2:	f003 0303 	and.w	r3, r3, #3
 800b8c6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800b8c8:	4ba1      	ldr	r3, [pc, #644]	@ (800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8cc:	0a1b      	lsrs	r3, r3, #8
 800b8ce:	f003 030f 	and.w	r3, r3, #15
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800b8d6:	4b9e      	ldr	r3, [pc, #632]	@ (800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b8d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8da:	091b      	lsrs	r3, r3, #4
 800b8dc:	f003 0301 	and.w	r3, r3, #1
 800b8e0:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800b8e2:	4b9b      	ldr	r3, [pc, #620]	@ (800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b8e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8e6:	08db      	lsrs	r3, r3, #3
 800b8e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8ec:	68fa      	ldr	r2, [r7, #12]
 800b8ee:	fb02 f303 	mul.w	r3, r2, r3
 800b8f2:	ee07 3a90 	vmov	s15, r3
 800b8f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8fa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	2b03      	cmp	r3, #3
 800b902:	d062      	beq.n	800b9ca <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	2b03      	cmp	r3, #3
 800b908:	f200 8081 	bhi.w	800ba0e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d024      	beq.n	800b95c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	2b02      	cmp	r3, #2
 800b916:	d17a      	bne.n	800ba0e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	ee07 3a90 	vmov	s15, r3
 800b91e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b922:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800bb54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800b926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b92a:	4b89      	ldr	r3, [pc, #548]	@ (800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b92c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b92e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b932:	ee07 3a90 	vmov	s15, r3
 800b936:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800b93a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b93e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800bb58 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800b942:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b946:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800b94a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b94e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b952:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b956:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b95a:	e08f      	b.n	800ba7c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800b95c:	4b7c      	ldr	r3, [pc, #496]	@ (800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b964:	2b00      	cmp	r3, #0
 800b966:	d005      	beq.n	800b974 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800b968:	4b79      	ldr	r3, [pc, #484]	@ (800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	0f1b      	lsrs	r3, r3, #28
 800b96e:	f003 030f 	and.w	r3, r3, #15
 800b972:	e006      	b.n	800b982 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800b974:	4b76      	ldr	r3, [pc, #472]	@ (800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b976:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b97a:	041b      	lsls	r3, r3, #16
 800b97c:	0f1b      	lsrs	r3, r3, #28
 800b97e:	f003 030f 	and.w	r3, r3, #15
 800b982:	4a76      	ldr	r2, [pc, #472]	@ (800bb5c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800b984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b988:	ee07 3a90 	vmov	s15, r3
 800b98c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	ee07 3a90 	vmov	s15, r3
 800b996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b99a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	ee07 3a90 	vmov	s15, r3
 800b9a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9a8:	ed97 6a02 	vldr	s12, [r7, #8]
 800b9ac:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800bb58 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800b9b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800b9c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b9c8:	e058      	b.n	800ba7c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	ee07 3a90 	vmov	s15, r3
 800b9d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9d4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bb54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800b9d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9dc:	4b5c      	ldr	r3, [pc, #368]	@ (800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800b9de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9e4:	ee07 3a90 	vmov	s15, r3
 800b9e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800b9ec:	ed97 6a02 	vldr	s12, [r7, #8]
 800b9f0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bb58 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800b9f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800b9f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800b9fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba00:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ba04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba0c:	e036      	b.n	800ba7c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ba0e:	4b50      	ldr	r3, [pc, #320]	@ (800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d005      	beq.n	800ba26 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800ba1a:	4b4d      	ldr	r3, [pc, #308]	@ (800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	0f1b      	lsrs	r3, r3, #28
 800ba20:	f003 030f 	and.w	r3, r3, #15
 800ba24:	e006      	b.n	800ba34 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800ba26:	4b4a      	ldr	r3, [pc, #296]	@ (800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ba28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ba2c:	041b      	lsls	r3, r3, #16
 800ba2e:	0f1b      	lsrs	r3, r3, #28
 800ba30:	f003 030f 	and.w	r3, r3, #15
 800ba34:	4a49      	ldr	r2, [pc, #292]	@ (800bb5c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800ba36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba3a:	ee07 3a90 	vmov	s15, r3
 800ba3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	ee07 3a90 	vmov	s15, r3
 800ba48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba50:	69bb      	ldr	r3, [r7, #24]
 800ba52:	ee07 3a90 	vmov	s15, r3
 800ba56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba5a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba5e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800bb58 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ba62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ba72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba7a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800ba7c:	4b34      	ldr	r3, [pc, #208]	@ (800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ba7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d017      	beq.n	800bab8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ba88:	4b31      	ldr	r3, [pc, #196]	@ (800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ba8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba8c:	0a5b      	lsrs	r3, r3, #9
 800ba8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba92:	ee07 3a90 	vmov	s15, r3
 800ba96:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800ba9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba9e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800baa2:	edd7 6a07 	vldr	s13, [r7, #28]
 800baa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baae:	ee17 2a90 	vmov	r2, s15
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	601a      	str	r2, [r3, #0]
 800bab6:	e002      	b.n	800babe <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2200      	movs	r2, #0
 800babc:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800babe:	4b24      	ldr	r3, [pc, #144]	@ (800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d017      	beq.n	800bafa <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800baca:	4b21      	ldr	r3, [pc, #132]	@ (800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bacc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bace:	0c1b      	lsrs	r3, r3, #16
 800bad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bad4:	ee07 3a90 	vmov	s15, r3
 800bad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800badc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bae0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bae4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baf0:	ee17 2a90 	vmov	r2, s15
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	605a      	str	r2, [r3, #4]
 800baf8:	e002      	b.n	800bb00 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2200      	movs	r2, #0
 800bafe:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800bb00:	4b13      	ldr	r3, [pc, #76]	@ (800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bb02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d017      	beq.n	800bb3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bb0c:	4b10      	ldr	r3, [pc, #64]	@ (800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bb0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb10:	0e1b      	lsrs	r3, r3, #24
 800bb12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb16:	ee07 3a90 	vmov	s15, r3
 800bb1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800bb1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb22:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800bb26:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb32:	ee17 2a90 	vmov	r2, s15
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bb3a:	e002      	b.n	800bb42 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	609a      	str	r2, [r3, #8]
}
 800bb42:	bf00      	nop
 800bb44:	3724      	adds	r7, #36	@ 0x24
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr
 800bb4e:	bf00      	nop
 800bb50:	46020c00 	.word	0x46020c00
 800bb54:	4b742400 	.word	0x4b742400
 800bb58:	46000000 	.word	0x46000000
 800bb5c:	0801077c 	.word	0x0801077c

0800bb60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b089      	sub	sp, #36	@ 0x24
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800bb68:	4ba6      	ldr	r3, [pc, #664]	@ (800be04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bb6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb70:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800bb72:	4ba4      	ldr	r3, [pc, #656]	@ (800be04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bb74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb76:	f003 0303 	and.w	r3, r3, #3
 800bb7a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800bb7c:	4ba1      	ldr	r3, [pc, #644]	@ (800be04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bb7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb80:	0a1b      	lsrs	r3, r3, #8
 800bb82:	f003 030f 	and.w	r3, r3, #15
 800bb86:	3301      	adds	r3, #1
 800bb88:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800bb8a:	4b9e      	ldr	r3, [pc, #632]	@ (800be04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bb8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb8e:	091b      	lsrs	r3, r3, #4
 800bb90:	f003 0301 	and.w	r3, r3, #1
 800bb94:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800bb96:	4b9b      	ldr	r3, [pc, #620]	@ (800be04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bb98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb9a:	08db      	lsrs	r3, r3, #3
 800bb9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bba0:	68fa      	ldr	r2, [r7, #12]
 800bba2:	fb02 f303 	mul.w	r3, r2, r3
 800bba6:	ee07 3a90 	vmov	s15, r3
 800bbaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbae:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	2b03      	cmp	r3, #3
 800bbb6:	d062      	beq.n	800bc7e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	2b03      	cmp	r3, #3
 800bbbc:	f200 8081 	bhi.w	800bcc2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d024      	beq.n	800bc10 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	d17a      	bne.n	800bcc2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	ee07 3a90 	vmov	s15, r3
 800bbd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbd6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800be08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800bbda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbde:	4b89      	ldr	r3, [pc, #548]	@ (800be04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bbe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbe6:	ee07 3a90 	vmov	s15, r3
 800bbea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bbee:	ed97 6a02 	vldr	s12, [r7, #8]
 800bbf2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800be0c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800bbf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bbfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bbfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc02:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bc06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc0a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800bc0e:	e08f      	b.n	800bd30 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bc10:	4b7c      	ldr	r3, [pc, #496]	@ (800be04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d005      	beq.n	800bc28 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800bc1c:	4b79      	ldr	r3, [pc, #484]	@ (800be04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bc1e:	689b      	ldr	r3, [r3, #8]
 800bc20:	0f1b      	lsrs	r3, r3, #28
 800bc22:	f003 030f 	and.w	r3, r3, #15
 800bc26:	e006      	b.n	800bc36 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800bc28:	4b76      	ldr	r3, [pc, #472]	@ (800be04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bc2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bc2e:	041b      	lsls	r3, r3, #16
 800bc30:	0f1b      	lsrs	r3, r3, #28
 800bc32:	f003 030f 	and.w	r3, r3, #15
 800bc36:	4a76      	ldr	r2, [pc, #472]	@ (800be10 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800bc38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc3c:	ee07 3a90 	vmov	s15, r3
 800bc40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	ee07 3a90 	vmov	s15, r3
 800bc4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	ee07 3a90 	vmov	s15, r3
 800bc58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc5c:	ed97 6a02 	vldr	s12, [r7, #8]
 800bc60:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800be0c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800bc64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc70:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bc74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc7c:	e058      	b.n	800bd30 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	ee07 3a90 	vmov	s15, r3
 800bc84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc88:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800be08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800bc8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc90:	4b5c      	ldr	r3, [pc, #368]	@ (800be04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bc92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc98:	ee07 3a90 	vmov	s15, r3
 800bc9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bca0:	ed97 6a02 	vldr	s12, [r7, #8]
 800bca4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800be0c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800bca8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bcac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800bcb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bcc0:	e036      	b.n	800bd30 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bcc2:	4b50      	ldr	r3, [pc, #320]	@ (800be04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bcc4:	689b      	ldr	r3, [r3, #8]
 800bcc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d005      	beq.n	800bcda <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800bcce:	4b4d      	ldr	r3, [pc, #308]	@ (800be04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	0f1b      	lsrs	r3, r3, #28
 800bcd4:	f003 030f 	and.w	r3, r3, #15
 800bcd8:	e006      	b.n	800bce8 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800bcda:	4b4a      	ldr	r3, [pc, #296]	@ (800be04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bcdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bce0:	041b      	lsls	r3, r3, #16
 800bce2:	0f1b      	lsrs	r3, r3, #28
 800bce4:	f003 030f 	and.w	r3, r3, #15
 800bce8:	4a49      	ldr	r2, [pc, #292]	@ (800be10 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800bcea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcee:	ee07 3a90 	vmov	s15, r3
 800bcf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	ee07 3a90 	vmov	s15, r3
 800bcfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd04:	69bb      	ldr	r3, [r7, #24]
 800bd06:	ee07 3a90 	vmov	s15, r3
 800bd0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800bd12:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800be0c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800bd16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd22:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800bd26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd2e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800bd30:	4b34      	ldr	r3, [pc, #208]	@ (800be04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bd32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d017      	beq.n	800bd6c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bd3c:	4b31      	ldr	r3, [pc, #196]	@ (800be04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bd3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd40:	0a5b      	lsrs	r3, r3, #9
 800bd42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd46:	ee07 3a90 	vmov	s15, r3
 800bd4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800bd4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd52:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bd56:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd62:	ee17 2a90 	vmov	r2, s15
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	601a      	str	r2, [r3, #0]
 800bd6a:	e002      	b.n	800bd72 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800bd72:	4b24      	ldr	r3, [pc, #144]	@ (800be04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bd74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d017      	beq.n	800bdae <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bd7e:	4b21      	ldr	r3, [pc, #132]	@ (800be04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bd80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd82:	0c1b      	lsrs	r3, r3, #16
 800bd84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd88:	ee07 3a90 	vmov	s15, r3
 800bd8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800bd90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd94:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bd98:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bda0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bda4:	ee17 2a90 	vmov	r2, s15
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	605a      	str	r2, [r3, #4]
 800bdac:	e002      	b.n	800bdb4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800bdb4:	4b13      	ldr	r3, [pc, #76]	@ (800be04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bdb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d017      	beq.n	800bdf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bdc0:	4b10      	ldr	r3, [pc, #64]	@ (800be04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800bdc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdc4:	0e1b      	lsrs	r3, r3, #24
 800bdc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdca:	ee07 3a90 	vmov	s15, r3
 800bdce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800bdd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bdd6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800bdda:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bde2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bde6:	ee17 2a90 	vmov	r2, s15
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bdee:	e002      	b.n	800bdf6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	609a      	str	r2, [r3, #8]
}
 800bdf6:	bf00      	nop
 800bdf8:	3724      	adds	r7, #36	@ 0x24
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop
 800be04:	46020c00 	.word	0x46020c00
 800be08:	4b742400 	.word	0x4b742400
 800be0c:	46000000 	.word	0x46000000
 800be10:	0801077c 	.word	0x0801077c

0800be14 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b08e      	sub	sp, #56	@ 0x38
 800be18:	af00      	add	r7, sp, #0
 800be1a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800be1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be22:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800be26:	430b      	orrs	r3, r1
 800be28:	d145      	bne.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800be2a:	4ba7      	ldr	r3, [pc, #668]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800be2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be34:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800be36:	4ba4      	ldr	r3, [pc, #656]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800be38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be3c:	f003 0302 	and.w	r3, r3, #2
 800be40:	2b02      	cmp	r3, #2
 800be42:	d108      	bne.n	800be56 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800be44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be4a:	d104      	bne.n	800be56 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800be4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be50:	637b      	str	r3, [r7, #52]	@ 0x34
 800be52:	f001 bb5a 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800be56:	4b9c      	ldr	r3, [pc, #624]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800be58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be64:	d114      	bne.n	800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800be66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be6c:	d110      	bne.n	800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800be6e:	4b96      	ldr	r3, [pc, #600]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800be70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800be78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be7c:	d103      	bne.n	800be86 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800be7e:	23fa      	movs	r3, #250	@ 0xfa
 800be80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800be82:	f001 bb42 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800be86:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800be8a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800be8c:	f001 bb3d 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800be90:	4b8d      	ldr	r3, [pc, #564]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be9c:	d107      	bne.n	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800be9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bea4:	d103      	bne.n	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800bea6:	4b89      	ldr	r3, [pc, #548]	@ (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800bea8:	637b      	str	r3, [r7, #52]	@ 0x34
 800beaa:	f001 bb2e 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800beae:	2300      	movs	r3, #0
 800beb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800beb2:	f001 bb2a 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800beb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beba:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800bebe:	430b      	orrs	r3, r1
 800bec0:	d151      	bne.n	800bf66 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800bec2:	4b81      	ldr	r3, [pc, #516]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bec4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bec8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800becc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800bece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed0:	2b80      	cmp	r3, #128	@ 0x80
 800bed2:	d035      	beq.n	800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800bed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed6:	2b80      	cmp	r3, #128	@ 0x80
 800bed8:	d841      	bhi.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800beda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bedc:	2b60      	cmp	r3, #96	@ 0x60
 800bede:	d02a      	beq.n	800bf36 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800bee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee2:	2b60      	cmp	r3, #96	@ 0x60
 800bee4:	d83b      	bhi.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800bee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee8:	2b40      	cmp	r3, #64	@ 0x40
 800beea:	d009      	beq.n	800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800beec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beee:	2b40      	cmp	r3, #64	@ 0x40
 800bef0:	d835      	bhi.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800bef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d00c      	beq.n	800bf12 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800bef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800befa:	2b20      	cmp	r3, #32
 800befc:	d012      	beq.n	800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800befe:	e02e      	b.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7ff fb77 	bl	800b5f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800bf0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bf0e:	f001 bafc 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf12:	f107 0318 	add.w	r3, r7, #24
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7ff fcc8 	bl	800b8ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800bf1c:	69bb      	ldr	r3, [r7, #24]
 800bf1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bf20:	f001 baf3 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf24:	f107 030c 	add.w	r3, r7, #12
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7ff fe19 	bl	800bb60 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bf32:	f001 baea 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800bf36:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800bf3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bf3c:	f001 bae5 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bf40:	4b61      	ldr	r3, [pc, #388]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf4c:	d103      	bne.n	800bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800bf4e:	4b60      	ldr	r3, [pc, #384]	@ (800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800bf50:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bf52:	f001 bada 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bf56:	2300      	movs	r3, #0
 800bf58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bf5a:	f001 bad6 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bf62:	f001 bad2 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800bf66:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf6a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800bf6e:	430b      	orrs	r3, r1
 800bf70:	d158      	bne.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800bf72:	4b55      	ldr	r3, [pc, #340]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800bf74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bf78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bf7c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800bf7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf84:	d03b      	beq.n	800bffe <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800bf86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf8c:	d846      	bhi.n	800c01c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800bf8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bf94:	d02e      	beq.n	800bff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800bf96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bf9c:	d83e      	bhi.n	800c01c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800bf9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfa4:	d00b      	beq.n	800bfbe <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800bfa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfac:	d836      	bhi.n	800c01c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800bfae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00d      	beq.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bfba:	d012      	beq.n	800bfe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800bfbc:	e02e      	b.n	800c01c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7ff fb18 	bl	800b5f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800bfc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bfcc:	f001 ba9d 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfd0:	f107 0318 	add.w	r3, r7, #24
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f7ff fc69 	bl	800b8ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bfde:	f001 ba94 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfe2:	f107 030c 	add.w	r3, r7, #12
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7ff fdba 	bl	800bb60 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bff0:	f001 ba8b 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800bff4:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800bff8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bffa:	f001 ba86 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bffe:	4b32      	ldr	r3, [pc, #200]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c00a:	d103      	bne.n	800c014 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800c00c:	4b30      	ldr	r3, [pc, #192]	@ (800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c00e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c010:	f001 ba7b 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c014:	2300      	movs	r3, #0
 800c016:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c018:	f001 ba77 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c01c:	2300      	movs	r3, #0
 800c01e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c020:	f001 ba73 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800c024:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c028:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c02c:	430b      	orrs	r3, r1
 800c02e:	d126      	bne.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800c030:	4b25      	ldr	r3, [pc, #148]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c032:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c036:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c03a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800c03c:	4b22      	ldr	r3, [pc, #136]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c044:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c048:	d106      	bne.n	800c058 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800c04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d103      	bne.n	800c058 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800c050:	4b1f      	ldr	r3, [pc, #124]	@ (800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c052:	637b      	str	r3, [r7, #52]	@ 0x34
 800c054:	f001 ba59 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800c058:	4b1b      	ldr	r3, [pc, #108]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c060:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c064:	d107      	bne.n	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800c066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c06c:	d103      	bne.n	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800c06e:	4b19      	ldr	r3, [pc, #100]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c070:	637b      	str	r3, [r7, #52]	@ 0x34
 800c072:	f001 ba4a 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800c076:	2300      	movs	r3, #0
 800c078:	637b      	str	r3, [r7, #52]	@ 0x34
 800c07a:	f001 ba46 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800c07e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c082:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800c086:	430b      	orrs	r3, r1
 800c088:	d16e      	bne.n	800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c08a:	4b0f      	ldr	r3, [pc, #60]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c08c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c090:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c094:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c098:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c09c:	d03d      	beq.n	800c11a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c0a4:	d85c      	bhi.n	800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c0ac:	d014      	beq.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800c0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c0b4:	d854      	bhi.n	800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d01f      	beq.n	800c0fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800c0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c0c2:	d012      	beq.n	800c0ea <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800c0c4:	e04c      	b.n	800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c0c6:	bf00      	nop
 800c0c8:	46020c00 	.word	0x46020c00
 800c0cc:	0007a120 	.word	0x0007a120
 800c0d0:	00f42400 	.word	0x00f42400
 800c0d4:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7ff fa8b 	bl	800b5f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c0e6:	f001 ba10 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0ea:	f107 0318 	add.w	r3, r7, #24
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7ff fbdc 	bl	800b8ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c0f8:	f001 ba07 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c0fc:	4ba7      	ldr	r3, [pc, #668]	@ (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c104:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c108:	d103      	bne.n	800c112 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800c10a:	4ba5      	ldr	r3, [pc, #660]	@ (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c10c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c10e:	f001 b9fc 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c112:	2300      	movs	r3, #0
 800c114:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c116:	f001 b9f8 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c11a:	4ba0      	ldr	r3, [pc, #640]	@ (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f003 0320 	and.w	r3, r3, #32
 800c122:	2b20      	cmp	r3, #32
 800c124:	d118      	bne.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c126:	4b9d      	ldr	r3, [pc, #628]	@ (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d005      	beq.n	800c13e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c132:	4b9a      	ldr	r3, [pc, #616]	@ (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	0e1b      	lsrs	r3, r3, #24
 800c138:	f003 030f 	and.w	r3, r3, #15
 800c13c:	e006      	b.n	800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800c13e:	4b97      	ldr	r3, [pc, #604]	@ (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c140:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c144:	041b      	lsls	r3, r3, #16
 800c146:	0e1b      	lsrs	r3, r3, #24
 800c148:	f003 030f 	and.w	r3, r3, #15
 800c14c:	4a95      	ldr	r2, [pc, #596]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c14e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c152:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c154:	f001 b9d9 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c158:	2300      	movs	r3, #0
 800c15a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c15c:	f001 b9d5 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c160:	2300      	movs	r3, #0
 800c162:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c164:	f001 b9d1 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c16c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800c170:	430b      	orrs	r3, r1
 800c172:	d17f      	bne.n	800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c174:	4b89      	ldr	r3, [pc, #548]	@ (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c176:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c17a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c17e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800c180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c182:	2b00      	cmp	r3, #0
 800c184:	d165      	bne.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c186:	4b85      	ldr	r3, [pc, #532]	@ (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c18c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c190:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800c192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c194:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c198:	d034      	beq.n	800c204 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800c19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c19c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c1a0:	d853      	bhi.n	800c24a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c1a8:	d00b      	beq.n	800c1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800c1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c1b0:	d84b      	bhi.n	800c24a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d016      	beq.n	800c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800c1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c1be:	d009      	beq.n	800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800c1c0:	e043      	b.n	800c24a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7ff fa16 	bl	800b5f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ce:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c1d0:	f001 b99b 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1d4:	f107 0318 	add.w	r3, r7, #24
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7ff fb67 	bl	800b8ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c1e2:	f001 b992 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c1e6:	4b6d      	ldr	r3, [pc, #436]	@ (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c1ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c1f2:	d103      	bne.n	800c1fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800c1f4:	4b6a      	ldr	r3, [pc, #424]	@ (800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c1f6:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c1f8:	f001 b987 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c200:	f001 b983 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c204:	4b65      	ldr	r3, [pc, #404]	@ (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f003 0320 	and.w	r3, r3, #32
 800c20c:	2b20      	cmp	r3, #32
 800c20e:	d118      	bne.n	800c242 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c210:	4b62      	ldr	r3, [pc, #392]	@ (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d005      	beq.n	800c228 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800c21c:	4b5f      	ldr	r3, [pc, #380]	@ (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	0e1b      	lsrs	r3, r3, #24
 800c222:	f003 030f 	and.w	r3, r3, #15
 800c226:	e006      	b.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c228:	4b5c      	ldr	r3, [pc, #368]	@ (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c22a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c22e:	041b      	lsls	r3, r3, #16
 800c230:	0e1b      	lsrs	r3, r3, #24
 800c232:	f003 030f 	and.w	r3, r3, #15
 800c236:	4a5b      	ldr	r2, [pc, #364]	@ (800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c23c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c23e:	f001 b964 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c242:	2300      	movs	r3, #0
 800c244:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c246:	f001 b960 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800c24a:	2300      	movs	r3, #0
 800c24c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c24e:	f001 b95c 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800c252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c254:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c258:	d108      	bne.n	800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c25a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c25e:	4618      	mov	r0, r3
 800c260:	f7ff f9ca 	bl	800b5f8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c266:	637b      	str	r3, [r7, #52]	@ 0x34
 800c268:	f001 b94f 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800c26c:	2300      	movs	r3, #0
 800c26e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c270:	f001 b94b 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800c274:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c278:	1e51      	subs	r1, r2, #1
 800c27a:	430b      	orrs	r3, r1
 800c27c:	d136      	bne.n	800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c27e:	4b47      	ldr	r3, [pc, #284]	@ (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c284:	f003 0303 	and.w	r3, r3, #3
 800c288:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800c28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d104      	bne.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800c290:	f7fe f9cc 	bl	800a62c <HAL_RCC_GetPCLK2Freq>
 800c294:	6378      	str	r0, [r7, #52]	@ 0x34
 800c296:	f001 b938 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800c29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d104      	bne.n	800c2aa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c2a0:	f7fe f894 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800c2a4:	6378      	str	r0, [r7, #52]	@ 0x34
 800c2a6:	f001 b930 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800c2aa:	4b3c      	ldr	r3, [pc, #240]	@ (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c2b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2b6:	d106      	bne.n	800c2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800c2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d103      	bne.n	800c2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800c2be:	4b3a      	ldr	r3, [pc, #232]	@ (800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c2c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2c2:	f001 b922 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800c2c6:	4b35      	ldr	r3, [pc, #212]	@ (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c2c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c2cc:	f003 0302 	and.w	r3, r3, #2
 800c2d0:	2b02      	cmp	r3, #2
 800c2d2:	d107      	bne.n	800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800c2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d6:	2b03      	cmp	r3, #3
 800c2d8:	d104      	bne.n	800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800c2da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c2de:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2e0:	f001 b913 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2e8:	f001 b90f 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800c2ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2f0:	1e91      	subs	r1, r2, #2
 800c2f2:	430b      	orrs	r3, r1
 800c2f4:	d136      	bne.n	800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c2f6:	4b29      	ldr	r3, [pc, #164]	@ (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c2f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c2fc:	f003 030c 	and.w	r3, r3, #12
 800c300:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800c302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c304:	2b00      	cmp	r3, #0
 800c306:	d104      	bne.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c308:	f7fe f97c 	bl	800a604 <HAL_RCC_GetPCLK1Freq>
 800c30c:	6378      	str	r0, [r7, #52]	@ 0x34
 800c30e:	f001 b8fc 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800c312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c314:	2b04      	cmp	r3, #4
 800c316:	d104      	bne.n	800c322 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c318:	f7fe f858 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800c31c:	6378      	str	r0, [r7, #52]	@ 0x34
 800c31e:	f001 b8f4 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800c322:	4b1e      	ldr	r3, [pc, #120]	@ (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c32a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c32e:	d106      	bne.n	800c33e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c332:	2b08      	cmp	r3, #8
 800c334:	d103      	bne.n	800c33e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800c336:	4b1c      	ldr	r3, [pc, #112]	@ (800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c338:	637b      	str	r3, [r7, #52]	@ 0x34
 800c33a:	f001 b8e6 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800c33e:	4b17      	ldr	r3, [pc, #92]	@ (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c344:	f003 0302 	and.w	r3, r3, #2
 800c348:	2b02      	cmp	r3, #2
 800c34a:	d107      	bne.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800c34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c34e:	2b0c      	cmp	r3, #12
 800c350:	d104      	bne.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800c352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c356:	637b      	str	r3, [r7, #52]	@ 0x34
 800c358:	f001 b8d7 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800c35c:	2300      	movs	r3, #0
 800c35e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c360:	f001 b8d3 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800c364:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c368:	1f11      	subs	r1, r2, #4
 800c36a:	430b      	orrs	r3, r1
 800c36c:	d13f      	bne.n	800c3ee <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800c36e:	4b0b      	ldr	r3, [pc, #44]	@ (800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c374:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c378:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800c37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d104      	bne.n	800c38a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c380:	f7fe f940 	bl	800a604 <HAL_RCC_GetPCLK1Freq>
 800c384:	6378      	str	r0, [r7, #52]	@ 0x34
 800c386:	f001 b8c0 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800c38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c38c:	2b10      	cmp	r3, #16
 800c38e:	d10d      	bne.n	800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c390:	f7fe f81c 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800c394:	6378      	str	r0, [r7, #52]	@ 0x34
 800c396:	f001 b8b8 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c39a:	bf00      	nop
 800c39c:	46020c00 	.word	0x46020c00
 800c3a0:	02dc6c00 	.word	0x02dc6c00
 800c3a4:	0801077c 	.word	0x0801077c
 800c3a8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800c3ac:	4ba8      	ldr	r3, [pc, #672]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3b8:	d106      	bne.n	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3bc:	2b20      	cmp	r3, #32
 800c3be:	d103      	bne.n	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800c3c0:	4ba4      	ldr	r3, [pc, #656]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c3c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3c4:	f001 b8a1 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800c3c8:	4ba1      	ldr	r3, [pc, #644]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c3ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c3ce:	f003 0302 	and.w	r3, r3, #2
 800c3d2:	2b02      	cmp	r3, #2
 800c3d4:	d107      	bne.n	800c3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d8:	2b30      	cmp	r3, #48	@ 0x30
 800c3da:	d104      	bne.n	800c3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800c3dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c3e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3e2:	f001 b892 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3ea:	f001 b88e 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800c3ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3f2:	f1a2 0108 	sub.w	r1, r2, #8
 800c3f6:	430b      	orrs	r3, r1
 800c3f8:	d136      	bne.n	800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800c3fa:	4b95      	ldr	r3, [pc, #596]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c3fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c400:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c404:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800c406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d104      	bne.n	800c416 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c40c:	f7fe f8fa 	bl	800a604 <HAL_RCC_GetPCLK1Freq>
 800c410:	6378      	str	r0, [r7, #52]	@ 0x34
 800c412:	f001 b87a 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800c416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c418:	2b40      	cmp	r3, #64	@ 0x40
 800c41a:	d104      	bne.n	800c426 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c41c:	f7fd ffd6 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800c420:	6378      	str	r0, [r7, #52]	@ 0x34
 800c422:	f001 b872 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800c426:	4b8a      	ldr	r3, [pc, #552]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c42e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c432:	d106      	bne.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800c434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c436:	2b80      	cmp	r3, #128	@ 0x80
 800c438:	d103      	bne.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800c43a:	4b86      	ldr	r3, [pc, #536]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c43c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c43e:	f001 b864 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800c442:	4b83      	ldr	r3, [pc, #524]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c444:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c448:	f003 0302 	and.w	r3, r3, #2
 800c44c:	2b02      	cmp	r3, #2
 800c44e:	d107      	bne.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800c450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c452:	2bc0      	cmp	r3, #192	@ 0xc0
 800c454:	d104      	bne.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800c456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c45a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c45c:	f001 b855 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800c460:	2300      	movs	r3, #0
 800c462:	637b      	str	r3, [r7, #52]	@ 0x34
 800c464:	f001 b851 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800c468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c46c:	f1a2 0110 	sub.w	r1, r2, #16
 800c470:	430b      	orrs	r3, r1
 800c472:	d139      	bne.n	800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800c474:	4b76      	ldr	r3, [pc, #472]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c47a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c47e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800c480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c482:	2b00      	cmp	r3, #0
 800c484:	d104      	bne.n	800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c486:	f7fe f8bd 	bl	800a604 <HAL_RCC_GetPCLK1Freq>
 800c48a:	6378      	str	r0, [r7, #52]	@ 0x34
 800c48c:	f001 b83d 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800c490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c496:	d104      	bne.n	800c4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c498:	f7fd ff98 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800c49c:	6378      	str	r0, [r7, #52]	@ 0x34
 800c49e:	f001 b834 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800c4a2:	4b6b      	ldr	r3, [pc, #428]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c4aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c4ae:	d107      	bne.n	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800c4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4b6:	d103      	bne.n	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800c4b8:	4b66      	ldr	r3, [pc, #408]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c4ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4bc:	f001 b825 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800c4c0:	4b63      	ldr	r3, [pc, #396]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c4c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c4c6:	f003 0302 	and.w	r3, r3, #2
 800c4ca:	2b02      	cmp	r3, #2
 800c4cc:	d108      	bne.n	800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800c4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c4d4:	d104      	bne.n	800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800c4d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c4da:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4dc:	f001 b815 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4e4:	f001 b811 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800c4e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4ec:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800c4f0:	430b      	orrs	r3, r1
 800c4f2:	d139      	bne.n	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800c4f4:	4b56      	ldr	r3, [pc, #344]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c4f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c4fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c4fe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800c500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c502:	2b00      	cmp	r3, #0
 800c504:	d104      	bne.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c506:	f7fe f87d 	bl	800a604 <HAL_RCC_GetPCLK1Freq>
 800c50a:	6378      	str	r0, [r7, #52]	@ 0x34
 800c50c:	f000 bffd 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800c510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c516:	d104      	bne.n	800c522 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c518:	f7fd ff58 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800c51c:	6378      	str	r0, [r7, #52]	@ 0x34
 800c51e:	f000 bff4 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800c522:	4b4b      	ldr	r3, [pc, #300]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c52a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c52e:	d107      	bne.n	800c540 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800c530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c532:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c536:	d103      	bne.n	800c540 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800c538:	4b46      	ldr	r3, [pc, #280]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c53a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c53c:	f000 bfe5 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800c540:	4b43      	ldr	r3, [pc, #268]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c546:	f003 0302 	and.w	r3, r3, #2
 800c54a:	2b02      	cmp	r3, #2
 800c54c:	d108      	bne.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800c54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c550:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c554:	d104      	bne.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800c556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c55a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c55c:	f000 bfd5 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800c560:	2300      	movs	r3, #0
 800c562:	637b      	str	r3, [r7, #52]	@ 0x34
 800c564:	f000 bfd1 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800c568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c56c:	f1a2 0120 	sub.w	r1, r2, #32
 800c570:	430b      	orrs	r3, r1
 800c572:	d158      	bne.n	800c626 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800c574:	4b36      	ldr	r3, [pc, #216]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c576:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c57a:	f003 0307 	and.w	r3, r3, #7
 800c57e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800c580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c582:	2b00      	cmp	r3, #0
 800c584:	d104      	bne.n	800c590 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800c586:	f7fe f865 	bl	800a654 <HAL_RCC_GetPCLK3Freq>
 800c58a:	6378      	str	r0, [r7, #52]	@ 0x34
 800c58c:	f000 bfbd 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800c590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c592:	2b01      	cmp	r3, #1
 800c594:	d104      	bne.n	800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c596:	f7fd ff19 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800c59a:	6378      	str	r0, [r7, #52]	@ 0x34
 800c59c:	f000 bfb5 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800c5a0:	4b2b      	ldr	r3, [pc, #172]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c5a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5ac:	d106      	bne.n	800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800c5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b0:	2b02      	cmp	r3, #2
 800c5b2:	d103      	bne.n	800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800c5b4:	4b27      	ldr	r3, [pc, #156]	@ (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c5b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5b8:	f000 bfa7 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800c5bc:	4b24      	ldr	r3, [pc, #144]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c5be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c5c2:	f003 0302 	and.w	r3, r3, #2
 800c5c6:	2b02      	cmp	r3, #2
 800c5c8:	d107      	bne.n	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800c5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5cc:	2b03      	cmp	r3, #3
 800c5ce:	d104      	bne.n	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800c5d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5d6:	f000 bf98 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800c5da:	4b1d      	ldr	r3, [pc, #116]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f003 0320 	and.w	r3, r3, #32
 800c5e2:	2b20      	cmp	r3, #32
 800c5e4:	d11b      	bne.n	800c61e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800c5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e8:	2b04      	cmp	r3, #4
 800c5ea:	d118      	bne.n	800c61e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c5ec:	4b18      	ldr	r3, [pc, #96]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c5ee:	689b      	ldr	r3, [r3, #8]
 800c5f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d005      	beq.n	800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800c5f8:	4b15      	ldr	r3, [pc, #84]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	0e1b      	lsrs	r3, r3, #24
 800c5fe:	f003 030f 	and.w	r3, r3, #15
 800c602:	e006      	b.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800c604:	4b12      	ldr	r3, [pc, #72]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c606:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c60a:	041b      	lsls	r3, r3, #16
 800c60c:	0e1b      	lsrs	r3, r3, #24
 800c60e:	f003 030f 	and.w	r3, r3, #15
 800c612:	4a11      	ldr	r2, [pc, #68]	@ (800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800c614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c618:	637b      	str	r3, [r7, #52]	@ 0x34
 800c61a:	f000 bf76 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800c61e:	2300      	movs	r3, #0
 800c620:	637b      	str	r3, [r7, #52]	@ 0x34
 800c622:	f000 bf72 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800c626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c62a:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800c62e:	430b      	orrs	r3, r1
 800c630:	d172      	bne.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800c632:	4b07      	ldr	r3, [pc, #28]	@ (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c638:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c63c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800c63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c644:	d10a      	bne.n	800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c646:	f7fd fec1 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800c64a:	6378      	str	r0, [r7, #52]	@ 0x34
 800c64c:	f000 bf5d 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c650:	46020c00 	.word	0x46020c00
 800c654:	00f42400 	.word	0x00f42400
 800c658:	0801077c 	.word	0x0801077c
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800c65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c65e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c662:	d108      	bne.n	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c664:	f107 0318 	add.w	r3, r7, #24
 800c668:	4618      	mov	r0, r3
 800c66a:	f7ff f91f 	bl	800b8ac <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800c66e:	6a3b      	ldr	r3, [r7, #32]
 800c670:	637b      	str	r3, [r7, #52]	@ 0x34
 800c672:	f000 bf4a 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800c676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d104      	bne.n	800c686 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800c67c:	f7fd ffa8 	bl	800a5d0 <HAL_RCC_GetHCLKFreq>
 800c680:	6378      	str	r0, [r7, #52]	@ 0x34
 800c682:	f000 bf42 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800c686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c688:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800c68c:	d122      	bne.n	800c6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c68e:	4bb0      	ldr	r3, [pc, #704]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f003 0320 	and.w	r3, r3, #32
 800c696:	2b20      	cmp	r3, #32
 800c698:	d118      	bne.n	800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c69a:	4bad      	ldr	r3, [pc, #692]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d005      	beq.n	800c6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800c6a6:	4baa      	ldr	r3, [pc, #680]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	0e1b      	lsrs	r3, r3, #24
 800c6ac:	f003 030f 	and.w	r3, r3, #15
 800c6b0:	e006      	b.n	800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800c6b2:	4ba7      	ldr	r3, [pc, #668]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c6b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c6b8:	041b      	lsls	r3, r3, #16
 800c6ba:	0e1b      	lsrs	r3, r3, #24
 800c6bc:	f003 030f 	and.w	r3, r3, #15
 800c6c0:	4aa4      	ldr	r2, [pc, #656]	@ (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800c6c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6c8:	f000 bf1f 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6d0:	f000 bf1b 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800c6d4:	4b9e      	ldr	r3, [pc, #632]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c6dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6e0:	d107      	bne.n	800c6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c6e8:	d103      	bne.n	800c6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800c6ea:	4b9b      	ldr	r3, [pc, #620]	@ (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800c6ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6ee:	f000 bf0c 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800c6f2:	4b97      	ldr	r3, [pc, #604]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c6fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6fe:	d107      	bne.n	800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800c700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c702:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c706:	d103      	bne.n	800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800c708:	4b93      	ldr	r3, [pc, #588]	@ (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800c70a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c70c:	f000 befd 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800c710:	2300      	movs	r3, #0
 800c712:	637b      	str	r3, [r7, #52]	@ 0x34
 800c714:	f000 bef9 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800c718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c71c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800c720:	430b      	orrs	r3, r1
 800c722:	d158      	bne.n	800c7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800c724:	4b8a      	ldr	r3, [pc, #552]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c726:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c72a:	f003 0307 	and.w	r3, r3, #7
 800c72e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c732:	2b04      	cmp	r3, #4
 800c734:	d84b      	bhi.n	800c7ce <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800c736:	a201      	add	r2, pc, #4	@ (adr r2, 800c73c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800c738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c73c:	0800c775 	.word	0x0800c775
 800c740:	0800c751 	.word	0x0800c751
 800c744:	0800c763 	.word	0x0800c763
 800c748:	0800c77f 	.word	0x0800c77f
 800c74c:	0800c789 	.word	0x0800c789
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c754:	4618      	mov	r0, r3
 800c756:	f7fe ff4f 	bl	800b5f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c75e:	f000 bed4 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c762:	f107 030c 	add.w	r3, r7, #12
 800c766:	4618      	mov	r0, r3
 800c768:	f7ff f9fa 	bl	800bb60 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c770:	f000 becb 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800c774:	f7fd ff2c 	bl	800a5d0 <HAL_RCC_GetHCLKFreq>
 800c778:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c77a:	f000 bec6 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c77e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c782:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c784:	f000 bec1 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c788:	4b71      	ldr	r3, [pc, #452]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f003 0320 	and.w	r3, r3, #32
 800c790:	2b20      	cmp	r3, #32
 800c792:	d118      	bne.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c794:	4b6e      	ldr	r3, [pc, #440]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d005      	beq.n	800c7ac <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800c7a0:	4b6b      	ldr	r3, [pc, #428]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c7a2:	689b      	ldr	r3, [r3, #8]
 800c7a4:	0e1b      	lsrs	r3, r3, #24
 800c7a6:	f003 030f 	and.w	r3, r3, #15
 800c7aa:	e006      	b.n	800c7ba <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800c7ac:	4b68      	ldr	r3, [pc, #416]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c7ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c7b2:	041b      	lsls	r3, r3, #16
 800c7b4:	0e1b      	lsrs	r3, r3, #24
 800c7b6:	f003 030f 	and.w	r3, r3, #15
 800c7ba:	4a66      	ldr	r2, [pc, #408]	@ (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800c7bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c7c2:	f000 bea2 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7ca:	f000 be9e 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7d2:	f000 be9a 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800c7d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7da:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800c7de:	430b      	orrs	r3, r1
 800c7e0:	d167      	bne.n	800c8b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800c7e2:	4b5b      	ldr	r3, [pc, #364]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c7e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c7e8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800c7ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c7f4:	d036      	beq.n	800c864 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c7fc:	d855      	bhi.n	800c8aa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c800:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c804:	d029      	beq.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800c806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c808:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c80c:	d84d      	bhi.n	800c8aa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800c80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c810:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c814:	d013      	beq.n	800c83e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800c816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c818:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c81c:	d845      	bhi.n	800c8aa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800c81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c820:	2b00      	cmp	r3, #0
 800c822:	d015      	beq.n	800c850 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800c824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c826:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c82a:	d13e      	bne.n	800c8aa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c82c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c830:	4618      	mov	r0, r3
 800c832:	f7fe fee1 	bl	800b5f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c838:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c83a:	f000 be66 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c83e:	f107 030c 	add.w	r3, r7, #12
 800c842:	4618      	mov	r0, r3
 800c844:	f7ff f98c 	bl	800bb60 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c84c:	f000 be5d 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800c850:	f7fd febe 	bl	800a5d0 <HAL_RCC_GetHCLKFreq>
 800c854:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c856:	f000 be58 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c85a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c85e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c860:	f000 be53 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c864:	4b3a      	ldr	r3, [pc, #232]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f003 0320 	and.w	r3, r3, #32
 800c86c:	2b20      	cmp	r3, #32
 800c86e:	d118      	bne.n	800c8a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c870:	4b37      	ldr	r3, [pc, #220]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d005      	beq.n	800c888 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800c87c:	4b34      	ldr	r3, [pc, #208]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c87e:	689b      	ldr	r3, [r3, #8]
 800c880:	0e1b      	lsrs	r3, r3, #24
 800c882:	f003 030f 	and.w	r3, r3, #15
 800c886:	e006      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c888:	4b31      	ldr	r3, [pc, #196]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c88a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c88e:	041b      	lsls	r3, r3, #16
 800c890:	0e1b      	lsrs	r3, r3, #24
 800c892:	f003 030f 	and.w	r3, r3, #15
 800c896:	4a2f      	ldr	r2, [pc, #188]	@ (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800c898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c89c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c89e:	f000 be34 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8a6:	f000 be30 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c8ae:	f000 be2c 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800c8b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8b6:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800c8ba:	430b      	orrs	r3, r1
 800c8bc:	d152      	bne.n	800c964 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800c8be:	4b24      	ldr	r3, [pc, #144]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c8c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c8c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c8c8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800c8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d104      	bne.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c8d0:	f7fd fe98 	bl	800a604 <HAL_RCC_GetPCLK1Freq>
 800c8d4:	6378      	str	r0, [r7, #52]	@ 0x34
 800c8d6:	f000 be18 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800c8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c8e0:	d104      	bne.n	800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c8e2:	f7fd fd73 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800c8e6:	6378      	str	r0, [r7, #52]	@ 0x34
 800c8e8:	f000 be0f 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800c8ec:	4b18      	ldr	r3, [pc, #96]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c8f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c8f8:	d107      	bne.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800c8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c900:	d103      	bne.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800c902:	4b15      	ldr	r3, [pc, #84]	@ (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800c904:	637b      	str	r3, [r7, #52]	@ 0x34
 800c906:	f000 be00 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800c90a:	4b11      	ldr	r3, [pc, #68]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f003 0320 	and.w	r3, r3, #32
 800c912:	2b20      	cmp	r3, #32
 800c914:	d122      	bne.n	800c95c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800c916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c918:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c91c:	d11e      	bne.n	800c95c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c91e:	4b0c      	ldr	r3, [pc, #48]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c920:	689b      	ldr	r3, [r3, #8]
 800c922:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c926:	2b00      	cmp	r3, #0
 800c928:	d005      	beq.n	800c936 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800c92a:	4b09      	ldr	r3, [pc, #36]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c92c:	689b      	ldr	r3, [r3, #8]
 800c92e:	0e1b      	lsrs	r3, r3, #24
 800c930:	f003 030f 	and.w	r3, r3, #15
 800c934:	e006      	b.n	800c944 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800c936:	4b06      	ldr	r3, [pc, #24]	@ (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800c938:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c93c:	041b      	lsls	r3, r3, #16
 800c93e:	0e1b      	lsrs	r3, r3, #24
 800c940:	f003 030f 	and.w	r3, r3, #15
 800c944:	4a03      	ldr	r2, [pc, #12]	@ (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800c946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c94a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c94c:	f000 bddd 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c950:	46020c00 	.word	0x46020c00
 800c954:	0801077c 	.word	0x0801077c
 800c958:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800c95c:	2300      	movs	r3, #0
 800c95e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c960:	f000 bdd3 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800c964:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c968:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800c96c:	430b      	orrs	r3, r1
 800c96e:	d14c      	bne.n	800ca0a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800c970:	4ba8      	ldr	r3, [pc, #672]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c976:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c97a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800c97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d104      	bne.n	800c98c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c982:	f7fd fe3f 	bl	800a604 <HAL_RCC_GetPCLK1Freq>
 800c986:	6378      	str	r0, [r7, #52]	@ 0x34
 800c988:	f000 bdbf 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800c98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c98e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c992:	d104      	bne.n	800c99e <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c994:	f7fd fd1a 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800c998:	6378      	str	r0, [r7, #52]	@ 0x34
 800c99a:	f000 bdb6 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800c99e:	4b9d      	ldr	r3, [pc, #628]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9aa:	d107      	bne.n	800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800c9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c9b2:	d103      	bne.n	800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800c9b4:	4b98      	ldr	r3, [pc, #608]	@ (800cc18 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800c9b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9b8:	f000 bda7 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800c9bc:	4b95      	ldr	r3, [pc, #596]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f003 0320 	and.w	r3, r3, #32
 800c9c4:	2b20      	cmp	r3, #32
 800c9c6:	d11c      	bne.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800c9c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c9ce:	d118      	bne.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c9d0:	4b90      	ldr	r3, [pc, #576]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d005      	beq.n	800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800c9dc:	4b8d      	ldr	r3, [pc, #564]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	0e1b      	lsrs	r3, r3, #24
 800c9e2:	f003 030f 	and.w	r3, r3, #15
 800c9e6:	e006      	b.n	800c9f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800c9e8:	4b8a      	ldr	r3, [pc, #552]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800c9ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c9ee:	041b      	lsls	r3, r3, #16
 800c9f0:	0e1b      	lsrs	r3, r3, #24
 800c9f2:	f003 030f 	and.w	r3, r3, #15
 800c9f6:	4a89      	ldr	r2, [pc, #548]	@ (800cc1c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800c9f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9fe:	f000 bd84 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800ca02:	2300      	movs	r3, #0
 800ca04:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca06:	f000 bd80 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800ca0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca0e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ca12:	430b      	orrs	r3, r1
 800ca14:	d158      	bne.n	800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800ca16:	4b7f      	ldr	r3, [pc, #508]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ca18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ca1c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ca20:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ca22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca24:	2bc0      	cmp	r3, #192	@ 0xc0
 800ca26:	d028      	beq.n	800ca7a <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800ca28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca2a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ca2c:	d848      	bhi.n	800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800ca2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca30:	2b80      	cmp	r3, #128	@ 0x80
 800ca32:	d00e      	beq.n	800ca52 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800ca34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca36:	2b80      	cmp	r3, #128	@ 0x80
 800ca38:	d842      	bhi.n	800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d003      	beq.n	800ca48 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800ca40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca42:	2b40      	cmp	r3, #64	@ 0x40
 800ca44:	d014      	beq.n	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800ca46:	e03b      	b.n	800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800ca48:	f7fd fe04 	bl	800a654 <HAL_RCC_GetPCLK3Freq>
 800ca4c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ca4e:	f000 bd5c 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ca52:	4b70      	ldr	r3, [pc, #448]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca5e:	d103      	bne.n	800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800ca60:	4b6d      	ldr	r3, [pc, #436]	@ (800cc18 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ca62:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ca64:	f000 bd51 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ca6c:	f000 bd4d 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800ca70:	f7fd fcac 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800ca74:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ca76:	f000 bd48 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ca7a:	4b66      	ldr	r3, [pc, #408]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f003 0320 	and.w	r3, r3, #32
 800ca82:	2b20      	cmp	r3, #32
 800ca84:	d118      	bne.n	800cab8 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ca86:	4b63      	ldr	r3, [pc, #396]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ca88:	689b      	ldr	r3, [r3, #8]
 800ca8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d005      	beq.n	800ca9e <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800ca92:	4b60      	ldr	r3, [pc, #384]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ca94:	689b      	ldr	r3, [r3, #8]
 800ca96:	0e1b      	lsrs	r3, r3, #24
 800ca98:	f003 030f 	and.w	r3, r3, #15
 800ca9c:	e006      	b.n	800caac <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800ca9e:	4b5d      	ldr	r3, [pc, #372]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800caa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800caa4:	041b      	lsls	r3, r3, #16
 800caa6:	0e1b      	lsrs	r3, r3, #24
 800caa8:	f003 030f 	and.w	r3, r3, #15
 800caac:	4a5b      	ldr	r2, [pc, #364]	@ (800cc1c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800caae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cab2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cab4:	f000 bd29 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cab8:	2300      	movs	r3, #0
 800caba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cabc:	f000 bd25 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800cac0:	2300      	movs	r3, #0
 800cac2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cac4:	f000 bd21 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800cac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cacc:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800cad0:	430b      	orrs	r3, r1
 800cad2:	d14c      	bne.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800cad4:	4b4f      	ldr	r3, [pc, #316]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cada:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cade:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800cae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d104      	bne.n	800caf0 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cae6:	f7fd fd8d 	bl	800a604 <HAL_RCC_GetPCLK1Freq>
 800caea:	6378      	str	r0, [r7, #52]	@ 0x34
 800caec:	f000 bd0d 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800caf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800caf6:	d104      	bne.n	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800caf8:	f7fd fc68 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800cafc:	6378      	str	r0, [r7, #52]	@ 0x34
 800cafe:	f000 bd04 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800cb02:	4b44      	ldr	r3, [pc, #272]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb0e:	d107      	bne.n	800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800cb10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb16:	d103      	bne.n	800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800cb18:	4b3f      	ldr	r3, [pc, #252]	@ (800cc18 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800cb1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb1c:	f000 bcf5 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800cb20:	4b3c      	ldr	r3, [pc, #240]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f003 0320 	and.w	r3, r3, #32
 800cb28:	2b20      	cmp	r3, #32
 800cb2a:	d11c      	bne.n	800cb66 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800cb2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb2e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cb32:	d118      	bne.n	800cb66 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cb34:	4b37      	ldr	r3, [pc, #220]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d005      	beq.n	800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800cb40:	4b34      	ldr	r3, [pc, #208]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	0e1b      	lsrs	r3, r3, #24
 800cb46:	f003 030f 	and.w	r3, r3, #15
 800cb4a:	e006      	b.n	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800cb4c:	4b31      	ldr	r3, [pc, #196]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cb52:	041b      	lsls	r3, r3, #16
 800cb54:	0e1b      	lsrs	r3, r3, #24
 800cb56:	f003 030f 	and.w	r3, r3, #15
 800cb5a:	4a30      	ldr	r2, [pc, #192]	@ (800cc1c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800cb5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb60:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb62:	f000 bcd2 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800cb66:	2300      	movs	r3, #0
 800cb68:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb6a:	f000 bcce 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800cb6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb72:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800cb76:	430b      	orrs	r3, r1
 800cb78:	d152      	bne.n	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800cb7a:	4b26      	ldr	r3, [pc, #152]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cb7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cb80:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800cb84:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800cb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d104      	bne.n	800cb96 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cb8c:	f7fd fd3a 	bl	800a604 <HAL_RCC_GetPCLK1Freq>
 800cb90:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb92:	f000 bcba 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800cb96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cb9c:	d104      	bne.n	800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cb9e:	f7fd fc15 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800cba2:	6378      	str	r0, [r7, #52]	@ 0x34
 800cba4:	f000 bcb1 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800cba8:	4b1a      	ldr	r3, [pc, #104]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cbb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cbb4:	d107      	bne.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800cbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cbbc:	d103      	bne.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800cbbe:	4b16      	ldr	r3, [pc, #88]	@ (800cc18 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800cbc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbc2:	f000 bca2 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800cbc6:	4b13      	ldr	r3, [pc, #76]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f003 0320 	and.w	r3, r3, #32
 800cbce:	2b20      	cmp	r3, #32
 800cbd0:	d11c      	bne.n	800cc0c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800cbd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cbd8:	d118      	bne.n	800cc0c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cbda:	4b0e      	ldr	r3, [pc, #56]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cbdc:	689b      	ldr	r3, [r3, #8]
 800cbde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d005      	beq.n	800cbf2 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800cbe6:	4b0b      	ldr	r3, [pc, #44]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cbe8:	689b      	ldr	r3, [r3, #8]
 800cbea:	0e1b      	lsrs	r3, r3, #24
 800cbec:	f003 030f 	and.w	r3, r3, #15
 800cbf0:	e006      	b.n	800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800cbf2:	4b08      	ldr	r3, [pc, #32]	@ (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800cbf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cbf8:	041b      	lsls	r3, r3, #16
 800cbfa:	0e1b      	lsrs	r3, r3, #24
 800cbfc:	f003 030f 	and.w	r3, r3, #15
 800cc00:	4a06      	ldr	r2, [pc, #24]	@ (800cc1c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800cc02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc06:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc08:	f000 bc7f 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc10:	f000 bc7b 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cc14:	46020c00 	.word	0x46020c00
 800cc18:	00f42400 	.word	0x00f42400
 800cc1c:	0801077c 	.word	0x0801077c
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800cc20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc24:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800cc28:	430b      	orrs	r3, r1
 800cc2a:	d14c      	bne.n	800ccc6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800cc2c:	4ba6      	ldr	r3, [pc, #664]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cc2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cc32:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800cc36:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800cc38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d104      	bne.n	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cc3e:	f7fd fce1 	bl	800a604 <HAL_RCC_GetPCLK1Freq>
 800cc42:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc44:	f000 bc61 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800cc48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cc4e:	d104      	bne.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cc50:	f7fd fbbc 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800cc54:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc56:	f000 bc58 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800cc5a:	4b9b      	ldr	r3, [pc, #620]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc66:	d107      	bne.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800cc68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cc6e:	d103      	bne.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800cc70:	4b96      	ldr	r3, [pc, #600]	@ (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800cc72:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc74:	f000 bc49 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800cc78:	4b93      	ldr	r3, [pc, #588]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f003 0320 	and.w	r3, r3, #32
 800cc80:	2b20      	cmp	r3, #32
 800cc82:	d11c      	bne.n	800ccbe <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800cc84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc86:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800cc8a:	d118      	bne.n	800ccbe <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cc8c:	4b8e      	ldr	r3, [pc, #568]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d005      	beq.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800cc98:	4b8b      	ldr	r3, [pc, #556]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cc9a:	689b      	ldr	r3, [r3, #8]
 800cc9c:	0e1b      	lsrs	r3, r3, #24
 800cc9e:	f003 030f 	and.w	r3, r3, #15
 800cca2:	e006      	b.n	800ccb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800cca4:	4b88      	ldr	r3, [pc, #544]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cca6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ccaa:	041b      	lsls	r3, r3, #16
 800ccac:	0e1b      	lsrs	r3, r3, #24
 800ccae:	f003 030f 	and.w	r3, r3, #15
 800ccb2:	4a87      	ldr	r2, [pc, #540]	@ (800ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800ccb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccb8:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccba:	f000 bc26 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccc2:	f000 bc22 	b.w	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800ccc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccca:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ccce:	430b      	orrs	r3, r1
 800ccd0:	d164      	bne.n	800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800ccd2:	4b7d      	ldr	r3, [pc, #500]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ccd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ccd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ccdc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800ccde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d120      	bne.n	800cd26 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cce4:	4b78      	ldr	r3, [pc, #480]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f003 0320 	and.w	r3, r3, #32
 800ccec:	2b20      	cmp	r3, #32
 800ccee:	d117      	bne.n	800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ccf0:	4b75      	ldr	r3, [pc, #468]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ccf2:	689b      	ldr	r3, [r3, #8]
 800ccf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d005      	beq.n	800cd08 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800ccfc:	4b72      	ldr	r3, [pc, #456]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	0e1b      	lsrs	r3, r3, #24
 800cd02:	f003 030f 	and.w	r3, r3, #15
 800cd06:	e006      	b.n	800cd16 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800cd08:	4b6f      	ldr	r3, [pc, #444]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cd0e:	041b      	lsls	r3, r3, #16
 800cd10:	0e1b      	lsrs	r3, r3, #24
 800cd12:	f003 030f 	and.w	r3, r3, #15
 800cd16:	4a6e      	ldr	r2, [pc, #440]	@ (800ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800cd18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd1e:	e3f4      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800cd20:	2300      	movs	r3, #0
 800cd22:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd24:	e3f1      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800cd26:	4b68      	ldr	r3, [pc, #416]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cd2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd34:	d112      	bne.n	800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800cd36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd3c:	d10e      	bne.n	800cd5c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cd3e:	4b62      	ldr	r3, [pc, #392]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cd44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd4c:	d102      	bne.n	800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800cd4e:	23fa      	movs	r3, #250	@ 0xfa
 800cd50:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cd52:	e3da      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800cd54:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800cd58:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cd5a:	e3d6      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800cd5c:	4b5a      	ldr	r3, [pc, #360]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd68:	d106      	bne.n	800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800cd6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd70:	d102      	bne.n	800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800cd72:	4b56      	ldr	r3, [pc, #344]	@ (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800cd74:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd76:	e3c8      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800cd78:	4b53      	ldr	r3, [pc, #332]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cd7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cd7e:	f003 0302 	and.w	r3, r3, #2
 800cd82:	2b02      	cmp	r3, #2
 800cd84:	d107      	bne.n	800cd96 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800cd86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cd8c:	d103      	bne.n	800cd96 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800cd8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd92:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd94:	e3b9      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800cd96:	2300      	movs	r3, #0
 800cd98:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd9a:	e3b6      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800cd9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cda0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800cda4:	430b      	orrs	r3, r1
 800cda6:	d164      	bne.n	800ce72 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800cda8:	4b47      	ldr	r3, [pc, #284]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cdaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cdae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cdb2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800cdb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d120      	bne.n	800cdfc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cdba:	4b43      	ldr	r3, [pc, #268]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f003 0320 	and.w	r3, r3, #32
 800cdc2:	2b20      	cmp	r3, #32
 800cdc4:	d117      	bne.n	800cdf6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cdc6:	4b40      	ldr	r3, [pc, #256]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d005      	beq.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800cdd2:	4b3d      	ldr	r3, [pc, #244]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cdd4:	689b      	ldr	r3, [r3, #8]
 800cdd6:	0e1b      	lsrs	r3, r3, #24
 800cdd8:	f003 030f 	and.w	r3, r3, #15
 800cddc:	e006      	b.n	800cdec <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800cdde:	4b3a      	ldr	r3, [pc, #232]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cde0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cde4:	041b      	lsls	r3, r3, #16
 800cde6:	0e1b      	lsrs	r3, r3, #24
 800cde8:	f003 030f 	and.w	r3, r3, #15
 800cdec:	4a38      	ldr	r2, [pc, #224]	@ (800ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800cdee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdf2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdf4:	e389      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdfa:	e386      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800cdfc:	4b32      	ldr	r3, [pc, #200]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800cdfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ce0a:	d112      	bne.n	800ce32 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800ce0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce12:	d10e      	bne.n	800ce32 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ce14:	4b2c      	ldr	r3, [pc, #176]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ce1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce22:	d102      	bne.n	800ce2a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800ce24:	23fa      	movs	r3, #250	@ 0xfa
 800ce26:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ce28:	e36f      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800ce2a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ce2e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ce30:	e36b      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800ce32:	4b25      	ldr	r3, [pc, #148]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce3e:	d106      	bne.n	800ce4e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800ce40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce46:	d102      	bne.n	800ce4e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800ce48:	4b20      	ldr	r3, [pc, #128]	@ (800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800ce4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce4c:	e35d      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800ce4e:	4b1e      	ldr	r3, [pc, #120]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce54:	f003 0302 	and.w	r3, r3, #2
 800ce58:	2b02      	cmp	r3, #2
 800ce5a:	d107      	bne.n	800ce6c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800ce5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ce62:	d103      	bne.n	800ce6c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800ce64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce68:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce6a:	e34e      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce70:	e34b      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800ce72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce76:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800ce7a:	430b      	orrs	r3, r1
 800ce7c:	d14e      	bne.n	800cf1c <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800ce7e:	4b12      	ldr	r3, [pc, #72]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ce84:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800ce88:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800ce8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d103      	bne.n	800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ce90:	f7fd fbb8 	bl	800a604 <HAL_RCC_GetPCLK1Freq>
 800ce94:	6378      	str	r0, [r7, #52]	@ 0x34
 800ce96:	e338      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800ce98:	4b0b      	ldr	r3, [pc, #44]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ce9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cea2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cea6:	d119      	bne.n	800cedc <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800cea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceaa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ceae:	d115      	bne.n	800cedc <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ceb0:	4b05      	ldr	r3, [pc, #20]	@ (800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ceb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ceb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ceba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cebe:	d109      	bne.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800cec0:	23fa      	movs	r3, #250	@ 0xfa
 800cec2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800cec4:	e321      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cec6:	bf00      	nop
 800cec8:	46020c00 	.word	0x46020c00
 800cecc:	00f42400 	.word	0x00f42400
 800ced0:	0801077c 	.word	0x0801077c
      }
      else
      {
        frequency = LSI_VALUE;
 800ced4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ced8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ceda:	e316      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800cedc:	4ba8      	ldr	r3, [pc, #672]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cee8:	d106      	bne.n	800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800ceea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800cef0:	d102      	bne.n	800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800cef2:	4ba4      	ldr	r3, [pc, #656]	@ (800d184 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800cef4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cef6:	e308      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800cef8:	4ba1      	ldr	r3, [pc, #644]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cefa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cefe:	f003 0302 	and.w	r3, r3, #2
 800cf02:	2b02      	cmp	r3, #2
 800cf04:	d107      	bne.n	800cf16 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800cf06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf08:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800cf0c:	d103      	bne.n	800cf16 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800cf0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf12:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf14:	e2f9      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800cf16:	2300      	movs	r3, #0
 800cf18:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf1a:	e2f6      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800cf1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf20:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800cf24:	430b      	orrs	r3, r1
 800cf26:	d12d      	bne.n	800cf84 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800cf28:	4b95      	ldr	r3, [pc, #596]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cf2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cf2e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800cf32:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800cf34:	4b92      	ldr	r3, [pc, #584]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf40:	d105      	bne.n	800cf4e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800cf42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d102      	bne.n	800cf4e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800cf48:	4b8e      	ldr	r3, [pc, #568]	@ (800d184 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800cf4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf4c:	e2dd      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800cf4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf54:	d107      	bne.n	800cf66 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7fe fb4c 	bl	800b5f8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf62:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf64:	e2d1      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800cf66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cf6c:	d107      	bne.n	800cf7e <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf6e:	f107 0318 	add.w	r3, r7, #24
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fe fc9a 	bl	800b8ac <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800cf78:	69bb      	ldr	r3, [r7, #24]
 800cf7a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf7c:	e2c5      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf82:	e2c2      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800cf84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf88:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800cf8c:	430b      	orrs	r3, r1
 800cf8e:	d156      	bne.n	800d03e <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800cf90:	4b7b      	ldr	r3, [pc, #492]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cf92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cf96:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800cf9a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800cf9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cfa2:	d028      	beq.n	800cff6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800cfa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfa6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cfaa:	d845      	bhi.n	800d038 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800cfac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cfb2:	d013      	beq.n	800cfdc <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800cfb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cfba:	d83d      	bhi.n	800d038 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800cfbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d004      	beq.n	800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800cfc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cfc8:	d004      	beq.n	800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800cfca:	e035      	b.n	800d038 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800cfcc:	f7fd fb2e 	bl	800a62c <HAL_RCC_GetPCLK2Freq>
 800cfd0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cfd2:	e29a      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800cfd4:	f7fd f9fa 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800cfd8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cfda:	e296      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cfdc:	4b68      	ldr	r3, [pc, #416]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cfe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cfe8:	d102      	bne.n	800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800cfea:	4b66      	ldr	r3, [pc, #408]	@ (800d184 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800cfec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cfee:	e28c      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cff0:	2300      	movs	r3, #0
 800cff2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cff4:	e289      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cff6:	4b62      	ldr	r3, [pc, #392]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f003 0320 	and.w	r3, r3, #32
 800cffe:	2b20      	cmp	r3, #32
 800d000:	d117      	bne.n	800d032 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d002:	4b5f      	ldr	r3, [pc, #380]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d004:	689b      	ldr	r3, [r3, #8]
 800d006:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d005      	beq.n	800d01a <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800d00e:	4b5c      	ldr	r3, [pc, #368]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d010:	689b      	ldr	r3, [r3, #8]
 800d012:	0e1b      	lsrs	r3, r3, #24
 800d014:	f003 030f 	and.w	r3, r3, #15
 800d018:	e006      	b.n	800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800d01a:	4b59      	ldr	r3, [pc, #356]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d01c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d020:	041b      	lsls	r3, r3, #16
 800d022:	0e1b      	lsrs	r3, r3, #24
 800d024:	f003 030f 	and.w	r3, r3, #15
 800d028:	4a57      	ldr	r2, [pc, #348]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d02a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d02e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d030:	e26b      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d032:	2300      	movs	r3, #0
 800d034:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d036:	e268      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d038:	2300      	movs	r3, #0
 800d03a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d03c:	e265      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800d03e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d042:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800d046:	430b      	orrs	r3, r1
 800d048:	d156      	bne.n	800d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800d04a:	4b4d      	ldr	r3, [pc, #308]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d04c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d050:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d054:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d058:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d05c:	d028      	beq.n	800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800d05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d060:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d064:	d845      	bhi.n	800d0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d068:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d06c:	d013      	beq.n	800d096 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800d06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d070:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d074:	d83d      	bhi.n	800d0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d004      	beq.n	800d086 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800d07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d07e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d082:	d004      	beq.n	800d08e <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800d084:	e035      	b.n	800d0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800d086:	f7fd fabd 	bl	800a604 <HAL_RCC_GetPCLK1Freq>
 800d08a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d08c:	e23d      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d08e:	f7fd f99d 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800d092:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d094:	e239      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d096:	4b3a      	ldr	r3, [pc, #232]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d09e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d0a2:	d102      	bne.n	800d0aa <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800d0a4:	4b37      	ldr	r3, [pc, #220]	@ (800d184 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d0a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d0a8:	e22f      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d0ae:	e22c      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d0b0:	4b33      	ldr	r3, [pc, #204]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f003 0320 	and.w	r3, r3, #32
 800d0b8:	2b20      	cmp	r3, #32
 800d0ba:	d117      	bne.n	800d0ec <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d0bc:	4b30      	ldr	r3, [pc, #192]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d005      	beq.n	800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800d0c8:	4b2d      	ldr	r3, [pc, #180]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d0ca:	689b      	ldr	r3, [r3, #8]
 800d0cc:	0e1b      	lsrs	r3, r3, #24
 800d0ce:	f003 030f 	and.w	r3, r3, #15
 800d0d2:	e006      	b.n	800d0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800d0d4:	4b2a      	ldr	r3, [pc, #168]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d0d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d0da:	041b      	lsls	r3, r3, #16
 800d0dc:	0e1b      	lsrs	r3, r3, #24
 800d0de:	f003 030f 	and.w	r3, r3, #15
 800d0e2:	4a29      	ldr	r2, [pc, #164]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0e8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d0ea:	e20e      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d0f0:	e20b      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d0f6:	e208      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800d0f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0fc:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800d100:	430b      	orrs	r3, r1
 800d102:	d17c      	bne.n	800d1fe <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800d104:	4b1e      	ldr	r3, [pc, #120]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d106:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d10a:	f003 0318 	and.w	r3, r3, #24
 800d10e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d112:	2b18      	cmp	r3, #24
 800d114:	d870      	bhi.n	800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800d116:	a201      	add	r2, pc, #4	@ (adr r2, 800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800d118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d11c:	0800d18d 	.word	0x0800d18d
 800d120:	0800d1f9 	.word	0x0800d1f9
 800d124:	0800d1f9 	.word	0x0800d1f9
 800d128:	0800d1f9 	.word	0x0800d1f9
 800d12c:	0800d1f9 	.word	0x0800d1f9
 800d130:	0800d1f9 	.word	0x0800d1f9
 800d134:	0800d1f9 	.word	0x0800d1f9
 800d138:	0800d1f9 	.word	0x0800d1f9
 800d13c:	0800d195 	.word	0x0800d195
 800d140:	0800d1f9 	.word	0x0800d1f9
 800d144:	0800d1f9 	.word	0x0800d1f9
 800d148:	0800d1f9 	.word	0x0800d1f9
 800d14c:	0800d1f9 	.word	0x0800d1f9
 800d150:	0800d1f9 	.word	0x0800d1f9
 800d154:	0800d1f9 	.word	0x0800d1f9
 800d158:	0800d1f9 	.word	0x0800d1f9
 800d15c:	0800d19d 	.word	0x0800d19d
 800d160:	0800d1f9 	.word	0x0800d1f9
 800d164:	0800d1f9 	.word	0x0800d1f9
 800d168:	0800d1f9 	.word	0x0800d1f9
 800d16c:	0800d1f9 	.word	0x0800d1f9
 800d170:	0800d1f9 	.word	0x0800d1f9
 800d174:	0800d1f9 	.word	0x0800d1f9
 800d178:	0800d1f9 	.word	0x0800d1f9
 800d17c:	0800d1b7 	.word	0x0800d1b7
 800d180:	46020c00 	.word	0x46020c00
 800d184:	00f42400 	.word	0x00f42400
 800d188:	0801077c 	.word	0x0801077c
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800d18c:	f7fd fa62 	bl	800a654 <HAL_RCC_GetPCLK3Freq>
 800d190:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d192:	e1ba      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d194:	f7fd f91a 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800d198:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d19a:	e1b6      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d19c:	4b9f      	ldr	r3, [pc, #636]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d1a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1a8:	d102      	bne.n	800d1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800d1aa:	4b9d      	ldr	r3, [pc, #628]	@ (800d420 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d1ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d1ae:	e1ac      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1b4:	e1a9      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d1b6:	4b99      	ldr	r3, [pc, #612]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f003 0320 	and.w	r3, r3, #32
 800d1be:	2b20      	cmp	r3, #32
 800d1c0:	d117      	bne.n	800d1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d1c2:	4b96      	ldr	r3, [pc, #600]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d1c4:	689b      	ldr	r3, [r3, #8]
 800d1c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d005      	beq.n	800d1da <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800d1ce:	4b93      	ldr	r3, [pc, #588]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d1d0:	689b      	ldr	r3, [r3, #8]
 800d1d2:	0e1b      	lsrs	r3, r3, #24
 800d1d4:	f003 030f 	and.w	r3, r3, #15
 800d1d8:	e006      	b.n	800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800d1da:	4b90      	ldr	r3, [pc, #576]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d1dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d1e0:	041b      	lsls	r3, r3, #16
 800d1e2:	0e1b      	lsrs	r3, r3, #24
 800d1e4:	f003 030f 	and.w	r3, r3, #15
 800d1e8:	4a8e      	ldr	r2, [pc, #568]	@ (800d424 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d1ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1ee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d1f0:	e18b      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1f6:	e188      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1fc:	e185      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800d1fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d202:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800d206:	430b      	orrs	r3, r1
 800d208:	d155      	bne.n	800d2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800d20a:	4b84      	ldr	r3, [pc, #528]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d20c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d210:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d214:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d218:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d21c:	d013      	beq.n	800d246 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800d21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d220:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d224:	d844      	bhi.n	800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d228:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d22c:	d013      	beq.n	800d256 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800d22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d230:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d234:	d83c      	bhi.n	800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d014      	beq.n	800d266 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800d23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d23e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d242:	d014      	beq.n	800d26e <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800d244:	e034      	b.n	800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d246:	f107 0318 	add.w	r3, r7, #24
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7fe fb2e 	bl	800b8ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d250:	69fb      	ldr	r3, [r7, #28]
 800d252:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d254:	e159      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7fe f9cc 	bl	800b5f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d262:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d264:	e151      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d266:	f7fd f8b1 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800d26a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d26c:	e14d      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d26e:	4b6b      	ldr	r3, [pc, #428]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f003 0320 	and.w	r3, r3, #32
 800d276:	2b20      	cmp	r3, #32
 800d278:	d117      	bne.n	800d2aa <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d27a:	4b68      	ldr	r3, [pc, #416]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d27c:	689b      	ldr	r3, [r3, #8]
 800d27e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d282:	2b00      	cmp	r3, #0
 800d284:	d005      	beq.n	800d292 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800d286:	4b65      	ldr	r3, [pc, #404]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	0e1b      	lsrs	r3, r3, #24
 800d28c:	f003 030f 	and.w	r3, r3, #15
 800d290:	e006      	b.n	800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800d292:	4b62      	ldr	r3, [pc, #392]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d294:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d298:	041b      	lsls	r3, r3, #16
 800d29a:	0e1b      	lsrs	r3, r3, #24
 800d29c:	f003 030f 	and.w	r3, r3, #15
 800d2a0:	4a60      	ldr	r2, [pc, #384]	@ (800d424 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d2a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d2a8:	e12f      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2ae:	e12c      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2b4:	e129      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800d2b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2ba:	1e59      	subs	r1, r3, #1
 800d2bc:	ea52 0301 	orrs.w	r3, r2, r1
 800d2c0:	d13c      	bne.n	800d33c <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800d2c2:	4b56      	ldr	r3, [pc, #344]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d2c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d2c8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800d2cc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d2d4:	d027      	beq.n	800d326 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800d2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d2dc:	d82b      	bhi.n	800d336 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d2e4:	d017      	beq.n	800d316 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800d2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d2ec:	d823      	bhi.n	800d336 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800d2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d004      	beq.n	800d2fe <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800d2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d2fa:	d004      	beq.n	800d306 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800d2fc:	e01b      	b.n	800d336 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d2fe:	f7fd f865 	bl	800a3cc <HAL_RCC_GetSysClockFreq>
 800d302:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d304:	e101      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7fe f974 	bl	800b5f8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d312:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d314:	e0f9      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d316:	f107 0318 	add.w	r3, r7, #24
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7fe fac6 	bl	800b8ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d320:	69fb      	ldr	r3, [r7, #28]
 800d322:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d324:	e0f1      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d326:	f107 030c 	add.w	r3, r7, #12
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7fe fc18 	bl	800bb60 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d334:	e0e9      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d336:	2300      	movs	r3, #0
 800d338:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d33a:	e0e6      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800d33c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d340:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800d344:	430b      	orrs	r3, r1
 800d346:	d131      	bne.n	800d3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800d348:	4b34      	ldr	r3, [pc, #208]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d34a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d34e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d352:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800d354:	4b31      	ldr	r3, [pc, #196]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d356:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d35a:	f003 0302 	and.w	r3, r3, #2
 800d35e:	2b02      	cmp	r3, #2
 800d360:	d106      	bne.n	800d370 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800d362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d364:	2b00      	cmp	r3, #0
 800d366:	d103      	bne.n	800d370 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800d368:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d36c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d36e:	e0cc      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800d370:	4b2a      	ldr	r3, [pc, #168]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d372:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d376:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d37a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d37e:	d112      	bne.n	800d3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800d380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d382:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d386:	d10e      	bne.n	800d3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d388:	4b24      	ldr	r3, [pc, #144]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d38a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d38e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d392:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d396:	d102      	bne.n	800d39e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800d398:	23fa      	movs	r3, #250	@ 0xfa
 800d39a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d39c:	e0b5      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d39e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d3a2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d3a4:	e0b1      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3aa:	e0ae      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800d3ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3b0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d3b4:	430b      	orrs	r3, r1
 800d3b6:	d13b      	bne.n	800d430 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800d3b8:	4b18      	ldr	r3, [pc, #96]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d3ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d3be:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d3c2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800d3c4:	4b15      	ldr	r3, [pc, #84]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d3cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d3d0:	d105      	bne.n	800d3de <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800d3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d102      	bne.n	800d3de <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800d3d8:	4b13      	ldr	r3, [pc, #76]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800d3da:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3dc:	e095      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800d3de:	4b0f      	ldr	r3, [pc, #60]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d3e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d3ea:	d106      	bne.n	800d3fa <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800d3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d3f2:	d102      	bne.n	800d3fa <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800d3f4:	4b0d      	ldr	r3, [pc, #52]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800d3f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3f8:	e087      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800d3fa:	4b08      	ldr	r3, [pc, #32]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d406:	d106      	bne.n	800d416 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800d408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d40a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d40e:	d102      	bne.n	800d416 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800d410:	4b03      	ldr	r3, [pc, #12]	@ (800d420 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d412:	637b      	str	r3, [r7, #52]	@ 0x34
 800d414:	e079      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800d416:	2300      	movs	r3, #0
 800d418:	637b      	str	r3, [r7, #52]	@ 0x34
 800d41a:	e076      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d41c:	46020c00 	.word	0x46020c00
 800d420:	00f42400 	.word	0x00f42400
 800d424:	0801077c 	.word	0x0801077c
 800d428:	02dc6c00 	.word	0x02dc6c00
 800d42c:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800d430:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d434:	1e99      	subs	r1, r3, #2
 800d436:	ea52 0301 	orrs.w	r3, r2, r1
 800d43a:	d120      	bne.n	800d47e <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800d43c:	4b35      	ldr	r3, [pc, #212]	@ (800d514 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d43e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d442:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d446:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d004      	beq.n	800d458 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800d44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d450:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d454:	d008      	beq.n	800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800d456:	e00f      	b.n	800d478 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d458:	f107 030c 	add.w	r3, r7, #12
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7fe fb7f 	bl	800bb60 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d466:	e050      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d468:	f107 0318 	add.w	r3, r7, #24
 800d46c:	4618      	mov	r0, r3
 800d46e:	f7fe fa1d 	bl	800b8ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800d472:	6a3b      	ldr	r3, [r7, #32]
 800d474:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d476:	e048      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d478:	2300      	movs	r3, #0
 800d47a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d47c:	e045      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800d47e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d482:	f1a3 0108 	sub.w	r1, r3, #8
 800d486:	ea52 0301 	orrs.w	r3, r2, r1
 800d48a:	d13c      	bne.n	800d506 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800d48c:	4b21      	ldr	r3, [pc, #132]	@ (800d514 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d48e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d492:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800d496:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800d498:	4b1e      	ldr	r3, [pc, #120]	@ (800d514 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d4a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d4a4:	d105      	bne.n	800d4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800d4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d102      	bne.n	800d4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800d4ac:	4b1a      	ldr	r3, [pc, #104]	@ (800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800d4ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4b0:	e02b      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800d4b2:	4b18      	ldr	r3, [pc, #96]	@ (800d514 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d4ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d4be:	d106      	bne.n	800d4ce <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800d4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d4c6:	d102      	bne.n	800d4ce <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800d4c8:	4b14      	ldr	r3, [pc, #80]	@ (800d51c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800d4ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4cc:	e01d      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d4d4:	d107      	bne.n	800d4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d4d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7fe f88c 	bl	800b5f8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800d4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4e4:	e011      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800d4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800d4ec:	d108      	bne.n	800d500 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d4ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7fe f880 	bl	800b5f8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800d4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4fa:	085b      	lsrs	r3, r3, #1
 800d4fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4fe:	e004      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800d500:	2300      	movs	r3, #0
 800d502:	637b      	str	r3, [r7, #52]	@ 0x34
 800d504:	e001      	b.n	800d50a <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800d506:	2300      	movs	r3, #0
 800d508:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800d50a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3738      	adds	r7, #56	@ 0x38
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	46020c00 	.word	0x46020c00
 800d518:	00f42400 	.word	0x00f42400
 800d51c:	007a1200 	.word	0x007a1200

0800d520 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b084      	sub	sp, #16
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800d528:	4b47      	ldr	r3, [pc, #284]	@ (800d648 <RCCEx_PLL2_Config+0x128>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4a46      	ldr	r2, [pc, #280]	@ (800d648 <RCCEx_PLL2_Config+0x128>)
 800d52e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d532:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d534:	f7f5 f9ae 	bl	8002894 <HAL_GetTick>
 800d538:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d53a:	e008      	b.n	800d54e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d53c:	f7f5 f9aa 	bl	8002894 <HAL_GetTick>
 800d540:	4602      	mov	r2, r0
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	1ad3      	subs	r3, r2, r3
 800d546:	2b02      	cmp	r3, #2
 800d548:	d901      	bls.n	800d54e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d54a:	2303      	movs	r3, #3
 800d54c:	e077      	b.n	800d63e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d54e:	4b3e      	ldr	r3, [pc, #248]	@ (800d648 <RCCEx_PLL2_Config+0x128>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d556:	2b00      	cmp	r3, #0
 800d558:	d1f0      	bne.n	800d53c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800d55a:	4b3b      	ldr	r3, [pc, #236]	@ (800d648 <RCCEx_PLL2_Config+0x128>)
 800d55c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d55e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800d562:	f023 0303 	bic.w	r3, r3, #3
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	6811      	ldr	r1, [r2, #0]
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	6852      	ldr	r2, [r2, #4]
 800d56e:	3a01      	subs	r2, #1
 800d570:	0212      	lsls	r2, r2, #8
 800d572:	430a      	orrs	r2, r1
 800d574:	4934      	ldr	r1, [pc, #208]	@ (800d648 <RCCEx_PLL2_Config+0x128>)
 800d576:	4313      	orrs	r3, r2
 800d578:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800d57a:	4b33      	ldr	r3, [pc, #204]	@ (800d648 <RCCEx_PLL2_Config+0x128>)
 800d57c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d57e:	4b33      	ldr	r3, [pc, #204]	@ (800d64c <RCCEx_PLL2_Config+0x12c>)
 800d580:	4013      	ands	r3, r2
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	6892      	ldr	r2, [r2, #8]
 800d586:	3a01      	subs	r2, #1
 800d588:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	68d2      	ldr	r2, [r2, #12]
 800d590:	3a01      	subs	r2, #1
 800d592:	0252      	lsls	r2, r2, #9
 800d594:	b292      	uxth	r2, r2
 800d596:	4311      	orrs	r1, r2
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	6912      	ldr	r2, [r2, #16]
 800d59c:	3a01      	subs	r2, #1
 800d59e:	0412      	lsls	r2, r2, #16
 800d5a0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800d5a4:	4311      	orrs	r1, r2
 800d5a6:	687a      	ldr	r2, [r7, #4]
 800d5a8:	6952      	ldr	r2, [r2, #20]
 800d5aa:	3a01      	subs	r2, #1
 800d5ac:	0612      	lsls	r2, r2, #24
 800d5ae:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800d5b2:	430a      	orrs	r2, r1
 800d5b4:	4924      	ldr	r1, [pc, #144]	@ (800d648 <RCCEx_PLL2_Config+0x128>)
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800d5ba:	4b23      	ldr	r3, [pc, #140]	@ (800d648 <RCCEx_PLL2_Config+0x128>)
 800d5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5be:	f023 020c 	bic.w	r2, r3, #12
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	699b      	ldr	r3, [r3, #24]
 800d5c6:	4920      	ldr	r1, [pc, #128]	@ (800d648 <RCCEx_PLL2_Config+0x128>)
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800d5cc:	4b1e      	ldr	r3, [pc, #120]	@ (800d648 <RCCEx_PLL2_Config+0x128>)
 800d5ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6a1b      	ldr	r3, [r3, #32]
 800d5d4:	491c      	ldr	r1, [pc, #112]	@ (800d648 <RCCEx_PLL2_Config+0x128>)
 800d5d6:	4313      	orrs	r3, r2
 800d5d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800d5da:	4b1b      	ldr	r3, [pc, #108]	@ (800d648 <RCCEx_PLL2_Config+0x128>)
 800d5dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5de:	4a1a      	ldr	r2, [pc, #104]	@ (800d648 <RCCEx_PLL2_Config+0x128>)
 800d5e0:	f023 0310 	bic.w	r3, r3, #16
 800d5e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d5e6:	4b18      	ldr	r3, [pc, #96]	@ (800d648 <RCCEx_PLL2_Config+0x128>)
 800d5e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d5ee:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	69d2      	ldr	r2, [r2, #28]
 800d5f6:	00d2      	lsls	r2, r2, #3
 800d5f8:	4913      	ldr	r1, [pc, #76]	@ (800d648 <RCCEx_PLL2_Config+0x128>)
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800d5fe:	4b12      	ldr	r3, [pc, #72]	@ (800d648 <RCCEx_PLL2_Config+0x128>)
 800d600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d602:	4a11      	ldr	r2, [pc, #68]	@ (800d648 <RCCEx_PLL2_Config+0x128>)
 800d604:	f043 0310 	orr.w	r3, r3, #16
 800d608:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800d60a:	4b0f      	ldr	r3, [pc, #60]	@ (800d648 <RCCEx_PLL2_Config+0x128>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	4a0e      	ldr	r2, [pc, #56]	@ (800d648 <RCCEx_PLL2_Config+0x128>)
 800d610:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d614:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d616:	f7f5 f93d 	bl	8002894 <HAL_GetTick>
 800d61a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d61c:	e008      	b.n	800d630 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d61e:	f7f5 f939 	bl	8002894 <HAL_GetTick>
 800d622:	4602      	mov	r2, r0
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	1ad3      	subs	r3, r2, r3
 800d628:	2b02      	cmp	r3, #2
 800d62a:	d901      	bls.n	800d630 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800d62c:	2303      	movs	r3, #3
 800d62e:	e006      	b.n	800d63e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d630:	4b05      	ldr	r3, [pc, #20]	@ (800d648 <RCCEx_PLL2_Config+0x128>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d0f0      	beq.n	800d61e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800d63c:	2300      	movs	r3, #0

}
 800d63e:	4618      	mov	r0, r3
 800d640:	3710      	adds	r7, #16
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	46020c00 	.word	0x46020c00
 800d64c:	80800000 	.word	0x80800000

0800d650 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800d658:	4b47      	ldr	r3, [pc, #284]	@ (800d778 <RCCEx_PLL3_Config+0x128>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	4a46      	ldr	r2, [pc, #280]	@ (800d778 <RCCEx_PLL3_Config+0x128>)
 800d65e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d662:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d664:	f7f5 f916 	bl	8002894 <HAL_GetTick>
 800d668:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d66a:	e008      	b.n	800d67e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d66c:	f7f5 f912 	bl	8002894 <HAL_GetTick>
 800d670:	4602      	mov	r2, r0
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	1ad3      	subs	r3, r2, r3
 800d676:	2b02      	cmp	r3, #2
 800d678:	d901      	bls.n	800d67e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d67a:	2303      	movs	r3, #3
 800d67c:	e077      	b.n	800d76e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d67e:	4b3e      	ldr	r3, [pc, #248]	@ (800d778 <RCCEx_PLL3_Config+0x128>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d686:	2b00      	cmp	r3, #0
 800d688:	d1f0      	bne.n	800d66c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800d68a:	4b3b      	ldr	r3, [pc, #236]	@ (800d778 <RCCEx_PLL3_Config+0x128>)
 800d68c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d68e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800d692:	f023 0303 	bic.w	r3, r3, #3
 800d696:	687a      	ldr	r2, [r7, #4]
 800d698:	6811      	ldr	r1, [r2, #0]
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	6852      	ldr	r2, [r2, #4]
 800d69e:	3a01      	subs	r2, #1
 800d6a0:	0212      	lsls	r2, r2, #8
 800d6a2:	430a      	orrs	r2, r1
 800d6a4:	4934      	ldr	r1, [pc, #208]	@ (800d778 <RCCEx_PLL3_Config+0x128>)
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	630b      	str	r3, [r1, #48]	@ 0x30
 800d6aa:	4b33      	ldr	r3, [pc, #204]	@ (800d778 <RCCEx_PLL3_Config+0x128>)
 800d6ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d6ae:	4b33      	ldr	r3, [pc, #204]	@ (800d77c <RCCEx_PLL3_Config+0x12c>)
 800d6b0:	4013      	ands	r3, r2
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	6892      	ldr	r2, [r2, #8]
 800d6b6:	3a01      	subs	r2, #1
 800d6b8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	68d2      	ldr	r2, [r2, #12]
 800d6c0:	3a01      	subs	r2, #1
 800d6c2:	0252      	lsls	r2, r2, #9
 800d6c4:	b292      	uxth	r2, r2
 800d6c6:	4311      	orrs	r1, r2
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	6912      	ldr	r2, [r2, #16]
 800d6cc:	3a01      	subs	r2, #1
 800d6ce:	0412      	lsls	r2, r2, #16
 800d6d0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800d6d4:	4311      	orrs	r1, r2
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	6952      	ldr	r2, [r2, #20]
 800d6da:	3a01      	subs	r2, #1
 800d6dc:	0612      	lsls	r2, r2, #24
 800d6de:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800d6e2:	430a      	orrs	r2, r1
 800d6e4:	4924      	ldr	r1, [pc, #144]	@ (800d778 <RCCEx_PLL3_Config+0x128>)
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800d6ea:	4b23      	ldr	r3, [pc, #140]	@ (800d778 <RCCEx_PLL3_Config+0x128>)
 800d6ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6ee:	f023 020c 	bic.w	r2, r3, #12
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	699b      	ldr	r3, [r3, #24]
 800d6f6:	4920      	ldr	r1, [pc, #128]	@ (800d778 <RCCEx_PLL3_Config+0x128>)
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800d6fc:	4b1e      	ldr	r3, [pc, #120]	@ (800d778 <RCCEx_PLL3_Config+0x128>)
 800d6fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6a1b      	ldr	r3, [r3, #32]
 800d704:	491c      	ldr	r1, [pc, #112]	@ (800d778 <RCCEx_PLL3_Config+0x128>)
 800d706:	4313      	orrs	r3, r2
 800d708:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800d70a:	4b1b      	ldr	r3, [pc, #108]	@ (800d778 <RCCEx_PLL3_Config+0x128>)
 800d70c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d70e:	4a1a      	ldr	r2, [pc, #104]	@ (800d778 <RCCEx_PLL3_Config+0x128>)
 800d710:	f023 0310 	bic.w	r3, r3, #16
 800d714:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d716:	4b18      	ldr	r3, [pc, #96]	@ (800d778 <RCCEx_PLL3_Config+0x128>)
 800d718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d71a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d71e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800d722:	687a      	ldr	r2, [r7, #4]
 800d724:	69d2      	ldr	r2, [r2, #28]
 800d726:	00d2      	lsls	r2, r2, #3
 800d728:	4913      	ldr	r1, [pc, #76]	@ (800d778 <RCCEx_PLL3_Config+0x128>)
 800d72a:	4313      	orrs	r3, r2
 800d72c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800d72e:	4b12      	ldr	r3, [pc, #72]	@ (800d778 <RCCEx_PLL3_Config+0x128>)
 800d730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d732:	4a11      	ldr	r2, [pc, #68]	@ (800d778 <RCCEx_PLL3_Config+0x128>)
 800d734:	f043 0310 	orr.w	r3, r3, #16
 800d738:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800d73a:	4b0f      	ldr	r3, [pc, #60]	@ (800d778 <RCCEx_PLL3_Config+0x128>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	4a0e      	ldr	r2, [pc, #56]	@ (800d778 <RCCEx_PLL3_Config+0x128>)
 800d740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d744:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d746:	f7f5 f8a5 	bl	8002894 <HAL_GetTick>
 800d74a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d74c:	e008      	b.n	800d760 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d74e:	f7f5 f8a1 	bl	8002894 <HAL_GetTick>
 800d752:	4602      	mov	r2, r0
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	1ad3      	subs	r3, r2, r3
 800d758:	2b02      	cmp	r3, #2
 800d75a:	d901      	bls.n	800d760 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800d75c:	2303      	movs	r3, #3
 800d75e:	e006      	b.n	800d76e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d760:	4b05      	ldr	r3, [pc, #20]	@ (800d778 <RCCEx_PLL3_Config+0x128>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d0f0      	beq.n	800d74e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800d76c:	2300      	movs	r3, #0
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3710      	adds	r7, #16
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
 800d776:	bf00      	nop
 800d778:	46020c00 	.word	0x46020c00
 800d77c:	80800000 	.word	0x80800000

0800d780 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b084      	sub	sp, #16
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d788:	2301      	movs	r3, #1
 800d78a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d071      	beq.n	800d876 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d106      	bne.n	800d7ac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f7f4 fc10 	bl	8001fcc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2202      	movs	r2, #2
 800d7b0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d7b4:	4b32      	ldr	r3, [pc, #200]	@ (800d880 <HAL_RTC_Init+0x100>)
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	f003 0310 	and.w	r3, r3, #16
 800d7bc:	2b10      	cmp	r3, #16
 800d7be:	d051      	beq.n	800d864 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d7c0:	4b2f      	ldr	r3, [pc, #188]	@ (800d880 <HAL_RTC_Init+0x100>)
 800d7c2:	22ca      	movs	r2, #202	@ 0xca
 800d7c4:	625a      	str	r2, [r3, #36]	@ 0x24
 800d7c6:	4b2e      	ldr	r3, [pc, #184]	@ (800d880 <HAL_RTC_Init+0x100>)
 800d7c8:	2253      	movs	r2, #83	@ 0x53
 800d7ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f000 f88b 	bl	800d8e8 <RTC_EnterInitMode>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d7d6:	7bfb      	ldrb	r3, [r7, #15]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d13f      	bne.n	800d85c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800d7dc:	4b28      	ldr	r3, [pc, #160]	@ (800d880 <HAL_RTC_Init+0x100>)
 800d7de:	699b      	ldr	r3, [r3, #24]
 800d7e0:	4a27      	ldr	r2, [pc, #156]	@ (800d880 <HAL_RTC_Init+0x100>)
 800d7e2:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800d7e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7ea:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800d7ec:	4b24      	ldr	r3, [pc, #144]	@ (800d880 <HAL_RTC_Init+0x100>)
 800d7ee:	699a      	ldr	r2, [r3, #24]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6859      	ldr	r1, [r3, #4]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	691b      	ldr	r3, [r3, #16]
 800d7f8:	4319      	orrs	r1, r3
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	699b      	ldr	r3, [r3, #24]
 800d7fe:	430b      	orrs	r3, r1
 800d800:	491f      	ldr	r1, [pc, #124]	@ (800d880 <HAL_RTC_Init+0x100>)
 800d802:	4313      	orrs	r3, r2
 800d804:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	68da      	ldr	r2, [r3, #12]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	689b      	ldr	r3, [r3, #8]
 800d80e:	041b      	lsls	r3, r3, #16
 800d810:	491b      	ldr	r1, [pc, #108]	@ (800d880 <HAL_RTC_Init+0x100>)
 800d812:	4313      	orrs	r3, r2
 800d814:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800d816:	4b1a      	ldr	r3, [pc, #104]	@ (800d880 <HAL_RTC_Init+0x100>)
 800d818:	68db      	ldr	r3, [r3, #12]
 800d81a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d826:	430b      	orrs	r3, r1
 800d828:	4915      	ldr	r1, [pc, #84]	@ (800d880 <HAL_RTC_Init+0x100>)
 800d82a:	4313      	orrs	r3, r2
 800d82c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 f896 	bl	800d960 <RTC_ExitInitMode>
 800d834:	4603      	mov	r3, r0
 800d836:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800d838:	7bfb      	ldrb	r3, [r7, #15]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d10e      	bne.n	800d85c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800d83e:	4b10      	ldr	r3, [pc, #64]	@ (800d880 <HAL_RTC_Init+0x100>)
 800d840:	699b      	ldr	r3, [r3, #24]
 800d842:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6a19      	ldr	r1, [r3, #32]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	69db      	ldr	r3, [r3, #28]
 800d84e:	4319      	orrs	r1, r3
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	695b      	ldr	r3, [r3, #20]
 800d854:	430b      	orrs	r3, r1
 800d856:	490a      	ldr	r1, [pc, #40]	@ (800d880 <HAL_RTC_Init+0x100>)
 800d858:	4313      	orrs	r3, r2
 800d85a:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d85c:	4b08      	ldr	r3, [pc, #32]	@ (800d880 <HAL_RTC_Init+0x100>)
 800d85e:	22ff      	movs	r2, #255	@ 0xff
 800d860:	625a      	str	r2, [r3, #36]	@ 0x24
 800d862:	e001      	b.n	800d868 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800d864:	2300      	movs	r3, #0
 800d866:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d868:	7bfb      	ldrb	r3, [r7, #15]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d103      	bne.n	800d876 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2201      	movs	r2, #1
 800d872:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800d876:	7bfb      	ldrb	r3, [r7, #15]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3710      	adds	r7, #16
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	46007800 	.word	0x46007800

0800d884 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b084      	sub	sp, #16
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800d88c:	4b15      	ldr	r3, [pc, #84]	@ (800d8e4 <HAL_RTC_WaitForSynchro+0x60>)
 800d88e:	68db      	ldr	r3, [r3, #12]
 800d890:	4a14      	ldr	r2, [pc, #80]	@ (800d8e4 <HAL_RTC_WaitForSynchro+0x60>)
 800d892:	f023 0320 	bic.w	r3, r3, #32
 800d896:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800d898:	f7f4 fffc 	bl	8002894 <HAL_GetTick>
 800d89c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800d89e:	e013      	b.n	800d8c8 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d8a0:	f7f4 fff8 	bl	8002894 <HAL_GetTick>
 800d8a4:	4602      	mov	r2, r0
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	1ad3      	subs	r3, r2, r3
 800d8aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d8ae:	d90b      	bls.n	800d8c8 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800d8b0:	4b0c      	ldr	r3, [pc, #48]	@ (800d8e4 <HAL_RTC_WaitForSynchro+0x60>)
 800d8b2:	68db      	ldr	r3, [r3, #12]
 800d8b4:	f003 0320 	and.w	r3, r3, #32
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d10c      	bne.n	800d8d6 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2203      	movs	r2, #3
 800d8c0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800d8c4:	2303      	movs	r3, #3
 800d8c6:	e008      	b.n	800d8da <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800d8c8:	4b06      	ldr	r3, [pc, #24]	@ (800d8e4 <HAL_RTC_WaitForSynchro+0x60>)
 800d8ca:	68db      	ldr	r3, [r3, #12]
 800d8cc:	f003 0320 	and.w	r3, r3, #32
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d0e5      	beq.n	800d8a0 <HAL_RTC_WaitForSynchro+0x1c>
 800d8d4:	e000      	b.n	800d8d8 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800d8d6:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800d8d8:	2300      	movs	r3, #0
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3710      	adds	r7, #16
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	46007800 	.word	0x46007800

0800d8e8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800d8f4:	4b19      	ldr	r3, [pc, #100]	@ (800d95c <RTC_EnterInitMode+0x74>)
 800d8f6:	68db      	ldr	r3, [r3, #12]
 800d8f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d128      	bne.n	800d952 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d900:	4b16      	ldr	r3, [pc, #88]	@ (800d95c <RTC_EnterInitMode+0x74>)
 800d902:	68db      	ldr	r3, [r3, #12]
 800d904:	4a15      	ldr	r2, [pc, #84]	@ (800d95c <RTC_EnterInitMode+0x74>)
 800d906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d90a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800d90c:	f7f4 ffc2 	bl	8002894 <HAL_GetTick>
 800d910:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d912:	e013      	b.n	800d93c <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d914:	f7f4 ffbe 	bl	8002894 <HAL_GetTick>
 800d918:	4602      	mov	r2, r0
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	1ad3      	subs	r3, r2, r3
 800d91e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d922:	d90b      	bls.n	800d93c <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800d924:	4b0d      	ldr	r3, [pc, #52]	@ (800d95c <RTC_EnterInitMode+0x74>)
 800d926:	68db      	ldr	r3, [r3, #12]
 800d928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d10f      	bne.n	800d950 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800d930:	2303      	movs	r3, #3
 800d932:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2203      	movs	r2, #3
 800d938:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d93c:	4b07      	ldr	r3, [pc, #28]	@ (800d95c <RTC_EnterInitMode+0x74>)
 800d93e:	68db      	ldr	r3, [r3, #12]
 800d940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d944:	2b00      	cmp	r3, #0
 800d946:	d104      	bne.n	800d952 <RTC_EnterInitMode+0x6a>
 800d948:	7bfb      	ldrb	r3, [r7, #15]
 800d94a:	2b03      	cmp	r3, #3
 800d94c:	d1e2      	bne.n	800d914 <RTC_EnterInitMode+0x2c>
 800d94e:	e000      	b.n	800d952 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800d950:	bf00      	nop
        }
      }
    }
  }

  return status;
 800d952:	7bfb      	ldrb	r3, [r7, #15]
}
 800d954:	4618      	mov	r0, r3
 800d956:	3710      	adds	r7, #16
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	46007800 	.word	0x46007800

0800d960 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d968:	2300      	movs	r3, #0
 800d96a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d96c:	4b1a      	ldr	r3, [pc, #104]	@ (800d9d8 <RTC_ExitInitMode+0x78>)
 800d96e:	68db      	ldr	r3, [r3, #12]
 800d970:	4a19      	ldr	r2, [pc, #100]	@ (800d9d8 <RTC_ExitInitMode+0x78>)
 800d972:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d976:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d978:	4b17      	ldr	r3, [pc, #92]	@ (800d9d8 <RTC_ExitInitMode+0x78>)
 800d97a:	699b      	ldr	r3, [r3, #24]
 800d97c:	f003 0320 	and.w	r3, r3, #32
 800d980:	2b00      	cmp	r3, #0
 800d982:	d10c      	bne.n	800d99e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f7ff ff7d 	bl	800d884 <HAL_RTC_WaitForSynchro>
 800d98a:	4603      	mov	r3, r0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d01e      	beq.n	800d9ce <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2203      	movs	r2, #3
 800d994:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800d998:	2303      	movs	r3, #3
 800d99a:	73fb      	strb	r3, [r7, #15]
 800d99c:	e017      	b.n	800d9ce <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d99e:	4b0e      	ldr	r3, [pc, #56]	@ (800d9d8 <RTC_ExitInitMode+0x78>)
 800d9a0:	699b      	ldr	r3, [r3, #24]
 800d9a2:	4a0d      	ldr	r2, [pc, #52]	@ (800d9d8 <RTC_ExitInitMode+0x78>)
 800d9a4:	f023 0320 	bic.w	r3, r3, #32
 800d9a8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f7ff ff6a 	bl	800d884 <HAL_RTC_WaitForSynchro>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d005      	beq.n	800d9c2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2203      	movs	r2, #3
 800d9ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800d9be:	2303      	movs	r3, #3
 800d9c0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d9c2:	4b05      	ldr	r3, [pc, #20]	@ (800d9d8 <RTC_ExitInitMode+0x78>)
 800d9c4:	699b      	ldr	r3, [r3, #24]
 800d9c6:	4a04      	ldr	r2, [pc, #16]	@ (800d9d8 <RTC_ExitInitMode+0x78>)
 800d9c8:	f043 0320 	orr.w	r3, r3, #32
 800d9cc:	6193      	str	r3, [r2, #24]
  }
  return status;
 800d9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3710      	adds	r7, #16
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	46007800 	.word	0x46007800

0800d9dc <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b083      	sub	sp, #12
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	681a      	ldr	r2, [r3, #0]
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	4910      	ldr	r1, [pc, #64]	@ (800da30 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	689a      	ldr	r2, [r3, #8]
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	431a      	orrs	r2, r3
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	699b      	ldr	r3, [r3, #24]
 800da02:	490c      	ldr	r1, [pc, #48]	@ (800da34 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800da04:	4313      	orrs	r3, r2
 800da06:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800da08:	4b0a      	ldr	r3, [pc, #40]	@ (800da34 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800da0a:	6a1b      	ldr	r3, [r3, #32]
 800da0c:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	6919      	ldr	r1, [r3, #16]
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	695b      	ldr	r3, [r3, #20]
 800da18:	041b      	lsls	r3, r3, #16
 800da1a:	430b      	orrs	r3, r1
 800da1c:	4905      	ldr	r1, [pc, #20]	@ (800da34 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800da1e:	4313      	orrs	r3, r2
 800da20:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	370c      	adds	r7, #12
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr
 800da30:	46007800 	.word	0x46007800
 800da34:	46007c00 	.word	0x46007c00

0800da38 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b086      	sub	sp, #24
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	60f8      	str	r0, [r7, #12]
 800da40:	60b9      	str	r1, [r7, #8]
 800da42:	607a      	str	r2, [r7, #4]
 800da44:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	2b02      	cmp	r3, #2
 800da4a:	d904      	bls.n	800da56 <HAL_SAI_InitProtocol+0x1e>
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	3b03      	subs	r3, #3
 800da50:	2b01      	cmp	r3, #1
 800da52:	d812      	bhi.n	800da7a <HAL_SAI_InitProtocol+0x42>
 800da54:	e008      	b.n	800da68 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	687a      	ldr	r2, [r7, #4]
 800da5a:	68b9      	ldr	r1, [r7, #8]
 800da5c:	68f8      	ldr	r0, [r7, #12]
 800da5e:	f000 faff 	bl	800e060 <SAI_InitI2S>
 800da62:	4603      	mov	r3, r0
 800da64:	75fb      	strb	r3, [r7, #23]
      break;
 800da66:	e00b      	b.n	800da80 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	687a      	ldr	r2, [r7, #4]
 800da6c:	68b9      	ldr	r1, [r7, #8]
 800da6e:	68f8      	ldr	r0, [r7, #12]
 800da70:	f000 fba8 	bl	800e1c4 <SAI_InitPCM>
 800da74:	4603      	mov	r3, r0
 800da76:	75fb      	strb	r3, [r7, #23]
      break;
 800da78:	e002      	b.n	800da80 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800da7a:	2301      	movs	r3, #1
 800da7c:	75fb      	strb	r3, [r7, #23]
      break;
 800da7e:	bf00      	nop
  }

  if (status == HAL_OK)
 800da80:	7dfb      	ldrb	r3, [r7, #23]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d104      	bne.n	800da90 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800da86:	68f8      	ldr	r0, [r7, #12]
 800da88:	f000 f808 	bl	800da9c <HAL_SAI_Init>
 800da8c:	4603      	mov	r3, r0
 800da8e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800da90:	7dfb      	ldrb	r3, [r7, #23]
}
 800da92:	4618      	mov	r0, r3
 800da94:	3718      	adds	r7, #24
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
	...

0800da9c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b08a      	sub	sp, #40	@ 0x28
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d101      	bne.n	800daae <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800daaa:	2301      	movs	r3, #1
 800daac:	e1ce      	b.n	800de4c <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dab4:	2b01      	cmp	r3, #1
 800dab6:	d10e      	bne.n	800dad6 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a83      	ldr	r2, [pc, #524]	@ (800dccc <HAL_SAI_Init+0x230>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d107      	bne.n	800dad2 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800dac6:	2b01      	cmp	r3, #1
 800dac8:	d103      	bne.n	800dad2 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d001      	beq.n	800dad6 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800dad2:	2301      	movs	r3, #1
 800dad4:	e1ba      	b.n	800de4c <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d106      	bne.n	800daf0 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2200      	movs	r2, #0
 800dae6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f7f4 fb98 	bl	8002220 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 fc21 	bl	800e338 <SAI_Disable>
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d001      	beq.n	800db00 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800dafc:	2301      	movs	r3, #1
 800dafe:	e1a5      	b.n	800de4c <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2202      	movs	r2, #2
 800db04:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	68db      	ldr	r3, [r3, #12]
 800db0c:	2b02      	cmp	r3, #2
 800db0e:	d00c      	beq.n	800db2a <HAL_SAI_Init+0x8e>
 800db10:	2b02      	cmp	r3, #2
 800db12:	d80d      	bhi.n	800db30 <HAL_SAI_Init+0x94>
 800db14:	2b00      	cmp	r3, #0
 800db16:	d002      	beq.n	800db1e <HAL_SAI_Init+0x82>
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d003      	beq.n	800db24 <HAL_SAI_Init+0x88>
 800db1c:	e008      	b.n	800db30 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800db1e:	2300      	movs	r3, #0
 800db20:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800db22:	e008      	b.n	800db36 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800db24:	2310      	movs	r3, #16
 800db26:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800db28:	e005      	b.n	800db36 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800db2a:	2320      	movs	r3, #32
 800db2c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800db2e:	e002      	b.n	800db36 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800db30:	2300      	movs	r3, #0
 800db32:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800db34:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	2b03      	cmp	r3, #3
 800db3c:	d81d      	bhi.n	800db7a <HAL_SAI_Init+0xde>
 800db3e:	a201      	add	r2, pc, #4	@ (adr r2, 800db44 <HAL_SAI_Init+0xa8>)
 800db40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db44:	0800db55 	.word	0x0800db55
 800db48:	0800db5b 	.word	0x0800db5b
 800db4c:	0800db63 	.word	0x0800db63
 800db50:	0800db6b 	.word	0x0800db6b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800db54:	2300      	movs	r3, #0
 800db56:	61fb      	str	r3, [r7, #28]
      break;
 800db58:	e012      	b.n	800db80 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800db5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db5e:	61fb      	str	r3, [r7, #28]
      break;
 800db60:	e00e      	b.n	800db80 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800db62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800db66:	61fb      	str	r3, [r7, #28]
      break;
 800db68:	e00a      	b.n	800db80 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800db6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800db6e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800db70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db72:	f043 0301 	orr.w	r3, r3, #1
 800db76:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800db78:	e002      	b.n	800db80 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800db7a:	2300      	movs	r3, #0
 800db7c:	61fb      	str	r3, [r7, #28]
      break;
 800db7e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a51      	ldr	r2, [pc, #324]	@ (800dccc <HAL_SAI_Init+0x230>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d004      	beq.n	800db94 <HAL_SAI_Init+0xf8>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	4a50      	ldr	r2, [pc, #320]	@ (800dcd0 <HAL_SAI_Init+0x234>)
 800db90:	4293      	cmp	r3, r2
 800db92:	d103      	bne.n	800db9c <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800db94:	4a4f      	ldr	r2, [pc, #316]	@ (800dcd4 <HAL_SAI_Init+0x238>)
 800db96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db98:	6013      	str	r3, [r2, #0]
 800db9a:	e002      	b.n	800dba2 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800db9c:	4a4e      	ldr	r2, [pc, #312]	@ (800dcd8 <HAL_SAI_Init+0x23c>)
 800db9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba0:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6a1b      	ldr	r3, [r3, #32]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d077      	beq.n	800dc9a <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	4a47      	ldr	r2, [pc, #284]	@ (800dccc <HAL_SAI_Init+0x230>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d004      	beq.n	800dbbe <HAL_SAI_Init+0x122>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4a45      	ldr	r2, [pc, #276]	@ (800dcd0 <HAL_SAI_Init+0x234>)
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d107      	bne.n	800dbce <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800dbbe:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800dbc2:	f04f 0100 	mov.w	r1, #0
 800dbc6:	f7fe f925 	bl	800be14 <HAL_RCCEx_GetPeriphCLKFreq>
 800dbca:	61b8      	str	r0, [r7, #24]
 800dbcc:	e006      	b.n	800dbdc <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800dbce:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800dbd2:	f04f 0100 	mov.w	r1, #0
 800dbd6:	f7fe f91d 	bl	800be14 <HAL_RCCEx_GetPeriphCLKFreq>
 800dbda:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	699b      	ldr	r3, [r3, #24]
 800dbe0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800dbe4:	d120      	bne.n	800dc28 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbea:	2b04      	cmp	r3, #4
 800dbec:	d102      	bne.n	800dbf4 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800dbee:	2340      	movs	r3, #64	@ 0x40
 800dbf0:	613b      	str	r3, [r7, #16]
 800dbf2:	e00a      	b.n	800dc0a <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbf8:	2b08      	cmp	r3, #8
 800dbfa:	d103      	bne.n	800dc04 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800dbfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dc00:	613b      	str	r3, [r7, #16]
 800dc02:	e002      	b.n	800dc0a <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc08:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800dc0a:	69ba      	ldr	r2, [r7, #24]
 800dc0c:	4613      	mov	r3, r2
 800dc0e:	009b      	lsls	r3, r3, #2
 800dc10:	4413      	add	r3, r2
 800dc12:	005b      	lsls	r3, r3, #1
 800dc14:	4619      	mov	r1, r3
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6a1b      	ldr	r3, [r3, #32]
 800dc1a:	693a      	ldr	r2, [r7, #16]
 800dc1c:	fb02 f303 	mul.w	r3, r2, r3
 800dc20:	fbb1 f3f3 	udiv	r3, r1, r3
 800dc24:	617b      	str	r3, [r7, #20]
 800dc26:	e017      	b.n	800dc58 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dc30:	d101      	bne.n	800dc36 <HAL_SAI_Init+0x19a>
 800dc32:	2302      	movs	r3, #2
 800dc34:	e000      	b.n	800dc38 <HAL_SAI_Init+0x19c>
 800dc36:	2301      	movs	r3, #1
 800dc38:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800dc3a:	69ba      	ldr	r2, [r7, #24]
 800dc3c:	4613      	mov	r3, r2
 800dc3e:	009b      	lsls	r3, r3, #2
 800dc40:	4413      	add	r3, r2
 800dc42:	005b      	lsls	r3, r3, #1
 800dc44:	4619      	mov	r1, r3
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6a1b      	ldr	r3, [r3, #32]
 800dc4a:	68fa      	ldr	r2, [r7, #12]
 800dc4c:	fb02 f303 	mul.w	r3, r2, r3
 800dc50:	021b      	lsls	r3, r3, #8
 800dc52:	fbb1 f3f3 	udiv	r3, r1, r3
 800dc56:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	4a20      	ldr	r2, [pc, #128]	@ (800dcdc <HAL_SAI_Init+0x240>)
 800dc5c:	fba2 2303 	umull	r2, r3, r2, r3
 800dc60:	08da      	lsrs	r2, r3, #3
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800dc66:	6979      	ldr	r1, [r7, #20]
 800dc68:	4b1c      	ldr	r3, [pc, #112]	@ (800dcdc <HAL_SAI_Init+0x240>)
 800dc6a:	fba3 2301 	umull	r2, r3, r3, r1
 800dc6e:	08da      	lsrs	r2, r3, #3
 800dc70:	4613      	mov	r3, r2
 800dc72:	009b      	lsls	r3, r3, #2
 800dc74:	4413      	add	r3, r2
 800dc76:	005b      	lsls	r3, r3, #1
 800dc78:	1aca      	subs	r2, r1, r3
 800dc7a:	2a08      	cmp	r2, #8
 800dc7c:	d904      	bls.n	800dc88 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc82:	1c5a      	adds	r2, r3, #1
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc8c:	2b04      	cmp	r3, #4
 800dc8e:	d104      	bne.n	800dc9a <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc94:	085a      	lsrs	r2, r3, #1
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d003      	beq.n	800dcaa <HAL_SAI_Init+0x20e>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	2b02      	cmp	r3, #2
 800dca8:	d109      	bne.n	800dcbe <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d101      	bne.n	800dcb6 <HAL_SAI_Init+0x21a>
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	e001      	b.n	800dcba <HAL_SAI_Init+0x21e>
 800dcb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dcba:	623b      	str	r3, [r7, #32]
 800dcbc:	e012      	b.n	800dce4 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	d10c      	bne.n	800dce0 <HAL_SAI_Init+0x244>
 800dcc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dcca:	e00a      	b.n	800dce2 <HAL_SAI_Init+0x246>
 800dccc:	40015404 	.word	0x40015404
 800dcd0:	40015424 	.word	0x40015424
 800dcd4:	40015400 	.word	0x40015400
 800dcd8:	40015800 	.word	0x40015800
 800dcdc:	cccccccd 	.word	0xcccccccd
 800dce0:	2300      	movs	r3, #0
 800dce2:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	6819      	ldr	r1, [r3, #0]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	4b59      	ldr	r3, [pc, #356]	@ (800de54 <HAL_SAI_Init+0x3b8>)
 800dcf0:	400b      	ands	r3, r1
 800dcf2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	6819      	ldr	r1, [r3, #0]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	685a      	ldr	r2, [r3, #4]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd02:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dd08:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd0e:	431a      	orrs	r2, r3
 800dd10:	6a3b      	ldr	r3, [r7, #32]
 800dd12:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800dd1c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	695b      	ldr	r3, [r3, #20]
 800dd22:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dd28:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd2e:	051b      	lsls	r3, r3, #20
 800dd30:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800dd36:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	691b      	ldr	r3, [r3, #16]
 800dd3c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	430a      	orrs	r2, r1
 800dd44:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	6812      	ldr	r2, [r2, #0]
 800dd50:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800dd54:	f023 030f 	bic.w	r3, r3, #15
 800dd58:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	6859      	ldr	r1, [r3, #4]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	69da      	ldr	r2, [r3, #28]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd68:	431a      	orrs	r2, r3
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd6e:	431a      	orrs	r2, r3
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	430a      	orrs	r2, r1
 800dd76:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	6899      	ldr	r1, [r3, #8]
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681a      	ldr	r2, [r3, #0]
 800dd82:	4b35      	ldr	r3, [pc, #212]	@ (800de58 <HAL_SAI_Init+0x3bc>)
 800dd84:	400b      	ands	r3, r1
 800dd86:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	6899      	ldr	r1, [r3, #8]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd92:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800dd98:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800dd9e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800dda4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddaa:	3b01      	subs	r3, #1
 800ddac:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ddae:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	430a      	orrs	r2, r1
 800ddb6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	68d9      	ldr	r1, [r3, #12]
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681a      	ldr	r2, [r3, #0]
 800ddc2:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800ddc6:	400b      	ands	r3, r1
 800ddc8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	68d9      	ldr	r1, [r3, #12]
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ddd8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ddde:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800dde0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dde6:	3b01      	subs	r3, #1
 800dde8:	021b      	lsls	r3, r3, #8
 800ddea:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	430a      	orrs	r2, r1
 800ddf2:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4a18      	ldr	r2, [pc, #96]	@ (800de5c <HAL_SAI_Init+0x3c0>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d119      	bne.n	800de32 <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800ddfe:	4b18      	ldr	r3, [pc, #96]	@ (800de60 <HAL_SAI_Init+0x3c4>)
 800de00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de02:	4a17      	ldr	r2, [pc, #92]	@ (800de60 <HAL_SAI_Init+0x3c4>)
 800de04:	f023 0301 	bic.w	r3, r3, #1
 800de08:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800de10:	2b01      	cmp	r3, #1
 800de12:	d10e      	bne.n	800de32 <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de1c:	3b01      	subs	r3, #1
 800de1e:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800de20:	490f      	ldr	r1, [pc, #60]	@ (800de60 <HAL_SAI_Init+0x3c4>)
 800de22:	4313      	orrs	r3, r2
 800de24:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800de26:	4b0e      	ldr	r3, [pc, #56]	@ (800de60 <HAL_SAI_Init+0x3c4>)
 800de28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de2a:	4a0d      	ldr	r2, [pc, #52]	@ (800de60 <HAL_SAI_Init+0x3c4>)
 800de2c:	f043 0301 	orr.w	r3, r3, #1
 800de30:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2200      	movs	r2, #0
 800de36:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2201      	movs	r2, #1
 800de3e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2200      	movs	r2, #0
 800de46:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800de4a:	2300      	movs	r3, #0
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3728      	adds	r7, #40	@ 0x28
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}
 800de54:	f005c010 	.word	0xf005c010
 800de58:	fff88000 	.word	0xfff88000
 800de5c:	40015404 	.word	0x40015404
 800de60:	40015400 	.word	0x40015400

0800de64 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b086      	sub	sp, #24
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	4613      	mov	r3, r2
 800de70:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d002      	beq.n	800de7e <HAL_SAI_Receive_DMA+0x1a>
 800de78:	88fb      	ldrh	r3, [r7, #6]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d101      	bne.n	800de82 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800de7e:	2301      	movs	r3, #1
 800de80:	e0c6      	b.n	800e010 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	f040 80bf 	bne.w	800e00e <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800de96:	2b01      	cmp	r3, #1
 800de98:	d101      	bne.n	800de9e <HAL_SAI_Receive_DMA+0x3a>
 800de9a:	2302      	movs	r3, #2
 800de9c:	e0b8      	b.n	800e010 <HAL_SAI_Receive_DMA+0x1ac>
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2201      	movs	r2, #1
 800dea2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	68ba      	ldr	r2, [r7, #8]
 800deaa:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	88fa      	ldrh	r2, [r7, #6]
 800deb0:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	88fa      	ldrh	r2, [r7, #6]
 800deb8:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2200      	movs	r2, #0
 800dec0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	2222      	movs	r2, #34	@ 0x22
 800dec8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ded2:	4a51      	ldr	r2, [pc, #324]	@ (800e018 <HAL_SAI_Receive_DMA+0x1b4>)
 800ded4:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dedc:	4a4f      	ldr	r2, [pc, #316]	@ (800e01c <HAL_SAI_Receive_DMA+0x1b8>)
 800dede:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dee6:	4a4e      	ldr	r2, [pc, #312]	@ (800e020 <HAL_SAI_Receive_DMA+0x1bc>)
 800dee8:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800def0:	2200      	movs	r2, #0
 800def2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800def8:	2b40      	cmp	r3, #64	@ 0x40
 800defa:	d106      	bne.n	800df0a <HAL_SAI_Receive_DMA+0xa6>
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df00:	2b00      	cmp	r3, #0
 800df02:	d102      	bne.n	800df0a <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800df04:	88fb      	ldrh	r3, [r7, #6]
 800df06:	613b      	str	r3, [r7, #16]
 800df08:	e00a      	b.n	800df20 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df0e:	2b80      	cmp	r3, #128	@ 0x80
 800df10:	d803      	bhi.n	800df1a <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800df12:	88fb      	ldrh	r3, [r7, #6]
 800df14:	005b      	lsls	r3, r3, #1
 800df16:	613b      	str	r3, [r7, #16]
 800df18:	e002      	b.n	800df20 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800df1a:	88fb      	ldrh	r3, [r7, #6]
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d02d      	beq.n	800df8c <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d021      	beq.n	800df80 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	693a      	ldr	r2, [r7, #16]
 800df48:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f103 021c 	add.w	r2, r3, #28
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df74:	4618      	mov	r0, r3
 800df76:	f7f8 f903 	bl	8006180 <HAL_DMAEx_List_Start_IT>
 800df7a:	4603      	mov	r3, r0
 800df7c:	75fb      	strb	r3, [r7, #23]
 800df7e:	e014      	b.n	800dfaa <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	2200      	movs	r2, #0
 800df84:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800df88:	2301      	movs	r3, #1
 800df8a:	e041      	b.n	800e010 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	331c      	adds	r3, #28
 800df98:	4619      	mov	r1, r3
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800df9e:	461a      	mov	r2, r3
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	f7f7 f95b 	bl	800525c <HAL_DMA_Start_IT>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800dfaa:	7dfb      	ldrb	r3, [r7, #23]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d005      	beq.n	800dfbc <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	e029      	b.n	800e010 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800dfbc:	2100      	movs	r1, #0
 800dfbe:	68f8      	ldr	r0, [r7, #12]
 800dfc0:	f000 f982 	bl	800e2c8 <SAI_InterruptFlag>
 800dfc4:	4601      	mov	r1, r0
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	691a      	ldr	r2, [r3, #16]
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	430a      	orrs	r2, r1
 800dfd2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	681a      	ldr	r2, [r3, #0]
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800dfe2:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d107      	bne.n	800e002 <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	681a      	ldr	r2, [r3, #0]
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e000:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2200      	movs	r2, #0
 800e006:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e00a:	2300      	movs	r3, #0
 800e00c:	e000      	b.n	800e010 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800e00e:	2302      	movs	r3, #2
  }
}
 800e010:	4618      	mov	r0, r3
 800e012:	3718      	adds	r7, #24
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	0800e40b 	.word	0x0800e40b
 800e01c:	0800e3ad 	.word	0x0800e3ad
 800e020:	0800e427 	.word	0x0800e427

0800e024 <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 800e02c:	bf00      	nop
 800e02e:	370c      	adds	r7, #12
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr

0800e038 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 800e040:	bf00      	nop
 800e042:	370c      	adds	r7, #12
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr

0800e04c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b083      	sub	sp, #12
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800e054:	bf00      	nop
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e060:	b480      	push	{r7}
 800e062:	b087      	sub	sp, #28
 800e064:	af00      	add	r7, sp, #0
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	607a      	str	r2, [r7, #4]
 800e06c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e06e:	2300      	movs	r3, #0
 800e070:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2200      	movs	r2, #0
 800e076:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2200      	movs	r2, #0
 800e07c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	685b      	ldr	r3, [r3, #4]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d003      	beq.n	800e08e <SAI_InitI2S+0x2e>
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	2b02      	cmp	r3, #2
 800e08c:	d103      	bne.n	800e096 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2200      	movs	r2, #0
 800e092:	651a      	str	r2, [r3, #80]	@ 0x50
 800e094:	e002      	b.n	800e09c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2201      	movs	r2, #1
 800e09a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e0a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e0aa:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	683a      	ldr	r2, [r7, #0]
 800e0b6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	f003 0301 	and.w	r3, r3, #1
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d001      	beq.n	800e0c6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e077      	b.n	800e1b6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d107      	bne.n	800e0dc <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e0d8:	665a      	str	r2, [r3, #100]	@ 0x64
 800e0da:	e006      	b.n	800e0ea <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e0e2:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2b03      	cmp	r3, #3
 800e0ee:	d84f      	bhi.n	800e190 <SAI_InitI2S+0x130>
 800e0f0:	a201      	add	r2, pc, #4	@ (adr r2, 800e0f8 <SAI_InitI2S+0x98>)
 800e0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f6:	bf00      	nop
 800e0f8:	0800e109 	.word	0x0800e109
 800e0fc:	0800e12b 	.word	0x0800e12b
 800e100:	0800e14d 	.word	0x0800e14d
 800e104:	0800e16f 	.word	0x0800e16f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	2280      	movs	r2, #128	@ 0x80
 800e10c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	085b      	lsrs	r3, r3, #1
 800e112:	015a      	lsls	r2, r3, #5
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	085b      	lsrs	r3, r3, #1
 800e11c:	011a      	lsls	r2, r3, #4
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2240      	movs	r2, #64	@ 0x40
 800e126:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e128:	e035      	b.n	800e196 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2280      	movs	r2, #128	@ 0x80
 800e12e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	085b      	lsrs	r3, r3, #1
 800e134:	019a      	lsls	r2, r3, #6
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	085b      	lsrs	r3, r3, #1
 800e13e:	015a      	lsls	r2, r3, #5
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2280      	movs	r2, #128	@ 0x80
 800e148:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e14a:	e024      	b.n	800e196 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	22c0      	movs	r2, #192	@ 0xc0
 800e150:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	085b      	lsrs	r3, r3, #1
 800e156:	019a      	lsls	r2, r3, #6
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	085b      	lsrs	r3, r3, #1
 800e160:	015a      	lsls	r2, r3, #5
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	2280      	movs	r2, #128	@ 0x80
 800e16a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e16c:	e013      	b.n	800e196 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	22e0      	movs	r2, #224	@ 0xe0
 800e172:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	085b      	lsrs	r3, r3, #1
 800e178:	019a      	lsls	r2, r3, #6
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	085b      	lsrs	r3, r3, #1
 800e182:	015a      	lsls	r2, r3, #5
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2280      	movs	r2, #128	@ 0x80
 800e18c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e18e:	e002      	b.n	800e196 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800e190:	2301      	movs	r3, #1
 800e192:	75fb      	strb	r3, [r7, #23]
      break;
 800e194:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	2b02      	cmp	r3, #2
 800e19a:	d10b      	bne.n	800e1b4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d102      	bne.n	800e1a8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2210      	movs	r2, #16
 800e1a6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2b02      	cmp	r3, #2
 800e1ac:	d102      	bne.n	800e1b4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2208      	movs	r2, #8
 800e1b2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800e1b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	371c      	adds	r7, #28
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c0:	4770      	bx	lr
 800e1c2:	bf00      	nop

0800e1c4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b087      	sub	sp, #28
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	60f8      	str	r0, [r7, #12]
 800e1cc:	60b9      	str	r1, [r7, #8]
 800e1ce:	607a      	str	r2, [r7, #4]
 800e1d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	2200      	movs	r2, #0
 800e1da:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d003      	beq.n	800e1f2 <SAI_InitPCM+0x2e>
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	2b02      	cmp	r3, #2
 800e1f0:	d103      	bne.n	800e1fa <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	651a      	str	r2, [r3, #80]	@ 0x50
 800e1f8:	e002      	b.n	800e200 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2200      	movs	r2, #0
 800e204:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e20c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e214:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	2200      	movs	r2, #0
 800e21a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	683a      	ldr	r2, [r7, #0]
 800e220:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e228:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	2b04      	cmp	r3, #4
 800e22e:	d103      	bne.n	800e238 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2201      	movs	r2, #1
 800e234:	659a      	str	r2, [r3, #88]	@ 0x58
 800e236:	e002      	b.n	800e23e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	220d      	movs	r2, #13
 800e23c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2b03      	cmp	r3, #3
 800e242:	d837      	bhi.n	800e2b4 <SAI_InitPCM+0xf0>
 800e244:	a201      	add	r2, pc, #4	@ (adr r2, 800e24c <SAI_InitPCM+0x88>)
 800e246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e24a:	bf00      	nop
 800e24c:	0800e25d 	.word	0x0800e25d
 800e250:	0800e273 	.word	0x0800e273
 800e254:	0800e289 	.word	0x0800e289
 800e258:	0800e29f 	.word	0x0800e29f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	2280      	movs	r2, #128	@ 0x80
 800e260:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	011a      	lsls	r2, r3, #4
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	2240      	movs	r2, #64	@ 0x40
 800e26e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e270:	e023      	b.n	800e2ba <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	2280      	movs	r2, #128	@ 0x80
 800e276:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	015a      	lsls	r2, r3, #5
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2280      	movs	r2, #128	@ 0x80
 800e284:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e286:	e018      	b.n	800e2ba <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	22c0      	movs	r2, #192	@ 0xc0
 800e28c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	015a      	lsls	r2, r3, #5
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	2280      	movs	r2, #128	@ 0x80
 800e29a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e29c:	e00d      	b.n	800e2ba <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	22e0      	movs	r2, #224	@ 0xe0
 800e2a2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	015a      	lsls	r2, r3, #5
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2280      	movs	r2, #128	@ 0x80
 800e2b0:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e2b2:	e002      	b.n	800e2ba <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	75fb      	strb	r3, [r7, #23]
      break;
 800e2b8:	bf00      	nop
  }

  return status;
 800e2ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	371c      	adds	r7, #28
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr

0800e2c8 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b085      	sub	sp, #20
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800e2d8:	78fb      	ldrb	r3, [r7, #3]
 800e2da:	2b01      	cmp	r3, #1
 800e2dc:	d103      	bne.n	800e2e6 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f043 0308 	orr.w	r3, r3, #8
 800e2e4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2ea:	2b08      	cmp	r3, #8
 800e2ec:	d10b      	bne.n	800e306 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e2f2:	2b03      	cmp	r3, #3
 800e2f4:	d003      	beq.n	800e2fe <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	d103      	bne.n	800e306 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	f043 0310 	orr.w	r3, r3, #16
 800e304:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	2b03      	cmp	r3, #3
 800e30c:	d003      	beq.n	800e316 <SAI_InterruptFlag+0x4e>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	2b02      	cmp	r3, #2
 800e314:	d104      	bne.n	800e320 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e31c:	60fb      	str	r3, [r7, #12]
 800e31e:	e003      	b.n	800e328 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f043 0304 	orr.w	r3, r3, #4
 800e326:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800e328:	68fb      	ldr	r3, [r7, #12]
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3714      	adds	r7, #20
 800e32e:	46bd      	mov	sp, r7
 800e330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e334:	4770      	bx	lr
	...

0800e338 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800e338:	b480      	push	{r7}
 800e33a:	b085      	sub	sp, #20
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800e340:	4b18      	ldr	r3, [pc, #96]	@ (800e3a4 <SAI_Disable+0x6c>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4a18      	ldr	r2, [pc, #96]	@ (800e3a8 <SAI_Disable+0x70>)
 800e346:	fba2 2303 	umull	r2, r3, r2, r3
 800e34a:	0b1b      	lsrs	r3, r3, #12
 800e34c:	009b      	lsls	r3, r3, #2
 800e34e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800e350:	2300      	movs	r3, #0
 800e352:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	681a      	ldr	r2, [r3, #0]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800e362:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d10a      	bne.n	800e380 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e370:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800e37a:	2303      	movs	r3, #3
 800e37c:	72fb      	strb	r3, [r7, #11]
      break;
 800e37e:	e009      	b.n	800e394 <SAI_Disable+0x5c>
    }
    count--;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	3b01      	subs	r3, #1
 800e384:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e390:	2b00      	cmp	r3, #0
 800e392:	d1e7      	bne.n	800e364 <SAI_Disable+0x2c>

  return status;
 800e394:	7afb      	ldrb	r3, [r7, #11]
}
 800e396:	4618      	mov	r0, r3
 800e398:	3714      	adds	r7, #20
 800e39a:	46bd      	mov	sp, r7
 800e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a0:	4770      	bx	lr
 800e3a2:	bf00      	nop
 800e3a4:	2000001c 	.word	0x2000001c
 800e3a8:	95cbec1b 	.word	0x95cbec1b

0800e3ac <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b084      	sub	sp, #16
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e3b8:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3be:	2b81      	cmp	r3, #129	@ 0x81
 800e3c0:	d01c      	beq.n	800e3fc <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800e3d0:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e3da:	2100      	movs	r1, #0
 800e3dc:	68f8      	ldr	r0, [r7, #12]
 800e3de:	f7ff ff73 	bl	800e2c8 <SAI_InterruptFlag>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	43d9      	mvns	r1, r3
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	691a      	ldr	r2, [r3, #16]
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	400a      	ands	r2, r1
 800e3f2:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800e3fc:	68f8      	ldr	r0, [r7, #12]
 800e3fe:	f7ff fe11 	bl	800e024 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e402:	bf00      	nop
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b084      	sub	sp, #16
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e416:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800e418:	68f8      	ldr	r0, [r7, #12]
 800e41a:	f7ff fe0d 	bl	800e038 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e41e:	bf00      	nop
 800e420:	3710      	adds	r7, #16
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}

0800e426 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e426:	b580      	push	{r7, lr}
 800e428:	b084      	sub	sp, #16
 800e42a:	af00      	add	r7, sp, #0
 800e42c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e432:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e43a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800e452:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800e454:	68f8      	ldr	r0, [r7, #12]
 800e456:	f7ff ff6f 	bl	800e338 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2201      	movs	r2, #1
 800e45e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2200      	movs	r2, #0
 800e466:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800e46a:	68f8      	ldr	r0, [r7, #12]
 800e46c:	f7ff fdee 	bl	800e04c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e470:	bf00      	nop
 800e472:	3710      	adds	r7, #16
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d101      	bne.n	800e48a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e486:	2301      	movs	r3, #1
 800e488:	e049      	b.n	800e51e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e490:	b2db      	uxtb	r3, r3
 800e492:	2b00      	cmp	r3, #0
 800e494:	d106      	bne.n	800e4a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2200      	movs	r2, #0
 800e49a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f7f3 fde0 	bl	8002064 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2202      	movs	r2, #2
 800e4a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	3304      	adds	r3, #4
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	4610      	mov	r0, r2
 800e4b8:	f000 f94a 	bl	800e750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2201      	movs	r2, #1
 800e4c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2201      	movs	r2, #1
 800e4d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2201      	movs	r2, #1
 800e4e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2201      	movs	r2, #1
 800e4f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2201      	movs	r2, #1
 800e500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2201      	movs	r2, #1
 800e508:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2201      	movs	r2, #1
 800e510:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2201      	movs	r2, #1
 800e518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e51c:	2300      	movs	r3, #0
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3708      	adds	r7, #8
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
	...

0800e528 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b086      	sub	sp, #24
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	60f8      	str	r0, [r7, #12]
 800e530:	60b9      	str	r1, [r7, #8]
 800e532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e534:	2300      	movs	r3, #0
 800e536:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e53e:	2b01      	cmp	r3, #1
 800e540:	d101      	bne.n	800e546 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e542:	2302      	movs	r3, #2
 800e544:	e0ff      	b.n	800e746 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2201      	movs	r2, #1
 800e54a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2b14      	cmp	r3, #20
 800e552:	f200 80f0 	bhi.w	800e736 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e556:	a201      	add	r2, pc, #4	@ (adr r2, 800e55c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e55c:	0800e5b1 	.word	0x0800e5b1
 800e560:	0800e737 	.word	0x0800e737
 800e564:	0800e737 	.word	0x0800e737
 800e568:	0800e737 	.word	0x0800e737
 800e56c:	0800e5f1 	.word	0x0800e5f1
 800e570:	0800e737 	.word	0x0800e737
 800e574:	0800e737 	.word	0x0800e737
 800e578:	0800e737 	.word	0x0800e737
 800e57c:	0800e633 	.word	0x0800e633
 800e580:	0800e737 	.word	0x0800e737
 800e584:	0800e737 	.word	0x0800e737
 800e588:	0800e737 	.word	0x0800e737
 800e58c:	0800e673 	.word	0x0800e673
 800e590:	0800e737 	.word	0x0800e737
 800e594:	0800e737 	.word	0x0800e737
 800e598:	0800e737 	.word	0x0800e737
 800e59c:	0800e6b5 	.word	0x0800e6b5
 800e5a0:	0800e737 	.word	0x0800e737
 800e5a4:	0800e737 	.word	0x0800e737
 800e5a8:	0800e737 	.word	0x0800e737
 800e5ac:	0800e6f5 	.word	0x0800e6f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	68b9      	ldr	r1, [r7, #8]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f000 f9d0 	bl	800e95c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	699a      	ldr	r2, [r3, #24]
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f042 0208 	orr.w	r2, r2, #8
 800e5ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	699a      	ldr	r2, [r3, #24]
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f022 0204 	bic.w	r2, r2, #4
 800e5da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	6999      	ldr	r1, [r3, #24]
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	691a      	ldr	r2, [r3, #16]
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	430a      	orrs	r2, r1
 800e5ec:	619a      	str	r2, [r3, #24]
      break;
 800e5ee:	e0a5      	b.n	800e73c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	68b9      	ldr	r1, [r7, #8]
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f000 fa72 	bl	800eae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	699a      	ldr	r2, [r3, #24]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e60a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	699a      	ldr	r2, [r3, #24]
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e61a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	6999      	ldr	r1, [r3, #24]
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	691b      	ldr	r3, [r3, #16]
 800e626:	021a      	lsls	r2, r3, #8
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	430a      	orrs	r2, r1
 800e62e:	619a      	str	r2, [r3, #24]
      break;
 800e630:	e084      	b.n	800e73c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	68b9      	ldr	r1, [r7, #8]
 800e638:	4618      	mov	r0, r3
 800e63a:	f000 fb01 	bl	800ec40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	69da      	ldr	r2, [r3, #28]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f042 0208 	orr.w	r2, r2, #8
 800e64c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	69da      	ldr	r2, [r3, #28]
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f022 0204 	bic.w	r2, r2, #4
 800e65c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	69d9      	ldr	r1, [r3, #28]
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	691a      	ldr	r2, [r3, #16]
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	430a      	orrs	r2, r1
 800e66e:	61da      	str	r2, [r3, #28]
      break;
 800e670:	e064      	b.n	800e73c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	68b9      	ldr	r1, [r7, #8]
 800e678:	4618      	mov	r0, r3
 800e67a:	f000 fb8f 	bl	800ed9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	69da      	ldr	r2, [r3, #28]
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e68c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	69da      	ldr	r2, [r3, #28]
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e69c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	69d9      	ldr	r1, [r3, #28]
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	691b      	ldr	r3, [r3, #16]
 800e6a8:	021a      	lsls	r2, r3, #8
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	430a      	orrs	r2, r1
 800e6b0:	61da      	str	r2, [r3, #28]
      break;
 800e6b2:	e043      	b.n	800e73c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	68b9      	ldr	r1, [r7, #8]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f000 fc1e 	bl	800eefc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f042 0208 	orr.w	r2, r2, #8
 800e6ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f022 0204 	bic.w	r2, r2, #4
 800e6de:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	691a      	ldr	r2, [r3, #16]
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	430a      	orrs	r2, r1
 800e6f0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e6f2:	e023      	b.n	800e73c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	68b9      	ldr	r1, [r7, #8]
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f000 fc80 	bl	800f000 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e70e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e71e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	691b      	ldr	r3, [r3, #16]
 800e72a:	021a      	lsls	r2, r3, #8
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	430a      	orrs	r2, r1
 800e732:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e734:	e002      	b.n	800e73c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e736:	2301      	movs	r3, #1
 800e738:	75fb      	strb	r3, [r7, #23]
      break;
 800e73a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2200      	movs	r2, #0
 800e740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e744:	7dfb      	ldrb	r3, [r7, #23]
}
 800e746:	4618      	mov	r0, r3
 800e748:	3718      	adds	r7, #24
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
 800e74e:	bf00      	nop

0800e750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e750:	b480      	push	{r7}
 800e752:	b085      	sub	sp, #20
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	4a6e      	ldr	r2, [pc, #440]	@ (800e91c <TIM_Base_SetConfig+0x1cc>)
 800e764:	4293      	cmp	r3, r2
 800e766:	d02b      	beq.n	800e7c0 <TIM_Base_SetConfig+0x70>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	4a6d      	ldr	r2, [pc, #436]	@ (800e920 <TIM_Base_SetConfig+0x1d0>)
 800e76c:	4293      	cmp	r3, r2
 800e76e:	d027      	beq.n	800e7c0 <TIM_Base_SetConfig+0x70>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e776:	d023      	beq.n	800e7c0 <TIM_Base_SetConfig+0x70>
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e77e:	d01f      	beq.n	800e7c0 <TIM_Base_SetConfig+0x70>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	4a68      	ldr	r2, [pc, #416]	@ (800e924 <TIM_Base_SetConfig+0x1d4>)
 800e784:	4293      	cmp	r3, r2
 800e786:	d01b      	beq.n	800e7c0 <TIM_Base_SetConfig+0x70>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	4a67      	ldr	r2, [pc, #412]	@ (800e928 <TIM_Base_SetConfig+0x1d8>)
 800e78c:	4293      	cmp	r3, r2
 800e78e:	d017      	beq.n	800e7c0 <TIM_Base_SetConfig+0x70>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	4a66      	ldr	r2, [pc, #408]	@ (800e92c <TIM_Base_SetConfig+0x1dc>)
 800e794:	4293      	cmp	r3, r2
 800e796:	d013      	beq.n	800e7c0 <TIM_Base_SetConfig+0x70>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	4a65      	ldr	r2, [pc, #404]	@ (800e930 <TIM_Base_SetConfig+0x1e0>)
 800e79c:	4293      	cmp	r3, r2
 800e79e:	d00f      	beq.n	800e7c0 <TIM_Base_SetConfig+0x70>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	4a64      	ldr	r2, [pc, #400]	@ (800e934 <TIM_Base_SetConfig+0x1e4>)
 800e7a4:	4293      	cmp	r3, r2
 800e7a6:	d00b      	beq.n	800e7c0 <TIM_Base_SetConfig+0x70>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	4a63      	ldr	r2, [pc, #396]	@ (800e938 <TIM_Base_SetConfig+0x1e8>)
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	d007      	beq.n	800e7c0 <TIM_Base_SetConfig+0x70>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	4a62      	ldr	r2, [pc, #392]	@ (800e93c <TIM_Base_SetConfig+0x1ec>)
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	d003      	beq.n	800e7c0 <TIM_Base_SetConfig+0x70>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	4a61      	ldr	r2, [pc, #388]	@ (800e940 <TIM_Base_SetConfig+0x1f0>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d108      	bne.n	800e7d2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e7c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	68fa      	ldr	r2, [r7, #12]
 800e7ce:	4313      	orrs	r3, r2
 800e7d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	4a51      	ldr	r2, [pc, #324]	@ (800e91c <TIM_Base_SetConfig+0x1cc>)
 800e7d6:	4293      	cmp	r3, r2
 800e7d8:	d043      	beq.n	800e862 <TIM_Base_SetConfig+0x112>
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	4a50      	ldr	r2, [pc, #320]	@ (800e920 <TIM_Base_SetConfig+0x1d0>)
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d03f      	beq.n	800e862 <TIM_Base_SetConfig+0x112>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e7e8:	d03b      	beq.n	800e862 <TIM_Base_SetConfig+0x112>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e7f0:	d037      	beq.n	800e862 <TIM_Base_SetConfig+0x112>
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	4a4b      	ldr	r2, [pc, #300]	@ (800e924 <TIM_Base_SetConfig+0x1d4>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d033      	beq.n	800e862 <TIM_Base_SetConfig+0x112>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	4a4a      	ldr	r2, [pc, #296]	@ (800e928 <TIM_Base_SetConfig+0x1d8>)
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d02f      	beq.n	800e862 <TIM_Base_SetConfig+0x112>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	4a49      	ldr	r2, [pc, #292]	@ (800e92c <TIM_Base_SetConfig+0x1dc>)
 800e806:	4293      	cmp	r3, r2
 800e808:	d02b      	beq.n	800e862 <TIM_Base_SetConfig+0x112>
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	4a48      	ldr	r2, [pc, #288]	@ (800e930 <TIM_Base_SetConfig+0x1e0>)
 800e80e:	4293      	cmp	r3, r2
 800e810:	d027      	beq.n	800e862 <TIM_Base_SetConfig+0x112>
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	4a47      	ldr	r2, [pc, #284]	@ (800e934 <TIM_Base_SetConfig+0x1e4>)
 800e816:	4293      	cmp	r3, r2
 800e818:	d023      	beq.n	800e862 <TIM_Base_SetConfig+0x112>
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	4a46      	ldr	r2, [pc, #280]	@ (800e938 <TIM_Base_SetConfig+0x1e8>)
 800e81e:	4293      	cmp	r3, r2
 800e820:	d01f      	beq.n	800e862 <TIM_Base_SetConfig+0x112>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	4a45      	ldr	r2, [pc, #276]	@ (800e93c <TIM_Base_SetConfig+0x1ec>)
 800e826:	4293      	cmp	r3, r2
 800e828:	d01b      	beq.n	800e862 <TIM_Base_SetConfig+0x112>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	4a44      	ldr	r2, [pc, #272]	@ (800e940 <TIM_Base_SetConfig+0x1f0>)
 800e82e:	4293      	cmp	r3, r2
 800e830:	d017      	beq.n	800e862 <TIM_Base_SetConfig+0x112>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	4a43      	ldr	r2, [pc, #268]	@ (800e944 <TIM_Base_SetConfig+0x1f4>)
 800e836:	4293      	cmp	r3, r2
 800e838:	d013      	beq.n	800e862 <TIM_Base_SetConfig+0x112>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	4a42      	ldr	r2, [pc, #264]	@ (800e948 <TIM_Base_SetConfig+0x1f8>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d00f      	beq.n	800e862 <TIM_Base_SetConfig+0x112>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	4a41      	ldr	r2, [pc, #260]	@ (800e94c <TIM_Base_SetConfig+0x1fc>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d00b      	beq.n	800e862 <TIM_Base_SetConfig+0x112>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	4a40      	ldr	r2, [pc, #256]	@ (800e950 <TIM_Base_SetConfig+0x200>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d007      	beq.n	800e862 <TIM_Base_SetConfig+0x112>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	4a3f      	ldr	r2, [pc, #252]	@ (800e954 <TIM_Base_SetConfig+0x204>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d003      	beq.n	800e862 <TIM_Base_SetConfig+0x112>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	4a3e      	ldr	r2, [pc, #248]	@ (800e958 <TIM_Base_SetConfig+0x208>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d108      	bne.n	800e874 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	68db      	ldr	r3, [r3, #12]
 800e86e:	68fa      	ldr	r2, [r7, #12]
 800e870:	4313      	orrs	r3, r2
 800e872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	695b      	ldr	r3, [r3, #20]
 800e87e:	4313      	orrs	r3, r2
 800e880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	68fa      	ldr	r2, [r7, #12]
 800e886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	689a      	ldr	r2, [r3, #8]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	4a20      	ldr	r2, [pc, #128]	@ (800e91c <TIM_Base_SetConfig+0x1cc>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d023      	beq.n	800e8e8 <TIM_Base_SetConfig+0x198>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	4a1f      	ldr	r2, [pc, #124]	@ (800e920 <TIM_Base_SetConfig+0x1d0>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d01f      	beq.n	800e8e8 <TIM_Base_SetConfig+0x198>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	4a24      	ldr	r2, [pc, #144]	@ (800e93c <TIM_Base_SetConfig+0x1ec>)
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	d01b      	beq.n	800e8e8 <TIM_Base_SetConfig+0x198>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	4a23      	ldr	r2, [pc, #140]	@ (800e940 <TIM_Base_SetConfig+0x1f0>)
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	d017      	beq.n	800e8e8 <TIM_Base_SetConfig+0x198>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	4a22      	ldr	r2, [pc, #136]	@ (800e944 <TIM_Base_SetConfig+0x1f4>)
 800e8bc:	4293      	cmp	r3, r2
 800e8be:	d013      	beq.n	800e8e8 <TIM_Base_SetConfig+0x198>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	4a21      	ldr	r2, [pc, #132]	@ (800e948 <TIM_Base_SetConfig+0x1f8>)
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d00f      	beq.n	800e8e8 <TIM_Base_SetConfig+0x198>
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	4a20      	ldr	r2, [pc, #128]	@ (800e94c <TIM_Base_SetConfig+0x1fc>)
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	d00b      	beq.n	800e8e8 <TIM_Base_SetConfig+0x198>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	4a1f      	ldr	r2, [pc, #124]	@ (800e950 <TIM_Base_SetConfig+0x200>)
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	d007      	beq.n	800e8e8 <TIM_Base_SetConfig+0x198>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	4a1e      	ldr	r2, [pc, #120]	@ (800e954 <TIM_Base_SetConfig+0x204>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d003      	beq.n	800e8e8 <TIM_Base_SetConfig+0x198>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	4a1d      	ldr	r2, [pc, #116]	@ (800e958 <TIM_Base_SetConfig+0x208>)
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d103      	bne.n	800e8f0 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	691a      	ldr	r2, [r3, #16]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	691b      	ldr	r3, [r3, #16]
 800e8fa:	f003 0301 	and.w	r3, r3, #1
 800e8fe:	2b01      	cmp	r3, #1
 800e900:	d105      	bne.n	800e90e <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	691b      	ldr	r3, [r3, #16]
 800e906:	f023 0201 	bic.w	r2, r3, #1
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	611a      	str	r2, [r3, #16]
  }
}
 800e90e:	bf00      	nop
 800e910:	3714      	adds	r7, #20
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr
 800e91a:	bf00      	nop
 800e91c:	40012c00 	.word	0x40012c00
 800e920:	50012c00 	.word	0x50012c00
 800e924:	40000400 	.word	0x40000400
 800e928:	50000400 	.word	0x50000400
 800e92c:	40000800 	.word	0x40000800
 800e930:	50000800 	.word	0x50000800
 800e934:	40000c00 	.word	0x40000c00
 800e938:	50000c00 	.word	0x50000c00
 800e93c:	40013400 	.word	0x40013400
 800e940:	50013400 	.word	0x50013400
 800e944:	40014000 	.word	0x40014000
 800e948:	50014000 	.word	0x50014000
 800e94c:	40014400 	.word	0x40014400
 800e950:	50014400 	.word	0x50014400
 800e954:	40014800 	.word	0x40014800
 800e958:	50014800 	.word	0x50014800

0800e95c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e95c:	b480      	push	{r7}
 800e95e:	b087      	sub	sp, #28
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
 800e964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6a1b      	ldr	r3, [r3, #32]
 800e96a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6a1b      	ldr	r3, [r3, #32]
 800e970:	f023 0201 	bic.w	r2, r3, #1
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	699b      	ldr	r3, [r3, #24]
 800e982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e98a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e98e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	f023 0303 	bic.w	r3, r3, #3
 800e996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	68fa      	ldr	r2, [r7, #12]
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	f023 0302 	bic.w	r3, r3, #2
 800e9a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	689b      	ldr	r3, [r3, #8]
 800e9ae:	697a      	ldr	r2, [r7, #20]
 800e9b0:	4313      	orrs	r3, r2
 800e9b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	4a40      	ldr	r2, [pc, #256]	@ (800eab8 <TIM_OC1_SetConfig+0x15c>)
 800e9b8:	4293      	cmp	r3, r2
 800e9ba:	d023      	beq.n	800ea04 <TIM_OC1_SetConfig+0xa8>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	4a3f      	ldr	r2, [pc, #252]	@ (800eabc <TIM_OC1_SetConfig+0x160>)
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	d01f      	beq.n	800ea04 <TIM_OC1_SetConfig+0xa8>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	4a3e      	ldr	r2, [pc, #248]	@ (800eac0 <TIM_OC1_SetConfig+0x164>)
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d01b      	beq.n	800ea04 <TIM_OC1_SetConfig+0xa8>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	4a3d      	ldr	r2, [pc, #244]	@ (800eac4 <TIM_OC1_SetConfig+0x168>)
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d017      	beq.n	800ea04 <TIM_OC1_SetConfig+0xa8>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	4a3c      	ldr	r2, [pc, #240]	@ (800eac8 <TIM_OC1_SetConfig+0x16c>)
 800e9d8:	4293      	cmp	r3, r2
 800e9da:	d013      	beq.n	800ea04 <TIM_OC1_SetConfig+0xa8>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	4a3b      	ldr	r2, [pc, #236]	@ (800eacc <TIM_OC1_SetConfig+0x170>)
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d00f      	beq.n	800ea04 <TIM_OC1_SetConfig+0xa8>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	4a3a      	ldr	r2, [pc, #232]	@ (800ead0 <TIM_OC1_SetConfig+0x174>)
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d00b      	beq.n	800ea04 <TIM_OC1_SetConfig+0xa8>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	4a39      	ldr	r2, [pc, #228]	@ (800ead4 <TIM_OC1_SetConfig+0x178>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d007      	beq.n	800ea04 <TIM_OC1_SetConfig+0xa8>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	4a38      	ldr	r2, [pc, #224]	@ (800ead8 <TIM_OC1_SetConfig+0x17c>)
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d003      	beq.n	800ea04 <TIM_OC1_SetConfig+0xa8>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	4a37      	ldr	r2, [pc, #220]	@ (800eadc <TIM_OC1_SetConfig+0x180>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d10c      	bne.n	800ea1e <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	f023 0308 	bic.w	r3, r3, #8
 800ea0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	697a      	ldr	r2, [r7, #20]
 800ea12:	4313      	orrs	r3, r2
 800ea14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	f023 0304 	bic.w	r3, r3, #4
 800ea1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	4a25      	ldr	r2, [pc, #148]	@ (800eab8 <TIM_OC1_SetConfig+0x15c>)
 800ea22:	4293      	cmp	r3, r2
 800ea24:	d023      	beq.n	800ea6e <TIM_OC1_SetConfig+0x112>
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	4a24      	ldr	r2, [pc, #144]	@ (800eabc <TIM_OC1_SetConfig+0x160>)
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	d01f      	beq.n	800ea6e <TIM_OC1_SetConfig+0x112>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	4a23      	ldr	r2, [pc, #140]	@ (800eac0 <TIM_OC1_SetConfig+0x164>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d01b      	beq.n	800ea6e <TIM_OC1_SetConfig+0x112>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	4a22      	ldr	r2, [pc, #136]	@ (800eac4 <TIM_OC1_SetConfig+0x168>)
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	d017      	beq.n	800ea6e <TIM_OC1_SetConfig+0x112>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	4a21      	ldr	r2, [pc, #132]	@ (800eac8 <TIM_OC1_SetConfig+0x16c>)
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d013      	beq.n	800ea6e <TIM_OC1_SetConfig+0x112>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	4a20      	ldr	r2, [pc, #128]	@ (800eacc <TIM_OC1_SetConfig+0x170>)
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	d00f      	beq.n	800ea6e <TIM_OC1_SetConfig+0x112>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4a1f      	ldr	r2, [pc, #124]	@ (800ead0 <TIM_OC1_SetConfig+0x174>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d00b      	beq.n	800ea6e <TIM_OC1_SetConfig+0x112>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4a1e      	ldr	r2, [pc, #120]	@ (800ead4 <TIM_OC1_SetConfig+0x178>)
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	d007      	beq.n	800ea6e <TIM_OC1_SetConfig+0x112>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4a1d      	ldr	r2, [pc, #116]	@ (800ead8 <TIM_OC1_SetConfig+0x17c>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d003      	beq.n	800ea6e <TIM_OC1_SetConfig+0x112>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	4a1c      	ldr	r2, [pc, #112]	@ (800eadc <TIM_OC1_SetConfig+0x180>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d111      	bne.n	800ea92 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ea74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ea7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	695b      	ldr	r3, [r3, #20]
 800ea82:	693a      	ldr	r2, [r7, #16]
 800ea84:	4313      	orrs	r3, r2
 800ea86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	699b      	ldr	r3, [r3, #24]
 800ea8c:	693a      	ldr	r2, [r7, #16]
 800ea8e:	4313      	orrs	r3, r2
 800ea90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	693a      	ldr	r2, [r7, #16]
 800ea96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	68fa      	ldr	r2, [r7, #12]
 800ea9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	685a      	ldr	r2, [r3, #4]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	697a      	ldr	r2, [r7, #20]
 800eaaa:	621a      	str	r2, [r3, #32]
}
 800eaac:	bf00      	nop
 800eaae:	371c      	adds	r7, #28
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr
 800eab8:	40012c00 	.word	0x40012c00
 800eabc:	50012c00 	.word	0x50012c00
 800eac0:	40013400 	.word	0x40013400
 800eac4:	50013400 	.word	0x50013400
 800eac8:	40014000 	.word	0x40014000
 800eacc:	50014000 	.word	0x50014000
 800ead0:	40014400 	.word	0x40014400
 800ead4:	50014400 	.word	0x50014400
 800ead8:	40014800 	.word	0x40014800
 800eadc:	50014800 	.word	0x50014800

0800eae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b087      	sub	sp, #28
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6a1b      	ldr	r3, [r3, #32]
 800eaee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6a1b      	ldr	r3, [r3, #32]
 800eaf4:	f023 0210 	bic.w	r2, r3, #16
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	685b      	ldr	r3, [r3, #4]
 800eb00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	699b      	ldr	r3, [r3, #24]
 800eb06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800eb0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eb12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eb1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	021b      	lsls	r3, r3, #8
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	4313      	orrs	r3, r2
 800eb26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	f023 0320 	bic.w	r3, r3, #32
 800eb2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	689b      	ldr	r3, [r3, #8]
 800eb34:	011b      	lsls	r3, r3, #4
 800eb36:	697a      	ldr	r2, [r7, #20]
 800eb38:	4313      	orrs	r3, r2
 800eb3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	4a36      	ldr	r2, [pc, #216]	@ (800ec18 <TIM_OC2_SetConfig+0x138>)
 800eb40:	4293      	cmp	r3, r2
 800eb42:	d00b      	beq.n	800eb5c <TIM_OC2_SetConfig+0x7c>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	4a35      	ldr	r2, [pc, #212]	@ (800ec1c <TIM_OC2_SetConfig+0x13c>)
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	d007      	beq.n	800eb5c <TIM_OC2_SetConfig+0x7c>
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	4a34      	ldr	r2, [pc, #208]	@ (800ec20 <TIM_OC2_SetConfig+0x140>)
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d003      	beq.n	800eb5c <TIM_OC2_SetConfig+0x7c>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	4a33      	ldr	r2, [pc, #204]	@ (800ec24 <TIM_OC2_SetConfig+0x144>)
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d10d      	bne.n	800eb78 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	68db      	ldr	r3, [r3, #12]
 800eb68:	011b      	lsls	r3, r3, #4
 800eb6a:	697a      	ldr	r2, [r7, #20]
 800eb6c:	4313      	orrs	r3, r2
 800eb6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	4a27      	ldr	r2, [pc, #156]	@ (800ec18 <TIM_OC2_SetConfig+0x138>)
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d023      	beq.n	800ebc8 <TIM_OC2_SetConfig+0xe8>
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	4a26      	ldr	r2, [pc, #152]	@ (800ec1c <TIM_OC2_SetConfig+0x13c>)
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d01f      	beq.n	800ebc8 <TIM_OC2_SetConfig+0xe8>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	4a25      	ldr	r2, [pc, #148]	@ (800ec20 <TIM_OC2_SetConfig+0x140>)
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	d01b      	beq.n	800ebc8 <TIM_OC2_SetConfig+0xe8>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	4a24      	ldr	r2, [pc, #144]	@ (800ec24 <TIM_OC2_SetConfig+0x144>)
 800eb94:	4293      	cmp	r3, r2
 800eb96:	d017      	beq.n	800ebc8 <TIM_OC2_SetConfig+0xe8>
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	4a23      	ldr	r2, [pc, #140]	@ (800ec28 <TIM_OC2_SetConfig+0x148>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d013      	beq.n	800ebc8 <TIM_OC2_SetConfig+0xe8>
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	4a22      	ldr	r2, [pc, #136]	@ (800ec2c <TIM_OC2_SetConfig+0x14c>)
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d00f      	beq.n	800ebc8 <TIM_OC2_SetConfig+0xe8>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	4a21      	ldr	r2, [pc, #132]	@ (800ec30 <TIM_OC2_SetConfig+0x150>)
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d00b      	beq.n	800ebc8 <TIM_OC2_SetConfig+0xe8>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	4a20      	ldr	r2, [pc, #128]	@ (800ec34 <TIM_OC2_SetConfig+0x154>)
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	d007      	beq.n	800ebc8 <TIM_OC2_SetConfig+0xe8>
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	4a1f      	ldr	r2, [pc, #124]	@ (800ec38 <TIM_OC2_SetConfig+0x158>)
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	d003      	beq.n	800ebc8 <TIM_OC2_SetConfig+0xe8>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	4a1e      	ldr	r2, [pc, #120]	@ (800ec3c <TIM_OC2_SetConfig+0x15c>)
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d113      	bne.n	800ebf0 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ebce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ebd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	695b      	ldr	r3, [r3, #20]
 800ebdc:	009b      	lsls	r3, r3, #2
 800ebde:	693a      	ldr	r2, [r7, #16]
 800ebe0:	4313      	orrs	r3, r2
 800ebe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	699b      	ldr	r3, [r3, #24]
 800ebe8:	009b      	lsls	r3, r3, #2
 800ebea:	693a      	ldr	r2, [r7, #16]
 800ebec:	4313      	orrs	r3, r2
 800ebee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	693a      	ldr	r2, [r7, #16]
 800ebf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	68fa      	ldr	r2, [r7, #12]
 800ebfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	685a      	ldr	r2, [r3, #4]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	697a      	ldr	r2, [r7, #20]
 800ec08:	621a      	str	r2, [r3, #32]
}
 800ec0a:	bf00      	nop
 800ec0c:	371c      	adds	r7, #28
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec14:	4770      	bx	lr
 800ec16:	bf00      	nop
 800ec18:	40012c00 	.word	0x40012c00
 800ec1c:	50012c00 	.word	0x50012c00
 800ec20:	40013400 	.word	0x40013400
 800ec24:	50013400 	.word	0x50013400
 800ec28:	40014000 	.word	0x40014000
 800ec2c:	50014000 	.word	0x50014000
 800ec30:	40014400 	.word	0x40014400
 800ec34:	50014400 	.word	0x50014400
 800ec38:	40014800 	.word	0x40014800
 800ec3c:	50014800 	.word	0x50014800

0800ec40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec40:	b480      	push	{r7}
 800ec42:	b087      	sub	sp, #28
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6a1b      	ldr	r3, [r3, #32]
 800ec4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6a1b      	ldr	r3, [r3, #32]
 800ec54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	685b      	ldr	r3, [r3, #4]
 800ec60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	69db      	ldr	r3, [r3, #28]
 800ec66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ec6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	f023 0303 	bic.w	r3, r3, #3
 800ec7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	68fa      	ldr	r2, [r7, #12]
 800ec82:	4313      	orrs	r3, r2
 800ec84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ec8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	689b      	ldr	r3, [r3, #8]
 800ec92:	021b      	lsls	r3, r3, #8
 800ec94:	697a      	ldr	r2, [r7, #20]
 800ec96:	4313      	orrs	r3, r2
 800ec98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	4a35      	ldr	r2, [pc, #212]	@ (800ed74 <TIM_OC3_SetConfig+0x134>)
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	d00b      	beq.n	800ecba <TIM_OC3_SetConfig+0x7a>
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	4a34      	ldr	r2, [pc, #208]	@ (800ed78 <TIM_OC3_SetConfig+0x138>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d007      	beq.n	800ecba <TIM_OC3_SetConfig+0x7a>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4a33      	ldr	r2, [pc, #204]	@ (800ed7c <TIM_OC3_SetConfig+0x13c>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d003      	beq.n	800ecba <TIM_OC3_SetConfig+0x7a>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	4a32      	ldr	r2, [pc, #200]	@ (800ed80 <TIM_OC3_SetConfig+0x140>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d10d      	bne.n	800ecd6 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ecc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	68db      	ldr	r3, [r3, #12]
 800ecc6:	021b      	lsls	r3, r3, #8
 800ecc8:	697a      	ldr	r2, [r7, #20]
 800ecca:	4313      	orrs	r3, r2
 800eccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ecd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	4a26      	ldr	r2, [pc, #152]	@ (800ed74 <TIM_OC3_SetConfig+0x134>)
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	d023      	beq.n	800ed26 <TIM_OC3_SetConfig+0xe6>
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	4a25      	ldr	r2, [pc, #148]	@ (800ed78 <TIM_OC3_SetConfig+0x138>)
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d01f      	beq.n	800ed26 <TIM_OC3_SetConfig+0xe6>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	4a24      	ldr	r2, [pc, #144]	@ (800ed7c <TIM_OC3_SetConfig+0x13c>)
 800ecea:	4293      	cmp	r3, r2
 800ecec:	d01b      	beq.n	800ed26 <TIM_OC3_SetConfig+0xe6>
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	4a23      	ldr	r2, [pc, #140]	@ (800ed80 <TIM_OC3_SetConfig+0x140>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d017      	beq.n	800ed26 <TIM_OC3_SetConfig+0xe6>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	4a22      	ldr	r2, [pc, #136]	@ (800ed84 <TIM_OC3_SetConfig+0x144>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d013      	beq.n	800ed26 <TIM_OC3_SetConfig+0xe6>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	4a21      	ldr	r2, [pc, #132]	@ (800ed88 <TIM_OC3_SetConfig+0x148>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d00f      	beq.n	800ed26 <TIM_OC3_SetConfig+0xe6>
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	4a20      	ldr	r2, [pc, #128]	@ (800ed8c <TIM_OC3_SetConfig+0x14c>)
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d00b      	beq.n	800ed26 <TIM_OC3_SetConfig+0xe6>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	4a1f      	ldr	r2, [pc, #124]	@ (800ed90 <TIM_OC3_SetConfig+0x150>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d007      	beq.n	800ed26 <TIM_OC3_SetConfig+0xe6>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	4a1e      	ldr	r2, [pc, #120]	@ (800ed94 <TIM_OC3_SetConfig+0x154>)
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	d003      	beq.n	800ed26 <TIM_OC3_SetConfig+0xe6>
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	4a1d      	ldr	r2, [pc, #116]	@ (800ed98 <TIM_OC3_SetConfig+0x158>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d113      	bne.n	800ed4e <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ed2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ed34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	695b      	ldr	r3, [r3, #20]
 800ed3a:	011b      	lsls	r3, r3, #4
 800ed3c:	693a      	ldr	r2, [r7, #16]
 800ed3e:	4313      	orrs	r3, r2
 800ed40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	699b      	ldr	r3, [r3, #24]
 800ed46:	011b      	lsls	r3, r3, #4
 800ed48:	693a      	ldr	r2, [r7, #16]
 800ed4a:	4313      	orrs	r3, r2
 800ed4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	693a      	ldr	r2, [r7, #16]
 800ed52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	68fa      	ldr	r2, [r7, #12]
 800ed58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	685a      	ldr	r2, [r3, #4]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	697a      	ldr	r2, [r7, #20]
 800ed66:	621a      	str	r2, [r3, #32]
}
 800ed68:	bf00      	nop
 800ed6a:	371c      	adds	r7, #28
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr
 800ed74:	40012c00 	.word	0x40012c00
 800ed78:	50012c00 	.word	0x50012c00
 800ed7c:	40013400 	.word	0x40013400
 800ed80:	50013400 	.word	0x50013400
 800ed84:	40014000 	.word	0x40014000
 800ed88:	50014000 	.word	0x50014000
 800ed8c:	40014400 	.word	0x40014400
 800ed90:	50014400 	.word	0x50014400
 800ed94:	40014800 	.word	0x40014800
 800ed98:	50014800 	.word	0x50014800

0800ed9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b087      	sub	sp, #28
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
 800eda4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6a1b      	ldr	r3, [r3, #32]
 800edaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6a1b      	ldr	r3, [r3, #32]
 800edb0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	685b      	ldr	r3, [r3, #4]
 800edbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	69db      	ldr	r3, [r3, #28]
 800edc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800edca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800edce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800edd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	021b      	lsls	r3, r3, #8
 800edde:	68fa      	ldr	r2, [r7, #12]
 800ede0:	4313      	orrs	r3, r2
 800ede2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800edea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	689b      	ldr	r3, [r3, #8]
 800edf0:	031b      	lsls	r3, r3, #12
 800edf2:	697a      	ldr	r2, [r7, #20]
 800edf4:	4313      	orrs	r3, r2
 800edf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	4a36      	ldr	r2, [pc, #216]	@ (800eed4 <TIM_OC4_SetConfig+0x138>)
 800edfc:	4293      	cmp	r3, r2
 800edfe:	d00b      	beq.n	800ee18 <TIM_OC4_SetConfig+0x7c>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	4a35      	ldr	r2, [pc, #212]	@ (800eed8 <TIM_OC4_SetConfig+0x13c>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d007      	beq.n	800ee18 <TIM_OC4_SetConfig+0x7c>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	4a34      	ldr	r2, [pc, #208]	@ (800eedc <TIM_OC4_SetConfig+0x140>)
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d003      	beq.n	800ee18 <TIM_OC4_SetConfig+0x7c>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	4a33      	ldr	r2, [pc, #204]	@ (800eee0 <TIM_OC4_SetConfig+0x144>)
 800ee14:	4293      	cmp	r3, r2
 800ee16:	d10d      	bne.n	800ee34 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ee1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	031b      	lsls	r3, r3, #12
 800ee26:	697a      	ldr	r2, [r7, #20]
 800ee28:	4313      	orrs	r3, r2
 800ee2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ee32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	4a27      	ldr	r2, [pc, #156]	@ (800eed4 <TIM_OC4_SetConfig+0x138>)
 800ee38:	4293      	cmp	r3, r2
 800ee3a:	d023      	beq.n	800ee84 <TIM_OC4_SetConfig+0xe8>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	4a26      	ldr	r2, [pc, #152]	@ (800eed8 <TIM_OC4_SetConfig+0x13c>)
 800ee40:	4293      	cmp	r3, r2
 800ee42:	d01f      	beq.n	800ee84 <TIM_OC4_SetConfig+0xe8>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	4a25      	ldr	r2, [pc, #148]	@ (800eedc <TIM_OC4_SetConfig+0x140>)
 800ee48:	4293      	cmp	r3, r2
 800ee4a:	d01b      	beq.n	800ee84 <TIM_OC4_SetConfig+0xe8>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	4a24      	ldr	r2, [pc, #144]	@ (800eee0 <TIM_OC4_SetConfig+0x144>)
 800ee50:	4293      	cmp	r3, r2
 800ee52:	d017      	beq.n	800ee84 <TIM_OC4_SetConfig+0xe8>
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	4a23      	ldr	r2, [pc, #140]	@ (800eee4 <TIM_OC4_SetConfig+0x148>)
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d013      	beq.n	800ee84 <TIM_OC4_SetConfig+0xe8>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	4a22      	ldr	r2, [pc, #136]	@ (800eee8 <TIM_OC4_SetConfig+0x14c>)
 800ee60:	4293      	cmp	r3, r2
 800ee62:	d00f      	beq.n	800ee84 <TIM_OC4_SetConfig+0xe8>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	4a21      	ldr	r2, [pc, #132]	@ (800eeec <TIM_OC4_SetConfig+0x150>)
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d00b      	beq.n	800ee84 <TIM_OC4_SetConfig+0xe8>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	4a20      	ldr	r2, [pc, #128]	@ (800eef0 <TIM_OC4_SetConfig+0x154>)
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d007      	beq.n	800ee84 <TIM_OC4_SetConfig+0xe8>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	4a1f      	ldr	r2, [pc, #124]	@ (800eef4 <TIM_OC4_SetConfig+0x158>)
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	d003      	beq.n	800ee84 <TIM_OC4_SetConfig+0xe8>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	4a1e      	ldr	r2, [pc, #120]	@ (800eef8 <TIM_OC4_SetConfig+0x15c>)
 800ee80:	4293      	cmp	r3, r2
 800ee82:	d113      	bne.n	800eeac <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ee84:	693b      	ldr	r3, [r7, #16]
 800ee86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ee8a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ee8c:	693b      	ldr	r3, [r7, #16]
 800ee8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ee92:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	695b      	ldr	r3, [r3, #20]
 800ee98:	019b      	lsls	r3, r3, #6
 800ee9a:	693a      	ldr	r2, [r7, #16]
 800ee9c:	4313      	orrs	r3, r2
 800ee9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	699b      	ldr	r3, [r3, #24]
 800eea4:	019b      	lsls	r3, r3, #6
 800eea6:	693a      	ldr	r2, [r7, #16]
 800eea8:	4313      	orrs	r3, r2
 800eeaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	693a      	ldr	r2, [r7, #16]
 800eeb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	68fa      	ldr	r2, [r7, #12]
 800eeb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	685a      	ldr	r2, [r3, #4]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	697a      	ldr	r2, [r7, #20]
 800eec4:	621a      	str	r2, [r3, #32]
}
 800eec6:	bf00      	nop
 800eec8:	371c      	adds	r7, #28
 800eeca:	46bd      	mov	sp, r7
 800eecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed0:	4770      	bx	lr
 800eed2:	bf00      	nop
 800eed4:	40012c00 	.word	0x40012c00
 800eed8:	50012c00 	.word	0x50012c00
 800eedc:	40013400 	.word	0x40013400
 800eee0:	50013400 	.word	0x50013400
 800eee4:	40014000 	.word	0x40014000
 800eee8:	50014000 	.word	0x50014000
 800eeec:	40014400 	.word	0x40014400
 800eef0:	50014400 	.word	0x50014400
 800eef4:	40014800 	.word	0x40014800
 800eef8:	50014800 	.word	0x50014800

0800eefc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eefc:	b480      	push	{r7}
 800eefe:	b087      	sub	sp, #28
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	6a1b      	ldr	r3, [r3, #32]
 800ef0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6a1b      	ldr	r3, [r3, #32]
 800ef10:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	685b      	ldr	r3, [r3, #4]
 800ef1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ef2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	68fa      	ldr	r2, [r7, #12]
 800ef36:	4313      	orrs	r3, r2
 800ef38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ef40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	689b      	ldr	r3, [r3, #8]
 800ef46:	041b      	lsls	r3, r3, #16
 800ef48:	693a      	ldr	r2, [r7, #16]
 800ef4a:	4313      	orrs	r3, r2
 800ef4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	4a21      	ldr	r2, [pc, #132]	@ (800efd8 <TIM_OC5_SetConfig+0xdc>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d023      	beq.n	800ef9e <TIM_OC5_SetConfig+0xa2>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4a20      	ldr	r2, [pc, #128]	@ (800efdc <TIM_OC5_SetConfig+0xe0>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d01f      	beq.n	800ef9e <TIM_OC5_SetConfig+0xa2>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4a1f      	ldr	r2, [pc, #124]	@ (800efe0 <TIM_OC5_SetConfig+0xe4>)
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d01b      	beq.n	800ef9e <TIM_OC5_SetConfig+0xa2>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	4a1e      	ldr	r2, [pc, #120]	@ (800efe4 <TIM_OC5_SetConfig+0xe8>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d017      	beq.n	800ef9e <TIM_OC5_SetConfig+0xa2>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	4a1d      	ldr	r2, [pc, #116]	@ (800efe8 <TIM_OC5_SetConfig+0xec>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d013      	beq.n	800ef9e <TIM_OC5_SetConfig+0xa2>
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	4a1c      	ldr	r2, [pc, #112]	@ (800efec <TIM_OC5_SetConfig+0xf0>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d00f      	beq.n	800ef9e <TIM_OC5_SetConfig+0xa2>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	4a1b      	ldr	r2, [pc, #108]	@ (800eff0 <TIM_OC5_SetConfig+0xf4>)
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d00b      	beq.n	800ef9e <TIM_OC5_SetConfig+0xa2>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	4a1a      	ldr	r2, [pc, #104]	@ (800eff4 <TIM_OC5_SetConfig+0xf8>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d007      	beq.n	800ef9e <TIM_OC5_SetConfig+0xa2>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	4a19      	ldr	r2, [pc, #100]	@ (800eff8 <TIM_OC5_SetConfig+0xfc>)
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d003      	beq.n	800ef9e <TIM_OC5_SetConfig+0xa2>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	4a18      	ldr	r2, [pc, #96]	@ (800effc <TIM_OC5_SetConfig+0x100>)
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d109      	bne.n	800efb2 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800efa4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	695b      	ldr	r3, [r3, #20]
 800efaa:	021b      	lsls	r3, r3, #8
 800efac:	697a      	ldr	r2, [r7, #20]
 800efae:	4313      	orrs	r3, r2
 800efb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	697a      	ldr	r2, [r7, #20]
 800efb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	68fa      	ldr	r2, [r7, #12]
 800efbc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	685a      	ldr	r2, [r3, #4]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	693a      	ldr	r2, [r7, #16]
 800efca:	621a      	str	r2, [r3, #32]
}
 800efcc:	bf00      	nop
 800efce:	371c      	adds	r7, #28
 800efd0:	46bd      	mov	sp, r7
 800efd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd6:	4770      	bx	lr
 800efd8:	40012c00 	.word	0x40012c00
 800efdc:	50012c00 	.word	0x50012c00
 800efe0:	40013400 	.word	0x40013400
 800efe4:	50013400 	.word	0x50013400
 800efe8:	40014000 	.word	0x40014000
 800efec:	50014000 	.word	0x50014000
 800eff0:	40014400 	.word	0x40014400
 800eff4:	50014400 	.word	0x50014400
 800eff8:	40014800 	.word	0x40014800
 800effc:	50014800 	.word	0x50014800

0800f000 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f000:	b480      	push	{r7}
 800f002:	b087      	sub	sp, #28
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6a1b      	ldr	r3, [r3, #32]
 800f00e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6a1b      	ldr	r3, [r3, #32]
 800f014:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f02e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	021b      	lsls	r3, r3, #8
 800f03a:	68fa      	ldr	r2, [r7, #12]
 800f03c:	4313      	orrs	r3, r2
 800f03e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	689b      	ldr	r3, [r3, #8]
 800f04c:	051b      	lsls	r3, r3, #20
 800f04e:	693a      	ldr	r2, [r7, #16]
 800f050:	4313      	orrs	r3, r2
 800f052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	4a22      	ldr	r2, [pc, #136]	@ (800f0e0 <TIM_OC6_SetConfig+0xe0>)
 800f058:	4293      	cmp	r3, r2
 800f05a:	d023      	beq.n	800f0a4 <TIM_OC6_SetConfig+0xa4>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	4a21      	ldr	r2, [pc, #132]	@ (800f0e4 <TIM_OC6_SetConfig+0xe4>)
 800f060:	4293      	cmp	r3, r2
 800f062:	d01f      	beq.n	800f0a4 <TIM_OC6_SetConfig+0xa4>
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	4a20      	ldr	r2, [pc, #128]	@ (800f0e8 <TIM_OC6_SetConfig+0xe8>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d01b      	beq.n	800f0a4 <TIM_OC6_SetConfig+0xa4>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	4a1f      	ldr	r2, [pc, #124]	@ (800f0ec <TIM_OC6_SetConfig+0xec>)
 800f070:	4293      	cmp	r3, r2
 800f072:	d017      	beq.n	800f0a4 <TIM_OC6_SetConfig+0xa4>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	4a1e      	ldr	r2, [pc, #120]	@ (800f0f0 <TIM_OC6_SetConfig+0xf0>)
 800f078:	4293      	cmp	r3, r2
 800f07a:	d013      	beq.n	800f0a4 <TIM_OC6_SetConfig+0xa4>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	4a1d      	ldr	r2, [pc, #116]	@ (800f0f4 <TIM_OC6_SetConfig+0xf4>)
 800f080:	4293      	cmp	r3, r2
 800f082:	d00f      	beq.n	800f0a4 <TIM_OC6_SetConfig+0xa4>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	4a1c      	ldr	r2, [pc, #112]	@ (800f0f8 <TIM_OC6_SetConfig+0xf8>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d00b      	beq.n	800f0a4 <TIM_OC6_SetConfig+0xa4>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	4a1b      	ldr	r2, [pc, #108]	@ (800f0fc <TIM_OC6_SetConfig+0xfc>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d007      	beq.n	800f0a4 <TIM_OC6_SetConfig+0xa4>
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	4a1a      	ldr	r2, [pc, #104]	@ (800f100 <TIM_OC6_SetConfig+0x100>)
 800f098:	4293      	cmp	r3, r2
 800f09a:	d003      	beq.n	800f0a4 <TIM_OC6_SetConfig+0xa4>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	4a19      	ldr	r2, [pc, #100]	@ (800f104 <TIM_OC6_SetConfig+0x104>)
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d109      	bne.n	800f0b8 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f0aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	695b      	ldr	r3, [r3, #20]
 800f0b0:	029b      	lsls	r3, r3, #10
 800f0b2:	697a      	ldr	r2, [r7, #20]
 800f0b4:	4313      	orrs	r3, r2
 800f0b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	697a      	ldr	r2, [r7, #20]
 800f0bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	68fa      	ldr	r2, [r7, #12]
 800f0c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	685a      	ldr	r2, [r3, #4]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	693a      	ldr	r2, [r7, #16]
 800f0d0:	621a      	str	r2, [r3, #32]
}
 800f0d2:	bf00      	nop
 800f0d4:	371c      	adds	r7, #28
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr
 800f0de:	bf00      	nop
 800f0e0:	40012c00 	.word	0x40012c00
 800f0e4:	50012c00 	.word	0x50012c00
 800f0e8:	40013400 	.word	0x40013400
 800f0ec:	50013400 	.word	0x50013400
 800f0f0:	40014000 	.word	0x40014000
 800f0f4:	50014000 	.word	0x50014000
 800f0f8:	40014400 	.word	0x40014400
 800f0fc:	50014400 	.word	0x50014400
 800f100:	40014800 	.word	0x40014800
 800f104:	50014800 	.word	0x50014800

0800f108 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f108:	b480      	push	{r7}
 800f10a:	b085      	sub	sp, #20
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f118:	2b01      	cmp	r3, #1
 800f11a:	d101      	bne.n	800f120 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f11c:	2302      	movs	r3, #2
 800f11e:	e097      	b.n	800f250 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2201      	movs	r2, #1
 800f124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2202      	movs	r2, #2
 800f12c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	685b      	ldr	r3, [r3, #4]
 800f136:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	689b      	ldr	r3, [r3, #8]
 800f13e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	4a45      	ldr	r2, [pc, #276]	@ (800f25c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800f146:	4293      	cmp	r3, r2
 800f148:	d00e      	beq.n	800f168 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	4a44      	ldr	r2, [pc, #272]	@ (800f260 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800f150:	4293      	cmp	r3, r2
 800f152:	d009      	beq.n	800f168 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	4a42      	ldr	r2, [pc, #264]	@ (800f264 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800f15a:	4293      	cmp	r3, r2
 800f15c:	d004      	beq.n	800f168 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	4a41      	ldr	r2, [pc, #260]	@ (800f268 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800f164:	4293      	cmp	r3, r2
 800f166:	d108      	bne.n	800f17a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f16e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	68fa      	ldr	r2, [r7, #12]
 800f176:	4313      	orrs	r3, r2
 800f178:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800f180:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f184:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	68fa      	ldr	r2, [r7, #12]
 800f18c:	4313      	orrs	r3, r2
 800f18e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	68fa      	ldr	r2, [r7, #12]
 800f196:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	4a2f      	ldr	r2, [pc, #188]	@ (800f25c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800f19e:	4293      	cmp	r3, r2
 800f1a0:	d040      	beq.n	800f224 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	4a2e      	ldr	r2, [pc, #184]	@ (800f260 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d03b      	beq.n	800f224 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f1b4:	d036      	beq.n	800f224 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f1be:	d031      	beq.n	800f224 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	4a29      	ldr	r2, [pc, #164]	@ (800f26c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800f1c6:	4293      	cmp	r3, r2
 800f1c8:	d02c      	beq.n	800f224 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	4a28      	ldr	r2, [pc, #160]	@ (800f270 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800f1d0:	4293      	cmp	r3, r2
 800f1d2:	d027      	beq.n	800f224 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	4a26      	ldr	r2, [pc, #152]	@ (800f274 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800f1da:	4293      	cmp	r3, r2
 800f1dc:	d022      	beq.n	800f224 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	4a25      	ldr	r2, [pc, #148]	@ (800f278 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	d01d      	beq.n	800f224 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4a23      	ldr	r2, [pc, #140]	@ (800f27c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d018      	beq.n	800f224 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	4a22      	ldr	r2, [pc, #136]	@ (800f280 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800f1f8:	4293      	cmp	r3, r2
 800f1fa:	d013      	beq.n	800f224 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	4a18      	ldr	r2, [pc, #96]	@ (800f264 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800f202:	4293      	cmp	r3, r2
 800f204:	d00e      	beq.n	800f224 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	4a17      	ldr	r2, [pc, #92]	@ (800f268 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800f20c:	4293      	cmp	r3, r2
 800f20e:	d009      	beq.n	800f224 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	4a1b      	ldr	r2, [pc, #108]	@ (800f284 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800f216:	4293      	cmp	r3, r2
 800f218:	d004      	beq.n	800f224 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	4a1a      	ldr	r2, [pc, #104]	@ (800f288 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800f220:	4293      	cmp	r3, r2
 800f222:	d10c      	bne.n	800f23e <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f22a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	689b      	ldr	r3, [r3, #8]
 800f230:	68ba      	ldr	r2, [r7, #8]
 800f232:	4313      	orrs	r3, r2
 800f234:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	68ba      	ldr	r2, [r7, #8]
 800f23c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2201      	movs	r2, #1
 800f242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2200      	movs	r2, #0
 800f24a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f24e:	2300      	movs	r3, #0
}
 800f250:	4618      	mov	r0, r3
 800f252:	3714      	adds	r7, #20
 800f254:	46bd      	mov	sp, r7
 800f256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25a:	4770      	bx	lr
 800f25c:	40012c00 	.word	0x40012c00
 800f260:	50012c00 	.word	0x50012c00
 800f264:	40013400 	.word	0x40013400
 800f268:	50013400 	.word	0x50013400
 800f26c:	40000400 	.word	0x40000400
 800f270:	50000400 	.word	0x50000400
 800f274:	40000800 	.word	0x40000800
 800f278:	50000800 	.word	0x50000800
 800f27c:	40000c00 	.word	0x40000c00
 800f280:	50000c00 	.word	0x50000c00
 800f284:	40014000 	.word	0x40014000
 800f288:	50014000 	.word	0x50014000

0800f28c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b082      	sub	sp, #8
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d101      	bne.n	800f29e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f29a:	2301      	movs	r3, #1
 800f29c:	e042      	b.n	800f324 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d106      	bne.n	800f2b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f7f2 ff33 	bl	800211c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2224      	movs	r2, #36	@ 0x24
 800f2ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	681a      	ldr	r2, [r3, #0]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f022 0201 	bic.w	r2, r2, #1
 800f2cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d002      	beq.n	800f2dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f000 fd02 	bl	800fce0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f000 fb51 	bl	800f984 <UART_SetConfig>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	d101      	bne.n	800f2ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	e01b      	b.n	800f324 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	685a      	ldr	r2, [r3, #4]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f2fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	689a      	ldr	r2, [r3, #8]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f30a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	681a      	ldr	r2, [r3, #0]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	f042 0201 	orr.w	r2, r2, #1
 800f31a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f000 fd81 	bl	800fe24 <UART_CheckIdleState>
 800f322:	4603      	mov	r3, r0
}
 800f324:	4618      	mov	r0, r3
 800f326:	3708      	adds	r7, #8
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b0ba      	sub	sp, #232	@ 0xe8
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	69db      	ldr	r3, [r3, #28]
 800f33a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	689b      	ldr	r3, [r3, #8]
 800f34e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f352:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f356:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f35a:	4013      	ands	r3, r2
 800f35c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f360:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f364:	2b00      	cmp	r3, #0
 800f366:	d11b      	bne.n	800f3a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f36c:	f003 0320 	and.w	r3, r3, #32
 800f370:	2b00      	cmp	r3, #0
 800f372:	d015      	beq.n	800f3a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f378:	f003 0320 	and.w	r3, r3, #32
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d105      	bne.n	800f38c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d009      	beq.n	800f3a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f390:	2b00      	cmp	r3, #0
 800f392:	f000 82cb 	beq.w	800f92c <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	4798      	blx	r3
      }
      return;
 800f39e:	e2c5      	b.n	800f92c <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f3a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	f000 8123 	beq.w	800f5f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f3aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f3ae:	4b8d      	ldr	r3, [pc, #564]	@ (800f5e4 <HAL_UART_IRQHandler+0x2b8>)
 800f3b0:	4013      	ands	r3, r2
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d106      	bne.n	800f3c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f3b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f3ba:	4b8b      	ldr	r3, [pc, #556]	@ (800f5e8 <HAL_UART_IRQHandler+0x2bc>)
 800f3bc:	4013      	ands	r3, r2
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	f000 8116 	beq.w	800f5f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f3c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3c8:	f003 0301 	and.w	r3, r3, #1
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d011      	beq.n	800f3f4 <HAL_UART_IRQHandler+0xc8>
 800f3d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f3d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d00b      	beq.n	800f3f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	2201      	movs	r2, #1
 800f3e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f3ea:	f043 0201 	orr.w	r2, r3, #1
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3f8:	f003 0302 	and.w	r3, r3, #2
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d011      	beq.n	800f424 <HAL_UART_IRQHandler+0xf8>
 800f400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f404:	f003 0301 	and.w	r3, r3, #1
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d00b      	beq.n	800f424 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	2202      	movs	r2, #2
 800f412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f41a:	f043 0204 	orr.w	r2, r3, #4
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f428:	f003 0304 	and.w	r3, r3, #4
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d011      	beq.n	800f454 <HAL_UART_IRQHandler+0x128>
 800f430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f434:	f003 0301 	and.w	r3, r3, #1
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d00b      	beq.n	800f454 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	2204      	movs	r2, #4
 800f442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f44a:	f043 0202 	orr.w	r2, r3, #2
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f458:	f003 0308 	and.w	r3, r3, #8
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d017      	beq.n	800f490 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f464:	f003 0320 	and.w	r3, r3, #32
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d105      	bne.n	800f478 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f46c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f470:	4b5c      	ldr	r3, [pc, #368]	@ (800f5e4 <HAL_UART_IRQHandler+0x2b8>)
 800f472:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f474:	2b00      	cmp	r3, #0
 800f476:	d00b      	beq.n	800f490 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	2208      	movs	r2, #8
 800f47e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f486:	f043 0208 	orr.w	r2, r3, #8
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d012      	beq.n	800f4c2 <HAL_UART_IRQHandler+0x196>
 800f49c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f4a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d00c      	beq.n	800f4c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f4b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f4b8:	f043 0220 	orr.w	r2, r3, #32
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	f000 8231 	beq.w	800f930 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f4ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f4d2:	f003 0320 	and.w	r3, r3, #32
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d013      	beq.n	800f502 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f4da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f4de:	f003 0320 	and.w	r3, r3, #32
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d105      	bne.n	800f4f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f4e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f4ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d007      	beq.n	800f502 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d003      	beq.n	800f502 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f508:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	689b      	ldr	r3, [r3, #8]
 800f512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f516:	2b40      	cmp	r3, #64	@ 0x40
 800f518:	d005      	beq.n	800f526 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f51a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f51e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f522:	2b00      	cmp	r3, #0
 800f524:	d054      	beq.n	800f5d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f000 fd93 	bl	8010052 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	689b      	ldr	r3, [r3, #8]
 800f532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f536:	2b40      	cmp	r3, #64	@ 0x40
 800f538:	d146      	bne.n	800f5c8 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	3308      	adds	r3, #8
 800f540:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f544:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f548:	e853 3f00 	ldrex	r3, [r3]
 800f54c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f550:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f554:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f558:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	3308      	adds	r3, #8
 800f562:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f566:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f56a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f56e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f572:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f576:	e841 2300 	strex	r3, r2, [r1]
 800f57a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f57e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f582:	2b00      	cmp	r3, #0
 800f584:	d1d9      	bne.n	800f53a <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d017      	beq.n	800f5c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f596:	4a15      	ldr	r2, [pc, #84]	@ (800f5ec <HAL_UART_IRQHandler+0x2c0>)
 800f598:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f7f5 ff37 	bl	8005414 <HAL_DMA_Abort_IT>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d019      	beq.n	800f5e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5b4:	687a      	ldr	r2, [r7, #4]
 800f5b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800f5ba:	4610      	mov	r0, r2
 800f5bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5be:	e00f      	b.n	800f5e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f000 f9c9 	bl	800f958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5c6:	e00b      	b.n	800f5e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f000 f9c5 	bl	800f958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5ce:	e007      	b.n	800f5e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f000 f9c1 	bl	800f958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800f5de:	e1a7      	b.n	800f930 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5e0:	bf00      	nop
    return;
 800f5e2:	e1a5      	b.n	800f930 <HAL_UART_IRQHandler+0x604>
 800f5e4:	10000001 	.word	0x10000001
 800f5e8:	04000120 	.word	0x04000120
 800f5ec:	0801011f 	.word	0x0801011f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5f4:	2b01      	cmp	r3, #1
 800f5f6:	f040 8150 	bne.w	800f89a <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f5fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f5fe:	f003 0310 	and.w	r3, r3, #16
 800f602:	2b00      	cmp	r3, #0
 800f604:	f000 8149 	beq.w	800f89a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f60c:	f003 0310 	and.w	r3, r3, #16
 800f610:	2b00      	cmp	r3, #0
 800f612:	f000 8142 	beq.w	800f89a <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	2210      	movs	r2, #16
 800f61c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	689b      	ldr	r3, [r3, #8]
 800f624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f628:	2b40      	cmp	r3, #64	@ 0x40
 800f62a:	f040 80b8 	bne.w	800f79e <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f638:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f63c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f640:	2b00      	cmp	r3, #0
 800f642:	f000 8177 	beq.w	800f934 <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f64c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f650:	429a      	cmp	r2, r3
 800f652:	f080 816f 	bcs.w	800f934 <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f65c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f668:	2b81      	cmp	r3, #129	@ 0x81
 800f66a:	f000 8087 	beq.w	800f77c <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f676:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f67a:	e853 3f00 	ldrex	r3, [r3]
 800f67e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f682:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f686:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f68a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	461a      	mov	r2, r3
 800f694:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f698:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f69c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f6a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f6a8:	e841 2300 	strex	r3, r2, [r1]
 800f6ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f6b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d1da      	bne.n	800f66e <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	3308      	adds	r3, #8
 800f6be:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f6c2:	e853 3f00 	ldrex	r3, [r3]
 800f6c6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f6c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f6ca:	f023 0301 	bic.w	r3, r3, #1
 800f6ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	3308      	adds	r3, #8
 800f6d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f6dc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f6e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6e2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f6e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f6e8:	e841 2300 	strex	r3, r2, [r1]
 800f6ec:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f6ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d1e1      	bne.n	800f6b8 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	3308      	adds	r3, #8
 800f6fa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f6fe:	e853 3f00 	ldrex	r3, [r3]
 800f702:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f704:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f706:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f70a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	3308      	adds	r3, #8
 800f714:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f718:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f71a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f71c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f71e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f720:	e841 2300 	strex	r3, r2, [r1]
 800f724:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f726:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d1e3      	bne.n	800f6f4 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2220      	movs	r2, #32
 800f730:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2200      	movs	r2, #0
 800f738:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f742:	e853 3f00 	ldrex	r3, [r3]
 800f746:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f748:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f74a:	f023 0310 	bic.w	r3, r3, #16
 800f74e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	461a      	mov	r2, r3
 800f758:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f75c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f75e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f760:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f762:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f764:	e841 2300 	strex	r3, r2, [r1]
 800f768:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f76a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d1e4      	bne.n	800f73a <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f776:	4618      	mov	r0, r3
 800f778:	f7f5 fdd0 	bl	800531c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2202      	movs	r2, #2
 800f780:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f78e:	b29b      	uxth	r3, r3
 800f790:	1ad3      	subs	r3, r2, r3
 800f792:	b29b      	uxth	r3, r3
 800f794:	4619      	mov	r1, r3
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f000 f8e8 	bl	800f96c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f79c:	e0ca      	b.n	800f934 <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	1ad3      	subs	r3, r2, r3
 800f7ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	f000 80bc 	beq.w	800f938 <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 800f7c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	f000 80b7 	beq.w	800f938 <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7d2:	e853 3f00 	ldrex	r3, [r3]
 800f7d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f7d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f7de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f7ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800f7ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f7f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f7f4:	e841 2300 	strex	r3, r2, [r1]
 800f7f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f7fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d1e4      	bne.n	800f7ca <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	3308      	adds	r3, #8
 800f806:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f80a:	e853 3f00 	ldrex	r3, [r3]
 800f80e:	623b      	str	r3, [r7, #32]
   return(result);
 800f810:	6a3b      	ldr	r3, [r7, #32]
 800f812:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f816:	f023 0301 	bic.w	r3, r3, #1
 800f81a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	3308      	adds	r3, #8
 800f824:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f828:	633a      	str	r2, [r7, #48]	@ 0x30
 800f82a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f82c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f82e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f830:	e841 2300 	strex	r3, r2, [r1]
 800f834:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d1e1      	bne.n	800f800 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2220      	movs	r2, #32
 800f840:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2200      	movs	r2, #0
 800f848:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2200      	movs	r2, #0
 800f84e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	e853 3f00 	ldrex	r3, [r3]
 800f85c:	60fb      	str	r3, [r7, #12]
   return(result);
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	f023 0310 	bic.w	r3, r3, #16
 800f864:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	461a      	mov	r2, r3
 800f86e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f872:	61fb      	str	r3, [r7, #28]
 800f874:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f876:	69b9      	ldr	r1, [r7, #24]
 800f878:	69fa      	ldr	r2, [r7, #28]
 800f87a:	e841 2300 	strex	r3, r2, [r1]
 800f87e:	617b      	str	r3, [r7, #20]
   return(result);
 800f880:	697b      	ldr	r3, [r7, #20]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d1e4      	bne.n	800f850 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2202      	movs	r2, #2
 800f88a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f88c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f890:	4619      	mov	r1, r3
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f000 f86a 	bl	800f96c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f898:	e04e      	b.n	800f938 <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f89a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f89e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d014      	beq.n	800f8d0 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f8a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d105      	bne.n	800f8be <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f8b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f8b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d008      	beq.n	800f8d0 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d03a      	beq.n	800f93c <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	4798      	blx	r3
    }
    return;
 800f8ce:	e035      	b.n	800f93c <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f8d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d009      	beq.n	800f8f0 <HAL_UART_IRQHandler+0x5c4>
 800f8dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d003      	beq.n	800f8f0 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f000 fc2e 	bl	801014a <UART_EndTransmit_IT>
    return;
 800f8ee:	e026      	b.n	800f93e <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f8f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d009      	beq.n	800f910 <HAL_UART_IRQHandler+0x5e4>
 800f8fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f900:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f904:	2b00      	cmp	r3, #0
 800f906:	d003      	beq.n	800f910 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f000 fc53 	bl	80101b4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f90e:	e016      	b.n	800f93e <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f914:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d010      	beq.n	800f93e <HAL_UART_IRQHandler+0x612>
 800f91c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f920:	2b00      	cmp	r3, #0
 800f922:	da0c      	bge.n	800f93e <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f000 fc3b 	bl	80101a0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f92a:	e008      	b.n	800f93e <HAL_UART_IRQHandler+0x612>
      return;
 800f92c:	bf00      	nop
 800f92e:	e006      	b.n	800f93e <HAL_UART_IRQHandler+0x612>
    return;
 800f930:	bf00      	nop
 800f932:	e004      	b.n	800f93e <HAL_UART_IRQHandler+0x612>
      return;
 800f934:	bf00      	nop
 800f936:	e002      	b.n	800f93e <HAL_UART_IRQHandler+0x612>
      return;
 800f938:	bf00      	nop
 800f93a:	e000      	b.n	800f93e <HAL_UART_IRQHandler+0x612>
    return;
 800f93c:	bf00      	nop
  }
}
 800f93e:	37e8      	adds	r7, #232	@ 0xe8
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f944:	b480      	push	{r7}
 800f946:	b083      	sub	sp, #12
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f94c:	bf00      	nop
 800f94e:	370c      	adds	r7, #12
 800f950:	46bd      	mov	sp, r7
 800f952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f956:	4770      	bx	lr

0800f958 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f958:	b480      	push	{r7}
 800f95a:	b083      	sub	sp, #12
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f960:	bf00      	nop
 800f962:	370c      	adds	r7, #12
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr

0800f96c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f96c:	b480      	push	{r7}
 800f96e:	b083      	sub	sp, #12
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
 800f974:	460b      	mov	r3, r1
 800f976:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f978:	bf00      	nop
 800f97a:	370c      	adds	r7, #12
 800f97c:	46bd      	mov	sp, r7
 800f97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f982:	4770      	bx	lr

0800f984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f988:	b094      	sub	sp, #80	@ 0x50
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f98e:	2300      	movs	r3, #0
 800f990:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800f994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f996:	681a      	ldr	r2, [r3, #0]
 800f998:	4b83      	ldr	r3, [pc, #524]	@ (800fba8 <UART_SetConfig+0x224>)
 800f99a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f99e:	689a      	ldr	r2, [r3, #8]
 800f9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9a2:	691b      	ldr	r3, [r3, #16]
 800f9a4:	431a      	orrs	r2, r3
 800f9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9a8:	695b      	ldr	r3, [r3, #20]
 800f9aa:	431a      	orrs	r2, r3
 800f9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9ae:	69db      	ldr	r3, [r3, #28]
 800f9b0:	4313      	orrs	r3, r2
 800f9b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	497c      	ldr	r1, [pc, #496]	@ (800fbac <UART_SetConfig+0x228>)
 800f9bc:	4019      	ands	r1, r3
 800f9be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9c4:	430b      	orrs	r3, r1
 800f9c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	685b      	ldr	r3, [r3, #4]
 800f9ce:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800f9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9d4:	68d9      	ldr	r1, [r3, #12]
 800f9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9d8:	681a      	ldr	r2, [r3, #0]
 800f9da:	ea40 0301 	orr.w	r3, r0, r1
 800f9de:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f9e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9e2:	699b      	ldr	r3, [r3, #24]
 800f9e4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f9e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9e8:	681a      	ldr	r2, [r3, #0]
 800f9ea:	4b6f      	ldr	r3, [pc, #444]	@ (800fba8 <UART_SetConfig+0x224>)
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d009      	beq.n	800fa04 <UART_SetConfig+0x80>
 800f9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9f2:	681a      	ldr	r2, [r3, #0]
 800f9f4:	4b6e      	ldr	r3, [pc, #440]	@ (800fbb0 <UART_SetConfig+0x22c>)
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d004      	beq.n	800fa04 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9fc:	6a1a      	ldr	r2, [r3, #32]
 800f9fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa00:	4313      	orrs	r3, r2
 800fa02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fa04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	689b      	ldr	r3, [r3, #8]
 800fa0a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800fa0e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800fa12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa14:	681a      	ldr	r2, [r3, #0]
 800fa16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa18:	430b      	orrs	r3, r1
 800fa1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fa1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa22:	f023 000f 	bic.w	r0, r3, #15
 800fa26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa28:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800fa2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa2c:	681a      	ldr	r2, [r3, #0]
 800fa2e:	ea40 0301 	orr.w	r3, r0, r1
 800fa32:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fa34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa36:	681a      	ldr	r2, [r3, #0]
 800fa38:	4b5e      	ldr	r3, [pc, #376]	@ (800fbb4 <UART_SetConfig+0x230>)
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d102      	bne.n	800fa44 <UART_SetConfig+0xc0>
 800fa3e:	2301      	movs	r3, #1
 800fa40:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fa42:	e032      	b.n	800faaa <UART_SetConfig+0x126>
 800fa44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa46:	681a      	ldr	r2, [r3, #0]
 800fa48:	4b5b      	ldr	r3, [pc, #364]	@ (800fbb8 <UART_SetConfig+0x234>)
 800fa4a:	429a      	cmp	r2, r3
 800fa4c:	d102      	bne.n	800fa54 <UART_SetConfig+0xd0>
 800fa4e:	2302      	movs	r3, #2
 800fa50:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fa52:	e02a      	b.n	800faaa <UART_SetConfig+0x126>
 800fa54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa56:	681a      	ldr	r2, [r3, #0]
 800fa58:	4b58      	ldr	r3, [pc, #352]	@ (800fbbc <UART_SetConfig+0x238>)
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d102      	bne.n	800fa64 <UART_SetConfig+0xe0>
 800fa5e:	2304      	movs	r3, #4
 800fa60:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fa62:	e022      	b.n	800faaa <UART_SetConfig+0x126>
 800fa64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa66:	681a      	ldr	r2, [r3, #0]
 800fa68:	4b55      	ldr	r3, [pc, #340]	@ (800fbc0 <UART_SetConfig+0x23c>)
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d102      	bne.n	800fa74 <UART_SetConfig+0xf0>
 800fa6e:	2308      	movs	r3, #8
 800fa70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fa72:	e01a      	b.n	800faaa <UART_SetConfig+0x126>
 800fa74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa76:	681a      	ldr	r2, [r3, #0]
 800fa78:	4b52      	ldr	r3, [pc, #328]	@ (800fbc4 <UART_SetConfig+0x240>)
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d102      	bne.n	800fa84 <UART_SetConfig+0x100>
 800fa7e:	2310      	movs	r3, #16
 800fa80:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fa82:	e012      	b.n	800faaa <UART_SetConfig+0x126>
 800fa84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa86:	681a      	ldr	r2, [r3, #0]
 800fa88:	4b4f      	ldr	r3, [pc, #316]	@ (800fbc8 <UART_SetConfig+0x244>)
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d103      	bne.n	800fa96 <UART_SetConfig+0x112>
 800fa8e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800fa92:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fa94:	e009      	b.n	800faaa <UART_SetConfig+0x126>
 800fa96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa98:	681a      	ldr	r2, [r3, #0]
 800fa9a:	4b43      	ldr	r3, [pc, #268]	@ (800fba8 <UART_SetConfig+0x224>)
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d102      	bne.n	800faa6 <UART_SetConfig+0x122>
 800faa0:	2320      	movs	r3, #32
 800faa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800faa4:	e001      	b.n	800faaa <UART_SetConfig+0x126>
 800faa6:	2300      	movs	r3, #0
 800faa8:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800faaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faac:	681a      	ldr	r2, [r3, #0]
 800faae:	4b3e      	ldr	r3, [pc, #248]	@ (800fba8 <UART_SetConfig+0x224>)
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d005      	beq.n	800fac0 <UART_SetConfig+0x13c>
 800fab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fab6:	681a      	ldr	r2, [r3, #0]
 800fab8:	4b3d      	ldr	r3, [pc, #244]	@ (800fbb0 <UART_SetConfig+0x22c>)
 800faba:	429a      	cmp	r2, r3
 800fabc:	f040 8088 	bne.w	800fbd0 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800fac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fac2:	2200      	movs	r2, #0
 800fac4:	623b      	str	r3, [r7, #32]
 800fac6:	627a      	str	r2, [r7, #36]	@ 0x24
 800fac8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800facc:	f7fc f9a2 	bl	800be14 <HAL_RCCEx_GetPeriphCLKFreq>
 800fad0:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800fad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	f000 80eb 	beq.w	800fcb0 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fadc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fade:	4a3b      	ldr	r2, [pc, #236]	@ (800fbcc <UART_SetConfig+0x248>)
 800fae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fae4:	461a      	mov	r2, r3
 800fae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fae8:	fbb3 f3f2 	udiv	r3, r3, r2
 800faec:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800faee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faf0:	685a      	ldr	r2, [r3, #4]
 800faf2:	4613      	mov	r3, r2
 800faf4:	005b      	lsls	r3, r3, #1
 800faf6:	4413      	add	r3, r2
 800faf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fafa:	429a      	cmp	r2, r3
 800fafc:	d305      	bcc.n	800fb0a <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fafe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb00:	685b      	ldr	r3, [r3, #4]
 800fb02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fb04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d903      	bls.n	800fb12 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800fb10:	e048      	b.n	800fba4 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fb14:	2200      	movs	r2, #0
 800fb16:	61bb      	str	r3, [r7, #24]
 800fb18:	61fa      	str	r2, [r7, #28]
 800fb1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb1e:	4a2b      	ldr	r2, [pc, #172]	@ (800fbcc <UART_SetConfig+0x248>)
 800fb20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb24:	b29b      	uxth	r3, r3
 800fb26:	2200      	movs	r2, #0
 800fb28:	613b      	str	r3, [r7, #16]
 800fb2a:	617a      	str	r2, [r7, #20]
 800fb2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fb30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800fb34:	f7f0 fbbe 	bl	80002b4 <__aeabi_uldivmod>
 800fb38:	4602      	mov	r2, r0
 800fb3a:	460b      	mov	r3, r1
 800fb3c:	4610      	mov	r0, r2
 800fb3e:	4619      	mov	r1, r3
 800fb40:	f04f 0200 	mov.w	r2, #0
 800fb44:	f04f 0300 	mov.w	r3, #0
 800fb48:	020b      	lsls	r3, r1, #8
 800fb4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fb4e:	0202      	lsls	r2, r0, #8
 800fb50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fb52:	6849      	ldr	r1, [r1, #4]
 800fb54:	0849      	lsrs	r1, r1, #1
 800fb56:	2000      	movs	r0, #0
 800fb58:	460c      	mov	r4, r1
 800fb5a:	4605      	mov	r5, r0
 800fb5c:	eb12 0804 	adds.w	r8, r2, r4
 800fb60:	eb43 0905 	adc.w	r9, r3, r5
 800fb64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb66:	685b      	ldr	r3, [r3, #4]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	60bb      	str	r3, [r7, #8]
 800fb6c:	60fa      	str	r2, [r7, #12]
 800fb6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fb72:	4640      	mov	r0, r8
 800fb74:	4649      	mov	r1, r9
 800fb76:	f7f0 fb9d 	bl	80002b4 <__aeabi_uldivmod>
 800fb7a:	4602      	mov	r2, r0
 800fb7c:	460b      	mov	r3, r1
 800fb7e:	4613      	mov	r3, r2
 800fb80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fb82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fb88:	d308      	bcc.n	800fb9c <UART_SetConfig+0x218>
 800fb8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fb90:	d204      	bcs.n	800fb9c <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800fb92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fb98:	60da      	str	r2, [r3, #12]
 800fb9a:	e003      	b.n	800fba4 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800fba2:	e085      	b.n	800fcb0 <UART_SetConfig+0x32c>
 800fba4:	e084      	b.n	800fcb0 <UART_SetConfig+0x32c>
 800fba6:	bf00      	nop
 800fba8:	46002400 	.word	0x46002400
 800fbac:	cfff69f3 	.word	0xcfff69f3
 800fbb0:	56002400 	.word	0x56002400
 800fbb4:	40013800 	.word	0x40013800
 800fbb8:	40004400 	.word	0x40004400
 800fbbc:	40004800 	.word	0x40004800
 800fbc0:	40004c00 	.word	0x40004c00
 800fbc4:	40005000 	.word	0x40005000
 800fbc8:	40006400 	.word	0x40006400
 800fbcc:	0801083c 	.word	0x0801083c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fbd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbd2:	69db      	ldr	r3, [r3, #28]
 800fbd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fbd8:	d13c      	bne.n	800fc54 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800fbda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fbdc:	2200      	movs	r2, #0
 800fbde:	603b      	str	r3, [r7, #0]
 800fbe0:	607a      	str	r2, [r7, #4]
 800fbe2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fbe6:	f7fc f915 	bl	800be14 <HAL_RCCEx_GetPeriphCLKFreq>
 800fbea:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fbec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d05e      	beq.n	800fcb0 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fbf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbf6:	4a39      	ldr	r2, [pc, #228]	@ (800fcdc <UART_SetConfig+0x358>)
 800fbf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc00:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc04:	005a      	lsls	r2, r3, #1
 800fc06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc08:	685b      	ldr	r3, [r3, #4]
 800fc0a:	085b      	lsrs	r3, r3, #1
 800fc0c:	441a      	add	r2, r3
 800fc0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fc18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc1a:	2b0f      	cmp	r3, #15
 800fc1c:	d916      	bls.n	800fc4c <UART_SetConfig+0x2c8>
 800fc1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fc24:	d212      	bcs.n	800fc4c <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fc26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc28:	b29b      	uxth	r3, r3
 800fc2a:	f023 030f 	bic.w	r3, r3, #15
 800fc2e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fc30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc32:	085b      	lsrs	r3, r3, #1
 800fc34:	b29b      	uxth	r3, r3
 800fc36:	f003 0307 	and.w	r3, r3, #7
 800fc3a:	b29a      	uxth	r2, r3
 800fc3c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fc3e:	4313      	orrs	r3, r2
 800fc40:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800fc42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800fc48:	60da      	str	r2, [r3, #12]
 800fc4a:	e031      	b.n	800fcb0 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800fc52:	e02d      	b.n	800fcb0 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800fc54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc56:	2200      	movs	r2, #0
 800fc58:	469a      	mov	sl, r3
 800fc5a:	4693      	mov	fp, r2
 800fc5c:	4650      	mov	r0, sl
 800fc5e:	4659      	mov	r1, fp
 800fc60:	f7fc f8d8 	bl	800be14 <HAL_RCCEx_GetPeriphCLKFreq>
 800fc64:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800fc66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d021      	beq.n	800fcb0 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc70:	4a1a      	ldr	r2, [pc, #104]	@ (800fcdc <UART_SetConfig+0x358>)
 800fc72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc76:	461a      	mov	r2, r3
 800fc78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc7a:	fbb3 f2f2 	udiv	r2, r3, r2
 800fc7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc80:	685b      	ldr	r3, [r3, #4]
 800fc82:	085b      	lsrs	r3, r3, #1
 800fc84:	441a      	add	r2, r3
 800fc86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fc90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc92:	2b0f      	cmp	r3, #15
 800fc94:	d909      	bls.n	800fcaa <UART_SetConfig+0x326>
 800fc96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fc9c:	d205      	bcs.n	800fcaa <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fc9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fca0:	b29a      	uxth	r2, r3
 800fca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	60da      	str	r2, [r3, #12]
 800fca8:	e002      	b.n	800fcb0 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800fcaa:	2301      	movs	r3, #1
 800fcac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fcb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcb2:	2201      	movs	r2, #1
 800fcb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800fcb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcba:	2201      	movs	r2, #1
 800fcbc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fcc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800fcc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcc8:	2200      	movs	r2, #0
 800fcca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fccc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3750      	adds	r7, #80	@ 0x50
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fcda:	bf00      	nop
 800fcdc:	0801083c 	.word	0x0801083c

0800fce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b083      	sub	sp, #12
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcec:	f003 0308 	and.w	r3, r3, #8
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d00a      	beq.n	800fd0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	685b      	ldr	r3, [r3, #4]
 800fcfa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	430a      	orrs	r2, r1
 800fd08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd0e:	f003 0301 	and.w	r3, r3, #1
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d00a      	beq.n	800fd2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	685b      	ldr	r3, [r3, #4]
 800fd1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	430a      	orrs	r2, r1
 800fd2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd30:	f003 0302 	and.w	r3, r3, #2
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d00a      	beq.n	800fd4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	430a      	orrs	r2, r1
 800fd4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd52:	f003 0304 	and.w	r3, r3, #4
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d00a      	beq.n	800fd70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	685b      	ldr	r3, [r3, #4]
 800fd60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	430a      	orrs	r2, r1
 800fd6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd74:	f003 0310 	and.w	r3, r3, #16
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d00a      	beq.n	800fd92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	689b      	ldr	r3, [r3, #8]
 800fd82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	430a      	orrs	r2, r1
 800fd90:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd96:	f003 0320 	and.w	r3, r3, #32
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d00a      	beq.n	800fdb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	689b      	ldr	r3, [r3, #8]
 800fda4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	430a      	orrs	r2, r1
 800fdb2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d01a      	beq.n	800fdf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	685b      	ldr	r3, [r3, #4]
 800fdc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	430a      	orrs	r2, r1
 800fdd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fdde:	d10a      	bne.n	800fdf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	685b      	ldr	r3, [r3, #4]
 800fde6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	430a      	orrs	r2, r1
 800fdf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d00a      	beq.n	800fe18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	685b      	ldr	r3, [r3, #4]
 800fe08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	430a      	orrs	r2, r1
 800fe16:	605a      	str	r2, [r3, #4]
  }
}
 800fe18:	bf00      	nop
 800fe1a:	370c      	adds	r7, #12
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr

0800fe24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b098      	sub	sp, #96	@ 0x60
 800fe28:	af02      	add	r7, sp, #8
 800fe2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2200      	movs	r2, #0
 800fe30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fe34:	f7f2 fd2e 	bl	8002894 <HAL_GetTick>
 800fe38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	f003 0308 	and.w	r3, r3, #8
 800fe44:	2b08      	cmp	r3, #8
 800fe46:	d12f      	bne.n	800fea8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fe48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fe4c:	9300      	str	r3, [sp, #0]
 800fe4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe50:	2200      	movs	r2, #0
 800fe52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f000 f88e 	bl	800ff78 <UART_WaitOnFlagUntilTimeout>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d022      	beq.n	800fea8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe6a:	e853 3f00 	ldrex	r3, [r3]
 800fe6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fe70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fe76:	653b      	str	r3, [r7, #80]	@ 0x50
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	461a      	mov	r2, r3
 800fe7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe80:	647b      	str	r3, [r7, #68]	@ 0x44
 800fe82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fe86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fe88:	e841 2300 	strex	r3, r2, [r1]
 800fe8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fe8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d1e6      	bne.n	800fe62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2220      	movs	r2, #32
 800fe98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fea4:	2303      	movs	r3, #3
 800fea6:	e063      	b.n	800ff70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	f003 0304 	and.w	r3, r3, #4
 800feb2:	2b04      	cmp	r3, #4
 800feb4:	d149      	bne.n	800ff4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800feb6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800feba:	9300      	str	r3, [sp, #0]
 800febc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800febe:	2200      	movs	r2, #0
 800fec0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f000 f857 	bl	800ff78 <UART_WaitOnFlagUntilTimeout>
 800feca:	4603      	mov	r3, r0
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d03c      	beq.n	800ff4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fed8:	e853 3f00 	ldrex	r3, [r3]
 800fedc:	623b      	str	r3, [r7, #32]
   return(result);
 800fede:	6a3b      	ldr	r3, [r7, #32]
 800fee0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	461a      	mov	r2, r3
 800feec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800feee:	633b      	str	r3, [r7, #48]	@ 0x30
 800fef0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fef6:	e841 2300 	strex	r3, r2, [r1]
 800fefa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fefc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d1e6      	bne.n	800fed0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	3308      	adds	r3, #8
 800ff08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff0a:	693b      	ldr	r3, [r7, #16]
 800ff0c:	e853 3f00 	ldrex	r3, [r3]
 800ff10:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	f023 0301 	bic.w	r3, r3, #1
 800ff18:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	3308      	adds	r3, #8
 800ff20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ff22:	61fa      	str	r2, [r7, #28]
 800ff24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff26:	69b9      	ldr	r1, [r7, #24]
 800ff28:	69fa      	ldr	r2, [r7, #28]
 800ff2a:	e841 2300 	strex	r3, r2, [r1]
 800ff2e:	617b      	str	r3, [r7, #20]
   return(result);
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d1e5      	bne.n	800ff02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2220      	movs	r2, #32
 800ff3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2200      	movs	r2, #0
 800ff42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ff46:	2303      	movs	r3, #3
 800ff48:	e012      	b.n	800ff70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2220      	movs	r2, #32
 800ff4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2220      	movs	r2, #32
 800ff56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2200      	movs	r2, #0
 800ff64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ff6e:	2300      	movs	r3, #0
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3758      	adds	r7, #88	@ 0x58
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b084      	sub	sp, #16
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	60f8      	str	r0, [r7, #12]
 800ff80:	60b9      	str	r1, [r7, #8]
 800ff82:	603b      	str	r3, [r7, #0]
 800ff84:	4613      	mov	r3, r2
 800ff86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ff88:	e04f      	b.n	801002a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ff8a:	69bb      	ldr	r3, [r7, #24]
 800ff8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff90:	d04b      	beq.n	801002a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ff92:	f7f2 fc7f 	bl	8002894 <HAL_GetTick>
 800ff96:	4602      	mov	r2, r0
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	1ad3      	subs	r3, r2, r3
 800ff9c:	69ba      	ldr	r2, [r7, #24]
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d302      	bcc.n	800ffa8 <UART_WaitOnFlagUntilTimeout+0x30>
 800ffa2:	69bb      	ldr	r3, [r7, #24]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d101      	bne.n	800ffac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ffa8:	2303      	movs	r3, #3
 800ffaa:	e04e      	b.n	801004a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	f003 0304 	and.w	r3, r3, #4
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d037      	beq.n	801002a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	2b80      	cmp	r3, #128	@ 0x80
 800ffbe:	d034      	beq.n	801002a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	2b40      	cmp	r3, #64	@ 0x40
 800ffc4:	d031      	beq.n	801002a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	69db      	ldr	r3, [r3, #28]
 800ffcc:	f003 0308 	and.w	r3, r3, #8
 800ffd0:	2b08      	cmp	r3, #8
 800ffd2:	d110      	bne.n	800fff6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	2208      	movs	r2, #8
 800ffda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ffdc:	68f8      	ldr	r0, [r7, #12]
 800ffde:	f000 f838 	bl	8010052 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	2208      	movs	r2, #8
 800ffe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	2200      	movs	r2, #0
 800ffee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fff2:	2301      	movs	r3, #1
 800fff4:	e029      	b.n	801004a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	69db      	ldr	r3, [r3, #28]
 800fffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010004:	d111      	bne.n	801002a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801000e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010010:	68f8      	ldr	r0, [r7, #12]
 8010012:	f000 f81e 	bl	8010052 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	2220      	movs	r2, #32
 801001a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	2200      	movs	r2, #0
 8010022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010026:	2303      	movs	r3, #3
 8010028:	e00f      	b.n	801004a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	69da      	ldr	r2, [r3, #28]
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	4013      	ands	r3, r2
 8010034:	68ba      	ldr	r2, [r7, #8]
 8010036:	429a      	cmp	r2, r3
 8010038:	bf0c      	ite	eq
 801003a:	2301      	moveq	r3, #1
 801003c:	2300      	movne	r3, #0
 801003e:	b2db      	uxtb	r3, r3
 8010040:	461a      	mov	r2, r3
 8010042:	79fb      	ldrb	r3, [r7, #7]
 8010044:	429a      	cmp	r2, r3
 8010046:	d0a0      	beq.n	800ff8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010048:	2300      	movs	r3, #0
}
 801004a:	4618      	mov	r0, r3
 801004c:	3710      	adds	r7, #16
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}

08010052 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010052:	b480      	push	{r7}
 8010054:	b095      	sub	sp, #84	@ 0x54
 8010056:	af00      	add	r7, sp, #0
 8010058:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010062:	e853 3f00 	ldrex	r3, [r3]
 8010066:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801006a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801006e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	461a      	mov	r2, r3
 8010076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010078:	643b      	str	r3, [r7, #64]	@ 0x40
 801007a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801007c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801007e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010080:	e841 2300 	strex	r3, r2, [r1]
 8010084:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010088:	2b00      	cmp	r3, #0
 801008a:	d1e6      	bne.n	801005a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	3308      	adds	r3, #8
 8010092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010094:	6a3b      	ldr	r3, [r7, #32]
 8010096:	e853 3f00 	ldrex	r3, [r3]
 801009a:	61fb      	str	r3, [r7, #28]
   return(result);
 801009c:	69fb      	ldr	r3, [r7, #28]
 801009e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80100a2:	f023 0301 	bic.w	r3, r3, #1
 80100a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	3308      	adds	r3, #8
 80100ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80100b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80100b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80100b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80100b8:	e841 2300 	strex	r3, r2, [r1]
 80100bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80100be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d1e3      	bne.n	801008c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100c8:	2b01      	cmp	r3, #1
 80100ca:	d118      	bne.n	80100fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	e853 3f00 	ldrex	r3, [r3]
 80100d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	f023 0310 	bic.w	r3, r3, #16
 80100e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	461a      	mov	r2, r3
 80100e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80100ea:	61bb      	str	r3, [r7, #24]
 80100ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ee:	6979      	ldr	r1, [r7, #20]
 80100f0:	69ba      	ldr	r2, [r7, #24]
 80100f2:	e841 2300 	strex	r3, r2, [r1]
 80100f6:	613b      	str	r3, [r7, #16]
   return(result);
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d1e6      	bne.n	80100cc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2220      	movs	r2, #32
 8010102:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2200      	movs	r2, #0
 801010a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2200      	movs	r2, #0
 8010110:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010112:	bf00      	nop
 8010114:	3754      	adds	r7, #84	@ 0x54
 8010116:	46bd      	mov	sp, r7
 8010118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011c:	4770      	bx	lr

0801011e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801011e:	b580      	push	{r7, lr}
 8010120:	b084      	sub	sp, #16
 8010122:	af00      	add	r7, sp, #0
 8010124:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801012a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2200      	movs	r2, #0
 8010130:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2200      	movs	r2, #0
 8010138:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801013c:	68f8      	ldr	r0, [r7, #12]
 801013e:	f7ff fc0b 	bl	800f958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010142:	bf00      	nop
 8010144:	3710      	adds	r7, #16
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}

0801014a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801014a:	b580      	push	{r7, lr}
 801014c:	b088      	sub	sp, #32
 801014e:	af00      	add	r7, sp, #0
 8010150:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	e853 3f00 	ldrex	r3, [r3]
 801015e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010166:	61fb      	str	r3, [r7, #28]
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	461a      	mov	r2, r3
 801016e:	69fb      	ldr	r3, [r7, #28]
 8010170:	61bb      	str	r3, [r7, #24]
 8010172:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010174:	6979      	ldr	r1, [r7, #20]
 8010176:	69ba      	ldr	r2, [r7, #24]
 8010178:	e841 2300 	strex	r3, r2, [r1]
 801017c:	613b      	str	r3, [r7, #16]
   return(result);
 801017e:	693b      	ldr	r3, [r7, #16]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d1e6      	bne.n	8010152 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2220      	movs	r2, #32
 8010188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2200      	movs	r2, #0
 8010190:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f7ff fbd6 	bl	800f944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010198:	bf00      	nop
 801019a:	3720      	adds	r7, #32
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}

080101a0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80101a0:	b480      	push	{r7}
 80101a2:	b083      	sub	sp, #12
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80101a8:	bf00      	nop
 80101aa:	370c      	adds	r7, #12
 80101ac:	46bd      	mov	sp, r7
 80101ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b2:	4770      	bx	lr

080101b4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80101b4:	b480      	push	{r7}
 80101b6:	b083      	sub	sp, #12
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80101bc:	bf00      	nop
 80101be:	370c      	adds	r7, #12
 80101c0:	46bd      	mov	sp, r7
 80101c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c6:	4770      	bx	lr

080101c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80101c8:	b480      	push	{r7}
 80101ca:	b085      	sub	sp, #20
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80101d6:	2b01      	cmp	r3, #1
 80101d8:	d101      	bne.n	80101de <HAL_UARTEx_DisableFifoMode+0x16>
 80101da:	2302      	movs	r3, #2
 80101dc:	e027      	b.n	801022e <HAL_UARTEx_DisableFifoMode+0x66>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2201      	movs	r2, #1
 80101e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2224      	movs	r2, #36	@ 0x24
 80101ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	681a      	ldr	r2, [r3, #0]
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	f022 0201 	bic.w	r2, r2, #1
 8010204:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801020c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	2200      	movs	r2, #0
 8010212:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	68fa      	ldr	r2, [r7, #12]
 801021a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2220      	movs	r2, #32
 8010220:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2200      	movs	r2, #0
 8010228:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801022c:	2300      	movs	r3, #0
}
 801022e:	4618      	mov	r0, r3
 8010230:	3714      	adds	r7, #20
 8010232:	46bd      	mov	sp, r7
 8010234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010238:	4770      	bx	lr

0801023a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801023a:	b580      	push	{r7, lr}
 801023c:	b084      	sub	sp, #16
 801023e:	af00      	add	r7, sp, #0
 8010240:	6078      	str	r0, [r7, #4]
 8010242:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801024a:	2b01      	cmp	r3, #1
 801024c:	d101      	bne.n	8010252 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801024e:	2302      	movs	r3, #2
 8010250:	e02d      	b.n	80102ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	2201      	movs	r2, #1
 8010256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	2224      	movs	r2, #36	@ 0x24
 801025e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	681a      	ldr	r2, [r3, #0]
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	f022 0201 	bic.w	r2, r2, #1
 8010278:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	689b      	ldr	r3, [r3, #8]
 8010280:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	683a      	ldr	r2, [r7, #0]
 801028a:	430a      	orrs	r2, r1
 801028c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f000 f850 	bl	8010334 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	68fa      	ldr	r2, [r7, #12]
 801029a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2220      	movs	r2, #32
 80102a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2200      	movs	r2, #0
 80102a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80102ac:	2300      	movs	r3, #0
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3710      	adds	r7, #16
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}

080102b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80102b6:	b580      	push	{r7, lr}
 80102b8:	b084      	sub	sp, #16
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	6078      	str	r0, [r7, #4]
 80102be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80102c6:	2b01      	cmp	r3, #1
 80102c8:	d101      	bne.n	80102ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80102ca:	2302      	movs	r3, #2
 80102cc:	e02d      	b.n	801032a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2201      	movs	r2, #1
 80102d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2224      	movs	r2, #36	@ 0x24
 80102da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	681a      	ldr	r2, [r3, #0]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	f022 0201 	bic.w	r2, r2, #1
 80102f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	689b      	ldr	r3, [r3, #8]
 80102fc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	683a      	ldr	r2, [r7, #0]
 8010306:	430a      	orrs	r2, r1
 8010308:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f000 f812 	bl	8010334 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	68fa      	ldr	r2, [r7, #12]
 8010316:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2220      	movs	r2, #32
 801031c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2200      	movs	r2, #0
 8010324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010328:	2300      	movs	r3, #0
}
 801032a:	4618      	mov	r0, r3
 801032c:	3710      	adds	r7, #16
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
	...

08010334 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010334:	b480      	push	{r7}
 8010336:	b085      	sub	sp, #20
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010340:	2b00      	cmp	r3, #0
 8010342:	d108      	bne.n	8010356 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2201      	movs	r2, #1
 8010348:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2201      	movs	r2, #1
 8010350:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010354:	e031      	b.n	80103ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010356:	2308      	movs	r3, #8
 8010358:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801035a:	2308      	movs	r3, #8
 801035c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	689b      	ldr	r3, [r3, #8]
 8010364:	0e5b      	lsrs	r3, r3, #25
 8010366:	b2db      	uxtb	r3, r3
 8010368:	f003 0307 	and.w	r3, r3, #7
 801036c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	689b      	ldr	r3, [r3, #8]
 8010374:	0f5b      	lsrs	r3, r3, #29
 8010376:	b2db      	uxtb	r3, r3
 8010378:	f003 0307 	and.w	r3, r3, #7
 801037c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801037e:	7bbb      	ldrb	r3, [r7, #14]
 8010380:	7b3a      	ldrb	r2, [r7, #12]
 8010382:	4911      	ldr	r1, [pc, #68]	@ (80103c8 <UARTEx_SetNbDataToProcess+0x94>)
 8010384:	5c8a      	ldrb	r2, [r1, r2]
 8010386:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801038a:	7b3a      	ldrb	r2, [r7, #12]
 801038c:	490f      	ldr	r1, [pc, #60]	@ (80103cc <UARTEx_SetNbDataToProcess+0x98>)
 801038e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010390:	fb93 f3f2 	sdiv	r3, r3, r2
 8010394:	b29a      	uxth	r2, r3
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801039c:	7bfb      	ldrb	r3, [r7, #15]
 801039e:	7b7a      	ldrb	r2, [r7, #13]
 80103a0:	4909      	ldr	r1, [pc, #36]	@ (80103c8 <UARTEx_SetNbDataToProcess+0x94>)
 80103a2:	5c8a      	ldrb	r2, [r1, r2]
 80103a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80103a8:	7b7a      	ldrb	r2, [r7, #13]
 80103aa:	4908      	ldr	r1, [pc, #32]	@ (80103cc <UARTEx_SetNbDataToProcess+0x98>)
 80103ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80103ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80103b2:	b29a      	uxth	r2, r3
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80103ba:	bf00      	nop
 80103bc:	3714      	adds	r7, #20
 80103be:	46bd      	mov	sp, r7
 80103c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c4:	4770      	bx	lr
 80103c6:	bf00      	nop
 80103c8:	08010854 	.word	0x08010854
 80103cc:	0801085c 	.word	0x0801085c

080103d0 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b086      	sub	sp, #24
 80103d4:	af02      	add	r7, sp, #8
 80103d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80103d8:	2300      	movs	r3, #0
 80103da:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80103dc:	f7f2 fa5a 	bl	8002894 <HAL_GetTick>
 80103e0:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d102      	bne.n	80103ee <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80103e8:	2301      	movs	r3, #1
 80103ea:	73fb      	strb	r3, [r7, #15]
 80103ec:	e137      	b.n	801065e <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	4a76      	ldr	r2, [pc, #472]	@ (80105cc <HAL_XSPI_Init+0x1fc>)
 80103f4:	4293      	cmp	r3, r2
 80103f6:	d008      	beq.n	801040a <HAL_XSPI_Init+0x3a>
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	4a74      	ldr	r2, [pc, #464]	@ (80105d0 <HAL_XSPI_Init+0x200>)
 80103fe:	4293      	cmp	r3, r2
 8010400:	d003      	beq.n	801040a <HAL_XSPI_Init+0x3a>
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	4a73      	ldr	r2, [pc, #460]	@ (80105d4 <HAL_XSPI_Init+0x204>)
 8010408:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	4a72      	ldr	r2, [pc, #456]	@ (80105d8 <HAL_XSPI_Init+0x208>)
 8010410:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	4a6d      	ldr	r2, [pc, #436]	@ (80105cc <HAL_XSPI_Init+0x1fc>)
 8010418:	4293      	cmp	r3, r2
 801041a:	d008      	beq.n	801042e <HAL_XSPI_Init+0x5e>
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	4a6b      	ldr	r2, [pc, #428]	@ (80105d0 <HAL_XSPI_Init+0x200>)
 8010422:	4293      	cmp	r3, r2
 8010424:	d003      	beq.n	801042e <HAL_XSPI_Init+0x5e>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	4a6a      	ldr	r2, [pc, #424]	@ (80105d4 <HAL_XSPI_Init+0x204>)
 801042c:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	4a66      	ldr	r2, [pc, #408]	@ (80105cc <HAL_XSPI_Init+0x1fc>)
 8010434:	4293      	cmp	r3, r2
 8010436:	d008      	beq.n	801044a <HAL_XSPI_Init+0x7a>
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	4a64      	ldr	r2, [pc, #400]	@ (80105d0 <HAL_XSPI_Init+0x200>)
 801043e:	4293      	cmp	r3, r2
 8010440:	d003      	beq.n	801044a <HAL_XSPI_Init+0x7a>
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	4a63      	ldr	r2, [pc, #396]	@ (80105d4 <HAL_XSPI_Init+0x204>)
 8010448:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2200      	movs	r2, #0
 801044e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010454:	2b00      	cmp	r3, #0
 8010456:	f040 8102 	bne.w	801065e <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f7f1 fb0e 	bl	8001a7c <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8010460:	f241 3188 	movw	r1, #5000	@ 0x1388
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f000 f8ff 	bl	8010668 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	689a      	ldr	r2, [r3, #8]
 8010470:	4b5a      	ldr	r3, [pc, #360]	@ (80105dc <HAL_XSPI_Init+0x20c>)
 8010472:	4013      	ands	r3, r2
 8010474:	687a      	ldr	r2, [r7, #4]
 8010476:	68d1      	ldr	r1, [r2, #12]
 8010478:	687a      	ldr	r2, [r7, #4]
 801047a:	6912      	ldr	r2, [r2, #16]
 801047c:	0412      	lsls	r2, r2, #16
 801047e:	4311      	orrs	r1, r2
 8010480:	687a      	ldr	r2, [r7, #4]
 8010482:	6952      	ldr	r2, [r2, #20]
 8010484:	3a01      	subs	r2, #1
 8010486:	0212      	lsls	r2, r2, #8
 8010488:	4311      	orrs	r1, r2
 801048a:	687a      	ldr	r2, [r7, #4]
 801048c:	69d2      	ldr	r2, [r2, #28]
 801048e:	4311      	orrs	r1, r2
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	6812      	ldr	r2, [r2, #0]
 8010494:	430b      	orrs	r3, r1
 8010496:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	4a4b      	ldr	r2, [pc, #300]	@ (80105cc <HAL_XSPI_Init+0x1fc>)
 801049e:	4293      	cmp	r3, r2
 80104a0:	d00e      	beq.n	80104c0 <HAL_XSPI_Init+0xf0>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	4a4a      	ldr	r2, [pc, #296]	@ (80105d0 <HAL_XSPI_Init+0x200>)
 80104a8:	4293      	cmp	r3, r2
 80104aa:	d009      	beq.n	80104c0 <HAL_XSPI_Init+0xf0>
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	4a48      	ldr	r2, [pc, #288]	@ (80105d4 <HAL_XSPI_Init+0x204>)
 80104b2:	4293      	cmp	r3, r2
 80104b4:	d004      	beq.n	80104c0 <HAL_XSPI_Init+0xf0>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	4a49      	ldr	r2, [pc, #292]	@ (80105e0 <HAL_XSPI_Init+0x210>)
 80104bc:	4293      	cmp	r3, r2
 80104be:	d10a      	bne.n	80104d6 <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	689b      	ldr	r3, [r3, #8]
 80104c6:	f023 0108 	bic.w	r1, r3, #8
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	430a      	orrs	r2, r1
 80104d4:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	68db      	ldr	r3, [r3, #12]
 80104dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6a1a      	ldr	r2, [r3, #32]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	430a      	orrs	r2, r1
 80104ea:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	691b      	ldr	r3, [r3, #16]
 80104f2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104fa:	041a      	lsls	r2, r3, #16
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	430a      	orrs	r2, r1
 8010502:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	4a30      	ldr	r2, [pc, #192]	@ (80105cc <HAL_XSPI_Init+0x1fc>)
 801050a:	4293      	cmp	r3, r2
 801050c:	d00e      	beq.n	801052c <HAL_XSPI_Init+0x15c>
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	4a2f      	ldr	r2, [pc, #188]	@ (80105d0 <HAL_XSPI_Init+0x200>)
 8010514:	4293      	cmp	r3, r2
 8010516:	d009      	beq.n	801052c <HAL_XSPI_Init+0x15c>
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	4a2d      	ldr	r2, [pc, #180]	@ (80105d4 <HAL_XSPI_Init+0x204>)
 801051e:	4293      	cmp	r3, r2
 8010520:	d004      	beq.n	801052c <HAL_XSPI_Init+0x15c>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	4a2e      	ldr	r2, [pc, #184]	@ (80105e0 <HAL_XSPI_Init+0x210>)
 8010528:	4293      	cmp	r3, r2
 801052a:	d10a      	bne.n	8010542 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	691b      	ldr	r3, [r3, #16]
 8010532:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	430a      	orrs	r2, r1
 8010540:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	687a      	ldr	r2, [r7, #4]
 8010548:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801054a:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	685b      	ldr	r3, [r3, #4]
 801055a:	3b01      	subs	r3, #1
 801055c:	021a      	lsls	r2, r3, #8
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	430a      	orrs	r2, r1
 8010564:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801056a:	9300      	str	r3, [sp, #0]
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	2200      	movs	r2, #0
 8010570:	2120      	movs	r1, #32
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f000 f887 	bl	8010686 <XSPI_WaitFlagStateUntilTimeout>
 8010578:	4603      	mov	r3, r0
 801057a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 801057c:	7bfb      	ldrb	r3, [r7, #15]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d16d      	bne.n	801065e <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	68db      	ldr	r3, [r3, #12]
 8010588:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	430a      	orrs	r2, r1
 8010596:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	4a0e      	ldr	r2, [pc, #56]	@ (80105d8 <HAL_XSPI_Init+0x208>)
 801059e:	4293      	cmp	r3, r2
 80105a0:	d004      	beq.n	80105ac <HAL_XSPI_Init+0x1dc>
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	4a0f      	ldr	r2, [pc, #60]	@ (80105e4 <HAL_XSPI_Init+0x214>)
 80105a8:	4293      	cmp	r3, r2
 80105aa:	d11d      	bne.n	80105e8 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80105b0:	9300      	str	r3, [sp, #0]
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	2200      	movs	r2, #0
 80105b6:	2120      	movs	r1, #32
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f000 f864 	bl	8010686 <XSPI_WaitFlagStateUntilTimeout>
 80105be:	4603      	mov	r3, r0
 80105c0:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 80105c2:	7bfb      	ldrb	r3, [r7, #15]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d00f      	beq.n	80105e8 <HAL_XSPI_Init+0x218>
          {
            return status;
 80105c8:	7bfb      	ldrb	r3, [r7, #15]
 80105ca:	e049      	b.n	8010660 <HAL_XSPI_Init+0x290>
 80105cc:	420d1400 	.word	0x420d1400
 80105d0:	520d1400 	.word	0x520d1400
 80105d4:	420d2400 	.word	0x420d2400
 80105d8:	420d3400 	.word	0x420d3400
 80105dc:	f8e0c0fc 	.word	0xf8e0c0fc
 80105e0:	520d2400 	.word	0x520d2400
 80105e4:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	689a      	ldr	r2, [r3, #8]
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	430a      	orrs	r2, r1
 80105fc:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010606:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010612:	431a      	orrs	r2, r3
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	430a      	orrs	r2, r1
 801061a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	681a      	ldr	r2, [r3, #0]
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	f042 0201 	orr.w	r2, r2, #1
 801062c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	699b      	ldr	r3, [r3, #24]
 8010632:	2b02      	cmp	r3, #2
 8010634:	d107      	bne.n	8010646 <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	689a      	ldr	r2, [r3, #8]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	f042 0202 	orr.w	r2, r2, #2
 8010644:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	68db      	ldr	r3, [r3, #12]
 801064a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801064e:	d103      	bne.n	8010658 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2201      	movs	r2, #1
 8010654:	655a      	str	r2, [r3, #84]	@ 0x54
 8010656:	e002      	b.n	801065e <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2202      	movs	r2, #2
 801065c:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 801065e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010660:	4618      	mov	r0, r3
 8010662:	3710      	adds	r7, #16
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}

08010668 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8010668:	b480      	push	{r7}
 801066a:	b083      	sub	sp, #12
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
 8010670:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	683a      	ldr	r2, [r7, #0]
 8010676:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 8010678:	2300      	movs	r3, #0
}
 801067a:	4618      	mov	r0, r3
 801067c:	370c      	adds	r7, #12
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr

08010686 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8010686:	b580      	push	{r7, lr}
 8010688:	b084      	sub	sp, #16
 801068a:	af00      	add	r7, sp, #0
 801068c:	60f8      	str	r0, [r7, #12]
 801068e:	60b9      	str	r1, [r7, #8]
 8010690:	603b      	str	r3, [r7, #0]
 8010692:	4613      	mov	r3, r2
 8010694:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8010696:	e01a      	b.n	80106ce <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010698:	69bb      	ldr	r3, [r7, #24]
 801069a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801069e:	d016      	beq.n	80106ce <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80106a0:	f7f2 f8f8 	bl	8002894 <HAL_GetTick>
 80106a4:	4602      	mov	r2, r0
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	1ad3      	subs	r3, r2, r3
 80106aa:	69ba      	ldr	r2, [r7, #24]
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d302      	bcc.n	80106b6 <XSPI_WaitFlagStateUntilTimeout+0x30>
 80106b0:	69bb      	ldr	r3, [r7, #24]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d10b      	bne.n	80106ce <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80106bc:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80106c2:	f043 0201 	orr.w	r2, r3, #1
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 80106ca:	2303      	movs	r3, #3
 80106cc:	e00e      	b.n	80106ec <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	6a1a      	ldr	r2, [r3, #32]
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	4013      	ands	r3, r2
 80106d8:	2b00      	cmp	r3, #0
 80106da:	bf14      	ite	ne
 80106dc:	2301      	movne	r3, #1
 80106de:	2300      	moveq	r3, #0
 80106e0:	b2db      	uxtb	r3, r3
 80106e2:	461a      	mov	r2, r3
 80106e4:	79fb      	ldrb	r3, [r7, #7]
 80106e6:	429a      	cmp	r2, r3
 80106e8:	d1d6      	bne.n	8010698 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80106ea:	2300      	movs	r3, #0
}
 80106ec:	4618      	mov	r0, r3
 80106ee:	3710      	adds	r7, #16
 80106f0:	46bd      	mov	sp, r7
 80106f2:	bd80      	pop	{r7, pc}

080106f4 <memset>:
 80106f4:	4402      	add	r2, r0
 80106f6:	4603      	mov	r3, r0
 80106f8:	4293      	cmp	r3, r2
 80106fa:	d100      	bne.n	80106fe <memset+0xa>
 80106fc:	4770      	bx	lr
 80106fe:	f803 1b01 	strb.w	r1, [r3], #1
 8010702:	e7f9      	b.n	80106f8 <memset+0x4>

08010704 <__libc_init_array>:
 8010704:	b570      	push	{r4, r5, r6, lr}
 8010706:	4d0d      	ldr	r5, [pc, #52]	@ (801073c <__libc_init_array+0x38>)
 8010708:	2600      	movs	r6, #0
 801070a:	4c0d      	ldr	r4, [pc, #52]	@ (8010740 <__libc_init_array+0x3c>)
 801070c:	1b64      	subs	r4, r4, r5
 801070e:	10a4      	asrs	r4, r4, #2
 8010710:	42a6      	cmp	r6, r4
 8010712:	d109      	bne.n	8010728 <__libc_init_array+0x24>
 8010714:	4d0b      	ldr	r5, [pc, #44]	@ (8010744 <__libc_init_array+0x40>)
 8010716:	2600      	movs	r6, #0
 8010718:	4c0b      	ldr	r4, [pc, #44]	@ (8010748 <__libc_init_array+0x44>)
 801071a:	f000 f817 	bl	801074c <_init>
 801071e:	1b64      	subs	r4, r4, r5
 8010720:	10a4      	asrs	r4, r4, #2
 8010722:	42a6      	cmp	r6, r4
 8010724:	d105      	bne.n	8010732 <__libc_init_array+0x2e>
 8010726:	bd70      	pop	{r4, r5, r6, pc}
 8010728:	f855 3b04 	ldr.w	r3, [r5], #4
 801072c:	3601      	adds	r6, #1
 801072e:	4798      	blx	r3
 8010730:	e7ee      	b.n	8010710 <__libc_init_array+0xc>
 8010732:	f855 3b04 	ldr.w	r3, [r5], #4
 8010736:	3601      	adds	r6, #1
 8010738:	4798      	blx	r3
 801073a:	e7f2      	b.n	8010722 <__libc_init_array+0x1e>
 801073c:	0801086c 	.word	0x0801086c
 8010740:	0801086c 	.word	0x0801086c
 8010744:	0801086c 	.word	0x0801086c
 8010748:	08010870 	.word	0x08010870

0801074c <_init>:
 801074c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801074e:	bf00      	nop
 8010750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010752:	bc08      	pop	{r3}
 8010754:	469e      	mov	lr, r3
 8010756:	4770      	bx	lr

08010758 <_fini>:
 8010758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801075a:	bf00      	nop
 801075c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801075e:	bc08      	pop	{r3}
 8010760:	469e      	mov	lr, r3
 8010762:	4770      	bx	lr
