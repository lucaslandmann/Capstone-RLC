
Prototype V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116b4  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08011928  08011928  00012928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a28  08011a28  0001303c  2**0
                  CONTENTS
  4 .ARM          00000008  08011a28  08011a28  00012a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a30  08011a30  0001303c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a30  08011a30  00012a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011a34  08011a34  00012a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08011a38  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ec0  2000003c  08011a74  0001303c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20000efc  08011a74  00013efc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001303c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031bcd  00000000  00000000  00013072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cf7  00000000  00000000  00044c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002aa0  00000000  00000000  00049938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002171  00000000  00000000  0004c3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004731a  00000000  00000000  0004e549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035b96  00000000  00000000  00095863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001bc993  00000000  00000000  000cb3f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00287d8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd64  00000000  00000000  00287dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00293b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000003c 	.word	0x2000003c
 8000290:	00000000 	.word	0x00000000
 8000294:	08011910 	.word	0x08011910

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000040 	.word	0x20000040
 80002b0:	08011910 	.word	0x08011910

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f002 faad 	bl	8002b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f903 	bl	80007e0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005da:	f000 f96d 	bl	80008b8 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005de:	f000 f9a2 	bl	8000926 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 ff11 	bl	8001408 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005e6:	f000 fb9f 	bl	8000d28 <MX_GPDMA1_Init>
  MX_DMA2D_Init();
 80005ea:	f000 fb5f 	bl	8000cac <MX_DMA2D_Init>
  MX_HSPI1_Init();
 80005ee:	f000 fbd3 	bl	8000d98 <MX_HSPI1_Init>
  MX_I2C2_Init();
 80005f2:	f000 fc4f 	bl	8000e94 <MX_I2C2_Init>
  MX_ICACHE_Init();
 80005f6:	f000 fc8d 	bl	8000f14 <MX_ICACHE_Init>
  MX_LTDC_Init();
 80005fa:	f000 fc9f 	bl	8000f3c <MX_LTDC_Init>
  MX_RTC_Init();
 80005fe:	f000 fd1d 	bl	800103c <MX_RTC_Init>
  MX_TIM3_Init();
 8000602:	f000 fdd5 	bl	80011b0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000606:	f000 f99d 	bl	8000944 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800060a:	f000 fe83 	bl	8001314 <MX_USART1_UART_Init>
  MX_SAI2_Init();
 800060e:	f000 fd63 	bl	80010d8 <MX_SAI2_Init>
  MX_ADC4_Init();
 8000612:	f000 fad1 	bl	8000bb8 <MX_ADC4_Init>
  MX_I2C1_Init();
 8000616:	f000 fbfd 	bl	8000e14 <MX_I2C1_Init>
  MX_USB_OTG_HS_PCD_Init();
 800061a:	f000 fec7 	bl	80013ac <MX_USB_OTG_HS_PCD_Init>
  MX_TIM15_Init();
 800061e:	f000 fe29 	bl	8001274 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adcGroup1, DIM(adcGroup1)); //Begins DMA transfer for first ADC
 8000622:	220d      	movs	r2, #13
 8000624:	4963      	ldr	r1, [pc, #396]	@ (80007b4 <main+0x1e8>)
 8000626:	4864      	ldr	r0, [pc, #400]	@ (80007b8 <main+0x1ec>)
 8000628:	f003 f9ce 	bl	80039c8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc4, (uint16_t*)adcGroup4, DIM(adcGroup4)); //begins DMA transfer for fourth ADC
 800062c:	2202      	movs	r2, #2
 800062e:	4963      	ldr	r1, [pc, #396]	@ (80007bc <main+0x1f0>)
 8000630:	4863      	ldr	r0, [pc, #396]	@ (80007c0 <main+0x1f4>)
 8000632:	f003 f9c9 	bl	80039c8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim15);
 8000636:	4863      	ldr	r0, [pc, #396]	@ (80007c4 <main+0x1f8>)
 8000638:	f00e faf4 	bl	800ec24 <HAL_TIM_Base_Start>

  HAL_Delay(2000);
 800063c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000640:	f002 fb3c 	bl	8002cbc <HAL_Delay>
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_SET); //Powers SHDNZ High to enable PCM6260
 8000644:	2201      	movs	r2, #1
 8000646:	2104      	movs	r1, #4
 8000648:	485f      	ldr	r0, [pc, #380]	@ (80007c8 <main+0x1fc>)
 800064a:	f007 f925 	bl	8007898 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 800064e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000652:	f002 fb33 	bl	8002cbc <HAL_Delay>

  //Transmits each instruction sequentially from pcm6260Config array
  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	e010      	b.n	800067e <main+0xb2>
  {
	  HAL_I2C_Master_Transmit(&hi2c1, devAddress, pcm6260Config[i], DIM(pcm6260Config[i]), 100);
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	4a5a      	ldr	r2, [pc, #360]	@ (80007cc <main+0x200>)
 8000662:	441a      	add	r2, r3
 8000664:	2364      	movs	r3, #100	@ 0x64
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2302      	movs	r3, #2
 800066a:	2190      	movs	r1, #144	@ 0x90
 800066c:	4858      	ldr	r0, [pc, #352]	@ (80007d0 <main+0x204>)
 800066e:	f007 fa03 	bl	8007a78 <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 8000672:	2064      	movs	r0, #100	@ 0x64
 8000674:	f002 fb22 	bl	8002cbc <HAL_Delay>
  for(int i = 0; i < sizeof(pcm6260Config); i++)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b2f      	cmp	r3, #47	@ 0x2f
 8000682:	d9eb      	bls.n	800065c <main+0x90>
  }

  HAL_Delay(2000);
 8000684:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000688:	f002 fb18 	bl	8002cbc <HAL_Delay>
  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pcmData, DIM(pcmData)); //Begins DMA transfer for PCM6260
 800068c:	2208      	movs	r2, #8
 800068e:	4951      	ldr	r1, [pc, #324]	@ (80007d4 <main+0x208>)
 8000690:	4851      	ldr	r0, [pc, #324]	@ (80007d8 <main+0x20c>)
 8000692:	f00d ff79 	bl	800e588 <HAL_SAI_Receive_DMA>
  //HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)dacData, DIM(dacData));

  //Populates each channel in the channels struct with initializer values
  for(int i = 0; i < sizeof(channels); i++)
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	e083      	b.n	80007a4 <main+0x1d8>
  {
	  for(int s = 0; s < sizeof(channels[i].channelData); s++)
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	e00d      	b.n	80006be <main+0xf2>
	  {
		  channels[i].channelData[s] = 0;
 80006a2:	494e      	ldr	r1, [pc, #312]	@ (80007dc <main+0x210>)
 80006a4:	68ba      	ldr	r2, [r7, #8]
 80006a6:	4613      	mov	r3, r2
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	4413      	add	r3, r2
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	2200      	movs	r2, #0
 80006b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int s = 0; s < sizeof(channels[i].channelData); s++)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3301      	adds	r3, #1
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d9ee      	bls.n	80006a2 <main+0xd6>
	  }
	  channels[i].channelNum = i;
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	b2d8      	uxtb	r0, r3
 80006c8:	4944      	ldr	r1, [pc, #272]	@ (80007dc <main+0x210>)
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	440b      	add	r3, r1
 80006d6:	3304      	adds	r3, #4
 80006d8:	4602      	mov	r2, r0
 80006da:	701a      	strb	r2, [r3, #0]
	  channels[i].volume = 0.0;
 80006dc:	493f      	ldr	r1, [pc, #252]	@ (80007dc <main+0x210>)
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	4613      	mov	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4413      	add	r3, r2
 80006e6:	011b      	lsls	r3, r3, #4
 80006e8:	440b      	add	r3, r1
 80006ea:	3308      	adds	r3, #8
 80006ec:	f04f 0200 	mov.w	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
	  channels[i].LRPan = 0.0;
 80006f2:	493a      	ldr	r1, [pc, #232]	@ (80007dc <main+0x210>)
 80006f4:	68ba      	ldr	r2, [r7, #8]
 80006f6:	4613      	mov	r3, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	4413      	add	r3, r2
 80006fc:	011b      	lsls	r3, r3, #4
 80006fe:	440b      	add	r3, r1
 8000700:	330c      	adds	r3, #12
 8000702:	f04f 0200 	mov.w	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
	  channels[i].reverbEnable = false;
 8000708:	4934      	ldr	r1, [pc, #208]	@ (80007dc <main+0x210>)
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	4613      	mov	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4413      	add	r3, r2
 8000712:	011b      	lsls	r3, r3, #4
 8000714:	440b      	add	r3, r1
 8000716:	3310      	adds	r3, #16
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
	  channels[i].EQEnable = false;
 800071c:	492f      	ldr	r1, [pc, #188]	@ (80007dc <main+0x210>)
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	4613      	mov	r3, r2
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	4413      	add	r3, r2
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	440b      	add	r3, r1
 800072a:	3311      	adds	r3, #17
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
	  channels[i].distortionEnable = false;
 8000730:	492a      	ldr	r1, [pc, #168]	@ (80007dc <main+0x210>)
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	4613      	mov	r3, r2
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	4413      	add	r3, r2
 800073a:	011b      	lsls	r3, r3, #4
 800073c:	440b      	add	r3, r1
 800073e:	3312      	adds	r3, #18
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
	  channels[i].reverbStrength = 0.0;
 8000744:	4925      	ldr	r1, [pc, #148]	@ (80007dc <main+0x210>)
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	4613      	mov	r3, r2
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	4413      	add	r3, r2
 800074e:	011b      	lsls	r3, r3, #4
 8000750:	440b      	add	r3, r1
 8000752:	3314      	adds	r3, #20
 8000754:	f04f 0200 	mov.w	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
	  for(int r = 0; r < sizeof(channels[i].eqLevels);r++)
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	e010      	b.n	8000782 <main+0x1b6>
	  {
		  channels[i].eqLevels[r] = 0.0;
 8000760:	491e      	ldr	r1, [pc, #120]	@ (80007dc <main+0x210>)
 8000762:	68ba      	ldr	r2, [r7, #8]
 8000764:	4613      	mov	r3, r2
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	4413      	add	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	683a      	ldr	r2, [r7, #0]
 800076e:	4413      	add	r3, r2
 8000770:	3306      	adds	r3, #6
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	440b      	add	r3, r1
 8000776:	f04f 0200 	mov.w	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
	  for(int r = 0; r < sizeof(channels[i].eqLevels);r++)
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	3301      	adds	r3, #1
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	2b13      	cmp	r3, #19
 8000786:	d9eb      	bls.n	8000760 <main+0x194>
	  }
	  channels[i].distortionStrength = 0.0;
 8000788:	4914      	ldr	r1, [pc, #80]	@ (80007dc <main+0x210>)
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	4613      	mov	r3, r2
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	4413      	add	r3, r2
 8000792:	011b      	lsls	r3, r3, #4
 8000794:	440b      	add	r3, r1
 8000796:	332c      	adds	r3, #44	@ 0x2c
 8000798:	f04f 0200 	mov.w	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < sizeof(channels); i++)
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	3301      	adds	r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 80007aa:	f4ff af77 	bcc.w	800069c <main+0xd0>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ae:	bf00      	nop
 80007b0:	e7fd      	b.n	80007ae <main+0x1e2>
 80007b2:	bf00      	nop
 80007b4:	20000d8c 	.word	0x20000d8c
 80007b8:	20000058 	.word	0x20000058
 80007bc:	20000da8 	.word	0x20000da8
 80007c0:	200000e4 	.word	0x200000e4
 80007c4:	200007c8 	.word	0x200007c8
 80007c8:	42021000 	.word	0x42021000
 80007cc:	20000000 	.word	0x20000000
 80007d0:	20000364 	.word	0x20000364
 80007d4:	20000dac 	.word	0x20000dac
 80007d8:	2000057c 	.word	0x2000057c
 80007dc:	20000dd4 	.word	0x20000dd4

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b09e      	sub	sp, #120	@ 0x78
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0318 	add.w	r3, r7, #24
 80007ea:	2260      	movs	r2, #96	@ 0x60
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f011 f861 	bl	80118b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	463b      	mov	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
 8000802:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000804:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000808:	f008 ff7a 	bl	8009700 <HAL_PWREx_ControlVoltageScaling>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000812:	f000 ffcf 	bl	80017b4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000816:	f008 ff63 	bl	80096e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800081a:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <SystemClock_Config+0xd4>)
 800081c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000820:	4a24      	ldr	r2, [pc, #144]	@ (80008b4 <SystemClock_Config+0xd4>)
 8000822:	f023 0318 	bic.w	r3, r3, #24
 8000826:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800082a:	2307      	movs	r3, #7
 800082c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800082e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000832:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000834:	2381      	movs	r3, #129	@ 0x81
 8000836:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000838:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083e:	2310      	movs	r3, #16
 8000840:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000842:	2302      	movs	r3, #2
 8000844:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000846:	2303      	movs	r3, #3
 8000848:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800084e:	2301      	movs	r3, #1
 8000850:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000852:	2308      	movs	r3, #8
 8000854:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000856:	2308      	movs	r3, #8
 8000858:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800085a:	2302      	movs	r3, #2
 800085c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800085e:	2301      	movs	r3, #1
 8000860:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000862:	230c      	movs	r3, #12
 8000864:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086a:	f107 0318 	add.w	r3, r7, #24
 800086e:	4618      	mov	r0, r3
 8000870:	f009 f870 	bl	8009954 <HAL_RCC_OscConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800087a:	f000 ff9b 	bl	80017b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	231f      	movs	r3, #31
 8000880:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000882:	2303      	movs	r3, #3
 8000884:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000896:	463b      	mov	r3, r7
 8000898:	2103      	movs	r1, #3
 800089a:	4618      	mov	r0, r3
 800089c:	f009 ff36 	bl	800a70c <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008a6:	f000 ff85 	bl	80017b4 <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3778      	adds	r7, #120	@ 0x78
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	46020c00 	.word	0x46020c00

080008b8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b0b8      	sub	sp, #224	@ 0xe0
 80008bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008be:	463b      	mov	r3, r7
 80008c0:	22e0      	movs	r2, #224	@ 0xe0
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f010 fff6 	bl	80118b6 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI|RCC_PERIPHCLK_SAI2;
 80008ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008ce:	f04f 0301 	mov.w	r3, #1
 80008d2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 80008d6:	2300      	movs	r3, #0
 80008d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_PLL2;
 80008dc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80008e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 80008e4:	2303      	movs	r3, #3
 80008e6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 1;
 80008e8:	2301      	movs	r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 12;
 80008ec:	230c      	movs	r3, #12
 80008ee:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 3;
 80008f4:	2303      	movs	r3, #3
 80008f6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 4;
 80008f8:	2304      	movs	r3, #4
 80008fa:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 80008fc:	230c      	movs	r3, #12
 80008fe:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 4096;
 8000900:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP|RCC_PLL2_DIVQ;
 8000906:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800090a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090c:	463b      	mov	r3, r7
 800090e:	4618      	mov	r0, r3
 8000910:	f00a facc 	bl	800aeac <HAL_RCCEx_PeriphCLKConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 800091a:	f000 ff4b 	bl	80017b4 <Error_Handler>
  }
}
 800091e:	bf00      	nop
 8000920:	37e0      	adds	r7, #224	@ 0xe0
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800092a:	f008 ffd5 	bl	80098d8 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800092e:	2002      	movs	r0, #2
 8000930:	f008 ff72 	bl	8009818 <HAL_PWREx_ConfigSupply>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemPower_Config+0x18>
  {
    Error_Handler();
 800093a:	f000 ff3b 	bl	80017b4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800094a:	463b      	mov	r3, r7
 800094c:	2220      	movs	r2, #32
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f010 ffb0 	bl	80118b6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000956:	4b89      	ldr	r3, [pc, #548]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000958:	4a89      	ldr	r2, [pc, #548]	@ (8000b80 <MX_ADC1_Init+0x23c>)
 800095a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800095c:	4b87      	ldr	r3, [pc, #540]	@ (8000b7c <MX_ADC1_Init+0x238>)
 800095e:	2200      	movs	r2, #0
 8000960:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000962:	4b86      	ldr	r3, [pc, #536]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000968:	4b84      	ldr	r3, [pc, #528]	@ (8000b7c <MX_ADC1_Init+0x238>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800096e:	4b83      	ldr	r3, [pc, #524]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000974:	4b81      	ldr	r3, [pc, #516]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000976:	2201      	movs	r2, #1
 8000978:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800097a:	4b80      	ldr	r3, [pc, #512]	@ (8000b7c <MX_ADC1_Init+0x238>)
 800097c:	2204      	movs	r2, #4
 800097e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8000980:	4b7e      	ldr	r3, [pc, #504]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000982:	2201      	movs	r2, #1
 8000984:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000986:	4b7d      	ldr	r3, [pc, #500]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000988:	2201      	movs	r2, #1
 800098a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 13;
 800098e:	4b7b      	ldr	r3, [pc, #492]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000990:	220d      	movs	r2, #13
 8000992:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000994:	4b79      	ldr	r3, [pc, #484]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000996:	2200      	movs	r2, #0
 8000998:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 800099c:	4b77      	ldr	r3, [pc, #476]	@ (8000b7c <MX_ADC1_Init+0x238>)
 800099e:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 80009a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009a4:	4b75      	ldr	r3, [pc, #468]	@ (8000b7c <MX_ADC1_Init+0x238>)
 80009a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009ac:	4b73      	ldr	r3, [pc, #460]	@ (8000b7c <MX_ADC1_Init+0x238>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80009b4:	4b71      	ldr	r3, [pc, #452]	@ (8000b7c <MX_ADC1_Init+0x238>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009ba:	4b70      	ldr	r3, [pc, #448]	@ (8000b7c <MX_ADC1_Init+0x238>)
 80009bc:	2200      	movs	r2, #0
 80009be:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009c0:	4b6e      	ldr	r3, [pc, #440]	@ (8000b7c <MX_ADC1_Init+0x238>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80009c6:	4b6d      	ldr	r3, [pc, #436]	@ (8000b7c <MX_ADC1_Init+0x238>)
 80009c8:	2203      	movs	r2, #3
 80009ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80009cc:	4b6b      	ldr	r3, [pc, #428]	@ (8000b7c <MX_ADC1_Init+0x238>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009d4:	4869      	ldr	r0, [pc, #420]	@ (8000b7c <MX_ADC1_Init+0x238>)
 80009d6:	f002 fd0f 	bl	80033f8 <HAL_ADC_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80009e0:	f000 fee8 	bl	80017b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009e4:	4b67      	ldr	r3, [pc, #412]	@ (8000b84 <MX_ADC1_Init+0x240>)
 80009e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e8:	2306      	movs	r3, #6
 80009ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009f6:	2304      	movs	r3, #4
 80009f8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fe:	463b      	mov	r3, r7
 8000a00:	4619      	mov	r1, r3
 8000a02:	485e      	ldr	r0, [pc, #376]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000a04:	f003 fc26 	bl	8004254 <HAL_ADC_ConfigChannel>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000a0e:	f000 fed1 	bl	80017b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a12:	4b5d      	ldr	r3, [pc, #372]	@ (8000b88 <MX_ADC1_Init+0x244>)
 8000a14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a16:	230c      	movs	r3, #12
 8000a18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4857      	ldr	r0, [pc, #348]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000a20:	f003 fc18 	bl	8004254 <HAL_ADC_ConfigChannel>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000a2a:	f000 fec3 	bl	80017b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a2e:	4b57      	ldr	r3, [pc, #348]	@ (8000b8c <MX_ADC1_Init+0x248>)
 8000a30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a32:	2312      	movs	r3, #18
 8000a34:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a36:	463b      	mov	r3, r7
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4850      	ldr	r0, [pc, #320]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000a3c:	f003 fc0a 	bl	8004254 <HAL_ADC_ConfigChannel>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8000a46:	f000 feb5 	bl	80017b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a4a:	4b51      	ldr	r3, [pc, #324]	@ (8000b90 <MX_ADC1_Init+0x24c>)
 8000a4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a4e:	2318      	movs	r3, #24
 8000a50:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a52:	463b      	mov	r3, r7
 8000a54:	4619      	mov	r1, r3
 8000a56:	4849      	ldr	r0, [pc, #292]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000a58:	f003 fbfc 	bl	8004254 <HAL_ADC_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8000a62:	f000 fea7 	bl	80017b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a66:	4b4b      	ldr	r3, [pc, #300]	@ (8000b94 <MX_ADC1_Init+0x250>)
 8000a68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a70:	463b      	mov	r3, r7
 8000a72:	4619      	mov	r1, r3
 8000a74:	4841      	ldr	r0, [pc, #260]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000a76:	f003 fbed 	bl	8004254 <HAL_ADC_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 8000a80:	f000 fe98 	bl	80017b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a84:	4b44      	ldr	r3, [pc, #272]	@ (8000b98 <MX_ADC1_Init+0x254>)
 8000a86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a88:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000a8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8e:	463b      	mov	r3, r7
 8000a90:	4619      	mov	r1, r3
 8000a92:	483a      	ldr	r0, [pc, #232]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000a94:	f003 fbde 	bl	8004254 <HAL_ADC_ConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8000a9e:	f000 fe89 	bl	80017b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8000b9c <MX_ADC1_Init+0x258>)
 8000aa4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000aa6:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000aaa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aac:	463b      	mov	r3, r7
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4832      	ldr	r0, [pc, #200]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000ab2:	f003 fbcf 	bl	8004254 <HAL_ADC_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8000abc:	f000 fe7a 	bl	80017b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ac0:	4b37      	ldr	r3, [pc, #220]	@ (8000ba0 <MX_ADC1_Init+0x25c>)
 8000ac2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000ac4:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000ac8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aca:	463b      	mov	r3, r7
 8000acc:	4619      	mov	r1, r3
 8000ace:	482b      	ldr	r0, [pc, #172]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000ad0:	f003 fbc0 	bl	8004254 <HAL_ADC_ConfigChannel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
 8000ada:	f000 fe6b 	bl	80017b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ade:	4b31      	ldr	r3, [pc, #196]	@ (8000ba4 <MX_ADC1_Init+0x260>)
 8000ae0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000ae2:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000ae6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae8:	463b      	mov	r3, r7
 8000aea:	4619      	mov	r1, r3
 8000aec:	4823      	ldr	r0, [pc, #140]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000aee:	f003 fbb1 	bl	8004254 <HAL_ADC_ConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
 8000af8:	f000 fe5c 	bl	80017b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000afc:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba8 <MX_ADC1_Init+0x264>)
 8000afe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000b00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b04:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b06:	463b      	mov	r3, r7
 8000b08:	4619      	mov	r1, r3
 8000b0a:	481c      	ldr	r0, [pc, #112]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000b0c:	f003 fba2 	bl	8004254 <HAL_ADC_ConfigChannel>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 8000b16:	f000 fe4d 	bl	80017b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000b1a:	4b24      	ldr	r3, [pc, #144]	@ (8000bac <MX_ADC1_Init+0x268>)
 8000b1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000b1e:	f240 2306 	movw	r3, #518	@ 0x206
 8000b22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b24:	463b      	mov	r3, r7
 8000b26:	4619      	mov	r1, r3
 8000b28:	4814      	ldr	r0, [pc, #80]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000b2a:	f003 fb93 	bl	8004254 <HAL_ADC_ConfigChannel>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_ADC1_Init+0x1f4>
  {
    Error_Handler();
 8000b34:	f000 fe3e 	bl	80017b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb0 <MX_ADC1_Init+0x26c>)
 8000b3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000b3c:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000b40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b42:	463b      	mov	r3, r7
 8000b44:	4619      	mov	r1, r3
 8000b46:	480d      	ldr	r0, [pc, #52]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000b48:	f003 fb84 	bl	8004254 <HAL_ADC_ConfigChannel>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 8000b52:	f000 fe2f 	bl	80017b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b56:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <MX_ADC1_Init+0x270>)
 8000b58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000b5a:	f240 2312 	movw	r3, #530	@ 0x212
 8000b5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b60:	463b      	mov	r3, r7
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <MX_ADC1_Init+0x238>)
 8000b66:	f003 fb75 	bl	8004254 <HAL_ADC_ConfigChannel>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_ADC1_Init+0x230>
  {
    Error_Handler();
 8000b70:	f000 fe20 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	3720      	adds	r7, #32
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000058 	.word	0x20000058
 8000b80:	42028000 	.word	0x42028000
 8000b84:	04000002 	.word	0x04000002
 8000b88:	08000004 	.word	0x08000004
 8000b8c:	0c000008 	.word	0x0c000008
 8000b90:	10000010 	.word	0x10000010
 8000b94:	14000020 	.word	0x14000020
 8000b98:	1c000080 	.word	0x1c000080
 8000b9c:	20000100 	.word	0x20000100
 8000ba0:	2a000400 	.word	0x2a000400
 8000ba4:	2e000800 	.word	0x2e000800
 8000ba8:	32001000 	.word	0x32001000
 8000bac:	3e008000 	.word	0x3e008000
 8000bb0:	42010000 	.word	0x42010000
 8000bb4:	ce080000 	.word	0xce080000

08000bb8 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	2220      	movs	r2, #32
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f010 fe76 	bl	80118b6 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000bca:	4b34      	ldr	r3, [pc, #208]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000bcc:	4a34      	ldr	r2, [pc, #208]	@ (8000ca0 <MX_ADC4_Init+0xe8>)
 8000bce:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bd0:	4b32      	ldr	r3, [pc, #200]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd6:	4b31      	ldr	r3, [pc, #196]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000bd8:	2204      	movs	r2, #4
 8000bda:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_ENABLE;
 8000be2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000be4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000be8:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bea:	4b2c      	ldr	r3, [pc, #176]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000bec:	2204      	movs	r2, #4
 8000bee:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000bf6:	4b29      	ldr	r3, [pc, #164]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000bfc:	4b27      	ldr	r3, [pc, #156]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 2;
 8000c04:	4b25      	ldr	r3, [pc, #148]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000c06:	2202      	movs	r2, #2
 8000c08:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c0a:	4b24      	ldr	r3, [pc, #144]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c10:	4b22      	ldr	r3, [pc, #136]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000c16:	4b21      	ldr	r3, [pc, #132]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000c20:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000c24:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c26:	4b1d      	ldr	r3, [pc, #116]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000c32:	4b1a      	ldr	r3, [pc, #104]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000c38:	4b18      	ldr	r3, [pc, #96]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000c40:	4816      	ldr	r0, [pc, #88]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000c42:	f002 fbd9 	bl	80033f8 <HAL_ADC_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8000c4c:	f000 fdb2 	bl	80017b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_ADC4_Init+0xec>)
 8000c52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c64:	463b      	mov	r3, r7
 8000c66:	4619      	mov	r1, r3
 8000c68:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000c6a:	f003 faf3 	bl	8004254 <HAL_ADC_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_ADC4_Init+0xc0>
  {
    Error_Handler();
 8000c74:	f000 fd9e 	bl	80017b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <MX_ADC4_Init+0xf0>)
 8000c7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_2;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c80:	463b      	mov	r3, r7
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	@ (8000c9c <MX_ADC4_Init+0xe4>)
 8000c86:	f003 fae5 	bl	8004254 <HAL_ADC_ConfigChannel>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_ADC4_Init+0xdc>
  {
    Error_Handler();
 8000c90:	f000 fd90 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	3720      	adds	r7, #32
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200000e4 	.word	0x200000e4
 8000ca0:	46021000 	.word	0x46021000
 8000ca4:	1c000080 	.word	0x1c000080
 8000ca8:	20000100 	.word	0x20000100

08000cac <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <MX_DMA2D_Init+0x74>)
 8000cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d24 <MX_DMA2D_Init+0x78>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <MX_DMA2D_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000cbc:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <MX_DMA2D_Init+0x74>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000cc2:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <MX_DMA2D_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <MX_DMA2D_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000cce:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_DMA2D_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <MX_DMA2D_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_DMA2D_Init+0x74>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_DMA2D_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <MX_DMA2D_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_DMA2D_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <MX_DMA2D_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000cf8:	4809      	ldr	r0, [pc, #36]	@ (8000d20 <MX_DMA2D_Init+0x74>)
 8000cfa:	f005 fa39 	bl	8006170 <HAL_DMA2D_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000d04:	f000 fd56 	bl	80017b4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <MX_DMA2D_Init+0x74>)
 8000d0c:	f005 fa92 	bl	8006234 <HAL_DMA2D_ConfigLayer>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000d16:	f000 fd4d 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2000029c 	.word	0x2000029c
 8000d24:	4002b000 	.word	0x4002b000

08000d28 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000d2e:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <MX_GPDMA1_Init+0x6c>)
 8000d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d34:	4a17      	ldr	r2, [pc, #92]	@ (8000d94 <MX_GPDMA1_Init+0x6c>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000d3e:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <MX_GPDMA1_Init+0x6c>)
 8000d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2100      	movs	r1, #0
 8000d50:	201d      	movs	r0, #29
 8000d52:	f004 faaf 	bl	80052b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000d56:	201d      	movs	r0, #29
 8000d58:	f004 fac6 	bl	80052e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	201e      	movs	r0, #30
 8000d62:	f004 faa7 	bl	80052b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000d66:	201e      	movs	r0, #30
 8000d68:	f004 fabe 	bl	80052e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	201f      	movs	r0, #31
 8000d72:	f004 fa9f 	bl	80052b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000d76:	201f      	movs	r0, #31
 8000d78:	f004 fab6 	bl	80052e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2020      	movs	r0, #32
 8000d82:	f004 fa97 	bl	80052b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8000d86:	2020      	movs	r0, #32
 8000d88:	f004 faae 	bl	80052e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	46020c00 	.word	0x46020c00

08000d98 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  /* HSPI1 parameter configuration*/
  hxspi1.Instance = HSPI1;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e0c <MX_HSPI1_Init+0x74>)
 8000d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e10 <MX_HSPI1_Init+0x78>)
 8000da0:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 4;
 8000da2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <MX_HSPI1_Init+0x74>)
 8000da4:	2204      	movs	r2, #4
 8000da6:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000da8:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <MX_HSPI1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000dae:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <MX_HSPI1_Init+0x74>)
 8000db0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000db4:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_1GB;
 8000db6:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <MX_HSPI1_Init+0x74>)
 8000db8:	221a      	movs	r2, #26
 8000dba:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 2;
 8000dbc:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <MX_HSPI1_Init+0x74>)
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000dc2:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <MX_HSPI1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000dc8:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <MX_HSPI1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000dce:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <MX_HSPI1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8000dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e0c <MX_HSPI1_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <MX_HSPI1_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8000de0:	4b0a      	ldr	r3, [pc, #40]	@ (8000e0c <MX_HSPI1_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000de6:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <MX_HSPI1_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 8000dec:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <MX_HSPI1_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8000df2:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <MX_HSPI1_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 8000df8:	4804      	ldr	r0, [pc, #16]	@ (8000e0c <MX_HSPI1_Init+0x74>)
 8000dfa:	f010 f8f5 	bl	8010fe8 <HAL_XSPI_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_HSPI1_Init+0x70>
  {
    Error_Handler();
 8000e04:	f000 fcd6 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000304 	.word	0x20000304
 8000e10:	420d3400 	.word	0x420d3400

08000e14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e18:	4b1b      	ldr	r3, [pc, #108]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000e8c <MX_I2C1_Init+0x78>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20A0C4DF;
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e20:	4a1b      	ldr	r2, [pc, #108]	@ (8000e90 <MX_I2C1_Init+0x7c>)
 8000e22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e24:	4b18      	ldr	r3, [pc, #96]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e2a:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e30:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e36:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e42:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e4e:	480e      	ldr	r0, [pc, #56]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e50:	f006 fd76 	bl	8007940 <HAL_I2C_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e5a:	f000 fcab 	bl	80017b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4809      	ldr	r0, [pc, #36]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e62:	f007 ff01 	bl	8008c68 <HAL_I2CEx_ConfigAnalogFilter>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e6c:	f000 fca2 	bl	80017b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e70:	2100      	movs	r1, #0
 8000e72:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <MX_I2C1_Init+0x74>)
 8000e74:	f007 ff43 	bl	8008cfe <HAL_I2CEx_ConfigDigitalFilter>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e7e:	f000 fc99 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000364 	.word	0x20000364
 8000e8c:	40005400 	.word	0x40005400
 8000e90:	20a0c4df 	.word	0x20a0c4df

08000e94 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f0c <MX_I2C2_Init+0x78>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f10 <MX_I2C2_Init+0x7c>)
 8000ea2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb0:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000eb6:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ece:	480e      	ldr	r0, [pc, #56]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ed0:	f006 fd36 	bl	8007940 <HAL_I2C_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000eda:	f000 fc6b 	bl	80017b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4809      	ldr	r0, [pc, #36]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ee2:	f007 fec1 	bl	8008c68 <HAL_I2CEx_ConfigAnalogFilter>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000eec:	f000 fc62 	bl	80017b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ef4:	f007 ff03 	bl	8008cfe <HAL_I2CEx_ConfigDigitalFilter>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000efe:	f000 fc59 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200003b8 	.word	0x200003b8
 8000f0c:	40005800 	.word	0x40005800
 8000f10:	20a0c4df 	.word	0x20a0c4df

08000f14 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f007 ff3d 	bl	8008d98 <HAL_ICACHE_ConfigAssociativityMode>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000f24:	f000 fc46 	bl	80017b4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000f28:	f007 ff56 	bl	8008dd8 <HAL_ICACHE_Enable>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000f32:	f000 fc3f 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08e      	sub	sp, #56	@ 0x38
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2234      	movs	r2, #52	@ 0x34
 8000f46:	2100      	movs	r1, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f010 fcb4 	bl	80118b6 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f4e:	4b39      	ldr	r3, [pc, #228]	@ (8001034 <MX_LTDC_Init+0xf8>)
 8000f50:	4a39      	ldr	r2, [pc, #228]	@ (8001038 <MX_LTDC_Init+0xfc>)
 8000f52:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f54:	4b37      	ldr	r3, [pc, #220]	@ (8001034 <MX_LTDC_Init+0xf8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f5a:	4b36      	ldr	r3, [pc, #216]	@ (8001034 <MX_LTDC_Init+0xf8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f60:	4b34      	ldr	r3, [pc, #208]	@ (8001034 <MX_LTDC_Init+0xf8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f66:	4b33      	ldr	r3, [pc, #204]	@ (8001034 <MX_LTDC_Init+0xf8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8000f6c:	4b31      	ldr	r3, [pc, #196]	@ (8001034 <MX_LTDC_Init+0xf8>)
 8000f6e:	2203      	movs	r2, #3
 8000f70:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f72:	4b30      	ldr	r3, [pc, #192]	@ (8001034 <MX_LTDC_Init+0xf8>)
 8000f74:	2203      	movs	r2, #3
 8000f76:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8000f78:	4b2e      	ldr	r3, [pc, #184]	@ (8001034 <MX_LTDC_Init+0xf8>)
 8000f7a:	220b      	movs	r2, #11
 8000f7c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001034 <MX_LTDC_Init+0xf8>)
 8000f80:	220b      	movs	r2, #11
 8000f82:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8000f84:	4b2b      	ldr	r3, [pc, #172]	@ (8001034 <MX_LTDC_Init+0xf8>)
 8000f86:	f240 322b 	movw	r2, #811	@ 0x32b
 8000f8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8000f8c:	4b29      	ldr	r3, [pc, #164]	@ (8001034 <MX_LTDC_Init+0xf8>)
 8000f8e:	f240 12eb 	movw	r2, #491	@ 0x1eb
 8000f92:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8000f94:	4b27      	ldr	r3, [pc, #156]	@ (8001034 <MX_LTDC_Init+0xf8>)
 8000f96:	f240 3233 	movw	r2, #819	@ 0x333
 8000f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8000f9c:	4b25      	ldr	r3, [pc, #148]	@ (8001034 <MX_LTDC_Init+0xf8>)
 8000f9e:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000fa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fa4:	4b23      	ldr	r3, [pc, #140]	@ (8001034 <MX_LTDC_Init+0xf8>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fac:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <MX_LTDC_Init+0xf8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <MX_LTDC_Init+0xf8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fbc:	481d      	ldr	r0, [pc, #116]	@ (8001034 <MX_LTDC_Init+0xf8>)
 8000fbe:	f007 ff1b 	bl	8008df8 <HAL_LTDC_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000fc8:	f000 fbf4 	bl	80017b4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8000fd0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000fd4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000fda:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000fde:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000fe4:	23ff      	movs	r3, #255	@ 0xff
 8000fe6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000fec:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ff0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	4619      	mov	r1, r3
 800101a:	4806      	ldr	r0, [pc, #24]	@ (8001034 <MX_LTDC_Init+0xf8>)
 800101c:	f008 f87e 	bl	800911c <HAL_LTDC_ConfigLayer>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8001026:	f000 fbc5 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	3738      	adds	r7, #56	@ 0x38
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000040c 	.word	0x2000040c
 8001038:	40016800 	.word	0x40016800

0800103c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
 8001050:	615a      	str	r2, [r3, #20]
 8001052:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001054:	4b1e      	ldr	r3, [pc, #120]	@ (80010d0 <MX_RTC_Init+0x94>)
 8001056:	4a1f      	ldr	r2, [pc, #124]	@ (80010d4 <MX_RTC_Init+0x98>)
 8001058:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800105a:	4b1d      	ldr	r3, [pc, #116]	@ (80010d0 <MX_RTC_Init+0x94>)
 800105c:	2200      	movs	r2, #0
 800105e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001060:	4b1b      	ldr	r3, [pc, #108]	@ (80010d0 <MX_RTC_Init+0x94>)
 8001062:	227f      	movs	r2, #127	@ 0x7f
 8001064:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001066:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <MX_RTC_Init+0x94>)
 8001068:	22ff      	movs	r2, #255	@ 0xff
 800106a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800106c:	4b18      	ldr	r3, [pc, #96]	@ (80010d0 <MX_RTC_Init+0x94>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001072:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <MX_RTC_Init+0x94>)
 8001074:	2200      	movs	r2, #0
 8001076:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001078:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <MX_RTC_Init+0x94>)
 800107a:	2200      	movs	r2, #0
 800107c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800107e:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <MX_RTC_Init+0x94>)
 8001080:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001084:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001086:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <MX_RTC_Init+0x94>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800108c:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <MX_RTC_Init+0x94>)
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001092:	480f      	ldr	r0, [pc, #60]	@ (80010d0 <MX_RTC_Init+0x94>)
 8001094:	f00c ff06 	bl	800dea4 <HAL_RTC_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800109e:	f000 fb89 	bl	80017b4 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	@ (80010d0 <MX_RTC_Init+0x94>)
 80010b8:	f00d f822 	bl	800e100 <HAL_RTCEx_PrivilegeModeSet>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80010c2:	f000 fb77 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	3720      	adds	r7, #32
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200004b4 	.word	0x200004b4
 80010d4:	46007800 	.word	0x46007800

080010d8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80010dc:	4b2f      	ldr	r3, [pc, #188]	@ (800119c <MX_SAI2_Init+0xc4>)
 80010de:	4a30      	ldr	r2, [pc, #192]	@ (80011a0 <MX_SAI2_Init+0xc8>)
 80010e0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80010e2:	4b2e      	ldr	r3, [pc, #184]	@ (800119c <MX_SAI2_Init+0xc4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80010e8:	4b2c      	ldr	r3, [pc, #176]	@ (800119c <MX_SAI2_Init+0xc4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010ee:	4b2b      	ldr	r3, [pc, #172]	@ (800119c <MX_SAI2_Init+0xc4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <MX_SAI2_Init+0xc4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010fa:	4b28      	ldr	r3, [pc, #160]	@ (800119c <MX_SAI2_Init+0xc4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 8001100:	4b26      	ldr	r3, [pc, #152]	@ (800119c <MX_SAI2_Init+0xc4>)
 8001102:	4a28      	ldr	r2, [pc, #160]	@ (80011a4 <MX_SAI2_Init+0xcc>)
 8001104:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001106:	4b25      	ldr	r3, [pc, #148]	@ (800119c <MX_SAI2_Init+0xc4>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 800110c:	4b23      	ldr	r3, [pc, #140]	@ (800119c <MX_SAI2_Init+0xc4>)
 800110e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001112:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001114:	4b21      	ldr	r3, [pc, #132]	@ (800119c <MX_SAI2_Init+0xc4>)
 8001116:	2200      	movs	r2, #0
 8001118:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800111a:	4b20      	ldr	r3, [pc, #128]	@ (800119c <MX_SAI2_Init+0xc4>)
 800111c:	2200      	movs	r2, #0
 800111e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_RELEASED;
 8001120:	4b1e      	ldr	r3, [pc, #120]	@ (800119c <MX_SAI2_Init+0xc4>)
 8001122:	2210      	movs	r2, #16
 8001124:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8001126:	2302      	movs	r3, #2
 8001128:	2202      	movs	r2, #2
 800112a:	2101      	movs	r1, #1
 800112c:	481b      	ldr	r0, [pc, #108]	@ (800119c <MX_SAI2_Init+0xc4>)
 800112e:	f00d f815 	bl	800e15c <HAL_SAI_InitProtocol>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_SAI2_Init+0x64>
  {
    Error_Handler();
 8001138:	f000 fb3c 	bl	80017b4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800113c:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <MX_SAI2_Init+0xd0>)
 800113e:	4a1b      	ldr	r2, [pc, #108]	@ (80011ac <MX_SAI2_Init+0xd4>)
 8001140:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <MX_SAI2_Init+0xd0>)
 8001144:	2201      	movs	r2, #1
 8001146:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001148:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <MX_SAI2_Init+0xd0>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800114e:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <MX_SAI2_Init+0xd0>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001154:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <MX_SAI2_Init+0xd0>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 800115a:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <MX_SAI2_Init+0xd0>)
 800115c:	2202      	movs	r2, #2
 800115e:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_96K;
 8001160:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <MX_SAI2_Init+0xd0>)
 8001162:	4a10      	ldr	r2, [pc, #64]	@ (80011a4 <MX_SAI2_Init+0xcc>)
 8001164:	621a      	str	r2, [r3, #32]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001166:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <MX_SAI2_Init+0xd0>)
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 800116c:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <MX_SAI2_Init+0xd0>)
 800116e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001172:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <MX_SAI2_Init+0xd0>)
 8001176:	2200      	movs	r2, #0
 8001178:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800117a:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <MX_SAI2_Init+0xd0>)
 800117c:	2200      	movs	r2, #0
 800117e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8001180:	2308      	movs	r3, #8
 8001182:	2202      	movs	r2, #2
 8001184:	2100      	movs	r1, #0
 8001186:	4808      	ldr	r0, [pc, #32]	@ (80011a8 <MX_SAI2_Init+0xd0>)
 8001188:	f00c ffe8 	bl	800e15c <HAL_SAI_InitProtocol>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_SAI2_Init+0xbe>
  {
    Error_Handler();
 8001192:	f000 fb0f 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200004e4 	.word	0x200004e4
 80011a0:	40015804 	.word	0x40015804
 80011a4:	00017700 	.word	0x00017700
 80011a8:	2000057c 	.word	0x2000057c
 80011ac:	40015824 	.word	0x40015824

080011b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	@ 0x28
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c2:	463b      	mov	r3, r7
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
 80011d0:	615a      	str	r2, [r3, #20]
 80011d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011d4:	4b25      	ldr	r3, [pc, #148]	@ (800126c <MX_TIM3_Init+0xbc>)
 80011d6:	4a26      	ldr	r2, [pc, #152]	@ (8001270 <MX_TIM3_Init+0xc0>)
 80011d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 80011da:	4b24      	ldr	r3, [pc, #144]	@ (800126c <MX_TIM3_Init+0xbc>)
 80011dc:	22a0      	movs	r2, #160	@ 0xa0
 80011de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e0:	4b22      	ldr	r3, [pc, #136]	@ (800126c <MX_TIM3_Init+0xbc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80011e6:	4b21      	ldr	r3, [pc, #132]	@ (800126c <MX_TIM3_Init+0xbc>)
 80011e8:	2264      	movs	r2, #100	@ 0x64
 80011ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b1f      	ldr	r3, [pc, #124]	@ (800126c <MX_TIM3_Init+0xbc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f2:	4b1e      	ldr	r3, [pc, #120]	@ (800126c <MX_TIM3_Init+0xbc>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011f8:	481c      	ldr	r0, [pc, #112]	@ (800126c <MX_TIM3_Init+0xbc>)
 80011fa:	f00d fdab 	bl	800ed54 <HAL_TIM_PWM_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001204:	f000 fad6 	bl	80017b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4619      	mov	r1, r3
 8001216:	4815      	ldr	r0, [pc, #84]	@ (800126c <MX_TIM3_Init+0xbc>)
 8001218:	f00e fd82 	bl	800fd20 <HAL_TIMEx_MasterConfigSynchronization>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001222:	f000 fac7 	bl	80017b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001226:	2360      	movs	r3, #96	@ 0x60
 8001228:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 800122a:	234b      	movs	r3, #75	@ 0x4b
 800122c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001236:	463b      	mov	r3, r7
 8001238:	220c      	movs	r2, #12
 800123a:	4619      	mov	r1, r3
 800123c:	480b      	ldr	r0, [pc, #44]	@ (800126c <MX_TIM3_Init+0xbc>)
 800123e:	f00d fde1 	bl	800ee04 <HAL_TIM_PWM_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001248:	f000 fab4 	bl	80017b4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 800124c:	4b07      	ldr	r3, [pc, #28]	@ (800126c <MX_TIM3_Init+0xbc>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	69da      	ldr	r2, [r3, #28]
 8001252:	4b06      	ldr	r3, [pc, #24]	@ (800126c <MX_TIM3_Init+0xbc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800125a:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800125c:	4803      	ldr	r0, [pc, #12]	@ (800126c <MX_TIM3_Init+0xbc>)
 800125e:	f001 f857 	bl	8002310 <HAL_TIM_MspPostInit>

}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	@ 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000077c 	.word	0x2000077c
 8001270:	40000400 	.word	0x40000400

08001274 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127a:	f107 0310 	add.w	r3, r7, #16
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001292:	4b1e      	ldr	r3, [pc, #120]	@ (800130c <MX_TIM15_Init+0x98>)
 8001294:	4a1e      	ldr	r2, [pc, #120]	@ (8001310 <MX_TIM15_Init+0x9c>)
 8001296:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 26;
 8001298:	4b1c      	ldr	r3, [pc, #112]	@ (800130c <MX_TIM15_Init+0x98>)
 800129a:	221a      	movs	r2, #26
 800129c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129e:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <MX_TIM15_Init+0x98>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 49;
 80012a4:	4b19      	ldr	r3, [pc, #100]	@ (800130c <MX_TIM15_Init+0x98>)
 80012a6:	2231      	movs	r2, #49	@ 0x31
 80012a8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012aa:	4b18      	ldr	r3, [pc, #96]	@ (800130c <MX_TIM15_Init+0x98>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80012b0:	4b16      	ldr	r3, [pc, #88]	@ (800130c <MX_TIM15_Init+0x98>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <MX_TIM15_Init+0x98>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80012bc:	4813      	ldr	r0, [pc, #76]	@ (800130c <MX_TIM15_Init+0x98>)
 80012be:	f00d fc59 	bl	800eb74 <HAL_TIM_Base_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 80012c8:	f000 fa74 	bl	80017b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4619      	mov	r1, r3
 80012d8:	480c      	ldr	r0, [pc, #48]	@ (800130c <MX_TIM15_Init+0x98>)
 80012da:	f00d fea7 	bl	800f02c <HAL_TIM_ConfigClockSource>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 80012e4:	f000 fa66 	bl	80017b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012e8:	2320      	movs	r3, #32
 80012ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_TIM15_Init+0x98>)
 80012f6:	f00e fd13 	bl	800fd20 <HAL_TIMEx_MasterConfigSynchronization>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001300:	f000 fa58 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	3720      	adds	r7, #32
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200007c8 	.word	0x200007c8
 8001310:	40014000 	.word	0x40014000

08001314 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001318:	4b22      	ldr	r3, [pc, #136]	@ (80013a4 <MX_USART1_UART_Init+0x90>)
 800131a:	4a23      	ldr	r2, [pc, #140]	@ (80013a8 <MX_USART1_UART_Init+0x94>)
 800131c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800131e:	4b21      	ldr	r3, [pc, #132]	@ (80013a4 <MX_USART1_UART_Init+0x90>)
 8001320:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001324:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b1f      	ldr	r3, [pc, #124]	@ (80013a4 <MX_USART1_UART_Init+0x90>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b1d      	ldr	r3, [pc, #116]	@ (80013a4 <MX_USART1_UART_Init+0x90>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001332:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <MX_USART1_UART_Init+0x90>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b1a      	ldr	r3, [pc, #104]	@ (80013a4 <MX_USART1_UART_Init+0x90>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <MX_USART1_UART_Init+0x90>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b17      	ldr	r3, [pc, #92]	@ (80013a4 <MX_USART1_UART_Init+0x90>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800134a:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <MX_USART1_UART_Init+0x90>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001350:	4b14      	ldr	r3, [pc, #80]	@ (80013a4 <MX_USART1_UART_Init+0x90>)
 8001352:	2200      	movs	r2, #0
 8001354:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001356:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <MX_USART1_UART_Init+0x90>)
 8001358:	2200      	movs	r2, #0
 800135a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800135c:	4811      	ldr	r0, [pc, #68]	@ (80013a4 <MX_USART1_UART_Init+0x90>)
 800135e:	f00e fda1 	bl	800fea4 <HAL_UART_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001368:	f000 fa24 	bl	80017b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800136c:	2100      	movs	r1, #0
 800136e:	480d      	ldr	r0, [pc, #52]	@ (80013a4 <MX_USART1_UART_Init+0x90>)
 8001370:	f00f fd6f 	bl	8010e52 <HAL_UARTEx_SetTxFifoThreshold>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800137a:	f000 fa1b 	bl	80017b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800137e:	2100      	movs	r1, #0
 8001380:	4808      	ldr	r0, [pc, #32]	@ (80013a4 <MX_USART1_UART_Init+0x90>)
 8001382:	f00f fda4 	bl	8010ece <HAL_UARTEx_SetRxFifoThreshold>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800138c:	f000 fa12 	bl	80017b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001390:	4804      	ldr	r0, [pc, #16]	@ (80013a4 <MX_USART1_UART_Init+0x90>)
 8001392:	f00f fd25 	bl	8010de0 <HAL_UARTEx_DisableFifoMode>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800139c:	f000 fa0a 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000814 	.word	0x20000814
 80013a8:	40013800 	.word	0x40013800

080013ac <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80013b0:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013b2:	4a14      	ldr	r2, [pc, #80]	@ (8001404 <MX_USB_OTG_HS_PCD_Init+0x58>)
 80013b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80013b6:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013b8:	2209      	movs	r2, #9
 80013ba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80013bc:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013be:	2200      	movs	r2, #0
 80013c0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80013c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013c4:	2203      	movs	r2, #3
 80013c6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80013c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80013ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80013d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013dc:	2200      	movs	r2, #0
 80013de:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80013e0:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80013ec:	4804      	ldr	r0, [pc, #16]	@ (8001400 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80013ee:	f008 f846 	bl	800947e <HAL_PCD_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 80013f8:	f000 f9dc 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200008a8 	.word	0x200008a8
 8001404:	42040000 	.word	0x42040000

08001408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08e      	sub	sp, #56	@ 0x38
 800140c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800141e:	4b8c      	ldr	r3, [pc, #560]	@ (8001650 <MX_GPIO_Init+0x248>)
 8001420:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001424:	4a8a      	ldr	r2, [pc, #552]	@ (8001650 <MX_GPIO_Init+0x248>)
 8001426:	f043 0310 	orr.w	r3, r3, #16
 800142a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800142e:	4b88      	ldr	r3, [pc, #544]	@ (8001650 <MX_GPIO_Init+0x248>)
 8001430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001434:	f003 0310 	and.w	r3, r3, #16
 8001438:	623b      	str	r3, [r7, #32]
 800143a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143c:	4b84      	ldr	r3, [pc, #528]	@ (8001650 <MX_GPIO_Init+0x248>)
 800143e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001442:	4a83      	ldr	r2, [pc, #524]	@ (8001650 <MX_GPIO_Init+0x248>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800144c:	4b80      	ldr	r3, [pc, #512]	@ (8001650 <MX_GPIO_Init+0x248>)
 800144e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	61fb      	str	r3, [r7, #28]
 8001458:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800145a:	4b7d      	ldr	r3, [pc, #500]	@ (8001650 <MX_GPIO_Init+0x248>)
 800145c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001460:	4a7b      	ldr	r2, [pc, #492]	@ (8001650 <MX_GPIO_Init+0x248>)
 8001462:	f043 0320 	orr.w	r3, r3, #32
 8001466:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800146a:	4b79      	ldr	r3, [pc, #484]	@ (8001650 <MX_GPIO_Init+0x248>)
 800146c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001470:	f003 0320 	and.w	r3, r3, #32
 8001474:	61bb      	str	r3, [r7, #24]
 8001476:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001478:	4b75      	ldr	r3, [pc, #468]	@ (8001650 <MX_GPIO_Init+0x248>)
 800147a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800147e:	4a74      	ldr	r2, [pc, #464]	@ (8001650 <MX_GPIO_Init+0x248>)
 8001480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001484:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001488:	4b71      	ldr	r3, [pc, #452]	@ (8001650 <MX_GPIO_Init+0x248>)
 800148a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800148e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	4b6e      	ldr	r3, [pc, #440]	@ (8001650 <MX_GPIO_Init+0x248>)
 8001498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800149c:	4a6c      	ldr	r2, [pc, #432]	@ (8001650 <MX_GPIO_Init+0x248>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001650 <MX_GPIO_Init+0x248>)
 80014a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b4:	4b66      	ldr	r3, [pc, #408]	@ (8001650 <MX_GPIO_Init+0x248>)
 80014b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ba:	4a65      	ldr	r2, [pc, #404]	@ (8001650 <MX_GPIO_Init+0x248>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014c4:	4b62      	ldr	r3, [pc, #392]	@ (8001650 <MX_GPIO_Init+0x248>)
 80014c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001650 <MX_GPIO_Init+0x248>)
 80014d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d8:	4a5d      	ldr	r2, [pc, #372]	@ (8001650 <MX_GPIO_Init+0x248>)
 80014da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001650 <MX_GPIO_Init+0x248>)
 80014e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f0:	4b57      	ldr	r3, [pc, #348]	@ (8001650 <MX_GPIO_Init+0x248>)
 80014f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014f6:	4a56      	ldr	r2, [pc, #344]	@ (8001650 <MX_GPIO_Init+0x248>)
 80014f8:	f043 0308 	orr.w	r3, r3, #8
 80014fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001500:	4b53      	ldr	r3, [pc, #332]	@ (8001650 <MX_GPIO_Init+0x248>)
 8001502:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800150e:	4b50      	ldr	r3, [pc, #320]	@ (8001650 <MX_GPIO_Init+0x248>)
 8001510:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001514:	4a4e      	ldr	r2, [pc, #312]	@ (8001650 <MX_GPIO_Init+0x248>)
 8001516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800151a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800151e:	4b4c      	ldr	r3, [pc, #304]	@ (8001650 <MX_GPIO_Init+0x248>)
 8001520:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_Power_On_GPIO_Port, ADC_Power_On_Pin, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2104      	movs	r1, #4
 8001530:	4848      	ldr	r0, [pc, #288]	@ (8001654 <MX_GPIO_Init+0x24c>)
 8001532:	f006 f9b1 	bl	8007898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_ON_GPIO_Port, LCD_ON_Pin, GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	2110      	movs	r1, #16
 800153a:	4846      	ldr	r0, [pc, #280]	@ (8001654 <MX_GPIO_Init+0x24c>)
 800153c:	f006 f9ac 	bl	8007898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	2114      	movs	r1, #20
 8001544:	4844      	ldr	r0, [pc, #272]	@ (8001658 <MX_GPIO_Init+0x250>)
 8001546:	f006 f9a7 	bl	8007898 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_Power_On_Pin LCD_ON_Pin */
  GPIO_InitStruct.Pin = ADC_Power_On_Pin|LCD_ON_Pin;
 800154a:	2314      	movs	r3, #20
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800155a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800155e:	4619      	mov	r1, r3
 8001560:	483c      	ldr	r0, [pc, #240]	@ (8001654 <MX_GPIO_Init+0x24c>)
 8001562:	f005 ffc1 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001566:	2320      	movs	r3, #32
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800156a:	4b3c      	ldr	r3, [pc, #240]	@ (800165c <MX_GPIO_Init+0x254>)
 800156c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001576:	4619      	mov	r1, r3
 8001578:	4836      	ldr	r0, [pc, #216]	@ (8001654 <MX_GPIO_Init+0x24c>)
 800157a:	f005 ffb5 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 800157e:	2302      	movs	r3, #2
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001582:	4b37      	ldr	r3, [pc, #220]	@ (8001660 <MX_GPIO_Init+0x258>)
 8001584:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800158e:	4619      	mov	r1, r3
 8001590:	4834      	ldr	r0, [pc, #208]	@ (8001664 <MX_GPIO_Init+0x25c>)
 8001592:	f005 ffa9 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 8001596:	2310      	movs	r3, #16
 8001598:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800159a:	4b33      	ldr	r3, [pc, #204]	@ (8001668 <MX_GPIO_Init+0x260>)
 800159c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800159e:	2301      	movs	r3, #1
 80015a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a6:	4619      	mov	r1, r3
 80015a8:	482e      	ldr	r0, [pc, #184]	@ (8001664 <MX_GPIO_Init+0x25c>)
 80015aa:	f005 ff9d 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 80015ae:	2314      	movs	r3, #20
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c2:	4619      	mov	r1, r3
 80015c4:	4824      	ldr	r0, [pc, #144]	@ (8001658 <MX_GPIO_Init+0x250>)
 80015c6:	f005 ff8f 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Master_Mute_Pin */
  GPIO_InitStruct.Pin = Master_Mute_Pin;
 80015ca:	2380      	movs	r3, #128	@ 0x80
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Master_Mute_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	481e      	ldr	r0, [pc, #120]	@ (8001658 <MX_GPIO_Init+0x250>)
 80015de:	f005 ff83 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_6_Mute_Pin Channel_2_Mute_Pin Master_MuteG15_Pin */
  GPIO_InitStruct.Pin = Channel_6_Mute_Pin|Channel_2_Mute_Pin|Master_MuteG15_Pin;
 80015e2:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f4:	4619      	mov	r1, r3
 80015f6:	481d      	ldr	r0, [pc, #116]	@ (800166c <MX_GPIO_Init+0x264>)
 80015f8:	f005 ff76 	bl	80074e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Channel_5_Mute_Pin Channel_4_Mute_Pin Channel_3_Mute_Pin Channel_1_Mute_Pin */
  GPIO_InitStruct.Pin = Channel_5_Mute_Pin|Channel_4_Mute_Pin|Channel_3_Mute_Pin|Channel_1_Mute_Pin;
 80015fc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160e:	4619      	mov	r1, r3
 8001610:	4817      	ldr	r0, [pc, #92]	@ (8001670 <MX_GPIO_Init+0x268>)
 8001612:	f005 ff69 	bl	80074e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	200c      	movs	r0, #12
 800161c:	f003 fe4a 	bl	80052b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001620:	200c      	movs	r0, #12
 8001622:	f003 fe61 	bl	80052e8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	200f      	movs	r0, #15
 800162c:	f003 fe42 	bl	80052b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001630:	200f      	movs	r0, #15
 8001632:	f003 fe59 	bl	80052e8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	2010      	movs	r0, #16
 800163c:	f003 fe3a 	bl	80052b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8001640:	2010      	movs	r0, #16
 8001642:	f003 fe51 	bl	80052e8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001646:	bf00      	nop
 8001648:	3738      	adds	r7, #56	@ 0x38
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	46020c00 	.word	0x46020c00
 8001654:	42021000 	.word	0x42021000
 8001658:	42020c00 	.word	0x42020c00
 800165c:	10110000 	.word	0x10110000
 8001660:	10310000 	.word	0x10310000
 8001664:	42020000 	.word	0x42020000
 8001668:	10210000 	.word	0x10210000
 800166c:	42021800 	.word	0x42021800
 8001670:	42020400 	.word	0x42020400

08001674 <HAL_SAI_RxHalfCpltCallback>:
	temp = temp / denoiseSize;
	return temp;
}

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	uint16_t dacSlot = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (sampleSize * 8 ) / 2; i += 8)
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	e033      	b.n	80016ee <HAL_SAI_RxHalfCpltCallback+0x7a>
	{
		float convert = ((((float)pcmData[i] * (float)gain) / 16777216.0f) - 0.5f) * 2.0f;
 8001686:	4a1f      	ldr	r2, [pc, #124]	@ (8001704 <HAL_SAI_RxHalfCpltCallback+0x90>)
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001696:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800169a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800169e:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8001708 <HAL_SAI_RxHalfCpltCallback+0x94>
 80016a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80016aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016b2:	edc7 7a03 	vstr	s15, [r7, #12]
		int32_t output = (int32_t)(convert * 8388608);
 80016b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ba:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800170c <HAL_SAI_RxHalfCpltCallback+0x98>
 80016be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c6:	ee17 3a90 	vmov	r3, s15
 80016ca:	60bb      	str	r3, [r7, #8]

		dacData[dacSlot] = output;
 80016cc:	8afb      	ldrh	r3, [r7, #22]
 80016ce:	4910      	ldr	r1, [pc, #64]	@ (8001710 <HAL_SAI_RxHalfCpltCallback+0x9c>)
 80016d0:	68ba      	ldr	r2, [r7, #8]
 80016d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacData[dacSlot + 1] = output;
 80016d6:	8afb      	ldrh	r3, [r7, #22]
 80016d8:	3301      	adds	r3, #1
 80016da:	490d      	ldr	r1, [pc, #52]	@ (8001710 <HAL_SAI_RxHalfCpltCallback+0x9c>)
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacSlot += 2;
 80016e2:	8afb      	ldrh	r3, [r7, #22]
 80016e4:	3302      	adds	r3, #2
 80016e6:	82fb      	strh	r3, [r7, #22]
	for(int i = 0; i < (sampleSize * 8 ) / 2; i += 8)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	3308      	adds	r3, #8
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	ddc8      	ble.n	8001686 <HAL_SAI_RxHalfCpltCallback+0x12>
	}
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	371c      	adds	r7, #28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000dac 	.word	0x20000dac
 8001708:	4b800000 	.word	0x4b800000
 800170c:	4b000000 	.word	0x4b000000
 8001710:	20000dcc 	.word	0x20000dcc

08001714 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	uint16_t dacSlot = sampleSize;
 800171c:	2301      	movs	r3, #1
 800171e:	82fb      	strh	r3, [r7, #22]
	for(int i = ((sampleSize * 8)) / 2; i < sampleSize * 8; i += 8)
 8001720:	2304      	movs	r3, #4
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	e033      	b.n	800178e <HAL_SAI_RxCpltCallback+0x7a>
	{
		float convert = ((((float)pcmData[i] * (float)gain) / 16777216.0f) - 0.5f) * 2.0f;
 8001726:	4a1f      	ldr	r2, [pc, #124]	@ (80017a4 <HAL_SAI_RxCpltCallback+0x90>)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	ee07 3a90 	vmov	s15, r3
 8001732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001736:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800173a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800173e:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80017a8 <HAL_SAI_RxCpltCallback+0x94>
 8001742:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001746:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800174a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800174e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001752:	edc7 7a03 	vstr	s15, [r7, #12]
		int32_t output = (int32_t)(convert * 8388608);
 8001756:	edd7 7a03 	vldr	s15, [r7, #12]
 800175a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80017ac <HAL_SAI_RxCpltCallback+0x98>
 800175e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001766:	ee17 3a90 	vmov	r3, s15
 800176a:	60bb      	str	r3, [r7, #8]

		dacData[dacSlot] = output;
 800176c:	8afb      	ldrh	r3, [r7, #22]
 800176e:	4910      	ldr	r1, [pc, #64]	@ (80017b0 <HAL_SAI_RxCpltCallback+0x9c>)
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacData[dacSlot + 1] = output;
 8001776:	8afb      	ldrh	r3, [r7, #22]
 8001778:	3301      	adds	r3, #1
 800177a:	490d      	ldr	r1, [pc, #52]	@ (80017b0 <HAL_SAI_RxCpltCallback+0x9c>)
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		dacSlot += 2;
 8001782:	8afb      	ldrh	r3, [r7, #22]
 8001784:	3302      	adds	r3, #2
 8001786:	82fb      	strh	r3, [r7, #22]
	for(int i = ((sampleSize * 8)) / 2; i < sampleSize * 8; i += 8)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	3308      	adds	r3, #8
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	2b07      	cmp	r3, #7
 8001792:	ddc8      	ble.n	8001726 <HAL_SAI_RxCpltCallback+0x12>
	}
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	371c      	adds	r7, #28
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000dac 	.word	0x20000dac
 80017a8:	4b800000 	.word	0x4b800000
 80017ac:	4b000000 	.word	0x4b000000
 80017b0:	20000dcc 	.word	0x20000dcc

080017b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b8:	b672      	cpsid	i
}
 80017ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <Error_Handler+0x8>

080017c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <HAL_MspInit+0x30>)
 80017c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017cc:	4a08      	ldr	r2, [pc, #32]	@ (80017f0 <HAL_MspInit+0x30>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80017d6:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <HAL_MspInit+0x30>)
 80017d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 80017e4:	f008 f888 	bl	80098f8 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	46020c00 	.word	0x46020c00

080017f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b0e0      	sub	sp, #384	@ 0x180
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017fe:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001802:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001814:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001818:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800181c:	4618      	mov	r0, r3
 800181e:	23e0      	movs	r3, #224	@ 0xe0
 8001820:	461a      	mov	r2, r3
 8001822:	2100      	movs	r1, #0
 8001824:	f010 f847 	bl	80118b6 <memset>
  if(hadc->Instance==ADC1)
 8001828:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800182c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4aa1      	ldr	r2, [pc, #644]	@ (8001abc <HAL_ADC_MspInit+0x2c8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	f040 8152 	bne.w	8001ae0 <HAL_ADC_MspInit+0x2ec>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800183c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001840:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001844:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001850:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001854:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001858:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800185c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001860:	f107 0320 	add.w	r3, r7, #32
 8001864:	4618      	mov	r0, r3
 8001866:	f009 fb21 	bl	800aeac <HAL_RCCEx_PeriphCLKConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8001870:	f7ff ffa0 	bl	80017b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001874:	4b92      	ldr	r3, [pc, #584]	@ (8001ac0 <HAL_ADC_MspInit+0x2cc>)
 8001876:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800187a:	4a91      	ldr	r2, [pc, #580]	@ (8001ac0 <HAL_ADC_MspInit+0x2cc>)
 800187c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001880:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001884:	4b8e      	ldr	r3, [pc, #568]	@ (8001ac0 <HAL_ADC_MspInit+0x2cc>)
 8001886:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800188a:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800188e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001892:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800189c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80018a0:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	4b87      	ldr	r3, [pc, #540]	@ (8001ac0 <HAL_ADC_MspInit+0x2cc>)
 80018a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018a8:	4a85      	ldr	r2, [pc, #532]	@ (8001ac0 <HAL_ADC_MspInit+0x2cc>)
 80018aa:	f043 0304 	orr.w	r3, r3, #4
 80018ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018b2:	4b83      	ldr	r3, [pc, #524]	@ (8001ac0 <HAL_ADC_MspInit+0x2cc>)
 80018b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018b8:	f003 0204 	and.w	r2, r3, #4
 80018bc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018c0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018ca:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018ce:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d0:	4b7b      	ldr	r3, [pc, #492]	@ (8001ac0 <HAL_ADC_MspInit+0x2cc>)
 80018d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018d6:	4a7a      	ldr	r2, [pc, #488]	@ (8001ac0 <HAL_ADC_MspInit+0x2cc>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018e0:	4b77      	ldr	r3, [pc, #476]	@ (8001ac0 <HAL_ADC_MspInit+0x2cc>)
 80018e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018e6:	f003 0201 	and.w	r2, r3, #1
 80018ea:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018ee:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018f8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018fc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	4b70      	ldr	r3, [pc, #448]	@ (8001ac0 <HAL_ADC_MspInit+0x2cc>)
 8001900:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001904:	4a6e      	ldr	r2, [pc, #440]	@ (8001ac0 <HAL_ADC_MspInit+0x2cc>)
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800190e:	4b6c      	ldr	r3, [pc, #432]	@ (8001ac0 <HAL_ADC_MspInit+0x2cc>)
 8001910:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001914:	f003 0202 	and.w	r2, r3, #2
 8001918:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800191c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001926:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800192a:	681b      	ldr	r3, [r3, #0]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = Channel_1_Volume_Pin|Channel_2_Volume_Pin|Channel_3_Volume_Pin|Channel_4_Volume_Pin;
 800192c:	230f      	movs	r3, #15
 800192e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001932:	2303      	movs	r3, #3
 8001934:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193e:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001942:	4619      	mov	r1, r3
 8001944:	485f      	ldr	r0, [pc, #380]	@ (8001ac4 <HAL_ADC_MspInit+0x2d0>)
 8001946:	f005 fdcf 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_5_Volume_Pin|Channel_6_Volume_Pin|GPIO_PIN_3|Master_Volume_Pin
 800194a:	23ed      	movs	r3, #237	@ 0xed
 800194c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                          |Channel_1_LR_Pin|Channel_2_LR_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001950:	2303      	movs	r3, #3
 8001952:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195c:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001960:	4619      	mov	r1, r3
 8001962:	4859      	ldr	r0, [pc, #356]	@ (8001ac8 <HAL_ADC_MspInit+0x2d4>)
 8001964:	f005 fdc0 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Channel_3_LR_Pin|Channel_4_LR_Pin;
 8001968:	2303      	movs	r3, #3
 800196a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196e:	2303      	movs	r3, #3
 8001970:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800197e:	4619      	mov	r1, r3
 8001980:	4852      	ldr	r0, [pc, #328]	@ (8001acc <HAL_ADC_MspInit+0x2d8>)
 8001982:	f005 fdb1 	bl	80074e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001986:	2321      	movs	r3, #33	@ 0x21
 8001988:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001992:	2300      	movs	r3, #0
 8001994:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001998:	2300      	movs	r3, #0
 800199a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800199e:	2300      	movs	r3, #0
 80019a0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80019a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80019a8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80019ac:	2301      	movs	r3, #1
 80019ae:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80019b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.SrcBurstLength = 1;
 80019ba:	2301      	movs	r3, #1
 80019bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.DestBurstLength = 1;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 80019c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.Init.Mode = DMA_NORMAL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.TriggerConfig.TriggerMode = DMA_TRIGM_BLOCK_TRANSFER;
 80019da:	2300      	movs	r3, #0
 80019dc:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_RISING;
 80019e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019e4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    NodeConfig.TriggerConfig.TriggerSelection = GPDMA1_TRIGGER_TIM15_TRGO;
 80019e8:	232b      	movs	r3, #43	@ 0x2b
 80019ea:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 80019fa:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80019fe:	4934      	ldr	r1, [pc, #208]	@ (8001ad0 <HAL_ADC_MspInit+0x2dc>)
 8001a00:	4618      	mov	r0, r3
 8001a02:	f004 fe85 	bl	8006710 <HAL_DMAEx_List_BuildNode>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_ADC_MspInit+0x21c>
    {
      Error_Handler();
 8001a0c:	f7ff fed2 	bl	80017b4 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8001a10:	4a2f      	ldr	r2, [pc, #188]	@ (8001ad0 <HAL_ADC_MspInit+0x2dc>)
 8001a12:	2100      	movs	r1, #0
 8001a14:	482f      	ldr	r0, [pc, #188]	@ (8001ad4 <HAL_ADC_MspInit+0x2e0>)
 8001a16:	f004 fea7 	bl	8006768 <HAL_DMAEx_List_InsertNode>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 8001a20:	f7ff fec8 	bl	80017b4 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8001a24:	482b      	ldr	r0, [pc, #172]	@ (8001ad4 <HAL_ADC_MspInit+0x2e0>)
 8001a26:	f004 ff68 	bl	80068fa <HAL_DMAEx_List_SetCircularMode>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <HAL_ADC_MspInit+0x240>
    {
      Error_Handler();
 8001a30:	f7ff fec0 	bl	80017b4 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001a34:	4b28      	ldr	r3, [pc, #160]	@ (8001ad8 <HAL_ADC_MspInit+0x2e4>)
 8001a36:	4a29      	ldr	r2, [pc, #164]	@ (8001adc <HAL_ADC_MspInit+0x2e8>)
 8001a38:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001a3a:	4b27      	ldr	r3, [pc, #156]	@ (8001ad8 <HAL_ADC_MspInit+0x2e4>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001a40:	4b25      	ldr	r3, [pc, #148]	@ (8001ad8 <HAL_ADC_MspInit+0x2e4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001a46:	4b24      	ldr	r3, [pc, #144]	@ (8001ad8 <HAL_ADC_MspInit+0x2e4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001a4c:	4b22      	ldr	r3, [pc, #136]	@ (8001ad8 <HAL_ADC_MspInit+0x2e4>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001a52:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <HAL_ADC_MspInit+0x2e4>)
 8001a54:	2281      	movs	r2, #129	@ 0x81
 8001a56:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001a58:	481f      	ldr	r0, [pc, #124]	@ (8001ad8 <HAL_ADC_MspInit+0x2e4>)
 8001a5a:	f004 fc99 	bl	8006390 <HAL_DMAEx_List_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_ADC_MspInit+0x274>
    {
      Error_Handler();
 8001a64:	f7ff fea6 	bl	80017b4 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8001a68:	491a      	ldr	r1, [pc, #104]	@ (8001ad4 <HAL_ADC_MspInit+0x2e0>)
 8001a6a:	481b      	ldr	r0, [pc, #108]	@ (8001ad8 <HAL_ADC_MspInit+0x2e4>)
 8001a6c:	f004 ffa6 	bl	80069bc <HAL_DMAEx_List_LinkQ>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_ADC_MspInit+0x286>
    {
      Error_Handler();
 8001a76:	f7ff fe9d 	bl	80017b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8001a7a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a7e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a14      	ldr	r2, [pc, #80]	@ (8001ad8 <HAL_ADC_MspInit+0x2e4>)
 8001a86:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a88:	4a13      	ldr	r2, [pc, #76]	@ (8001ad8 <HAL_ADC_MspInit+0x2e4>)
 8001a8a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a8e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a96:	2110      	movs	r1, #16
 8001a98:	480f      	ldr	r0, [pc, #60]	@ (8001ad8 <HAL_ADC_MspInit+0x2e4>)
 8001a9a:	f004 f887 	bl	8005bac <HAL_DMA_ConfigChannelAttributes>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_ADC_MspInit+0x2b4>
    {
      Error_Handler();
 8001aa4:	f7ff fe86 	bl	80017b4 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	2025      	movs	r0, #37	@ 0x25
 8001aae:	f003 fc01 	bl	80052b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001ab2:	2025      	movs	r0, #37	@ 0x25
 8001ab4:	f003 fc18 	bl	80052e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001ab8:	e0c0      	b.n	8001c3c <HAL_ADC_MspInit+0x448>
 8001aba:	bf00      	nop
 8001abc:	42028000 	.word	0x42028000
 8001ac0:	46020c00 	.word	0x46020c00
 8001ac4:	42020800 	.word	0x42020800
 8001ac8:	42020000 	.word	0x42020000
 8001acc:	42020400 	.word	0x42020400
 8001ad0:	20000170 	.word	0x20000170
 8001ad4:	20000194 	.word	0x20000194
 8001ad8:	200001ac 	.word	0x200001ac
 8001adc:	40020050 	.word	0x40020050
  else if(hadc->Instance==ADC4)
 8001ae0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001ae4:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a56      	ldr	r2, [pc, #344]	@ (8001c48 <HAL_ADC_MspInit+0x454>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	f040 80a4 	bne.w	8001c3c <HAL_ADC_MspInit+0x448>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001af4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001af8:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001afc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001b08:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b0c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001b10:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b14:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b18:	f107 0320 	add.w	r3, r7, #32
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f009 f9c5 	bl	800aeac <HAL_RCCEx_PeriphCLKConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_ADC_MspInit+0x338>
      Error_Handler();
 8001b28:	f7ff fe44 	bl	80017b4 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8001b2c:	4b47      	ldr	r3, [pc, #284]	@ (8001c4c <HAL_ADC_MspInit+0x458>)
 8001b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b32:	4a46      	ldr	r2, [pc, #280]	@ (8001c4c <HAL_ADC_MspInit+0x458>)
 8001b34:	f043 0320 	orr.w	r3, r3, #32
 8001b38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001b3c:	4b43      	ldr	r3, [pc, #268]	@ (8001c4c <HAL_ADC_MspInit+0x458>)
 8001b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b42:	f003 0220 	and.w	r2, r3, #32
 8001b46:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b4a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b54:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b58:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b5a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c4c <HAL_ADC_MspInit+0x458>)
 8001b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b60:	4a3a      	ldr	r2, [pc, #232]	@ (8001c4c <HAL_ADC_MspInit+0x458>)
 8001b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b6a:	4b38      	ldr	r3, [pc, #224]	@ (8001c4c <HAL_ADC_MspInit+0x458>)
 8001b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b70:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001b74:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b78:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b82:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001b86:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = Channel_5_LR_Pin|Channel_6_LR_Pin;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b9a:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	482b      	ldr	r0, [pc, #172]	@ (8001c50 <HAL_ADC_MspInit+0x45c>)
 8001ba2:	f005 fca1 	bl	80074e8 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c54 <HAL_ADC_MspInit+0x460>)
 8001ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c58 <HAL_ADC_MspInit+0x464>)
 8001baa:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC4;
 8001bac:	4b29      	ldr	r3, [pc, #164]	@ (8001c54 <HAL_ADC_MspInit+0x460>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001bb2:	4b28      	ldr	r3, [pc, #160]	@ (8001c54 <HAL_ADC_MspInit+0x460>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bb8:	4b26      	ldr	r3, [pc, #152]	@ (8001c54 <HAL_ADC_MspInit+0x460>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001bbe:	4b25      	ldr	r3, [pc, #148]	@ (8001c54 <HAL_ADC_MspInit+0x460>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001bc4:	4b23      	ldr	r3, [pc, #140]	@ (8001c54 <HAL_ADC_MspInit+0x460>)
 8001bc6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001bca:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001bcc:	4b21      	ldr	r3, [pc, #132]	@ (8001c54 <HAL_ADC_MspInit+0x460>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001bd2:	4b20      	ldr	r3, [pc, #128]	@ (8001c54 <HAL_ADC_MspInit+0x460>)
 8001bd4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bd8:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001bda:	4b1e      	ldr	r3, [pc, #120]	@ (8001c54 <HAL_ADC_MspInit+0x460>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001be0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c54 <HAL_ADC_MspInit+0x460>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8001be6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <HAL_ADC_MspInit+0x460>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001bec:	4b19      	ldr	r3, [pc, #100]	@ (8001c54 <HAL_ADC_MspInit+0x460>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001bf2:	4b18      	ldr	r3, [pc, #96]	@ (8001c54 <HAL_ADC_MspInit+0x460>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8001bf8:	4b16      	ldr	r3, [pc, #88]	@ (8001c54 <HAL_ADC_MspInit+0x460>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001bfe:	4815      	ldr	r0, [pc, #84]	@ (8001c54 <HAL_ADC_MspInit+0x460>)
 8001c00:	f003 fc34 	bl	800546c <HAL_DMA_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_ADC_MspInit+0x41a>
      Error_Handler();
 8001c0a:	f7ff fdd3 	bl	80017b4 <Error_Handler>
    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 8001c0e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001c12:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0e      	ldr	r2, [pc, #56]	@ (8001c54 <HAL_ADC_MspInit+0x460>)
 8001c1a:	671a      	str	r2, [r3, #112]	@ 0x70
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c54 <HAL_ADC_MspInit+0x460>)
 8001c1e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001c22:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001c2a:	2110      	movs	r1, #16
 8001c2c:	4809      	ldr	r0, [pc, #36]	@ (8001c54 <HAL_ADC_MspInit+0x460>)
 8001c2e:	f003 ffbd 	bl	8005bac <HAL_DMA_ConfigChannelAttributes>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_ADC_MspInit+0x448>
      Error_Handler();
 8001c38:	f7ff fdbc 	bl	80017b4 <Error_Handler>
}
 8001c3c:	bf00      	nop
 8001c3e:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	46021000 	.word	0x46021000
 8001c4c:	46020c00 	.word	0x46020c00
 8001c50:	42021800 	.word	0x42021800
 8001c54:	20000224 	.word	0x20000224
 8001c58:	40020150 	.word	0x40020150

08001c5c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0b      	ldr	r2, [pc, #44]	@ (8001c98 <HAL_DMA2D_MspInit+0x3c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d10e      	bne.n	8001c8c <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c9c <HAL_DMA2D_MspInit+0x40>)
 8001c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c74:	4a09      	ldr	r2, [pc, #36]	@ (8001c9c <HAL_DMA2D_MspInit+0x40>)
 8001c76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c7a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001c7e:	4b07      	ldr	r3, [pc, #28]	@ (8001c9c <HAL_DMA2D_MspInit+0x40>)
 8001c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	4002b000 	.word	0x4002b000
 8001c9c:	46020c00 	.word	0x46020c00

08001ca0 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	@ 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(hxspi->Instance==HSPI1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a2a      	ldr	r2, [pc, #168]	@ (8001d68 <HAL_XSPI_MspInit+0xc8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d14d      	bne.n	8001d5e <HAL_XSPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN HSPI1_MspInit 0 */

  /* USER CODE END HSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 8001cc2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d6c <HAL_XSPI_MspInit+0xcc>)
 8001cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc8:	4a28      	ldr	r2, [pc, #160]	@ (8001d6c <HAL_XSPI_MspInit+0xcc>)
 8001cca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cd2:	4b26      	ldr	r3, [pc, #152]	@ (8001d6c <HAL_XSPI_MspInit+0xcc>)
 8001cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ce0:	4b22      	ldr	r3, [pc, #136]	@ (8001d6c <HAL_XSPI_MspInit+0xcc>)
 8001ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ce6:	4a21      	ldr	r2, [pc, #132]	@ (8001d6c <HAL_XSPI_MspInit+0xcc>)
 8001ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d6c <HAL_XSPI_MspInit+0xcc>)
 8001cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <HAL_XSPI_MspInit+0xcc>)
 8001d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d04:	4a19      	ldr	r2, [pc, #100]	@ (8001d6c <HAL_XSPI_MspInit+0xcc>)
 8001d06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d0e:	4b17      	ldr	r3, [pc, #92]	@ (8001d6c <HAL_XSPI_MspInit+0xcc>)
 8001d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> HSPI1_IO6
    PI1     ------> HSPI1_IO7
    PI2     ------> HSPI1_DQS0
    PI3     ------> HSPI1_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8001d1c:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8001d20:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001d2e:	2308      	movs	r3, #8
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	480d      	ldr	r0, [pc, #52]	@ (8001d70 <HAL_XSPI_MspInit+0xd0>)
 8001d3a:	f005 fbd5 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001d3e:	230f      	movs	r3, #15
 8001d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001d4e:	2308      	movs	r3, #8
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	4806      	ldr	r0, [pc, #24]	@ (8001d74 <HAL_XSPI_MspInit+0xd4>)
 8001d5a:	f005 fbc5 	bl	80074e8 <HAL_GPIO_Init>

  /* USER CODE END HSPI1_MspInit 1 */

  }

}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	@ 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	420d3400 	.word	0x420d3400
 8001d6c:	46020c00 	.word	0x46020c00
 8001d70:	42021c00 	.word	0x42021c00
 8001d74:	42022000 	.word	0x42022000

08001d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b0c4      	sub	sp, #272	@ 0x110
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001d82:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d86:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d98:	f107 0318 	add.w	r3, r7, #24
 8001d9c:	22e0      	movs	r2, #224	@ 0xe0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f00f fd88 	bl	80118b6 <memset>
  if(hi2c->Instance==I2C1)
 8001da6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001daa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a63      	ldr	r2, [pc, #396]	@ (8001f40 <HAL_I2C_MspInit+0x1c8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d14f      	bne.n	8001e58 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001db8:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dca:	f107 0318 	add.w	r3, r7, #24
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f009 f86c 	bl	800aeac <HAL_RCCEx_PeriphCLKConfig>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001dda:	f7ff fceb 	bl	80017b4 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dde:	4b59      	ldr	r3, [pc, #356]	@ (8001f44 <HAL_I2C_MspInit+0x1cc>)
 8001de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001de4:	4a57      	ldr	r2, [pc, #348]	@ (8001f44 <HAL_I2C_MspInit+0x1cc>)
 8001de6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001dee:	4b55      	ldr	r3, [pc, #340]	@ (8001f44 <HAL_I2C_MspInit+0x1cc>)
 8001df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001dfc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001e00:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e04:	2312      	movs	r3, #18
 8001e06:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e16:	2304      	movs	r3, #4
 8001e18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e1c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001e20:	4619      	mov	r1, r3
 8001e22:	4849      	ldr	r0, [pc, #292]	@ (8001f48 <HAL_I2C_MspInit+0x1d0>)
 8001e24:	f005 fb60 	bl	80074e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e28:	4b46      	ldr	r3, [pc, #280]	@ (8001f44 <HAL_I2C_MspInit+0x1cc>)
 8001e2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e2e:	4a45      	ldr	r2, [pc, #276]	@ (8001f44 <HAL_I2C_MspInit+0x1cc>)
 8001e30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e34:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001e38:	4b42      	ldr	r3, [pc, #264]	@ (8001f44 <HAL_I2C_MspInit+0x1cc>)
 8001e3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e3e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001e42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e46:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e50:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e54:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e56:	e06e      	b.n	8001f36 <HAL_I2C_MspInit+0x1be>
  else if(hi2c->Instance==I2C2)
 8001e58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e5c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a39      	ldr	r2, [pc, #228]	@ (8001f4c <HAL_I2C_MspInit+0x1d4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d165      	bne.n	8001f36 <HAL_I2C_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e6a:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e7c:	f107 0318 	add.w	r3, r7, #24
 8001e80:	4618      	mov	r0, r3
 8001e82:	f009 f813 	bl	800aeac <HAL_RCCEx_PeriphCLKConfig>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8001e8c:	f7ff fc92 	bl	80017b4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e90:	4b2c      	ldr	r3, [pc, #176]	@ (8001f44 <HAL_I2C_MspInit+0x1cc>)
 8001e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e96:	4a2b      	ldr	r2, [pc, #172]	@ (8001f44 <HAL_I2C_MspInit+0x1cc>)
 8001e98:	f043 0320 	orr.w	r3, r3, #32
 8001e9c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ea0:	4b28      	ldr	r3, [pc, #160]	@ (8001f44 <HAL_I2C_MspInit+0x1cc>)
 8001ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ea6:	f003 0220 	and.w	r2, r3, #32
 8001eaa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001eae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001eb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ebc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec4:	2312      	movs	r3, #18
 8001ec6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001edc:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	481b      	ldr	r0, [pc, #108]	@ (8001f50 <HAL_I2C_MspInit+0x1d8>)
 8001ee4:	f005 fb00 	bl	80074e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ee8:	4b16      	ldr	r3, [pc, #88]	@ (8001f44 <HAL_I2C_MspInit+0x1cc>)
 8001eea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001eee:	4a15      	ldr	r2, [pc, #84]	@ (8001f44 <HAL_I2C_MspInit+0x1cc>)
 8001ef0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ef4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001ef8:	4b12      	ldr	r3, [pc, #72]	@ (8001f44 <HAL_I2C_MspInit+0x1cc>)
 8001efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001efe:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f14:	681b      	ldr	r3, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	2039      	movs	r0, #57	@ 0x39
 8001f1c:	f003 f9ca 	bl	80052b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001f20:	2039      	movs	r0, #57	@ 0x39
 8001f22:	f003 f9e1 	bl	80052e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2100      	movs	r1, #0
 8001f2a:	203a      	movs	r0, #58	@ 0x3a
 8001f2c:	f003 f9c2 	bl	80052b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001f30:	203a      	movs	r0, #58	@ 0x3a
 8001f32:	f003 f9d9 	bl	80052e8 <HAL_NVIC_EnableIRQ>
}
 8001f36:	bf00      	nop
 8001f38:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40005400 	.word	0x40005400
 8001f44:	46020c00 	.word	0x46020c00
 8001f48:	42021800 	.word	0x42021800
 8001f4c:	40005800 	.word	0x40005800
 8001f50:	42021400 	.word	0x42021400

08001f54 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b0c6      	sub	sp, #280	@ 0x118
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f5e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f62:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f74:	f107 0320 	add.w	r3, r7, #32
 8001f78:	22e0      	movs	r2, #224	@ 0xe0
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f00f fc9a 	bl	80118b6 <memset>
  if(hltdc->Instance==LTDC)
 8001f82:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f86:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a92      	ldr	r2, [pc, #584]	@ (80021d8 <HAL_LTDC_MspInit+0x284>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	f040 811b 	bne.w	80021cc <HAL_LTDC_MspInit+0x278>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	f04f 0302 	mov.w	r3, #2
 8001f9e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3M = 4;
 8001fac:	2304      	movs	r3, #4
 8001fae:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3N = 50;
 8001fb0:	2332      	movs	r3, #50	@ 0x32
 8001fb2:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3P = 2;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3Q = 2;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLL3.PLL3R = 8;
 8001fbc:	2308      	movs	r3, #8
 8001fbe:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVR;
 8001fc8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001fcc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fce:	f107 0320 	add.w	r3, r7, #32
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f008 ff6a 	bl	800aeac <HAL_RCCEx_PeriphCLKConfig>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_LTDC_MspInit+0x8e>
    {
      Error_Handler();
 8001fde:	f7ff fbe9 	bl	80017b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001fe2:	4b7e      	ldr	r3, [pc, #504]	@ (80021dc <HAL_LTDC_MspInit+0x288>)
 8001fe4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001fe8:	4a7c      	ldr	r2, [pc, #496]	@ (80021dc <HAL_LTDC_MspInit+0x288>)
 8001fea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001fee:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001ff2:	4b7a      	ldr	r3, [pc, #488]	@ (80021dc <HAL_LTDC_MspInit+0x288>)
 8001ff4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ff8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002000:	4b76      	ldr	r3, [pc, #472]	@ (80021dc <HAL_LTDC_MspInit+0x288>)
 8002002:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002006:	4a75      	ldr	r2, [pc, #468]	@ (80021dc <HAL_LTDC_MspInit+0x288>)
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002010:	4b72      	ldr	r3, [pc, #456]	@ (80021dc <HAL_LTDC_MspInit+0x288>)
 8002012:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002016:	f003 0202 	and.w	r2, r3, #2
 800201a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800201e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002028:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800202c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800202e:	4b6b      	ldr	r3, [pc, #428]	@ (80021dc <HAL_LTDC_MspInit+0x288>)
 8002030:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002034:	4a69      	ldr	r2, [pc, #420]	@ (80021dc <HAL_LTDC_MspInit+0x288>)
 8002036:	f043 0310 	orr.w	r3, r3, #16
 800203a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800203e:	4b67      	ldr	r3, [pc, #412]	@ (80021dc <HAL_LTDC_MspInit+0x288>)
 8002040:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002044:	f003 0210 	and.w	r2, r3, #16
 8002048:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800204c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002056:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800205a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800205c:	4b5f      	ldr	r3, [pc, #380]	@ (80021dc <HAL_LTDC_MspInit+0x288>)
 800205e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002062:	4a5e      	ldr	r2, [pc, #376]	@ (80021dc <HAL_LTDC_MspInit+0x288>)
 8002064:	f043 0308 	orr.w	r3, r3, #8
 8002068:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800206c:	4b5b      	ldr	r3, [pc, #364]	@ (80021dc <HAL_LTDC_MspInit+0x288>)
 800206e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002072:	f003 0208 	and.w	r2, r3, #8
 8002076:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800207a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002088:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800208a:	4b54      	ldr	r3, [pc, #336]	@ (80021dc <HAL_LTDC_MspInit+0x288>)
 800208c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002090:	4a52      	ldr	r2, [pc, #328]	@ (80021dc <HAL_LTDC_MspInit+0x288>)
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800209a:	4b50      	ldr	r3, [pc, #320]	@ (80021dc <HAL_LTDC_MspInit+0x288>)
 800209c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020a0:	f003 0204 	and.w	r2, r3, #4
 80020a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020b6:	681b      	ldr	r3, [r3, #0]
    PD3     ------> LTDC_CLK
    PD6     ------> LTDC_DE
    PB9     ------> LTDC_B0
    PE0     ------> LTDC_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020b8:	2304      	movs	r3, #4
 80020ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80020d0:	2308      	movs	r3, #8
 80020d2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d6:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80020da:	4619      	mov	r1, r3
 80020dc:	4840      	ldr	r0, [pc, #256]	@ (80021e0 <HAL_LTDC_MspInit+0x28c>)
 80020de:	f005 fa03 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80020e2:	f64f 7381 	movw	r3, #65409	@ 0xff81
 80020e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80020fc:	2308      	movs	r3, #8
 80020fe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002102:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002106:	4619      	mov	r1, r3
 8002108:	4836      	ldr	r0, [pc, #216]	@ (80021e4 <HAL_LTDC_MspInit+0x290>)
 800210a:	f005 f9ed 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800210e:	f64f 734b 	movw	r3, #65355	@ 0xff4b
 8002112:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002128:	2308      	movs	r3, #8
 800212a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800212e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002132:	4619      	mov	r1, r3
 8002134:	482c      	ldr	r0, [pc, #176]	@ (80021e8 <HAL_LTDC_MspInit+0x294>)
 8002136:	f005 f9d7 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800213a:	23c0      	movs	r3, #192	@ 0xc0
 800213c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 8002152:	2307      	movs	r3, #7
 8002154:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002158:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800215c:	4619      	mov	r1, r3
 800215e:	4823      	ldr	r0, [pc, #140]	@ (80021ec <HAL_LTDC_MspInit+0x298>)
 8002160:	f005 f9c2 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002164:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002168:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 800217e:	2308      	movs	r3, #8
 8002180:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002184:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002188:	4619      	mov	r1, r3
 800218a:	4818      	ldr	r0, [pc, #96]	@ (80021ec <HAL_LTDC_MspInit+0x298>)
 800218c:	f005 f9ac 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002190:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002194:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_LTDC;
 80021aa:	2307      	movs	r3, #7
 80021ac:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80021b4:	4619      	mov	r1, r3
 80021b6:	480a      	ldr	r0, [pc, #40]	@ (80021e0 <HAL_LTDC_MspInit+0x28c>)
 80021b8:	f005 f996 	bl	80074e8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80021bc:	2200      	movs	r2, #0
 80021be:	2100      	movs	r1, #0
 80021c0:	2087      	movs	r0, #135	@ 0x87
 80021c2:	f003 f877 	bl	80052b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80021c6:	2087      	movs	r0, #135	@ 0x87
 80021c8:	f003 f88e 	bl	80052e8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80021cc:	bf00      	nop
 80021ce:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40016800 	.word	0x40016800
 80021dc:	46020c00 	.word	0x46020c00
 80021e0:	42020400 	.word	0x42020400
 80021e4:	42021000 	.word	0x42021000
 80021e8:	42020c00 	.word	0x42020c00
 80021ec:	42020800 	.word	0x42020800

080021f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b0bc      	sub	sp, #240	@ 0xf0
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021f8:	f107 0310 	add.w	r3, r7, #16
 80021fc:	22e0      	movs	r2, #224	@ 0xe0
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f00f fb58 	bl	80118b6 <memset>
  if(hrtc->Instance==RTC)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a1d      	ldr	r2, [pc, #116]	@ (8002280 <HAL_RTC_MspInit+0x90>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d132      	bne.n	8002276 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002210:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800221c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002220:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002224:	f107 0310 	add.w	r3, r7, #16
 8002228:	4618      	mov	r0, r3
 800222a:	f008 fe3f 	bl	800aeac <HAL_RCCEx_PeriphCLKConfig>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002234:	f7ff fabe 	bl	80017b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002238:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <HAL_RTC_MspInit+0x94>)
 800223a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800223e:	4a11      	ldr	r2, [pc, #68]	@ (8002284 <HAL_RTC_MspInit+0x94>)
 8002240:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002244:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002248:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <HAL_RTC_MspInit+0x94>)
 800224a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800224e:	4a0d      	ldr	r2, [pc, #52]	@ (8002284 <HAL_RTC_MspInit+0x94>)
 8002250:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002254:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002258:	4b0a      	ldr	r3, [pc, #40]	@ (8002284 <HAL_RTC_MspInit+0x94>)
 800225a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800225e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8002266:	4b07      	ldr	r3, [pc, #28]	@ (8002284 <HAL_RTC_MspInit+0x94>)
 8002268:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800226c:	4a05      	ldr	r2, [pc, #20]	@ (8002284 <HAL_RTC_MspInit+0x94>)
 800226e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002272:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002276:	bf00      	nop
 8002278:	37f0      	adds	r7, #240	@ 0xf0
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	46007800 	.word	0x46007800
 8002284:	46020c00 	.word	0x46020c00

08002288 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0b      	ldr	r2, [pc, #44]	@ (80022c4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d10e      	bne.n	80022b8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800229a:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <HAL_TIM_PWM_MspInit+0x40>)
 800229c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022a0:	4a09      	ldr	r2, [pc, #36]	@ (80022c8 <HAL_TIM_PWM_MspInit+0x40>)
 80022a2:	f043 0302 	orr.w	r3, r3, #2
 80022a6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80022aa:	4b07      	ldr	r3, [pc, #28]	@ (80022c8 <HAL_TIM_PWM_MspInit+0x40>)
 80022ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	40000400 	.word	0x40000400
 80022c8:	46020c00 	.word	0x46020c00

080022cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002308 <HAL_TIM_Base_MspInit+0x3c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d10e      	bne.n	80022fc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80022de:	4b0b      	ldr	r3, [pc, #44]	@ (800230c <HAL_TIM_Base_MspInit+0x40>)
 80022e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80022e4:	4a09      	ldr	r2, [pc, #36]	@ (800230c <HAL_TIM_Base_MspInit+0x40>)
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ea:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80022ee:	4b07      	ldr	r3, [pc, #28]	@ (800230c <HAL_TIM_Base_MspInit+0x40>)
 80022f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80022f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	40014000 	.word	0x40014000
 800230c:	46020c00 	.word	0x46020c00

08002310 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 030c 	add.w	r3, r7, #12
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a12      	ldr	r2, [pc, #72]	@ (8002378 <HAL_TIM_MspPostInit+0x68>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d11e      	bne.n	8002370 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002332:	4b12      	ldr	r3, [pc, #72]	@ (800237c <HAL_TIM_MspPostInit+0x6c>)
 8002334:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002338:	4a10      	ldr	r2, [pc, #64]	@ (800237c <HAL_TIM_MspPostInit+0x6c>)
 800233a:	f043 0310 	orr.w	r3, r3, #16
 800233e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002342:	4b0e      	ldr	r3, [pc, #56]	@ (800237c <HAL_TIM_MspPostInit+0x6c>)
 8002344:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE6     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = BL_CTRL_Pin;
 8002350:	2340      	movs	r3, #64	@ 0x40
 8002352:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002360:	2302      	movs	r3, #2
 8002362:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002364:	f107 030c 	add.w	r3, r7, #12
 8002368:	4619      	mov	r1, r3
 800236a:	4805      	ldr	r0, [pc, #20]	@ (8002380 <HAL_TIM_MspPostInit+0x70>)
 800236c:	f005 f8bc 	bl	80074e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002370:	bf00      	nop
 8002372:	3720      	adds	r7, #32
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40000400 	.word	0x40000400
 800237c:	46020c00 	.word	0x46020c00
 8002380:	42021000 	.word	0x42021000

08002384 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b0c2      	sub	sp, #264	@ 0x108
 8002388:	af00      	add	r7, sp, #0
 800238a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800238e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002392:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023a4:	f107 0310 	add.w	r3, r7, #16
 80023a8:	22e0      	movs	r2, #224	@ 0xe0
 80023aa:	2100      	movs	r1, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f00f fa82 	bl	80118b6 <memset>
  if(huart->Instance==USART1)
 80023b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80023b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a2f      	ldr	r2, [pc, #188]	@ (800247c <HAL_UART_MspInit+0xf8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d155      	bne.n	8002470 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023c4:	f04f 0201 	mov.w	r2, #1
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023d0:	2300      	movs	r3, #0
 80023d2:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023d4:	f107 0310 	add.w	r3, r7, #16
 80023d8:	4618      	mov	r0, r3
 80023da:	f008 fd67 	bl	800aeac <HAL_RCCEx_PeriphCLKConfig>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 80023e4:	f7ff f9e6 	bl	80017b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023e8:	4b25      	ldr	r3, [pc, #148]	@ (8002480 <HAL_UART_MspInit+0xfc>)
 80023ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80023ee:	4a24      	ldr	r2, [pc, #144]	@ (8002480 <HAL_UART_MspInit+0xfc>)
 80023f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023f4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80023f8:	4b21      	ldr	r3, [pc, #132]	@ (8002480 <HAL_UART_MspInit+0xfc>)
 80023fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80023fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002406:	4b1e      	ldr	r3, [pc, #120]	@ (8002480 <HAL_UART_MspInit+0xfc>)
 8002408:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800240c:	4a1c      	ldr	r2, [pc, #112]	@ (8002480 <HAL_UART_MspInit+0xfc>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002416:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <HAL_UART_MspInit+0xfc>)
 8002418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800241c:	f003 0201 	and.w	r2, r3, #1
 8002420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002424:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800242e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002432:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002434:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002438:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243c:	2302      	movs	r3, #2
 800243e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800244e:	2307      	movs	r3, #7
 8002450:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002454:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002458:	4619      	mov	r1, r3
 800245a:	480a      	ldr	r0, [pc, #40]	@ (8002484 <HAL_UART_MspInit+0x100>)
 800245c:	f005 f844 	bl	80074e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002460:	2200      	movs	r2, #0
 8002462:	2100      	movs	r1, #0
 8002464:	203d      	movs	r0, #61	@ 0x3d
 8002466:	f002 ff25 	bl	80052b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800246a:	203d      	movs	r0, #61	@ 0x3d
 800246c:	f002 ff3c 	bl	80052e8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002470:	bf00      	nop
 8002472:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40013800 	.word	0x40013800
 8002480:	46020c00 	.word	0x46020c00
 8002484:	42020000 	.word	0x42020000

08002488 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b0be      	sub	sp, #248	@ 0xf8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002490:	f107 0318 	add.w	r3, r7, #24
 8002494:	22e0      	movs	r2, #224	@ 0xe0
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f00f fa0c 	bl	80118b6 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a3a      	ldr	r2, [pc, #232]	@ (800258c <HAL_PCD_MspInit+0x104>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d16d      	bne.n	8002584 <HAL_PCD_MspInit+0xfc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a8:	4b39      	ldr	r3, [pc, #228]	@ (8002590 <HAL_PCD_MspInit+0x108>)
 80024aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80024ae:	4a38      	ldr	r2, [pc, #224]	@ (8002590 <HAL_PCD_MspInit+0x108>)
 80024b0:	f043 0302 	orr.w	r3, r3, #2
 80024b4:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80024b8:	4b35      	ldr	r3, [pc, #212]	@ (8002590 <HAL_PCD_MspInit+0x108>)
 80024ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0308 	mov.w	r3, #8
 80024ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 80024d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80024d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024da:	f107 0318 	add.w	r3, r7, #24
 80024de:	4618      	mov	r0, r3
 80024e0:	f008 fce4 	bl	800aeac <HAL_RCCEx_PeriphCLKConfig>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 80024ea:	f7ff f963 	bl	80017b4 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 80024ee:	200c      	movs	r0, #12
 80024f0:	f000 fc1c 	bl	8002d2c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80024f4:	4b26      	ldr	r3, [pc, #152]	@ (8002590 <HAL_PCD_MspInit+0x108>)
 80024f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024fa:	4a25      	ldr	r2, [pc, #148]	@ (8002590 <HAL_PCD_MspInit+0x108>)
 80024fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002500:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002504:	4b22      	ldr	r3, [pc, #136]	@ (8002590 <HAL_PCD_MspInit+0x108>)
 8002506:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800250a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8002512:	4b1f      	ldr	r3, [pc, #124]	@ (8002590 <HAL_PCD_MspInit+0x108>)
 8002514:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002518:	4a1d      	ldr	r2, [pc, #116]	@ (8002590 <HAL_PCD_MspInit+0x108>)
 800251a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800251e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002522:	4b1b      	ldr	r3, [pc, #108]	@ (8002590 <HAL_PCD_MspInit+0x108>)
 8002524:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002528:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002530:	4b17      	ldr	r3, [pc, #92]	@ (8002590 <HAL_PCD_MspInit+0x108>)
 8002532:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	d11b      	bne.n	8002576 <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253e:	4b14      	ldr	r3, [pc, #80]	@ (8002590 <HAL_PCD_MspInit+0x108>)
 8002540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002544:	4a12      	ldr	r2, [pc, #72]	@ (8002590 <HAL_PCD_MspInit+0x108>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800254e:	4b10      	ldr	r3, [pc, #64]	@ (8002590 <HAL_PCD_MspInit+0x108>)
 8002550:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800255c:	f007 f9ac 	bl	80098b8 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8002560:	f007 f9da 	bl	8009918 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002564:	4b0a      	ldr	r3, [pc, #40]	@ (8002590 <HAL_PCD_MspInit+0x108>)
 8002566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800256a:	4a09      	ldr	r2, [pc, #36]	@ (8002590 <HAL_PCD_MspInit+0x108>)
 800256c:	f023 0304 	bic.w	r3, r3, #4
 8002570:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002574:	e003      	b.n	800257e <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8002576:	f007 f99f 	bl	80098b8 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 800257a:	f007 f9cd 	bl	8009918 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 800257e:	2001      	movs	r0, #1
 8002580:	f000 fbc0 	bl	8002d04 <HAL_SYSCFG_EnableOTGPHY>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8002584:	bf00      	nop
 8002586:	37f8      	adds	r7, #248	@ 0xf8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	42040000 	.word	0x42040000
 8002590:	46020c00 	.word	0x46020c00

08002594 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef handle_GPDMA1_Channel1;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b0a4      	sub	sp, #144	@ 0x90
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4abb      	ldr	r2, [pc, #748]	@ (8002890 <HAL_SAI_MspInit+0x2fc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	f040 80ca 	bne.w	800273c <HAL_SAI_MspInit+0x1a8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80025a8:	4bba      	ldr	r3, [pc, #744]	@ (8002894 <HAL_SAI_MspInit+0x300>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10e      	bne.n	80025ce <HAL_SAI_MspInit+0x3a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80025b0:	4bb9      	ldr	r3, [pc, #740]	@ (8002898 <HAL_SAI_MspInit+0x304>)
 80025b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025b6:	4ab8      	ldr	r2, [pc, #736]	@ (8002898 <HAL_SAI_MspInit+0x304>)
 80025b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025bc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80025c0:	4bb5      	ldr	r3, [pc, #724]	@ (8002898 <HAL_SAI_MspInit+0x304>)
 80025c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 80025ce:	4bb1      	ldr	r3, [pc, #708]	@ (8002894 <HAL_SAI_MspInit+0x300>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	3301      	adds	r3, #1
 80025d4:	4aaf      	ldr	r2, [pc, #700]	@ (8002894 <HAL_SAI_MspInit+0x300>)
 80025d6:	6013      	str	r3, [r2, #0]
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    PG10     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80025d8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80025dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80025f0:	230d      	movs	r3, #13
 80025f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80025fa:	4619      	mov	r1, r3
 80025fc:	48a7      	ldr	r0, [pc, #668]	@ (800289c <HAL_SAI_MspInit+0x308>)
 80025fe:	f004 ff73 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002602:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002606:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002614:	2303      	movs	r3, #3
 8002616:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800261a:	230d      	movs	r3, #13
 800261c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002620:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002624:	4619      	mov	r1, r3
 8002626:	489d      	ldr	r0, [pc, #628]	@ (800289c <HAL_SAI_MspInit+0x308>)
 8002628:	f004 ff5e 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800262c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002630:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263e:	2300      	movs	r3, #0
 8002640:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002644:	230d      	movs	r3, #13
 8002646:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800264a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800264e:	4619      	mov	r1, r3
 8002650:	4893      	ldr	r0, [pc, #588]	@ (80028a0 <HAL_SAI_MspInit+0x30c>)
 8002652:	f004 ff49 	bl	80074e8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002656:	2321      	movs	r3, #33	@ 0x21
 8002658:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_A;
 800265a:	2326      	movs	r3, #38	@ 0x26
 800265c:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002662:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002666:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 8002668:	2308      	movs	r3, #8
 800266a:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 800266c:	2300      	movs	r3, #0
 800266e:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002670:	2302      	movs	r3, #2
 8002672:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002674:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002678:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 800267a:	2301      	movs	r3, #1
 800267c:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 800267e:	2301      	movs	r3, #1
 8002680:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002682:	2300      	movs	r3, #0
 8002684:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002686:	2300      	movs	r3, #0
 8002688:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 800268a:	2300      	movs	r3, #0
 800268c:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800268e:	2300      	movs	r3, #0
 8002690:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002692:	2300      	movs	r3, #0
 8002694:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002696:	2300      	movs	r3, #0
 8002698:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel3) != HAL_OK)
 800269a:	f107 0310 	add.w	r3, r7, #16
 800269e:	4981      	ldr	r1, [pc, #516]	@ (80028a4 <HAL_SAI_MspInit+0x310>)
 80026a0:	4618      	mov	r0, r3
 80026a2:	f004 f835 	bl	8006710 <HAL_DMAEx_List_BuildNode>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_SAI_MspInit+0x11c>
    {
      Error_Handler();
 80026ac:	f7ff f882 	bl	80017b4 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel3, NULL, &Node_GPDMA1_Channel3) != HAL_OK)
 80026b0:	4a7c      	ldr	r2, [pc, #496]	@ (80028a4 <HAL_SAI_MspInit+0x310>)
 80026b2:	2100      	movs	r1, #0
 80026b4:	487c      	ldr	r0, [pc, #496]	@ (80028a8 <HAL_SAI_MspInit+0x314>)
 80026b6:	f004 f857 	bl	8006768 <HAL_DMAEx_List_InsertNode>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_SAI_MspInit+0x130>
    {
      Error_Handler();
 80026c0:	f7ff f878 	bl	80017b4 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel3) != HAL_OK)
 80026c4:	4878      	ldr	r0, [pc, #480]	@ (80028a8 <HAL_SAI_MspInit+0x314>)
 80026c6:	f004 f918 	bl	80068fa <HAL_DMAEx_List_SetCircularMode>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_SAI_MspInit+0x140>
    {
      Error_Handler();
 80026d0:	f7ff f870 	bl	80017b4 <Error_Handler>
    }

    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 80026d4:	4b75      	ldr	r3, [pc, #468]	@ (80028ac <HAL_SAI_MspInit+0x318>)
 80026d6:	4a76      	ldr	r2, [pc, #472]	@ (80028b0 <HAL_SAI_MspInit+0x31c>)
 80026d8:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80026da:	4b74      	ldr	r3, [pc, #464]	@ (80028ac <HAL_SAI_MspInit+0x318>)
 80026dc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026e0:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel3.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80026e2:	4b72      	ldr	r3, [pc, #456]	@ (80028ac <HAL_SAI_MspInit+0x318>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel3.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80026e8:	4b70      	ldr	r3, [pc, #448]	@ (80028ac <HAL_SAI_MspInit+0x318>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel3.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80026ee:	4b6f      	ldr	r3, [pc, #444]	@ (80028ac <HAL_SAI_MspInit+0x318>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel3.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80026f4:	4b6d      	ldr	r3, [pc, #436]	@ (80028ac <HAL_SAI_MspInit+0x318>)
 80026f6:	2281      	movs	r2, #129	@ 0x81
 80026f8:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 80026fa:	486c      	ldr	r0, [pc, #432]	@ (80028ac <HAL_SAI_MspInit+0x318>)
 80026fc:	f003 fe48 	bl	8006390 <HAL_DMAEx_List_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_SAI_MspInit+0x176>
    {
      Error_Handler();
 8002706:	f7ff f855 	bl	80017b4 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel3, &List_GPDMA1_Channel3) != HAL_OK)
 800270a:	4967      	ldr	r1, [pc, #412]	@ (80028a8 <HAL_SAI_MspInit+0x314>)
 800270c:	4867      	ldr	r0, [pc, #412]	@ (80028ac <HAL_SAI_MspInit+0x318>)
 800270e:	f004 f955 	bl	80069bc <HAL_DMAEx_List_LinkQ>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_SAI_MspInit+0x188>
    {
      Error_Handler();
 8002718:	f7ff f84c 	bl	80017b4 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmatx, handle_GPDMA1_Channel3);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a63      	ldr	r2, [pc, #396]	@ (80028ac <HAL_SAI_MspInit+0x318>)
 8002720:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002724:	4a61      	ldr	r2, [pc, #388]	@ (80028ac <HAL_SAI_MspInit+0x318>)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 800272a:	2110      	movs	r1, #16
 800272c:	485f      	ldr	r0, [pc, #380]	@ (80028ac <HAL_SAI_MspInit+0x318>)
 800272e:	f003 fa3d 	bl	8005bac <HAL_DMA_ConfigChannelAttributes>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_SAI_MspInit+0x1a8>
    {
      Error_Handler();
 8002738:	f7ff f83c 	bl	80017b4 <Error_Handler>
    }

    }
    if(hsai->Instance==SAI2_Block_B)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a5c      	ldr	r2, [pc, #368]	@ (80028b4 <HAL_SAI_MspInit+0x320>)
 8002742:	4293      	cmp	r3, r2
 8002744:	f040 80eb 	bne.w	800291e <HAL_SAI_MspInit+0x38a>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002748:	4b52      	ldr	r3, [pc, #328]	@ (8002894 <HAL_SAI_MspInit+0x300>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10e      	bne.n	800276e <HAL_SAI_MspInit+0x1da>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002750:	4b51      	ldr	r3, [pc, #324]	@ (8002898 <HAL_SAI_MspInit+0x304>)
 8002752:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002756:	4a50      	ldr	r2, [pc, #320]	@ (8002898 <HAL_SAI_MspInit+0x304>)
 8002758:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800275c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002760:	4b4d      	ldr	r3, [pc, #308]	@ (8002898 <HAL_SAI_MspInit+0x304>)
 8002762:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 800276e:	4b49      	ldr	r3, [pc, #292]	@ (8002894 <HAL_SAI_MspInit+0x300>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	3301      	adds	r3, #1
 8002774:	4a47      	ldr	r2, [pc, #284]	@ (8002894 <HAL_SAI_MspInit+0x300>)
 8002776:	6013      	str	r3, [r2, #0]
    PA15 (JTDI)     ------> SAI2_FS_B
    PC10     ------> SAI2_SCK_B
    PC11     ------> SAI2_MCLK_B
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002778:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800277c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278a:	2303      	movs	r3, #3
 800278c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002790:	230d      	movs	r3, #13
 8002792:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800279a:	4619      	mov	r1, r3
 800279c:	4846      	ldr	r0, [pc, #280]	@ (80028b8 <HAL_SAI_MspInit+0x324>)
 800279e:	f004 fea3 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
 80027aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b4:	2303      	movs	r3, #3
 80027b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80027ba:	230d      	movs	r3, #13
 80027bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80027c4:	4619      	mov	r1, r3
 80027c6:	483d      	ldr	r0, [pc, #244]	@ (80028bc <HAL_SAI_MspInit+0x328>)
 80027c8:	f004 fe8e 	bl	80074e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80027cc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80027d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d2:	2302      	movs	r3, #2
 80027d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027de:	2300      	movs	r3, #0
 80027e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80027e4:	230d      	movs	r3, #13
 80027e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ea:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80027ee:	4619      	mov	r1, r3
 80027f0:	4832      	ldr	r0, [pc, #200]	@ (80028bc <HAL_SAI_MspInit+0x328>)
 80027f2:	f004 fe79 	bl	80074e8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80027f6:	2321      	movs	r3, #33	@ 0x21
 80027f8:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI2_B;
 80027fa:	2327      	movs	r3, #39	@ 0x27
 80027fc:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80027fe:	2300      	movs	r3, #0
 8002800:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 800280a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002810:	2302      	movs	r3, #2
 8002812:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002814:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002818:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 800281a:	2301      	movs	r3, #1
 800281c:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 800281e:	2301      	movs	r3, #1
 8002820:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002822:	2300      	movs	r3, #0
 8002824:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002826:	2300      	movs	r3, #0
 8002828:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 800282a:	2300      	movs	r3, #0
 800282c:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800282e:	2300      	movs	r3, #0
 8002830:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002832:	2300      	movs	r3, #0
 8002834:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002836:	2300      	movs	r3, #0
 8002838:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 800283a:	f107 0310 	add.w	r3, r7, #16
 800283e:	4920      	ldr	r1, [pc, #128]	@ (80028c0 <HAL_SAI_MspInit+0x32c>)
 8002840:	4618      	mov	r0, r3
 8002842:	f003 ff65 	bl	8006710 <HAL_DMAEx_List_BuildNode>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_SAI_MspInit+0x2bc>
    {
      Error_Handler();
 800284c:	f7fe ffb2 	bl	80017b4 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8002850:	4a1b      	ldr	r2, [pc, #108]	@ (80028c0 <HAL_SAI_MspInit+0x32c>)
 8002852:	2100      	movs	r1, #0
 8002854:	481b      	ldr	r0, [pc, #108]	@ (80028c4 <HAL_SAI_MspInit+0x330>)
 8002856:	f003 ff87 	bl	8006768 <HAL_DMAEx_List_InsertNode>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_SAI_MspInit+0x2d0>
    {
      Error_Handler();
 8002860:	f7fe ffa8 	bl	80017b4 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8002864:	4817      	ldr	r0, [pc, #92]	@ (80028c4 <HAL_SAI_MspInit+0x330>)
 8002866:	f004 f848 	bl	80068fa <HAL_DMAEx_List_SetCircularMode>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_SAI_MspInit+0x2e0>
    {
      Error_Handler();
 8002870:	f7fe ffa0 	bl	80017b4 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8002874:	4b14      	ldr	r3, [pc, #80]	@ (80028c8 <HAL_SAI_MspInit+0x334>)
 8002876:	4a15      	ldr	r2, [pc, #84]	@ (80028cc <HAL_SAI_MspInit+0x338>)
 8002878:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 800287a:	4b13      	ldr	r3, [pc, #76]	@ (80028c8 <HAL_SAI_MspInit+0x334>)
 800287c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002880:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002882:	4b11      	ldr	r3, [pc, #68]	@ (80028c8 <HAL_SAI_MspInit+0x334>)
 8002884:	2200      	movs	r2, #0
 8002886:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002888:	4b0f      	ldr	r3, [pc, #60]	@ (80028c8 <HAL_SAI_MspInit+0x334>)
 800288a:	2200      	movs	r2, #0
 800288c:	641a      	str	r2, [r3, #64]	@ 0x40
 800288e:	e01f      	b.n	80028d0 <HAL_SAI_MspInit+0x33c>
 8002890:	40015804 	.word	0x40015804
 8002894:	20000ef4 	.word	0x20000ef4
 8002898:	46020c00 	.word	0x46020c00
 800289c:	42020400 	.word	0x42020400
 80028a0:	42021800 	.word	0x42021800
 80028a4:	20000614 	.word	0x20000614
 80028a8:	20000638 	.word	0x20000638
 80028ac:	20000650 	.word	0x20000650
 80028b0:	400201d0 	.word	0x400201d0
 80028b4:	40015824 	.word	0x40015824
 80028b8:	42020000 	.word	0x42020000
 80028bc:	42020800 	.word	0x42020800
 80028c0:	200006c8 	.word	0x200006c8
 80028c4:	200006ec 	.word	0x200006ec
 80028c8:	20000704 	.word	0x20000704
 80028cc:	400200d0 	.word	0x400200d0
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80028d0:	4b15      	ldr	r3, [pc, #84]	@ (8002928 <HAL_SAI_MspInit+0x394>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80028d6:	4b14      	ldr	r3, [pc, #80]	@ (8002928 <HAL_SAI_MspInit+0x394>)
 80028d8:	2281      	movs	r2, #129	@ 0x81
 80028da:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80028dc:	4812      	ldr	r0, [pc, #72]	@ (8002928 <HAL_SAI_MspInit+0x394>)
 80028de:	f003 fd57 	bl	8006390 <HAL_DMAEx_List_Init>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_SAI_MspInit+0x358>
    {
      Error_Handler();
 80028e8:	f7fe ff64 	bl	80017b4 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 80028ec:	490f      	ldr	r1, [pc, #60]	@ (800292c <HAL_SAI_MspInit+0x398>)
 80028ee:	480e      	ldr	r0, [pc, #56]	@ (8002928 <HAL_SAI_MspInit+0x394>)
 80028f0:	f004 f864 	bl	80069bc <HAL_DMAEx_List_LinkQ>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_SAI_MspInit+0x36a>
    {
      Error_Handler();
 80028fa:	f7fe ff5b 	bl	80017b4 <Error_Handler>
    }

    __HAL_LINKDMA(hsai, hdmarx, handle_GPDMA1_Channel1);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a09      	ldr	r2, [pc, #36]	@ (8002928 <HAL_SAI_MspInit+0x394>)
 8002902:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002906:	4a08      	ldr	r2, [pc, #32]	@ (8002928 <HAL_SAI_MspInit+0x394>)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800290c:	2110      	movs	r1, #16
 800290e:	4806      	ldr	r0, [pc, #24]	@ (8002928 <HAL_SAI_MspInit+0x394>)
 8002910:	f003 f94c 	bl	8005bac <HAL_DMA_ConfigChannelAttributes>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_SAI_MspInit+0x38a>
    {
      Error_Handler();
 800291a:	f7fe ff4b 	bl	80017b4 <Error_Handler>
    }

    }
}
 800291e:	bf00      	nop
 8002920:	3790      	adds	r7, #144	@ 0x90
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000704 	.word	0x20000704
 800292c:	200006ec 	.word	0x200006ec

08002930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002934:	bf00      	nop
 8002936:	e7fd      	b.n	8002934 <NMI_Handler+0x4>

08002938 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800293c:	bf00      	nop
 800293e:	e7fd      	b.n	800293c <HardFault_Handler+0x4>

08002940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002944:	bf00      	nop
 8002946:	e7fd      	b.n	8002944 <MemManage_Handler+0x4>

08002948 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800294c:	bf00      	nop
 800294e:	e7fd      	b.n	800294c <BusFault_Handler+0x4>

08002950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002954:	bf00      	nop
 8002956:	e7fd      	b.n	8002954 <UsageFault_Handler+0x4>

08002958 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002986:	f000 f979 	bl	8002c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}

0800298e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 8002992:	2002      	movs	r0, #2
 8002994:	f004 ff98 	bl	80078c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}

0800299c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 80029a0:	2010      	movs	r0, #16
 80029a2:	f004 ff91 	bl	80078c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}

080029aa <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 80029ae:	2020      	movs	r0, #32
 80029b0:	f004 ff8a 	bl	80078c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80029bc:	4802      	ldr	r0, [pc, #8]	@ (80029c8 <GPDMA1_Channel0_IRQHandler+0x10>)
 80029be:	f002 ff86 	bl	80058ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200001ac 	.word	0x200001ac

080029cc <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 80029d0:	4802      	ldr	r0, [pc, #8]	@ (80029dc <GPDMA1_Channel1_IRQHandler+0x10>)
 80029d2:	f002 ff7c 	bl	80058ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000704 	.word	0x20000704

080029e0 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 80029e4:	4802      	ldr	r0, [pc, #8]	@ (80029f0 <GPDMA1_Channel2_IRQHandler+0x10>)
 80029e6:	f002 ff72 	bl	80058ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000224 	.word	0x20000224

080029f4 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 80029f8:	4802      	ldr	r0, [pc, #8]	@ (8002a04 <GPDMA1_Channel3_IRQHandler+0x10>)
 80029fa:	f002 ff68 	bl	80058ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000650 	.word	0x20000650

08002a08 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a0c:	4802      	ldr	r0, [pc, #8]	@ (8002a18 <ADC1_2_IRQHandler+0x10>)
 8002a0e:	f001 f925 	bl	8003c5c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000058 	.word	0x20000058

08002a1c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002a20:	4802      	ldr	r0, [pc, #8]	@ (8002a2c <I2C2_EV_IRQHandler+0x10>)
 8002a22:	f005 f91d 	bl	8007c60 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200003b8 	.word	0x200003b8

08002a30 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002a34:	4802      	ldr	r0, [pc, #8]	@ (8002a40 <I2C2_ER_IRQHandler+0x10>)
 8002a36:	f005 f92d 	bl	8007c94 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200003b8 	.word	0x200003b8

08002a44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a48:	4802      	ldr	r0, [pc, #8]	@ (8002a54 <USART1_IRQHandler+0x10>)
 8002a4a:	f00d fa7b 	bl	800ff44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000814 	.word	0x20000814

08002a58 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002a5c:	4802      	ldr	r0, [pc, #8]	@ (8002a68 <LTDC_IRQHandler+0x10>)
 8002a5e:	f006 fa9b 	bl	8008f98 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	2000040c 	.word	0x2000040c

08002a6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a70:	4b18      	ldr	r3, [pc, #96]	@ (8002ad4 <SystemInit+0x68>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a76:	4a17      	ldr	r2, [pc, #92]	@ (8002ad4 <SystemInit+0x68>)
 8002a78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002a80:	4b15      	ldr	r3, [pc, #84]	@ (8002ad8 <SystemInit+0x6c>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002a86:	4b14      	ldr	r3, [pc, #80]	@ (8002ad8 <SystemInit+0x6c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002a8c:	4b12      	ldr	r3, [pc, #72]	@ (8002ad8 <SystemInit+0x6c>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002a92:	4b11      	ldr	r3, [pc, #68]	@ (8002ad8 <SystemInit+0x6c>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002a98:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad8 <SystemInit+0x6c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0e      	ldr	r2, [pc, #56]	@ (8002ad8 <SystemInit+0x6c>)
 8002a9e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002aa2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002aa6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad8 <SystemInit+0x6c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002aae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <SystemInit+0x6c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a09      	ldr	r2, [pc, #36]	@ (8002ad8 <SystemInit+0x6c>)
 8002ab4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ab8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002aba:	4b07      	ldr	r3, [pc, #28]	@ (8002ad8 <SystemInit+0x6c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ac0:	4b04      	ldr	r3, [pc, #16]	@ (8002ad4 <SystemInit+0x68>)
 8002ac2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002ac6:	609a      	str	r2, [r3, #8]
  #endif
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	e000ed00 	.word	0xe000ed00
 8002ad8:	46020c00 	.word	0x46020c00

08002adc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002adc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b14 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ae0:	f7ff ffc4 	bl	8002a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002ae4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002ae6:	e003      	b.n	8002af0 <LoopCopyDataInit>

08002ae8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002aea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002aec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002aee:	3104      	adds	r1, #4

08002af0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002af0:	480a      	ldr	r0, [pc, #40]	@ (8002b1c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002af2:	4b0b      	ldr	r3, [pc, #44]	@ (8002b20 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002af4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002af6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002af8:	d3f6      	bcc.n	8002ae8 <CopyDataInit>
	ldr	r2, =_sbss
 8002afa:	4a0a      	ldr	r2, [pc, #40]	@ (8002b24 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002afc:	e002      	b.n	8002b04 <LoopFillZerobss>

08002afe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002afe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002b00:	f842 3b04 	str.w	r3, [r2], #4

08002b04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002b04:	4b08      	ldr	r3, [pc, #32]	@ (8002b28 <LoopForever+0x16>)
	cmp	r2, r3
 8002b06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002b08:	d3f9      	bcc.n	8002afe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b0a:	f00e fedd 	bl	80118c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b0e:	f7fd fd5d 	bl	80005cc <main>

08002b12 <LoopForever>:

LoopForever:
    b LoopForever
 8002b12:	e7fe      	b.n	8002b12 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002b14:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 8002b18:	08011a38 	.word	0x08011a38
	ldr	r0, =_sdata
 8002b1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002b20:	2000003c 	.word	0x2000003c
	ldr	r2, =_sbss
 8002b24:	2000003c 	.word	0x2000003c
	ldr	r3, = _ebss
 8002b28:	20000efc 	.word	0x20000efc

08002b2c <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b2c:	e7fe      	b.n	8002b2c <ADC4_IRQHandler>
	...

08002b30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b34:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <HAL_Init+0x50>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a11      	ldr	r2, [pc, #68]	@ (8002b80 <HAL_Init+0x50>)
 8002b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b40:	2003      	movs	r0, #3
 8002b42:	f002 fbac 	bl	800529e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002b46:	f007 ffd3 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b84 <HAL_Init+0x54>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	490c      	ldr	r1, [pc, #48]	@ (8002b88 <HAL_Init+0x58>)
 8002b56:	5ccb      	ldrb	r3, [r1, r3]
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b8c <HAL_Init+0x5c>)
 8002b5e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b60:	2004      	movs	r0, #4
 8002b62:	f002 fbf1 	bl	8005348 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b66:	200f      	movs	r0, #15
 8002b68:	f000 f812 	bl	8002b90 <HAL_InitTick>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e002      	b.n	8002b7c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b76:	f7fe fe23 	bl	80017c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40022000 	.word	0x40022000
 8002b84:	46020c00 	.word	0x46020c00
 8002b88:	08011928 	.word	0x08011928
 8002b8c:	20000030 	.word	0x20000030

08002b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002b9c:	4b33      	ldr	r3, [pc, #204]	@ (8002c6c <HAL_InitTick+0xdc>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e05c      	b.n	8002c62 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002ba8:	4b31      	ldr	r3, [pc, #196]	@ (8002c70 <HAL_InitTick+0xe0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d10c      	bne.n	8002bce <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8002c74 <HAL_InitTick+0xe4>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4b2c      	ldr	r3, [pc, #176]	@ (8002c6c <HAL_InitTick+0xdc>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e037      	b.n	8002c3e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002bce:	f002 fc13 	bl	80053f8 <HAL_SYSTICK_GetCLKSourceConfig>
 8002bd2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d023      	beq.n	8002c22 <HAL_InitTick+0x92>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d82d      	bhi.n	8002c3c <HAL_InitTick+0xac>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_InitTick+0x5e>
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d00d      	beq.n	8002c08 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002bec:	e026      	b.n	8002c3c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002bee:	4b21      	ldr	r3, [pc, #132]	@ (8002c74 <HAL_InitTick+0xe4>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c6c <HAL_InitTick+0xdc>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002bfc:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c04:	60fb      	str	r3, [r7, #12]
        break;
 8002c06:	e01a      	b.n	8002c3e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002c08:	4b18      	ldr	r3, [pc, #96]	@ (8002c6c <HAL_InitTick+0xdc>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c12:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c16:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1e:	60fb      	str	r3, [r7, #12]
        break;
 8002c20:	e00d      	b.n	8002c3e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002c22:	4b12      	ldr	r3, [pc, #72]	@ (8002c6c <HAL_InitTick+0xdc>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c30:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c38:	60fb      	str	r3, [r7, #12]
        break;
 8002c3a:	e000      	b.n	8002c3e <HAL_InitTick+0xae>
        break;
 8002c3c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f002 fb60 	bl	8005304 <HAL_SYSTICK_Config>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e009      	b.n	8002c62 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	f04f 30ff 	mov.w	r0, #4294967295
 8002c56:	f002 fb2d 	bl	80052b4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002c5a:	4a07      	ldr	r2, [pc, #28]	@ (8002c78 <HAL_InitTick+0xe8>)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000038 	.word	0x20000038
 8002c70:	e000e010 	.word	0xe000e010
 8002c74:	20000030 	.word	0x20000030
 8002c78:	20000034 	.word	0x20000034

08002c7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c80:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <HAL_IncTick+0x20>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <HAL_IncTick+0x24>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ca0 <HAL_IncTick+0x24>)
 8002c8e:	6013      	str	r3, [r2, #0]
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20000038 	.word	0x20000038
 8002ca0:	20000ef8 	.word	0x20000ef8

08002ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ca8:	4b03      	ldr	r3, [pc, #12]	@ (8002cb8 <HAL_GetTick+0x14>)
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000ef8 	.word	0x20000ef8

08002cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cc4:	f7ff ffee 	bl	8002ca4 <HAL_GetTick>
 8002cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd4:	d005      	beq.n	8002ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002d00 <HAL_Delay+0x44>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4413      	add	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ce2:	bf00      	nop
 8002ce4:	f7ff ffde 	bl	8002ca4 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d8f7      	bhi.n	8002ce4 <HAL_Delay+0x28>
  {
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000038 	.word	0x20000038

08002d04 <HAL_SYSCFG_EnableOTGPHY>:
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */

void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8002d0c:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002d0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d10:	f023 0201 	bic.w	r2, r3, #1
 8002d14:	4904      	ldr	r1, [pc, #16]	@ (8002d28 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	46000400 	.word	0x46000400

08002d2c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8002d34:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002d36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d38:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8002d3c:	4904      	ldr	r1, [pc, #16]	@ (8002d50 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	46000400 	.word	0x46000400

08002d54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	609a      	str	r2, [r3, #8]
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	609a      	str	r2, [r3, #8]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8002df8 <LL_ADC_SetResolution+0x3c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d104      	bne.n	8002ddc <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f023 020c 	bic.w	r2, r3, #12
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	60da      	str	r2, [r3, #12]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	46021000 	.word	0x46021000

08002dfc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	3360      	adds	r3, #96	@ 0x60
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	430b      	orrs	r3, r1
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002e32:	bf00      	nop
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b085      	sub	sp, #20
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3360      	adds	r3, #96	@ 0x60
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b087      	sub	sp, #28
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	3360      	adds	r3, #96	@ 0x60
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	601a      	str	r2, [r3, #0]
}
 8002e94:	bf00      	nop
 8002e96:	371c      	adds	r7, #28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3360      	adds	r3, #96	@ 0x60
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	601a      	str	r2, [r3, #0]
}
 8002eca:	bf00      	nop
 8002ecc:	371c      	adds	r7, #28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b087      	sub	sp, #28
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3360      	adds	r3, #96	@ 0x60
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	601a      	str	r2, [r3, #0]
}
 8002f00:	bf00      	nop
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f1e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	2a00      	cmp	r2, #0
 8002f36:	d002      	beq.n	8002f3e <LL_ADC_SetGainCompensation+0x32>
 8002f38:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002f3c:	e000      	b.n	8002f40 <LL_ADC_SetGainCompensation+0x34>
 8002f3e:	2200      	movs	r2, #0
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b085      	sub	sp, #20
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2107      	movs	r1, #7
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	401a      	ands	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002f84:	bf00      	nop
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b089      	sub	sp, #36	@ 0x24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4a2b      	ldr	r2, [pc, #172]	@ (8003074 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d020      	beq.n	800300e <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	3330      	adds	r3, #48	@ 0x30
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	0a1b      	lsrs	r3, r3, #8
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	f003 030c 	and.w	r3, r3, #12
 8002fdc:	4413      	add	r3, r2
 8002fde:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f003 031f 	and.w	r3, r3, #31
 8002fea:	211f      	movs	r1, #31
 8002fec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	0e9b      	lsrs	r3, r3, #26
 8002ff8:	f003 011f 	and.w	r1, r3, #31
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	431a      	orrs	r2, r3
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 800300c:	e02b      	b.n	8003066 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	210f      	movs	r1, #15
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	401a      	ands	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d104      	bne.n	8003036 <LL_ADC_REG_SetSequencerRanks+0x7e>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	0e9b      	lsrs	r3, r3, #26
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	e010      	b.n	8003058 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	fa93 f3a3 	rbit	r3, r3
 8003040:	613b      	str	r3, [r7, #16]
  return result;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 800304c:	2320      	movs	r3, #32
 800304e:	e003      	b.n	8003058 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	fab3 f383 	clz	r3, r3
 8003056:	b2db      	uxtb	r3, r3
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	f001 011f 	and.w	r1, r1, #31
 800305e:	408b      	lsls	r3, r1
 8003060:	431a      	orrs	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003066:	bf00      	nop
 8003068:	3724      	adds	r7, #36	@ 0x24
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	46021000 	.word	0x46021000

08003078 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d107      	bne.n	800309c <LL_ADC_REG_SetSequencerChAdd+0x24>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	0e9b      	lsrs	r3, r3, #26
 8003090:	f003 031f 	and.w	r3, r3, #31
 8003094:	2201      	movs	r2, #1
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	e015      	b.n	80030c8 <LL_ADC_REG_SetSequencerChAdd+0x50>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	fa93 f3a3 	rbit	r3, r3
 80030a6:	60fb      	str	r3, [r7, #12]
  return result;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 80030b2:	2320      	movs	r3, #32
 80030b4:	e003      	b.n	80030be <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	fab3 f383 	clz	r3, r3
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	2201      	movs	r2, #1
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030d2:	bf00      	nop
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	0e9b      	lsrs	r3, r3, #26
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	2101      	movs	r1, #1
 80030f6:	fa01 f303 	lsl.w	r3, r1, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	401a      	ands	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f003 0303 	and.w	r3, r3, #3
}
 800311e:	4618      	mov	r0, r3
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003136:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003150:	b480      	push	{r7}
 8003152:	b08b      	sub	sp, #44	@ 0x2c
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4a2d      	ldr	r2, [pc, #180]	@ (8003214 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d042      	beq.n	80031ea <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d104      	bne.n	8003178 <LL_ADC_SetChannelSamplingTime+0x28>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	0e9b      	lsrs	r3, r3, #26
 8003172:	f003 021f 	and.w	r2, r3, #31
 8003176:	e011      	b.n	800319c <LL_ADC_SetChannelSamplingTime+0x4c>
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	617b      	str	r3, [r7, #20]
  return result;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 800318e:	2320      	movs	r3, #32
 8003190:	e003      	b.n	800319a <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	fab3 f383 	clz	r3, r3
 8003198:	b2db      	uxtb	r3, r3
 800319a:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	0e5b      	lsrs	r3, r3, #25
 80031a0:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80031a4:	460b      	mov	r3, r1
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	1ad2      	subs	r2, r2, r3
 80031ae:	4613      	mov	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4413      	add	r3, r2
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	3314      	adds	r3, #20
 80031ba:	461a      	mov	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	0e5b      	lsrs	r3, r3, #25
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	4413      	add	r3, r2
 80031c8:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	2107      	movs	r1, #7
 80031d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d2:	fa01 f303 	lsl.w	r3, r1, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	401a      	ands	r2, r3
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031de:	fa01 f303 	lsl.w	r3, r1, r3
 80031e2:	431a      	orrs	r2, r3
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 80031e8:	e00e      	b.n	8003208 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	43db      	mvns	r3, r3
 80031f4:	401a      	ands	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	0219      	lsls	r1, r3, #8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	400b      	ands	r3, r1
 80031fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003202:	431a      	orrs	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	615a      	str	r2, [r3, #20]
}
 8003208:	bf00      	nop
 800320a:	372c      	adds	r7, #44	@ 0x2c
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	46021000 	.word	0x46021000

08003218 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003230:	43db      	mvns	r3, r3
 8003232:	401a      	ands	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f003 0318 	and.w	r3, r3, #24
 800323a:	4908      	ldr	r1, [pc, #32]	@ (800325c <LL_ADC_SetChannelSingleDiff+0x44>)
 800323c:	40d9      	lsrs	r1, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	400b      	ands	r3, r1
 8003242:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003246:	431a      	orrs	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800324e:	bf00      	nop
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	000fffff 	.word	0x000fffff

08003260 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 031f 	and.w	r3, r3, #31
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 800328c:	4618      	mov	r0, r3
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80032a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6093      	str	r3, [r2, #8]
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032d0:	d101      	bne.n	80032d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80032f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	609a      	str	r2, [r3, #8]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800331c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003320:	d101      	bne.n	8003326 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003344:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003348:	f043 0201 	orr.w	r2, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	609a      	str	r2, [r3, #8]
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <LL_ADC_IsEnabled+0x18>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <LL_ADC_IsEnabled+0x1a>
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003392:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003396:	f043 0204 	orr.w	r2, r3, #4
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	609a      	str	r2, [r3, #8]
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d101      	bne.n	80033c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d101      	bne.n	80033e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033f8:	b590      	push	{r4, r7, lr}
 80033fa:	b08b      	sub	sp, #44	@ 0x2c
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8003406:	2300      	movs	r3, #0
 8003408:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e2ce      	b.n	80039b6 <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a95      	ldr	r2, [pc, #596]	@ (800367c <HAL_ADC_Init+0x284>)
 8003426:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800342c:	2b00      	cmp	r3, #0
 800342e:	d109      	bne.n	8003444 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7fe f9df 	bl	80017f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff ff37 	bl	80032bc <LL_ADC_IsDeepPowerDownEnabled>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d004      	beq.n	800345e <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff ff1d 	bl	8003298 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff ff52 	bl	800330c <LL_ADC_IsInternalRegulatorEnabled>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d115      	bne.n	800349a <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff ff36 	bl	80032e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003478:	4b81      	ldr	r3, [pc, #516]	@ (8003680 <HAL_ADC_Init+0x288>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	099b      	lsrs	r3, r3, #6
 800347e:	4a81      	ldr	r2, [pc, #516]	@ (8003684 <HAL_ADC_Init+0x28c>)
 8003480:	fba2 2303 	umull	r2, r3, r2, r3
 8003484:	099b      	lsrs	r3, r3, #6
 8003486:	3301      	adds	r3, #1
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800348c:	e002      	b.n	8003494 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	3b01      	subs	r3, #1
 8003492:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f9      	bne.n	800348e <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff ff34 	bl	800330c <LL_ADC_IsInternalRegulatorEnabled>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10e      	bne.n	80034c8 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034ae:	f043 0210 	orr.w	r2, r3, #16
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034ba:	f043 0201 	orr.w	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff6c 	bl	80033aa <LL_ADC_REG_IsConversionOngoing>
 80034d2:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f040 825f 	bne.w	80039a0 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f040 825b 	bne.w	80039a0 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034ee:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80034f2:	f043 0202 	orr.w	r2, r3, #2
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff ff2c 	bl	800335c <LL_ADC_IsEnabled>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d14f      	bne.n	80035aa <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a5b      	ldr	r2, [pc, #364]	@ (800367c <HAL_ADC_Init+0x284>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d037      	beq.n	8003584 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a5b      	ldr	r2, [pc, #364]	@ (8003688 <HAL_ADC_Init+0x290>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d004      	beq.n	8003528 <HAL_ADC_Init+0x130>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a5a      	ldr	r2, [pc, #360]	@ (800368c <HAL_ADC_Init+0x294>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d10e      	bne.n	8003546 <HAL_ADC_Init+0x14e>
 8003528:	4857      	ldr	r0, [pc, #348]	@ (8003688 <HAL_ADC_Init+0x290>)
 800352a:	f7ff ff17 	bl	800335c <LL_ADC_IsEnabled>
 800352e:	4604      	mov	r4, r0
 8003530:	4856      	ldr	r0, [pc, #344]	@ (800368c <HAL_ADC_Init+0x294>)
 8003532:	f7ff ff13 	bl	800335c <LL_ADC_IsEnabled>
 8003536:	4603      	mov	r3, r0
 8003538:	4323      	orrs	r3, r4
 800353a:	2b00      	cmp	r3, #0
 800353c:	bf0c      	ite	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	2300      	movne	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	e008      	b.n	8003558 <HAL_ADC_Init+0x160>
 8003546:	484d      	ldr	r0, [pc, #308]	@ (800367c <HAL_ADC_Init+0x284>)
 8003548:	f7ff ff08 	bl	800335c <LL_ADC_IsEnabled>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	bf0c      	ite	eq
 8003552:	2301      	moveq	r3, #1
 8003554:	2300      	movne	r3, #0
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d026      	beq.n	80035aa <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a49      	ldr	r2, [pc, #292]	@ (8003688 <HAL_ADC_Init+0x290>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d004      	beq.n	8003570 <HAL_ADC_Init+0x178>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a48      	ldr	r2, [pc, #288]	@ (800368c <HAL_ADC_Init+0x294>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d101      	bne.n	8003574 <HAL_ADC_Init+0x17c>
 8003570:	4a47      	ldr	r2, [pc, #284]	@ (8003690 <HAL_ADC_Init+0x298>)
 8003572:	e000      	b.n	8003576 <HAL_ADC_Init+0x17e>
 8003574:	4a47      	ldr	r2, [pc, #284]	@ (8003694 <HAL_ADC_Init+0x29c>)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4619      	mov	r1, r3
 800357c:	4610      	mov	r0, r2
 800357e:	f7ff fbe9 	bl	8002d54 <LL_ADC_SetCommonClock>
 8003582:	e012      	b.n	80035aa <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	4619      	mov	r1, r3
 800358e:	4610      	mov	r0, r2
 8003590:	f7ff fc14 	bl	8002dbc <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8003594:	4b3f      	ldr	r3, [pc, #252]	@ (8003694 <HAL_ADC_Init+0x29c>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80035a4:	493b      	ldr	r1, [pc, #236]	@ (8003694 <HAL_ADC_Init+0x29c>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a33      	ldr	r2, [pc, #204]	@ (800367c <HAL_ADC_Init+0x284>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d010      	beq.n	80035d6 <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035ba:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80035c0:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80035c6:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80035ce:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80035d0:	4313      	orrs	r3, r2
 80035d2:	623b      	str	r3, [r7, #32]
 80035d4:	e035      	b.n	8003642 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	7f1b      	ldrb	r3, [r3, #28]
 80035da:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035e2:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035e4:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80035ea:	2a00      	cmp	r2, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_ADC_Init+0x1fc>
 80035ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035f2:	e000      	b.n	80035f6 <HAL_ADC_Init+0x1fe>
 80035f4:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80035f6:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80035fc:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	da04      	bge.n	8003610 <HAL_ADC_Init+0x218>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800360e:	e001      	b.n	8003614 <HAL_ADC_Init+0x21c>
 8003610:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8003614:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	491b      	ldr	r1, [pc, #108]	@ (8003688 <HAL_ADC_Init+0x290>)
 800361c:	428b      	cmp	r3, r1
 800361e:	d004      	beq.n	800362a <HAL_ADC_Init+0x232>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4919      	ldr	r1, [pc, #100]	@ (800368c <HAL_ADC_Init+0x294>)
 8003626:	428b      	cmp	r3, r1
 8003628:	d103      	bne.n	8003632 <HAL_ADC_Init+0x23a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003630:	e003      	b.n	800363a <HAL_ADC_Init+0x242>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003638:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800363a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800363c:	6a3a      	ldr	r2, [r7, #32]
 800363e:	4313      	orrs	r3, r2
 8003640:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003648:	2b01      	cmp	r3, #1
 800364a:	d131      	bne.n	80036b0 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a0a      	ldr	r2, [pc, #40]	@ (800367c <HAL_ADC_Init+0x284>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d007      	beq.n	8003666 <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	3b01      	subs	r3, #1
 800365c:	045b      	lsls	r3, r3, #17
 800365e:	6a3a      	ldr	r2, [r7, #32]
 8003660:	4313      	orrs	r3, r2
 8003662:	623b      	str	r3, [r7, #32]
 8003664:	e024      	b.n	80036b0 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800366c:	2b00      	cmp	r3, #0
 800366e:	d113      	bne.n	8003698 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003676:	623b      	str	r3, [r7, #32]
 8003678:	e01a      	b.n	80036b0 <HAL_ADC_Init+0x2b8>
 800367a:	bf00      	nop
 800367c:	46021000 	.word	0x46021000
 8003680:	20000030 	.word	0x20000030
 8003684:	053e2d63 	.word	0x053e2d63
 8003688:	42028000 	.word	0x42028000
 800368c:	42028100 	.word	0x42028100
 8003690:	42028300 	.word	0x42028300
 8003694:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800369c:	f043 0220 	orr.w	r2, r3, #32
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036a8:	f043 0201 	orr.w	r2, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a75      	ldr	r2, [pc, #468]	@ (800388c <HAL_ADC_Init+0x494>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d018      	beq.n	80036ec <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ce:	4313      	orrs	r3, r2
 80036d0:	6a3a      	ldr	r2, [r7, #32]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003890 <HAL_ADC_Init+0x498>)
 80036de:	4013      	ands	r3, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	6a39      	ldr	r1, [r7, #32]
 80036e6:	430b      	orrs	r3, r1
 80036e8:	60d3      	str	r3, [r2, #12]
 80036ea:	e031      	b.n	8003750 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d009      	beq.n	8003708 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f8:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003700:	4313      	orrs	r3, r2
 8003702:	6a3a      	ldr	r2, [r7, #32]
 8003704:	4313      	orrs	r3, r2
 8003706:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	4b61      	ldr	r3, [pc, #388]	@ (8003894 <HAL_ADC_Init+0x49c>)
 8003710:	4013      	ands	r3, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	6a39      	ldr	r1, [r7, #32]
 8003718:	430b      	orrs	r3, r1
 800371a:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1a      	ldr	r2, [r3, #32]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d008      	beq.n	8003750 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a4d      	ldr	r2, [pc, #308]	@ (800388c <HAL_ADC_Init+0x494>)
 8003756:	4293      	cmp	r3, r2
 8003758:	f000 80a4 	beq.w	80038a4 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff fe22 	bl	80033aa <LL_ADC_REG_IsConversionOngoing>
 8003766:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff fe2f 	bl	80033d0 <LL_ADC_INJ_IsConversionOngoing>
 8003772:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d166      	bne.n	8003848 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d163      	bne.n	8003848 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	7f1b      	ldrb	r3, [r3, #28]
 8003784:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4943      	ldr	r1, [pc, #268]	@ (8003898 <HAL_ADC_Init+0x4a0>)
 800378c:	428b      	cmp	r3, r1
 800378e:	d004      	beq.n	800379a <HAL_ADC_Init+0x3a2>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4941      	ldr	r1, [pc, #260]	@ (800389c <HAL_ADC_Init+0x4a4>)
 8003796:	428b      	cmp	r3, r1
 8003798:	d102      	bne.n	80037a0 <HAL_ADC_Init+0x3a8>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800379e:	e002      	b.n	80037a6 <HAL_ADC_Init+0x3ae>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a4:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037a6:	4313      	orrs	r3, r2
 80037a8:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037b4:	f023 0303 	bic.w	r3, r3, #3
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	6a39      	ldr	r1, [r7, #32]
 80037be:	430b      	orrs	r3, r1
 80037c0:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	4619      	mov	r1, r3
 80037d4:	4610      	mov	r0, r2
 80037d6:	f7ff fb99 	bl	8002f0c <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d11e      	bne.n	8003822 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e8:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	4b2b      	ldr	r3, [pc, #172]	@ (80038a0 <HAL_ADC_Init+0x4a8>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80037f8:	0411      	lsls	r1, r2, #16
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037fe:	4311      	orrs	r1, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8003804:	4311      	orrs	r1, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800380a:	4311      	orrs	r1, r2
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003810:	0892      	lsrs	r2, r2, #2
 8003812:	430a      	orrs	r2, r1
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	611a      	str	r2, [r3, #16]
 8003820:	e007      	b.n	8003832 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0201 	bic.w	r2, r2, #1
 8003830:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d10c      	bne.n	800386a <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	f023 010f 	bic.w	r1, r3, #15
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385e:	1e5a      	subs	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	631a      	str	r2, [r3, #48]	@ 0x30
 8003868:	e007      	b.n	800387a <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 020f 	bic.w	r2, r2, #15
 8003878:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800387e:	f023 0303 	bic.w	r3, r3, #3
 8003882:	f043 0201 	orr.w	r2, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800388a:	e092      	b.n	80039b2 <HAL_ADC_Init+0x5ba>
 800388c:	46021000 	.word	0x46021000
 8003890:	fff0c013 	.word	0xfff0c013
 8003894:	ffde800d 	.word	0xffde800d
 8003898:	42028000 	.word	0x42028000
 800389c:	42028100 	.word	0x42028100
 80038a0:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d111      	bne.n	80038d2 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80038b6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80038bc:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80038c2:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80038c4:	69fa      	ldr	r2, [r7, #28]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	4b39      	ldr	r3, [pc, #228]	@ (80039c0 <HAL_ADC_Init+0x5c8>)
 80038da:	4013      	ands	r3, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	69f9      	ldr	r1, [r7, #28]
 80038e2:	430b      	orrs	r3, r1
 80038e4:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ee:	461a      	mov	r2, r3
 80038f0:	2100      	movs	r1, #0
 80038f2:	f7ff fb2e 	bl	8002f52 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038fe:	461a      	mov	r2, r3
 8003900:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8003904:	f7ff fb25 	bl	8002f52 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d108      	bne.n	8003922 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f062 020f 	orn	r2, r2, #15
 800391e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003920:	e018      	b.n	8003954 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800392a:	d113      	bne.n	8003954 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003936:	3b01      	subs	r3, #1
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	f003 031c 	and.w	r3, r3, #28
 800393e:	f06f 020f 	mvn.w	r2, #15
 8003942:	fa02 f103 	lsl.w	r1, r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	4b1a      	ldr	r3, [pc, #104]	@ (80039c4 <HAL_ADC_Init+0x5cc>)
 800395c:	4013      	ands	r3, r2
 800395e:	6a3a      	ldr	r2, [r7, #32]
 8003960:	429a      	cmp	r2, r3
 8003962:	d10b      	bne.n	800397c <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800396e:	f023 0303 	bic.w	r3, r3, #3
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800397a:	e01a      	b.n	80039b2 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003980:	f023 0312 	bic.w	r3, r3, #18
 8003984:	f043 0210 	orr.w	r2, r3, #16
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003990:	f043 0201 	orr.w	r2, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800399e:	e008      	b.n	80039b2 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039a4:	f043 0210 	orr.w	r2, r3, #16
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 80039b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	372c      	adds	r7, #44	@ 0x2c
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd90      	pop	{r4, r7, pc}
 80039be:	bf00      	nop
 80039c0:	f7fffc02 	.word	0xf7fffc02
 80039c4:	833ffff3 	.word	0x833ffff3

080039c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b0a2      	sub	sp, #136	@ 0x88
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t LengthInBytes;
  DMA_NodeConfTypeDef node_conf;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a98      	ldr	r2, [pc, #608]	@ (8003c3c <HAL_ADC_Start_DMA+0x274>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d004      	beq.n	80039e8 <HAL_ADC_Start_DMA+0x20>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a97      	ldr	r2, [pc, #604]	@ (8003c40 <HAL_ADC_Start_DMA+0x278>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d101      	bne.n	80039ec <HAL_ADC_Start_DMA+0x24>
 80039e8:	4b96      	ldr	r3, [pc, #600]	@ (8003c44 <HAL_ADC_Start_DMA+0x27c>)
 80039ea:	e000      	b.n	80039ee <HAL_ADC_Start_DMA+0x26>
 80039ec:	4b96      	ldr	r3, [pc, #600]	@ (8003c48 <HAL_ADC_Start_DMA+0x280>)
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff fc36 	bl	8003260 <LL_ADC_GetMultimode>
 80039f4:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff fcd5 	bl	80033aa <LL_ADC_REG_IsConversionOngoing>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f040 8111 	bne.w	8003c2a <HAL_ADC_Start_DMA+0x262>
  {
    __HAL_LOCK(hadc);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_ADC_Start_DMA+0x4e>
 8003a12:	2302      	movs	r3, #2
 8003a14:	e10e      	b.n	8003c34 <HAL_ADC_Start_DMA+0x26c>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d006      	beq.n	8003a32 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a26:	2b05      	cmp	r3, #5
 8003a28:	d003      	beq.n	8003a32 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a2c:	2b09      	cmp	r3, #9
 8003a2e:	f040 80f4 	bne.w	8003c1a <HAL_ADC_Start_DMA+0x252>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f001 fa2c 	bl	8004e90 <ADC_Enable>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003a3e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f040 80e4 	bne.w	8003c10 <HAL_ADC_Start_DMA+0x248>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a4c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a7a      	ldr	r2, [pc, #488]	@ (8003c4c <HAL_ADC_Start_DMA+0x284>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d026      	beq.n	8003ab4 <HAL_ADC_Start_DMA+0xec>
        {
#if defined(ADC_MULTIMODE_SUPPORT)
          /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
            - if ADC instance is master or if multimode feature is not available
            - if multimode setting is disabled (ADC instance slave in independent mode) */
          if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a75      	ldr	r2, [pc, #468]	@ (8003c40 <HAL_ADC_Start_DMA+0x278>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d002      	beq.n	8003a76 <HAL_ADC_Start_DMA+0xae>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	e000      	b.n	8003a78 <HAL_ADC_Start_DMA+0xb0>
 8003a76:	4b71      	ldr	r3, [pc, #452]	@ (8003c3c <HAL_ADC_Start_DMA+0x274>)
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d002      	beq.n	8003a86 <HAL_ADC_Start_DMA+0xbe>
              || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d105      	bne.n	8003a92 <HAL_ADC_Start_DMA+0xca>
             )
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a8a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	679a      	str	r2, [r3, #120]	@ 0x78
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d006      	beq.n	8003aac <HAL_ADC_Start_DMA+0xe4>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003aa2:	f023 0206 	bic.w	r2, r3, #6
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003aaa:	e006      	b.n	8003aba <HAL_ADC_Start_DMA+0xf2>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003ab2:	e002      	b.n	8003aba <HAL_ADC_Start_DMA+0xf2>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abe:	4a64      	ldr	r2, [pc, #400]	@ (8003c50 <HAL_ADC_Start_DMA+0x288>)
 8003ac0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac6:	4a63      	ldr	r2, [pc, #396]	@ (8003c54 <HAL_ADC_Start_DMA+0x28c>)
 8003ac8:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ace:	4a62      	ldr	r2, [pc, #392]	@ (8003c58 <HAL_ADC_Start_DMA+0x290>)
 8003ad0:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	221c      	movs	r2, #28
 8003ad8:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0210 	orr.w	r2, r2, #16
 8003af0:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a55      	ldr	r2, [pc, #340]	@ (8003c4c <HAL_ADC_Start_DMA+0x284>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d107      	bne.n	8003b0c <HAL_ADC_Start_DMA+0x144>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d04f      	beq.n	8003bba <HAL_ADC_Start_DMA+0x1f2>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d046      	beq.n	8003bb2 <HAL_ADC_Start_DMA+0x1ea>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d040      	beq.n	8003bb2 <HAL_ADC_Start_DMA+0x1ea>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	f107 0310 	add.w	r3, r7, #16
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f002 fdfc 	bl	800673c <HAL_DMAEx_List_GetNodeConfig>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_ADC_Start_DMA+0x186>
            {
              return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e072      	b.n	8003c34 <HAL_ADC_Start_DMA+0x26c>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d104      	bne.n	8003b5e <HAL_ADC_Start_DMA+0x196>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b5c:	e00a      	b.n	8003b74 <HAL_ADC_Start_DMA+0x1ac>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d104      	bne.n	8003b6e <HAL_ADC_Start_DMA+0x1a6>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b6c:	e002      	b.n	8003b74 <HAL_ADC_Start_DMA+0x1ac>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b80:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f002 fd1f 	bl	80065e8 <HAL_DMAEx_List_Start_IT>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003bb0:	e028      	b.n	8003c04 <HAL_ADC_Start_DMA+0x23c>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003bb8:	e024      	b.n	8003c04 <HAL_ADC_Start_DMA+0x23c>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d104      	bne.n	8003bce <HAL_ADC_Start_DMA+0x206>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bcc:	e00c      	b.n	8003be8 <HAL_ADC_Start_DMA+0x220>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d104      	bne.n	8003be2 <HAL_ADC_Start_DMA+0x21a>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003be0:	e002      	b.n	8003be8 <HAL_ADC_Start_DMA+0x220>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3340      	adds	r3, #64	@ 0x40
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bfa:	f001 fd63 	bl	80056c4 <HAL_DMA_Start_IT>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fbba 	bl	8003382 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003c0e:	e00f      	b.n	8003c30 <HAL_ADC_Start_DMA+0x268>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if (tmp_hal_status == HAL_OK)
 8003c18:	e00a      	b.n	8003c30 <HAL_ADC_Start_DMA+0x268>
      }
    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8003c28:	e002      	b.n	8003c30 <HAL_ADC_Start_DMA+0x268>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 8003c30:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3788      	adds	r7, #136	@ 0x88
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	42028000 	.word	0x42028000
 8003c40:	42028100 	.word	0x42028100
 8003c44:	42028300 	.word	0x42028300
 8003c48:	46021300 	.word	0x46021300
 8003c4c:	46021000 	.word	0x46021000
 8003c50:	08004fc5 	.word	0x08004fc5
 8003c54:	080050a3 	.word	0x080050a3
 8003c58:	080050bf 	.word	0x080050bf

08003c5c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08a      	sub	sp, #40	@ 0x28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003c64:	2300      	movs	r3, #0
 8003c66:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a77      	ldr	r2, [pc, #476]	@ (8003e5c <HAL_ADC_IRQHandler+0x200>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d004      	beq.n	8003c8c <HAL_ADC_IRQHandler+0x30>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a76      	ldr	r2, [pc, #472]	@ (8003e60 <HAL_ADC_IRQHandler+0x204>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d101      	bne.n	8003c90 <HAL_ADC_IRQHandler+0x34>
 8003c8c:	4b75      	ldr	r3, [pc, #468]	@ (8003e64 <HAL_ADC_IRQHandler+0x208>)
 8003c8e:	e000      	b.n	8003c92 <HAL_ADC_IRQHandler+0x36>
 8003c90:	4b75      	ldr	r3, [pc, #468]	@ (8003e68 <HAL_ADC_IRQHandler+0x20c>)
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff fae4 	bl	8003260 <LL_ADC_GetMultimode>
 8003c98:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d017      	beq.n	8003cd4 <HAL_ADC_IRQHandler+0x78>
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d012      	beq.n	8003cd4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cb2:	f003 0310 	and.w	r3, r3, #16
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d105      	bne.n	8003cc6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cbe:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f001 fa31 	bl	800512e <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d004      	beq.n	8003ce8 <HAL_ADC_IRQHandler+0x8c>
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10b      	bne.n	8003d00 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 80d1 	beq.w	8003e96 <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80cb 	beq.w	8003e96 <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d04:	f003 0310 	and.w	r3, r3, #16
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d105      	bne.n	8003d18 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d10:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a53      	ldr	r2, [pc, #332]	@ (8003e6c <HAL_ADC_IRQHandler+0x210>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d06c      	beq.n	8003dfc <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff f932 	bl	8002f90 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 80aa 	beq.w	8003e88 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a49      	ldr	r2, [pc, #292]	@ (8003e60 <HAL_ADC_IRQHandler+0x204>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d002      	beq.n	8003d44 <HAL_ADC_IRQHandler+0xe8>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	e000      	b.n	8003d46 <HAL_ADC_IRQHandler+0xea>
 8003d44:	4b45      	ldr	r3, [pc, #276]	@ (8003e5c <HAL_ADC_IRQHandler+0x200>)
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d008      	beq.n	8003d60 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2b05      	cmp	r3, #5
 8003d58:	d002      	beq.n	8003d60 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b09      	cmp	r3, #9
 8003d5e:	d104      	bne.n	8003d6a <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	623b      	str	r3, [r7, #32]
 8003d68:	e00c      	b.n	8003d84 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a3c      	ldr	r2, [pc, #240]	@ (8003e60 <HAL_ADC_IRQHandler+0x204>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d002      	beq.n	8003d7a <HAL_ADC_IRQHandler+0x11e>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	e000      	b.n	8003d7c <HAL_ADC_IRQHandler+0x120>
 8003d7a:	4b38      	ldr	r3, [pc, #224]	@ (8003e5c <HAL_ADC_IRQHandler+0x200>)
 8003d7c:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d17c      	bne.n	8003e88 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d175      	bne.n	8003e88 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fb02 	bl	80033aa <LL_ADC_REG_IsConversionOngoing>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d11a      	bne.n	8003de2 <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 020c 	bic.w	r2, r2, #12
 8003dba:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d159      	bne.n	8003e88 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dd8:	f043 0201 	orr.w	r2, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	679a      	str	r2, [r3, #120]	@ 0x78
 8003de0:	e052      	b.n	8003e88 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003de6:	f043 0210 	orr.w	r2, r3, #16
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003df2:	f043 0201 	orr.w	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003dfa:	e045      	b.n	8003e88 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff f8c5 	bl	8002f90 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d03d      	beq.n	8003e88 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d138      	bne.n	8003e88 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d131      	bne.n	8003e88 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fabe 	bl	80033aa <LL_ADC_REG_IsConversionOngoing>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d11d      	bne.n	8003e70 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 020c 	bic.w	r2, r2, #12
 8003e42:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e4c:	f023 0301 	bic.w	r3, r3, #1
 8003e50:	f043 0201 	orr.w	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	679a      	str	r2, [r3, #120]	@ 0x78
 8003e58:	e016      	b.n	8003e88 <HAL_ADC_IRQHandler+0x22c>
 8003e5a:	bf00      	nop
 8003e5c:	42028000 	.word	0x42028000
 8003e60:	42028100 	.word	0x42028100
 8003e64:	42028300 	.word	0x42028300
 8003e68:	46021300 	.word	0x46021300
 8003e6c:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e74:	f043 0220 	orr.w	r2, r3, #32
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e80:	f043 0201 	orr.w	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f99d 	bl	80041c8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	220c      	movs	r2, #12
 8003e94:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a8c      	ldr	r2, [pc, #560]	@ (80040cc <HAL_ADC_IRQHandler+0x470>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	f000 8095 	beq.w	8003fcc <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d004      	beq.n	8003eb6 <HAL_ADC_IRQHandler+0x25a>
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	f003 0320 	and.w	r3, r3, #32
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10a      	bne.n	8003ecc <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8085 	beq.w	8003fcc <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d07f      	beq.n	8003fcc <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ed0:	f003 0310 	and.w	r3, r3, #16
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d105      	bne.n	8003ee4 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003edc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff f91e 	bl	800312a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003eee:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff f84b 	bl	8002f90 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003efa:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a73      	ldr	r2, [pc, #460]	@ (80040d0 <HAL_ADC_IRQHandler+0x474>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d002      	beq.n	8003f0c <HAL_ADC_IRQHandler+0x2b0>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	e000      	b.n	8003f0e <HAL_ADC_IRQHandler+0x2b2>
 8003f0c:	4b71      	ldr	r3, [pc, #452]	@ (80040d4 <HAL_ADC_IRQHandler+0x478>)
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6812      	ldr	r2, [r2, #0]
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d008      	beq.n	8003f28 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b06      	cmp	r3, #6
 8003f20:	d002      	beq.n	8003f28 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b07      	cmp	r3, #7
 8003f26:	d104      	bne.n	8003f32 <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	623b      	str	r3, [r7, #32]
 8003f30:	e00c      	b.n	8003f4c <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a66      	ldr	r2, [pc, #408]	@ (80040d0 <HAL_ADC_IRQHandler+0x474>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d002      	beq.n	8003f42 <HAL_ADC_IRQHandler+0x2e6>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	e000      	b.n	8003f44 <HAL_ADC_IRQHandler+0x2e8>
 8003f42:	4b64      	ldr	r3, [pc, #400]	@ (80040d4 <HAL_ADC_IRQHandler+0x478>)
 8003f44:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d035      	beq.n	8003fbe <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d007      	beq.n	8003f6c <HAL_ADC_IRQHandler+0x310>
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d02d      	beq.n	8003fbe <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d128      	bne.n	8003fbe <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f76:	2b40      	cmp	r3, #64	@ 0x40
 8003f78:	d121      	bne.n	8003fbe <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff fa26 	bl	80033d0 <LL_ADC_INJ_IsConversionOngoing>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d119      	bne.n	8003fbe <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f98:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d105      	bne.n	8003fbe <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fb6:	f043 0201 	orr.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f001 f897 	bl	80050f2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2260      	movs	r2, #96	@ 0x60
 8003fca:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d011      	beq.n	8003ffa <HAL_ADC_IRQHandler+0x39e>
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00c      	beq.n	8003ffa <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fe4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f8ff 	bl	80041f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2280      	movs	r2, #128	@ 0x80
 8003ff8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d012      	beq.n	800402a <HAL_ADC_IRQHandler+0x3ce>
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00d      	beq.n	800402a <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004012:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f001 f873 	bl	8005106 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004028:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004030:	2b00      	cmp	r3, #0
 8004032:	d012      	beq.n	800405a <HAL_ADC_IRQHandler+0x3fe>
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00d      	beq.n	800405a <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004042:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f001 f865 	bl	800511a <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004058:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b00      	cmp	r3, #0
 8004062:	d05d      	beq.n	8004120 <HAL_ADC_IRQHandler+0x4c4>
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	2b00      	cmp	r3, #0
 800406c:	d058      	beq.n	8004120 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004072:	2b00      	cmp	r3, #0
 8004074:	d102      	bne.n	800407c <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 8004076:	2301      	movs	r3, #1
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24
 800407a:	e03b      	b.n	80040f4 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a12      	ldr	r2, [pc, #72]	@ (80040cc <HAL_ADC_IRQHandler+0x470>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d02c      	beq.n	80040e0 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d015      	beq.n	80040b8 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a10      	ldr	r2, [pc, #64]	@ (80040d4 <HAL_ADC_IRQHandler+0x478>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d004      	beq.n	80040a0 <HAL_ADC_IRQHandler+0x444>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a0d      	ldr	r2, [pc, #52]	@ (80040d0 <HAL_ADC_IRQHandler+0x474>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d101      	bne.n	80040a4 <HAL_ADC_IRQHandler+0x448>
 80040a0:	4b0d      	ldr	r3, [pc, #52]	@ (80040d8 <HAL_ADC_IRQHandler+0x47c>)
 80040a2:	e000      	b.n	80040a6 <HAL_ADC_IRQHandler+0x44a>
 80040a4:	4b0d      	ldr	r3, [pc, #52]	@ (80040dc <HAL_ADC_IRQHandler+0x480>)
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff f8e8 	bl	800327c <LL_ADC_GetMultiDMATransfer>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d020      	beq.n	80040f4 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 80040b2:	2301      	movs	r3, #1
 80040b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040b6:	e01d      	b.n	80040f4 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d016      	beq.n	80040f4 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 80040c6:	2301      	movs	r3, #1
 80040c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ca:	e013      	b.n	80040f4 <HAL_ADC_IRQHandler+0x498>
 80040cc:	46021000 	.word	0x46021000
 80040d0:	42028100 	.word	0x42028100
 80040d4:	42028000 	.word	0x42028000
 80040d8:	42028300 	.word	0x42028300
 80040dc:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff f812 	bl	800310e <LL_ADC_REG_GetDMATransfer>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 80040f0:	2301      	movs	r3, #1
 80040f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d10e      	bne.n	8004118 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040fe:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800410a:	f043 0202 	orr.w	r2, r3, #2
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f876 	bl	8004204 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2210      	movs	r2, #16
 800411e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d01b      	beq.n	8004162 <HAL_ADC_IRQHandler+0x506>
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d016      	beq.n	8004162 <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b00      	cmp	r3, #0
 800413e:	d105      	bne.n	800414c <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004144:	f043 0201 	orr.w	r2, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f877 	bl	8004240 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0201 	bic.w	r2, r2, #1
 8004160:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a17      	ldr	r2, [pc, #92]	@ (80041c4 <HAL_ADC_IRQHandler+0x568>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d126      	bne.n	80041ba <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00c      	beq.n	8004190 <HAL_ADC_IRQHandler+0x534>
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f849 	bl	8004218 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800418e:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00f      	beq.n	80041ba <HAL_ADC_IRQHandler+0x55e>
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f841 	bl	800422c <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041b8:	605a      	str	r2, [r3, #4]
    }
  }
}
 80041ba:	bf00      	nop
 80041bc:	3728      	adds	r7, #40	@ 0x28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	46021000 	.word	0x46021000

080041c8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004254:	b590      	push	{r4, r7, lr}
 8004256:	b0b7      	sub	sp, #220	@ 0xdc
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004264:	2300      	movs	r3, #0
 8004266:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4aa8      	ldr	r2, [pc, #672]	@ (8004510 <HAL_ADC_ConfigChannel+0x2bc>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d103      	bne.n	800427a <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8004280:	2b01      	cmp	r3, #1
 8004282:	d102      	bne.n	800428a <HAL_ADC_ConfigChannel+0x36>
 8004284:	2302      	movs	r3, #2
 8004286:	f000 bdfe 	b.w	8004e86 <HAL_ADC_ConfigChannel+0xc32>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff f887 	bl	80033aa <LL_ADC_REG_IsConversionOngoing>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f040 85c1 	bne.w	8004e26 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a99      	ldr	r2, [pc, #612]	@ (8004510 <HAL_ADC_ConfigChannel+0x2bc>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	f000 8409 	beq.w	8004ac2 <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d108      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x7a>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	0e9b      	lsrs	r3, r3, #26
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	2201      	movs	r2, #1
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	e01d      	b.n	800430a <HAL_ADC_ConfigChannel+0xb6>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80042da:	fa93 f3a3 	rbit	r3, r3
 80042de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80042e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80042e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80042ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 80042f2:	2320      	movs	r3, #32
 80042f4:	e004      	b.n	8004300 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 80042f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80042fa:	fab3 f383 	clz	r3, r3
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	2201      	movs	r2, #1
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	69d1      	ldr	r1, [r2, #28]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	430b      	orrs	r3, r1
 8004316:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6859      	ldr	r1, [r3, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	f7fe fe47 	bl	8002fb8 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff f83b 	bl	80033aa <LL_ADC_REG_IsConversionOngoing>
 8004334:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff f847 	bl	80033d0 <LL_ADC_INJ_IsConversionOngoing>
 8004342:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004346:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800434a:	2b00      	cmp	r3, #0
 800434c:	f040 81df 	bne.w	800470e <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004350:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004354:	2b00      	cmp	r3, #0
 8004356:	f040 81da 	bne.w	800470e <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6819      	ldr	r1, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	461a      	mov	r2, r3
 8004368:	f7fe fef2 	bl	8003150 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	695a      	ldr	r2, [r3, #20]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	089b      	lsrs	r3, r3, #2
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b04      	cmp	r3, #4
 800438c:	d046      	beq.n	800441c <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6919      	ldr	r1, [r3, #16]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800439e:	f7fe fd2d 	bl	8002dfc <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	6919      	ldr	r1, [r3, #16]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	461a      	mov	r2, r3
 80043b0:	f7fe fd5b 	bl	8002e6a <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	7e9b      	ldrb	r3, [r3, #26]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d11e      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d102      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x17e>
 80043cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043d0:	e000      	b.n	80043d4 <HAL_ADC_ConfigChannel+0x180>
 80043d2:	2300      	movs	r3, #0
 80043d4:	461a      	mov	r2, r3
 80043d6:	f7fe fd7e 	bl	8002ed6 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d102      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x19c>
 80043ea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80043ee:	e000      	b.n	80043f2 <HAL_ADC_ConfigChannel+0x19e>
 80043f0:	2300      	movs	r3, #0
 80043f2:	461a      	mov	r2, r3
 80043f4:	f7fe fd54 	bl	8002ea0 <LL_ADC_SetOffsetSignedSaturation>
 80043f8:	e189      	b.n	800470e <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2200      	movs	r2, #0
 8004404:	4619      	mov	r1, r3
 8004406:	f7fe fd66 	bl	8002ed6 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	2200      	movs	r2, #0
 8004414:	4619      	mov	r1, r3
 8004416:	f7fe fd43 	bl	8002ea0 <LL_ADC_SetOffsetSignedSaturation>
 800441a:	e178      	b.n	800470e <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2100      	movs	r1, #0
 8004422:	4618      	mov	r0, r3
 8004424:	f7fe fd0b 	bl	8002e3e <LL_ADC_GetOffsetChannel>
 8004428:	4603      	mov	r3, r0
 800442a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10a      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x1f4>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2100      	movs	r1, #0
 8004438:	4618      	mov	r0, r3
 800443a:	f7fe fd00 	bl	8002e3e <LL_ADC_GetOffsetChannel>
 800443e:	4603      	mov	r3, r0
 8004440:	0e9b      	lsrs	r3, r3, #26
 8004442:	f003 021f 	and.w	r2, r3, #31
 8004446:	e01e      	b.n	8004486 <HAL_ADC_ConfigChannel+0x232>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2100      	movs	r1, #0
 800444e:	4618      	mov	r0, r3
 8004450:	f7fe fcf5 	bl	8002e3e <LL_ADC_GetOffsetChannel>
 8004454:	4603      	mov	r3, r0
 8004456:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800445e:	fa93 f3a3 	rbit	r3, r3
 8004462:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004466:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800446a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800446e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8004476:	2320      	movs	r3, #32
 8004478:	e004      	b.n	8004484 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 800447a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800447e:	fab3 f383 	clz	r3, r3
 8004482:	b2db      	uxtb	r3, r3
 8004484:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d105      	bne.n	800449e <HAL_ADC_ConfigChannel+0x24a>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	0e9b      	lsrs	r3, r3, #26
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	e018      	b.n	80044d0 <HAL_ADC_ConfigChannel+0x27c>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044aa:	fa93 f3a3 	rbit	r3, r3
 80044ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80044b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80044ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 80044c2:	2320      	movs	r3, #32
 80044c4:	e004      	b.n	80044d0 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 80044c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80044ca:	fab3 f383 	clz	r3, r3
 80044ce:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d107      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	2300      	movs	r3, #0
 80044de:	2100      	movs	r1, #0
 80044e0:	f7fe fc8c 	bl	8002dfc <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2101      	movs	r1, #1
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe fca7 	bl	8002e3e <LL_ADC_GetOffsetChannel>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10c      	bne.n	8004514 <HAL_ADC_ConfigChannel+0x2c0>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2101      	movs	r1, #1
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe fc9c 	bl	8002e3e <LL_ADC_GetOffsetChannel>
 8004506:	4603      	mov	r3, r0
 8004508:	0e9b      	lsrs	r3, r3, #26
 800450a:	f003 021f 	and.w	r2, r3, #31
 800450e:	e020      	b.n	8004552 <HAL_ADC_ConfigChannel+0x2fe>
 8004510:	46021000 	.word	0x46021000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2101      	movs	r1, #1
 800451a:	4618      	mov	r0, r3
 800451c:	f7fe fc8f 	bl	8002e3e <LL_ADC_GetOffsetChannel>
 8004520:	4603      	mov	r3, r0
 8004522:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800452a:	fa93 f3a3 	rbit	r3, r3
 800452e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004532:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004536:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800453a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8004542:	2320      	movs	r3, #32
 8004544:	e004      	b.n	8004550 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8004546:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800454a:	fab3 f383 	clz	r3, r3
 800454e:	b2db      	uxtb	r3, r3
 8004550:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d105      	bne.n	800456a <HAL_ADC_ConfigChannel+0x316>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	0e9b      	lsrs	r3, r3, #26
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	e018      	b.n	800459c <HAL_ADC_ConfigChannel+0x348>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004572:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004576:	fa93 f3a3 	rbit	r3, r3
 800457a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800457e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004582:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004586:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 800458e:	2320      	movs	r3, #32
 8004590:	e004      	b.n	800459c <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8004592:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004596:	fab3 f383 	clz	r3, r3
 800459a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800459c:	429a      	cmp	r2, r3
 800459e:	d107      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	2300      	movs	r3, #0
 80045aa:	2101      	movs	r1, #1
 80045ac:	f7fe fc26 	bl	8002dfc <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2102      	movs	r1, #2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fe fc41 	bl	8002e3e <LL_ADC_GetOffsetChannel>
 80045bc:	4603      	mov	r3, r0
 80045be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10a      	bne.n	80045dc <HAL_ADC_ConfigChannel+0x388>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2102      	movs	r1, #2
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fe fc36 	bl	8002e3e <LL_ADC_GetOffsetChannel>
 80045d2:	4603      	mov	r3, r0
 80045d4:	0e9b      	lsrs	r3, r3, #26
 80045d6:	f003 021f 	and.w	r2, r3, #31
 80045da:	e01a      	b.n	8004612 <HAL_ADC_ConfigChannel+0x3be>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2102      	movs	r1, #2
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fe fc2b 	bl	8002e3e <LL_ADC_GetOffsetChannel>
 80045e8:	4603      	mov	r3, r0
 80045ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045ee:	fa93 f3a3 	rbit	r3, r3
 80045f2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80045f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80045fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004602:	2320      	movs	r3, #32
 8004604:	e004      	b.n	8004610 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8004606:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800460a:	fab3 f383 	clz	r3, r3
 800460e:	b2db      	uxtb	r3, r3
 8004610:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d105      	bne.n	800462a <HAL_ADC_ConfigChannel+0x3d6>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	0e9b      	lsrs	r3, r3, #26
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	e011      	b.n	800464e <HAL_ADC_ConfigChannel+0x3fa>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004632:	fa93 f3a3 	rbit	r3, r3
 8004636:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004638:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800463a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800463c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004642:	2320      	movs	r3, #32
 8004644:	e003      	b.n	800464e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004646:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004648:	fab3 f383 	clz	r3, r3
 800464c:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800464e:	429a      	cmp	r2, r3
 8004650:	d107      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	2300      	movs	r3, #0
 800465c:	2102      	movs	r1, #2
 800465e:	f7fe fbcd 	bl	8002dfc <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2103      	movs	r1, #3
 8004668:	4618      	mov	r0, r3
 800466a:	f7fe fbe8 	bl	8002e3e <LL_ADC_GetOffsetChannel>
 800466e:	4603      	mov	r3, r0
 8004670:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <HAL_ADC_ConfigChannel+0x43a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2103      	movs	r1, #3
 800467e:	4618      	mov	r0, r3
 8004680:	f7fe fbdd 	bl	8002e3e <LL_ADC_GetOffsetChannel>
 8004684:	4603      	mov	r3, r0
 8004686:	0e9b      	lsrs	r3, r3, #26
 8004688:	f003 021f 	and.w	r2, r3, #31
 800468c:	e017      	b.n	80046be <HAL_ADC_ConfigChannel+0x46a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2103      	movs	r1, #3
 8004694:	4618      	mov	r0, r3
 8004696:	f7fe fbd2 	bl	8002e3e <LL_ADC_GetOffsetChannel>
 800469a:	4603      	mov	r3, r0
 800469c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046a0:	fa93 f3a3 	rbit	r3, r3
 80046a4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80046a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046a8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80046aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 80046b0:	2320      	movs	r3, #32
 80046b2:	e003      	b.n	80046bc <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 80046b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046b6:	fab3 f383 	clz	r3, r3
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d105      	bne.n	80046d6 <HAL_ADC_ConfigChannel+0x482>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	0e9b      	lsrs	r3, r3, #26
 80046d0:	f003 031f 	and.w	r3, r3, #31
 80046d4:	e011      	b.n	80046fa <HAL_ADC_ConfigChannel+0x4a6>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046de:	fa93 f3a3 	rbit	r3, r3
 80046e2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80046e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80046e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 80046ee:	2320      	movs	r3, #32
 80046f0:	e003      	b.n	80046fa <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 80046f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046f4:	fab3 f383 	clz	r3, r3
 80046f8:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d107      	bne.n	800470e <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	2300      	movs	r3, #0
 8004708:	2103      	movs	r1, #3
 800470a:	f7fe fb77 	bl	8002dfc <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f7fe fe22 	bl	800335c <LL_ADC_IsEnabled>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	f040 83ad 	bne.w	8004e7a <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6818      	ldr	r0, [r3, #0]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	6819      	ldr	r1, [r3, #0]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	461a      	mov	r2, r3
 800472e:	f7fe fd73 	bl	8003218 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800473a:	f040 80d6 	bne.w	80048ea <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10b      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x50e>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	0e9b      	lsrs	r3, r3, #26
 8004750:	3301      	adds	r3, #1
 8004752:	f003 031f 	and.w	r3, r3, #31
 8004756:	2b09      	cmp	r3, #9
 8004758:	bf94      	ite	ls
 800475a:	2301      	movls	r3, #1
 800475c:	2300      	movhi	r3, #0
 800475e:	b2db      	uxtb	r3, r3
 8004760:	e019      	b.n	8004796 <HAL_ADC_ConfigChannel+0x542>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800476a:	fa93 f3a3 	rbit	r3, r3
 800476e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004770:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004772:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004774:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800477a:	2320      	movs	r3, #32
 800477c:	e003      	b.n	8004786 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800477e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004780:	fab3 f383 	clz	r3, r3
 8004784:	b2db      	uxtb	r3, r3
 8004786:	3301      	adds	r3, #1
 8004788:	f003 031f 	and.w	r3, r3, #31
 800478c:	2b09      	cmp	r3, #9
 800478e:	bf94      	ite	ls
 8004790:	2301      	movls	r3, #1
 8004792:	2300      	movhi	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d04d      	beq.n	8004836 <HAL_ADC_ConfigChannel+0x5e2>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d107      	bne.n	80047b6 <HAL_ADC_ConfigChannel+0x562>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	0e9b      	lsrs	r3, r3, #26
 80047ac:	3301      	adds	r3, #1
 80047ae:	069b      	lsls	r3, r3, #26
 80047b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047b4:	e015      	b.n	80047e2 <HAL_ADC_ConfigChannel+0x58e>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047be:	fa93 f3a3 	rbit	r3, r3
 80047c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80047c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047c6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80047c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80047ce:	2320      	movs	r3, #32
 80047d0:	e003      	b.n	80047da <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80047d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047d4:	fab3 f383 	clz	r3, r3
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	3301      	adds	r3, #1
 80047dc:	069b      	lsls	r3, r3, #26
 80047de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d109      	bne.n	8004802 <HAL_ADC_ConfigChannel+0x5ae>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	0e9b      	lsrs	r3, r3, #26
 80047f4:	3301      	adds	r3, #1
 80047f6:	f003 031f 	and.w	r3, r3, #31
 80047fa:	2101      	movs	r1, #1
 80047fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004800:	e017      	b.n	8004832 <HAL_ADC_ConfigChannel+0x5de>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480a:	fa93 f3a3 	rbit	r3, r3
 800480e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004812:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 800481a:	2320      	movs	r3, #32
 800481c:	e003      	b.n	8004826 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 800481e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004820:	fab3 f383 	clz	r3, r3
 8004824:	b2db      	uxtb	r3, r3
 8004826:	3301      	adds	r3, #1
 8004828:	f003 031f 	and.w	r3, r3, #31
 800482c:	2101      	movs	r1, #1
 800482e:	fa01 f303 	lsl.w	r3, r1, r3
 8004832:	4313      	orrs	r3, r2
 8004834:	e04e      	b.n	80048d4 <HAL_ADC_ConfigChannel+0x680>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d107      	bne.n	8004852 <HAL_ADC_ConfigChannel+0x5fe>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	0e9b      	lsrs	r3, r3, #26
 8004848:	3301      	adds	r3, #1
 800484a:	069b      	lsls	r3, r3, #26
 800484c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004850:	e015      	b.n	800487e <HAL_ADC_ConfigChannel+0x62a>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485a:	fa93 f3a3 	rbit	r3, r3
 800485e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 800486a:	2320      	movs	r3, #32
 800486c:	e003      	b.n	8004876 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 800486e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004870:	fab3 f383 	clz	r3, r3
 8004874:	b2db      	uxtb	r3, r3
 8004876:	3301      	adds	r3, #1
 8004878:	069b      	lsls	r3, r3, #26
 800487a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d109      	bne.n	800489e <HAL_ADC_ConfigChannel+0x64a>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	0e9b      	lsrs	r3, r3, #26
 8004890:	3301      	adds	r3, #1
 8004892:	f003 031f 	and.w	r3, r3, #31
 8004896:	2101      	movs	r1, #1
 8004898:	fa01 f303 	lsl.w	r3, r1, r3
 800489c:	e017      	b.n	80048ce <HAL_ADC_ConfigChannel+0x67a>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	fa93 f3a3 	rbit	r3, r3
 80048aa:	61bb      	str	r3, [r7, #24]
  return result;
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 80048b6:	2320      	movs	r3, #32
 80048b8:	e003      	b.n	80048c2 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	fab3 f383 	clz	r3, r3
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	3301      	adds	r3, #1
 80048c4:	f003 031f 	and.w	r3, r3, #31
 80048c8:	2101      	movs	r1, #1
 80048ca:	fa01 f303 	lsl.w	r3, r1, r3
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80048d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	461a      	mov	r2, r3
 80048e2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80048e6:	f7fe fc33 	bl	8003150 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f280 82c3 	bge.w	8004e7a <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a92      	ldr	r2, [pc, #584]	@ (8004b44 <HAL_ADC_ConfigChannel+0x8f0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d004      	beq.n	8004908 <HAL_ADC_ConfigChannel+0x6b4>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a91      	ldr	r2, [pc, #580]	@ (8004b48 <HAL_ADC_ConfigChannel+0x8f4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d101      	bne.n	800490c <HAL_ADC_ConfigChannel+0x6b8>
 8004908:	4b90      	ldr	r3, [pc, #576]	@ (8004b4c <HAL_ADC_ConfigChannel+0x8f8>)
 800490a:	e000      	b.n	800490e <HAL_ADC_ConfigChannel+0x6ba>
 800490c:	4b90      	ldr	r3, [pc, #576]	@ (8004b50 <HAL_ADC_ConfigChannel+0x8fc>)
 800490e:	4618      	mov	r0, r3
 8004910:	f7fe fa46 	bl	8002da0 <LL_ADC_GetCommonPathInternalCh>
 8004914:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a89      	ldr	r2, [pc, #548]	@ (8004b44 <HAL_ADC_ConfigChannel+0x8f0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_ADC_ConfigChannel+0x6d8>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a88      	ldr	r2, [pc, #544]	@ (8004b48 <HAL_ADC_ConfigChannel+0x8f4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d10e      	bne.n	800494a <HAL_ADC_ConfigChannel+0x6f6>
 800492c:	4885      	ldr	r0, [pc, #532]	@ (8004b44 <HAL_ADC_ConfigChannel+0x8f0>)
 800492e:	f7fe fd15 	bl	800335c <LL_ADC_IsEnabled>
 8004932:	4604      	mov	r4, r0
 8004934:	4884      	ldr	r0, [pc, #528]	@ (8004b48 <HAL_ADC_ConfigChannel+0x8f4>)
 8004936:	f7fe fd11 	bl	800335c <LL_ADC_IsEnabled>
 800493a:	4603      	mov	r3, r0
 800493c:	4323      	orrs	r3, r4
 800493e:	2b00      	cmp	r3, #0
 8004940:	bf0c      	ite	eq
 8004942:	2301      	moveq	r3, #1
 8004944:	2300      	movne	r3, #0
 8004946:	b2db      	uxtb	r3, r3
 8004948:	e008      	b.n	800495c <HAL_ADC_ConfigChannel+0x708>
 800494a:	4882      	ldr	r0, [pc, #520]	@ (8004b54 <HAL_ADC_ConfigChannel+0x900>)
 800494c:	f7fe fd06 	bl	800335c <LL_ADC_IsEnabled>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	bf0c      	ite	eq
 8004956:	2301      	moveq	r3, #1
 8004958:	2300      	movne	r3, #0
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80a6 	beq.w	8004aae <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a7c      	ldr	r2, [pc, #496]	@ (8004b58 <HAL_ADC_ConfigChannel+0x904>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d13c      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800496c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004970:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d136      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a71      	ldr	r2, [pc, #452]	@ (8004b44 <HAL_ADC_ConfigChannel+0x8f0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00a      	beq.n	8004998 <HAL_ADC_ConfigChannel+0x744>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a70      	ldr	r2, [pc, #448]	@ (8004b48 <HAL_ADC_ConfigChannel+0x8f4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d005      	beq.n	8004998 <HAL_ADC_ConfigChannel+0x744>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a70      	ldr	r2, [pc, #448]	@ (8004b54 <HAL_ADC_ConfigChannel+0x900>)
 8004992:	4293      	cmp	r3, r2
 8004994:	f040 826e 	bne.w	8004e74 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a69      	ldr	r2, [pc, #420]	@ (8004b44 <HAL_ADC_ConfigChannel+0x8f0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d004      	beq.n	80049ac <HAL_ADC_ConfigChannel+0x758>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a68      	ldr	r2, [pc, #416]	@ (8004b48 <HAL_ADC_ConfigChannel+0x8f4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d101      	bne.n	80049b0 <HAL_ADC_ConfigChannel+0x75c>
 80049ac:	4a67      	ldr	r2, [pc, #412]	@ (8004b4c <HAL_ADC_ConfigChannel+0x8f8>)
 80049ae:	e000      	b.n	80049b2 <HAL_ADC_ConfigChannel+0x75e>
 80049b0:	4a67      	ldr	r2, [pc, #412]	@ (8004b50 <HAL_ADC_ConfigChannel+0x8fc>)
 80049b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049ba:	4619      	mov	r1, r3
 80049bc:	4610      	mov	r0, r2
 80049be:	f7fe f9dc 	bl	8002d7a <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049c2:	4b66      	ldr	r3, [pc, #408]	@ (8004b5c <HAL_ADC_ConfigChannel+0x908>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	099b      	lsrs	r3, r3, #6
 80049c8:	4a65      	ldr	r2, [pc, #404]	@ (8004b60 <HAL_ADC_ConfigChannel+0x90c>)
 80049ca:	fba2 2303 	umull	r2, r3, r2, r3
 80049ce:	099b      	lsrs	r3, r3, #6
 80049d0:	3301      	adds	r3, #1
 80049d2:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80049d4:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80049d6:	e002      	b.n	80049de <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	3b01      	subs	r3, #1
 80049dc:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1f9      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049e4:	e246      	b.n	8004e74 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a5e      	ldr	r2, [pc, #376]	@ (8004b64 <HAL_ADC_ConfigChannel+0x910>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d12b      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80049f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d125      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a50      	ldr	r2, [pc, #320]	@ (8004b44 <HAL_ADC_ConfigChannel+0x8f0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00a      	beq.n	8004a1c <HAL_ADC_ConfigChannel+0x7c8>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a4f      	ldr	r2, [pc, #316]	@ (8004b48 <HAL_ADC_ConfigChannel+0x8f4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d005      	beq.n	8004a1c <HAL_ADC_ConfigChannel+0x7c8>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a4f      	ldr	r2, [pc, #316]	@ (8004b54 <HAL_ADC_ConfigChannel+0x900>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	f040 822e 	bne.w	8004e78 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a48      	ldr	r2, [pc, #288]	@ (8004b44 <HAL_ADC_ConfigChannel+0x8f0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d004      	beq.n	8004a30 <HAL_ADC_ConfigChannel+0x7dc>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a47      	ldr	r2, [pc, #284]	@ (8004b48 <HAL_ADC_ConfigChannel+0x8f4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d101      	bne.n	8004a34 <HAL_ADC_ConfigChannel+0x7e0>
 8004a30:	4a46      	ldr	r2, [pc, #280]	@ (8004b4c <HAL_ADC_ConfigChannel+0x8f8>)
 8004a32:	e000      	b.n	8004a36 <HAL_ADC_ConfigChannel+0x7e2>
 8004a34:	4a46      	ldr	r2, [pc, #280]	@ (8004b50 <HAL_ADC_ConfigChannel+0x8fc>)
 8004a36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4610      	mov	r0, r2
 8004a42:	f7fe f99a 	bl	8002d7a <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a46:	e217      	b.n	8004e78 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a46      	ldr	r2, [pc, #280]	@ (8004b68 <HAL_ADC_ConfigChannel+0x914>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	f040 8213 	bne.w	8004e7a <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f040 820c 	bne.w	8004e7a <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a37      	ldr	r2, [pc, #220]	@ (8004b44 <HAL_ADC_ConfigChannel+0x8f0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00a      	beq.n	8004a82 <HAL_ADC_ConfigChannel+0x82e>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a35      	ldr	r2, [pc, #212]	@ (8004b48 <HAL_ADC_ConfigChannel+0x8f4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d005      	beq.n	8004a82 <HAL_ADC_ConfigChannel+0x82e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a36      	ldr	r2, [pc, #216]	@ (8004b54 <HAL_ADC_ConfigChannel+0x900>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	f040 81fc 	bne.w	8004e7a <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a2f      	ldr	r2, [pc, #188]	@ (8004b44 <HAL_ADC_ConfigChannel+0x8f0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d004      	beq.n	8004a96 <HAL_ADC_ConfigChannel+0x842>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a2d      	ldr	r2, [pc, #180]	@ (8004b48 <HAL_ADC_ConfigChannel+0x8f4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d101      	bne.n	8004a9a <HAL_ADC_ConfigChannel+0x846>
 8004a96:	4a2d      	ldr	r2, [pc, #180]	@ (8004b4c <HAL_ADC_ConfigChannel+0x8f8>)
 8004a98:	e000      	b.n	8004a9c <HAL_ADC_ConfigChannel+0x848>
 8004a9a:	4a2d      	ldr	r2, [pc, #180]	@ (8004b50 <HAL_ADC_ConfigChannel+0x8fc>)
 8004a9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004aa0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	f7fe f967 	bl	8002d7a <LL_ADC_SetCommonPathInternalCh>
 8004aac:	e1e5      	b.n	8004e7a <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ab2:	f043 0220 	orr.w	r2, r3, #32
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004ac0:	e1db      	b.n	8004e7a <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	f000 811b 	beq.w	8004d0a <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004adc:	d004      	beq.n	8004ae8 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004ae2:	4a22      	ldr	r2, [pc, #136]	@ (8004b6c <HAL_ADC_ConfigChannel+0x918>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d107      	bne.n	8004af8 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fe fac1 	bl	8003078 <LL_ADC_REG_SetSequencerChAdd>
 8004af6:	e059      	b.n	8004bac <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f003 031f 	and.w	r3, r3, #31
 8004b06:	210f      	movs	r1, #15
 8004b08:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	401a      	ands	r2, r3
 8004b10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004b14:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d105      	bne.n	8004b28 <HAL_ADC_ConfigChannel+0x8d4>
 8004b1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004b20:	0e9b      	lsrs	r3, r3, #26
 8004b22:	f003 031f 	and.w	r3, r3, #31
 8004b26:	e027      	b.n	8004b78 <HAL_ADC_ConfigChannel+0x924>
 8004b28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004b2c:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	fa93 f3a3 	rbit	r3, r3
 8004b34:	60fb      	str	r3, [r7, #12]
  return result;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d117      	bne.n	8004b70 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8004b40:	2320      	movs	r3, #32
 8004b42:	e019      	b.n	8004b78 <HAL_ADC_ConfigChannel+0x924>
 8004b44:	42028000 	.word	0x42028000
 8004b48:	42028100 	.word	0x42028100
 8004b4c:	42028300 	.word	0x42028300
 8004b50:	46021300 	.word	0x46021300
 8004b54:	46021000 	.word	0x46021000
 8004b58:	ce080000 	.word	0xce080000
 8004b5c:	20000030 	.word	0x20000030
 8004b60:	053e2d63 	.word	0x053e2d63
 8004b64:	ca040000 	.word	0xca040000
 8004b68:	80000001 	.word	0x80000001
 8004b6c:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	fab3 f383 	clz	r3, r3
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	6839      	ldr	r1, [r7, #0]
 8004b7a:	6849      	ldr	r1, [r1, #4]
 8004b7c:	f001 011f 	and.w	r1, r1, #31
 8004b80:	408b      	lsls	r3, r1
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	089b      	lsrs	r3, r3, #2
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d808      	bhi.n	8004bac <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	f7fe fa06 	bl	8002fb8 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004bba:	f7fe fac9 	bl	8003150 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f280 8159 	bge.w	8004e7a <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a9b      	ldr	r2, [pc, #620]	@ (8004e3c <HAL_ADC_ConfigChannel+0xbe8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d004      	beq.n	8004bdc <HAL_ADC_ConfigChannel+0x988>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a9a      	ldr	r2, [pc, #616]	@ (8004e40 <HAL_ADC_ConfigChannel+0xbec>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d101      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0x98c>
 8004bdc:	4b99      	ldr	r3, [pc, #612]	@ (8004e44 <HAL_ADC_ConfigChannel+0xbf0>)
 8004bde:	e000      	b.n	8004be2 <HAL_ADC_ConfigChannel+0x98e>
 8004be0:	4b99      	ldr	r3, [pc, #612]	@ (8004e48 <HAL_ADC_ConfigChannel+0xbf4>)
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fe f8dc 	bl	8002da0 <LL_ADC_GetCommonPathInternalCh>
 8004be8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a96      	ldr	r2, [pc, #600]	@ (8004e4c <HAL_ADC_ConfigChannel+0xbf8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d12b      	bne.n	8004c4e <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004bf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d125      	bne.n	8004c4e <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a8d      	ldr	r2, [pc, #564]	@ (8004e3c <HAL_ADC_ConfigChannel+0xbe8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d004      	beq.n	8004c16 <HAL_ADC_ConfigChannel+0x9c2>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a8b      	ldr	r2, [pc, #556]	@ (8004e40 <HAL_ADC_ConfigChannel+0xbec>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d101      	bne.n	8004c1a <HAL_ADC_ConfigChannel+0x9c6>
 8004c16:	4a8b      	ldr	r2, [pc, #556]	@ (8004e44 <HAL_ADC_ConfigChannel+0xbf0>)
 8004c18:	e000      	b.n	8004c1c <HAL_ADC_ConfigChannel+0x9c8>
 8004c1a:	4a8b      	ldr	r2, [pc, #556]	@ (8004e48 <HAL_ADC_ConfigChannel+0xbf4>)
 8004c1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c24:	4619      	mov	r1, r3
 8004c26:	4610      	mov	r0, r2
 8004c28:	f7fe f8a7 	bl	8002d7a <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004c2c:	4b88      	ldr	r3, [pc, #544]	@ (8004e50 <HAL_ADC_ConfigChannel+0xbfc>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	099b      	lsrs	r3, r3, #6
 8004c32:	4a88      	ldr	r2, [pc, #544]	@ (8004e54 <HAL_ADC_ConfigChannel+0xc00>)
 8004c34:	fba2 2303 	umull	r2, r3, r2, r3
 8004c38:	099b      	lsrs	r3, r3, #6
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004c3e:	e002      	b.n	8004c46 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1f9      	bne.n	8004c40 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004c4c:	e045      	b.n	8004cda <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a81      	ldr	r2, [pc, #516]	@ (8004e58 <HAL_ADC_ConfigChannel+0xc04>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d11b      	bne.n	8004c90 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d115      	bne.n	8004c90 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a74      	ldr	r2, [pc, #464]	@ (8004e3c <HAL_ADC_ConfigChannel+0xbe8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <HAL_ADC_ConfigChannel+0xa24>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a73      	ldr	r2, [pc, #460]	@ (8004e40 <HAL_ADC_ConfigChannel+0xbec>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d101      	bne.n	8004c7c <HAL_ADC_ConfigChannel+0xa28>
 8004c78:	4a72      	ldr	r2, [pc, #456]	@ (8004e44 <HAL_ADC_ConfigChannel+0xbf0>)
 8004c7a:	e000      	b.n	8004c7e <HAL_ADC_ConfigChannel+0xa2a>
 8004c7c:	4a72      	ldr	r2, [pc, #456]	@ (8004e48 <HAL_ADC_ConfigChannel+0xbf4>)
 8004c7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c86:	4619      	mov	r1, r3
 8004c88:	4610      	mov	r0, r2
 8004c8a:	f7fe f876 	bl	8002d7a <LL_ADC_SetCommonPathInternalCh>
 8004c8e:	e024      	b.n	8004cda <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a71      	ldr	r2, [pc, #452]	@ (8004e5c <HAL_ADC_ConfigChannel+0xc08>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d11f      	bne.n	8004cda <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d115      	bne.n	8004cd2 <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a64      	ldr	r2, [pc, #400]	@ (8004e3c <HAL_ADC_ConfigChannel+0xbe8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d004      	beq.n	8004cba <HAL_ADC_ConfigChannel+0xa66>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a62      	ldr	r2, [pc, #392]	@ (8004e40 <HAL_ADC_ConfigChannel+0xbec>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d101      	bne.n	8004cbe <HAL_ADC_ConfigChannel+0xa6a>
 8004cba:	4a62      	ldr	r2, [pc, #392]	@ (8004e44 <HAL_ADC_ConfigChannel+0xbf0>)
 8004cbc:	e000      	b.n	8004cc0 <HAL_ADC_ConfigChannel+0xa6c>
 8004cbe:	4a62      	ldr	r2, [pc, #392]	@ (8004e48 <HAL_ADC_ConfigChannel+0xbf4>)
 8004cc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cc4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4610      	mov	r0, r2
 8004ccc:	f7fe f855 	bl	8002d7a <LL_ADC_SetCommonPathInternalCh>
 8004cd0:	e003      	b.n	8004cda <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a62      	ldr	r2, [pc, #392]	@ (8004e60 <HAL_ADC_ConfigChannel+0xc0c>)
 8004cd8:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a61      	ldr	r2, [pc, #388]	@ (8004e64 <HAL_ADC_ConfigChannel+0xc10>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	f040 80ca 	bne.w	8004e7a <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ce6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f040 80c3 	bne.w	8004e7a <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0201 	orr.w	r2, r2, #1
 8004d04:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004d08:	e0b7      	b.n	8004e7a <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d12:	d004      	beq.n	8004d1e <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004d18:	4a53      	ldr	r2, [pc, #332]	@ (8004e68 <HAL_ADC_ConfigChannel+0xc14>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d106      	bne.n	8004d2c <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fe f9d9 	bl	80030de <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f280 80a2 	bge.w	8004e7a <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a40      	ldr	r2, [pc, #256]	@ (8004e3c <HAL_ADC_ConfigChannel+0xbe8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d004      	beq.n	8004d4a <HAL_ADC_ConfigChannel+0xaf6>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a3e      	ldr	r2, [pc, #248]	@ (8004e40 <HAL_ADC_ConfigChannel+0xbec>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d101      	bne.n	8004d4e <HAL_ADC_ConfigChannel+0xafa>
 8004d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e44 <HAL_ADC_ConfigChannel+0xbf0>)
 8004d4c:	e000      	b.n	8004d50 <HAL_ADC_ConfigChannel+0xafc>
 8004d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e48 <HAL_ADC_ConfigChannel+0xbf4>)
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fe f825 	bl	8002da0 <LL_ADC_GetCommonPathInternalCh>
 8004d56:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a43      	ldr	r2, [pc, #268]	@ (8004e6c <HAL_ADC_ConfigChannel+0xc18>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d115      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a34      	ldr	r2, [pc, #208]	@ (8004e3c <HAL_ADC_ConfigChannel+0xbe8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <HAL_ADC_ConfigChannel+0xb24>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a33      	ldr	r2, [pc, #204]	@ (8004e40 <HAL_ADC_ConfigChannel+0xbec>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d101      	bne.n	8004d7c <HAL_ADC_ConfigChannel+0xb28>
 8004d78:	4a32      	ldr	r2, [pc, #200]	@ (8004e44 <HAL_ADC_ConfigChannel+0xbf0>)
 8004d7a:	e000      	b.n	8004d7e <HAL_ADC_ConfigChannel+0xb2a>
 8004d7c:	4a32      	ldr	r2, [pc, #200]	@ (8004e48 <HAL_ADC_ConfigChannel+0xbf4>)
 8004d7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d82:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004d86:	4619      	mov	r1, r3
 8004d88:	4610      	mov	r0, r2
 8004d8a:	f7fd fff6 	bl	8002d7a <LL_ADC_SetCommonPathInternalCh>
 8004d8e:	e034      	b.n	8004dfa <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a36      	ldr	r2, [pc, #216]	@ (8004e70 <HAL_ADC_ConfigChannel+0xc1c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d115      	bne.n	8004dc6 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a27      	ldr	r2, [pc, #156]	@ (8004e3c <HAL_ADC_ConfigChannel+0xbe8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d004      	beq.n	8004dae <HAL_ADC_ConfigChannel+0xb5a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a25      	ldr	r2, [pc, #148]	@ (8004e40 <HAL_ADC_ConfigChannel+0xbec>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d101      	bne.n	8004db2 <HAL_ADC_ConfigChannel+0xb5e>
 8004dae:	4a25      	ldr	r2, [pc, #148]	@ (8004e44 <HAL_ADC_ConfigChannel+0xbf0>)
 8004db0:	e000      	b.n	8004db4 <HAL_ADC_ConfigChannel+0xb60>
 8004db2:	4a25      	ldr	r2, [pc, #148]	@ (8004e48 <HAL_ADC_ConfigChannel+0xbf4>)
 8004db4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004db8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f7fd ffdb 	bl	8002d7a <LL_ADC_SetCommonPathInternalCh>
 8004dc4:	e019      	b.n	8004dfa <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a24      	ldr	r2, [pc, #144]	@ (8004e5c <HAL_ADC_ConfigChannel+0xc08>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d114      	bne.n	8004dfa <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a19      	ldr	r2, [pc, #100]	@ (8004e3c <HAL_ADC_ConfigChannel+0xbe8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d004      	beq.n	8004de4 <HAL_ADC_ConfigChannel+0xb90>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a18      	ldr	r2, [pc, #96]	@ (8004e40 <HAL_ADC_ConfigChannel+0xbec>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d101      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0xb94>
 8004de4:	4a17      	ldr	r2, [pc, #92]	@ (8004e44 <HAL_ADC_ConfigChannel+0xbf0>)
 8004de6:	e000      	b.n	8004dea <HAL_ADC_ConfigChannel+0xb96>
 8004de8:	4a17      	ldr	r2, [pc, #92]	@ (8004e48 <HAL_ADC_ConfigChannel+0xbf4>)
 8004dea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dee:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004df2:	4619      	mov	r1, r3
 8004df4:	4610      	mov	r0, r2
 8004df6:	f7fd ffc0 	bl	8002d7a <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a19      	ldr	r2, [pc, #100]	@ (8004e64 <HAL_ADC_ConfigChannel+0xc10>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d13a      	bne.n	8004e7a <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d134      	bne.n	8004e7a <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 0201 	orr.w	r2, r2, #1
 8004e20:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004e24:	e029      	b.n	8004e7a <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e2a:	f043 0220 	orr.w	r2, r3, #32
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004e38:	e01f      	b.n	8004e7a <HAL_ADC_ConfigChannel+0xc26>
 8004e3a:	bf00      	nop
 8004e3c:	42028000 	.word	0x42028000
 8004e40:	42028100 	.word	0x42028100
 8004e44:	42028300 	.word	0x42028300
 8004e48:	46021300 	.word	0x46021300
 8004e4c:	b6002000 	.word	0xb6002000
 8004e50:	20000030 	.word	0x20000030
 8004e54:	053e2d63 	.word	0x053e2d63
 8004e58:	ba004000 	.word	0xba004000
 8004e5c:	80000001 	.word	0x80000001
 8004e60:	b2001000 	.word	0xb2001000
 8004e64:	d7200000 	.word	0xd7200000
 8004e68:	80000010 	.word	0x80000010
 8004e6c:	ce080000 	.word	0xce080000
 8004e70:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e74:	bf00      	nop
 8004e76:	e000      	b.n	8004e7a <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e78:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004e82:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	37dc      	adds	r7, #220	@ 0xdc
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd90      	pop	{r4, r7, pc}
 8004e8e:	bf00      	nop

08004e90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fe fa5d 	bl	800335c <LL_ADC_IsEnabled>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d17b      	bne.n	8004fa0 <ADC_Enable+0x110>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	4b3f      	ldr	r3, [pc, #252]	@ (8004fac <ADC_Enable+0x11c>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00d      	beq.n	8004ed2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004eba:	f043 0210 	orr.w	r2, r3, #16
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ec6:	f043 0201 	orr.w	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e067      	b.n	8004fa2 <ADC_Enable+0x112>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fe fa28 	bl	8003334 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d004      	beq.n	8004ef6 <ADC_Enable+0x66>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a2f      	ldr	r2, [pc, #188]	@ (8004fb0 <ADC_Enable+0x120>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d054      	beq.n	8004fa0 <ADC_Enable+0x110>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004ef6:	f7fd fed5 	bl	8002ca4 <HAL_GetTick>
 8004efa:	60f8      	str	r0, [r7, #12]
      /* Poll for ADC ready flag raised except case of multimode enabled
        and ADC slave selected. */
#if defined(ADC_MULTIMODE_SUPPORT)
      uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a2c      	ldr	r2, [pc, #176]	@ (8004fb4 <ADC_Enable+0x124>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d004      	beq.n	8004f10 <ADC_Enable+0x80>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a2b      	ldr	r2, [pc, #172]	@ (8004fb8 <ADC_Enable+0x128>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d101      	bne.n	8004f14 <ADC_Enable+0x84>
 8004f10:	4b2a      	ldr	r3, [pc, #168]	@ (8004fbc <ADC_Enable+0x12c>)
 8004f12:	e000      	b.n	8004f16 <ADC_Enable+0x86>
 8004f14:	4b2a      	ldr	r3, [pc, #168]	@ (8004fc0 <ADC_Enable+0x130>)
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fe f9a2 	bl	8003260 <LL_ADC_GetMultimode>
 8004f1c:	60b8      	str	r0, [r7, #8]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a25      	ldr	r2, [pc, #148]	@ (8004fb8 <ADC_Enable+0x128>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d002      	beq.n	8004f2e <ADC_Enable+0x9e>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	e000      	b.n	8004f30 <ADC_Enable+0xa0>
 8004f2e:	4b21      	ldr	r3, [pc, #132]	@ (8004fb4 <ADC_Enable+0x124>)
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d02c      	beq.n	8004f92 <ADC_Enable+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d130      	bne.n	8004fa0 <ADC_Enable+0x110>
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f3e:	e028      	b.n	8004f92 <ADC_Enable+0x102>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fe fa09 	bl	800335c <LL_ADC_IsEnabled>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d104      	bne.n	8004f5a <ADC_Enable+0xca>
          {
            LL_ADC_Enable(hadc->Instance);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fe f9ed 	bl	8003334 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f5a:	f7fd fea3 	bl	8002ca4 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d914      	bls.n	8004f92 <ADC_Enable+0x102>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d00d      	beq.n	8004f92 <ADC_Enable+0x102>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f7a:	f043 0210 	orr.w	r2, r3, #16
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f86:	f043 0201 	orr.w	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e007      	b.n	8004fa2 <ADC_Enable+0x112>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d1cf      	bne.n	8004f40 <ADC_Enable+0xb0>
        }
      }
    }
  }

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	8000003f 	.word	0x8000003f
 8004fb0:	46021000 	.word	0x46021000
 8004fb4:	42028000 	.word	0x42028000
 8004fb8:	42028100 	.word	0x42028100
 8004fbc:	42028300 	.word	0x42028300
 8004fc0:	46021300 	.word	0x46021300

08004fc4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fd6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d14b      	bne.n	8005076 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fe2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d021      	beq.n	800503c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fd ffc7 	bl	8002f90 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d032      	beq.n	800506e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d12b      	bne.n	800506e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800501a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005026:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d11f      	bne.n	800506e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005032:	f043 0201 	orr.w	r2, r3, #1
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	679a      	str	r2, [r3, #120]	@ 0x78
 800503a:	e018      	b.n	800506e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d111      	bne.n	800506e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800504e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800505a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d105      	bne.n	800506e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005066:	f043 0201 	orr.w	r2, r3, #1
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f7ff f8aa 	bl	80041c8 <HAL_ADC_ConvCpltCallback>
      /* Call ADC DMA error callback */
        HAL_ADC_ConvCpltCallback(hadc);
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005074:	e011      	b.n	800509a <ADC_DMAConvCplt+0xd6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800507a:	f003 0310 	and.w	r3, r3, #16
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f7ff f8be 	bl	8004204 <HAL_ADC_ErrorCallback>
}
 8005088:	e007      	b.n	800509a <ADC_DMAConvCplt+0xd6>
        HAL_ADC_ConvCpltCallback(hadc);
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7ff f89c 	bl	80041c8 <HAL_ADC_ConvCpltCallback>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005094:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	4798      	blx	r3
}
 800509a:	bf00      	nop
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f7ff f893 	bl	80041dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050b6:	bf00      	nop
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050dc:	f043 0204 	orr.w	r2, r3, #4
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7ff f88d 	bl	8004204 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050ea:	bf00      	nop
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
	...

08005144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005154:	4b0c      	ldr	r3, [pc, #48]	@ (8005188 <__NVIC_SetPriorityGrouping+0x44>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005160:	4013      	ands	r3, r2
 8005162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800516c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005176:	4a04      	ldr	r2, [pc, #16]	@ (8005188 <__NVIC_SetPriorityGrouping+0x44>)
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	60d3      	str	r3, [r2, #12]
}
 800517c:	bf00      	nop
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	e000ed00 	.word	0xe000ed00

0800518c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005190:	4b04      	ldr	r3, [pc, #16]	@ (80051a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	0a1b      	lsrs	r3, r3, #8
 8005196:	f003 0307 	and.w	r3, r3, #7
}
 800519a:	4618      	mov	r0, r3
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	e000ed00 	.word	0xe000ed00

080051a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	db0b      	blt.n	80051d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051ba:	88fb      	ldrh	r3, [r7, #6]
 80051bc:	f003 021f 	and.w	r2, r3, #31
 80051c0:	4907      	ldr	r1, [pc, #28]	@ (80051e0 <__NVIC_EnableIRQ+0x38>)
 80051c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	2001      	movs	r0, #1
 80051ca:	fa00 f202 	lsl.w	r2, r0, r2
 80051ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	e000e100 	.word	0xe000e100

080051e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	4603      	mov	r3, r0
 80051ec:	6039      	str	r1, [r7, #0]
 80051ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	db0a      	blt.n	800520e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	490c      	ldr	r1, [pc, #48]	@ (8005230 <__NVIC_SetPriority+0x4c>)
 80051fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005202:	0112      	lsls	r2, r2, #4
 8005204:	b2d2      	uxtb	r2, r2
 8005206:	440b      	add	r3, r1
 8005208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800520c:	e00a      	b.n	8005224 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	b2da      	uxtb	r2, r3
 8005212:	4908      	ldr	r1, [pc, #32]	@ (8005234 <__NVIC_SetPriority+0x50>)
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	3b04      	subs	r3, #4
 800521c:	0112      	lsls	r2, r2, #4
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	440b      	add	r3, r1
 8005222:	761a      	strb	r2, [r3, #24]
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	e000e100 	.word	0xe000e100
 8005234:	e000ed00 	.word	0xe000ed00

08005238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005238:	b480      	push	{r7}
 800523a:	b089      	sub	sp, #36	@ 0x24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f1c3 0307 	rsb	r3, r3, #7
 8005252:	2b04      	cmp	r3, #4
 8005254:	bf28      	it	cs
 8005256:	2304      	movcs	r3, #4
 8005258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	3304      	adds	r3, #4
 800525e:	2b06      	cmp	r3, #6
 8005260:	d902      	bls.n	8005268 <NVIC_EncodePriority+0x30>
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	3b03      	subs	r3, #3
 8005266:	e000      	b.n	800526a <NVIC_EncodePriority+0x32>
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800526c:	f04f 32ff 	mov.w	r2, #4294967295
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	fa02 f303 	lsl.w	r3, r2, r3
 8005276:	43da      	mvns	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	401a      	ands	r2, r3
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005280:	f04f 31ff 	mov.w	r1, #4294967295
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	fa01 f303 	lsl.w	r3, r1, r3
 800528a:	43d9      	mvns	r1, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005290:	4313      	orrs	r3, r2
         );
}
 8005292:	4618      	mov	r0, r3
 8005294:	3724      	adds	r7, #36	@ 0x24
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff ff4c 	bl	8005144 <__NVIC_SetPriorityGrouping>
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	4603      	mov	r3, r0
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052c2:	f7ff ff63 	bl	800518c <__NVIC_GetPriorityGrouping>
 80052c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	6978      	ldr	r0, [r7, #20]
 80052ce:	f7ff ffb3 	bl	8005238 <NVIC_EncodePriority>
 80052d2:	4602      	mov	r2, r0
 80052d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052d8:	4611      	mov	r1, r2
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff ff82 	bl	80051e4 <__NVIC_SetPriority>
}
 80052e0:	bf00      	nop
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff ff56 	bl	80051a8 <__NVIC_EnableIRQ>
}
 80052fc:	bf00      	nop
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3b01      	subs	r3, #1
 8005310:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005314:	d301      	bcc.n	800531a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8005316:	2301      	movs	r3, #1
 8005318:	e00d      	b.n	8005336 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800531a:	4a0a      	ldr	r2, [pc, #40]	@ (8005344 <HAL_SYSTICK_Config+0x40>)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3b01      	subs	r3, #1
 8005320:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8005322:	4b08      	ldr	r3, [pc, #32]	@ (8005344 <HAL_SYSTICK_Config+0x40>)
 8005324:	2200      	movs	r2, #0
 8005326:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8005328:	4b06      	ldr	r3, [pc, #24]	@ (8005344 <HAL_SYSTICK_Config+0x40>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a05      	ldr	r2, [pc, #20]	@ (8005344 <HAL_SYSTICK_Config+0x40>)
 800532e:	f043 0303 	orr.w	r3, r3, #3
 8005332:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	e000e010 	.word	0xe000e010

08005348 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b04      	cmp	r3, #4
 8005354:	d844      	bhi.n	80053e0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005356:	a201      	add	r2, pc, #4	@ (adr r2, 800535c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535c:	0800537f 	.word	0x0800537f
 8005360:	0800539d 	.word	0x0800539d
 8005364:	080053bf 	.word	0x080053bf
 8005368:	080053e1 	.word	0x080053e1
 800536c:	08005371 	.word	0x08005371
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005370:	4b1f      	ldr	r3, [pc, #124]	@ (80053f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a1e      	ldr	r2, [pc, #120]	@ (80053f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005376:	f043 0304 	orr.w	r3, r3, #4
 800537a:	6013      	str	r3, [r2, #0]
      break;
 800537c:	e031      	b.n	80053e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800537e:	4b1c      	ldr	r3, [pc, #112]	@ (80053f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a1b      	ldr	r2, [pc, #108]	@ (80053f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005384:	f023 0304 	bic.w	r3, r3, #4
 8005388:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800538a:	4b1a      	ldr	r3, [pc, #104]	@ (80053f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800538c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005390:	4a18      	ldr	r2, [pc, #96]	@ (80053f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005392:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005396:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800539a:	e022      	b.n	80053e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800539c:	4b14      	ldr	r3, [pc, #80]	@ (80053f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a13      	ldr	r2, [pc, #76]	@ (80053f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80053a2:	f023 0304 	bic.w	r3, r3, #4
 80053a6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80053a8:	4b12      	ldr	r3, [pc, #72]	@ (80053f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80053aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053ae:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80053b2:	4a10      	ldr	r2, [pc, #64]	@ (80053f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80053b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80053b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80053bc:	e011      	b.n	80053e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80053be:	4b0c      	ldr	r3, [pc, #48]	@ (80053f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a0b      	ldr	r2, [pc, #44]	@ (80053f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80053c4:	f023 0304 	bic.w	r3, r3, #4
 80053c8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80053ca:	4b0a      	ldr	r3, [pc, #40]	@ (80053f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80053cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053d0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80053d4:	4a07      	ldr	r2, [pc, #28]	@ (80053f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80053d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80053de:	e000      	b.n	80053e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80053e0:	bf00      	nop
  }
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	e000e010 	.word	0xe000e010
 80053f4:	46020c00 	.word	0x46020c00

080053f8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80053fe:	4b19      	ldr	r3, [pc, #100]	@ (8005464 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800540a:	2304      	movs	r3, #4
 800540c:	607b      	str	r3, [r7, #4]
 800540e:	e021      	b.n	8005454 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8005410:	4b15      	ldr	r3, [pc, #84]	@ (8005468 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8005412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005416:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800541a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005422:	d011      	beq.n	8005448 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800542a:	d810      	bhi.n	800544e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005438:	d003      	beq.n	8005442 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800543a:	e008      	b.n	800544e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800543c:	2300      	movs	r3, #0
 800543e:	607b      	str	r3, [r7, #4]
        break;
 8005440:	e008      	b.n	8005454 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8005442:	2301      	movs	r3, #1
 8005444:	607b      	str	r3, [r7, #4]
        break;
 8005446:	e005      	b.n	8005454 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005448:	2302      	movs	r3, #2
 800544a:	607b      	str	r3, [r7, #4]
        break;
 800544c:	e002      	b.n	8005454 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800544e:	2300      	movs	r3, #0
 8005450:	607b      	str	r3, [r7, #4]
        break;
 8005452:	bf00      	nop
    }
  }
  return systick_source;
 8005454:	687b      	ldr	r3, [r7, #4]
}
 8005456:	4618      	mov	r0, r3
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	e000e010 	.word	0xe000e010
 8005468:	46020c00 	.word	0x46020c00

0800546c <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005474:	f7fd fc16 	bl	8002ca4 <HAL_GetTick>
 8005478:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e0db      	b.n	800563c <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a6e      	ldr	r2, [pc, #440]	@ (8005644 <HAL_DMA_Init+0x1d8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	f000 809f 	beq.w	80055ce <HAL_DMA_Init+0x162>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a6c      	ldr	r2, [pc, #432]	@ (8005648 <HAL_DMA_Init+0x1dc>)
 8005496:	4293      	cmp	r3, r2
 8005498:	f000 8099 	beq.w	80055ce <HAL_DMA_Init+0x162>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a6a      	ldr	r2, [pc, #424]	@ (800564c <HAL_DMA_Init+0x1e0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	f000 8093 	beq.w	80055ce <HAL_DMA_Init+0x162>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a68      	ldr	r2, [pc, #416]	@ (8005650 <HAL_DMA_Init+0x1e4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	f000 808d 	beq.w	80055ce <HAL_DMA_Init+0x162>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a66      	ldr	r2, [pc, #408]	@ (8005654 <HAL_DMA_Init+0x1e8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	f000 8087 	beq.w	80055ce <HAL_DMA_Init+0x162>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a64      	ldr	r2, [pc, #400]	@ (8005658 <HAL_DMA_Init+0x1ec>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	f000 8081 	beq.w	80055ce <HAL_DMA_Init+0x162>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a62      	ldr	r2, [pc, #392]	@ (800565c <HAL_DMA_Init+0x1f0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d07b      	beq.n	80055ce <HAL_DMA_Init+0x162>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a61      	ldr	r2, [pc, #388]	@ (8005660 <HAL_DMA_Init+0x1f4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d076      	beq.n	80055ce <HAL_DMA_Init+0x162>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a5f      	ldr	r2, [pc, #380]	@ (8005664 <HAL_DMA_Init+0x1f8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d071      	beq.n	80055ce <HAL_DMA_Init+0x162>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a5e      	ldr	r2, [pc, #376]	@ (8005668 <HAL_DMA_Init+0x1fc>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d06c      	beq.n	80055ce <HAL_DMA_Init+0x162>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a5c      	ldr	r2, [pc, #368]	@ (800566c <HAL_DMA_Init+0x200>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d067      	beq.n	80055ce <HAL_DMA_Init+0x162>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a5b      	ldr	r2, [pc, #364]	@ (8005670 <HAL_DMA_Init+0x204>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d062      	beq.n	80055ce <HAL_DMA_Init+0x162>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a59      	ldr	r2, [pc, #356]	@ (8005674 <HAL_DMA_Init+0x208>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d05d      	beq.n	80055ce <HAL_DMA_Init+0x162>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a58      	ldr	r2, [pc, #352]	@ (8005678 <HAL_DMA_Init+0x20c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d058      	beq.n	80055ce <HAL_DMA_Init+0x162>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a56      	ldr	r2, [pc, #344]	@ (800567c <HAL_DMA_Init+0x210>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d053      	beq.n	80055ce <HAL_DMA_Init+0x162>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a55      	ldr	r2, [pc, #340]	@ (8005680 <HAL_DMA_Init+0x214>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d04e      	beq.n	80055ce <HAL_DMA_Init+0x162>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a53      	ldr	r2, [pc, #332]	@ (8005684 <HAL_DMA_Init+0x218>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d049      	beq.n	80055ce <HAL_DMA_Init+0x162>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a52      	ldr	r2, [pc, #328]	@ (8005688 <HAL_DMA_Init+0x21c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d044      	beq.n	80055ce <HAL_DMA_Init+0x162>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a50      	ldr	r2, [pc, #320]	@ (800568c <HAL_DMA_Init+0x220>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d03f      	beq.n	80055ce <HAL_DMA_Init+0x162>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a4f      	ldr	r2, [pc, #316]	@ (8005690 <HAL_DMA_Init+0x224>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d03a      	beq.n	80055ce <HAL_DMA_Init+0x162>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a4d      	ldr	r2, [pc, #308]	@ (8005694 <HAL_DMA_Init+0x228>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d035      	beq.n	80055ce <HAL_DMA_Init+0x162>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a4c      	ldr	r2, [pc, #304]	@ (8005698 <HAL_DMA_Init+0x22c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d030      	beq.n	80055ce <HAL_DMA_Init+0x162>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a4a      	ldr	r2, [pc, #296]	@ (800569c <HAL_DMA_Init+0x230>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d02b      	beq.n	80055ce <HAL_DMA_Init+0x162>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a49      	ldr	r2, [pc, #292]	@ (80056a0 <HAL_DMA_Init+0x234>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d026      	beq.n	80055ce <HAL_DMA_Init+0x162>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a47      	ldr	r2, [pc, #284]	@ (80056a4 <HAL_DMA_Init+0x238>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d021      	beq.n	80055ce <HAL_DMA_Init+0x162>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a46      	ldr	r2, [pc, #280]	@ (80056a8 <HAL_DMA_Init+0x23c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d01c      	beq.n	80055ce <HAL_DMA_Init+0x162>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a44      	ldr	r2, [pc, #272]	@ (80056ac <HAL_DMA_Init+0x240>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d017      	beq.n	80055ce <HAL_DMA_Init+0x162>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a43      	ldr	r2, [pc, #268]	@ (80056b0 <HAL_DMA_Init+0x244>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d012      	beq.n	80055ce <HAL_DMA_Init+0x162>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a41      	ldr	r2, [pc, #260]	@ (80056b4 <HAL_DMA_Init+0x248>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00d      	beq.n	80055ce <HAL_DMA_Init+0x162>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a40      	ldr	r2, [pc, #256]	@ (80056b8 <HAL_DMA_Init+0x24c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d008      	beq.n	80055ce <HAL_DMA_Init+0x162>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a3e      	ldr	r2, [pc, #248]	@ (80056bc <HAL_DMA_Init+0x250>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d003      	beq.n	80055ce <HAL_DMA_Init+0x162>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a3d      	ldr	r2, [pc, #244]	@ (80056c0 <HAL_DMA_Init+0x254>)
 80055cc:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2202      	movs	r2, #2
 80055da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695a      	ldr	r2, [r3, #20]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 0206 	orr.w	r2, r2, #6
 80055ec:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80055ee:	e00f      	b.n	8005610 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80055f0:	f7fd fb58 	bl	8002ca4 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b05      	cmp	r3, #5
 80055fc:	d908      	bls.n	8005610 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2210      	movs	r2, #16
 8005602:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2203      	movs	r2, #3
 8005608:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e015      	b.n	800563c <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e8      	bne.n	80055f0 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fb26 	bl	8005c70 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40020050 	.word	0x40020050
 8005648:	50020050 	.word	0x50020050
 800564c:	400200d0 	.word	0x400200d0
 8005650:	500200d0 	.word	0x500200d0
 8005654:	40020150 	.word	0x40020150
 8005658:	50020150 	.word	0x50020150
 800565c:	400201d0 	.word	0x400201d0
 8005660:	500201d0 	.word	0x500201d0
 8005664:	40020250 	.word	0x40020250
 8005668:	50020250 	.word	0x50020250
 800566c:	400202d0 	.word	0x400202d0
 8005670:	500202d0 	.word	0x500202d0
 8005674:	40020350 	.word	0x40020350
 8005678:	50020350 	.word	0x50020350
 800567c:	400203d0 	.word	0x400203d0
 8005680:	500203d0 	.word	0x500203d0
 8005684:	40020450 	.word	0x40020450
 8005688:	50020450 	.word	0x50020450
 800568c:	400204d0 	.word	0x400204d0
 8005690:	500204d0 	.word	0x500204d0
 8005694:	40020550 	.word	0x40020550
 8005698:	50020550 	.word	0x50020550
 800569c:	400205d0 	.word	0x400205d0
 80056a0:	500205d0 	.word	0x500205d0
 80056a4:	40020650 	.word	0x40020650
 80056a8:	50020650 	.word	0x50020650
 80056ac:	400206d0 	.word	0x400206d0
 80056b0:	500206d0 	.word	0x500206d0
 80056b4:	40020750 	.word	0x40020750
 80056b8:	50020750 	.word	0x50020750
 80056bc:	400207d0 	.word	0x400207d0
 80056c0:	500207d0 	.word	0x500207d0

080056c4 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e04f      	b.n	800577c <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d101      	bne.n	80056ea <HAL_DMA_Start_IT+0x26>
 80056e6:	2302      	movs	r3, #2
 80056e8:	e048      	b.n	800577c <HAL_DMA_Start_IT+0xb8>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d136      	bne.n	800576c <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2202      	movs	r2, #2
 8005702:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 fa86 	bl	8005c24 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695a      	ldr	r2, [r3, #20]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8005726:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695a      	ldr	r2, [r3, #20]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800573e:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005744:	2b00      	cmp	r3, #0
 8005746:	d007      	beq.n	8005758 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695a      	ldr	r2, [r3, #20]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005756:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695a      	ldr	r2, [r3, #20]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	e007      	b.n	800577c <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2240      	movs	r2, #64	@ 0x40
 8005770:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800578c:	f7fd fa8a 	bl	8002ca4 <HAL_GetTick>
 8005790:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e06b      	b.n	8005874 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d008      	beq.n	80057ba <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2220      	movs	r2, #32
 80057ac:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e05c      	b.n	8005874 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	695a      	ldr	r2, [r3, #20]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f042 0204 	orr.w	r2, r2, #4
 80057c8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2205      	movs	r2, #5
 80057ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80057d2:	e020      	b.n	8005816 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80057d4:	f7fd fa66 	bl	8002ca4 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b05      	cmp	r3, #5
 80057e0:	d919      	bls.n	8005816 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e6:	f043 0210 	orr.w	r2, r3, #16
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2203      	movs	r2, #3
 80057f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005806:	2201      	movs	r2, #1
 8005808:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e02e      	b.n	8005874 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0d7      	beq.n	80057d4 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	695a      	ldr	r2, [r3, #20]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0202 	orr.w	r2, r2, #2
 8005832:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2204      	movs	r2, #4
 8005838:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005844:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005856:	2b00      	cmp	r3, #0
 8005858:	d007      	beq.n	800586a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800585e:	2201      	movs	r2, #1
 8005860:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2200      	movs	r2, #0
 8005868:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e019      	b.n	80058c2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d004      	beq.n	80058a4 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2220      	movs	r2, #32
 800589e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e00e      	b.n	80058c2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2204      	movs	r2, #4
 80058a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	6812      	ldr	r2, [r2, #0]
 80058b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80058ba:	f043 0304 	orr.w	r3, r3, #4
 80058be:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b086      	sub	sp, #24
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80058de:	f023 030f 	bic.w	r3, r3, #15
 80058e2:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058ec:	3b50      	subs	r3, #80	@ 0x50
 80058ee:	09db      	lsrs	r3, r3, #7
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	2201      	movs	r2, #1
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	4013      	ands	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 813b 	beq.w	8005b84 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005918:	2b00      	cmp	r3, #0
 800591a:	d011      	beq.n	8005940 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005932:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005938:	f043 0201 	orr.w	r2, r3, #1
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800594a:	2b00      	cmp	r3, #0
 800594c:	d011      	beq.n	8005972 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005964:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800596a:	f043 0202 	orr.w	r2, r3, #2
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d011      	beq.n	80059a4 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005996:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800599c:	f043 0204 	orr.w	r2, r3, #4
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d011      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80059c8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ce:	f043 0208 	orr.w	r2, r3, #8
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d013      	beq.n	8005a0c <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00c      	beq.n	8005a0c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059fa:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d04c      	beq.n	8005ab4 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d045      	beq.n	8005ab4 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005a30:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d12e      	bne.n	8005a9c <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695a      	ldr	r2, [r3, #20]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a4c:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	695a      	ldr	r2, [r3, #20]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f042 0202 	orr.w	r2, r2, #2
 8005a5c:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d007      	beq.n	8005a82 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a76:	2201      	movs	r2, #1
 8005a78:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d07a      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	4798      	blx	r3
        }

        return;
 8005a9a:	e075      	b.n	8005b88 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2205      	movs	r2, #5
 8005aa0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d039      	beq.n	8005b36 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d032      	beq.n	8005b36 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d012      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d116      	bne.n	8005b14 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d111      	bne.n	8005b14 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005afc:	2201      	movs	r2, #1
 8005afe:	731a      	strb	r2, [r3, #12]
 8005b00:	e008      	b.n	8005b14 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d103      	bne.n	8005b14 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005b1c:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d025      	beq.n	8005b8a <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	695a      	ldr	r2, [r3, #20]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f042 0202 	orr.w	r2, r2, #2
 8005b4c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b66:	2201      	movs	r2, #1
 8005b68:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d007      	beq.n	8005b8a <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	4798      	blx	r3
 8005b82:	e002      	b.n	8005b8a <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005b84:	bf00      	nop
 8005b86:	e000      	b.n	8005b8a <HAL_DMA_IRQHandler+0x2bc>
        return;
 8005b88:	bf00      	nop
    }
  }
}
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005b9e:	b2db      	uxtb	r3, r3
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e02b      	b.n	8005c18 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005bc8:	f023 030f 	bic.w	r3, r3, #15
 8005bcc:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd6:	3b50      	subs	r3, #80	@ 0x50
 8005bd8:	09db      	lsrs	r3, r3, #7
 8005bda:	f003 031f 	and.w	r3, r3, #31
 8005bde:	2201      	movs	r2, #1
 8005be0:	fa02 f303 	lsl.w	r3, r2, r3
 8005be4:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	f003 0310 	and.w	r3, r3, #16
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d012      	beq.n	8005c16 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	f003 0311 	and.w	r3, r3, #17
 8005bf6:	2b11      	cmp	r3, #17
 8005bf8:	d106      	bne.n	8005c08 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	431a      	orrs	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	605a      	str	r2, [r3, #4]
 8005c06:	e006      	b.n	8005c16 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	43db      	mvns	r3, r3
 8005c10:	401a      	ands	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c38:	0c1b      	lsrs	r3, r3, #16
 8005c3a:	041b      	lsls	r3, r3, #16
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	b291      	uxth	r1, r2
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	6812      	ldr	r2, [r2, #0]
 8005c44:	430b      	orrs	r3, r1
 8005c46:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005c50:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005c62:	bf00      	nop
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
	...

08005c70 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	695a      	ldr	r2, [r3, #20]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a53      	ldr	r2, [pc, #332]	@ (8005dfc <DMA_Init+0x18c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	f000 80a0 	beq.w	8005df6 <DMA_Init+0x186>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a51      	ldr	r2, [pc, #324]	@ (8005e00 <DMA_Init+0x190>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	f000 809a 	beq.w	8005df6 <DMA_Init+0x186>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a4f      	ldr	r2, [pc, #316]	@ (8005e04 <DMA_Init+0x194>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	f000 8094 	beq.w	8005df6 <DMA_Init+0x186>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a4d      	ldr	r2, [pc, #308]	@ (8005e08 <DMA_Init+0x198>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	f000 808e 	beq.w	8005df6 <DMA_Init+0x186>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a4b      	ldr	r2, [pc, #300]	@ (8005e0c <DMA_Init+0x19c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	f000 8088 	beq.w	8005df6 <DMA_Init+0x186>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a49      	ldr	r2, [pc, #292]	@ (8005e10 <DMA_Init+0x1a0>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	f000 8082 	beq.w	8005df6 <DMA_Init+0x186>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a47      	ldr	r2, [pc, #284]	@ (8005e14 <DMA_Init+0x1a4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d07c      	beq.n	8005df6 <DMA_Init+0x186>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a45      	ldr	r2, [pc, #276]	@ (8005e18 <DMA_Init+0x1a8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d077      	beq.n	8005df6 <DMA_Init+0x186>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a44      	ldr	r2, [pc, #272]	@ (8005e1c <DMA_Init+0x1ac>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d072      	beq.n	8005df6 <DMA_Init+0x186>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a42      	ldr	r2, [pc, #264]	@ (8005e20 <DMA_Init+0x1b0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d06d      	beq.n	8005df6 <DMA_Init+0x186>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a41      	ldr	r2, [pc, #260]	@ (8005e24 <DMA_Init+0x1b4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d068      	beq.n	8005df6 <DMA_Init+0x186>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a3f      	ldr	r2, [pc, #252]	@ (8005e28 <DMA_Init+0x1b8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d063      	beq.n	8005df6 <DMA_Init+0x186>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a3e      	ldr	r2, [pc, #248]	@ (8005e2c <DMA_Init+0x1bc>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d05e      	beq.n	8005df6 <DMA_Init+0x186>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a3c      	ldr	r2, [pc, #240]	@ (8005e30 <DMA_Init+0x1c0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d059      	beq.n	8005df6 <DMA_Init+0x186>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a3b      	ldr	r2, [pc, #236]	@ (8005e34 <DMA_Init+0x1c4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d054      	beq.n	8005df6 <DMA_Init+0x186>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a39      	ldr	r2, [pc, #228]	@ (8005e38 <DMA_Init+0x1c8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d04f      	beq.n	8005df6 <DMA_Init+0x186>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a38      	ldr	r2, [pc, #224]	@ (8005e3c <DMA_Init+0x1cc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d04a      	beq.n	8005df6 <DMA_Init+0x186>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a36      	ldr	r2, [pc, #216]	@ (8005e40 <DMA_Init+0x1d0>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d045      	beq.n	8005df6 <DMA_Init+0x186>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a35      	ldr	r2, [pc, #212]	@ (8005e44 <DMA_Init+0x1d4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d040      	beq.n	8005df6 <DMA_Init+0x186>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a33      	ldr	r2, [pc, #204]	@ (8005e48 <DMA_Init+0x1d8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d03b      	beq.n	8005df6 <DMA_Init+0x186>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a32      	ldr	r2, [pc, #200]	@ (8005e4c <DMA_Init+0x1dc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d036      	beq.n	8005df6 <DMA_Init+0x186>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a30      	ldr	r2, [pc, #192]	@ (8005e50 <DMA_Init+0x1e0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d031      	beq.n	8005df6 <DMA_Init+0x186>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a2f      	ldr	r2, [pc, #188]	@ (8005e54 <DMA_Init+0x1e4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d02c      	beq.n	8005df6 <DMA_Init+0x186>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a2d      	ldr	r2, [pc, #180]	@ (8005e58 <DMA_Init+0x1e8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d027      	beq.n	8005df6 <DMA_Init+0x186>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a2c      	ldr	r2, [pc, #176]	@ (8005e5c <DMA_Init+0x1ec>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d022      	beq.n	8005df6 <DMA_Init+0x186>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a2a      	ldr	r2, [pc, #168]	@ (8005e60 <DMA_Init+0x1f0>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d01d      	beq.n	8005df6 <DMA_Init+0x186>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a29      	ldr	r2, [pc, #164]	@ (8005e64 <DMA_Init+0x1f4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d018      	beq.n	8005df6 <DMA_Init+0x186>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a27      	ldr	r2, [pc, #156]	@ (8005e68 <DMA_Init+0x1f8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d013      	beq.n	8005df6 <DMA_Init+0x186>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a26      	ldr	r2, [pc, #152]	@ (8005e6c <DMA_Init+0x1fc>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00e      	beq.n	8005df6 <DMA_Init+0x186>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a24      	ldr	r2, [pc, #144]	@ (8005e70 <DMA_Init+0x200>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d009      	beq.n	8005df6 <DMA_Init+0x186>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a23      	ldr	r2, [pc, #140]	@ (8005e74 <DMA_Init+0x204>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d004      	beq.n	8005df6 <DMA_Init+0x186>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a21      	ldr	r2, [pc, #132]	@ (8005e78 <DMA_Init+0x208>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d142      	bne.n	8005e7c <DMA_Init+0x20c>
 8005df6:	2301      	movs	r3, #1
 8005df8:	e041      	b.n	8005e7e <DMA_Init+0x20e>
 8005dfa:	bf00      	nop
 8005dfc:	40020050 	.word	0x40020050
 8005e00:	50020050 	.word	0x50020050
 8005e04:	400200d0 	.word	0x400200d0
 8005e08:	500200d0 	.word	0x500200d0
 8005e0c:	40020150 	.word	0x40020150
 8005e10:	50020150 	.word	0x50020150
 8005e14:	400201d0 	.word	0x400201d0
 8005e18:	500201d0 	.word	0x500201d0
 8005e1c:	40020250 	.word	0x40020250
 8005e20:	50020250 	.word	0x50020250
 8005e24:	400202d0 	.word	0x400202d0
 8005e28:	500202d0 	.word	0x500202d0
 8005e2c:	40020350 	.word	0x40020350
 8005e30:	50020350 	.word	0x50020350
 8005e34:	400203d0 	.word	0x400203d0
 8005e38:	500203d0 	.word	0x500203d0
 8005e3c:	40020450 	.word	0x40020450
 8005e40:	50020450 	.word	0x50020450
 8005e44:	400204d0 	.word	0x400204d0
 8005e48:	500204d0 	.word	0x500204d0
 8005e4c:	40020550 	.word	0x40020550
 8005e50:	50020550 	.word	0x50020550
 8005e54:	400205d0 	.word	0x400205d0
 8005e58:	500205d0 	.word	0x500205d0
 8005e5c:	40020650 	.word	0x40020650
 8005e60:	50020650 	.word	0x50020650
 8005e64:	400206d0 	.word	0x400206d0
 8005e68:	500206d0 	.word	0x500206d0
 8005e6c:	40020750 	.word	0x40020750
 8005e70:	50020750 	.word	0x50020750
 8005e74:	400207d0 	.word	0x400207d0
 8005e78:	500207d0 	.word	0x500207d0
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d012      	beq.n	8005ea8 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	051b      	lsls	r3, r3, #20
 8005e8e:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005e92:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005ea0:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eae:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eda:	f040 80b0 	bne.w	800603e <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a82      	ldr	r2, [pc, #520]	@ (80060ec <DMA_Init+0x47c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	f000 80a0 	beq.w	800602a <DMA_Init+0x3ba>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a80      	ldr	r2, [pc, #512]	@ (80060f0 <DMA_Init+0x480>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	f000 809a 	beq.w	800602a <DMA_Init+0x3ba>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a7e      	ldr	r2, [pc, #504]	@ (80060f4 <DMA_Init+0x484>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	f000 8094 	beq.w	800602a <DMA_Init+0x3ba>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a7c      	ldr	r2, [pc, #496]	@ (80060f8 <DMA_Init+0x488>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	f000 808e 	beq.w	800602a <DMA_Init+0x3ba>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a7a      	ldr	r2, [pc, #488]	@ (80060fc <DMA_Init+0x48c>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	f000 8088 	beq.w	800602a <DMA_Init+0x3ba>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a78      	ldr	r2, [pc, #480]	@ (8006100 <DMA_Init+0x490>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	f000 8082 	beq.w	800602a <DMA_Init+0x3ba>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a76      	ldr	r2, [pc, #472]	@ (8006104 <DMA_Init+0x494>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d07c      	beq.n	800602a <DMA_Init+0x3ba>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a74      	ldr	r2, [pc, #464]	@ (8006108 <DMA_Init+0x498>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d077      	beq.n	800602a <DMA_Init+0x3ba>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a73      	ldr	r2, [pc, #460]	@ (800610c <DMA_Init+0x49c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d072      	beq.n	800602a <DMA_Init+0x3ba>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a71      	ldr	r2, [pc, #452]	@ (8006110 <DMA_Init+0x4a0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d06d      	beq.n	800602a <DMA_Init+0x3ba>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a70      	ldr	r2, [pc, #448]	@ (8006114 <DMA_Init+0x4a4>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d068      	beq.n	800602a <DMA_Init+0x3ba>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a6e      	ldr	r2, [pc, #440]	@ (8006118 <DMA_Init+0x4a8>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d063      	beq.n	800602a <DMA_Init+0x3ba>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a6d      	ldr	r2, [pc, #436]	@ (800611c <DMA_Init+0x4ac>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d05e      	beq.n	800602a <DMA_Init+0x3ba>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a6b      	ldr	r2, [pc, #428]	@ (8006120 <DMA_Init+0x4b0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d059      	beq.n	800602a <DMA_Init+0x3ba>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a6a      	ldr	r2, [pc, #424]	@ (8006124 <DMA_Init+0x4b4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d054      	beq.n	800602a <DMA_Init+0x3ba>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a68      	ldr	r2, [pc, #416]	@ (8006128 <DMA_Init+0x4b8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d04f      	beq.n	800602a <DMA_Init+0x3ba>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a67      	ldr	r2, [pc, #412]	@ (800612c <DMA_Init+0x4bc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d04a      	beq.n	800602a <DMA_Init+0x3ba>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a65      	ldr	r2, [pc, #404]	@ (8006130 <DMA_Init+0x4c0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d045      	beq.n	800602a <DMA_Init+0x3ba>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a64      	ldr	r2, [pc, #400]	@ (8006134 <DMA_Init+0x4c4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d040      	beq.n	800602a <DMA_Init+0x3ba>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a62      	ldr	r2, [pc, #392]	@ (8006138 <DMA_Init+0x4c8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d03b      	beq.n	800602a <DMA_Init+0x3ba>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a61      	ldr	r2, [pc, #388]	@ (800613c <DMA_Init+0x4cc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d036      	beq.n	800602a <DMA_Init+0x3ba>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a5f      	ldr	r2, [pc, #380]	@ (8006140 <DMA_Init+0x4d0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d031      	beq.n	800602a <DMA_Init+0x3ba>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a5e      	ldr	r2, [pc, #376]	@ (8006144 <DMA_Init+0x4d4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d02c      	beq.n	800602a <DMA_Init+0x3ba>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a5c      	ldr	r2, [pc, #368]	@ (8006148 <DMA_Init+0x4d8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d027      	beq.n	800602a <DMA_Init+0x3ba>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a5b      	ldr	r2, [pc, #364]	@ (800614c <DMA_Init+0x4dc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d022      	beq.n	800602a <DMA_Init+0x3ba>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a59      	ldr	r2, [pc, #356]	@ (8006150 <DMA_Init+0x4e0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d01d      	beq.n	800602a <DMA_Init+0x3ba>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a58      	ldr	r2, [pc, #352]	@ (8006154 <DMA_Init+0x4e4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d018      	beq.n	800602a <DMA_Init+0x3ba>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a56      	ldr	r2, [pc, #344]	@ (8006158 <DMA_Init+0x4e8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d013      	beq.n	800602a <DMA_Init+0x3ba>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a55      	ldr	r2, [pc, #340]	@ (800615c <DMA_Init+0x4ec>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d00e      	beq.n	800602a <DMA_Init+0x3ba>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a53      	ldr	r2, [pc, #332]	@ (8006160 <DMA_Init+0x4f0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d009      	beq.n	800602a <DMA_Init+0x3ba>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a52      	ldr	r2, [pc, #328]	@ (8006164 <DMA_Init+0x4f4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d004      	beq.n	800602a <DMA_Init+0x3ba>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a50      	ldr	r2, [pc, #320]	@ (8006168 <DMA_Init+0x4f8>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d101      	bne.n	800602e <DMA_Init+0x3be>
 800602a:	2301      	movs	r3, #1
 800602c:	e000      	b.n	8006030 <DMA_Init+0x3c0>
 800602e:	2300      	movs	r3, #0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00d      	beq.n	8006050 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	e008      	b.n	8006050 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006046:	d103      	bne.n	8006050 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800604e:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006056:	4b45      	ldr	r3, [pc, #276]	@ (800616c <DMA_Init+0x4fc>)
 8006058:	4013      	ands	r3, r2
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6812      	ldr	r2, [r2, #0]
 800605e:	68f9      	ldr	r1, [r7, #12]
 8006060:	430b      	orrs	r3, r1
 8006062:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2200      	movs	r2, #0
 800606a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a36      	ldr	r2, [pc, #216]	@ (800614c <DMA_Init+0x4dc>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d022      	beq.n	80060bc <DMA_Init+0x44c>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a35      	ldr	r2, [pc, #212]	@ (8006150 <DMA_Init+0x4e0>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d01d      	beq.n	80060bc <DMA_Init+0x44c>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a33      	ldr	r2, [pc, #204]	@ (8006154 <DMA_Init+0x4e4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d018      	beq.n	80060bc <DMA_Init+0x44c>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a32      	ldr	r2, [pc, #200]	@ (8006158 <DMA_Init+0x4e8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d013      	beq.n	80060bc <DMA_Init+0x44c>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a30      	ldr	r2, [pc, #192]	@ (800615c <DMA_Init+0x4ec>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00e      	beq.n	80060bc <DMA_Init+0x44c>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a2f      	ldr	r2, [pc, #188]	@ (8006160 <DMA_Init+0x4f0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d009      	beq.n	80060bc <DMA_Init+0x44c>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a2d      	ldr	r2, [pc, #180]	@ (8006164 <DMA_Init+0x4f4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d004      	beq.n	80060bc <DMA_Init+0x44c>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006168 <DMA_Init+0x4f8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d101      	bne.n	80060c0 <DMA_Init+0x450>
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <DMA_Init+0x452>
 80060c0:	2300      	movs	r3, #0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d007      	beq.n	80060d6 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2200      	movs	r2, #0
 80060cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2200      	movs	r2, #0
 80060d4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2200      	movs	r2, #0
 80060dc:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80060de:	bf00      	nop
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	40020050 	.word	0x40020050
 80060f0:	50020050 	.word	0x50020050
 80060f4:	400200d0 	.word	0x400200d0
 80060f8:	500200d0 	.word	0x500200d0
 80060fc:	40020150 	.word	0x40020150
 8006100:	50020150 	.word	0x50020150
 8006104:	400201d0 	.word	0x400201d0
 8006108:	500201d0 	.word	0x500201d0
 800610c:	40020250 	.word	0x40020250
 8006110:	50020250 	.word	0x50020250
 8006114:	400202d0 	.word	0x400202d0
 8006118:	500202d0 	.word	0x500202d0
 800611c:	40020350 	.word	0x40020350
 8006120:	50020350 	.word	0x50020350
 8006124:	400203d0 	.word	0x400203d0
 8006128:	500203d0 	.word	0x500203d0
 800612c:	40020450 	.word	0x40020450
 8006130:	50020450 	.word	0x50020450
 8006134:	400204d0 	.word	0x400204d0
 8006138:	500204d0 	.word	0x500204d0
 800613c:	40020550 	.word	0x40020550
 8006140:	50020550 	.word	0x50020550
 8006144:	400205d0 	.word	0x400205d0
 8006148:	500205d0 	.word	0x500205d0
 800614c:	40020650 	.word	0x40020650
 8006150:	50020650 	.word	0x50020650
 8006154:	400206d0 	.word	0x400206d0
 8006158:	500206d0 	.word	0x500206d0
 800615c:	40020750 	.word	0x40020750
 8006160:	50020750 	.word	0x50020750
 8006164:	400207d0 	.word	0x400207d0
 8006168:	500207d0 	.word	0x500207d0
 800616c:	3c803180 	.word	0x3c803180

08006170 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e053      	b.n	800622a <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d106      	bne.n	800619c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7fb fd60 	bl	8001c5c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80061ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6851      	ldr	r1, [r2, #4]
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	69d2      	ldr	r2, [r2, #28]
 80061ba:	4311      	orrs	r1, r2
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	430b      	orrs	r3, r1
 80061c2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ca:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 80061ce:	f023 0301 	bic.w	r3, r3, #1
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6891      	ldr	r1, [r2, #8]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6992      	ldr	r2, [r2, #24]
 80061da:	4311      	orrs	r1, r2
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6812      	ldr	r2, [r2, #0]
 80061e0:	430b      	orrs	r3, r1
 80061e2:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ea:	0c1b      	lsrs	r3, r3, #16
 80061ec:	041b      	lsls	r3, r3, #16
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	68d1      	ldr	r1, [r2, #12]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6812      	ldr	r2, [r2, #0]
 80061f6:	430b      	orrs	r3, r1
 80061f8:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006200:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	051a      	lsls	r2, r3, #20
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	055b      	lsls	r3, r3, #21
 8006210:	431a      	orrs	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
	...

08006234 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8006250:	2b01      	cmp	r3, #1
 8006252:	d101      	bne.n	8006258 <HAL_DMA2D_ConfigLayer+0x24>
 8006254:	2302      	movs	r3, #2
 8006256:	e092      	b.n	800637e <HAL_DMA2D_ConfigLayer+0x14a>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	4613      	mov	r3, r2
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	1a9b      	subs	r3, r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	3328      	adds	r3, #40	@ 0x28
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	4413      	add	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	041b      	lsls	r3, r3, #16
 8006284:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800628c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006294:	4313      	orrs	r3, r2
 8006296:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006298:	4b3c      	ldr	r3, [pc, #240]	@ (800638c <HAL_DMA2D_ConfigLayer+0x158>)
 800629a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b0a      	cmp	r3, #10
 80062a2:	d003      	beq.n	80062ac <HAL_DMA2D_ConfigLayer+0x78>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2b09      	cmp	r3, #9
 80062aa:	d107      	bne.n	80062bc <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	e005      	b.n	80062c8 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	061b      	lsls	r3, r3, #24
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d120      	bne.n	8006310 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	43db      	mvns	r3, r3
 80062d8:	ea02 0103 	and.w	r1, r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	6812      	ldr	r2, [r2, #0]
 80062ee:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2b0a      	cmp	r3, #10
 80062f6:	d003      	beq.n	8006300 <HAL_DMA2D_ConfigLayer+0xcc>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	2b09      	cmp	r3, #9
 80062fe:	d135      	bne.n	800636c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	68da      	ldr	r2, [r3, #12]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800630c:	629a      	str	r2, [r3, #40]	@ 0x28
 800630e:	e02d      	b.n	800636c <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2b0b      	cmp	r3, #11
 8006316:	d109      	bne.n	800632c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	049b      	lsls	r3, r3, #18
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	4313      	orrs	r3, r2
 8006322:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 800632a:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	69da      	ldr	r2, [r3, #28]
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	43db      	mvns	r3, r3
 8006336:	ea02 0103 	and.w	r1, r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	430a      	orrs	r2, r1
 8006342:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	6812      	ldr	r2, [r2, #0]
 800634c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	2b0a      	cmp	r3, #10
 8006354:	d003      	beq.n	800635e <HAL_DMA2D_ConfigLayer+0x12a>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b09      	cmp	r3, #9
 800635c:	d106      	bne.n	800636c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	68da      	ldr	r2, [r3, #12]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800636a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	ff33000f 	.word	0xff33000f

08006390 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006398:	f7fc fc84 	bl	8002ca4 <HAL_GetTick>
 800639c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e0db      	b.n	8006560 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a6e      	ldr	r2, [pc, #440]	@ (8006568 <HAL_DMAEx_List_Init+0x1d8>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	f000 809f 	beq.w	80064f2 <HAL_DMAEx_List_Init+0x162>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a6c      	ldr	r2, [pc, #432]	@ (800656c <HAL_DMAEx_List_Init+0x1dc>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	f000 8099 	beq.w	80064f2 <HAL_DMAEx_List_Init+0x162>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a6a      	ldr	r2, [pc, #424]	@ (8006570 <HAL_DMAEx_List_Init+0x1e0>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	f000 8093 	beq.w	80064f2 <HAL_DMAEx_List_Init+0x162>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a68      	ldr	r2, [pc, #416]	@ (8006574 <HAL_DMAEx_List_Init+0x1e4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	f000 808d 	beq.w	80064f2 <HAL_DMAEx_List_Init+0x162>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a66      	ldr	r2, [pc, #408]	@ (8006578 <HAL_DMAEx_List_Init+0x1e8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	f000 8087 	beq.w	80064f2 <HAL_DMAEx_List_Init+0x162>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a64      	ldr	r2, [pc, #400]	@ (800657c <HAL_DMAEx_List_Init+0x1ec>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	f000 8081 	beq.w	80064f2 <HAL_DMAEx_List_Init+0x162>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a62      	ldr	r2, [pc, #392]	@ (8006580 <HAL_DMAEx_List_Init+0x1f0>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d07b      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a61      	ldr	r2, [pc, #388]	@ (8006584 <HAL_DMAEx_List_Init+0x1f4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d076      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a5f      	ldr	r2, [pc, #380]	@ (8006588 <HAL_DMAEx_List_Init+0x1f8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d071      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a5e      	ldr	r2, [pc, #376]	@ (800658c <HAL_DMAEx_List_Init+0x1fc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d06c      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a5c      	ldr	r2, [pc, #368]	@ (8006590 <HAL_DMAEx_List_Init+0x200>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d067      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a5b      	ldr	r2, [pc, #364]	@ (8006594 <HAL_DMAEx_List_Init+0x204>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d062      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a59      	ldr	r2, [pc, #356]	@ (8006598 <HAL_DMAEx_List_Init+0x208>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d05d      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a58      	ldr	r2, [pc, #352]	@ (800659c <HAL_DMAEx_List_Init+0x20c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d058      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a56      	ldr	r2, [pc, #344]	@ (80065a0 <HAL_DMAEx_List_Init+0x210>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d053      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a55      	ldr	r2, [pc, #340]	@ (80065a4 <HAL_DMAEx_List_Init+0x214>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d04e      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a53      	ldr	r2, [pc, #332]	@ (80065a8 <HAL_DMAEx_List_Init+0x218>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d049      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a52      	ldr	r2, [pc, #328]	@ (80065ac <HAL_DMAEx_List_Init+0x21c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d044      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a50      	ldr	r2, [pc, #320]	@ (80065b0 <HAL_DMAEx_List_Init+0x220>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d03f      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a4f      	ldr	r2, [pc, #316]	@ (80065b4 <HAL_DMAEx_List_Init+0x224>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d03a      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a4d      	ldr	r2, [pc, #308]	@ (80065b8 <HAL_DMAEx_List_Init+0x228>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d035      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a4c      	ldr	r2, [pc, #304]	@ (80065bc <HAL_DMAEx_List_Init+0x22c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d030      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a4a      	ldr	r2, [pc, #296]	@ (80065c0 <HAL_DMAEx_List_Init+0x230>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d02b      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a49      	ldr	r2, [pc, #292]	@ (80065c4 <HAL_DMAEx_List_Init+0x234>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d026      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a47      	ldr	r2, [pc, #284]	@ (80065c8 <HAL_DMAEx_List_Init+0x238>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d021      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a46      	ldr	r2, [pc, #280]	@ (80065cc <HAL_DMAEx_List_Init+0x23c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d01c      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a44      	ldr	r2, [pc, #272]	@ (80065d0 <HAL_DMAEx_List_Init+0x240>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d017      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a43      	ldr	r2, [pc, #268]	@ (80065d4 <HAL_DMAEx_List_Init+0x244>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d012      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a41      	ldr	r2, [pc, #260]	@ (80065d8 <HAL_DMAEx_List_Init+0x248>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d00d      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a40      	ldr	r2, [pc, #256]	@ (80065dc <HAL_DMAEx_List_Init+0x24c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d008      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a3e      	ldr	r2, [pc, #248]	@ (80065e0 <HAL_DMAEx_List_Init+0x250>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d003      	beq.n	80064f2 <HAL_DMAEx_List_Init+0x162>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a3d      	ldr	r2, [pc, #244]	@ (80065e4 <HAL_DMAEx_List_Init+0x254>)
 80064f0:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2202      	movs	r2, #2
 80064fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	695a      	ldr	r2, [r3, #20]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0206 	orr.w	r2, r2, #6
 8006510:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006512:	e00f      	b.n	8006534 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8006514:	f7fc fbc6 	bl	8002ca4 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b05      	cmp	r3, #5
 8006520:	d908      	bls.n	8006534 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2210      	movs	r2, #16
 8006526:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2203      	movs	r2, #3
 800652c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e015      	b.n	8006560 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1e8      	bne.n	8006514 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fae0 	bl	8006b08 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	40020050 	.word	0x40020050
 800656c:	50020050 	.word	0x50020050
 8006570:	400200d0 	.word	0x400200d0
 8006574:	500200d0 	.word	0x500200d0
 8006578:	40020150 	.word	0x40020150
 800657c:	50020150 	.word	0x50020150
 8006580:	400201d0 	.word	0x400201d0
 8006584:	500201d0 	.word	0x500201d0
 8006588:	40020250 	.word	0x40020250
 800658c:	50020250 	.word	0x50020250
 8006590:	400202d0 	.word	0x400202d0
 8006594:	500202d0 	.word	0x500202d0
 8006598:	40020350 	.word	0x40020350
 800659c:	50020350 	.word	0x50020350
 80065a0:	400203d0 	.word	0x400203d0
 80065a4:	500203d0 	.word	0x500203d0
 80065a8:	40020450 	.word	0x40020450
 80065ac:	50020450 	.word	0x50020450
 80065b0:	400204d0 	.word	0x400204d0
 80065b4:	500204d0 	.word	0x500204d0
 80065b8:	40020550 	.word	0x40020550
 80065bc:	50020550 	.word	0x50020550
 80065c0:	400205d0 	.word	0x400205d0
 80065c4:	500205d0 	.word	0x500205d0
 80065c8:	40020650 	.word	0x40020650
 80065cc:	50020650 	.word	0x50020650
 80065d0:	400206d0 	.word	0x400206d0
 80065d4:	500206d0 	.word	0x500206d0
 80065d8:	40020750 	.word	0x40020750
 80065dc:	50020750 	.word	0x50020750
 80065e0:	400207d0 	.word	0x400207d0
 80065e4:	500207d0 	.word	0x500207d0

080065e8 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_DMAEx_List_Start_IT+0x16>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e082      	b.n	8006708 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006608:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006614:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8006616:	7dfb      	ldrb	r3, [r7, #23]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d005      	beq.n	8006628 <HAL_DMAEx_List_Start_IT+0x40>
 800661c:	7dfb      	ldrb	r3, [r7, #23]
 800661e:	2b02      	cmp	r3, #2
 8006620:	d16a      	bne.n	80066f8 <HAL_DMAEx_List_Start_IT+0x110>
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d067      	beq.n	80066f8 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b01      	cmp	r3, #1
 8006632:	d157      	bne.n	80066e4 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800663a:	2b01      	cmp	r3, #1
 800663c:	d101      	bne.n	8006642 <HAL_DMAEx_List_Start_IT+0x5a>
 800663e:	2302      	movs	r3, #2
 8006640:	e062      	b.n	8006708 <HAL_DMAEx_List_Start_IT+0x120>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2202      	movs	r2, #2
 800664e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006656:	2202      	movs	r2, #2
 8006658:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006664:	2200      	movs	r2, #0
 8006666:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	695a      	ldr	r2, [r3, #20]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8006676:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800667c:	2b00      	cmp	r3, #0
 800667e:	d007      	beq.n	8006690 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695a      	ldr	r2, [r3, #20]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800668e:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006694:	2b00      	cmp	r3, #0
 8006696:	d007      	beq.n	80066a8 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	695a      	ldr	r2, [r3, #20]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066a6:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f107 010c 	add.w	r1, r7, #12
 80066b2:	2200      	movs	r2, #0
 80066b4:	4618      	mov	r0, r3
 80066b6:	f000 fe47 	bl	8007348 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4619      	mov	r1, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	0c0b      	lsrs	r3, r1, #16
 80066c8:	041b      	lsls	r3, r3, #16
 80066ca:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80066d8:	4013      	ands	r3, r2
 80066da:	68f9      	ldr	r1, [r7, #12]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6812      	ldr	r2, [r2, #0]
 80066e0:	430b      	orrs	r3, r1
 80066e2:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	695a      	ldr	r2, [r3, #20]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0201 	orr.w	r2, r2, #1
 80066f2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	e007      	b.n	8006708 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2240      	movs	r2, #64	@ 0x40
 80066fc:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
}
 8006708:	4618      	mov	r0, r3
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <HAL_DMAEx_List_BuildNode+0x16>
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e004      	b.n	8006734 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800672a:	6839      	ldr	r1, [r7, #0]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fb43 	bl	8006db8 <DMA_List_BuildNode>

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <HAL_DMAEx_List_GetNodeConfig+0x16>
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e004      	b.n	8006760 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fc7f 	bl	800705c <DMA_List_GetNodeConfig>

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08c      	sub	sp, #48	@ 0x30
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <HAL_DMAEx_List_InsertNode+0x18>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e0b6      	b.n	80068f2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d104      	bne.n	8006796 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2204      	movs	r2, #4
 8006790:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e0ad      	b.n	80068f2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	68b9      	ldr	r1, [r7, #8]
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 fd66 	bl	8007270 <DMA_List_CheckNodesBaseAddresses>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d004      	beq.n	80067b4 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2205      	movs	r2, #5
 80067ae:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e09e      	b.n	80068f2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	68b9      	ldr	r1, [r7, #8]
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 fd87 	bl	80072d0 <DMA_List_CheckNodesTypes>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d004      	beq.n	80067d2 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2204      	movs	r2, #4
 80067cc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e08f      	b.n	80068f2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2202      	movs	r2, #2
 80067d6:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80067de:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80067e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fdad 	bl	8007348 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d11a      	bne.n	800682c <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d106      	bne.n	800680a <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2201      	movs	r2, #1
 8006806:	609a      	str	r2, [r3, #8]
 8006808:	e06c      	b.n	80068e4 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006816:	4013      	ands	r3, r2
 8006818:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800681a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800681c:	4319      	orrs	r1, r3
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2202      	movs	r2, #2
 8006828:	609a      	str	r2, [r3, #8]
 800682a:	e05b      	b.n	80068e4 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10f      	bne.n	8006852 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	461a      	mov	r2, r3
 8006838:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800683c:	4013      	ands	r3, r2
 800683e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006842:	4319      	orrs	r1, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	e043      	b.n	80068da <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8006852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006854:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8006856:	f107 0314 	add.w	r3, r7, #20
 800685a:	461a      	mov	r2, r3
 800685c:	68b9      	ldr	r1, [r7, #8]
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 fda2 	bl	80073a8 <DMA_List_FindNode>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d132      	bne.n	80068d0 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 800686a:	69fa      	ldr	r2, [r7, #28]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	429a      	cmp	r2, r3
 8006872:	d11a      	bne.n	80068aa <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00b      	beq.n	8006894 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	461a      	mov	r2, r3
 8006882:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006886:	4013      	ands	r3, r2
 8006888:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800688a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800688c:	4319      	orrs	r1, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800689a:	4013      	ands	r3, r2
 800689c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800689e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068a0:	4319      	orrs	r1, r3
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80068a8:	e017      	b.n	80068da <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 80068aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80068c0:	4013      	ands	r3, r2
 80068c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068c6:	4319      	orrs	r1, r3
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80068ce:	e004      	b.n	80068da <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2206      	movs	r2, #6
 80068d4:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e00b      	b.n	80068f2 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2201      	movs	r2, #1
 80068ee:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3730      	adds	r7, #48	@ 0x30
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b08a      	sub	sp, #40	@ 0x28
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e052      	b.n	80069b2 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d104      	bne.n	800691e <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e049      	b.n	80069b2 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00c      	beq.n	8006940 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d101      	bne.n	8006936 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	e03d      	b.n	80069b2 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2204      	movs	r2, #4
 800693a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e038      	b.n	80069b2 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d104      	bne.n	8006952 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2204      	movs	r2, #4
 800694c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e02f      	b.n	80069b2 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2202      	movs	r2, #2
 8006956:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f107 0220 	add.w	r2, r7, #32
 8006966:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800696a:	4618      	mov	r0, r3
 800696c:	f000 fcec 	bl	8007348 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8006974:	f107 030c 	add.w	r3, r7, #12
 8006978:	461a      	mov	r2, r3
 800697a:	2100      	movs	r1, #0
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fd13 	bl	80073a8 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800698c:	4013      	ands	r3, r2
 800698e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	4610      	mov	r0, r2
 8006994:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8006996:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8006998:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3728      	adds	r7, #40	@ 0x28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <HAL_DMAEx_List_LinkQ+0x16>
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e072      	b.n	8006abc <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80069dc:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d002      	beq.n	80069f0 <HAL_DMAEx_List_LinkQ+0x34>
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	2b05      	cmp	r3, #5
 80069ee:	d108      	bne.n	8006a02 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2240      	movs	r2, #64	@ 0x40
 80069f4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e05c      	b.n	8006abc <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	7b1b      	ldrb	r3, [r3, #12]
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d104      	bne.n	8006a16 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e052      	b.n	8006abc <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a2b      	ldr	r2, [pc, #172]	@ (8006ac8 <HAL_DMAEx_List_LinkQ+0x10c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d022      	beq.n	8006a66 <HAL_DMAEx_List_LinkQ+0xaa>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a29      	ldr	r2, [pc, #164]	@ (8006acc <HAL_DMAEx_List_LinkQ+0x110>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d01d      	beq.n	8006a66 <HAL_DMAEx_List_LinkQ+0xaa>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a28      	ldr	r2, [pc, #160]	@ (8006ad0 <HAL_DMAEx_List_LinkQ+0x114>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d018      	beq.n	8006a66 <HAL_DMAEx_List_LinkQ+0xaa>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a26      	ldr	r2, [pc, #152]	@ (8006ad4 <HAL_DMAEx_List_LinkQ+0x118>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d013      	beq.n	8006a66 <HAL_DMAEx_List_LinkQ+0xaa>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a25      	ldr	r2, [pc, #148]	@ (8006ad8 <HAL_DMAEx_List_LinkQ+0x11c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d00e      	beq.n	8006a66 <HAL_DMAEx_List_LinkQ+0xaa>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a23      	ldr	r2, [pc, #140]	@ (8006adc <HAL_DMAEx_List_LinkQ+0x120>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d009      	beq.n	8006a66 <HAL_DMAEx_List_LinkQ+0xaa>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a22      	ldr	r2, [pc, #136]	@ (8006ae0 <HAL_DMAEx_List_LinkQ+0x124>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d004      	beq.n	8006a66 <HAL_DMAEx_List_LinkQ+0xaa>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a20      	ldr	r2, [pc, #128]	@ (8006ae4 <HAL_DMAEx_List_LinkQ+0x128>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d101      	bne.n	8006a6a <HAL_DMAEx_List_LinkQ+0xae>
 8006a66:	2301      	movs	r3, #1
 8006a68:	e000      	b.n	8006a6c <HAL_DMAEx_List_LinkQ+0xb0>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10b      	bne.n	8006a88 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d004      	beq.n	8006a88 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2203      	movs	r2, #3
 8006a82:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e019      	b.n	8006abc <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a8c:	2b81      	cmp	r3, #129	@ 0x81
 8006a8e:	d108      	bne.n	8006aa2 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10d      	bne.n	8006ab4 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	2204      	movs	r2, #4
 8006a9c:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e00c      	b.n	8006abc <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2204      	movs	r2, #4
 8006aae:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e003      	b.n	8006abc <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	40020650 	.word	0x40020650
 8006acc:	50020650 	.word	0x50020650
 8006ad0:	400206d0 	.word	0x400206d0
 8006ad4:	500206d0 	.word	0x500206d0
 8006ad8:	40020750 	.word	0x40020750
 8006adc:	50020750 	.word	0x50020750
 8006ae0:	400207d0 	.word	0x400207d0
 8006ae4:	500207d0 	.word	0x500207d0

08006ae8 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	0c1b      	lsrs	r3, r3, #16
 8006af8:	b2db      	uxtb	r3, r3
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
	...

08006b08 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a85      	ldr	r2, [pc, #532]	@ (8006d38 <DMA_List_Init+0x230>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	f000 80a0 	beq.w	8006c68 <DMA_List_Init+0x160>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a83      	ldr	r2, [pc, #524]	@ (8006d3c <DMA_List_Init+0x234>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	f000 809a 	beq.w	8006c68 <DMA_List_Init+0x160>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a81      	ldr	r2, [pc, #516]	@ (8006d40 <DMA_List_Init+0x238>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	f000 8094 	beq.w	8006c68 <DMA_List_Init+0x160>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a7f      	ldr	r2, [pc, #508]	@ (8006d44 <DMA_List_Init+0x23c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	f000 808e 	beq.w	8006c68 <DMA_List_Init+0x160>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a7d      	ldr	r2, [pc, #500]	@ (8006d48 <DMA_List_Init+0x240>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	f000 8088 	beq.w	8006c68 <DMA_List_Init+0x160>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a7b      	ldr	r2, [pc, #492]	@ (8006d4c <DMA_List_Init+0x244>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	f000 8082 	beq.w	8006c68 <DMA_List_Init+0x160>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a79      	ldr	r2, [pc, #484]	@ (8006d50 <DMA_List_Init+0x248>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d07c      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a78      	ldr	r2, [pc, #480]	@ (8006d54 <DMA_List_Init+0x24c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d077      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a76      	ldr	r2, [pc, #472]	@ (8006d58 <DMA_List_Init+0x250>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d072      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a75      	ldr	r2, [pc, #468]	@ (8006d5c <DMA_List_Init+0x254>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d06d      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a73      	ldr	r2, [pc, #460]	@ (8006d60 <DMA_List_Init+0x258>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d068      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a72      	ldr	r2, [pc, #456]	@ (8006d64 <DMA_List_Init+0x25c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d063      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a70      	ldr	r2, [pc, #448]	@ (8006d68 <DMA_List_Init+0x260>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d05e      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a6f      	ldr	r2, [pc, #444]	@ (8006d6c <DMA_List_Init+0x264>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d059      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a6d      	ldr	r2, [pc, #436]	@ (8006d70 <DMA_List_Init+0x268>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d054      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a6c      	ldr	r2, [pc, #432]	@ (8006d74 <DMA_List_Init+0x26c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d04f      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a6a      	ldr	r2, [pc, #424]	@ (8006d78 <DMA_List_Init+0x270>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d04a      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a69      	ldr	r2, [pc, #420]	@ (8006d7c <DMA_List_Init+0x274>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d045      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a67      	ldr	r2, [pc, #412]	@ (8006d80 <DMA_List_Init+0x278>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d040      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a66      	ldr	r2, [pc, #408]	@ (8006d84 <DMA_List_Init+0x27c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d03b      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a64      	ldr	r2, [pc, #400]	@ (8006d88 <DMA_List_Init+0x280>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d036      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a63      	ldr	r2, [pc, #396]	@ (8006d8c <DMA_List_Init+0x284>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d031      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a61      	ldr	r2, [pc, #388]	@ (8006d90 <DMA_List_Init+0x288>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d02c      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a60      	ldr	r2, [pc, #384]	@ (8006d94 <DMA_List_Init+0x28c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d027      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a5e      	ldr	r2, [pc, #376]	@ (8006d98 <DMA_List_Init+0x290>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d022      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a5d      	ldr	r2, [pc, #372]	@ (8006d9c <DMA_List_Init+0x294>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d01d      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a5b      	ldr	r2, [pc, #364]	@ (8006da0 <DMA_List_Init+0x298>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d018      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a5a      	ldr	r2, [pc, #360]	@ (8006da4 <DMA_List_Init+0x29c>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d013      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a58      	ldr	r2, [pc, #352]	@ (8006da8 <DMA_List_Init+0x2a0>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d00e      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a57      	ldr	r2, [pc, #348]	@ (8006dac <DMA_List_Init+0x2a4>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d009      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a55      	ldr	r2, [pc, #340]	@ (8006db0 <DMA_List_Init+0x2a8>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d004      	beq.n	8006c68 <DMA_List_Init+0x160>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a54      	ldr	r2, [pc, #336]	@ (8006db4 <DMA_List_Init+0x2ac>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d101      	bne.n	8006c6c <DMA_List_Init+0x164>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e000      	b.n	8006c6e <DMA_List_Init+0x166>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d004      	beq.n	8006c7c <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2200      	movs	r2, #0
 8006c96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006ca0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a36      	ldr	r2, [pc, #216]	@ (8006d98 <DMA_List_Init+0x290>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d022      	beq.n	8006d0a <DMA_List_Init+0x202>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a34      	ldr	r2, [pc, #208]	@ (8006d9c <DMA_List_Init+0x294>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d01d      	beq.n	8006d0a <DMA_List_Init+0x202>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a33      	ldr	r2, [pc, #204]	@ (8006da0 <DMA_List_Init+0x298>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d018      	beq.n	8006d0a <DMA_List_Init+0x202>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a31      	ldr	r2, [pc, #196]	@ (8006da4 <DMA_List_Init+0x29c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d013      	beq.n	8006d0a <DMA_List_Init+0x202>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a30      	ldr	r2, [pc, #192]	@ (8006da8 <DMA_List_Init+0x2a0>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00e      	beq.n	8006d0a <DMA_List_Init+0x202>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a2e      	ldr	r2, [pc, #184]	@ (8006dac <DMA_List_Init+0x2a4>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d009      	beq.n	8006d0a <DMA_List_Init+0x202>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a2d      	ldr	r2, [pc, #180]	@ (8006db0 <DMA_List_Init+0x2a8>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d004      	beq.n	8006d0a <DMA_List_Init+0x202>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a2b      	ldr	r2, [pc, #172]	@ (8006db4 <DMA_List_Init+0x2ac>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d101      	bne.n	8006d0e <DMA_List_Init+0x206>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e000      	b.n	8006d10 <DMA_List_Init+0x208>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d007      	beq.n	8006d24 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2200      	movs	r2, #0
 8006d22:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006d2c:	bf00      	nop
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	40020050 	.word	0x40020050
 8006d3c:	50020050 	.word	0x50020050
 8006d40:	400200d0 	.word	0x400200d0
 8006d44:	500200d0 	.word	0x500200d0
 8006d48:	40020150 	.word	0x40020150
 8006d4c:	50020150 	.word	0x50020150
 8006d50:	400201d0 	.word	0x400201d0
 8006d54:	500201d0 	.word	0x500201d0
 8006d58:	40020250 	.word	0x40020250
 8006d5c:	50020250 	.word	0x50020250
 8006d60:	400202d0 	.word	0x400202d0
 8006d64:	500202d0 	.word	0x500202d0
 8006d68:	40020350 	.word	0x40020350
 8006d6c:	50020350 	.word	0x50020350
 8006d70:	400203d0 	.word	0x400203d0
 8006d74:	500203d0 	.word	0x500203d0
 8006d78:	40020450 	.word	0x40020450
 8006d7c:	50020450 	.word	0x50020450
 8006d80:	400204d0 	.word	0x400204d0
 8006d84:	500204d0 	.word	0x500204d0
 8006d88:	40020550 	.word	0x40020550
 8006d8c:	50020550 	.word	0x50020550
 8006d90:	400205d0 	.word	0x400205d0
 8006d94:	500205d0 	.word	0x500205d0
 8006d98:	40020650 	.word	0x40020650
 8006d9c:	50020650 	.word	0x50020650
 8006da0:	400206d0 	.word	0x400206d0
 8006da4:	500206d0 	.word	0x500206d0
 8006da8:	40020750 	.word	0x40020750
 8006dac:	50020750 	.word	0x50020750
 8006db0:	400207d0 	.word	0x400207d0
 8006db4:	500207d0 	.word	0x500207d0

08006db8 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006dca:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8006dd0:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8006dd6:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8006ddc:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0320 	and.w	r3, r3, #32
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d017      	beq.n	8006e1e <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfa:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e00:	3b01      	subs	r3, #1
 8006e02:	051b      	lsls	r3, r3, #20
 8006e04:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8006e08:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	011b      	lsls	r3, r3, #4
 8006e12:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8006e16:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6859      	ldr	r1, [r3, #4]
 8006e26:	f240 237f 	movw	r3, #639	@ 0x27f
 8006e2a:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e3a:	d10c      	bne.n	8006e56 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0320 	and.w	r3, r3, #32
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d011      	beq.n	8006e6c <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	605a      	str	r2, [r3, #4]
 8006e54:	e00a      	b.n	8006e6c <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e5e:	d105      	bne.n	8006e6c <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00f      	beq.n	8006e94 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e80:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e86:	041b      	lsls	r3, r3, #16
 8006e88:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8006e8c:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d04e      	beq.n	8006f48 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	0419      	lsls	r1, r3, #16
 8006eb6:	4b67      	ldr	r3, [pc, #412]	@ (8007054 <DMA_List_BuildNode+0x29c>)
 8006eb8:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	da06      	bge.n	8006ed6 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	609a      	str	r2, [r3, #8]
 8006ed4:	e005      	b.n	8006ee2 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	da06      	bge.n	8006ef8 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	609a      	str	r2, [r3, #8]
 8006ef6:	e005      	b.n	8006f04 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	da06      	bge.n	8006f1a <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	609a      	str	r2, [r3, #8]
 8006f18:	e005      	b.n	8006f26 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	da06      	bge.n	8006f3c <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	609a      	str	r2, [r3, #8]
 8006f3a:	e005      	b.n	8006f48 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0302 	and.w	r3, r3, #2
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d059      	beq.n	8007018 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	da09      	bge.n	8006f80 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f70:	425b      	negs	r3, r3
 8006f72:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	615a      	str	r2, [r3, #20]
 8006f7e:	e005      	b.n	8006f8c <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f84:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	da0d      	bge.n	8006fb0 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f98:	425b      	negs	r3, r3
 8006f9a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	695a      	ldr	r2, [r3, #20]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	0419      	lsls	r1, r3, #16
 8006fa4:	4b2c      	ldr	r3, [pc, #176]	@ (8007058 <DMA_List_BuildNode+0x2a0>)
 8006fa6:	400b      	ands	r3, r1
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	615a      	str	r2, [r3, #20]
 8006fae:	e009      	b.n	8006fc4 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb8:	0419      	lsls	r1, r3, #16
 8006fba:	4b27      	ldr	r3, [pc, #156]	@ (8007058 <DMA_List_BuildNode+0x2a0>)
 8006fbc:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	da08      	bge.n	8006fde <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fd0:	425b      	negs	r3, r3
 8006fd2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	619a      	str	r2, [r3, #24]
 8006fdc:	e004      	b.n	8006fe8 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fe2:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	da0b      	bge.n	8007008 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ff4:	425b      	negs	r3, r3
 8006ff6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007000:	431a      	orrs	r2, r3
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	619a      	str	r2, [r3, #24]
 8007006:	e007      	b.n	8007018 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007010:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007012:	431a      	orrs	r2, r3
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0302 	and.w	r3, r3, #2
 8007028:	2b00      	cmp	r3, #0
 800702a:	d006      	beq.n	800703a <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8007038:	e005      	b.n	8007046 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	621a      	str	r2, [r3, #32]
}
 8007046:	bf00      	nop
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	07ff0000 	.word	0x07ff0000
 8007058:	1fff0000 	.word	0x1fff0000

0800705c <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	b2da      	uxtb	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0208 	and.w	r2, r3, #8
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0203 	and.w	r2, r3, #3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 80070a4:	091b      	lsrs	r3, r3, #4
 80070a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070aa:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 80070b4:	0d1b      	lsrs	r3, r3, #20
 80070b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070ba:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	4b66      	ldr	r3, [pc, #408]	@ (800726c <DMA_List_GetNodeConfig+0x210>)
 80070d2:	4013      	ands	r3, r2
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d008      	beq.n	8007102 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070f6:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070fe:	60da      	str	r2, [r3, #12]
 8007100:	e013      	b.n	800712a <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007116:	2b00      	cmp	r3, #0
 8007118:	d004      	beq.n	8007124 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007120:	60da      	str	r2, [r3, #12]
 8007122:	e002      	b.n	800712a <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8007152:	0c1b      	lsrs	r3, r3, #16
 8007154:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	b29a      	uxth	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	2b00      	cmp	r3, #0
 800717c:	d008      	beq.n	8007190 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	0c1b      	lsrs	r3, r3, #16
 8007184:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007188:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800718e:	e002      	b.n	8007196 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	691a      	ldr	r2, [r3, #16]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d04a      	beq.n	8007248 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071bc:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 80071be:	89fa      	ldrh	r2, [r7, #14]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	0c1b      	lsrs	r3, r3, #16
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071d0:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 80071d2:	89fa      	ldrh	r2, [r7, #14]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d004      	beq.n	80071ee <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e8:	425a      	negs	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d004      	beq.n	8007204 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071fe:	425a      	negs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 800720a:	89fa      	ldrh	r2, [r7, #14]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	0c1b      	lsrs	r3, r3, #16
 8007216:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8007218:	89fa      	ldrh	r2, [r7, #14]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d004      	beq.n	8007234 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800722e:	425a      	negs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	da11      	bge.n	8007260 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007240:	425a      	negs	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8007246:	e00b      	b.n	8007260 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007260:	bf00      	nop
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	0c002000 	.word	0x0c002000

08007270 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	431a      	orrs	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4313      	orrs	r3, r2
 8007286:	0c1b      	lsrs	r3, r3, #16
 8007288:	041b      	lsls	r3, r3, #16
 800728a:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 800728c:	2300      	movs	r3, #0
 800728e:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	617b      	str	r3, [r7, #20]
 800729a:	e00a      	b.n	80072b2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	617b      	str	r3, [r7, #20]
 80072a6:	e004      	b.n	80072b2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	0c1b      	lsrs	r3, r3, #16
 80072b6:	041b      	lsls	r3, r3, #16
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d001      	beq.n	80072c2 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80072be:	2301      	movs	r3, #1
 80072c0:	e000      	b.n	80072c4 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d004      	beq.n	80072f0 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	617b      	str	r3, [r7, #20]
 80072ee:	e00e      	b.n	800730e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d004      	beq.n	8007300 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	617b      	str	r3, [r7, #20]
 80072fe:	e006      	b.n	800730e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	b2db      	uxtb	r3, r3
 800730c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d007      	beq.n	8007324 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	b2db      	uxtb	r3, r3
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	429a      	cmp	r2, r3
 800731e:	d001      	beq.n	8007324 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8007320:	2302      	movs	r3, #2
 8007322:	e00b      	b.n	800733c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d007      	beq.n	800733a <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	429a      	cmp	r2, r3
 8007334:	d001      	beq.n	800733a <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8007336:	2303      	movs	r3, #3
 8007338:	e000      	b.n	800733c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	371c      	adds	r7, #28
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6a1b      	ldr	r3, [r3, #32]
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00c      	beq.n	800737a <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	4a0d      	ldr	r2, [pc, #52]	@ (80073a0 <DMA_List_GetCLLRNodeInfo+0x58>)
 800736a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00f      	beq.n	8007392 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2207      	movs	r2, #7
 8007376:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8007378:	e00b      	b.n	8007392 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4a08      	ldr	r2, [pc, #32]	@ (80073a4 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8007384:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2205      	movs	r2, #5
 8007390:	601a      	str	r2, [r3, #0]
}
 8007392:	bf00      	nop
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	fe010000 	.word	0xfe010000
 80073a4:	f8010000 	.word	0xf8010000

080073a8 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b089      	sub	sp, #36	@ 0x24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80073bc:	2300      	movs	r3, #0
 80073be:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d142      	bne.n	8007452 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80073cc:	e01d      	b.n	800740a <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d107      	bne.n	80073e4 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	461a      	mov	r2, r3
 80073da:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80073de:	4013      	ands	r3, r2
 80073e0:	61bb      	str	r3, [r7, #24]
 80073e2:	e00f      	b.n	8007404 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	0c1b      	lsrs	r3, r3, #16
 80073ee:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	4413      	add	r3, r2
 80073f4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80073fc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007400:	4013      	ands	r3, r2
 8007402:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	3301      	adds	r3, #1
 8007408:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	69fa      	ldr	r2, [r7, #28]
 8007410:	429a      	cmp	r2, r3
 8007412:	d3dc      	bcc.n	80073ce <DMA_List_FindNode+0x26>
 8007414:	e029      	b.n	800746a <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d107      	bne.n	800742c <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	461a      	mov	r2, r3
 8007422:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007426:	4013      	ands	r3, r2
 8007428:	61bb      	str	r3, [r7, #24]
 800742a:	e00f      	b.n	800744c <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	0c1b      	lsrs	r3, r3, #16
 8007436:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007438:	69ba      	ldr	r2, [r7, #24]
 800743a:	4413      	add	r3, r2
 800743c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007444:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007448:	4013      	ands	r3, r2
 800744a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	3301      	adds	r3, #1
 8007450:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	69fa      	ldr	r2, [r7, #28]
 8007458:	429a      	cmp	r2, r3
 800745a:	d206      	bcs.n	800746a <DMA_List_FindNode+0xc2>
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007462:	4013      	ands	r3, r2
 8007464:	69ba      	ldr	r2, [r7, #24]
 8007466:	429a      	cmp	r2, r3
 8007468:	d1d5      	bne.n	8007416 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d008      	beq.n	8007482 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8007476:	4013      	ands	r3, r2
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	429a      	cmp	r2, r3
 800747c:	d001      	beq.n	8007482 <DMA_List_FindNode+0xda>
    {
      return 1U;
 800747e:	2301      	movs	r3, #1
 8007480:	e02b      	b.n	80074da <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	69fa      	ldr	r2, [r7, #28]
 8007486:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	0c1b      	lsrs	r3, r3, #16
 800748e:	041b      	lsls	r3, r3, #16
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	431a      	orrs	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	0c1b      	lsrs	r3, r3, #16
 800749e:	041b      	lsls	r3, r3, #16
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	431a      	orrs	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	461a      	mov	r2, r3
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00f      	beq.n	80074d8 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	461a      	mov	r2, r3
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074c4:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80074c8:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	0c1b      	lsrs	r3, r3, #16
 80074d0:	041b      	lsls	r3, r3, #16
 80074d2:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3724      	adds	r7, #36	@ 0x24
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
	...

080074e8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b089      	sub	sp, #36	@ 0x24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80074fa:	e1ba      	b.n	8007872 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	2101      	movs	r1, #1
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	fa01 f303 	lsl.w	r3, r1, r3
 8007508:	4013      	ands	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 81aa 	beq.w	800786c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a55      	ldr	r2, [pc, #340]	@ (8007670 <HAL_GPIO_Init+0x188>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d15d      	bne.n	80075dc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8007526:	2201      	movs	r2, #1
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	fa02 f303 	lsl.w	r3, r2, r3
 800752e:	43db      	mvns	r3, r3
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	4013      	ands	r3, r2
 8007534:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f003 0201 	and.w	r2, r3, #1
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	fa02 f303 	lsl.w	r3, r2, r3
 8007544:	69fa      	ldr	r2, [r7, #28]
 8007546:	4313      	orrs	r3, r2
 8007548:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	69fa      	ldr	r2, [r7, #28]
 800754e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8007550:	4a48      	ldr	r2, [pc, #288]	@ (8007674 <HAL_GPIO_Init+0x18c>)
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007558:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800755a:	4a46      	ldr	r2, [pc, #280]	@ (8007674 <HAL_GPIO_Init+0x18c>)
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	4413      	add	r3, r2
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	08da      	lsrs	r2, r3, #3
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	3208      	adds	r2, #8
 800756e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007572:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	f003 0307 	and.w	r3, r3, #7
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	220f      	movs	r2, #15
 800757e:	fa02 f303 	lsl.w	r3, r2, r3
 8007582:	43db      	mvns	r3, r3
 8007584:	69fa      	ldr	r2, [r7, #28]
 8007586:	4013      	ands	r3, r2
 8007588:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	220b      	movs	r2, #11
 8007594:	fa02 f303 	lsl.w	r3, r2, r3
 8007598:	69fa      	ldr	r2, [r7, #28]
 800759a:	4313      	orrs	r3, r2
 800759c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	08da      	lsrs	r2, r3, #3
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	3208      	adds	r2, #8
 80075a6:	69f9      	ldr	r1, [r7, #28]
 80075a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	2203      	movs	r2, #3
 80075b8:	fa02 f303 	lsl.w	r3, r2, r3
 80075bc:	43db      	mvns	r3, r3
 80075be:	69fa      	ldr	r2, [r7, #28]
 80075c0:	4013      	ands	r3, r2
 80075c2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	005b      	lsls	r3, r3, #1
 80075c8:	2202      	movs	r2, #2
 80075ca:	fa02 f303 	lsl.w	r3, r2, r3
 80075ce:	69fa      	ldr	r2, [r7, #28]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	69fa      	ldr	r2, [r7, #28]
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	e067      	b.n	80076ac <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d003      	beq.n	80075ec <HAL_GPIO_Init+0x104>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	2b12      	cmp	r3, #18
 80075ea:	d145      	bne.n	8007678 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	08da      	lsrs	r2, r3, #3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	3208      	adds	r2, #8
 80075f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	f003 0307 	and.w	r3, r3, #7
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	220f      	movs	r2, #15
 8007604:	fa02 f303 	lsl.w	r3, r2, r3
 8007608:	43db      	mvns	r3, r3
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	4013      	ands	r3, r2
 800760e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	f003 020f 	and.w	r2, r3, #15
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f003 0307 	and.w	r3, r3, #7
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	fa02 f303 	lsl.w	r3, r2, r3
 8007624:	69fa      	ldr	r2, [r7, #28]
 8007626:	4313      	orrs	r3, r2
 8007628:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	08da      	lsrs	r2, r3, #3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	3208      	adds	r2, #8
 8007632:	69f9      	ldr	r1, [r7, #28]
 8007634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	005b      	lsls	r3, r3, #1
 8007642:	2203      	movs	r2, #3
 8007644:	fa02 f303 	lsl.w	r3, r2, r3
 8007648:	43db      	mvns	r3, r3
 800764a:	69fa      	ldr	r2, [r7, #28]
 800764c:	4013      	ands	r3, r2
 800764e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f003 0203 	and.w	r2, r3, #3
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	005b      	lsls	r3, r3, #1
 800765c:	fa02 f303 	lsl.w	r3, r2, r3
 8007660:	69fa      	ldr	r2, [r7, #28]
 8007662:	4313      	orrs	r3, r2
 8007664:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	e01e      	b.n	80076ac <HAL_GPIO_Init+0x1c4>
 800766e:	bf00      	nop
 8007670:	46020000 	.word	0x46020000
 8007674:	08011980 	.word	0x08011980
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	005b      	lsls	r3, r3, #1
 8007682:	2203      	movs	r2, #3
 8007684:	fa02 f303 	lsl.w	r3, r2, r3
 8007688:	43db      	mvns	r3, r3
 800768a:	69fa      	ldr	r2, [r7, #28]
 800768c:	4013      	ands	r3, r2
 800768e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f003 0203 	and.w	r2, r3, #3
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	005b      	lsls	r3, r3, #1
 800769c:	fa02 f303 	lsl.w	r3, r2, r3
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	69fa      	ldr	r2, [r7, #28]
 80076aa:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d00b      	beq.n	80076cc <HAL_GPIO_Init+0x1e4>
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d007      	beq.n	80076cc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80076c0:	2b11      	cmp	r3, #17
 80076c2:	d003      	beq.n	80076cc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	2b12      	cmp	r3, #18
 80076ca:	d130      	bne.n	800772e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	2203      	movs	r2, #3
 80076d8:	fa02 f303 	lsl.w	r3, r2, r3
 80076dc:	43db      	mvns	r3, r3
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	4013      	ands	r3, r2
 80076e2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	68da      	ldr	r2, [r3, #12]
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	fa02 f303 	lsl.w	r3, r2, r3
 80076f0:	69fa      	ldr	r2, [r7, #28]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	69fa      	ldr	r2, [r7, #28]
 80076fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8007702:	2201      	movs	r2, #1
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	fa02 f303 	lsl.w	r3, r2, r3
 800770a:	43db      	mvns	r3, r3
 800770c:	69fa      	ldr	r2, [r7, #28]
 800770e:	4013      	ands	r3, r2
 8007710:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	091b      	lsrs	r3, r3, #4
 8007718:	f003 0201 	and.w	r2, r3, #1
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	fa02 f303 	lsl.w	r3, r2, r3
 8007722:	69fa      	ldr	r2, [r7, #28]
 8007724:	4313      	orrs	r3, r2
 8007726:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	69fa      	ldr	r2, [r7, #28]
 800772c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	2b03      	cmp	r3, #3
 8007734:	d017      	beq.n	8007766 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	005b      	lsls	r3, r3, #1
 8007740:	2203      	movs	r2, #3
 8007742:	fa02 f303 	lsl.w	r3, r2, r3
 8007746:	43db      	mvns	r3, r3
 8007748:	69fa      	ldr	r2, [r7, #28]
 800774a:	4013      	ands	r3, r2
 800774c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	fa02 f303 	lsl.w	r3, r2, r3
 800775a:	69fa      	ldr	r2, [r7, #28]
 800775c:	4313      	orrs	r3, r2
 800775e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	69fa      	ldr	r2, [r7, #28]
 8007764:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d07c      	beq.n	800786c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007772:	4a47      	ldr	r2, [pc, #284]	@ (8007890 <HAL_GPIO_Init+0x3a8>)
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	089b      	lsrs	r3, r3, #2
 8007778:	3318      	adds	r3, #24
 800777a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800777e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f003 0303 	and.w	r3, r3, #3
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	220f      	movs	r2, #15
 800778a:	fa02 f303 	lsl.w	r3, r2, r3
 800778e:	43db      	mvns	r3, r3
 8007790:	69fa      	ldr	r2, [r7, #28]
 8007792:	4013      	ands	r3, r2
 8007794:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	0a9a      	lsrs	r2, r3, #10
 800779a:	4b3e      	ldr	r3, [pc, #248]	@ (8007894 <HAL_GPIO_Init+0x3ac>)
 800779c:	4013      	ands	r3, r2
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	f002 0203 	and.w	r2, r2, #3
 80077a4:	00d2      	lsls	r2, r2, #3
 80077a6:	4093      	lsls	r3, r2
 80077a8:	69fa      	ldr	r2, [r7, #28]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80077ae:	4938      	ldr	r1, [pc, #224]	@ (8007890 <HAL_GPIO_Init+0x3a8>)
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	089b      	lsrs	r3, r3, #2
 80077b4:	3318      	adds	r3, #24
 80077b6:	69fa      	ldr	r2, [r7, #28]
 80077b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80077bc:	4b34      	ldr	r3, [pc, #208]	@ (8007890 <HAL_GPIO_Init+0x3a8>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	43db      	mvns	r3, r3
 80077c6:	69fa      	ldr	r2, [r7, #28]
 80077c8:	4013      	ands	r3, r2
 80077ca:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d003      	beq.n	80077e0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80077d8:	69fa      	ldr	r2, [r7, #28]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	4313      	orrs	r3, r2
 80077de:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80077e0:	4a2b      	ldr	r2, [pc, #172]	@ (8007890 <HAL_GPIO_Init+0x3a8>)
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80077e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007890 <HAL_GPIO_Init+0x3a8>)
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	43db      	mvns	r3, r3
 80077f0:	69fa      	ldr	r2, [r7, #28]
 80077f2:	4013      	ands	r3, r2
 80077f4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d003      	beq.n	800780a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8007802:	69fa      	ldr	r2, [r7, #28]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4313      	orrs	r3, r2
 8007808:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800780a:	4a21      	ldr	r2, [pc, #132]	@ (8007890 <HAL_GPIO_Init+0x3a8>)
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007810:	4b1f      	ldr	r3, [pc, #124]	@ (8007890 <HAL_GPIO_Init+0x3a8>)
 8007812:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007816:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	43db      	mvns	r3, r3
 800781c:	69fa      	ldr	r2, [r7, #28]
 800781e:	4013      	ands	r3, r2
 8007820:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800782e:	69fa      	ldr	r2, [r7, #28]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4313      	orrs	r3, r2
 8007834:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8007836:	4a16      	ldr	r2, [pc, #88]	@ (8007890 <HAL_GPIO_Init+0x3a8>)
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800783e:	4b14      	ldr	r3, [pc, #80]	@ (8007890 <HAL_GPIO_Init+0x3a8>)
 8007840:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007844:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	43db      	mvns	r3, r3
 800784a:	69fa      	ldr	r2, [r7, #28]
 800784c:	4013      	ands	r3, r2
 800784e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800785c:	69fa      	ldr	r2, [r7, #28]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	4313      	orrs	r3, r2
 8007862:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007864:	4a0a      	ldr	r2, [pc, #40]	@ (8007890 <HAL_GPIO_Init+0x3a8>)
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	3301      	adds	r3, #1
 8007870:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	fa22 f303 	lsr.w	r3, r2, r3
 800787c:	2b00      	cmp	r3, #0
 800787e:	f47f ae3d 	bne.w	80074fc <HAL_GPIO_Init+0x14>
  }
}
 8007882:	bf00      	nop
 8007884:	bf00      	nop
 8007886:	3724      	adds	r7, #36	@ 0x24
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	46022000 	.word	0x46022000
 8007894:	002f7f7f 	.word	0x002f7f7f

08007898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	807b      	strh	r3, [r7, #2]
 80078a4:	4613      	mov	r3, r2
 80078a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80078a8:	787b      	ldrb	r3, [r7, #1]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80078ae:	887a      	ldrh	r2, [r7, #2]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80078b4:	e002      	b.n	80078bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80078b6:	887a      	ldrh	r2, [r7, #2]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	4603      	mov	r3, r0
 80078d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80078d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007910 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80078d4:	68da      	ldr	r2, [r3, #12]
 80078d6:	88fb      	ldrh	r3, [r7, #6]
 80078d8:	4013      	ands	r3, r2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d006      	beq.n	80078ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80078de:	4a0c      	ldr	r2, [pc, #48]	@ (8007910 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80078e0:	88fb      	ldrh	r3, [r7, #6]
 80078e2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80078e4:	88fb      	ldrh	r3, [r7, #6]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 f814 	bl	8007914 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80078ec:	4b08      	ldr	r3, [pc, #32]	@ (8007910 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80078ee:	691a      	ldr	r2, [r3, #16]
 80078f0:	88fb      	ldrh	r3, [r7, #6]
 80078f2:	4013      	ands	r3, r2
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d006      	beq.n	8007906 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80078f8:	4a05      	ldr	r2, [pc, #20]	@ (8007910 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80078fa:	88fb      	ldrh	r3, [r7, #6]
 80078fc:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80078fe:	88fb      	ldrh	r3, [r7, #6]
 8007900:	4618      	mov	r0, r3
 8007902:	f000 f812 	bl	800792a <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007906:	bf00      	nop
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	46022000 	.word	0x46022000

08007914 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800791e:	bf00      	nop
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800792a:	b480      	push	{r7}
 800792c:	b083      	sub	sp, #12
 800792e:	af00      	add	r7, sp, #0
 8007930:	4603      	mov	r3, r0
 8007932:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d101      	bne.n	8007952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e08d      	b.n	8007a6e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d106      	bne.n	800796c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7fa fa06 	bl	8001d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2224      	movs	r2, #36	@ 0x24
 8007970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f022 0201 	bic.w	r2, r2, #1
 8007982:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007990:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689a      	ldr	r2, [r3, #8]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d107      	bne.n	80079ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689a      	ldr	r2, [r3, #8]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079b6:	609a      	str	r2, [r3, #8]
 80079b8:	e006      	b.n	80079c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689a      	ldr	r2, [r3, #8]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80079c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d108      	bne.n	80079e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079de:	605a      	str	r2, [r3, #4]
 80079e0:	e007      	b.n	80079f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80079f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	6812      	ldr	r2, [r2, #0]
 80079fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007a00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68da      	ldr	r2, [r3, #12]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	691a      	ldr	r2, [r3, #16]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	69d9      	ldr	r1, [r3, #28]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a1a      	ldr	r2, [r3, #32]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f042 0201 	orr.w	r2, r2, #1
 8007a4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
	...

08007a78 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b088      	sub	sp, #32
 8007a7c:	af02      	add	r7, sp, #8
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	607a      	str	r2, [r7, #4]
 8007a82:	461a      	mov	r2, r3
 8007a84:	460b      	mov	r3, r1
 8007a86:	817b      	strh	r3, [r7, #10]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b20      	cmp	r3, #32
 8007a96:	f040 80da 	bne.w	8007c4e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d101      	bne.n	8007aa8 <HAL_I2C_Master_Transmit+0x30>
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	e0d3      	b.n	8007c50 <HAL_I2C_Master_Transmit+0x1d8>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ab0:	f7fb f8f8 	bl	8002ca4 <HAL_GetTick>
 8007ab4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	2319      	movs	r3, #25
 8007abc:	2201      	movs	r2, #1
 8007abe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f000 fe7d 	bl	80087c2 <I2C_WaitOnFlagUntilTimeout>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e0be      	b.n	8007c50 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2221      	movs	r2, #33	@ 0x21
 8007ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2210      	movs	r2, #16
 8007ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	893a      	ldrh	r2, [r7, #8]
 8007af2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	2bff      	cmp	r3, #255	@ 0xff
 8007b02:	d90e      	bls.n	8007b22 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	22ff      	movs	r2, #255	@ 0xff
 8007b08:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	8979      	ldrh	r1, [r7, #10]
 8007b12:	4b51      	ldr	r3, [pc, #324]	@ (8007c58 <HAL_I2C_Master_Transmit+0x1e0>)
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f001 f814 	bl	8008b48 <I2C_TransferConfig>
 8007b20:	e06c      	b.n	8007bfc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	8979      	ldrh	r1, [r7, #10]
 8007b34:	4b48      	ldr	r3, [pc, #288]	@ (8007c58 <HAL_I2C_Master_Transmit+0x1e0>)
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f001 f803 	bl	8008b48 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007b42:	e05b      	b.n	8007bfc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	6a39      	ldr	r1, [r7, #32]
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 fe93 	bl	8008874 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d001      	beq.n	8007b58 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e07b      	b.n	8007c50 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b5c:	781a      	ldrb	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b68:	1c5a      	adds	r2, r3, #1
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	3b01      	subs	r3, #1
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b80:	3b01      	subs	r3, #1
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d034      	beq.n	8007bfc <HAL_I2C_Master_Transmit+0x184>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d130      	bne.n	8007bfc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2180      	movs	r1, #128	@ 0x80
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 fe0c 	bl	80087c2 <I2C_WaitOnFlagUntilTimeout>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e04d      	b.n	8007c50 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	2bff      	cmp	r3, #255	@ 0xff
 8007bbc:	d90e      	bls.n	8007bdc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	22ff      	movs	r2, #255	@ 0xff
 8007bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	8979      	ldrh	r1, [r7, #10]
 8007bcc:	2300      	movs	r3, #0
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f000 ffb7 	bl	8008b48 <I2C_TransferConfig>
 8007bda:	e00f      	b.n	8007bfc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	8979      	ldrh	r1, [r7, #10]
 8007bee:	2300      	movs	r3, #0
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 ffa6 	bl	8008b48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d19e      	bne.n	8007b44 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	6a39      	ldr	r1, [r7, #32]
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 fe79 	bl	8008902 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d001      	beq.n	8007c1a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e01a      	b.n	8007c50 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	6859      	ldr	r1, [r3, #4]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c5c <HAL_I2C_Master_Transmit+0x1e4>)
 8007c2e:	400b      	ands	r3, r1
 8007c30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	e000      	b.n	8007c50 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007c4e:	2302      	movs	r3, #2
  }
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3718      	adds	r7, #24
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	80002000 	.word	0x80002000
 8007c5c:	fe00e800 	.word	0xfe00e800

08007c60 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d005      	beq.n	8007c8c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	68f9      	ldr	r1, [r7, #12]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	4798      	blx	r3
  }
}
 8007c8c:	bf00      	nop
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00f      	beq.n	8007cd6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00a      	beq.n	8007cd6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc4:	f043 0201 	orr.w	r2, r3, #1
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cd4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00f      	beq.n	8007d00 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00a      	beq.n	8007d00 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cee:	f043 0208 	orr.w	r2, r3, #8
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007cfe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00f      	beq.n	8007d2a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00a      	beq.n	8007d2a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d18:	f043 0202 	orr.w	r2, r3, #2
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d28:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d2e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f003 030b 	and.w	r3, r3, #11
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d003      	beq.n	8007d42 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8007d3a:	68f9      	ldr	r1, [r7, #12]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fbe7 	bl	8008510 <I2C_ITError>
  }
}
 8007d42:	bf00      	nop
 8007d44:	3718      	adds	r7, #24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007d52:	bf00      	nop
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	70fb      	strb	r3, [r7, #3]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007d82:	bf00      	nop
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007d96:	bf00      	nop
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b083      	sub	sp, #12
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007daa:	bf00      	nop
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b086      	sub	sp, #24
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dda:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d101      	bne.n	8007dee <I2C_Slave_ISR_IT+0x24>
 8007dea:	2302      	movs	r3, #2
 8007dec:	e0e2      	b.n	8007fb4 <I2C_Slave_ISR_IT+0x1ea>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	f003 0320 	and.w	r3, r3, #32
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d009      	beq.n	8007e14 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d004      	beq.n	8007e14 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007e0a:	6939      	ldr	r1, [r7, #16]
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 f9b5 	bl	800817c <I2C_ITSlaveCplt>
 8007e12:	e0ca      	b.n	8007faa <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	f003 0310 	and.w	r3, r3, #16
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d04b      	beq.n	8007eb6 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d046      	beq.n	8007eb6 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d128      	bne.n	8007e84 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b28      	cmp	r3, #40	@ 0x28
 8007e3c:	d108      	bne.n	8007e50 <I2C_Slave_ISR_IT+0x86>
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e44:	d104      	bne.n	8007e50 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007e46:	6939      	ldr	r1, [r7, #16]
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 fb0d 	bl	8008468 <I2C_ITListenCplt>
 8007e4e:	e031      	b.n	8007eb4 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b29      	cmp	r3, #41	@ 0x29
 8007e5a:	d10e      	bne.n	8007e7a <I2C_Slave_ISR_IT+0xb0>
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007e62:	d00a      	beq.n	8007e7a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2210      	movs	r2, #16
 8007e6a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f000 fc66 	bl	800873e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 f926 	bl	80080c4 <I2C_ITSlaveSeqCplt>
 8007e78:	e01c      	b.n	8007eb4 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2210      	movs	r2, #16
 8007e80:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007e82:	e08f      	b.n	8007fa4 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2210      	movs	r2, #16
 8007e8a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e90:	f043 0204 	orr.w	r2, r3, #4
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d003      	beq.n	8007ea6 <I2C_Slave_ISR_IT+0xdc>
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ea4:	d17e      	bne.n	8007fa4 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eaa:	4619      	mov	r1, r3
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 fb2f 	bl	8008510 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007eb2:	e077      	b.n	8007fa4 <I2C_Slave_ISR_IT+0x1da>
 8007eb4:	e076      	b.n	8007fa4 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	f003 0304 	and.w	r3, r3, #4
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d02f      	beq.n	8007f20 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d02a      	beq.n	8007f20 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d018      	beq.n	8007f06 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ede:	b2d2      	uxtb	r2, r2
 8007ee0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	3b01      	subs	r3, #1
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d14b      	bne.n	8007fa8 <I2C_Slave_ISR_IT+0x1de>
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f16:	d047      	beq.n	8007fa8 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 f8d3 	bl	80080c4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007f1e:	e043      	b.n	8007fa8 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	f003 0308 	and.w	r3, r3, #8
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d009      	beq.n	8007f3e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d004      	beq.n	8007f3e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007f34:	6939      	ldr	r1, [r7, #16]
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f000 f840 	bl	8007fbc <I2C_ITAddrCplt>
 8007f3c:	e035      	b.n	8007faa <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	f003 0302 	and.w	r3, r3, #2
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d030      	beq.n	8007faa <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d02b      	beq.n	8007faa <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d018      	beq.n	8007f8e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f60:	781a      	ldrb	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f6c:	1c5a      	adds	r2, r3, #1
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f84:	3b01      	subs	r3, #1
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007f8c:	e00d      	b.n	8007faa <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f94:	d002      	beq.n	8007f9c <I2C_Slave_ISR_IT+0x1d2>
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d106      	bne.n	8007faa <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f000 f891 	bl	80080c4 <I2C_ITSlaveSeqCplt>
 8007fa2:	e002      	b.n	8007faa <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8007fa4:	bf00      	nop
 8007fa6:	e000      	b.n	8007faa <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8007fa8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007fd2:	2b28      	cmp	r3, #40	@ 0x28
 8007fd4:	d16a      	bne.n	80080ac <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	0c1b      	lsrs	r3, r3, #16
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	0c1b      	lsrs	r3, r3, #16
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007ff4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008002:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	b29b      	uxth	r3, r3
 800800c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008010:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	2b02      	cmp	r3, #2
 8008018:	d138      	bne.n	800808c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800801a:	897b      	ldrh	r3, [r7, #10]
 800801c:	09db      	lsrs	r3, r3, #7
 800801e:	b29a      	uxth	r2, r3
 8008020:	89bb      	ldrh	r3, [r7, #12]
 8008022:	4053      	eors	r3, r2
 8008024:	b29b      	uxth	r3, r3
 8008026:	f003 0306 	and.w	r3, r3, #6
 800802a:	2b00      	cmp	r3, #0
 800802c:	d11c      	bne.n	8008068 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800802e:	897b      	ldrh	r3, [r7, #10]
 8008030:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008036:	1c5a      	adds	r2, r3, #1
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008040:	2b02      	cmp	r3, #2
 8008042:	d13b      	bne.n	80080bc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2208      	movs	r2, #8
 8008050:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800805a:	89ba      	ldrh	r2, [r7, #12]
 800805c:	7bfb      	ldrb	r3, [r7, #15]
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7ff fe86 	bl	8007d72 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008066:	e029      	b.n	80080bc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008068:	893b      	ldrh	r3, [r7, #8]
 800806a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800806c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fd9b 	bl	8008bac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800807e:	89ba      	ldrh	r2, [r7, #12]
 8008080:	7bfb      	ldrb	r3, [r7, #15]
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7ff fe74 	bl	8007d72 <HAL_I2C_AddrCallback>
}
 800808a:	e017      	b.n	80080bc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800808c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fd8b 	bl	8008bac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800809e:	89ba      	ldrh	r2, [r7, #12]
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7ff fe64 	bl	8007d72 <HAL_I2C_AddrCallback>
}
 80080aa:	e007      	b.n	80080bc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2208      	movs	r2, #8
 80080b2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80080bc:	bf00      	nop
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d008      	beq.n	80080f8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	e00c      	b.n	8008112 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d007      	beq.n	8008112 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008110:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b29      	cmp	r3, #41	@ 0x29
 800811c:	d112      	bne.n	8008144 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2228      	movs	r2, #40	@ 0x28
 8008122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2221      	movs	r2, #33	@ 0x21
 800812a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800812c:	2101      	movs	r1, #1
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fd3c 	bl	8008bac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7ff fe04 	bl	8007d4a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008142:	e017      	b.n	8008174 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b2a      	cmp	r3, #42	@ 0x2a
 800814e:	d111      	bne.n	8008174 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2228      	movs	r2, #40	@ 0x28
 8008154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2222      	movs	r2, #34	@ 0x22
 800815c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800815e:	2102      	movs	r1, #2
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fd23 	bl	8008bac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7ff fdf5 	bl	8007d5e <HAL_I2C_SlaveRxCpltCallback>
}
 8008174:	bf00      	nop
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800817c:	b590      	push	{r4, r7, lr}
 800817e:	b087      	sub	sp, #28
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008196:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800819e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2220      	movs	r2, #32
 80081a6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80081a8:	7afb      	ldrb	r3, [r7, #11]
 80081aa:	2b21      	cmp	r3, #33	@ 0x21
 80081ac:	d002      	beq.n	80081b4 <I2C_ITSlaveCplt+0x38>
 80081ae:	7afb      	ldrb	r3, [r7, #11]
 80081b0:	2b29      	cmp	r3, #41	@ 0x29
 80081b2:	d108      	bne.n	80081c6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80081b4:	f248 0101 	movw	r1, #32769	@ 0x8001
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fcf7 	bl	8008bac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2221      	movs	r2, #33	@ 0x21
 80081c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80081c4:	e019      	b.n	80081fa <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80081c6:	7afb      	ldrb	r3, [r7, #11]
 80081c8:	2b22      	cmp	r3, #34	@ 0x22
 80081ca:	d002      	beq.n	80081d2 <I2C_ITSlaveCplt+0x56>
 80081cc:	7afb      	ldrb	r3, [r7, #11]
 80081ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80081d0:	d108      	bne.n	80081e4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80081d2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fce8 	bl	8008bac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2222      	movs	r2, #34	@ 0x22
 80081e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80081e2:	e00a      	b.n	80081fa <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80081e4:	7afb      	ldrb	r3, [r7, #11]
 80081e6:	2b28      	cmp	r3, #40	@ 0x28
 80081e8:	d107      	bne.n	80081fa <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80081ea:	f248 0103 	movw	r1, #32771	@ 0x8003
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fcdc 	bl	8008bac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008208:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	6859      	ldr	r1, [r3, #4]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	4b92      	ldr	r3, [pc, #584]	@ (8008460 <I2C_ITSlaveCplt+0x2e4>)
 8008216:	400b      	ands	r3, r1
 8008218:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fa8f 	bl	800873e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d01c      	beq.n	8008264 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008238:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800823e:	2b00      	cmp	r3, #0
 8008240:	d031      	beq.n	80082a6 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800824a:	b29c      	uxth	r4, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008250:	4618      	mov	r0, r3
 8008252:	f7fe fc49 	bl	8006ae8 <HAL_DMAEx_GetFifoLevel>
 8008256:	4603      	mov	r3, r0
 8008258:	b29b      	uxth	r3, r3
 800825a:	4423      	add	r3, r4
 800825c:	b29a      	uxth	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008262:	e020      	b.n	80082a6 <I2C_ITSlaveCplt+0x12a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d01b      	beq.n	80082a6 <I2C_ITSlaveCplt+0x12a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800827c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00f      	beq.n	80082a6 <I2C_ITSlaveCplt+0x12a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800828e:	b29c      	uxth	r4, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008294:	4618      	mov	r0, r3
 8008296:	f7fe fc27 	bl	8006ae8 <HAL_DMAEx_GetFifoLevel>
 800829a:	4603      	mov	r3, r0
 800829c:	b29b      	uxth	r3, r3
 800829e:	4423      	add	r3, r4
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f003 0304 	and.w	r3, r3, #4
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d020      	beq.n	80082f2 <I2C_ITSlaveCplt+0x176>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	f023 0304 	bic.w	r3, r3, #4
 80082b6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c2:	b2d2      	uxtb	r2, r2
 80082c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ca:	1c5a      	adds	r2, r3, #1
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00c      	beq.n	80082f2 <I2C_ITSlaveCplt+0x176>
    {
      hi2c->XferSize--;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082dc:	3b01      	subs	r3, #1
 80082de:	b29a      	uxth	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	3b01      	subs	r3, #1
 80082ec:	b29a      	uxth	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d005      	beq.n	8008308 <I2C_ITSlaveCplt+0x18c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008300:	f043 0204 	orr.w	r2, r3, #4
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f003 0310 	and.w	r3, r3, #16
 800830e:	2b00      	cmp	r3, #0
 8008310:	d049      	beq.n	80083a6 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008318:	2b00      	cmp	r3, #0
 800831a:	d044      	beq.n	80083a6 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008320:	b29b      	uxth	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d128      	bne.n	8008378 <I2C_ITSlaveCplt+0x1fc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b28      	cmp	r3, #40	@ 0x28
 8008330:	d108      	bne.n	8008344 <I2C_ITSlaveCplt+0x1c8>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008338:	d104      	bne.n	8008344 <I2C_ITSlaveCplt+0x1c8>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800833a:	6979      	ldr	r1, [r7, #20]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 f893 	bl	8008468 <I2C_ITListenCplt>
 8008342:	e030      	b.n	80083a6 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800834a:	b2db      	uxtb	r3, r3
 800834c:	2b29      	cmp	r3, #41	@ 0x29
 800834e:	d10e      	bne.n	800836e <I2C_ITSlaveCplt+0x1f2>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008356:	d00a      	beq.n	800836e <I2C_ITSlaveCplt+0x1f2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2210      	movs	r2, #16
 800835e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f9ec 	bl	800873e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7ff feac 	bl	80080c4 <I2C_ITSlaveSeqCplt>
 800836c:	e01b      	b.n	80083a6 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2210      	movs	r2, #16
 8008374:	61da      	str	r2, [r3, #28]
 8008376:	e016      	b.n	80083a6 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2210      	movs	r2, #16
 800837e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008384:	f043 0204 	orr.w	r2, r3, #4
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <I2C_ITSlaveCplt+0x21e>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008398:	d105      	bne.n	80083a6 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f8b5 	bl	8008510 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d010      	beq.n	80083de <I2C_ITSlaveCplt+0x262>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c0:	4619      	mov	r1, r3
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f8a4 	bl	8008510 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b28      	cmp	r3, #40	@ 0x28
 80083d2:	d141      	bne.n	8008458 <I2C_ITSlaveCplt+0x2dc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80083d4:	6979      	ldr	r1, [r7, #20]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f846 	bl	8008468 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80083dc:	e03c      	b.n	8008458 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80083e6:	d014      	beq.n	8008412 <I2C_ITSlaveCplt+0x296>
    I2C_ITSlaveSeqCplt(hi2c);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff fe6b 	bl	80080c4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a1c      	ldr	r2, [pc, #112]	@ (8008464 <I2C_ITSlaveCplt+0x2e8>)
 80083f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2220      	movs	r2, #32
 80083f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f7ff fcbf 	bl	8007d8e <HAL_I2C_ListenCpltCallback>
}
 8008410:	e022      	b.n	8008458 <I2C_ITSlaveCplt+0x2dc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b22      	cmp	r3, #34	@ 0x22
 800841c:	d10e      	bne.n	800843c <I2C_ITSlaveCplt+0x2c0>
    hi2c->State = HAL_I2C_STATE_READY;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2220      	movs	r2, #32
 8008422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7ff fc92 	bl	8007d5e <HAL_I2C_SlaveRxCpltCallback>
}
 800843a:	e00d      	b.n	8008458 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2220      	movs	r2, #32
 8008440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f7ff fc79 	bl	8007d4a <HAL_I2C_SlaveTxCpltCallback>
}
 8008458:	bf00      	nop
 800845a:	371c      	adds	r7, #28
 800845c:	46bd      	mov	sp, r7
 800845e:	bd90      	pop	{r4, r7, pc}
 8008460:	fe00e800 	.word	0xfe00e800
 8008464:	ffff0000 	.word	0xffff0000

08008468 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a25      	ldr	r2, [pc, #148]	@ (800850c <I2C_ITListenCplt+0xa4>)
 8008476:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2220      	movs	r2, #32
 8008482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	f003 0304 	and.w	r3, r3, #4
 800849a:	2b00      	cmp	r3, #0
 800849c:	d022      	beq.n	80084e4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a8:	b2d2      	uxtb	r2, r2
 80084aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d012      	beq.n	80084e4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084c2:	3b01      	subs	r3, #1
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	3b01      	subs	r3, #1
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084dc:	f043 0204 	orr.w	r2, r3, #4
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80084e4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 fb5f 	bl	8008bac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2210      	movs	r2, #16
 80084f4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7ff fc45 	bl	8007d8e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008504:	bf00      	nop
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	ffff0000 	.word	0xffff0000

08008510 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008520:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a6d      	ldr	r2, [pc, #436]	@ (80086e4 <I2C_ITError+0x1d4>)
 800852e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	431a      	orrs	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008542:	7bfb      	ldrb	r3, [r7, #15]
 8008544:	2b28      	cmp	r3, #40	@ 0x28
 8008546:	d005      	beq.n	8008554 <I2C_ITError+0x44>
 8008548:	7bfb      	ldrb	r3, [r7, #15]
 800854a:	2b29      	cmp	r3, #41	@ 0x29
 800854c:	d002      	beq.n	8008554 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	2b2a      	cmp	r3, #42	@ 0x2a
 8008552:	d10b      	bne.n	800856c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008554:	2103      	movs	r1, #3
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fb28 	bl	8008bac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2228      	movs	r2, #40	@ 0x28
 8008560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a60      	ldr	r2, [pc, #384]	@ (80086e8 <I2C_ITError+0x1d8>)
 8008568:	635a      	str	r2, [r3, #52]	@ 0x34
 800856a:	e030      	b.n	80085ce <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800856c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fb1b 	bl	8008bac <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f8e1 	bl	800873e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b60      	cmp	r3, #96	@ 0x60
 8008586:	d01f      	beq.n	80085c8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2220      	movs	r2, #32
 800858c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	f003 0320 	and.w	r3, r3, #32
 800859a:	2b20      	cmp	r3, #32
 800859c:	d114      	bne.n	80085c8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	f003 0310 	and.w	r3, r3, #16
 80085a8:	2b10      	cmp	r3, #16
 80085aa:	d109      	bne.n	80085c0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2210      	movs	r2, #16
 80085b2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085b8:	f043 0204 	orr.w	r2, r3, #4
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2220      	movs	r2, #32
 80085c6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085d2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d039      	beq.n	8008650 <I2C_ITError+0x140>
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	2b11      	cmp	r3, #17
 80085e0:	d002      	beq.n	80085e8 <I2C_ITError+0xd8>
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	2b21      	cmp	r3, #33	@ 0x21
 80085e6:	d133      	bne.n	8008650 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085f6:	d107      	bne.n	8008608 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008606:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800860c:	4618      	mov	r0, r3
 800860e:	f7fd fabf 	bl	8005b90 <HAL_DMA_GetState>
 8008612:	4603      	mov	r3, r0
 8008614:	2b01      	cmp	r3, #1
 8008616:	d017      	beq.n	8008648 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800861c:	4a33      	ldr	r2, [pc, #204]	@ (80086ec <I2C_ITError+0x1dc>)
 800861e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800862c:	4618      	mov	r0, r3
 800862e:	f7fd f925 	bl	800587c <HAL_DMA_Abort_IT>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d04d      	beq.n	80086d4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800863c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008642:	4610      	mov	r0, r2
 8008644:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008646:	e045      	b.n	80086d4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f851 	bl	80086f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800864e:	e041      	b.n	80086d4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008654:	2b00      	cmp	r3, #0
 8008656:	d039      	beq.n	80086cc <I2C_ITError+0x1bc>
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	2b12      	cmp	r3, #18
 800865c:	d002      	beq.n	8008664 <I2C_ITError+0x154>
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2b22      	cmp	r3, #34	@ 0x22
 8008662:	d133      	bne.n	80086cc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800866e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008672:	d107      	bne.n	8008684 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008682:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008688:	4618      	mov	r0, r3
 800868a:	f7fd fa81 	bl	8005b90 <HAL_DMA_GetState>
 800868e:	4603      	mov	r3, r0
 8008690:	2b01      	cmp	r3, #1
 8008692:	d017      	beq.n	80086c4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008698:	4a14      	ldr	r2, [pc, #80]	@ (80086ec <I2C_ITError+0x1dc>)
 800869a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7fd f8e7 	bl	800587c <HAL_DMA_Abort_IT>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d011      	beq.n	80086d8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80086be:	4610      	mov	r0, r2
 80086c0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086c2:	e009      	b.n	80086d8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f813 	bl	80086f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086ca:	e005      	b.n	80086d8 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f80f 	bl	80086f0 <I2C_TreatErrorCallback>
  }
}
 80086d2:	e002      	b.n	80086da <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80086d4:	bf00      	nop
 80086d6:	e000      	b.n	80086da <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086d8:	bf00      	nop
}
 80086da:	bf00      	nop
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	ffff0000 	.word	0xffff0000
 80086e8:	08007dcb 	.word	0x08007dcb
 80086ec:	08008787 	.word	0x08008787

080086f0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b60      	cmp	r3, #96	@ 0x60
 8008702:	d10e      	bne.n	8008722 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2220      	movs	r2, #32
 8008708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7ff fb4b 	bl	8007db6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008720:	e009      	b.n	8008736 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7ff fb36 	bl	8007da2 <HAL_I2C_ErrorCallback>
}
 8008736:	bf00      	nop
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800873e:	b480      	push	{r7}
 8008740:	b083      	sub	sp, #12
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	f003 0302 	and.w	r3, r3, #2
 8008750:	2b02      	cmp	r3, #2
 8008752:	d103      	bne.n	800875c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2200      	movs	r2, #0
 800875a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b01      	cmp	r3, #1
 8008768:	d007      	beq.n	800877a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	699a      	ldr	r2, [r3, #24]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f042 0201 	orr.w	r2, r2, #1
 8008778:	619a      	str	r2, [r3, #24]
  }
}
 800877a:	bf00      	nop
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b084      	sub	sp, #16
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008792:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008798:	2b00      	cmp	r3, #0
 800879a:	d003      	beq.n	80087a4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a0:	2200      	movs	r2, #0
 80087a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087b0:	2200      	movs	r2, #0
 80087b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f7ff ff9b 	bl	80086f0 <I2C_TreatErrorCallback>
}
 80087ba:	bf00      	nop
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b084      	sub	sp, #16
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	60f8      	str	r0, [r7, #12]
 80087ca:	60b9      	str	r1, [r7, #8]
 80087cc:	603b      	str	r3, [r7, #0]
 80087ce:	4613      	mov	r3, r2
 80087d0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087d2:	e03b      	b.n	800884c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80087d4:	69ba      	ldr	r2, [r7, #24]
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f000 f8d5 	bl	8008988 <I2C_IsErrorOccurred>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e041      	b.n	800886c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ee:	d02d      	beq.n	800884c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087f0:	f7fa fa58 	bl	8002ca4 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d302      	bcc.n	8008806 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d122      	bne.n	800884c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	699a      	ldr	r2, [r3, #24]
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	4013      	ands	r3, r2
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	429a      	cmp	r2, r3
 8008814:	bf0c      	ite	eq
 8008816:	2301      	moveq	r3, #1
 8008818:	2300      	movne	r3, #0
 800881a:	b2db      	uxtb	r3, r3
 800881c:	461a      	mov	r2, r3
 800881e:	79fb      	ldrb	r3, [r7, #7]
 8008820:	429a      	cmp	r2, r3
 8008822:	d113      	bne.n	800884c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008828:	f043 0220 	orr.w	r2, r3, #32
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2220      	movs	r2, #32
 8008834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	e00f      	b.n	800886c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	699a      	ldr	r2, [r3, #24]
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	4013      	ands	r3, r2
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	429a      	cmp	r2, r3
 800885a:	bf0c      	ite	eq
 800885c:	2301      	moveq	r3, #1
 800885e:	2300      	movne	r3, #0
 8008860:	b2db      	uxtb	r3, r3
 8008862:	461a      	mov	r2, r3
 8008864:	79fb      	ldrb	r3, [r7, #7]
 8008866:	429a      	cmp	r2, r3
 8008868:	d0b4      	beq.n	80087d4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008880:	e033      	b.n	80088ea <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	68b9      	ldr	r1, [r7, #8]
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f000 f87e 	bl	8008988 <I2C_IsErrorOccurred>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e031      	b.n	80088fa <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889c:	d025      	beq.n	80088ea <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800889e:	f7fa fa01 	bl	8002ca4 <HAL_GetTick>
 80088a2:	4602      	mov	r2, r0
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d302      	bcc.n	80088b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d11a      	bne.n	80088ea <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	f003 0302 	and.w	r3, r3, #2
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d013      	beq.n	80088ea <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088c6:	f043 0220 	orr.w	r2, r3, #32
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2220      	movs	r2, #32
 80088d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e007      	b.n	80088fa <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	f003 0302 	and.w	r3, r3, #2
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d1c4      	bne.n	8008882 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b084      	sub	sp, #16
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800890e:	e02f      	b.n	8008970 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	68b9      	ldr	r1, [r7, #8]
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f000 f837 	bl	8008988 <I2C_IsErrorOccurred>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e02d      	b.n	8008980 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008924:	f7fa f9be 	bl	8002ca4 <HAL_GetTick>
 8008928:	4602      	mov	r2, r0
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	429a      	cmp	r2, r3
 8008932:	d302      	bcc.n	800893a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d11a      	bne.n	8008970 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	f003 0320 	and.w	r3, r3, #32
 8008944:	2b20      	cmp	r3, #32
 8008946:	d013      	beq.n	8008970 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800894c:	f043 0220 	orr.w	r2, r3, #32
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2220      	movs	r2, #32
 8008958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e007      	b.n	8008980 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	f003 0320 	and.w	r3, r3, #32
 800897a:	2b20      	cmp	r3, #32
 800897c:	d1c8      	bne.n	8008910 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08a      	sub	sp, #40	@ 0x28
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	f003 0310 	and.w	r3, r3, #16
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d068      	beq.n	8008a86 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2210      	movs	r2, #16
 80089ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80089bc:	e049      	b.n	8008a52 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c4:	d045      	beq.n	8008a52 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80089c6:	f7fa f96d 	bl	8002ca4 <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	68ba      	ldr	r2, [r7, #8]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d302      	bcc.n	80089dc <I2C_IsErrorOccurred+0x54>
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d13a      	bne.n	8008a52 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089fe:	d121      	bne.n	8008a44 <I2C_IsErrorOccurred+0xbc>
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a06:	d01d      	beq.n	8008a44 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008a08:	7cfb      	ldrb	r3, [r7, #19]
 8008a0a:	2b20      	cmp	r3, #32
 8008a0c:	d01a      	beq.n	8008a44 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	685a      	ldr	r2, [r3, #4]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a1c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008a1e:	f7fa f941 	bl	8002ca4 <HAL_GetTick>
 8008a22:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a24:	e00e      	b.n	8008a44 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008a26:	f7fa f93d 	bl	8002ca4 <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	2b19      	cmp	r3, #25
 8008a32:	d907      	bls.n	8008a44 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008a34:	6a3b      	ldr	r3, [r7, #32]
 8008a36:	f043 0320 	orr.w	r3, r3, #32
 8008a3a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008a42:	e006      	b.n	8008a52 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	f003 0320 	and.w	r3, r3, #32
 8008a4e:	2b20      	cmp	r3, #32
 8008a50:	d1e9      	bne.n	8008a26 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	f003 0320 	and.w	r3, r3, #32
 8008a5c:	2b20      	cmp	r3, #32
 8008a5e:	d003      	beq.n	8008a68 <I2C_IsErrorOccurred+0xe0>
 8008a60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d0aa      	beq.n	80089be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008a68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d103      	bne.n	8008a78 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	2220      	movs	r2, #32
 8008a76:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	f043 0304 	orr.w	r3, r3, #4
 8008a7e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00b      	beq.n	8008ab0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	f043 0301 	orr.w	r3, r3, #1
 8008a9e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008aa8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00b      	beq.n	8008ad2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	f043 0308 	orr.w	r3, r3, #8
 8008ac0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008aca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00b      	beq.n	8008af4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	f043 0302 	orr.w	r3, r3, #2
 8008ae2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008aec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008af4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d01c      	beq.n	8008b36 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f7ff fe1e 	bl	800873e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6859      	ldr	r1, [r3, #4]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8008b44 <I2C_IsErrorOccurred+0x1bc>)
 8008b0e:	400b      	ands	r3, r1
 8008b10:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b16:	6a3b      	ldr	r3, [r7, #32]
 8008b18:	431a      	orrs	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2220      	movs	r2, #32
 8008b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008b36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3728      	adds	r7, #40	@ 0x28
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	fe00e800 	.word	0xfe00e800

08008b48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b087      	sub	sp, #28
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	607b      	str	r3, [r7, #4]
 8008b52:	460b      	mov	r3, r1
 8008b54:	817b      	strh	r3, [r7, #10]
 8008b56:	4613      	mov	r3, r2
 8008b58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b5a:	897b      	ldrh	r3, [r7, #10]
 8008b5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b60:	7a7b      	ldrb	r3, [r7, #9]
 8008b62:	041b      	lsls	r3, r3, #16
 8008b64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b68:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b76:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	0d5b      	lsrs	r3, r3, #21
 8008b82:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008b86:	4b08      	ldr	r3, [pc, #32]	@ (8008ba8 <I2C_TransferConfig+0x60>)
 8008b88:	430b      	orrs	r3, r1
 8008b8a:	43db      	mvns	r3, r3
 8008b8c:	ea02 0103 	and.w	r1, r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	697a      	ldr	r2, [r7, #20]
 8008b96:	430a      	orrs	r2, r1
 8008b98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008b9a:	bf00      	nop
 8008b9c:	371c      	adds	r7, #28
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	03ff63ff 	.word	0x03ff63ff

08008bac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008bbc:	887b      	ldrh	r3, [r7, #2]
 8008bbe:	f003 0301 	and.w	r3, r3, #1
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00f      	beq.n	8008be6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008bcc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008bda:	2b28      	cmp	r3, #40	@ 0x28
 8008bdc:	d003      	beq.n	8008be6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008be4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008be6:	887b      	ldrh	r3, [r7, #2]
 8008be8:	f003 0302 	and.w	r3, r3, #2
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00f      	beq.n	8008c10 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008bf6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008c04:	2b28      	cmp	r3, #40	@ 0x28
 8008c06:	d003      	beq.n	8008c10 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008c0e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008c10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	da03      	bge.n	8008c20 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008c1e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008c20:	887b      	ldrh	r3, [r7, #2]
 8008c22:	2b10      	cmp	r3, #16
 8008c24:	d103      	bne.n	8008c2e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008c2c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008c2e:	887b      	ldrh	r3, [r7, #2]
 8008c30:	2b20      	cmp	r3, #32
 8008c32:	d103      	bne.n	8008c3c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f043 0320 	orr.w	r3, r3, #32
 8008c3a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008c3c:	887b      	ldrh	r3, [r7, #2]
 8008c3e:	2b40      	cmp	r3, #64	@ 0x40
 8008c40:	d103      	bne.n	8008c4a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c48:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	6819      	ldr	r1, [r3, #0]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	43da      	mvns	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	400a      	ands	r2, r1
 8008c5a:	601a      	str	r2, [r3, #0]
}
 8008c5c:	bf00      	nop
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	2b20      	cmp	r3, #32
 8008c7c:	d138      	bne.n	8008cf0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d101      	bne.n	8008c8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008c88:	2302      	movs	r3, #2
 8008c8a:	e032      	b.n	8008cf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2224      	movs	r2, #36	@ 0x24
 8008c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f022 0201 	bic.w	r2, r2, #1
 8008caa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008cba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6819      	ldr	r1, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f042 0201 	orr.w	r2, r2, #1
 8008cda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2220      	movs	r2, #32
 8008ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	e000      	b.n	8008cf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008cf0:	2302      	movs	r3, #2
  }
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b085      	sub	sp, #20
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	2b20      	cmp	r3, #32
 8008d12:	d139      	bne.n	8008d88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d101      	bne.n	8008d22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008d1e:	2302      	movs	r3, #2
 8008d20:	e033      	b.n	8008d8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2224      	movs	r2, #36	@ 0x24
 8008d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f022 0201 	bic.w	r2, r2, #1
 8008d40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008d50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	021b      	lsls	r3, r3, #8
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f042 0201 	orr.w	r2, r2, #1
 8008d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2220      	movs	r2, #32
 8008d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	e000      	b.n	8008d8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008d88:	2302      	movs	r3, #2
  }
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
	...

08008d98 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8008da4:	4b0b      	ldr	r3, [pc, #44]	@ (8008dd4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	73fb      	strb	r3, [r7, #15]
 8008db4:	e007      	b.n	8008dc6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8008db6:	4b07      	ldr	r3, [pc, #28]	@ (8008dd4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f023 0204 	bic.w	r2, r3, #4
 8008dbe:	4905      	ldr	r1, [pc, #20]	@ (8008dd4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	600b      	str	r3, [r1, #0]
  }

  return status;
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr
 8008dd4:	40030400 	.word	0x40030400

08008dd8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8008ddc:	4b05      	ldr	r3, [pc, #20]	@ (8008df4 <HAL_ICACHE_Enable+0x1c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a04      	ldr	r2, [pc, #16]	@ (8008df4 <HAL_ICACHE_Enable+0x1c>)
 8008de2:	f043 0301 	orr.w	r3, r3, #1
 8008de6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr
 8008df4:	40030400 	.word	0x40030400

08008df8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e0bf      	b.n	8008f8a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d106      	bne.n	8008e24 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7f9 f898 	bl	8001f54 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2202      	movs	r2, #2
 8008e28:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	699a      	ldr	r2, [r3, #24]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008e3a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6999      	ldr	r1, [r3, #24]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008e50:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	430a      	orrs	r2, r1
 8008e5e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6899      	ldr	r1, [r3, #8]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8008f94 <HAL_LTDC_Init+0x19c>)
 8008e6c:	400b      	ands	r3, r1
 8008e6e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	695b      	ldr	r3, [r3, #20]
 8008e74:	041b      	lsls	r3, r3, #16
 8008e76:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	6899      	ldr	r1, [r3, #8]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	699a      	ldr	r2, [r3, #24]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	431a      	orrs	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68d9      	ldr	r1, [r3, #12]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	4b3e      	ldr	r3, [pc, #248]	@ (8008f94 <HAL_LTDC_Init+0x19c>)
 8008e9a:	400b      	ands	r3, r1
 8008e9c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	69db      	ldr	r3, [r3, #28]
 8008ea2:	041b      	lsls	r3, r3, #16
 8008ea4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68d9      	ldr	r1, [r3, #12]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a1a      	ldr	r2, [r3, #32]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	431a      	orrs	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	430a      	orrs	r2, r1
 8008eba:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6919      	ldr	r1, [r3, #16]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	4b33      	ldr	r3, [pc, #204]	@ (8008f94 <HAL_LTDC_Init+0x19c>)
 8008ec8:	400b      	ands	r3, r1
 8008eca:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed0:	041b      	lsls	r3, r3, #16
 8008ed2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6919      	ldr	r1, [r3, #16]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	431a      	orrs	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	6959      	ldr	r1, [r3, #20]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	4b27      	ldr	r3, [pc, #156]	@ (8008f94 <HAL_LTDC_Init+0x19c>)
 8008ef6:	400b      	ands	r3, r1
 8008ef8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008efe:	041b      	lsls	r3, r3, #16
 8008f00:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6959      	ldr	r1, [r3, #20]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	430a      	orrs	r2, r1
 8008f16:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008f1e:	021b      	lsls	r3, r3, #8
 8008f20:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008f28:	041b      	lsls	r3, r3, #16
 8008f2a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8008f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	430a      	orrs	r2, r1
 8008f56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f042 0206 	orr.w	r2, r2, #6
 8008f66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	699a      	ldr	r2, [r3, #24]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f042 0201 	orr.w	r2, r2, #1
 8008f76:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	f000f800 	.word	0xf000f800

08008f98 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fa6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fae:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f003 0304 	and.w	r3, r3, #4
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d023      	beq.n	8009002 <HAL_LTDC_IRQHandler+0x6a>
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	f003 0304 	and.w	r3, r3, #4
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d01e      	beq.n	8009002 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f022 0204 	bic.w	r2, r2, #4
 8008fd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2204      	movs	r2, #4
 8008fda:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008fe2:	f043 0201 	orr.w	r2, r3, #1
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2204      	movs	r2, #4
 8008ff0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f86f 	bl	80090e0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f003 0302 	and.w	r3, r3, #2
 8009008:	2b00      	cmp	r3, #0
 800900a:	d023      	beq.n	8009054 <HAL_LTDC_IRQHandler+0xbc>
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	f003 0302 	and.w	r3, r3, #2
 8009012:	2b00      	cmp	r3, #0
 8009014:	d01e      	beq.n	8009054 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f022 0202 	bic.w	r2, r2, #2
 8009024:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2202      	movs	r2, #2
 800902c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009034:	f043 0202 	orr.w	r2, r3, #2
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2204      	movs	r2, #4
 8009042:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f846 	bl	80090e0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	2b00      	cmp	r3, #0
 800905c:	d01b      	beq.n	8009096 <HAL_LTDC_IRQHandler+0xfe>
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	2b00      	cmp	r3, #0
 8009066:	d016      	beq.n	8009096 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f022 0201 	bic.w	r2, r2, #1
 8009076:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2201      	movs	r2, #1
 800907e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f82f 	bl	80090f4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f003 0308 	and.w	r3, r3, #8
 800909c:	2b00      	cmp	r3, #0
 800909e:	d01b      	beq.n	80090d8 <HAL_LTDC_IRQHandler+0x140>
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	f003 0308 	and.w	r3, r3, #8
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d016      	beq.n	80090d8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f022 0208 	bic.w	r2, r2, #8
 80090b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2208      	movs	r2, #8
 80090c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f818 	bl	8009108 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80090d8:	bf00      	nop
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800911c:	b5b0      	push	{r4, r5, r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800912e:	2b01      	cmp	r3, #1
 8009130:	d101      	bne.n	8009136 <HAL_LTDC_ConfigLayer+0x1a>
 8009132:	2302      	movs	r3, #2
 8009134:	e02c      	b.n	8009190 <HAL_LTDC_ConfigLayer+0x74>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2201      	movs	r2, #1
 800913a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2202      	movs	r2, #2
 8009142:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2134      	movs	r1, #52	@ 0x34
 800914c:	fb01 f303 	mul.w	r3, r1, r3
 8009150:	4413      	add	r3, r2
 8009152:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	4614      	mov	r4, r2
 800915a:	461d      	mov	r5, r3
 800915c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800915e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009168:	682b      	ldr	r3, [r5, #0]
 800916a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	68b9      	ldr	r1, [r7, #8]
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f000 f811 	bl	8009198 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2201      	movs	r2, #1
 800917c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2201      	movs	r2, #1
 8009182:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bdb0      	pop	{r4, r5, r7, pc}

08009198 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009198:	b480      	push	{r7}
 800919a:	b089      	sub	sp, #36	@ 0x24
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	685a      	ldr	r2, [r3, #4]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	0c1b      	lsrs	r3, r3, #16
 80091b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091b4:	4413      	add	r3, r2
 80091b6:	041b      	lsls	r3, r3, #16
 80091b8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	461a      	mov	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	01db      	lsls	r3, r3, #7
 80091c4:	4413      	add	r3, r2
 80091c6:	3384      	adds	r3, #132	@ 0x84
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	6812      	ldr	r2, [r2, #0]
 80091ce:	4611      	mov	r1, r2
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	01d2      	lsls	r2, r2, #7
 80091d4:	440a      	add	r2, r1
 80091d6:	3284      	adds	r2, #132	@ 0x84
 80091d8:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80091dc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	0c1b      	lsrs	r3, r3, #16
 80091ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80091ee:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80091f0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4619      	mov	r1, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	01db      	lsls	r3, r3, #7
 80091fc:	440b      	add	r3, r1
 80091fe:	3384      	adds	r3, #132	@ 0x84
 8009200:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009206:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	68da      	ldr	r2, [r3, #12]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009216:	4413      	add	r3, r2
 8009218:	041b      	lsls	r3, r3, #16
 800921a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	461a      	mov	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	01db      	lsls	r3, r3, #7
 8009226:	4413      	add	r3, r2
 8009228:	3384      	adds	r3, #132	@ 0x84
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	6812      	ldr	r2, [r2, #0]
 8009230:	4611      	mov	r1, r2
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	01d2      	lsls	r2, r2, #7
 8009236:	440a      	add	r2, r1
 8009238:	3284      	adds	r2, #132	@ 0x84
 800923a:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 800923e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	689a      	ldr	r2, [r3, #8]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800924e:	4413      	add	r3, r2
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4619      	mov	r1, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	01db      	lsls	r3, r3, #7
 800925c:	440b      	add	r3, r1
 800925e:	3384      	adds	r3, #132	@ 0x84
 8009260:	4619      	mov	r1, r3
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	4313      	orrs	r3, r2
 8009266:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	461a      	mov	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	01db      	lsls	r3, r3, #7
 8009272:	4413      	add	r3, r2
 8009274:	3384      	adds	r3, #132	@ 0x84
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	6812      	ldr	r2, [r2, #0]
 800927c:	4611      	mov	r1, r2
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	01d2      	lsls	r2, r2, #7
 8009282:	440a      	add	r2, r1
 8009284:	3284      	adds	r2, #132	@ 0x84
 8009286:	f023 0307 	bic.w	r3, r3, #7
 800928a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	461a      	mov	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	01db      	lsls	r3, r3, #7
 8009296:	4413      	add	r3, r2
 8009298:	3384      	adds	r3, #132	@ 0x84
 800929a:	461a      	mov	r2, r3
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80092a8:	021b      	lsls	r3, r3, #8
 80092aa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80092b2:	041b      	lsls	r3, r3, #16
 80092b4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	061b      	lsls	r3, r3, #24
 80092bc:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80092c4:	461a      	mov	r2, r3
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	431a      	orrs	r2, r3
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	431a      	orrs	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4619      	mov	r1, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	01db      	lsls	r3, r3, #7
 80092d8:	440b      	add	r3, r1
 80092da:	3384      	adds	r3, #132	@ 0x84
 80092dc:	4619      	mov	r1, r3
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	461a      	mov	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	01db      	lsls	r3, r3, #7
 80092ee:	4413      	add	r3, r2
 80092f0:	3384      	adds	r3, #132	@ 0x84
 80092f2:	695b      	ldr	r3, [r3, #20]
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	6812      	ldr	r2, [r2, #0]
 80092f8:	4611      	mov	r1, r2
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	01d2      	lsls	r2, r2, #7
 80092fe:	440a      	add	r2, r1
 8009300:	3284      	adds	r2, #132	@ 0x84
 8009302:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009306:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	461a      	mov	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	01db      	lsls	r3, r3, #7
 8009312:	4413      	add	r3, r2
 8009314:	3384      	adds	r3, #132	@ 0x84
 8009316:	461a      	mov	r2, r3
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	695b      	ldr	r3, [r3, #20]
 800931c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	461a      	mov	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	01db      	lsls	r3, r3, #7
 8009328:	4413      	add	r3, r2
 800932a:	3384      	adds	r3, #132	@ 0x84
 800932c:	69db      	ldr	r3, [r3, #28]
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	6812      	ldr	r2, [r2, #0]
 8009332:	4611      	mov	r1, r2
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	01d2      	lsls	r2, r2, #7
 8009338:	440a      	add	r2, r1
 800933a:	3284      	adds	r2, #132	@ 0x84
 800933c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009340:	f023 0307 	bic.w	r3, r3, #7
 8009344:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	69da      	ldr	r2, [r3, #28]
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	6a1b      	ldr	r3, [r3, #32]
 800934e:	68f9      	ldr	r1, [r7, #12]
 8009350:	6809      	ldr	r1, [r1, #0]
 8009352:	4608      	mov	r0, r1
 8009354:	6879      	ldr	r1, [r7, #4]
 8009356:	01c9      	lsls	r1, r1, #7
 8009358:	4401      	add	r1, r0
 800935a:	3184      	adds	r1, #132	@ 0x84
 800935c:	4313      	orrs	r3, r2
 800935e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	461a      	mov	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	01db      	lsls	r3, r3, #7
 800936a:	4413      	add	r3, r2
 800936c:	3384      	adds	r3, #132	@ 0x84
 800936e:	461a      	mov	r2, r3
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009374:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d102      	bne.n	8009384 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 800937e:	2304      	movs	r3, #4
 8009380:	61fb      	str	r3, [r7, #28]
 8009382:	e01b      	b.n	80093bc <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d102      	bne.n	8009392 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 800938c:	2303      	movs	r3, #3
 800938e:	61fb      	str	r3, [r7, #28]
 8009390:	e014      	b.n	80093bc <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	2b04      	cmp	r3, #4
 8009398:	d00b      	beq.n	80093b2 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800939e:	2b02      	cmp	r3, #2
 80093a0:	d007      	beq.n	80093b2 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80093a6:	2b03      	cmp	r3, #3
 80093a8:	d003      	beq.n	80093b2 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80093ae:	2b07      	cmp	r3, #7
 80093b0:	d102      	bne.n	80093b8 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 80093b2:	2302      	movs	r3, #2
 80093b4:	61fb      	str	r3, [r7, #28]
 80093b6:	e001      	b.n	80093bc <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 80093b8:	2301      	movs	r3, #1
 80093ba:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	461a      	mov	r2, r3
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	01db      	lsls	r3, r3, #7
 80093c6:	4413      	add	r3, r2
 80093c8:	3384      	adds	r3, #132	@ 0x84
 80093ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	6812      	ldr	r2, [r2, #0]
 80093d0:	4611      	mov	r1, r2
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	01d2      	lsls	r2, r2, #7
 80093d6:	440a      	add	r2, r1
 80093d8:	3284      	adds	r2, #132	@ 0x84
 80093da:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80093de:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e4:	69fa      	ldr	r2, [r7, #28]
 80093e6:	fb02 f303 	mul.w	r3, r2, r3
 80093ea:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	6859      	ldr	r1, [r3, #4]
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	1acb      	subs	r3, r1, r3
 80093f6:	69f9      	ldr	r1, [r7, #28]
 80093f8:	fb01 f303 	mul.w	r3, r1, r3
 80093fc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80093fe:	68f9      	ldr	r1, [r7, #12]
 8009400:	6809      	ldr	r1, [r1, #0]
 8009402:	4608      	mov	r0, r1
 8009404:	6879      	ldr	r1, [r7, #4]
 8009406:	01c9      	lsls	r1, r1, #7
 8009408:	4401      	add	r1, r0
 800940a:	3184      	adds	r1, #132	@ 0x84
 800940c:	4313      	orrs	r3, r2
 800940e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	461a      	mov	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	01db      	lsls	r3, r3, #7
 800941a:	4413      	add	r3, r2
 800941c:	3384      	adds	r3, #132	@ 0x84
 800941e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	6812      	ldr	r2, [r2, #0]
 8009424:	4611      	mov	r1, r2
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	01d2      	lsls	r2, r2, #7
 800942a:	440a      	add	r2, r1
 800942c:	3284      	adds	r2, #132	@ 0x84
 800942e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009432:	f023 0307 	bic.w	r3, r3, #7
 8009436:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	461a      	mov	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	01db      	lsls	r3, r3, #7
 8009442:	4413      	add	r3, r2
 8009444:	3384      	adds	r3, #132	@ 0x84
 8009446:	461a      	mov	r2, r3
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800944c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	461a      	mov	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	01db      	lsls	r3, r3, #7
 8009458:	4413      	add	r3, r2
 800945a:	3384      	adds	r3, #132	@ 0x84
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	6812      	ldr	r2, [r2, #0]
 8009462:	4611      	mov	r1, r2
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	01d2      	lsls	r2, r2, #7
 8009468:	440a      	add	r2, r1
 800946a:	3284      	adds	r2, #132	@ 0x84
 800946c:	f043 0301 	orr.w	r3, r3, #1
 8009470:	6013      	str	r3, [r2, #0]
}
 8009472:	bf00      	nop
 8009474:	3724      	adds	r7, #36	@ 0x24
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr

0800947e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b086      	sub	sp, #24
 8009482:	af02      	add	r7, sp, #8
 8009484:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d101      	bne.n	8009490 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	e0fe      	b.n	800968e <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8009496:	b2db      	uxtb	r3, r3
 8009498:	2b00      	cmp	r3, #0
 800949a:	d106      	bne.n	80094aa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f7f8 ffef 	bl	8002488 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2203      	movs	r2, #3
 80094ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f007 ff57 	bl	801136a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6818      	ldr	r0, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	7c1a      	ldrb	r2, [r3, #16]
 80094c4:	f88d 2000 	strb.w	r2, [sp]
 80094c8:	3304      	adds	r3, #4
 80094ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094cc:	f007 ff1e 	bl	801130c <USB_CoreInit>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d005      	beq.n	80094e2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2202      	movs	r2, #2
 80094da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e0d5      	b.n	800968e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2100      	movs	r1, #0
 80094e8:	4618      	mov	r0, r3
 80094ea:	f007 ff4f 	bl	801138c <USB_SetCurrentMode>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d005      	beq.n	8009500 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2202      	movs	r2, #2
 80094f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e0c6      	b.n	800968e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009500:	2300      	movs	r3, #0
 8009502:	73fb      	strb	r3, [r7, #15]
 8009504:	e04a      	b.n	800959c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009506:	7bfa      	ldrb	r2, [r7, #15]
 8009508:	6879      	ldr	r1, [r7, #4]
 800950a:	4613      	mov	r3, r2
 800950c:	00db      	lsls	r3, r3, #3
 800950e:	4413      	add	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	440b      	add	r3, r1
 8009514:	3315      	adds	r3, #21
 8009516:	2201      	movs	r2, #1
 8009518:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800951a:	7bfa      	ldrb	r2, [r7, #15]
 800951c:	6879      	ldr	r1, [r7, #4]
 800951e:	4613      	mov	r3, r2
 8009520:	00db      	lsls	r3, r3, #3
 8009522:	4413      	add	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	440b      	add	r3, r1
 8009528:	3314      	adds	r3, #20
 800952a:	7bfa      	ldrb	r2, [r7, #15]
 800952c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800952e:	7bfa      	ldrb	r2, [r7, #15]
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	b298      	uxth	r0, r3
 8009534:	6879      	ldr	r1, [r7, #4]
 8009536:	4613      	mov	r3, r2
 8009538:	00db      	lsls	r3, r3, #3
 800953a:	4413      	add	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	440b      	add	r3, r1
 8009540:	332e      	adds	r3, #46	@ 0x2e
 8009542:	4602      	mov	r2, r0
 8009544:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009546:	7bfa      	ldrb	r2, [r7, #15]
 8009548:	6879      	ldr	r1, [r7, #4]
 800954a:	4613      	mov	r3, r2
 800954c:	00db      	lsls	r3, r3, #3
 800954e:	4413      	add	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	440b      	add	r3, r1
 8009554:	3318      	adds	r3, #24
 8009556:	2200      	movs	r2, #0
 8009558:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800955a:	7bfa      	ldrb	r2, [r7, #15]
 800955c:	6879      	ldr	r1, [r7, #4]
 800955e:	4613      	mov	r3, r2
 8009560:	00db      	lsls	r3, r3, #3
 8009562:	4413      	add	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	440b      	add	r3, r1
 8009568:	331c      	adds	r3, #28
 800956a:	2200      	movs	r2, #0
 800956c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800956e:	7bfa      	ldrb	r2, [r7, #15]
 8009570:	6879      	ldr	r1, [r7, #4]
 8009572:	4613      	mov	r3, r2
 8009574:	00db      	lsls	r3, r3, #3
 8009576:	4413      	add	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	440b      	add	r3, r1
 800957c:	3320      	adds	r3, #32
 800957e:	2200      	movs	r2, #0
 8009580:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009582:	7bfa      	ldrb	r2, [r7, #15]
 8009584:	6879      	ldr	r1, [r7, #4]
 8009586:	4613      	mov	r3, r2
 8009588:	00db      	lsls	r3, r3, #3
 800958a:	4413      	add	r3, r2
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	440b      	add	r3, r1
 8009590:	3324      	adds	r3, #36	@ 0x24
 8009592:	2200      	movs	r2, #0
 8009594:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009596:	7bfb      	ldrb	r3, [r7, #15]
 8009598:	3301      	adds	r3, #1
 800959a:	73fb      	strb	r3, [r7, #15]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	791b      	ldrb	r3, [r3, #4]
 80095a0:	7bfa      	ldrb	r2, [r7, #15]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d3af      	bcc.n	8009506 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095a6:	2300      	movs	r3, #0
 80095a8:	73fb      	strb	r3, [r7, #15]
 80095aa:	e044      	b.n	8009636 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80095ac:	7bfa      	ldrb	r2, [r7, #15]
 80095ae:	6879      	ldr	r1, [r7, #4]
 80095b0:	4613      	mov	r3, r2
 80095b2:	00db      	lsls	r3, r3, #3
 80095b4:	4413      	add	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	440b      	add	r3, r1
 80095ba:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80095be:	2200      	movs	r2, #0
 80095c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80095c2:	7bfa      	ldrb	r2, [r7, #15]
 80095c4:	6879      	ldr	r1, [r7, #4]
 80095c6:	4613      	mov	r3, r2
 80095c8:	00db      	lsls	r3, r3, #3
 80095ca:	4413      	add	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	440b      	add	r3, r1
 80095d0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80095d4:	7bfa      	ldrb	r2, [r7, #15]
 80095d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80095d8:	7bfa      	ldrb	r2, [r7, #15]
 80095da:	6879      	ldr	r1, [r7, #4]
 80095dc:	4613      	mov	r3, r2
 80095de:	00db      	lsls	r3, r3, #3
 80095e0:	4413      	add	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	440b      	add	r3, r1
 80095e6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80095ea:	2200      	movs	r2, #0
 80095ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80095ee:	7bfa      	ldrb	r2, [r7, #15]
 80095f0:	6879      	ldr	r1, [r7, #4]
 80095f2:	4613      	mov	r3, r2
 80095f4:	00db      	lsls	r3, r3, #3
 80095f6:	4413      	add	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	440b      	add	r3, r1
 80095fc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8009600:	2200      	movs	r2, #0
 8009602:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009604:	7bfa      	ldrb	r2, [r7, #15]
 8009606:	6879      	ldr	r1, [r7, #4]
 8009608:	4613      	mov	r3, r2
 800960a:	00db      	lsls	r3, r3, #3
 800960c:	4413      	add	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	440b      	add	r3, r1
 8009612:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009616:	2200      	movs	r2, #0
 8009618:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800961a:	7bfa      	ldrb	r2, [r7, #15]
 800961c:	6879      	ldr	r1, [r7, #4]
 800961e:	4613      	mov	r3, r2
 8009620:	00db      	lsls	r3, r3, #3
 8009622:	4413      	add	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	440b      	add	r3, r1
 8009628:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800962c:	2200      	movs	r2, #0
 800962e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	3301      	adds	r3, #1
 8009634:	73fb      	strb	r3, [r7, #15]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	791b      	ldrb	r3, [r3, #4]
 800963a:	7bfa      	ldrb	r2, [r7, #15]
 800963c:	429a      	cmp	r2, r3
 800963e:	d3b5      	bcc.n	80095ac <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6818      	ldr	r0, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	7c1a      	ldrb	r2, [r3, #16]
 8009648:	f88d 2000 	strb.w	r2, [sp]
 800964c:	3304      	adds	r3, #4
 800964e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009650:	f007 fee8 	bl	8011424 <USB_DevInit>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d005      	beq.n	8009666 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2202      	movs	r2, #2
 800965e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e013      	b.n	800968e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	7b1b      	ldrb	r3, [r3, #12]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d102      	bne.n	8009682 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 f80a 	bl	8009696 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4618      	mov	r0, r3
 8009688:	f008 f8b5 	bl	80117f6 <USB_DevDisconnect>

  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009696:	b480      	push	{r7}
 8009698:	b085      	sub	sp, #20
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096c8:	f043 0303 	orr.w	r3, r3, #3
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3714      	adds	r7, #20
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr
	...

080096e0 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80096e0:	b480      	push	{r7}
 80096e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80096e4:	4b05      	ldr	r3, [pc, #20]	@ (80096fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80096e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e8:	4a04      	ldr	r2, [pc, #16]	@ (80096fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80096ea:	f043 0301 	orr.w	r3, r3, #1
 80096ee:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80096f0:	bf00      	nop
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	46020800 	.word	0x46020800

08009700 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009700:	b480      	push	{r7}
 8009702:	b085      	sub	sp, #20
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8009708:	4b39      	ldr	r3, [pc, #228]	@ (80097f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800970a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800970c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009710:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	429a      	cmp	r2, r3
 8009718:	d10b      	bne.n	8009732 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009720:	d905      	bls.n	800972e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009722:	4b33      	ldr	r3, [pc, #204]	@ (80097f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	4a32      	ldr	r2, [pc, #200]	@ (80097f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800972c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	e057      	b.n	80097e2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009738:	d90a      	bls.n	8009750 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800973a:	4b2d      	ldr	r3, [pc, #180]	@ (80097f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4313      	orrs	r3, r2
 8009746:	4a2a      	ldr	r2, [pc, #168]	@ (80097f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009748:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800974c:	60d3      	str	r3, [r2, #12]
 800974e:	e007      	b.n	8009760 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8009750:	4b27      	ldr	r3, [pc, #156]	@ (80097f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8009758:	4925      	ldr	r1, [pc, #148]	@ (80097f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4313      	orrs	r3, r2
 800975e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009760:	4b24      	ldr	r3, [pc, #144]	@ (80097f4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a24      	ldr	r2, [pc, #144]	@ (80097f8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009766:	fba2 2303 	umull	r2, r3, r2, r3
 800976a:	099b      	lsrs	r3, r3, #6
 800976c:	2232      	movs	r2, #50	@ 0x32
 800976e:	fb02 f303 	mul.w	r3, r2, r3
 8009772:	4a21      	ldr	r2, [pc, #132]	@ (80097f8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8009774:	fba2 2303 	umull	r2, r3, r2, r3
 8009778:	099b      	lsrs	r3, r3, #6
 800977a:	3301      	adds	r3, #1
 800977c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800977e:	e002      	b.n	8009786 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	3b01      	subs	r3, #1
 8009784:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8009786:	4b1a      	ldr	r3, [pc, #104]	@ (80097f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800978e:	2b00      	cmp	r3, #0
 8009790:	d102      	bne.n	8009798 <HAL_PWREx_ControlVoltageScaling+0x98>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1f3      	bne.n	8009780 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d01b      	beq.n	80097d6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800979e:	4b15      	ldr	r3, [pc, #84]	@ (80097f4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a15      	ldr	r2, [pc, #84]	@ (80097f8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80097a4:	fba2 2303 	umull	r2, r3, r2, r3
 80097a8:	099b      	lsrs	r3, r3, #6
 80097aa:	2232      	movs	r2, #50	@ 0x32
 80097ac:	fb02 f303 	mul.w	r3, r2, r3
 80097b0:	4a11      	ldr	r2, [pc, #68]	@ (80097f8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80097b2:	fba2 2303 	umull	r2, r3, r2, r3
 80097b6:	099b      	lsrs	r3, r3, #6
 80097b8:	3301      	adds	r3, #1
 80097ba:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80097bc:	e002      	b.n	80097c4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	3b01      	subs	r3, #1
 80097c2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80097c4:	4b0a      	ldr	r3, [pc, #40]	@ (80097f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80097c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d102      	bne.n	80097d6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1f3      	bne.n	80097be <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d101      	bne.n	80097e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80097dc:	2303      	movs	r3, #3
 80097de:	e000      	b.n	80097e2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	46020800 	.word	0x46020800
 80097f4:	20000030 	.word	0x20000030
 80097f8:	10624dd3 	.word	0x10624dd3

080097fc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80097fc:	b480      	push	{r7}
 80097fe:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8009800:	4b04      	ldr	r3, [pc, #16]	@ (8009814 <HAL_PWREx_GetVoltageRange+0x18>)
 8009802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009804:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8009808:	4618      	mov	r0, r3
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	46020800 	.word	0x46020800

08009818 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8009820:	4b22      	ldr	r3, [pc, #136]	@ (80098ac <HAL_PWREx_ConfigSupply+0x94>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a22      	ldr	r2, [pc, #136]	@ (80098b0 <HAL_PWREx_ConfigSupply+0x98>)
 8009826:	fba2 2303 	umull	r2, r3, r2, r3
 800982a:	099b      	lsrs	r3, r3, #6
 800982c:	2232      	movs	r2, #50	@ 0x32
 800982e:	fb02 f303 	mul.w	r3, r2, r3
 8009832:	4a1f      	ldr	r2, [pc, #124]	@ (80098b0 <HAL_PWREx_ConfigSupply+0x98>)
 8009834:	fba2 2303 	umull	r2, r3, r2, r3
 8009838:	099b      	lsrs	r3, r3, #6
 800983a:	3301      	adds	r3, #1
 800983c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d113      	bne.n	800986c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009844:	4b1b      	ldr	r3, [pc, #108]	@ (80098b4 <HAL_PWREx_ConfigSupply+0x9c>)
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	4a1a      	ldr	r2, [pc, #104]	@ (80098b4 <HAL_PWREx_ConfigSupply+0x9c>)
 800984a:	f023 0302 	bic.w	r3, r3, #2
 800984e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009850:	e002      	b.n	8009858 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	3b01      	subs	r3, #1
 8009856:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009858:	4b16      	ldr	r3, [pc, #88]	@ (80098b4 <HAL_PWREx_ConfigSupply+0x9c>)
 800985a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800985c:	f003 0302 	and.w	r3, r3, #2
 8009860:	2b02      	cmp	r3, #2
 8009862:	d116      	bne.n	8009892 <HAL_PWREx_ConfigSupply+0x7a>
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1f3      	bne.n	8009852 <HAL_PWREx_ConfigSupply+0x3a>
 800986a:	e012      	b.n	8009892 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800986c:	4b11      	ldr	r3, [pc, #68]	@ (80098b4 <HAL_PWREx_ConfigSupply+0x9c>)
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	4a10      	ldr	r2, [pc, #64]	@ (80098b4 <HAL_PWREx_ConfigSupply+0x9c>)
 8009872:	f043 0302 	orr.w	r3, r3, #2
 8009876:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009878:	e002      	b.n	8009880 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	3b01      	subs	r3, #1
 800987e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009880:	4b0c      	ldr	r3, [pc, #48]	@ (80098b4 <HAL_PWREx_ConfigSupply+0x9c>)
 8009882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009884:	f003 0302 	and.w	r3, r3, #2
 8009888:	2b00      	cmp	r3, #0
 800988a:	d102      	bne.n	8009892 <HAL_PWREx_ConfigSupply+0x7a>
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1f3      	bne.n	800987a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d101      	bne.n	800989c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8009898:	2303      	movs	r3, #3
 800989a:	e000      	b.n	800989e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3714      	adds	r7, #20
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	20000030 	.word	0x20000030
 80098b0:	10624dd3 	.word	0x10624dd3
 80098b4:	46020800 	.word	0x46020800

080098b8 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80098b8:	b480      	push	{r7}
 80098ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80098bc:	4b05      	ldr	r3, [pc, #20]	@ (80098d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	4a04      	ldr	r2, [pc, #16]	@ (80098d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80098c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098c6:	6113      	str	r3, [r2, #16]
}
 80098c8:	bf00      	nop
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	46020800 	.word	0x46020800

080098d8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80098d8:	b480      	push	{r7}
 80098da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80098dc:	4b05      	ldr	r3, [pc, #20]	@ (80098f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	4a04      	ldr	r2, [pc, #16]	@ (80098f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80098e2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80098e6:	6113      	str	r3, [r2, #16]
}
 80098e8:	bf00      	nop
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	46020800 	.word	0x46020800

080098f8 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80098f8:	b480      	push	{r7}
 80098fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80098fc:	4b05      	ldr	r3, [pc, #20]	@ (8009914 <HAL_PWREx_EnableVddA+0x1c>)
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	4a04      	ldr	r2, [pc, #16]	@ (8009914 <HAL_PWREx_EnableVddA+0x1c>)
 8009902:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009906:	6113      	str	r3, [r2, #16]
}
 8009908:	bf00      	nop
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	46020800 	.word	0x46020800

08009918 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 800991e:	f7ff ff6d 	bl	80097fc <HAL_PWREx_GetVoltageRange>
 8009922:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800992a:	d003      	beq.n	8009934 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009932:	d107      	bne.n	8009944 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8009934:	4b06      	ldr	r3, [pc, #24]	@ (8009950 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	4a05      	ldr	r2, [pc, #20]	@ (8009950 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800993a:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 800993e:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	e000      	b.n	8009946 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
}
 8009946:	4618      	mov	r0, r3
 8009948:	3708      	adds	r7, #8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	46020800 	.word	0x46020800

08009954 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b08e      	sub	sp, #56	@ 0x38
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800995c:	2300      	movs	r3, #0
 800995e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d102      	bne.n	800996e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	f000 bec8 	b.w	800a6fe <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800996e:	4b99      	ldr	r3, [pc, #612]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009970:	69db      	ldr	r3, [r3, #28]
 8009972:	f003 030c 	and.w	r3, r3, #12
 8009976:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009978:	4b96      	ldr	r3, [pc, #600]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 800997a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800997c:	f003 0303 	and.w	r3, r3, #3
 8009980:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 0310 	and.w	r3, r3, #16
 800998a:	2b00      	cmp	r3, #0
 800998c:	f000 816c 	beq.w	8009c68 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009992:	2b00      	cmp	r3, #0
 8009994:	d007      	beq.n	80099a6 <HAL_RCC_OscConfig+0x52>
 8009996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009998:	2b0c      	cmp	r3, #12
 800999a:	f040 80de 	bne.w	8009b5a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800999e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	f040 80da 	bne.w	8009b5a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	69db      	ldr	r3, [r3, #28]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d102      	bne.n	80099b4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	f000 bea5 	b.w	800a6fe <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099b8:	4b86      	ldr	r3, [pc, #536]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d004      	beq.n	80099ce <HAL_RCC_OscConfig+0x7a>
 80099c4:	4b83      	ldr	r3, [pc, #524]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80099cc:	e005      	b.n	80099da <HAL_RCC_OscConfig+0x86>
 80099ce:	4b81      	ldr	r3, [pc, #516]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 80099d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80099d4:	041b      	lsls	r3, r3, #16
 80099d6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80099da:	4293      	cmp	r3, r2
 80099dc:	d255      	bcs.n	8009a8a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80099de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10a      	bne.n	80099fa <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e8:	4618      	mov	r0, r3
 80099ea:	f001 f9d9 	bl	800ada0 <RCC_SetFlashLatencyFromMSIRange>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d002      	beq.n	80099fa <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	f000 be82 	b.w	800a6fe <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80099fa:	4b76      	ldr	r3, [pc, #472]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	4a75      	ldr	r2, [pc, #468]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009a00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a04:	6093      	str	r3, [r2, #8]
 8009a06:	4b73      	ldr	r3, [pc, #460]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a12:	4970      	ldr	r1, [pc, #448]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009a14:	4313      	orrs	r3, r2
 8009a16:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a1c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009a20:	d309      	bcc.n	8009a36 <HAL_RCC_OscConfig+0xe2>
 8009a22:	4b6c      	ldr	r3, [pc, #432]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	f023 021f 	bic.w	r2, r3, #31
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
 8009a2e:	4969      	ldr	r1, [pc, #420]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009a30:	4313      	orrs	r3, r2
 8009a32:	60cb      	str	r3, [r1, #12]
 8009a34:	e07e      	b.n	8009b34 <HAL_RCC_OscConfig+0x1e0>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	da0a      	bge.n	8009a54 <HAL_RCC_OscConfig+0x100>
 8009a3e:	4b65      	ldr	r3, [pc, #404]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	015b      	lsls	r3, r3, #5
 8009a4c:	4961      	ldr	r1, [pc, #388]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	60cb      	str	r3, [r1, #12]
 8009a52:	e06f      	b.n	8009b34 <HAL_RCC_OscConfig+0x1e0>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a5c:	d30a      	bcc.n	8009a74 <HAL_RCC_OscConfig+0x120>
 8009a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	029b      	lsls	r3, r3, #10
 8009a6c:	4959      	ldr	r1, [pc, #356]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	60cb      	str	r3, [r1, #12]
 8009a72:	e05f      	b.n	8009b34 <HAL_RCC_OscConfig+0x1e0>
 8009a74:	4b57      	ldr	r3, [pc, #348]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6a1b      	ldr	r3, [r3, #32]
 8009a80:	03db      	lsls	r3, r3, #15
 8009a82:	4954      	ldr	r1, [pc, #336]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009a84:	4313      	orrs	r3, r2
 8009a86:	60cb      	str	r3, [r1, #12]
 8009a88:	e054      	b.n	8009b34 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009a8a:	4b52      	ldr	r3, [pc, #328]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	4a51      	ldr	r2, [pc, #324]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009a90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a94:	6093      	str	r3, [r2, #8]
 8009a96:	4b4f      	ldr	r3, [pc, #316]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aa2:	494c      	ldr	r1, [pc, #304]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009ab0:	d309      	bcc.n	8009ac6 <HAL_RCC_OscConfig+0x172>
 8009ab2:	4b48      	ldr	r3, [pc, #288]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	f023 021f 	bic.w	r2, r3, #31
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	4945      	ldr	r1, [pc, #276]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	60cb      	str	r3, [r1, #12]
 8009ac4:	e028      	b.n	8009b18 <HAL_RCC_OscConfig+0x1c4>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	da0a      	bge.n	8009ae4 <HAL_RCC_OscConfig+0x190>
 8009ace:	4b41      	ldr	r3, [pc, #260]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a1b      	ldr	r3, [r3, #32]
 8009ada:	015b      	lsls	r3, r3, #5
 8009adc:	493d      	ldr	r1, [pc, #244]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	60cb      	str	r3, [r1, #12]
 8009ae2:	e019      	b.n	8009b18 <HAL_RCC_OscConfig+0x1c4>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009aec:	d30a      	bcc.n	8009b04 <HAL_RCC_OscConfig+0x1b0>
 8009aee:	4b39      	ldr	r3, [pc, #228]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a1b      	ldr	r3, [r3, #32]
 8009afa:	029b      	lsls	r3, r3, #10
 8009afc:	4935      	ldr	r1, [pc, #212]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009afe:	4313      	orrs	r3, r2
 8009b00:	60cb      	str	r3, [r1, #12]
 8009b02:	e009      	b.n	8009b18 <HAL_RCC_OscConfig+0x1c4>
 8009b04:	4b33      	ldr	r3, [pc, #204]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6a1b      	ldr	r3, [r3, #32]
 8009b10:	03db      	lsls	r3, r3, #15
 8009b12:	4930      	ldr	r1, [pc, #192]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009b14:	4313      	orrs	r3, r2
 8009b16:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10a      	bne.n	8009b34 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b22:	4618      	mov	r0, r3
 8009b24:	f001 f93c 	bl	800ada0 <RCC_SetFlashLatencyFromMSIRange>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d002      	beq.n	8009b34 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	f000 bde5 	b.w	800a6fe <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8009b34:	f001 f8de 	bl	800acf4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009b38:	4b27      	ldr	r3, [pc, #156]	@ (8009bd8 <HAL_RCC_OscConfig+0x284>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7f9 f827 	bl	8002b90 <HAL_InitTick>
 8009b42:	4603      	mov	r3, r0
 8009b44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8009b48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f000 808a 	beq.w	8009c66 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8009b52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b56:	f000 bdd2 	b.w	800a6fe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	69db      	ldr	r3, [r3, #28]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d066      	beq.n	8009c30 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8009b62:	4b1c      	ldr	r3, [pc, #112]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a1b      	ldr	r2, [pc, #108]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009b68:	f043 0301 	orr.w	r3, r3, #1
 8009b6c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009b6e:	f7f9 f899 	bl	8002ca4 <HAL_GetTick>
 8009b72:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009b74:	e009      	b.n	8009b8a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009b76:	f7f9 f895 	bl	8002ca4 <HAL_GetTick>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d902      	bls.n	8009b8a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	f000 bdba 	b.w	800a6fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009b8a:	4b12      	ldr	r3, [pc, #72]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 0304 	and.w	r3, r3, #4
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d0ef      	beq.n	8009b76 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009b96:	4b0f      	ldr	r3, [pc, #60]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009b9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009ba0:	6093      	str	r3, [r2, #8]
 8009ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bae:	4909      	ldr	r1, [pc, #36]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bb8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009bbc:	d30e      	bcc.n	8009bdc <HAL_RCC_OscConfig+0x288>
 8009bbe:	4b05      	ldr	r3, [pc, #20]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	f023 021f 	bic.w	r2, r3, #31
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	4902      	ldr	r1, [pc, #8]	@ (8009bd4 <HAL_RCC_OscConfig+0x280>)
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	60cb      	str	r3, [r1, #12]
 8009bd0:	e04a      	b.n	8009c68 <HAL_RCC_OscConfig+0x314>
 8009bd2:	bf00      	nop
 8009bd4:	46020c00 	.word	0x46020c00
 8009bd8:	20000034 	.word	0x20000034
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	da0a      	bge.n	8009bfa <HAL_RCC_OscConfig+0x2a6>
 8009be4:	4b98      	ldr	r3, [pc, #608]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6a1b      	ldr	r3, [r3, #32]
 8009bf0:	015b      	lsls	r3, r3, #5
 8009bf2:	4995      	ldr	r1, [pc, #596]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	60cb      	str	r3, [r1, #12]
 8009bf8:	e036      	b.n	8009c68 <HAL_RCC_OscConfig+0x314>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c02:	d30a      	bcc.n	8009c1a <HAL_RCC_OscConfig+0x2c6>
 8009c04:	4b90      	ldr	r3, [pc, #576]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a1b      	ldr	r3, [r3, #32]
 8009c10:	029b      	lsls	r3, r3, #10
 8009c12:	498d      	ldr	r1, [pc, #564]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009c14:	4313      	orrs	r3, r2
 8009c16:	60cb      	str	r3, [r1, #12]
 8009c18:	e026      	b.n	8009c68 <HAL_RCC_OscConfig+0x314>
 8009c1a:	4b8b      	ldr	r3, [pc, #556]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a1b      	ldr	r3, [r3, #32]
 8009c26:	03db      	lsls	r3, r3, #15
 8009c28:	4987      	ldr	r1, [pc, #540]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	60cb      	str	r3, [r1, #12]
 8009c2e:	e01b      	b.n	8009c68 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8009c30:	4b85      	ldr	r3, [pc, #532]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a84      	ldr	r2, [pc, #528]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009c36:	f023 0301 	bic.w	r3, r3, #1
 8009c3a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009c3c:	f7f9 f832 	bl	8002ca4 <HAL_GetTick>
 8009c40:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009c42:	e009      	b.n	8009c58 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009c44:	f7f9 f82e 	bl	8002ca4 <HAL_GetTick>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c4c:	1ad3      	subs	r3, r2, r3
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d902      	bls.n	8009c58 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8009c52:	2303      	movs	r3, #3
 8009c54:	f000 bd53 	b.w	800a6fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8009c58:	4b7b      	ldr	r3, [pc, #492]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 0304 	and.w	r3, r3, #4
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d1ef      	bne.n	8009c44 <HAL_RCC_OscConfig+0x2f0>
 8009c64:	e000      	b.n	8009c68 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009c66:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 0301 	and.w	r3, r3, #1
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f000 808b 	beq.w	8009d8c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c78:	2b08      	cmp	r3, #8
 8009c7a:	d005      	beq.n	8009c88 <HAL_RCC_OscConfig+0x334>
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7e:	2b0c      	cmp	r3, #12
 8009c80:	d109      	bne.n	8009c96 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c84:	2b03      	cmp	r3, #3
 8009c86:	d106      	bne.n	8009c96 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d17d      	bne.n	8009d8c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	f000 bd34 	b.w	800a6fe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c9e:	d106      	bne.n	8009cae <HAL_RCC_OscConfig+0x35a>
 8009ca0:	4b69      	ldr	r3, [pc, #420]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a68      	ldr	r2, [pc, #416]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009ca6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009caa:	6013      	str	r3, [r2, #0]
 8009cac:	e041      	b.n	8009d32 <HAL_RCC_OscConfig+0x3de>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009cb6:	d112      	bne.n	8009cde <HAL_RCC_OscConfig+0x38a>
 8009cb8:	4b63      	ldr	r3, [pc, #396]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a62      	ldr	r2, [pc, #392]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009cbe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009cc2:	6013      	str	r3, [r2, #0]
 8009cc4:	4b60      	ldr	r3, [pc, #384]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a5f      	ldr	r2, [pc, #380]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009cca:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009cce:	6013      	str	r3, [r2, #0]
 8009cd0:	4b5d      	ldr	r3, [pc, #372]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a5c      	ldr	r2, [pc, #368]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009cd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009cda:	6013      	str	r3, [r2, #0]
 8009cdc:	e029      	b.n	8009d32 <HAL_RCC_OscConfig+0x3de>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8009ce6:	d112      	bne.n	8009d0e <HAL_RCC_OscConfig+0x3ba>
 8009ce8:	4b57      	ldr	r3, [pc, #348]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a56      	ldr	r2, [pc, #344]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009cee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009cf2:	6013      	str	r3, [r2, #0]
 8009cf4:	4b54      	ldr	r3, [pc, #336]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a53      	ldr	r2, [pc, #332]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009cfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cfe:	6013      	str	r3, [r2, #0]
 8009d00:	4b51      	ldr	r3, [pc, #324]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a50      	ldr	r2, [pc, #320]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009d06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d0a:	6013      	str	r3, [r2, #0]
 8009d0c:	e011      	b.n	8009d32 <HAL_RCC_OscConfig+0x3de>
 8009d0e:	4b4e      	ldr	r3, [pc, #312]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a4d      	ldr	r2, [pc, #308]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009d14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d18:	6013      	str	r3, [r2, #0]
 8009d1a:	4b4b      	ldr	r3, [pc, #300]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a4a      	ldr	r2, [pc, #296]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009d20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009d24:	6013      	str	r3, [r2, #0]
 8009d26:	4b48      	ldr	r3, [pc, #288]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a47      	ldr	r2, [pc, #284]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009d2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009d30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d014      	beq.n	8009d64 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8009d3a:	f7f8 ffb3 	bl	8002ca4 <HAL_GetTick>
 8009d3e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d40:	e009      	b.n	8009d56 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d42:	f7f8 ffaf 	bl	8002ca4 <HAL_GetTick>
 8009d46:	4602      	mov	r2, r0
 8009d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	2b64      	cmp	r3, #100	@ 0x64
 8009d4e:	d902      	bls.n	8009d56 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8009d50:	2303      	movs	r3, #3
 8009d52:	f000 bcd4 	b.w	800a6fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d56:	4b3c      	ldr	r3, [pc, #240]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d0ef      	beq.n	8009d42 <HAL_RCC_OscConfig+0x3ee>
 8009d62:	e013      	b.n	8009d8c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8009d64:	f7f8 ff9e 	bl	8002ca4 <HAL_GetTick>
 8009d68:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009d6a:	e009      	b.n	8009d80 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d6c:	f7f8 ff9a 	bl	8002ca4 <HAL_GetTick>
 8009d70:	4602      	mov	r2, r0
 8009d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	2b64      	cmp	r3, #100	@ 0x64
 8009d78:	d902      	bls.n	8009d80 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	f000 bcbf 	b.w	800a6fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009d80:	4b31      	ldr	r3, [pc, #196]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1ef      	bne.n	8009d6c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 0302 	and.w	r3, r3, #2
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d05f      	beq.n	8009e58 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9a:	2b04      	cmp	r3, #4
 8009d9c:	d005      	beq.n	8009daa <HAL_RCC_OscConfig+0x456>
 8009d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da0:	2b0c      	cmp	r3, #12
 8009da2:	d114      	bne.n	8009dce <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d111      	bne.n	8009dce <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d102      	bne.n	8009db8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	f000 bca3 	b.w	800a6fe <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009db8:	4b23      	ldr	r3, [pc, #140]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	691b      	ldr	r3, [r3, #16]
 8009dc4:	041b      	lsls	r3, r3, #16
 8009dc6:	4920      	ldr	r1, [pc, #128]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009dcc:	e044      	b.n	8009e58 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d024      	beq.n	8009e20 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8009dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a1b      	ldr	r2, [pc, #108]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009de0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009de2:	f7f8 ff5f 	bl	8002ca4 <HAL_GetTick>
 8009de6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009de8:	e009      	b.n	8009dfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009dea:	f7f8 ff5b 	bl	8002ca4 <HAL_GetTick>
 8009dee:	4602      	mov	r2, r0
 8009df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df2:	1ad3      	subs	r3, r2, r3
 8009df4:	2b02      	cmp	r3, #2
 8009df6:	d902      	bls.n	8009dfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009df8:	2303      	movs	r3, #3
 8009dfa:	f000 bc80 	b.w	800a6fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009dfe:	4b12      	ldr	r3, [pc, #72]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d0ef      	beq.n	8009dea <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	691b      	ldr	r3, [r3, #16]
 8009e16:	041b      	lsls	r3, r3, #16
 8009e18:	490b      	ldr	r1, [pc, #44]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	610b      	str	r3, [r1, #16]
 8009e1e:	e01b      	b.n	8009e58 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8009e20:	4b09      	ldr	r3, [pc, #36]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a08      	ldr	r2, [pc, #32]	@ (8009e48 <HAL_RCC_OscConfig+0x4f4>)
 8009e26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e2a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009e2c:	f7f8 ff3a 	bl	8002ca4 <HAL_GetTick>
 8009e30:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009e32:	e00b      	b.n	8009e4c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e34:	f7f8 ff36 	bl	8002ca4 <HAL_GetTick>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d904      	bls.n	8009e4c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8009e42:	2303      	movs	r3, #3
 8009e44:	f000 bc5b 	b.w	800a6fe <HAL_RCC_OscConfig+0xdaa>
 8009e48:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009e4c:	4baf      	ldr	r3, [pc, #700]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1ed      	bne.n	8009e34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 0308 	and.w	r3, r3, #8
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f000 80c8 	beq.w	8009ff6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8009e66:	2300      	movs	r3, #0
 8009e68:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e6c:	4ba7      	ldr	r3, [pc, #668]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 8009e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e72:	f003 0304 	and.w	r3, r3, #4
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d111      	bne.n	8009e9e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e7a:	4ba4      	ldr	r3, [pc, #656]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 8009e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e80:	4aa2      	ldr	r2, [pc, #648]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 8009e82:	f043 0304 	orr.w	r3, r3, #4
 8009e86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009e8a:	4ba0      	ldr	r3, [pc, #640]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 8009e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e90:	f003 0304 	and.w	r3, r3, #4
 8009e94:	617b      	str	r3, [r7, #20]
 8009e96:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009e9e:	4b9c      	ldr	r3, [pc, #624]	@ (800a110 <HAL_RCC_OscConfig+0x7bc>)
 8009ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea2:	f003 0301 	and.w	r3, r3, #1
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d119      	bne.n	8009ede <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009eaa:	4b99      	ldr	r3, [pc, #612]	@ (800a110 <HAL_RCC_OscConfig+0x7bc>)
 8009eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eae:	4a98      	ldr	r2, [pc, #608]	@ (800a110 <HAL_RCC_OscConfig+0x7bc>)
 8009eb0:	f043 0301 	orr.w	r3, r3, #1
 8009eb4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009eb6:	f7f8 fef5 	bl	8002ca4 <HAL_GetTick>
 8009eba:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009ebc:	e009      	b.n	8009ed2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ebe:	f7f8 fef1 	bl	8002ca4 <HAL_GetTick>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d902      	bls.n	8009ed2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	f000 bc16 	b.w	800a6fe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009ed2:	4b8f      	ldr	r3, [pc, #572]	@ (800a110 <HAL_RCC_OscConfig+0x7bc>)
 8009ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d0ef      	beq.n	8009ebe <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	695b      	ldr	r3, [r3, #20]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d05f      	beq.n	8009fa6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8009ee6:	4b89      	ldr	r3, [pc, #548]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 8009ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009eec:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	699a      	ldr	r2, [r3, #24]
 8009ef2:	6a3b      	ldr	r3, [r7, #32]
 8009ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d037      	beq.n	8009f6c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009efc:	6a3b      	ldr	r3, [r7, #32]
 8009efe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d006      	beq.n	8009f14 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8009f06:	6a3b      	ldr	r3, [r7, #32]
 8009f08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d101      	bne.n	8009f14 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	e3f4      	b.n	800a6fe <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d01b      	beq.n	8009f56 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8009f1e:	4b7b      	ldr	r3, [pc, #492]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 8009f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f24:	4a79      	ldr	r2, [pc, #484]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 8009f26:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009f2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8009f2e:	f7f8 feb9 	bl	8002ca4 <HAL_GetTick>
 8009f32:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009f34:	e008      	b.n	8009f48 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f36:	f7f8 feb5 	bl	8002ca4 <HAL_GetTick>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	2b05      	cmp	r3, #5
 8009f42:	d901      	bls.n	8009f48 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e3da      	b.n	800a6fe <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009f48:	4b70      	ldr	r3, [pc, #448]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 8009f4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1ef      	bne.n	8009f36 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8009f56:	4b6d      	ldr	r3, [pc, #436]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 8009f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f5c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	699b      	ldr	r3, [r3, #24]
 8009f64:	4969      	ldr	r1, [pc, #420]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 8009f66:	4313      	orrs	r3, r2
 8009f68:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8009f6c:	4b67      	ldr	r3, [pc, #412]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 8009f6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f72:	4a66      	ldr	r2, [pc, #408]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 8009f74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009f78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009f7c:	f7f8 fe92 	bl	8002ca4 <HAL_GetTick>
 8009f80:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009f82:	e008      	b.n	8009f96 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f84:	f7f8 fe8e 	bl	8002ca4 <HAL_GetTick>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	2b05      	cmp	r3, #5
 8009f90:	d901      	bls.n	8009f96 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e3b3      	b.n	800a6fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009f96:	4b5d      	ldr	r3, [pc, #372]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 8009f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d0ef      	beq.n	8009f84 <HAL_RCC_OscConfig+0x630>
 8009fa4:	e01b      	b.n	8009fde <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8009fa6:	4b59      	ldr	r3, [pc, #356]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 8009fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009fac:	4a57      	ldr	r2, [pc, #348]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 8009fae:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8009fb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8009fb6:	f7f8 fe75 	bl	8002ca4 <HAL_GetTick>
 8009fba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009fbc:	e008      	b.n	8009fd0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009fbe:	f7f8 fe71 	bl	8002ca4 <HAL_GetTick>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	2b05      	cmp	r3, #5
 8009fca:	d901      	bls.n	8009fd0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8009fcc:	2303      	movs	r3, #3
 8009fce:	e396      	b.n	800a6fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009fd0:	4b4e      	ldr	r3, [pc, #312]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 8009fd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009fd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1ef      	bne.n	8009fbe <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009fde:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d107      	bne.n	8009ff6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009fe6:	4b49      	ldr	r3, [pc, #292]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 8009fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009fec:	4a47      	ldr	r2, [pc, #284]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 8009fee:	f023 0304 	bic.w	r3, r3, #4
 8009ff2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 0304 	and.w	r3, r3, #4
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f000 8111 	beq.w	800a226 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800a004:	2300      	movs	r3, #0
 800a006:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a00a:	4b40      	ldr	r3, [pc, #256]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 800a00c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a010:	f003 0304 	and.w	r3, r3, #4
 800a014:	2b00      	cmp	r3, #0
 800a016:	d111      	bne.n	800a03c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a018:	4b3c      	ldr	r3, [pc, #240]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 800a01a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a01e:	4a3b      	ldr	r2, [pc, #236]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 800a020:	f043 0304 	orr.w	r3, r3, #4
 800a024:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a028:	4b38      	ldr	r3, [pc, #224]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 800a02a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a02e:	f003 0304 	and.w	r3, r3, #4
 800a032:	613b      	str	r3, [r7, #16]
 800a034:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800a036:	2301      	movs	r3, #1
 800a038:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a03c:	4b34      	ldr	r3, [pc, #208]	@ (800a110 <HAL_RCC_OscConfig+0x7bc>)
 800a03e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a040:	f003 0301 	and.w	r3, r3, #1
 800a044:	2b00      	cmp	r3, #0
 800a046:	d118      	bne.n	800a07a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a048:	4b31      	ldr	r3, [pc, #196]	@ (800a110 <HAL_RCC_OscConfig+0x7bc>)
 800a04a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a04c:	4a30      	ldr	r2, [pc, #192]	@ (800a110 <HAL_RCC_OscConfig+0x7bc>)
 800a04e:	f043 0301 	orr.w	r3, r3, #1
 800a052:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a054:	f7f8 fe26 	bl	8002ca4 <HAL_GetTick>
 800a058:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a05a:	e008      	b.n	800a06e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a05c:	f7f8 fe22 	bl	8002ca4 <HAL_GetTick>
 800a060:	4602      	mov	r2, r0
 800a062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	2b02      	cmp	r3, #2
 800a068:	d901      	bls.n	800a06e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800a06a:	2303      	movs	r3, #3
 800a06c:	e347      	b.n	800a6fe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a06e:	4b28      	ldr	r3, [pc, #160]	@ (800a110 <HAL_RCC_OscConfig+0x7bc>)
 800a070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	d0f0      	beq.n	800a05c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	f003 0301 	and.w	r3, r3, #1
 800a082:	2b00      	cmp	r3, #0
 800a084:	d01f      	beq.n	800a0c6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	f003 0304 	and.w	r3, r3, #4
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d010      	beq.n	800a0b4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a092:	4b1e      	ldr	r3, [pc, #120]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 800a094:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a098:	4a1c      	ldr	r2, [pc, #112]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 800a09a:	f043 0304 	orr.w	r3, r3, #4
 800a09e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a0a2:	4b1a      	ldr	r3, [pc, #104]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 800a0a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0a8:	4a18      	ldr	r2, [pc, #96]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 800a0aa:	f043 0301 	orr.w	r3, r3, #1
 800a0ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a0b2:	e018      	b.n	800a0e6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a0b4:	4b15      	ldr	r3, [pc, #84]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 800a0b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0ba:	4a14      	ldr	r2, [pc, #80]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 800a0bc:	f043 0301 	orr.w	r3, r3, #1
 800a0c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800a0c4:	e00f      	b.n	800a0e6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a0c6:	4b11      	ldr	r3, [pc, #68]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 800a0c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0cc:	4a0f      	ldr	r2, [pc, #60]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 800a0ce:	f023 0301 	bic.w	r3, r3, #1
 800a0d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a0d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 800a0d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0dc:	4a0b      	ldr	r2, [pc, #44]	@ (800a10c <HAL_RCC_OscConfig+0x7b8>)
 800a0de:	f023 0304 	bic.w	r3, r3, #4
 800a0e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d057      	beq.n	800a19e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800a0ee:	f7f8 fdd9 	bl	8002ca4 <HAL_GetTick>
 800a0f2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0f4:	e00e      	b.n	800a114 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0f6:	f7f8 fdd5 	bl	8002ca4 <HAL_GetTick>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a104:	4293      	cmp	r3, r2
 800a106:	d905      	bls.n	800a114 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e2f8      	b.n	800a6fe <HAL_RCC_OscConfig+0xdaa>
 800a10c:	46020c00 	.word	0x46020c00
 800a110:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a114:	4b9c      	ldr	r3, [pc, #624]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a11a:	f003 0302 	and.w	r3, r3, #2
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d0e9      	beq.n	800a0f6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d01b      	beq.n	800a166 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a12e:	4b96      	ldr	r3, [pc, #600]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a134:	4a94      	ldr	r2, [pc, #592]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a13a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a13e:	e00a      	b.n	800a156 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a140:	f7f8 fdb0 	bl	8002ca4 <HAL_GetTick>
 800a144:	4602      	mov	r2, r0
 800a146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a14e:	4293      	cmp	r3, r2
 800a150:	d901      	bls.n	800a156 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800a152:	2303      	movs	r3, #3
 800a154:	e2d3      	b.n	800a6fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a156:	4b8c      	ldr	r3, [pc, #560]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a15c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a160:	2b00      	cmp	r3, #0
 800a162:	d0ed      	beq.n	800a140 <HAL_RCC_OscConfig+0x7ec>
 800a164:	e053      	b.n	800a20e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a166:	4b88      	ldr	r3, [pc, #544]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a16c:	4a86      	ldr	r2, [pc, #536]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a16e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a172:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a176:	e00a      	b.n	800a18e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a178:	f7f8 fd94 	bl	8002ca4 <HAL_GetTick>
 800a17c:	4602      	mov	r2, r0
 800a17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a186:	4293      	cmp	r3, r2
 800a188:	d901      	bls.n	800a18e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800a18a:	2303      	movs	r3, #3
 800a18c:	e2b7      	b.n	800a6fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a18e:	4b7e      	ldr	r3, [pc, #504]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1ed      	bne.n	800a178 <HAL_RCC_OscConfig+0x824>
 800a19c:	e037      	b.n	800a20e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800a19e:	f7f8 fd81 	bl	8002ca4 <HAL_GetTick>
 800a1a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a1a4:	e00a      	b.n	800a1bc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1a6:	f7f8 fd7d 	bl	8002ca4 <HAL_GetTick>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d901      	bls.n	800a1bc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	e2a0      	b.n	800a6fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a1bc:	4b72      	ldr	r3, [pc, #456]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a1be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1c2:	f003 0302 	and.w	r3, r3, #2
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1ed      	bne.n	800a1a6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800a1ca:	4b6f      	ldr	r3, [pc, #444]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a1cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d01a      	beq.n	800a20e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a1d8:	4b6b      	ldr	r3, [pc, #428]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a1da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1de:	4a6a      	ldr	r2, [pc, #424]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a1e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a1e8:	e00a      	b.n	800a200 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1ea:	f7f8 fd5b 	bl	8002ca4 <HAL_GetTick>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d901      	bls.n	800a200 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e27e      	b.n	800a6fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a200:	4b61      	ldr	r3, [pc, #388]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a206:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d1ed      	bne.n	800a1ea <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a20e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800a212:	2b01      	cmp	r3, #1
 800a214:	d107      	bne.n	800a226 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a216:	4b5c      	ldr	r3, [pc, #368]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a21c:	4a5a      	ldr	r2, [pc, #360]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a21e:	f023 0304 	bic.w	r3, r3, #4
 800a222:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f003 0320 	and.w	r3, r3, #32
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d036      	beq.n	800a2a0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a236:	2b00      	cmp	r3, #0
 800a238:	d019      	beq.n	800a26e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800a23a:	4b53      	ldr	r3, [pc, #332]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a52      	ldr	r2, [pc, #328]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a240:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a244:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a246:	f7f8 fd2d 	bl	8002ca4 <HAL_GetTick>
 800a24a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a24c:	e008      	b.n	800a260 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a24e:	f7f8 fd29 	bl	8002ca4 <HAL_GetTick>
 800a252:	4602      	mov	r2, r0
 800a254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a256:	1ad3      	subs	r3, r2, r3
 800a258:	2b02      	cmp	r3, #2
 800a25a:	d901      	bls.n	800a260 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800a25c:	2303      	movs	r3, #3
 800a25e:	e24e      	b.n	800a6fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a260:	4b49      	ldr	r3, [pc, #292]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d0f0      	beq.n	800a24e <HAL_RCC_OscConfig+0x8fa>
 800a26c:	e018      	b.n	800a2a0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800a26e:	4b46      	ldr	r3, [pc, #280]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a45      	ldr	r2, [pc, #276]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a274:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a278:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a27a:	f7f8 fd13 	bl	8002ca4 <HAL_GetTick>
 800a27e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a280:	e008      	b.n	800a294 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a282:	f7f8 fd0f 	bl	8002ca4 <HAL_GetTick>
 800a286:	4602      	mov	r2, r0
 800a288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a28a:	1ad3      	subs	r3, r2, r3
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	d901      	bls.n	800a294 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800a290:	2303      	movs	r3, #3
 800a292:	e234      	b.n	800a6fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a294:	4b3c      	ldr	r3, [pc, #240]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d1f0      	bne.n	800a282 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d036      	beq.n	800a31a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d019      	beq.n	800a2e8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800a2b4:	4b34      	ldr	r3, [pc, #208]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a33      	ldr	r2, [pc, #204]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a2ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a2be:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a2c0:	f7f8 fcf0 	bl	8002ca4 <HAL_GetTick>
 800a2c4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a2c6:	e008      	b.n	800a2da <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a2c8:	f7f8 fcec 	bl	8002ca4 <HAL_GetTick>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d0:	1ad3      	subs	r3, r2, r3
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	d901      	bls.n	800a2da <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800a2d6:	2303      	movs	r3, #3
 800a2d8:	e211      	b.n	800a6fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800a2da:	4b2b      	ldr	r3, [pc, #172]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d0f0      	beq.n	800a2c8 <HAL_RCC_OscConfig+0x974>
 800a2e6:	e018      	b.n	800a31a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800a2e8:	4b27      	ldr	r3, [pc, #156]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a26      	ldr	r2, [pc, #152]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a2ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2f2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a2f4:	f7f8 fcd6 	bl	8002ca4 <HAL_GetTick>
 800a2f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a2fa:	e008      	b.n	800a30e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800a2fc:	f7f8 fcd2 	bl	8002ca4 <HAL_GetTick>
 800a300:	4602      	mov	r2, r0
 800a302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	2b02      	cmp	r3, #2
 800a308:	d901      	bls.n	800a30e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e1f7      	b.n	800a6fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800a30e:	4b1e      	ldr	r3, [pc, #120]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1f0      	bne.n	800a2fc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a322:	2b00      	cmp	r3, #0
 800a324:	d07f      	beq.n	800a426 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d062      	beq.n	800a3f4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800a32e:	4b16      	ldr	r3, [pc, #88]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	4a15      	ldr	r2, [pc, #84]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a334:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a338:	6093      	str	r3, [r2, #8]
 800a33a:	4b13      	ldr	r3, [pc, #76]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a346:	4910      	ldr	r1, [pc, #64]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a348:	4313      	orrs	r3, r2
 800a34a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a350:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a354:	d309      	bcc.n	800a36a <HAL_RCC_OscConfig+0xa16>
 800a356:	4b0c      	ldr	r3, [pc, #48]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	f023 021f 	bic.w	r2, r3, #31
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a1b      	ldr	r3, [r3, #32]
 800a362:	4909      	ldr	r1, [pc, #36]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a364:	4313      	orrs	r3, r2
 800a366:	60cb      	str	r3, [r1, #12]
 800a368:	e02a      	b.n	800a3c0 <HAL_RCC_OscConfig+0xa6c>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a36e:	2b00      	cmp	r3, #0
 800a370:	da0c      	bge.n	800a38c <HAL_RCC_OscConfig+0xa38>
 800a372:	4b05      	ldr	r3, [pc, #20]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	015b      	lsls	r3, r3, #5
 800a380:	4901      	ldr	r1, [pc, #4]	@ (800a388 <HAL_RCC_OscConfig+0xa34>)
 800a382:	4313      	orrs	r3, r2
 800a384:	60cb      	str	r3, [r1, #12]
 800a386:	e01b      	b.n	800a3c0 <HAL_RCC_OscConfig+0xa6c>
 800a388:	46020c00 	.word	0x46020c00
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a394:	d30a      	bcc.n	800a3ac <HAL_RCC_OscConfig+0xa58>
 800a396:	4ba1      	ldr	r3, [pc, #644]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a1b      	ldr	r3, [r3, #32]
 800a3a2:	029b      	lsls	r3, r3, #10
 800a3a4:	499d      	ldr	r1, [pc, #628]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	60cb      	str	r3, [r1, #12]
 800a3aa:	e009      	b.n	800a3c0 <HAL_RCC_OscConfig+0xa6c>
 800a3ac:	4b9b      	ldr	r3, [pc, #620]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a1b      	ldr	r3, [r3, #32]
 800a3b8:	03db      	lsls	r3, r3, #15
 800a3ba:	4998      	ldr	r1, [pc, #608]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800a3c0:	4b96      	ldr	r3, [pc, #600]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a95      	ldr	r2, [pc, #596]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a3c6:	f043 0310 	orr.w	r3, r3, #16
 800a3ca:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a3cc:	f7f8 fc6a 	bl	8002ca4 <HAL_GetTick>
 800a3d0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a3d2:	e008      	b.n	800a3e6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a3d4:	f7f8 fc66 	bl	8002ca4 <HAL_GetTick>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d901      	bls.n	800a3e6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800a3e2:	2303      	movs	r3, #3
 800a3e4:	e18b      	b.n	800a6fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800a3e6:	4b8d      	ldr	r3, [pc, #564]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 0320 	and.w	r3, r3, #32
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d0f0      	beq.n	800a3d4 <HAL_RCC_OscConfig+0xa80>
 800a3f2:	e018      	b.n	800a426 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800a3f4:	4b89      	ldr	r3, [pc, #548]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a88      	ldr	r2, [pc, #544]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a3fa:	f023 0310 	bic.w	r3, r3, #16
 800a3fe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800a400:	f7f8 fc50 	bl	8002ca4 <HAL_GetTick>
 800a404:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a406:	e008      	b.n	800a41a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800a408:	f7f8 fc4c 	bl	8002ca4 <HAL_GetTick>
 800a40c:	4602      	mov	r2, r0
 800a40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	2b02      	cmp	r3, #2
 800a414:	d901      	bls.n	800a41a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800a416:	2303      	movs	r3, #3
 800a418:	e171      	b.n	800a6fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800a41a:	4b80      	ldr	r3, [pc, #512]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f003 0320 	and.w	r3, r3, #32
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1f0      	bne.n	800a408 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f000 8166 	beq.w	800a6fc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800a430:	2300      	movs	r3, #0
 800a432:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a436:	4b79      	ldr	r3, [pc, #484]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a438:	69db      	ldr	r3, [r3, #28]
 800a43a:	f003 030c 	and.w	r3, r3, #12
 800a43e:	2b0c      	cmp	r3, #12
 800a440:	f000 80f2 	beq.w	800a628 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a448:	2b02      	cmp	r3, #2
 800a44a:	f040 80c5 	bne.w	800a5d8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a44e:	4b73      	ldr	r3, [pc, #460]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a72      	ldr	r2, [pc, #456]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a454:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a458:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a45a:	f7f8 fc23 	bl	8002ca4 <HAL_GetTick>
 800a45e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a460:	e008      	b.n	800a474 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a462:	f7f8 fc1f 	bl	8002ca4 <HAL_GetTick>
 800a466:	4602      	mov	r2, r0
 800a468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d901      	bls.n	800a474 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800a470:	2303      	movs	r3, #3
 800a472:	e144      	b.n	800a6fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a474:	4b69      	ldr	r3, [pc, #420]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1f0      	bne.n	800a462 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a480:	4b66      	ldr	r3, [pc, #408]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a486:	f003 0304 	and.w	r3, r3, #4
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d111      	bne.n	800a4b2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800a48e:	4b63      	ldr	r3, [pc, #396]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a494:	4a61      	ldr	r2, [pc, #388]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a496:	f043 0304 	orr.w	r3, r3, #4
 800a49a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a49e:	4b5f      	ldr	r3, [pc, #380]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a4a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4a4:	f003 0304 	and.w	r3, r3, #4
 800a4a8:	60fb      	str	r3, [r7, #12]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800a4b2:	4b5b      	ldr	r3, [pc, #364]	@ (800a620 <HAL_RCC_OscConfig+0xccc>)
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a4ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a4be:	d102      	bne.n	800a4c6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a4c6:	4b56      	ldr	r3, [pc, #344]	@ (800a620 <HAL_RCC_OscConfig+0xccc>)
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	4a55      	ldr	r2, [pc, #340]	@ (800a620 <HAL_RCC_OscConfig+0xccc>)
 800a4cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a4d0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800a4d2:	4b52      	ldr	r3, [pc, #328]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a4d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a4da:	f023 0303 	bic.w	r3, r3, #3
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a4e6:	3a01      	subs	r2, #1
 800a4e8:	0212      	lsls	r2, r2, #8
 800a4ea:	4311      	orrs	r1, r2
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a4f0:	430a      	orrs	r2, r1
 800a4f2:	494a      	ldr	r1, [pc, #296]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	628b      	str	r3, [r1, #40]	@ 0x28
 800a4f8:	4b48      	ldr	r3, [pc, #288]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a4fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4fc:	4b49      	ldr	r3, [pc, #292]	@ (800a624 <HAL_RCC_OscConfig+0xcd0>)
 800a4fe:	4013      	ands	r3, r2
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a504:	3a01      	subs	r2, #1
 800a506:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a50e:	3a01      	subs	r2, #1
 800a510:	0252      	lsls	r2, r2, #9
 800a512:	b292      	uxth	r2, r2
 800a514:	4311      	orrs	r1, r2
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a51a:	3a01      	subs	r2, #1
 800a51c:	0412      	lsls	r2, r2, #16
 800a51e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a522:	4311      	orrs	r1, r2
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a528:	3a01      	subs	r2, #1
 800a52a:	0612      	lsls	r2, r2, #24
 800a52c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a530:	430a      	orrs	r2, r1
 800a532:	493a      	ldr	r1, [pc, #232]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a534:	4313      	orrs	r3, r2
 800a536:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a538:	4b38      	ldr	r3, [pc, #224]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a53a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a53c:	4a37      	ldr	r2, [pc, #220]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a53e:	f023 0310 	bic.w	r3, r3, #16
 800a542:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a548:	4a34      	ldr	r2, [pc, #208]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a54a:	00db      	lsls	r3, r3, #3
 800a54c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a54e:	4b33      	ldr	r3, [pc, #204]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a552:	4a32      	ldr	r2, [pc, #200]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a554:	f043 0310 	orr.w	r3, r3, #16
 800a558:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800a55a:	4b30      	ldr	r3, [pc, #192]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a55c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a55e:	f023 020c 	bic.w	r2, r3, #12
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a566:	492d      	ldr	r1, [pc, #180]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a568:	4313      	orrs	r3, r2
 800a56a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800a56c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a570:	2b01      	cmp	r3, #1
 800a572:	d105      	bne.n	800a580 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800a574:	4b2a      	ldr	r3, [pc, #168]	@ (800a620 <HAL_RCC_OscConfig+0xccc>)
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	4a29      	ldr	r2, [pc, #164]	@ (800a620 <HAL_RCC_OscConfig+0xccc>)
 800a57a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a57e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800a580:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800a584:	2b01      	cmp	r3, #1
 800a586:	d107      	bne.n	800a598 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800a588:	4b24      	ldr	r3, [pc, #144]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a58a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a58e:	4a23      	ldr	r2, [pc, #140]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a590:	f023 0304 	bic.w	r3, r3, #4
 800a594:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800a598:	4b20      	ldr	r3, [pc, #128]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a1f      	ldr	r2, [pc, #124]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a59e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a5a2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a5a4:	f7f8 fb7e 	bl	8002ca4 <HAL_GetTick>
 800a5a8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a5aa:	e008      	b.n	800a5be <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5ac:	f7f8 fb7a 	bl	8002ca4 <HAL_GetTick>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	d901      	bls.n	800a5be <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800a5ba:	2303      	movs	r3, #3
 800a5bc:	e09f      	b.n	800a6fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a5be:	4b17      	ldr	r3, [pc, #92]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d0f0      	beq.n	800a5ac <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a5ca:	4b14      	ldr	r3, [pc, #80]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a5cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ce:	4a13      	ldr	r2, [pc, #76]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a5d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a5d4:	6293      	str	r3, [r2, #40]	@ 0x28
 800a5d6:	e091      	b.n	800a6fc <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800a5d8:	4b10      	ldr	r3, [pc, #64]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a0f      	ldr	r2, [pc, #60]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a5de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a5e2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800a5e4:	f7f8 fb5e 	bl	8002ca4 <HAL_GetTick>
 800a5e8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a5ea:	e008      	b.n	800a5fe <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5ec:	f7f8 fb5a 	bl	8002ca4 <HAL_GetTick>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d901      	bls.n	800a5fe <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800a5fa:	2303      	movs	r3, #3
 800a5fc:	e07f      	b.n	800a6fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800a5fe:	4b07      	ldr	r3, [pc, #28]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1f0      	bne.n	800a5ec <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800a60a:	4b04      	ldr	r3, [pc, #16]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a60c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a60e:	4a03      	ldr	r2, [pc, #12]	@ (800a61c <HAL_RCC_OscConfig+0xcc8>)
 800a610:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a614:	f023 0303 	bic.w	r3, r3, #3
 800a618:	6293      	str	r3, [r2, #40]	@ 0x28
 800a61a:	e06f      	b.n	800a6fc <HAL_RCC_OscConfig+0xda8>
 800a61c:	46020c00 	.word	0x46020c00
 800a620:	46020800 	.word	0x46020800
 800a624:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800a628:	4b37      	ldr	r3, [pc, #220]	@ (800a708 <HAL_RCC_OscConfig+0xdb4>)
 800a62a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a62c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a62e:	4b36      	ldr	r3, [pc, #216]	@ (800a708 <HAL_RCC_OscConfig+0xdb4>)
 800a630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a632:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d039      	beq.n	800a6b0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	f003 0203 	and.w	r2, r3, #3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a646:	429a      	cmp	r2, r3
 800a648:	d132      	bne.n	800a6b0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	0a1b      	lsrs	r3, r3, #8
 800a64e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a656:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800a658:	429a      	cmp	r2, r3
 800a65a:	d129      	bne.n	800a6b0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800a666:	429a      	cmp	r2, r3
 800a668:	d122      	bne.n	800a6b0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a674:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800a676:	429a      	cmp	r2, r3
 800a678:	d11a      	bne.n	800a6b0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	0a5b      	lsrs	r3, r3, #9
 800a67e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a686:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a688:	429a      	cmp	r2, r3
 800a68a:	d111      	bne.n	800a6b0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	0c1b      	lsrs	r3, r3, #16
 800a690:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a698:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d108      	bne.n	800a6b0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	0e1b      	lsrs	r3, r3, #24
 800a6a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6aa:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d001      	beq.n	800a6b4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e024      	b.n	800a6fe <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a6b4:	4b14      	ldr	r3, [pc, #80]	@ (800a708 <HAL_RCC_OscConfig+0xdb4>)
 800a6b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b8:	08db      	lsrs	r3, r3, #3
 800a6ba:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d01a      	beq.n	800a6fc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800a6c6:	4b10      	ldr	r3, [pc, #64]	@ (800a708 <HAL_RCC_OscConfig+0xdb4>)
 800a6c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ca:	4a0f      	ldr	r2, [pc, #60]	@ (800a708 <HAL_RCC_OscConfig+0xdb4>)
 800a6cc:	f023 0310 	bic.w	r3, r3, #16
 800a6d0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6d2:	f7f8 fae7 	bl	8002ca4 <HAL_GetTick>
 800a6d6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800a6d8:	bf00      	nop
 800a6da:	f7f8 fae3 	bl	8002ca4 <HAL_GetTick>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d0f9      	beq.n	800a6da <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6ea:	4a07      	ldr	r2, [pc, #28]	@ (800a708 <HAL_RCC_OscConfig+0xdb4>)
 800a6ec:	00db      	lsls	r3, r3, #3
 800a6ee:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800a6f0:	4b05      	ldr	r3, [pc, #20]	@ (800a708 <HAL_RCC_OscConfig+0xdb4>)
 800a6f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6f4:	4a04      	ldr	r2, [pc, #16]	@ (800a708 <HAL_RCC_OscConfig+0xdb4>)
 800a6f6:	f043 0310 	orr.w	r3, r3, #16
 800a6fa:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3738      	adds	r7, #56	@ 0x38
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	46020c00 	.word	0x46020c00

0800a70c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b086      	sub	sp, #24
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d101      	bne.n	800a720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	e1d9      	b.n	800aad4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a720:	4b9b      	ldr	r3, [pc, #620]	@ (800a990 <HAL_RCC_ClockConfig+0x284>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 030f 	and.w	r3, r3, #15
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d910      	bls.n	800a750 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a72e:	4b98      	ldr	r3, [pc, #608]	@ (800a990 <HAL_RCC_ClockConfig+0x284>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f023 020f 	bic.w	r2, r3, #15
 800a736:	4996      	ldr	r1, [pc, #600]	@ (800a990 <HAL_RCC_ClockConfig+0x284>)
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	4313      	orrs	r3, r2
 800a73c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a73e:	4b94      	ldr	r3, [pc, #592]	@ (800a990 <HAL_RCC_ClockConfig+0x284>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f003 030f 	and.w	r3, r3, #15
 800a746:	683a      	ldr	r2, [r7, #0]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d001      	beq.n	800a750 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a74c:	2301      	movs	r3, #1
 800a74e:	e1c1      	b.n	800aad4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f003 0310 	and.w	r3, r3, #16
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d010      	beq.n	800a77e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	695a      	ldr	r2, [r3, #20]
 800a760:	4b8c      	ldr	r3, [pc, #560]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a764:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a768:	429a      	cmp	r2, r3
 800a76a:	d908      	bls.n	800a77e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800a76c:	4b89      	ldr	r3, [pc, #548]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a76e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a770:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	695b      	ldr	r3, [r3, #20]
 800a778:	4986      	ldr	r1, [pc, #536]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a77a:	4313      	orrs	r3, r2
 800a77c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f003 0308 	and.w	r3, r3, #8
 800a786:	2b00      	cmp	r3, #0
 800a788:	d012      	beq.n	800a7b0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	691a      	ldr	r2, [r3, #16]
 800a78e:	4b81      	ldr	r3, [pc, #516]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a790:	6a1b      	ldr	r3, [r3, #32]
 800a792:	091b      	lsrs	r3, r3, #4
 800a794:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a798:	429a      	cmp	r2, r3
 800a79a:	d909      	bls.n	800a7b0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800a79c:	4b7d      	ldr	r3, [pc, #500]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a79e:	6a1b      	ldr	r3, [r3, #32]
 800a7a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	691b      	ldr	r3, [r3, #16]
 800a7a8:	011b      	lsls	r3, r3, #4
 800a7aa:	497a      	ldr	r1, [pc, #488]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 0304 	and.w	r3, r3, #4
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d010      	beq.n	800a7de <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	68da      	ldr	r2, [r3, #12]
 800a7c0:	4b74      	ldr	r3, [pc, #464]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a7c2:	6a1b      	ldr	r3, [r3, #32]
 800a7c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d908      	bls.n	800a7de <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800a7cc:	4b71      	ldr	r3, [pc, #452]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a7ce:	6a1b      	ldr	r3, [r3, #32]
 800a7d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	496e      	ldr	r1, [pc, #440]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 0302 	and.w	r3, r3, #2
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d010      	beq.n	800a80c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	689a      	ldr	r2, [r3, #8]
 800a7ee:	4b69      	ldr	r3, [pc, #420]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a7f0:	6a1b      	ldr	r3, [r3, #32]
 800a7f2:	f003 030f 	and.w	r3, r3, #15
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d908      	bls.n	800a80c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a7fa:	4b66      	ldr	r3, [pc, #408]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a7fc:	6a1b      	ldr	r3, [r3, #32]
 800a7fe:	f023 020f 	bic.w	r2, r3, #15
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	4963      	ldr	r1, [pc, #396]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a808:	4313      	orrs	r3, r2
 800a80a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 0301 	and.w	r3, r3, #1
 800a814:	2b00      	cmp	r3, #0
 800a816:	f000 80d2 	beq.w	800a9be <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800a81a:	2300      	movs	r3, #0
 800a81c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	2b03      	cmp	r3, #3
 800a824:	d143      	bne.n	800a8ae <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a826:	4b5b      	ldr	r3, [pc, #364]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a828:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a82c:	f003 0304 	and.w	r3, r3, #4
 800a830:	2b00      	cmp	r3, #0
 800a832:	d110      	bne.n	800a856 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a834:	4b57      	ldr	r3, [pc, #348]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a836:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a83a:	4a56      	ldr	r2, [pc, #344]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a83c:	f043 0304 	orr.w	r3, r3, #4
 800a840:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800a844:	4b53      	ldr	r3, [pc, #332]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a84a:	f003 0304 	and.w	r3, r3, #4
 800a84e:	60bb      	str	r3, [r7, #8]
 800a850:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800a852:	2301      	movs	r3, #1
 800a854:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800a856:	f7f8 fa25 	bl	8002ca4 <HAL_GetTick>
 800a85a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800a85c:	4b4e      	ldr	r3, [pc, #312]	@ (800a998 <HAL_RCC_ClockConfig+0x28c>)
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00f      	beq.n	800a888 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a868:	e008      	b.n	800a87c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800a86a:	f7f8 fa1b 	bl	8002ca4 <HAL_GetTick>
 800a86e:	4602      	mov	r2, r0
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	2b02      	cmp	r3, #2
 800a876:	d901      	bls.n	800a87c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800a878:	2303      	movs	r3, #3
 800a87a:	e12b      	b.n	800aad4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800a87c:	4b46      	ldr	r3, [pc, #280]	@ (800a998 <HAL_RCC_ClockConfig+0x28c>)
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a884:	2b00      	cmp	r3, #0
 800a886:	d0f0      	beq.n	800a86a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a888:	7dfb      	ldrb	r3, [r7, #23]
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d107      	bne.n	800a89e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a88e:	4b41      	ldr	r3, [pc, #260]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a894:	4a3f      	ldr	r2, [pc, #252]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a896:	f023 0304 	bic.w	r3, r3, #4
 800a89a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a89e:	4b3d      	ldr	r3, [pc, #244]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d121      	bne.n	800a8ee <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e112      	b.n	800aad4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d107      	bne.n	800a8c6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a8b6:	4b37      	ldr	r3, [pc, #220]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d115      	bne.n	800a8ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e106      	b.n	800aad4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d107      	bne.n	800a8de <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800a8ce:	4b31      	ldr	r3, [pc, #196]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f003 0304 	and.w	r3, r3, #4
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d109      	bne.n	800a8ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e0fa      	b.n	800aad4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a8de:	4b2d      	ldr	r3, [pc, #180]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d101      	bne.n	800a8ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e0f2      	b.n	800aad4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800a8ee:	4b29      	ldr	r3, [pc, #164]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a8f0:	69db      	ldr	r3, [r3, #28]
 800a8f2:	f023 0203 	bic.w	r2, r3, #3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	4926      	ldr	r1, [pc, #152]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800a900:	f7f8 f9d0 	bl	8002ca4 <HAL_GetTick>
 800a904:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	2b03      	cmp	r3, #3
 800a90c:	d112      	bne.n	800a934 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a90e:	e00a      	b.n	800a926 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a910:	f7f8 f9c8 	bl	8002ca4 <HAL_GetTick>
 800a914:	4602      	mov	r2, r0
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	1ad3      	subs	r3, r2, r3
 800a91a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a91e:	4293      	cmp	r3, r2
 800a920:	d901      	bls.n	800a926 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800a922:	2303      	movs	r3, #3
 800a924:	e0d6      	b.n	800aad4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a926:	4b1b      	ldr	r3, [pc, #108]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a928:	69db      	ldr	r3, [r3, #28]
 800a92a:	f003 030c 	and.w	r3, r3, #12
 800a92e:	2b0c      	cmp	r3, #12
 800a930:	d1ee      	bne.n	800a910 <HAL_RCC_ClockConfig+0x204>
 800a932:	e044      	b.n	800a9be <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d112      	bne.n	800a962 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a93c:	e00a      	b.n	800a954 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a93e:	f7f8 f9b1 	bl	8002ca4 <HAL_GetTick>
 800a942:	4602      	mov	r2, r0
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d901      	bls.n	800a954 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a950:	2303      	movs	r3, #3
 800a952:	e0bf      	b.n	800aad4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a954:	4b0f      	ldr	r3, [pc, #60]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a956:	69db      	ldr	r3, [r3, #28]
 800a958:	f003 030c 	and.w	r3, r3, #12
 800a95c:	2b08      	cmp	r3, #8
 800a95e:	d1ee      	bne.n	800a93e <HAL_RCC_ClockConfig+0x232>
 800a960:	e02d      	b.n	800a9be <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d123      	bne.n	800a9b2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a96a:	e00a      	b.n	800a982 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a96c:	f7f8 f99a 	bl	8002ca4 <HAL_GetTick>
 800a970:	4602      	mov	r2, r0
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	1ad3      	subs	r3, r2, r3
 800a976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d901      	bls.n	800a982 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800a97e:	2303      	movs	r3, #3
 800a980:	e0a8      	b.n	800aad4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a982:	4b04      	ldr	r3, [pc, #16]	@ (800a994 <HAL_RCC_ClockConfig+0x288>)
 800a984:	69db      	ldr	r3, [r3, #28]
 800a986:	f003 030c 	and.w	r3, r3, #12
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d1ee      	bne.n	800a96c <HAL_RCC_ClockConfig+0x260>
 800a98e:	e016      	b.n	800a9be <HAL_RCC_ClockConfig+0x2b2>
 800a990:	40022000 	.word	0x40022000
 800a994:	46020c00 	.word	0x46020c00
 800a998:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a99c:	f7f8 f982 	bl	8002ca4 <HAL_GetTick>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d901      	bls.n	800a9b2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800a9ae:	2303      	movs	r3, #3
 800a9b0:	e090      	b.n	800aad4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a9b2:	4b4a      	ldr	r3, [pc, #296]	@ (800aadc <HAL_RCC_ClockConfig+0x3d0>)
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	f003 030c 	and.w	r3, r3, #12
 800a9ba:	2b04      	cmp	r3, #4
 800a9bc:	d1ee      	bne.n	800a99c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 0302 	and.w	r3, r3, #2
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d010      	beq.n	800a9ec <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	689a      	ldr	r2, [r3, #8]
 800a9ce:	4b43      	ldr	r3, [pc, #268]	@ (800aadc <HAL_RCC_ClockConfig+0x3d0>)
 800a9d0:	6a1b      	ldr	r3, [r3, #32]
 800a9d2:	f003 030f 	and.w	r3, r3, #15
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d208      	bcs.n	800a9ec <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800a9da:	4b40      	ldr	r3, [pc, #256]	@ (800aadc <HAL_RCC_ClockConfig+0x3d0>)
 800a9dc:	6a1b      	ldr	r3, [r3, #32]
 800a9de:	f023 020f 	bic.w	r2, r3, #15
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	493d      	ldr	r1, [pc, #244]	@ (800aadc <HAL_RCC_ClockConfig+0x3d0>)
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a9ec:	4b3c      	ldr	r3, [pc, #240]	@ (800aae0 <HAL_RCC_ClockConfig+0x3d4>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 030f 	and.w	r3, r3, #15
 800a9f4:	683a      	ldr	r2, [r7, #0]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d210      	bcs.n	800aa1c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9fa:	4b39      	ldr	r3, [pc, #228]	@ (800aae0 <HAL_RCC_ClockConfig+0x3d4>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f023 020f 	bic.w	r2, r3, #15
 800aa02:	4937      	ldr	r1, [pc, #220]	@ (800aae0 <HAL_RCC_ClockConfig+0x3d4>)
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa0a:	4b35      	ldr	r3, [pc, #212]	@ (800aae0 <HAL_RCC_ClockConfig+0x3d4>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f003 030f 	and.w	r3, r3, #15
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d001      	beq.n	800aa1c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e05b      	b.n	800aad4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 0304 	and.w	r3, r3, #4
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d010      	beq.n	800aa4a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	68da      	ldr	r2, [r3, #12]
 800aa2c:	4b2b      	ldr	r3, [pc, #172]	@ (800aadc <HAL_RCC_ClockConfig+0x3d0>)
 800aa2e:	6a1b      	ldr	r3, [r3, #32]
 800aa30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d208      	bcs.n	800aa4a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800aa38:	4b28      	ldr	r3, [pc, #160]	@ (800aadc <HAL_RCC_ClockConfig+0x3d0>)
 800aa3a:	6a1b      	ldr	r3, [r3, #32]
 800aa3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	4925      	ldr	r1, [pc, #148]	@ (800aadc <HAL_RCC_ClockConfig+0x3d0>)
 800aa46:	4313      	orrs	r3, r2
 800aa48:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 0308 	and.w	r3, r3, #8
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d012      	beq.n	800aa7c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	691a      	ldr	r2, [r3, #16]
 800aa5a:	4b20      	ldr	r3, [pc, #128]	@ (800aadc <HAL_RCC_ClockConfig+0x3d0>)
 800aa5c:	6a1b      	ldr	r3, [r3, #32]
 800aa5e:	091b      	lsrs	r3, r3, #4
 800aa60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d209      	bcs.n	800aa7c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800aa68:	4b1c      	ldr	r3, [pc, #112]	@ (800aadc <HAL_RCC_ClockConfig+0x3d0>)
 800aa6a:	6a1b      	ldr	r3, [r3, #32]
 800aa6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	011b      	lsls	r3, r3, #4
 800aa76:	4919      	ldr	r1, [pc, #100]	@ (800aadc <HAL_RCC_ClockConfig+0x3d0>)
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 0310 	and.w	r3, r3, #16
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d010      	beq.n	800aaaa <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	695a      	ldr	r2, [r3, #20]
 800aa8c:	4b13      	ldr	r3, [pc, #76]	@ (800aadc <HAL_RCC_ClockConfig+0x3d0>)
 800aa8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d208      	bcs.n	800aaaa <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800aa98:	4b10      	ldr	r3, [pc, #64]	@ (800aadc <HAL_RCC_ClockConfig+0x3d0>)
 800aa9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	695b      	ldr	r3, [r3, #20]
 800aaa4:	490d      	ldr	r1, [pc, #52]	@ (800aadc <HAL_RCC_ClockConfig+0x3d0>)
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800aaaa:	f000 f821 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800aaae:	4602      	mov	r2, r0
 800aab0:	4b0a      	ldr	r3, [pc, #40]	@ (800aadc <HAL_RCC_ClockConfig+0x3d0>)
 800aab2:	6a1b      	ldr	r3, [r3, #32]
 800aab4:	f003 030f 	and.w	r3, r3, #15
 800aab8:	490a      	ldr	r1, [pc, #40]	@ (800aae4 <HAL_RCC_ClockConfig+0x3d8>)
 800aaba:	5ccb      	ldrb	r3, [r1, r3]
 800aabc:	fa22 f303 	lsr.w	r3, r2, r3
 800aac0:	4a09      	ldr	r2, [pc, #36]	@ (800aae8 <HAL_RCC_ClockConfig+0x3dc>)
 800aac2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800aac4:	4b09      	ldr	r3, [pc, #36]	@ (800aaec <HAL_RCC_ClockConfig+0x3e0>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7f8 f861 	bl	8002b90 <HAL_InitTick>
 800aace:	4603      	mov	r3, r0
 800aad0:	73fb      	strb	r3, [r7, #15]

  return status;
 800aad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3718      	adds	r7, #24
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	46020c00 	.word	0x46020c00
 800aae0:	40022000 	.word	0x40022000
 800aae4:	08011928 	.word	0x08011928
 800aae8:	20000030 	.word	0x20000030
 800aaec:	20000034 	.word	0x20000034

0800aaf0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b08b      	sub	sp, #44	@ 0x2c
 800aaf4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800aafa:	2300      	movs	r3, #0
 800aafc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aafe:	4b78      	ldr	r3, [pc, #480]	@ (800ace0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab00:	69db      	ldr	r3, [r3, #28]
 800ab02:	f003 030c 	and.w	r3, r3, #12
 800ab06:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ab08:	4b75      	ldr	r3, [pc, #468]	@ (800ace0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab0c:	f003 0303 	and.w	r3, r3, #3
 800ab10:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d005      	beq.n	800ab24 <HAL_RCC_GetSysClockFreq+0x34>
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	2b0c      	cmp	r3, #12
 800ab1c:	d121      	bne.n	800ab62 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d11e      	bne.n	800ab62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800ab24:	4b6e      	ldr	r3, [pc, #440]	@ (800ace0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d107      	bne.n	800ab40 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800ab30:	4b6b      	ldr	r3, [pc, #428]	@ (800ace0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ab36:	0b1b      	lsrs	r3, r3, #12
 800ab38:	f003 030f 	and.w	r3, r3, #15
 800ab3c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab3e:	e005      	b.n	800ab4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800ab40:	4b67      	ldr	r3, [pc, #412]	@ (800ace0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	0f1b      	lsrs	r3, r3, #28
 800ab46:	f003 030f 	and.w	r3, r3, #15
 800ab4a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ab4c:	4a65      	ldr	r2, [pc, #404]	@ (800ace4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab54:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d110      	bne.n	800ab7e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab5e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ab60:	e00d      	b.n	800ab7e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ab62:	4b5f      	ldr	r3, [pc, #380]	@ (800ace0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab64:	69db      	ldr	r3, [r3, #28]
 800ab66:	f003 030c 	and.w	r3, r3, #12
 800ab6a:	2b04      	cmp	r3, #4
 800ab6c:	d102      	bne.n	800ab74 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ab6e:	4b5e      	ldr	r3, [pc, #376]	@ (800ace8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800ab70:	623b      	str	r3, [r7, #32]
 800ab72:	e004      	b.n	800ab7e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	2b08      	cmp	r3, #8
 800ab78:	d101      	bne.n	800ab7e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ab7a:	4b5b      	ldr	r3, [pc, #364]	@ (800ace8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800ab7c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	2b0c      	cmp	r3, #12
 800ab82:	f040 80a5 	bne.w	800acd0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800ab86:	4b56      	ldr	r3, [pc, #344]	@ (800ace0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab8a:	f003 0303 	and.w	r3, r3, #3
 800ab8e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800ab90:	4b53      	ldr	r3, [pc, #332]	@ (800ace0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ab92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab94:	0a1b      	lsrs	r3, r3, #8
 800ab96:	f003 030f 	and.w	r3, r3, #15
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800ab9e:	4b50      	ldr	r3, [pc, #320]	@ (800ace0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aba2:	091b      	lsrs	r3, r3, #4
 800aba4:	f003 0301 	and.w	r3, r3, #1
 800aba8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800abaa:	4b4d      	ldr	r3, [pc, #308]	@ (800ace0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800abac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abae:	08db      	lsrs	r3, r3, #3
 800abb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abb4:	68ba      	ldr	r2, [r7, #8]
 800abb6:	fb02 f303 	mul.w	r3, r2, r3
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	2b02      	cmp	r3, #2
 800abca:	d003      	beq.n	800abd4 <HAL_RCC_GetSysClockFreq+0xe4>
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	2b03      	cmp	r3, #3
 800abd0:	d022      	beq.n	800ac18 <HAL_RCC_GetSysClockFreq+0x128>
 800abd2:	e043      	b.n	800ac5c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	ee07 3a90 	vmov	s15, r3
 800abda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abde:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800acec <HAL_RCC_GetSysClockFreq+0x1fc>
 800abe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abe6:	4b3e      	ldr	r3, [pc, #248]	@ (800ace0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800abe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abee:	ee07 3a90 	vmov	s15, r3
 800abf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800abf6:	ed97 6a01 	vldr	s12, [r7, #4]
 800abfa:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800acf0 <HAL_RCC_GetSysClockFreq+0x200>
 800abfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac02:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac16:	e046      	b.n	800aca6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	ee07 3a90 	vmov	s15, r3
 800ac1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac22:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800acec <HAL_RCC_GetSysClockFreq+0x1fc>
 800ac26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac2a:	4b2d      	ldr	r3, [pc, #180]	@ (800ace0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac32:	ee07 3a90 	vmov	s15, r3
 800ac36:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac3a:	ed97 6a01 	vldr	s12, [r7, #4]
 800ac3e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800acf0 <HAL_RCC_GetSysClockFreq+0x200>
 800ac42:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac46:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac5a:	e024      	b.n	800aca6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5e:	ee07 3a90 	vmov	s15, r3
 800ac62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	ee07 3a90 	vmov	s15, r3
 800ac6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac74:	4b1a      	ldr	r3, [pc, #104]	@ (800ace0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac7c:	ee07 3a90 	vmov	s15, r3
 800ac80:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac84:	ed97 6a01 	vldr	s12, [r7, #4]
 800ac88:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800acf0 <HAL_RCC_GetSysClockFreq+0x200>
 800ac8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac90:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800ac94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac98:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aca0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aca4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800aca6:	4b0e      	ldr	r3, [pc, #56]	@ (800ace0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800aca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acaa:	0e1b      	lsrs	r3, r3, #24
 800acac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acb0:	3301      	adds	r3, #1
 800acb2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	ee07 3a90 	vmov	s15, r3
 800acba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800acbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800acc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acca:	ee17 3a90 	vmov	r3, s15
 800acce:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800acd0:	6a3b      	ldr	r3, [r7, #32]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	372c      	adds	r7, #44	@ 0x2c
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	46020c00 	.word	0x46020c00
 800ace4:	08011940 	.word	0x08011940
 800ace8:	00f42400 	.word	0x00f42400
 800acec:	4b742400 	.word	0x4b742400
 800acf0:	46000000 	.word	0x46000000

0800acf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800acf8:	f7ff fefa 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800acfc:	4602      	mov	r2, r0
 800acfe:	4b07      	ldr	r3, [pc, #28]	@ (800ad1c <HAL_RCC_GetHCLKFreq+0x28>)
 800ad00:	6a1b      	ldr	r3, [r3, #32]
 800ad02:	f003 030f 	and.w	r3, r3, #15
 800ad06:	4906      	ldr	r1, [pc, #24]	@ (800ad20 <HAL_RCC_GetHCLKFreq+0x2c>)
 800ad08:	5ccb      	ldrb	r3, [r1, r3]
 800ad0a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad0e:	4a05      	ldr	r2, [pc, #20]	@ (800ad24 <HAL_RCC_GetHCLKFreq+0x30>)
 800ad10:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800ad12:	4b04      	ldr	r3, [pc, #16]	@ (800ad24 <HAL_RCC_GetHCLKFreq+0x30>)
 800ad14:	681b      	ldr	r3, [r3, #0]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	46020c00 	.word	0x46020c00
 800ad20:	08011928 	.word	0x08011928
 800ad24:	20000030 	.word	0x20000030

0800ad28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800ad2c:	f7ff ffe2 	bl	800acf4 <HAL_RCC_GetHCLKFreq>
 800ad30:	4602      	mov	r2, r0
 800ad32:	4b05      	ldr	r3, [pc, #20]	@ (800ad48 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ad34:	6a1b      	ldr	r3, [r3, #32]
 800ad36:	091b      	lsrs	r3, r3, #4
 800ad38:	f003 0307 	and.w	r3, r3, #7
 800ad3c:	4903      	ldr	r1, [pc, #12]	@ (800ad4c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad3e:	5ccb      	ldrb	r3, [r1, r3]
 800ad40:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	46020c00 	.word	0x46020c00
 800ad4c:	08011938 	.word	0x08011938

0800ad50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800ad54:	f7ff ffce 	bl	800acf4 <HAL_RCC_GetHCLKFreq>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	4b05      	ldr	r3, [pc, #20]	@ (800ad70 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ad5c:	6a1b      	ldr	r3, [r3, #32]
 800ad5e:	0a1b      	lsrs	r3, r3, #8
 800ad60:	f003 0307 	and.w	r3, r3, #7
 800ad64:	4903      	ldr	r1, [pc, #12]	@ (800ad74 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad66:	5ccb      	ldrb	r3, [r1, r3]
 800ad68:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	46020c00 	.word	0x46020c00
 800ad74:	08011938 	.word	0x08011938

0800ad78 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800ad7c:	f7ff ffba 	bl	800acf4 <HAL_RCC_GetHCLKFreq>
 800ad80:	4602      	mov	r2, r0
 800ad82:	4b05      	ldr	r3, [pc, #20]	@ (800ad98 <HAL_RCC_GetPCLK3Freq+0x20>)
 800ad84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad86:	091b      	lsrs	r3, r3, #4
 800ad88:	f003 0307 	and.w	r3, r3, #7
 800ad8c:	4903      	ldr	r1, [pc, #12]	@ (800ad9c <HAL_RCC_GetPCLK3Freq+0x24>)
 800ad8e:	5ccb      	ldrb	r3, [r1, r3]
 800ad90:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	46020c00 	.word	0x46020c00
 800ad9c:	08011938 	.word	0x08011938

0800ada0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ada8:	4b3e      	ldr	r3, [pc, #248]	@ (800aea4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800adaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800adae:	f003 0304 	and.w	r3, r3, #4
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d003      	beq.n	800adbe <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800adb6:	f7fe fd21 	bl	80097fc <HAL_PWREx_GetVoltageRange>
 800adba:	6178      	str	r0, [r7, #20]
 800adbc:	e019      	b.n	800adf2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800adbe:	4b39      	ldr	r3, [pc, #228]	@ (800aea4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800adc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800adc4:	4a37      	ldr	r2, [pc, #220]	@ (800aea4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800adc6:	f043 0304 	orr.w	r3, r3, #4
 800adca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800adce:	4b35      	ldr	r3, [pc, #212]	@ (800aea4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800add0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800add4:	f003 0304 	and.w	r3, r3, #4
 800add8:	60fb      	str	r3, [r7, #12]
 800adda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800addc:	f7fe fd0e 	bl	80097fc <HAL_PWREx_GetVoltageRange>
 800ade0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ade2:	4b30      	ldr	r3, [pc, #192]	@ (800aea4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800ade4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ade8:	4a2e      	ldr	r2, [pc, #184]	@ (800aea4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800adea:	f023 0304 	bic.w	r3, r3, #4
 800adee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800adf8:	d003      	beq.n	800ae02 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae00:	d109      	bne.n	800ae16 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae08:	d202      	bcs.n	800ae10 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800ae0e:	e033      	b.n	800ae78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800ae10:	2300      	movs	r3, #0
 800ae12:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800ae14:	e030      	b.n	800ae78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae1c:	d208      	bcs.n	800ae30 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae24:	d102      	bne.n	800ae2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800ae26:	2303      	movs	r3, #3
 800ae28:	613b      	str	r3, [r7, #16]
 800ae2a:	e025      	b.n	800ae78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	e035      	b.n	800ae9c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae36:	d90f      	bls.n	800ae58 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d109      	bne.n	800ae52 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae44:	d902      	bls.n	800ae4c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800ae46:	2300      	movs	r3, #0
 800ae48:	613b      	str	r3, [r7, #16]
 800ae4a:	e015      	b.n	800ae78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	613b      	str	r3, [r7, #16]
 800ae50:	e012      	b.n	800ae78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800ae52:	2300      	movs	r3, #0
 800ae54:	613b      	str	r3, [r7, #16]
 800ae56:	e00f      	b.n	800ae78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae5e:	d109      	bne.n	800ae74 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae66:	d102      	bne.n	800ae6e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800ae68:	2301      	movs	r3, #1
 800ae6a:	613b      	str	r3, [r7, #16]
 800ae6c:	e004      	b.n	800ae78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800ae6e:	2302      	movs	r3, #2
 800ae70:	613b      	str	r3, [r7, #16]
 800ae72:	e001      	b.n	800ae78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800ae74:	2301      	movs	r3, #1
 800ae76:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ae78:	4b0b      	ldr	r3, [pc, #44]	@ (800aea8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f023 020f 	bic.w	r2, r3, #15
 800ae80:	4909      	ldr	r1, [pc, #36]	@ (800aea8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800ae88:	4b07      	ldr	r3, [pc, #28]	@ (800aea8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f003 030f 	and.w	r3, r3, #15
 800ae90:	693a      	ldr	r2, [r7, #16]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d001      	beq.n	800ae9a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	e000      	b.n	800ae9c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3718      	adds	r7, #24
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	46020c00 	.word	0x46020c00
 800aea8:	40022000 	.word	0x40022000

0800aeac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800aeac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aeb0:	b0c8      	sub	sp, #288	@ 0x120
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aeb8:	2300      	movs	r3, #0
 800aeba:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aebe:	2300      	movs	r3, #0
 800aec0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aecc:	f002 0401 	and.w	r4, r2, #1
 800aed0:	2500      	movs	r5, #0
 800aed2:	ea54 0305 	orrs.w	r3, r4, r5
 800aed6:	d00b      	beq.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800aed8:	4bd5      	ldr	r3, [pc, #852]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aeda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aede:	f023 0103 	bic.w	r1, r3, #3
 800aee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aee8:	4ad1      	ldr	r2, [pc, #836]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800aeea:	430b      	orrs	r3, r1
 800aeec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef8:	f002 0802 	and.w	r8, r2, #2
 800aefc:	f04f 0900 	mov.w	r9, #0
 800af00:	ea58 0309 	orrs.w	r3, r8, r9
 800af04:	d00b      	beq.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800af06:	4bca      	ldr	r3, [pc, #808]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af0c:	f023 010c 	bic.w	r1, r3, #12
 800af10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af16:	4ac6      	ldr	r2, [pc, #792]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af18:	430b      	orrs	r3, r1
 800af1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800af1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af26:	f002 0a04 	and.w	sl, r2, #4
 800af2a:	f04f 0b00 	mov.w	fp, #0
 800af2e:	ea5a 030b 	orrs.w	r3, sl, fp
 800af32:	d00b      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800af34:	4bbe      	ldr	r3, [pc, #760]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af3a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800af3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af44:	4aba      	ldr	r2, [pc, #744]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af46:	430b      	orrs	r3, r1
 800af48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800af4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af54:	f002 0308 	and.w	r3, r2, #8
 800af58:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800af5c:	2300      	movs	r3, #0
 800af5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800af62:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800af66:	460b      	mov	r3, r1
 800af68:	4313      	orrs	r3, r2
 800af6a:	d00b      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800af6c:	4bb0      	ldr	r3, [pc, #704]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800af76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af7c:	4aac      	ldr	r2, [pc, #688]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800af7e:	430b      	orrs	r3, r1
 800af80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800af84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8c:	f002 0310 	and.w	r3, r2, #16
 800af90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800af94:	2300      	movs	r3, #0
 800af96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800af9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800af9e:	460b      	mov	r3, r1
 800afa0:	4313      	orrs	r3, r2
 800afa2:	d00b      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800afa4:	4ba2      	ldr	r3, [pc, #648]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afaa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800afae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afb4:	4a9e      	ldr	r2, [pc, #632]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afb6:	430b      	orrs	r3, r1
 800afb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800afbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800afc8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800afcc:	2300      	movs	r3, #0
 800afce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800afd2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800afd6:	460b      	mov	r3, r1
 800afd8:	4313      	orrs	r3, r2
 800afda:	d00b      	beq.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800afdc:	4b94      	ldr	r3, [pc, #592]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afde:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800afe2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800afe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afec:	4a90      	ldr	r2, [pc, #576]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800afee:	430b      	orrs	r3, r1
 800aff0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	f002 0320 	and.w	r3, r2, #32
 800b000:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b004:	2300      	movs	r3, #0
 800b006:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b00a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b00e:	460b      	mov	r3, r1
 800b010:	4313      	orrs	r3, r2
 800b012:	d00b      	beq.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800b014:	4b86      	ldr	r3, [pc, #536]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b016:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b01a:	f023 0107 	bic.w	r1, r3, #7
 800b01e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b022:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b024:	4a82      	ldr	r2, [pc, #520]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b026:	430b      	orrs	r3, r1
 800b028:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b02c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b034:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b038:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b03c:	2300      	movs	r3, #0
 800b03e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b042:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b046:	460b      	mov	r3, r1
 800b048:	4313      	orrs	r3, r2
 800b04a:	d00b      	beq.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800b04c:	4b78      	ldr	r3, [pc, #480]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b04e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b052:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b05a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b05c:	4a74      	ldr	r2, [pc, #464]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b05e:	430b      	orrs	r3, r1
 800b060:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b064:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b070:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b074:	2300      	movs	r3, #0
 800b076:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b07a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b07e:	460b      	mov	r3, r1
 800b080:	4313      	orrs	r3, r2
 800b082:	d00b      	beq.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800b084:	4b6a      	ldr	r3, [pc, #424]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b08a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b08e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b094:	4a66      	ldr	r2, [pc, #408]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b096:	430b      	orrs	r3, r1
 800b098:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b09c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800b0a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b0b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	d00b      	beq.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800b0bc:	4b5c      	ldr	r3, [pc, #368]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b0c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b0c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0cc:	4a58      	ldr	r2, [pc, #352]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0ce:	430b      	orrs	r3, r1
 800b0d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b0d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0dc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b0e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b0ea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	d00b      	beq.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800b0f4:	4b4e      	ldr	r3, [pc, #312]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b0f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b0fa:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800b0fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b102:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b104:	4a4a      	ldr	r2, [pc, #296]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b106:	430b      	orrs	r3, r1
 800b108:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800b10c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b114:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b118:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b11c:	2300      	movs	r3, #0
 800b11e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b122:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b126:	460b      	mov	r3, r1
 800b128:	4313      	orrs	r3, r2
 800b12a:	d00b      	beq.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800b12c:	4b40      	ldr	r3, [pc, #256]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b12e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b132:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800b136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b13a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b13c:	4a3c      	ldr	r2, [pc, #240]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b13e:	430b      	orrs	r3, r1
 800b140:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800b144:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b150:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b154:	2300      	movs	r3, #0
 800b156:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b15a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b15e:	460b      	mov	r3, r1
 800b160:	4313      	orrs	r3, r2
 800b162:	d00c      	beq.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800b164:	4b32      	ldr	r3, [pc, #200]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b166:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b16a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b16e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b176:	4a2e      	ldr	r2, [pc, #184]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b178:	430b      	orrs	r3, r1
 800b17a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b17e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b186:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800b18a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b18e:	2300      	movs	r3, #0
 800b190:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b194:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b198:	460b      	mov	r3, r1
 800b19a:	4313      	orrs	r3, r2
 800b19c:	d00c      	beq.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800b19e:	4b24      	ldr	r3, [pc, #144]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b1a4:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800b1a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1b0:	4a1f      	ldr	r2, [pc, #124]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1b2:	430b      	orrs	r3, r1
 800b1b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b1b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b1c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b1ce:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	d00c      	beq.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800b1d8:	4b15      	ldr	r3, [pc, #84]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b1de:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800b1e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1ea:	4a11      	ldr	r2, [pc, #68]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b1ec:	430b      	orrs	r3, r1
 800b1ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800b1f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b1fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b202:	2300      	movs	r3, #0
 800b204:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b208:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b20c:	460b      	mov	r3, r1
 800b20e:	4313      	orrs	r3, r2
 800b210:	d010      	beq.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800b212:	4b07      	ldr	r3, [pc, #28]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b218:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b21c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b224:	4a02      	ldr	r2, [pc, #8]	@ (800b230 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800b226:	430b      	orrs	r3, r1
 800b228:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b22c:	e002      	b.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800b22e:	bf00      	nop
 800b230:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b234:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b240:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b244:	2300      	movs	r3, #0
 800b246:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b24a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b24e:	460b      	mov	r3, r1
 800b250:	4313      	orrs	r3, r2
 800b252:	d04c      	beq.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800b254:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b258:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b25c:	2b80      	cmp	r3, #128	@ 0x80
 800b25e:	d02d      	beq.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b260:	2b80      	cmp	r3, #128	@ 0x80
 800b262:	d827      	bhi.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b264:	2b60      	cmp	r3, #96	@ 0x60
 800b266:	d02b      	beq.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800b268:	2b60      	cmp	r3, #96	@ 0x60
 800b26a:	d823      	bhi.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b26c:	2b40      	cmp	r3, #64	@ 0x40
 800b26e:	d006      	beq.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800b270:	2b40      	cmp	r3, #64	@ 0x40
 800b272:	d81f      	bhi.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b274:	2b00      	cmp	r3, #0
 800b276:	d009      	beq.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b278:	2b20      	cmp	r3, #32
 800b27a:	d011      	beq.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b27c:	e01a      	b.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b27e:	4bc0      	ldr	r3, [pc, #768]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b282:	4abf      	ldr	r2, [pc, #764]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b288:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b28a:	e01a      	b.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b28c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b290:	3308      	adds	r3, #8
 800b292:	4618      	mov	r0, r3
 800b294:	f002 fcd6 	bl	800dc44 <RCCEx_PLL2_Config>
 800b298:	4603      	mov	r3, r0
 800b29a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b29e:	e010      	b.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b2a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2a4:	332c      	adds	r3, #44	@ 0x2c
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f002 fd64 	bl	800dd74 <RCCEx_PLL3_Config>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b2b2:	e006      	b.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b2ba:	e002      	b.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b2bc:	bf00      	nop
 800b2be:	e000      	b.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800b2c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2c2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10d      	bne.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800b2ca:	4bad      	ldr	r3, [pc, #692]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b2cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b2d0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800b2d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b2dc:	4aa8      	ldr	r2, [pc, #672]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b2de:	430b      	orrs	r3, r1
 800b2e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b2e4:	e003      	b.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2e6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b2ea:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b2ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b2fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b2fe:	2300      	movs	r3, #0
 800b300:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b304:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b308:	460b      	mov	r3, r1
 800b30a:	4313      	orrs	r3, r2
 800b30c:	d053      	beq.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800b30e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b312:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b31a:	d033      	beq.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800b31c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b320:	d82c      	bhi.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b322:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b326:	d02f      	beq.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800b328:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b32c:	d826      	bhi.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b32e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b332:	d008      	beq.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800b334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b338:	d820      	bhi.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d00a      	beq.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b33e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b342:	d011      	beq.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b344:	e01a      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b346:	4b8e      	ldr	r3, [pc, #568]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b34a:	4a8d      	ldr	r2, [pc, #564]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b34c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b350:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b352:	e01a      	b.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b358:	3308      	adds	r3, #8
 800b35a:	4618      	mov	r0, r3
 800b35c:	f002 fc72 	bl	800dc44 <RCCEx_PLL2_Config>
 800b360:	4603      	mov	r3, r0
 800b362:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b366:	e010      	b.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b368:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b36c:	332c      	adds	r3, #44	@ 0x2c
 800b36e:	4618      	mov	r0, r3
 800b370:	f002 fd00 	bl	800dd74 <RCCEx_PLL3_Config>
 800b374:	4603      	mov	r3, r0
 800b376:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b37a:	e006      	b.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b37c:	2301      	movs	r3, #1
 800b37e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b382:	e002      	b.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b384:	bf00      	nop
 800b386:	e000      	b.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800b388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b38a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d10d      	bne.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800b392:	4b7b      	ldr	r3, [pc, #492]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b394:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b398:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800b39c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b3a4:	4a76      	ldr	r2, [pc, #472]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b3a6:	430b      	orrs	r3, r1
 800b3a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b3ac:	e003      	b.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3ae:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b3b2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800b3b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3be:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b3c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b3cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	d046      	beq.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800b3d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b3de:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b3e2:	d028      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b3e4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b3e8:	d821      	bhi.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b3ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b3ee:	d022      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b3f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b3f4:	d81b      	bhi.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b3f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b3fa:	d01c      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b3fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b400:	d815      	bhi.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b406:	d008      	beq.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800b408:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b40c:	d80f      	bhi.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d011      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b416:	d00e      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800b418:	e009      	b.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b41a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b41e:	3308      	adds	r3, #8
 800b420:	4618      	mov	r0, r3
 800b422:	f002 fc0f 	bl	800dc44 <RCCEx_PLL2_Config>
 800b426:	4603      	mov	r3, r0
 800b428:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b42c:	e004      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b434:	e000      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800b436:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b438:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d10d      	bne.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800b440:	4b4f      	ldr	r3, [pc, #316]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b442:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b446:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b44a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b44e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b452:	4a4b      	ldr	r2, [pc, #300]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b454:	430b      	orrs	r3, r1
 800b456:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b45a:	e003      	b.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b45c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b460:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800b464:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b470:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b474:	2300      	movs	r3, #0
 800b476:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b47a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b47e:	460b      	mov	r3, r1
 800b480:	4313      	orrs	r3, r2
 800b482:	d03f      	beq.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800b484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b488:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b48c:	2b04      	cmp	r3, #4
 800b48e:	d81e      	bhi.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x622>
 800b490:	a201      	add	r2, pc, #4	@ (adr r2, 800b498 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800b492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b496:	bf00      	nop
 800b498:	0800b4d7 	.word	0x0800b4d7
 800b49c:	0800b4ad 	.word	0x0800b4ad
 800b4a0:	0800b4bb 	.word	0x0800b4bb
 800b4a4:	0800b4d7 	.word	0x0800b4d7
 800b4a8:	0800b4d7 	.word	0x0800b4d7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b4ac:	4b34      	ldr	r3, [pc, #208]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4b0:	4a33      	ldr	r2, [pc, #204]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b4b6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b4b8:	e00e      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b4ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4be:	332c      	adds	r3, #44	@ 0x2c
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f002 fc57 	bl	800dd74 <RCCEx_PLL3_Config>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b4cc:	e004      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b4d4:	e000      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800b4d6:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b4d8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10d      	bne.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800b4e0:	4b27      	ldr	r3, [pc, #156]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b4e6:	f023 0107 	bic.w	r1, r3, #7
 800b4ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b4f2:	4a23      	ldr	r2, [pc, #140]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b4f4:	430b      	orrs	r3, r1
 800b4f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b4fa:	e003      	b.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4fc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b500:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800b504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b510:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b512:	2300      	movs	r3, #0
 800b514:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b516:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b51a:	460b      	mov	r3, r1
 800b51c:	4313      	orrs	r3, r2
 800b51e:	d04c      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800b520:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b524:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b528:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b52c:	d02a      	beq.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800b52e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b532:	d821      	bhi.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b534:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b538:	d026      	beq.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800b53a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b53e:	d81b      	bhi.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b540:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b544:	d00e      	beq.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800b546:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b54a:	d815      	bhi.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d01d      	beq.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800b550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b554:	d110      	bne.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b556:	4b0a      	ldr	r3, [pc, #40]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b55a:	4a09      	ldr	r2, [pc, #36]	@ (800b580 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b55c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b560:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b562:	e014      	b.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b564:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b568:	332c      	adds	r3, #44	@ 0x2c
 800b56a:	4618      	mov	r0, r3
 800b56c:	f002 fc02 	bl	800dd74 <RCCEx_PLL3_Config>
 800b570:	4603      	mov	r3, r0
 800b572:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b576:	e00a      	b.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b578:	2301      	movs	r3, #1
 800b57a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b57e:	e006      	b.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800b580:	46020c00 	.word	0x46020c00
        break;
 800b584:	bf00      	nop
 800b586:	e002      	b.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b588:	bf00      	nop
 800b58a:	e000      	b.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800b58c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b58e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10d      	bne.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800b596:	4baf      	ldr	r3, [pc, #700]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b598:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b59c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b5a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b5a8:	4aaa      	ldr	r2, [pc, #680]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5aa:	430b      	orrs	r3, r1
 800b5ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b5b0:	e003      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5b2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b5b6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b5ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b5c6:	673b      	str	r3, [r7, #112]	@ 0x70
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	677b      	str	r3, [r7, #116]	@ 0x74
 800b5cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	f000 80b5 	beq.w	800b742 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b5de:	4b9d      	ldr	r3, [pc, #628]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5e4:	f003 0304 	and.w	r3, r3, #4
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d113      	bne.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b5ec:	4b99      	ldr	r3, [pc, #612]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5f2:	4a98      	ldr	r2, [pc, #608]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5f4:	f043 0304 	orr.w	r3, r3, #4
 800b5f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800b5fc:	4b95      	ldr	r3, [pc, #596]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b5fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b602:	f003 0304 	and.w	r3, r3, #4
 800b606:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800b60a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800b60e:	2301      	movs	r3, #1
 800b610:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800b614:	4b90      	ldr	r3, [pc, #576]	@ (800b858 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b618:	4a8f      	ldr	r2, [pc, #572]	@ (800b858 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b61a:	f043 0301 	orr.w	r3, r3, #1
 800b61e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b620:	f7f7 fb40 	bl	8002ca4 <HAL_GetTick>
 800b624:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b628:	e00b      	b.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b62a:	f7f7 fb3b 	bl	8002ca4 <HAL_GetTick>
 800b62e:	4602      	mov	r2, r0
 800b630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b634:	1ad3      	subs	r3, r2, r3
 800b636:	2b02      	cmp	r3, #2
 800b638:	d903      	bls.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800b63a:	2303      	movs	r3, #3
 800b63c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b640:	e005      	b.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800b642:	4b85      	ldr	r3, [pc, #532]	@ (800b858 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b646:	f003 0301 	and.w	r3, r3, #1
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d0ed      	beq.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800b64e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b652:	2b00      	cmp	r3, #0
 800b654:	d165      	bne.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b656:	4b7f      	ldr	r3, [pc, #508]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b65c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b660:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800b664:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d023      	beq.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800b66c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b670:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800b674:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b678:	4293      	cmp	r3, r2
 800b67a:	d01b      	beq.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b67c:	4b75      	ldr	r3, [pc, #468]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b67e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b686:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b68a:	4b72      	ldr	r3, [pc, #456]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b68c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b690:	4a70      	ldr	r2, [pc, #448]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b696:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b69a:	4b6e      	ldr	r3, [pc, #440]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b69c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6a0:	4a6c      	ldr	r2, [pc, #432]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b6a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b6aa:	4a6a      	ldr	r2, [pc, #424]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b6b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b6b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b6b8:	f003 0301 	and.w	r3, r3, #1
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d019      	beq.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6c0:	f7f7 faf0 	bl	8002ca4 <HAL_GetTick>
 800b6c4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b6c8:	e00d      	b.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6ca:	f7f7 faeb 	bl	8002ca4 <HAL_GetTick>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6d4:	1ad2      	subs	r2, r2, r3
 800b6d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d903      	bls.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800b6de:	2303      	movs	r3, #3
 800b6e0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 800b6e4:	e006      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b6e6:	4b5b      	ldr	r3, [pc, #364]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6ec:	f003 0302 	and.w	r3, r3, #2
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d0ea      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800b6f4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10d      	bne.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800b6fc:	4b55      	ldr	r3, [pc, #340]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b702:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b706:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b70a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b70e:	4a51      	ldr	r2, [pc, #324]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b710:	430b      	orrs	r3, r1
 800b712:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b716:	e008      	b.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b718:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b71c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800b720:	e003      	b.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b722:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b726:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b72a:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d107      	bne.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b732:	4b48      	ldr	r3, [pc, #288]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b734:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b738:	4a46      	ldr	r2, [pc, #280]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b73a:	f023 0304 	bic.w	r3, r3, #4
 800b73e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800b742:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b74e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b750:	2300      	movs	r3, #0
 800b752:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b754:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b758:	460b      	mov	r3, r1
 800b75a:	4313      	orrs	r3, r2
 800b75c:	d042      	beq.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800b75e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b762:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b766:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b76a:	d022      	beq.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800b76c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b770:	d81b      	bhi.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b772:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b776:	d011      	beq.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800b778:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b77c:	d815      	bhi.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d019      	beq.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800b782:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b786:	d110      	bne.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b788:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b78c:	3308      	adds	r3, #8
 800b78e:	4618      	mov	r0, r3
 800b790:	f002 fa58 	bl	800dc44 <RCCEx_PLL2_Config>
 800b794:	4603      	mov	r3, r0
 800b796:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b79a:	e00d      	b.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b79c:	4b2d      	ldr	r3, [pc, #180]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b79e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7a0:	4a2c      	ldr	r2, [pc, #176]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7a6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800b7a8:	e006      	b.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b7b0:	e002      	b.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b7b2:	bf00      	nop
 800b7b4:	e000      	b.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800b7b6:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b7b8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d10d      	bne.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800b7c0:	4b24      	ldr	r3, [pc, #144]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7c6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b7ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b7d2:	4a20      	ldr	r2, [pc, #128]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7d4:	430b      	orrs	r3, r1
 800b7d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b7da:	e003      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7dc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b7e0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b7e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b7f0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	667b      	str	r3, [r7, #100]	@ 0x64
 800b7f6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	d031      	beq.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800b800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b804:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b808:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b80c:	d00b      	beq.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800b80e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b812:	d804      	bhi.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x972>
 800b814:	2b00      	cmp	r3, #0
 800b816:	d008      	beq.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800b818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b81c:	d007      	beq.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800b81e:	2301      	movs	r3, #1
 800b820:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800b824:	e004      	b.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b826:	bf00      	nop
 800b828:	e002      	b.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b82a:	bf00      	nop
 800b82c:	e000      	b.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800b82e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800b830:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b834:	2b00      	cmp	r3, #0
 800b836:	d111      	bne.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b838:	4b06      	ldr	r3, [pc, #24]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b83a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b83e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b842:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b846:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b84a:	4a02      	ldr	r2, [pc, #8]	@ (800b854 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b84c:	430b      	orrs	r3, r1
 800b84e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b852:	e007      	b.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800b854:	46020c00 	.word	0x46020c00
 800b858:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b85c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b860:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800b864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b870:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b872:	2300      	movs	r3, #0
 800b874:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b876:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b87a:	460b      	mov	r3, r1
 800b87c:	4313      	orrs	r3, r2
 800b87e:	d00c      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800b880:	4bb2      	ldr	r3, [pc, #712]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b882:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b886:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800b88a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b88e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b892:	4aae      	ldr	r2, [pc, #696]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b894:	430b      	orrs	r3, r1
 800b896:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800b89a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b8a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	657b      	str	r3, [r7, #84]	@ 0x54
 800b8ac:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	d019      	beq.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800b8b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b8be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b8c2:	d105      	bne.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b8c4:	4ba1      	ldr	r3, [pc, #644]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8c8:	4aa0      	ldr	r2, [pc, #640]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b8ce:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800b8d0:	4b9e      	ldr	r3, [pc, #632]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b8d6:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b8da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b8e2:	4a9a      	ldr	r2, [pc, #616]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b8e4:	430b      	orrs	r3, r1
 800b8e6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b8ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b8f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b900:	460b      	mov	r3, r1
 800b902:	4313      	orrs	r3, r2
 800b904:	d00c      	beq.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b906:	4b91      	ldr	r3, [pc, #580]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b90c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b910:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b914:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b918:	4a8c      	ldr	r2, [pc, #560]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b91a:	430b      	orrs	r3, r1
 800b91c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800b920:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b928:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b92c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b92e:	2300      	movs	r3, #0
 800b930:	647b      	str	r3, [r7, #68]	@ 0x44
 800b932:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b936:	460b      	mov	r3, r1
 800b938:	4313      	orrs	r3, r2
 800b93a:	d00c      	beq.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800b93c:	4b83      	ldr	r3, [pc, #524]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b93e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b942:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b946:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b94a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b94e:	4a7f      	ldr	r2, [pc, #508]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b950:	430b      	orrs	r3, r1
 800b952:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800b956:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b962:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b964:	2300      	movs	r3, #0
 800b966:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b968:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b96c:	460b      	mov	r3, r1
 800b96e:	4313      	orrs	r3, r2
 800b970:	d00c      	beq.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800b972:	4b76      	ldr	r3, [pc, #472]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b974:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b978:	f023 0118 	bic.w	r1, r3, #24
 800b97c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b980:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b984:	4a71      	ldr	r2, [pc, #452]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b986:	430b      	orrs	r3, r1
 800b988:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b98c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b994:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800b998:	633b      	str	r3, [r7, #48]	@ 0x30
 800b99a:	2300      	movs	r3, #0
 800b99c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b99e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	d032      	beq.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800b9a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b9b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b9b4:	d105      	bne.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9b6:	4b65      	ldr	r3, [pc, #404]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9ba:	4a64      	ldr	r2, [pc, #400]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9c0:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800b9c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b9ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b9ce:	d108      	bne.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b9d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9d4:	3308      	adds	r3, #8
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f002 f934 	bl	800dc44 <RCCEx_PLL2_Config>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800b9e2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d10d      	bne.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800b9ea:	4b58      	ldr	r3, [pc, #352]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b9f0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b9f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b9fc:	4a53      	ldr	r2, [pc, #332]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b9fe:	430b      	orrs	r3, r1
 800ba00:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ba04:	e003      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba06:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba0a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800ba0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba16:	2100      	movs	r1, #0
 800ba18:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ba1a:	f003 0301 	and.w	r3, r3, #1
 800ba1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba20:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ba24:	460b      	mov	r3, r1
 800ba26:	4313      	orrs	r3, r2
 800ba28:	d04a      	beq.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800ba2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba2e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ba32:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ba36:	d01e      	beq.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800ba38:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ba3c:	d825      	bhi.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800ba3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ba42:	d00e      	beq.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800ba44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ba48:	d81f      	bhi.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d021      	beq.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800ba4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba52:	d11a      	bne.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba54:	4b3d      	ldr	r3, [pc, #244]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba58:	4a3c      	ldr	r2, [pc, #240]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba5e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800ba60:	e018      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ba62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba66:	3308      	adds	r3, #8
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f002 f8eb 	bl	800dc44 <RCCEx_PLL2_Config>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800ba74:	e00e      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ba76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba7a:	332c      	adds	r3, #44	@ 0x2c
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f002 f979 	bl	800dd74 <RCCEx_PLL3_Config>
 800ba82:	4603      	mov	r3, r0
 800ba84:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800ba88:	e004      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800ba90:	e000      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800ba92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba94:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d10d      	bne.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800ba9c:	4b2b      	ldr	r3, [pc, #172]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ba9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800baa2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800baa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baaa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800baae:	4927      	ldr	r1, [pc, #156]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bab0:	4313      	orrs	r3, r2
 800bab2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bab6:	e003      	b.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bab8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800babc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800bac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800bacc:	623b      	str	r3, [r7, #32]
 800bace:	2300      	movs	r3, #0
 800bad0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bad2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bad6:	460b      	mov	r3, r1
 800bad8:	4313      	orrs	r3, r2
 800bada:	d03d      	beq.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800badc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bae4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bae8:	d00e      	beq.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800baea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800baee:	d815      	bhi.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d017      	beq.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800baf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800baf8:	d110      	bne.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bafa:	4b14      	ldr	r3, [pc, #80]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bafc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bafe:	4a13      	ldr	r2, [pc, #76]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb04:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800bb06:	e00e      	b.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bb08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb0c:	3308      	adds	r3, #8
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f002 f898 	bl	800dc44 <RCCEx_PLL2_Config>
 800bb14:	4603      	mov	r3, r0
 800bb16:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800bb1a:	e004      	b.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bb22:	e000      	b.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bb24:	bf00      	nop
    }
    if (ret == HAL_OK)
 800bb26:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d110      	bne.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800bb2e:	4b07      	ldr	r3, [pc, #28]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb34:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800bb38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb40:	4902      	ldr	r1, [pc, #8]	@ (800bb4c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bb42:	4313      	orrs	r3, r2
 800bb44:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800bb48:	e006      	b.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800bb4a:	bf00      	nop
 800bb4c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb50:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bb54:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800bb58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb60:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800bb64:	61bb      	str	r3, [r7, #24]
 800bb66:	2300      	movs	r3, #0
 800bb68:	61fb      	str	r3, [r7, #28]
 800bb6a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bb6e:	460b      	mov	r3, r1
 800bb70:	4313      	orrs	r3, r2
 800bb72:	d00c      	beq.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800bb74:	4b68      	ldr	r3, [pc, #416]	@ (800bd18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bb76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bb7a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bb7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb82:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800bb86:	4964      	ldr	r1, [pc, #400]	@ (800bd18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bb8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb96:	2100      	movs	r1, #0
 800bb98:	6139      	str	r1, [r7, #16]
 800bb9a:	f003 0302 	and.w	r3, r3, #2
 800bb9e:	617b      	str	r3, [r7, #20]
 800bba0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bba4:	460b      	mov	r3, r1
 800bba6:	4313      	orrs	r3, r2
 800bba8:	d036      	beq.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800bbaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00c      	beq.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800bbb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bbba:	d113      	bne.n	800bbe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bbbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbc0:	3308      	adds	r3, #8
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f002 f83e 	bl	800dc44 <RCCEx_PLL2_Config>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800bbce:	e00d      	b.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bbd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbd4:	332c      	adds	r3, #44	@ 0x2c
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f002 f8cc 	bl	800dd74 <RCCEx_PLL3_Config>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800bbe2:	e003      	b.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bbea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbec:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d10d      	bne.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800bbf4:	4b48      	ldr	r3, [pc, #288]	@ (800bd18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bbf6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bbfa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800bbfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc02:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bc06:	4944      	ldr	r1, [pc, #272]	@ (800bd18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bc0e:	e003      	b.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc10:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc14:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800bc18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc20:	2100      	movs	r1, #0
 800bc22:	60b9      	str	r1, [r7, #8]
 800bc24:	f003 0304 	and.w	r3, r3, #4
 800bc28:	60fb      	str	r3, [r7, #12]
 800bc2a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bc2e:	460b      	mov	r3, r1
 800bc30:	4313      	orrs	r3, r2
 800bc32:	d024      	beq.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800bc34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d108      	bne.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bc40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc44:	332c      	adds	r3, #44	@ 0x2c
 800bc46:	4618      	mov	r0, r3
 800bc48:	f002 f894 	bl	800dd74 <RCCEx_PLL3_Config>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800bc52:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d10d      	bne.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800bc5a:	4b2f      	ldr	r3, [pc, #188]	@ (800bd18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bc60:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800bc64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc6c:	492a      	ldr	r1, [pc, #168]	@ (800bd18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bc74:	e003      	b.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc76:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bc7a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800bc7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc86:	2100      	movs	r1, #0
 800bc88:	6039      	str	r1, [r7, #0]
 800bc8a:	f003 0308 	and.w	r3, r3, #8
 800bc8e:	607b      	str	r3, [r7, #4]
 800bc90:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bc94:	460b      	mov	r3, r1
 800bc96:	4313      	orrs	r3, r2
 800bc98:	d036      	beq.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800bc9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc9e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bca2:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bca6:	d00d      	beq.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800bca8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800bcac:	d811      	bhi.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800bcae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bcb2:	d012      	beq.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800bcb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bcb8:	d80b      	bhi.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00d      	beq.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800bcbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcc2:	d106      	bne.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bcc4:	4b14      	ldr	r3, [pc, #80]	@ (800bd18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bcc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcc8:	4a13      	ldr	r2, [pc, #76]	@ (800bd18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bcca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bcce:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800bcd0:	e004      	b.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800bcd8:	e000      	b.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800bcda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcdc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10d      	bne.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800bce4:	4b0c      	ldr	r3, [pc, #48]	@ (800bd18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bce6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bcea:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800bcee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcf2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bcf6:	4908      	ldr	r1, [pc, #32]	@ (800bd18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bcfe:	e003      	b.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd00:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800bd04:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800bd08:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800bd12:	46bd      	mov	sp, r7
 800bd14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd18:	46020c00 	.word	0x46020c00

0800bd1c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b089      	sub	sp, #36	@ 0x24
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800bd24:	4ba6      	ldr	r3, [pc, #664]	@ (800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd2c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800bd2e:	4ba4      	ldr	r3, [pc, #656]	@ (800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd32:	f003 0303 	and.w	r3, r3, #3
 800bd36:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800bd38:	4ba1      	ldr	r3, [pc, #644]	@ (800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd3c:	0a1b      	lsrs	r3, r3, #8
 800bd3e:	f003 030f 	and.w	r3, r3, #15
 800bd42:	3301      	adds	r3, #1
 800bd44:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800bd46:	4b9e      	ldr	r3, [pc, #632]	@ (800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd4a:	091b      	lsrs	r3, r3, #4
 800bd4c:	f003 0301 	and.w	r3, r3, #1
 800bd50:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800bd52:	4b9b      	ldr	r3, [pc, #620]	@ (800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd56:	08db      	lsrs	r3, r3, #3
 800bd58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	fb02 f303 	mul.w	r3, r2, r3
 800bd62:	ee07 3a90 	vmov	s15, r3
 800bd66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd6a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	2b03      	cmp	r3, #3
 800bd72:	d062      	beq.n	800be3a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	2b03      	cmp	r3, #3
 800bd78:	f200 8081 	bhi.w	800be7e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d024      	beq.n	800bdcc <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	2b02      	cmp	r3, #2
 800bd86:	d17a      	bne.n	800be7e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	ee07 3a90 	vmov	s15, r3
 800bd8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd92:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800bfc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800bd96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd9a:	4b89      	ldr	r3, [pc, #548]	@ (800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bd9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bda2:	ee07 3a90 	vmov	s15, r3
 800bda6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdaa:	ed97 6a02 	vldr	s12, [r7, #8]
 800bdae:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800bfc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bdb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bdb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800bdc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdca:	e08f      	b.n	800beec <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bdcc:	4b7c      	ldr	r3, [pc, #496]	@ (800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d005      	beq.n	800bde4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800bdd8:	4b79      	ldr	r3, [pc, #484]	@ (800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	0f1b      	lsrs	r3, r3, #28
 800bdde:	f003 030f 	and.w	r3, r3, #15
 800bde2:	e006      	b.n	800bdf2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800bde4:	4b76      	ldr	r3, [pc, #472]	@ (800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bde6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bdea:	041b      	lsls	r3, r3, #16
 800bdec:	0f1b      	lsrs	r3, r3, #28
 800bdee:	f003 030f 	and.w	r3, r3, #15
 800bdf2:	4a76      	ldr	r2, [pc, #472]	@ (800bfcc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800bdf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdf8:	ee07 3a90 	vmov	s15, r3
 800bdfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	ee07 3a90 	vmov	s15, r3
 800be06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	ee07 3a90 	vmov	s15, r3
 800be14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be18:	ed97 6a02 	vldr	s12, [r7, #8]
 800be1c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800bfc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800be20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800be30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be38:	e058      	b.n	800beec <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	ee07 3a90 	vmov	s15, r3
 800be40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be44:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bfc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800be48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be4c:	4b5c      	ldr	r3, [pc, #368]	@ (800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be54:	ee07 3a90 	vmov	s15, r3
 800be58:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800be5c:	ed97 6a02 	vldr	s12, [r7, #8]
 800be60:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bfc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800be64:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800be68:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800be6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be70:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800be74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be7c:	e036      	b.n	800beec <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800be7e:	4b50      	ldr	r3, [pc, #320]	@ (800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be86:	2b00      	cmp	r3, #0
 800be88:	d005      	beq.n	800be96 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800be8a:	4b4d      	ldr	r3, [pc, #308]	@ (800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	0f1b      	lsrs	r3, r3, #28
 800be90:	f003 030f 	and.w	r3, r3, #15
 800be94:	e006      	b.n	800bea4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800be96:	4b4a      	ldr	r3, [pc, #296]	@ (800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800be98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800be9c:	041b      	lsls	r3, r3, #16
 800be9e:	0f1b      	lsrs	r3, r3, #28
 800bea0:	f003 030f 	and.w	r3, r3, #15
 800bea4:	4a49      	ldr	r2, [pc, #292]	@ (800bfcc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800bea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800beaa:	ee07 3a90 	vmov	s15, r3
 800beae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	ee07 3a90 	vmov	s15, r3
 800beb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	ee07 3a90 	vmov	s15, r3
 800bec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beca:	ed97 6a02 	vldr	s12, [r7, #8]
 800bece:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800bfc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800bed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bede:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800bee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bee6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800beea:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800beec:	4b34      	ldr	r3, [pc, #208]	@ (800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800beee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d017      	beq.n	800bf28 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bef8:	4b31      	ldr	r3, [pc, #196]	@ (800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800befa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800befc:	0a5b      	lsrs	r3, r3, #9
 800befe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf02:	ee07 3a90 	vmov	s15, r3
 800bf06:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800bf0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf0e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf12:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf1e:	ee17 2a90 	vmov	r2, s15
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	601a      	str	r2, [r3, #0]
 800bf26:	e002      	b.n	800bf2e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800bf2e:	4b24      	ldr	r3, [pc, #144]	@ (800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d017      	beq.n	800bf6a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf3a:	4b21      	ldr	r3, [pc, #132]	@ (800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf3e:	0c1b      	lsrs	r3, r3, #16
 800bf40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf44:	ee07 3a90 	vmov	s15, r3
 800bf48:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800bf4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf50:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf54:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf60:	ee17 2a90 	vmov	r2, s15
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	605a      	str	r2, [r3, #4]
 800bf68:	e002      	b.n	800bf70 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800bf70:	4b13      	ldr	r3, [pc, #76]	@ (800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d017      	beq.n	800bfac <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf7c:	4b10      	ldr	r3, [pc, #64]	@ (800bfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800bf7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf80:	0e1b      	lsrs	r3, r3, #24
 800bf82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf86:	ee07 3a90 	vmov	s15, r3
 800bf8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800bf8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf92:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf96:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfa2:	ee17 2a90 	vmov	r2, s15
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bfaa:	e002      	b.n	800bfb2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	609a      	str	r2, [r3, #8]
}
 800bfb2:	bf00      	nop
 800bfb4:	3724      	adds	r7, #36	@ 0x24
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	46020c00 	.word	0x46020c00
 800bfc4:	4b742400 	.word	0x4b742400
 800bfc8:	46000000 	.word	0x46000000
 800bfcc:	08011940 	.word	0x08011940

0800bfd0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b089      	sub	sp, #36	@ 0x24
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800bfd8:	4ba6      	ldr	r3, [pc, #664]	@ (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bfda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfe0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800bfe2:	4ba4      	ldr	r3, [pc, #656]	@ (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bfe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfe6:	f003 0303 	and.w	r3, r3, #3
 800bfea:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800bfec:	4ba1      	ldr	r3, [pc, #644]	@ (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bfee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bff0:	0a1b      	lsrs	r3, r3, #8
 800bff2:	f003 030f 	and.w	r3, r3, #15
 800bff6:	3301      	adds	r3, #1
 800bff8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800bffa:	4b9e      	ldr	r3, [pc, #632]	@ (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800bffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bffe:	091b      	lsrs	r3, r3, #4
 800c000:	f003 0301 	and.w	r3, r3, #1
 800c004:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800c006:	4b9b      	ldr	r3, [pc, #620]	@ (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c00a:	08db      	lsrs	r3, r3, #3
 800c00c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c010:	68fa      	ldr	r2, [r7, #12]
 800c012:	fb02 f303 	mul.w	r3, r2, r3
 800c016:	ee07 3a90 	vmov	s15, r3
 800c01a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c01e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	2b03      	cmp	r3, #3
 800c026:	d062      	beq.n	800c0ee <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	2b03      	cmp	r3, #3
 800c02c:	f200 8081 	bhi.w	800c132 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	2b01      	cmp	r3, #1
 800c034:	d024      	beq.n	800c080 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	2b02      	cmp	r3, #2
 800c03a:	d17a      	bne.n	800c132 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	ee07 3a90 	vmov	s15, r3
 800c042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c046:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c04a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c04e:	4b89      	ldr	r3, [pc, #548]	@ (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c056:	ee07 3a90 	vmov	s15, r3
 800c05a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c05e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c062:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c27c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c066:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c06a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c06e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c072:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c07a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c07e:	e08f      	b.n	800c1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c080:	4b7c      	ldr	r3, [pc, #496]	@ (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d005      	beq.n	800c098 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800c08c:	4b79      	ldr	r3, [pc, #484]	@ (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	0f1b      	lsrs	r3, r3, #28
 800c092:	f003 030f 	and.w	r3, r3, #15
 800c096:	e006      	b.n	800c0a6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800c098:	4b76      	ldr	r3, [pc, #472]	@ (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c09a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c09e:	041b      	lsls	r3, r3, #16
 800c0a0:	0f1b      	lsrs	r3, r3, #28
 800c0a2:	f003 030f 	and.w	r3, r3, #15
 800c0a6:	4a76      	ldr	r2, [pc, #472]	@ (800c280 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c0a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0ac:	ee07 3a90 	vmov	s15, r3
 800c0b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	ee07 3a90 	vmov	s15, r3
 800c0ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	ee07 3a90 	vmov	s15, r3
 800c0c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0cc:	ed97 6a02 	vldr	s12, [r7, #8]
 800c0d0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c27c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c0d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800c0e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0ec:	e058      	b.n	800c1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	ee07 3a90 	vmov	s15, r3
 800c0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0f8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800c0fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c100:	4b5c      	ldr	r3, [pc, #368]	@ (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c108:	ee07 3a90 	vmov	s15, r3
 800c10c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c110:	ed97 6a02 	vldr	s12, [r7, #8]
 800c114:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c27c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c118:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c11c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800c120:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c124:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800c128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c12c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c130:	e036      	b.n	800c1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c132:	4b50      	ldr	r3, [pc, #320]	@ (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d005      	beq.n	800c14a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800c13e:	4b4d      	ldr	r3, [pc, #308]	@ (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	0f1b      	lsrs	r3, r3, #28
 800c144:	f003 030f 	and.w	r3, r3, #15
 800c148:	e006      	b.n	800c158 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800c14a:	4b4a      	ldr	r3, [pc, #296]	@ (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c14c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c150:	041b      	lsls	r3, r3, #16
 800c152:	0f1b      	lsrs	r3, r3, #28
 800c154:	f003 030f 	and.w	r3, r3, #15
 800c158:	4a49      	ldr	r2, [pc, #292]	@ (800c280 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800c15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c15e:	ee07 3a90 	vmov	s15, r3
 800c162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	ee07 3a90 	vmov	s15, r3
 800c16c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c170:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	ee07 3a90 	vmov	s15, r3
 800c17a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c17e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c182:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c27c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800c186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c18a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c18e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c192:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800c196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c19a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c19e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800c1a0:	4b34      	ldr	r3, [pc, #208]	@ (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c1a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d017      	beq.n	800c1dc <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c1ac:	4b31      	ldr	r3, [pc, #196]	@ (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c1ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1b0:	0a5b      	lsrs	r3, r3, #9
 800c1b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1b6:	ee07 3a90 	vmov	s15, r3
 800c1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800c1be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1c2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c1c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1d2:	ee17 2a90 	vmov	r2, s15
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	601a      	str	r2, [r3, #0]
 800c1da:	e002      	b.n	800c1e2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800c1e2:	4b24      	ldr	r3, [pc, #144]	@ (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c1e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d017      	beq.n	800c21e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c1ee:	4b21      	ldr	r3, [pc, #132]	@ (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c1f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1f2:	0c1b      	lsrs	r3, r3, #16
 800c1f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1f8:	ee07 3a90 	vmov	s15, r3
 800c1fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800c200:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c204:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c208:	edd7 6a07 	vldr	s13, [r7, #28]
 800c20c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c214:	ee17 2a90 	vmov	r2, s15
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	605a      	str	r2, [r3, #4]
 800c21c:	e002      	b.n	800c224 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800c224:	4b13      	ldr	r3, [pc, #76]	@ (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c228:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d017      	beq.n	800c260 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c230:	4b10      	ldr	r3, [pc, #64]	@ (800c274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800c232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c234:	0e1b      	lsrs	r3, r3, #24
 800c236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c23a:	ee07 3a90 	vmov	s15, r3
 800c23e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800c242:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c246:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c24a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c24e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c256:	ee17 2a90 	vmov	r2, s15
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c25e:	e002      	b.n	800c266 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	609a      	str	r2, [r3, #8]
}
 800c266:	bf00      	nop
 800c268:	3724      	adds	r7, #36	@ 0x24
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	46020c00 	.word	0x46020c00
 800c278:	4b742400 	.word	0x4b742400
 800c27c:	46000000 	.word	0x46000000
 800c280:	08011940 	.word	0x08011940

0800c284 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c284:	b480      	push	{r7}
 800c286:	b089      	sub	sp, #36	@ 0x24
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800c28c:	4ba6      	ldr	r3, [pc, #664]	@ (800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c28e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c294:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800c296:	4ba4      	ldr	r3, [pc, #656]	@ (800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c29a:	f003 0303 	and.w	r3, r3, #3
 800c29e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800c2a0:	4ba1      	ldr	r3, [pc, #644]	@ (800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2a4:	0a1b      	lsrs	r3, r3, #8
 800c2a6:	f003 030f 	and.w	r3, r3, #15
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800c2ae:	4b9e      	ldr	r3, [pc, #632]	@ (800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2b2:	091b      	lsrs	r3, r3, #4
 800c2b4:	f003 0301 	and.w	r3, r3, #1
 800c2b8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800c2ba:	4b9b      	ldr	r3, [pc, #620]	@ (800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c2bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2be:	08db      	lsrs	r3, r3, #3
 800c2c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2c4:	68fa      	ldr	r2, [r7, #12]
 800c2c6:	fb02 f303 	mul.w	r3, r2, r3
 800c2ca:	ee07 3a90 	vmov	s15, r3
 800c2ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2d2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	2b03      	cmp	r3, #3
 800c2da:	d062      	beq.n	800c3a2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	2b03      	cmp	r3, #3
 800c2e0:	f200 8081 	bhi.w	800c3e6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d024      	beq.n	800c334 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	d17a      	bne.n	800c3e6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	ee07 3a90 	vmov	s15, r3
 800c2f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2fa:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c2fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c302:	4b89      	ldr	r3, [pc, #548]	@ (800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c30a:	ee07 3a90 	vmov	s15, r3
 800c30e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c312:	ed97 6a02 	vldr	s12, [r7, #8]
 800c316:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800c530 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c31a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c31e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c326:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c32a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c32e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800c332:	e08f      	b.n	800c454 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c334:	4b7c      	ldr	r3, [pc, #496]	@ (800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d005      	beq.n	800c34c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800c340:	4b79      	ldr	r3, [pc, #484]	@ (800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	0f1b      	lsrs	r3, r3, #28
 800c346:	f003 030f 	and.w	r3, r3, #15
 800c34a:	e006      	b.n	800c35a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800c34c:	4b76      	ldr	r3, [pc, #472]	@ (800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c34e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c352:	041b      	lsls	r3, r3, #16
 800c354:	0f1b      	lsrs	r3, r3, #28
 800c356:	f003 030f 	and.w	r3, r3, #15
 800c35a:	4a76      	ldr	r2, [pc, #472]	@ (800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c35c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c360:	ee07 3a90 	vmov	s15, r3
 800c364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	ee07 3a90 	vmov	s15, r3
 800c36e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c376:	69bb      	ldr	r3, [r7, #24]
 800c378:	ee07 3a90 	vmov	s15, r3
 800c37c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c380:	ed97 6a02 	vldr	s12, [r7, #8]
 800c384:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800c530 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c388:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c38c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c390:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c394:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c39c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c3a0:	e058      	b.n	800c454 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	ee07 3a90 	vmov	s15, r3
 800c3a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3ac:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800c3b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3b4:	4b5c      	ldr	r3, [pc, #368]	@ (800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3bc:	ee07 3a90 	vmov	s15, r3
 800c3c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c3c4:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3c8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c530 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c3cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c3d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800c3d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800c3dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c3e4:	e036      	b.n	800c454 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c3e6:	4b50      	ldr	r3, [pc, #320]	@ (800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d005      	beq.n	800c3fe <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800c3f2:	4b4d      	ldr	r3, [pc, #308]	@ (800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c3f4:	689b      	ldr	r3, [r3, #8]
 800c3f6:	0f1b      	lsrs	r3, r3, #28
 800c3f8:	f003 030f 	and.w	r3, r3, #15
 800c3fc:	e006      	b.n	800c40c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800c3fe:	4b4a      	ldr	r3, [pc, #296]	@ (800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c400:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c404:	041b      	lsls	r3, r3, #16
 800c406:	0f1b      	lsrs	r3, r3, #28
 800c408:	f003 030f 	and.w	r3, r3, #15
 800c40c:	4a49      	ldr	r2, [pc, #292]	@ (800c534 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800c40e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c412:	ee07 3a90 	vmov	s15, r3
 800c416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	ee07 3a90 	vmov	s15, r3
 800c420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c424:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	ee07 3a90 	vmov	s15, r3
 800c42e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c432:	ed97 6a02 	vldr	s12, [r7, #8]
 800c436:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800c530 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800c43a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c43e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c446:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800c44a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c44e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c452:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800c454:	4b34      	ldr	r3, [pc, #208]	@ (800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d017      	beq.n	800c490 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c460:	4b31      	ldr	r3, [pc, #196]	@ (800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c464:	0a5b      	lsrs	r3, r3, #9
 800c466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c46a:	ee07 3a90 	vmov	s15, r3
 800c46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800c472:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c476:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c47a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c47e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c486:	ee17 2a90 	vmov	r2, s15
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	601a      	str	r2, [r3, #0]
 800c48e:	e002      	b.n	800c496 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800c496:	4b24      	ldr	r3, [pc, #144]	@ (800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c49a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d017      	beq.n	800c4d2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c4a2:	4b21      	ldr	r3, [pc, #132]	@ (800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c4a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4a6:	0c1b      	lsrs	r3, r3, #16
 800c4a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4ac:	ee07 3a90 	vmov	s15, r3
 800c4b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800c4b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c4b8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c4bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4c8:	ee17 2a90 	vmov	r2, s15
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	605a      	str	r2, [r3, #4]
 800c4d0:	e002      	b.n	800c4d8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800c4d8:	4b13      	ldr	r3, [pc, #76]	@ (800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c4da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d017      	beq.n	800c514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c4e4:	4b10      	ldr	r3, [pc, #64]	@ (800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800c4e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4e8:	0e1b      	lsrs	r3, r3, #24
 800c4ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4ee:	ee07 3a90 	vmov	s15, r3
 800c4f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800c4f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c4fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c4fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800c502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c50a:	ee17 2a90 	vmov	r2, s15
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c512:	e002      	b.n	800c51a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2200      	movs	r2, #0
 800c518:	609a      	str	r2, [r3, #8]
}
 800c51a:	bf00      	nop
 800c51c:	3724      	adds	r7, #36	@ 0x24
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr
 800c526:	bf00      	nop
 800c528:	46020c00 	.word	0x46020c00
 800c52c:	4b742400 	.word	0x4b742400
 800c530:	46000000 	.word	0x46000000
 800c534:	08011940 	.word	0x08011940

0800c538 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b08e      	sub	sp, #56	@ 0x38
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800c542:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c546:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800c54a:	430b      	orrs	r3, r1
 800c54c:	d145      	bne.n	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c54e:	4ba7      	ldr	r3, [pc, #668]	@ (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c554:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c558:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800c55a:	4ba4      	ldr	r3, [pc, #656]	@ (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c55c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c560:	f003 0302 	and.w	r3, r3, #2
 800c564:	2b02      	cmp	r3, #2
 800c566:	d108      	bne.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800c568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c56a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c56e:	d104      	bne.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800c570:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c574:	637b      	str	r3, [r7, #52]	@ 0x34
 800c576:	f001 bb5a 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800c57a:	4b9c      	ldr	r3, [pc, #624]	@ (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c57c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c580:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c584:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c588:	d114      	bne.n	800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800c58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c58c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c590:	d110      	bne.n	800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c592:	4b96      	ldr	r3, [pc, #600]	@ (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c59c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c5a0:	d103      	bne.n	800c5aa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800c5a2:	23fa      	movs	r3, #250	@ 0xfa
 800c5a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c5a6:	f001 bb42 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c5aa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c5ae:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c5b0:	f001 bb3d 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800c5b4:	4b8d      	ldr	r3, [pc, #564]	@ (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c5c0:	d107      	bne.n	800c5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5c8:	d103      	bne.n	800c5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800c5ca:	4b89      	ldr	r3, [pc, #548]	@ (800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800c5cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5ce:	f001 bb2e 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5d6:	f001 bb2a 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c5da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5de:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c5e2:	430b      	orrs	r3, r1
 800c5e4:	d151      	bne.n	800c68a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800c5e6:	4b81      	ldr	r3, [pc, #516]	@ (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c5e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c5ec:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800c5f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5f4:	2b80      	cmp	r3, #128	@ 0x80
 800c5f6:	d035      	beq.n	800c664 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800c5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5fa:	2b80      	cmp	r3, #128	@ 0x80
 800c5fc:	d841      	bhi.n	800c682 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c600:	2b60      	cmp	r3, #96	@ 0x60
 800c602:	d02a      	beq.n	800c65a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800c604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c606:	2b60      	cmp	r3, #96	@ 0x60
 800c608:	d83b      	bhi.n	800c682 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60c:	2b40      	cmp	r3, #64	@ 0x40
 800c60e:	d009      	beq.n	800c624 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c612:	2b40      	cmp	r3, #64	@ 0x40
 800c614:	d835      	bhi.n	800c682 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d00c      	beq.n	800c636 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800c61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c61e:	2b20      	cmp	r3, #32
 800c620:	d012      	beq.n	800c648 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c622:	e02e      	b.n	800c682 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c628:	4618      	mov	r0, r3
 800c62a:	f7ff fb77 	bl	800bd1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c630:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c632:	f001 bafc 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c636:	f107 0318 	add.w	r3, r7, #24
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7ff fcc8 	bl	800bfd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c640:	69bb      	ldr	r3, [r7, #24]
 800c642:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c644:	f001 baf3 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c648:	f107 030c 	add.w	r3, r7, #12
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7ff fe19 	bl	800c284 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c656:	f001 baea 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c65a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c65e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c660:	f001 bae5 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c664:	4b61      	ldr	r3, [pc, #388]	@ (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c66c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c670:	d103      	bne.n	800c67a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800c672:	4b60      	ldr	r3, [pc, #384]	@ (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c674:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c676:	f001 bada 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c67a:	2300      	movs	r3, #0
 800c67c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c67e:	f001 bad6 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800c682:	2300      	movs	r3, #0
 800c684:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c686:	f001 bad2 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c68a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c68e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c692:	430b      	orrs	r3, r1
 800c694:	d158      	bne.n	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800c696:	4b55      	ldr	r3, [pc, #340]	@ (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c698:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c69c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c6a0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6a8:	d03b      	beq.n	800c722 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6b0:	d846      	bhi.n	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c6b8:	d02e      	beq.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c6c0:	d83e      	bhi.n	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6c8:	d00b      	beq.n	800c6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800c6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6d0:	d836      	bhi.n	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800c6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d00d      	beq.n	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800c6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6de:	d012      	beq.n	800c706 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800c6e0:	e02e      	b.n	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7ff fb18 	bl	800bd1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800c6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c6f0:	f001 ba9d 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6f4:	f107 0318 	add.w	r3, r7, #24
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7ff fc69 	bl	800bfd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c702:	f001 ba94 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c706:	f107 030c 	add.w	r3, r7, #12
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7ff fdba 	bl	800c284 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c714:	f001 ba8b 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c718:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c71c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c71e:	f001 ba86 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c722:	4b32      	ldr	r3, [pc, #200]	@ (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c72a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c72e:	d103      	bne.n	800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800c730:	4b30      	ldr	r3, [pc, #192]	@ (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c732:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c734:	f001 ba7b 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c738:	2300      	movs	r3, #0
 800c73a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c73c:	f001 ba77 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c740:	2300      	movs	r3, #0
 800c742:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c744:	f001 ba73 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800c748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c74c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c750:	430b      	orrs	r3, r1
 800c752:	d126      	bne.n	800c7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800c754:	4b25      	ldr	r3, [pc, #148]	@ (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c756:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c75a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c75e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800c760:	4b22      	ldr	r3, [pc, #136]	@ (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c76c:	d106      	bne.n	800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800c76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c770:	2b00      	cmp	r3, #0
 800c772:	d103      	bne.n	800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800c774:	4b1f      	ldr	r3, [pc, #124]	@ (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c776:	637b      	str	r3, [r7, #52]	@ 0x34
 800c778:	f001 ba59 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800c77c:	4b1b      	ldr	r3, [pc, #108]	@ (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c788:	d107      	bne.n	800c79a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800c78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c78c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c790:	d103      	bne.n	800c79a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800c792:	4b19      	ldr	r3, [pc, #100]	@ (800c7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c794:	637b      	str	r3, [r7, #52]	@ 0x34
 800c796:	f001 ba4a 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800c79a:	2300      	movs	r3, #0
 800c79c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c79e:	f001 ba46 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800c7a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7a6:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800c7aa:	430b      	orrs	r3, r1
 800c7ac:	d16e      	bne.n	800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c7ae:	4b0f      	ldr	r3, [pc, #60]	@ (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c7b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c7b4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c7b8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7bc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c7c0:	d03d      	beq.n	800c83e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c7c8:	d85c      	bhi.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c7d0:	d014      	beq.n	800c7fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800c7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c7d8:	d854      	bhi.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d01f      	beq.n	800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800c7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c7e6:	d012      	beq.n	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800c7e8:	e04c      	b.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c7ea:	bf00      	nop
 800c7ec:	46020c00 	.word	0x46020c00
 800c7f0:	0007a120 	.word	0x0007a120
 800c7f4:	00f42400 	.word	0x00f42400
 800c7f8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c800:	4618      	mov	r0, r3
 800c802:	f7ff fa8b 	bl	800bd1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c808:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c80a:	f001 ba10 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c80e:	f107 0318 	add.w	r3, r7, #24
 800c812:	4618      	mov	r0, r3
 800c814:	f7ff fbdc 	bl	800bfd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c81c:	f001 ba07 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c820:	4ba7      	ldr	r3, [pc, #668]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c82c:	d103      	bne.n	800c836 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800c82e:	4ba5      	ldr	r3, [pc, #660]	@ (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c830:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c832:	f001 b9fc 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c836:	2300      	movs	r3, #0
 800c838:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c83a:	f001 b9f8 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c83e:	4ba0      	ldr	r3, [pc, #640]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f003 0320 	and.w	r3, r3, #32
 800c846:	2b20      	cmp	r3, #32
 800c848:	d118      	bne.n	800c87c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c84a:	4b9d      	ldr	r3, [pc, #628]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c84c:	689b      	ldr	r3, [r3, #8]
 800c84e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c852:	2b00      	cmp	r3, #0
 800c854:	d005      	beq.n	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c856:	4b9a      	ldr	r3, [pc, #616]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c858:	689b      	ldr	r3, [r3, #8]
 800c85a:	0e1b      	lsrs	r3, r3, #24
 800c85c:	f003 030f 	and.w	r3, r3, #15
 800c860:	e006      	b.n	800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800c862:	4b97      	ldr	r3, [pc, #604]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c864:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c868:	041b      	lsls	r3, r3, #16
 800c86a:	0e1b      	lsrs	r3, r3, #24
 800c86c:	f003 030f 	and.w	r3, r3, #15
 800c870:	4a95      	ldr	r2, [pc, #596]	@ (800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c876:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c878:	f001 b9d9 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c87c:	2300      	movs	r3, #0
 800c87e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c880:	f001 b9d5 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800c884:	2300      	movs	r3, #0
 800c886:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c888:	f001 b9d1 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c88c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c890:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800c894:	430b      	orrs	r3, r1
 800c896:	d17f      	bne.n	800c998 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c898:	4b89      	ldr	r3, [pc, #548]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c89a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c89e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c8a2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800c8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d165      	bne.n	800c976 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800c8aa:	4b85      	ldr	r3, [pc, #532]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c8ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c8b0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800c8b4:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800c8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c8bc:	d034      	beq.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800c8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800c8c4:	d853      	bhi.n	800c96e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c8cc:	d00b      	beq.n	800c8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800c8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c8d4:	d84b      	bhi.n	800c96e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800c8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d016      	beq.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800c8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c8e2:	d009      	beq.n	800c8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800c8e4:	e043      	b.n	800c96e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7ff fa16 	bl	800bd1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c8f4:	f001 b99b 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8f8:	f107 0318 	add.w	r3, r7, #24
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7ff fb67 	bl	800bfd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c902:	69fb      	ldr	r3, [r7, #28]
 800c904:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c906:	f001 b992 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800c90a:	4b6d      	ldr	r3, [pc, #436]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c912:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c916:	d103      	bne.n	800c920 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800c918:	4b6a      	ldr	r3, [pc, #424]	@ (800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c91a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c91c:	f001 b987 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c920:	2300      	movs	r3, #0
 800c922:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c924:	f001 b983 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c928:	4b65      	ldr	r3, [pc, #404]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f003 0320 	and.w	r3, r3, #32
 800c930:	2b20      	cmp	r3, #32
 800c932:	d118      	bne.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c934:	4b62      	ldr	r3, [pc, #392]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c936:	689b      	ldr	r3, [r3, #8]
 800c938:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d005      	beq.n	800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800c940:	4b5f      	ldr	r3, [pc, #380]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c942:	689b      	ldr	r3, [r3, #8]
 800c944:	0e1b      	lsrs	r3, r3, #24
 800c946:	f003 030f 	and.w	r3, r3, #15
 800c94a:	e006      	b.n	800c95a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c94c:	4b5c      	ldr	r3, [pc, #368]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c94e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c952:	041b      	lsls	r3, r3, #16
 800c954:	0e1b      	lsrs	r3, r3, #24
 800c956:	f003 030f 	and.w	r3, r3, #15
 800c95a:	4a5b      	ldr	r2, [pc, #364]	@ (800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c95c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c960:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800c962:	f001 b964 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800c966:	2300      	movs	r3, #0
 800c968:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c96a:	f001 b960 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800c96e:	2300      	movs	r3, #0
 800c970:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c972:	f001 b95c 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800c976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c978:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c97c:	d108      	bne.n	800c990 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c97e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c982:	4618      	mov	r0, r3
 800c984:	f7ff f9ca 	bl	800bd1c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c98a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c98c:	f001 b94f 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800c990:	2300      	movs	r3, #0
 800c992:	637b      	str	r3, [r7, #52]	@ 0x34
 800c994:	f001 b94b 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800c998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c99c:	1e51      	subs	r1, r2, #1
 800c99e:	430b      	orrs	r3, r1
 800c9a0:	d136      	bne.n	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c9a2:	4b47      	ldr	r3, [pc, #284]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c9a8:	f003 0303 	and.w	r3, r3, #3
 800c9ac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800c9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d104      	bne.n	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800c9b4:	f7fe f9cc 	bl	800ad50 <HAL_RCC_GetPCLK2Freq>
 800c9b8:	6378      	str	r0, [r7, #52]	@ 0x34
 800c9ba:	f001 b938 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800c9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d104      	bne.n	800c9ce <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c9c4:	f7fe f894 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800c9c8:	6378      	str	r0, [r7, #52]	@ 0x34
 800c9ca:	f001 b930 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800c9ce:	4b3c      	ldr	r3, [pc, #240]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9da:	d106      	bne.n	800c9ea <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800c9dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d103      	bne.n	800c9ea <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800c9e2:	4b3a      	ldr	r3, [pc, #232]	@ (800cacc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c9e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9e6:	f001 b922 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800c9ea:	4b35      	ldr	r3, [pc, #212]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c9ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c9f0:	f003 0302 	and.w	r3, r3, #2
 800c9f4:	2b02      	cmp	r3, #2
 800c9f6:	d107      	bne.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800c9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9fa:	2b03      	cmp	r3, #3
 800c9fc:	d104      	bne.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800c9fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca02:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca04:	f001 b913 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca0c:	f001 b90f 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800ca10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca14:	1e91      	subs	r1, r2, #2
 800ca16:	430b      	orrs	r3, r1
 800ca18:	d136      	bne.n	800ca88 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800ca1a:	4b29      	ldr	r3, [pc, #164]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca20:	f003 030c 	and.w	r3, r3, #12
 800ca24:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800ca26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d104      	bne.n	800ca36 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ca2c:	f7fe f97c 	bl	800ad28 <HAL_RCC_GetPCLK1Freq>
 800ca30:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca32:	f001 b8fc 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800ca36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca38:	2b04      	cmp	r3, #4
 800ca3a:	d104      	bne.n	800ca46 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ca3c:	f7fe f858 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800ca40:	6378      	str	r0, [r7, #52]	@ 0x34
 800ca42:	f001 b8f4 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800ca46:	4b1e      	ldr	r3, [pc, #120]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca52:	d106      	bne.n	800ca62 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ca54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca56:	2b08      	cmp	r3, #8
 800ca58:	d103      	bne.n	800ca62 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800ca5a:	4b1c      	ldr	r3, [pc, #112]	@ (800cacc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ca5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca5e:	f001 b8e6 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800ca62:	4b17      	ldr	r3, [pc, #92]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ca68:	f003 0302 	and.w	r3, r3, #2
 800ca6c:	2b02      	cmp	r3, #2
 800ca6e:	d107      	bne.n	800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800ca70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca72:	2b0c      	cmp	r3, #12
 800ca74:	d104      	bne.n	800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800ca76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca7a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca7c:	f001 b8d7 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800ca80:	2300      	movs	r3, #0
 800ca82:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca84:	f001 b8d3 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800ca88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca8c:	1f11      	subs	r1, r2, #4
 800ca8e:	430b      	orrs	r3, r1
 800ca90:	d13f      	bne.n	800cb12 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800ca92:	4b0b      	ldr	r3, [pc, #44]	@ (800cac0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ca94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ca98:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ca9c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800ca9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d104      	bne.n	800caae <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800caa4:	f7fe f940 	bl	800ad28 <HAL_RCC_GetPCLK1Freq>
 800caa8:	6378      	str	r0, [r7, #52]	@ 0x34
 800caaa:	f001 b8c0 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800caae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab0:	2b10      	cmp	r3, #16
 800cab2:	d10d      	bne.n	800cad0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cab4:	f7fe f81c 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800cab8:	6378      	str	r0, [r7, #52]	@ 0x34
 800caba:	f001 b8b8 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cabe:	bf00      	nop
 800cac0:	46020c00 	.word	0x46020c00
 800cac4:	02dc6c00 	.word	0x02dc6c00
 800cac8:	08011940 	.word	0x08011940
 800cacc:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800cad0:	4ba8      	ldr	r3, [pc, #672]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cadc:	d106      	bne.n	800caec <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800cade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cae0:	2b20      	cmp	r3, #32
 800cae2:	d103      	bne.n	800caec <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800cae4:	4ba4      	ldr	r3, [pc, #656]	@ (800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cae6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cae8:	f001 b8a1 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800caec:	4ba1      	ldr	r3, [pc, #644]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800caee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800caf2:	f003 0302 	and.w	r3, r3, #2
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	d107      	bne.n	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800cafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cafc:	2b30      	cmp	r3, #48	@ 0x30
 800cafe:	d104      	bne.n	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800cb00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb04:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb06:	f001 b892 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb0e:	f001 b88e 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800cb12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb16:	f1a2 0108 	sub.w	r1, r2, #8
 800cb1a:	430b      	orrs	r3, r1
 800cb1c:	d136      	bne.n	800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800cb1e:	4b95      	ldr	r3, [pc, #596]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cb24:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cb28:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d104      	bne.n	800cb3a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cb30:	f7fe f8fa 	bl	800ad28 <HAL_RCC_GetPCLK1Freq>
 800cb34:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb36:	f001 b87a 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800cb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb3c:	2b40      	cmp	r3, #64	@ 0x40
 800cb3e:	d104      	bne.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cb40:	f7fd ffd6 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800cb44:	6378      	str	r0, [r7, #52]	@ 0x34
 800cb46:	f001 b872 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800cb4a:	4b8a      	ldr	r3, [pc, #552]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb56:	d106      	bne.n	800cb66 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800cb58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb5a:	2b80      	cmp	r3, #128	@ 0x80
 800cb5c:	d103      	bne.n	800cb66 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800cb5e:	4b86      	ldr	r3, [pc, #536]	@ (800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cb60:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb62:	f001 b864 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800cb66:	4b83      	ldr	r3, [pc, #524]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cb6c:	f003 0302 	and.w	r3, r3, #2
 800cb70:	2b02      	cmp	r3, #2
 800cb72:	d107      	bne.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800cb74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb76:	2bc0      	cmp	r3, #192	@ 0xc0
 800cb78:	d104      	bne.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800cb7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb80:	f001 b855 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800cb84:	2300      	movs	r3, #0
 800cb86:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb88:	f001 b851 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800cb8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb90:	f1a2 0110 	sub.w	r1, r2, #16
 800cb94:	430b      	orrs	r3, r1
 800cb96:	d139      	bne.n	800cc0c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800cb98:	4b76      	ldr	r3, [pc, #472]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cb9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cba2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800cba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d104      	bne.n	800cbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cbaa:	f7fe f8bd 	bl	800ad28 <HAL_RCC_GetPCLK1Freq>
 800cbae:	6378      	str	r0, [r7, #52]	@ 0x34
 800cbb0:	f001 b83d 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800cbb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbba:	d104      	bne.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cbbc:	f7fd ff98 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800cbc0:	6378      	str	r0, [r7, #52]	@ 0x34
 800cbc2:	f001 b834 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800cbc6:	4b6b      	ldr	r3, [pc, #428]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cbce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cbd2:	d107      	bne.n	800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800cbd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cbda:	d103      	bne.n	800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800cbdc:	4b66      	ldr	r3, [pc, #408]	@ (800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cbde:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbe0:	f001 b825 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800cbe4:	4b63      	ldr	r3, [pc, #396]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cbe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cbea:	f003 0302 	and.w	r3, r3, #2
 800cbee:	2b02      	cmp	r3, #2
 800cbf0:	d108      	bne.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800cbf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cbf8:	d104      	bne.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800cbfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbfe:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc00:	f001 b815 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800cc04:	2300      	movs	r3, #0
 800cc06:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc08:	f001 b811 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800cc0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc10:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800cc14:	430b      	orrs	r3, r1
 800cc16:	d139      	bne.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800cc18:	4b56      	ldr	r3, [pc, #344]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cc1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cc22:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800cc24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d104      	bne.n	800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cc2a:	f7fe f87d 	bl	800ad28 <HAL_RCC_GetPCLK1Freq>
 800cc2e:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc30:	f000 bffd 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800cc34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc3a:	d104      	bne.n	800cc46 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cc3c:	f7fd ff58 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800cc40:	6378      	str	r0, [r7, #52]	@ 0x34
 800cc42:	f000 bff4 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800cc46:	4b4b      	ldr	r3, [pc, #300]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc52:	d107      	bne.n	800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800cc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cc5a:	d103      	bne.n	800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800cc5c:	4b46      	ldr	r3, [pc, #280]	@ (800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cc5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc60:	f000 bfe5 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800cc64:	4b43      	ldr	r3, [pc, #268]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cc6a:	f003 0302 	and.w	r3, r3, #2
 800cc6e:	2b02      	cmp	r3, #2
 800cc70:	d108      	bne.n	800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800cc72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cc78:	d104      	bne.n	800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800cc7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc80:	f000 bfd5 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800cc84:	2300      	movs	r3, #0
 800cc86:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc88:	f000 bfd1 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800cc8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc90:	f1a2 0120 	sub.w	r1, r2, #32
 800cc94:	430b      	orrs	r3, r1
 800cc96:	d158      	bne.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800cc98:	4b36      	ldr	r3, [pc, #216]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cc9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cc9e:	f003 0307 	and.w	r3, r3, #7
 800cca2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800cca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d104      	bne.n	800ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800ccaa:	f7fe f865 	bl	800ad78 <HAL_RCC_GetPCLK3Freq>
 800ccae:	6378      	str	r0, [r7, #52]	@ 0x34
 800ccb0:	f000 bfbd 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800ccb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d104      	bne.n	800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ccba:	f7fd ff19 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800ccbe:	6378      	str	r0, [r7, #52]	@ 0x34
 800ccc0:	f000 bfb5 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800ccc4:	4b2b      	ldr	r3, [pc, #172]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ccd0:	d106      	bne.n	800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800ccd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd4:	2b02      	cmp	r3, #2
 800ccd6:	d103      	bne.n	800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800ccd8:	4b27      	ldr	r3, [pc, #156]	@ (800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ccda:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccdc:	f000 bfa7 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800cce0:	4b24      	ldr	r3, [pc, #144]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cce6:	f003 0302 	and.w	r3, r3, #2
 800ccea:	2b02      	cmp	r3, #2
 800ccec:	d107      	bne.n	800ccfe <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800ccee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf0:	2b03      	cmp	r3, #3
 800ccf2:	d104      	bne.n	800ccfe <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800ccf4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ccf8:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccfa:	f000 bf98 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800ccfe:	4b1d      	ldr	r3, [pc, #116]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f003 0320 	and.w	r3, r3, #32
 800cd06:	2b20      	cmp	r3, #32
 800cd08:	d11b      	bne.n	800cd42 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd0c:	2b04      	cmp	r3, #4
 800cd0e:	d118      	bne.n	800cd42 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cd10:	4b18      	ldr	r3, [pc, #96]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd12:	689b      	ldr	r3, [r3, #8]
 800cd14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d005      	beq.n	800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800cd1c:	4b15      	ldr	r3, [pc, #84]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	0e1b      	lsrs	r3, r3, #24
 800cd22:	f003 030f 	and.w	r3, r3, #15
 800cd26:	e006      	b.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800cd28:	4b12      	ldr	r3, [pc, #72]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cd2e:	041b      	lsls	r3, r3, #16
 800cd30:	0e1b      	lsrs	r3, r3, #24
 800cd32:	f003 030f 	and.w	r3, r3, #15
 800cd36:	4a11      	ldr	r2, [pc, #68]	@ (800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800cd38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd3e:	f000 bf76 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800cd42:	2300      	movs	r3, #0
 800cd44:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd46:	f000 bf72 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800cd4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd4e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800cd52:	430b      	orrs	r3, r1
 800cd54:	d172      	bne.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800cd56:	4b07      	ldr	r3, [pc, #28]	@ (800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cd58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cd5c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800cd60:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800cd62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd68:	d10a      	bne.n	800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800cd6a:	f7fd fec1 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800cd6e:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd70:	f000 bf5d 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800cd74:	46020c00 	.word	0x46020c00
 800cd78:	00f42400 	.word	0x00f42400
 800cd7c:	08011940 	.word	0x08011940
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800cd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd86:	d108      	bne.n	800cd9a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd88:	f107 0318 	add.w	r3, r7, #24
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7ff f91f 	bl	800bfd0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800cd92:	6a3b      	ldr	r3, [r7, #32]
 800cd94:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd96:	f000 bf4a 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800cd9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d104      	bne.n	800cdaa <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800cda0:	f7fd ffa8 	bl	800acf4 <HAL_RCC_GetHCLKFreq>
 800cda4:	6378      	str	r0, [r7, #52]	@ 0x34
 800cda6:	f000 bf42 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdac:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800cdb0:	d122      	bne.n	800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cdb2:	4bb0      	ldr	r3, [pc, #704]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f003 0320 	and.w	r3, r3, #32
 800cdba:	2b20      	cmp	r3, #32
 800cdbc:	d118      	bne.n	800cdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cdbe:	4bad      	ldr	r3, [pc, #692]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cdc0:	689b      	ldr	r3, [r3, #8]
 800cdc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d005      	beq.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800cdca:	4baa      	ldr	r3, [pc, #680]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	0e1b      	lsrs	r3, r3, #24
 800cdd0:	f003 030f 	and.w	r3, r3, #15
 800cdd4:	e006      	b.n	800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800cdd6:	4ba7      	ldr	r3, [pc, #668]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cdd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cddc:	041b      	lsls	r3, r3, #16
 800cdde:	0e1b      	lsrs	r3, r3, #24
 800cde0:	f003 030f 	and.w	r3, r3, #15
 800cde4:	4aa4      	ldr	r2, [pc, #656]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cde6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdea:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdec:	f000 bf1f 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdf4:	f000 bf1b 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800cdf8:	4b9e      	ldr	r3, [pc, #632]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce04:	d107      	bne.n	800ce16 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800ce06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ce0c:	d103      	bne.n	800ce16 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800ce0e:	4b9b      	ldr	r3, [pc, #620]	@ (800d07c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ce10:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce12:	f000 bf0c 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800ce16:	4b97      	ldr	r3, [pc, #604]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce22:	d107      	bne.n	800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800ce24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ce2a:	d103      	bne.n	800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800ce2c:	4b93      	ldr	r3, [pc, #588]	@ (800d07c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ce2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce30:	f000 befd 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800ce34:	2300      	movs	r3, #0
 800ce36:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce38:	f000 bef9 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800ce3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce40:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ce44:	430b      	orrs	r3, r1
 800ce46:	d158      	bne.n	800cefa <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800ce48:	4b8a      	ldr	r3, [pc, #552]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ce4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ce4e:	f003 0307 	and.w	r3, r3, #7
 800ce52:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ce54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce56:	2b04      	cmp	r3, #4
 800ce58:	d84b      	bhi.n	800cef2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800ce5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800ce5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce60:	0800ce99 	.word	0x0800ce99
 800ce64:	0800ce75 	.word	0x0800ce75
 800ce68:	0800ce87 	.word	0x0800ce87
 800ce6c:	0800cea3 	.word	0x0800cea3
 800ce70:	0800cead 	.word	0x0800cead
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7fe ff4f 	bl	800bd1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ce7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce82:	f000 bed4 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce86:	f107 030c 	add.w	r3, r7, #12
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7ff f9fa 	bl	800c284 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce94:	f000 becb 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800ce98:	f7fd ff2c 	bl	800acf4 <HAL_RCC_GetHCLKFreq>
 800ce9c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ce9e:	f000 bec6 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800cea2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800cea6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cea8:	f000 bec1 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ceac:	4b71      	ldr	r3, [pc, #452]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f003 0320 	and.w	r3, r3, #32
 800ceb4:	2b20      	cmp	r3, #32
 800ceb6:	d118      	bne.n	800ceea <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ceb8:	4b6e      	ldr	r3, [pc, #440]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ceba:	689b      	ldr	r3, [r3, #8]
 800cebc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d005      	beq.n	800ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800cec4:	4b6b      	ldr	r3, [pc, #428]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	0e1b      	lsrs	r3, r3, #24
 800ceca:	f003 030f 	and.w	r3, r3, #15
 800cece:	e006      	b.n	800cede <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800ced0:	4b68      	ldr	r3, [pc, #416]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ced2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ced6:	041b      	lsls	r3, r3, #16
 800ced8:	0e1b      	lsrs	r3, r3, #24
 800ceda:	f003 030f 	and.w	r3, r3, #15
 800cede:	4a66      	ldr	r2, [pc, #408]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cee4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cee6:	f000 bea2 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ceea:	2300      	movs	r3, #0
 800ceec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ceee:	f000 be9e 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800cef2:	2300      	movs	r3, #0
 800cef4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cef6:	f000 be9a 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800cefa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cefe:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800cf02:	430b      	orrs	r3, r1
 800cf04:	d167      	bne.n	800cfd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800cf06:	4b5b      	ldr	r3, [pc, #364]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cf0c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800cf10:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800cf12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cf18:	d036      	beq.n	800cf88 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800cf1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cf20:	d855      	bhi.n	800cfce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800cf22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cf28:	d029      	beq.n	800cf7e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800cf2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cf30:	d84d      	bhi.n	800cfce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800cf32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf38:	d013      	beq.n	800cf62 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800cf3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf40:	d845      	bhi.n	800cfce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800cf42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d015      	beq.n	800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800cf48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf4e:	d13e      	bne.n	800cfce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7fe fee1 	bl	800bd1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800cf5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf5e:	f000 be66 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf62:	f107 030c 	add.w	r3, r7, #12
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7ff f98c 	bl	800c284 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf70:	f000 be5d 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800cf74:	f7fd febe 	bl	800acf4 <HAL_RCC_GetHCLKFreq>
 800cf78:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800cf7a:	f000 be58 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800cf7e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800cf82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf84:	f000 be53 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800cf88:	4b3a      	ldr	r3, [pc, #232]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f003 0320 	and.w	r3, r3, #32
 800cf90:	2b20      	cmp	r3, #32
 800cf92:	d118      	bne.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800cf94:	4b37      	ldr	r3, [pc, #220]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d005      	beq.n	800cfac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800cfa0:	4b34      	ldr	r3, [pc, #208]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	0e1b      	lsrs	r3, r3, #24
 800cfa6:	f003 030f 	and.w	r3, r3, #15
 800cfaa:	e006      	b.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cfac:	4b31      	ldr	r3, [pc, #196]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800cfb2:	041b      	lsls	r3, r3, #16
 800cfb4:	0e1b      	lsrs	r3, r3, #24
 800cfb6:	f003 030f 	and.w	r3, r3, #15
 800cfba:	4a2f      	ldr	r2, [pc, #188]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800cfbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfc0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cfc2:	f000 be34 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cfca:	f000 be30 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cfd2:	f000 be2c 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800cfd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfda:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800cfde:	430b      	orrs	r3, r1
 800cfe0:	d152      	bne.n	800d088 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800cfe2:	4b24      	ldr	r3, [pc, #144]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800cfe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cfe8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cfec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800cfee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d104      	bne.n	800cffe <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800cff4:	f7fd fe98 	bl	800ad28 <HAL_RCC_GetPCLK1Freq>
 800cff8:	6378      	str	r0, [r7, #52]	@ 0x34
 800cffa:	f000 be18 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800cffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d000:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d004:	d104      	bne.n	800d010 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d006:	f7fd fd73 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800d00a:	6378      	str	r0, [r7, #52]	@ 0x34
 800d00c:	f000 be0f 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800d010:	4b18      	ldr	r3, [pc, #96]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d01c:	d107      	bne.n	800d02e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800d01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d020:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d024:	d103      	bne.n	800d02e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800d026:	4b15      	ldr	r3, [pc, #84]	@ (800d07c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800d028:	637b      	str	r3, [r7, #52]	@ 0x34
 800d02a:	f000 be00 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800d02e:	4b11      	ldr	r3, [pc, #68]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f003 0320 	and.w	r3, r3, #32
 800d036:	2b20      	cmp	r3, #32
 800d038:	d122      	bne.n	800d080 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800d03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d03c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d040:	d11e      	bne.n	800d080 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d042:	4b0c      	ldr	r3, [pc, #48]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d044:	689b      	ldr	r3, [r3, #8]
 800d046:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d005      	beq.n	800d05a <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800d04e:	4b09      	ldr	r3, [pc, #36]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d050:	689b      	ldr	r3, [r3, #8]
 800d052:	0e1b      	lsrs	r3, r3, #24
 800d054:	f003 030f 	and.w	r3, r3, #15
 800d058:	e006      	b.n	800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800d05a:	4b06      	ldr	r3, [pc, #24]	@ (800d074 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800d05c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d060:	041b      	lsls	r3, r3, #16
 800d062:	0e1b      	lsrs	r3, r3, #24
 800d064:	f003 030f 	and.w	r3, r3, #15
 800d068:	4a03      	ldr	r2, [pc, #12]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800d06a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d06e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d070:	f000 bddd 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d074:	46020c00 	.word	0x46020c00
 800d078:	08011940 	.word	0x08011940
 800d07c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800d080:	2300      	movs	r3, #0
 800d082:	637b      	str	r3, [r7, #52]	@ 0x34
 800d084:	f000 bdd3 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800d088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d08c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800d090:	430b      	orrs	r3, r1
 800d092:	d14c      	bne.n	800d12e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800d094:	4ba8      	ldr	r3, [pc, #672]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d09a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d09e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800d0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d104      	bne.n	800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d0a6:	f7fd fe3f 	bl	800ad28 <HAL_RCC_GetPCLK1Freq>
 800d0aa:	6378      	str	r0, [r7, #52]	@ 0x34
 800d0ac:	f000 bdbf 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800d0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0b6:	d104      	bne.n	800d0c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d0b8:	f7fd fd1a 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800d0bc:	6378      	str	r0, [r7, #52]	@ 0x34
 800d0be:	f000 bdb6 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800d0c2:	4b9d      	ldr	r3, [pc, #628]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d0ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d0ce:	d107      	bne.n	800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800d0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d0d6:	d103      	bne.n	800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800d0d8:	4b98      	ldr	r3, [pc, #608]	@ (800d33c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d0da:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0dc:	f000 bda7 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800d0e0:	4b95      	ldr	r3, [pc, #596]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f003 0320 	and.w	r3, r3, #32
 800d0e8:	2b20      	cmp	r3, #32
 800d0ea:	d11c      	bne.n	800d126 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800d0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d0f2:	d118      	bne.n	800d126 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d0f4:	4b90      	ldr	r3, [pc, #576]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d0f6:	689b      	ldr	r3, [r3, #8]
 800d0f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d005      	beq.n	800d10c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800d100:	4b8d      	ldr	r3, [pc, #564]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	0e1b      	lsrs	r3, r3, #24
 800d106:	f003 030f 	and.w	r3, r3, #15
 800d10a:	e006      	b.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800d10c:	4b8a      	ldr	r3, [pc, #552]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d10e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d112:	041b      	lsls	r3, r3, #16
 800d114:	0e1b      	lsrs	r3, r3, #24
 800d116:	f003 030f 	and.w	r3, r3, #15
 800d11a:	4a89      	ldr	r2, [pc, #548]	@ (800d340 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d11c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d120:	637b      	str	r3, [r7, #52]	@ 0x34
 800d122:	f000 bd84 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800d126:	2300      	movs	r3, #0
 800d128:	637b      	str	r3, [r7, #52]	@ 0x34
 800d12a:	f000 bd80 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800d12e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d132:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800d136:	430b      	orrs	r3, r1
 800d138:	d158      	bne.n	800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800d13a:	4b7f      	ldr	r3, [pc, #508]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d13c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d140:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d144:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d148:	2bc0      	cmp	r3, #192	@ 0xc0
 800d14a:	d028      	beq.n	800d19e <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800d14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d14e:	2bc0      	cmp	r3, #192	@ 0xc0
 800d150:	d848      	bhi.n	800d1e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d154:	2b80      	cmp	r3, #128	@ 0x80
 800d156:	d00e      	beq.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800d158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d15a:	2b80      	cmp	r3, #128	@ 0x80
 800d15c:	d842      	bhi.n	800d1e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800d15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d160:	2b00      	cmp	r3, #0
 800d162:	d003      	beq.n	800d16c <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800d164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d166:	2b40      	cmp	r3, #64	@ 0x40
 800d168:	d014      	beq.n	800d194 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800d16a:	e03b      	b.n	800d1e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800d16c:	f7fd fe04 	bl	800ad78 <HAL_RCC_GetPCLK3Freq>
 800d170:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d172:	f000 bd5c 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d176:	4b70      	ldr	r3, [pc, #448]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d17e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d182:	d103      	bne.n	800d18c <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800d184:	4b6d      	ldr	r3, [pc, #436]	@ (800d33c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d186:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d188:	f000 bd51 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d18c:	2300      	movs	r3, #0
 800d18e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d190:	f000 bd4d 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800d194:	f7fd fcac 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800d198:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d19a:	f000 bd48 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d19e:	4b66      	ldr	r3, [pc, #408]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f003 0320 	and.w	r3, r3, #32
 800d1a6:	2b20      	cmp	r3, #32
 800d1a8:	d118      	bne.n	800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d1aa:	4b63      	ldr	r3, [pc, #396]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1ac:	689b      	ldr	r3, [r3, #8]
 800d1ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d005      	beq.n	800d1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800d1b6:	4b60      	ldr	r3, [pc, #384]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	0e1b      	lsrs	r3, r3, #24
 800d1bc:	f003 030f 	and.w	r3, r3, #15
 800d1c0:	e006      	b.n	800d1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800d1c2:	4b5d      	ldr	r3, [pc, #372]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d1c8:	041b      	lsls	r3, r3, #16
 800d1ca:	0e1b      	lsrs	r3, r3, #24
 800d1cc:	f003 030f 	and.w	r3, r3, #15
 800d1d0:	4a5b      	ldr	r2, [pc, #364]	@ (800d340 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d1d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1d6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d1d8:	f000 bd29 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1e0:	f000 bd25 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1e8:	f000 bd21 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800d1ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1f0:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800d1f4:	430b      	orrs	r3, r1
 800d1f6:	d14c      	bne.n	800d292 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800d1f8:	4b4f      	ldr	r3, [pc, #316]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d1fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d1fe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d202:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800d204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d206:	2b00      	cmp	r3, #0
 800d208:	d104      	bne.n	800d214 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d20a:	f7fd fd8d 	bl	800ad28 <HAL_RCC_GetPCLK1Freq>
 800d20e:	6378      	str	r0, [r7, #52]	@ 0x34
 800d210:	f000 bd0d 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800d214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d216:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d21a:	d104      	bne.n	800d226 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d21c:	f7fd fc68 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800d220:	6378      	str	r0, [r7, #52]	@ 0x34
 800d222:	f000 bd04 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800d226:	4b44      	ldr	r3, [pc, #272]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d22e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d232:	d107      	bne.n	800d244 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800d234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d236:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d23a:	d103      	bne.n	800d244 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800d23c:	4b3f      	ldr	r3, [pc, #252]	@ (800d33c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d23e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d240:	f000 bcf5 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800d244:	4b3c      	ldr	r3, [pc, #240]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f003 0320 	and.w	r3, r3, #32
 800d24c:	2b20      	cmp	r3, #32
 800d24e:	d11c      	bne.n	800d28a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800d250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d252:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d256:	d118      	bne.n	800d28a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d258:	4b37      	ldr	r3, [pc, #220]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d25a:	689b      	ldr	r3, [r3, #8]
 800d25c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d260:	2b00      	cmp	r3, #0
 800d262:	d005      	beq.n	800d270 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800d264:	4b34      	ldr	r3, [pc, #208]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d266:	689b      	ldr	r3, [r3, #8]
 800d268:	0e1b      	lsrs	r3, r3, #24
 800d26a:	f003 030f 	and.w	r3, r3, #15
 800d26e:	e006      	b.n	800d27e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800d270:	4b31      	ldr	r3, [pc, #196]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d272:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d276:	041b      	lsls	r3, r3, #16
 800d278:	0e1b      	lsrs	r3, r3, #24
 800d27a:	f003 030f 	and.w	r3, r3, #15
 800d27e:	4a30      	ldr	r2, [pc, #192]	@ (800d340 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d284:	637b      	str	r3, [r7, #52]	@ 0x34
 800d286:	f000 bcd2 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800d28a:	2300      	movs	r3, #0
 800d28c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d28e:	f000 bcce 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800d292:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d296:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800d29a:	430b      	orrs	r3, r1
 800d29c:	d152      	bne.n	800d344 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800d29e:	4b26      	ldr	r3, [pc, #152]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d2a4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d2a8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800d2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d104      	bne.n	800d2ba <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d2b0:	f7fd fd3a 	bl	800ad28 <HAL_RCC_GetPCLK1Freq>
 800d2b4:	6378      	str	r0, [r7, #52]	@ 0x34
 800d2b6:	f000 bcba 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800d2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d2c0:	d104      	bne.n	800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d2c2:	f7fd fc15 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800d2c6:	6378      	str	r0, [r7, #52]	@ 0x34
 800d2c8:	f000 bcb1 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800d2cc:	4b1a      	ldr	r3, [pc, #104]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d2d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d2d8:	d107      	bne.n	800d2ea <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800d2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d2e0:	d103      	bne.n	800d2ea <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800d2e2:	4b16      	ldr	r3, [pc, #88]	@ (800d33c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800d2e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2e6:	f000 bca2 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800d2ea:	4b13      	ldr	r3, [pc, #76]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f003 0320 	and.w	r3, r3, #32
 800d2f2:	2b20      	cmp	r3, #32
 800d2f4:	d11c      	bne.n	800d330 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800d2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d2fc:	d118      	bne.n	800d330 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d2fe:	4b0e      	ldr	r3, [pc, #56]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d300:	689b      	ldr	r3, [r3, #8]
 800d302:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d306:	2b00      	cmp	r3, #0
 800d308:	d005      	beq.n	800d316 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800d30a:	4b0b      	ldr	r3, [pc, #44]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d30c:	689b      	ldr	r3, [r3, #8]
 800d30e:	0e1b      	lsrs	r3, r3, #24
 800d310:	f003 030f 	and.w	r3, r3, #15
 800d314:	e006      	b.n	800d324 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800d316:	4b08      	ldr	r3, [pc, #32]	@ (800d338 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800d318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d31c:	041b      	lsls	r3, r3, #16
 800d31e:	0e1b      	lsrs	r3, r3, #24
 800d320:	f003 030f 	and.w	r3, r3, #15
 800d324:	4a06      	ldr	r2, [pc, #24]	@ (800d340 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800d326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d32a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d32c:	f000 bc7f 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800d330:	2300      	movs	r3, #0
 800d332:	637b      	str	r3, [r7, #52]	@ 0x34
 800d334:	f000 bc7b 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d338:	46020c00 	.word	0x46020c00
 800d33c:	00f42400 	.word	0x00f42400
 800d340:	08011940 	.word	0x08011940
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800d344:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d348:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800d34c:	430b      	orrs	r3, r1
 800d34e:	d14c      	bne.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800d350:	4ba6      	ldr	r3, [pc, #664]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d352:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d356:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800d35a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800d35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d104      	bne.n	800d36c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d362:	f7fd fce1 	bl	800ad28 <HAL_RCC_GetPCLK1Freq>
 800d366:	6378      	str	r0, [r7, #52]	@ 0x34
 800d368:	f000 bc61 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800d36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d36e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d372:	d104      	bne.n	800d37e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800d374:	f7fd fbbc 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800d378:	6378      	str	r0, [r7, #52]	@ 0x34
 800d37a:	f000 bc58 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800d37e:	4b9b      	ldr	r3, [pc, #620]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d38a:	d107      	bne.n	800d39c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800d38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d38e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d392:	d103      	bne.n	800d39c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800d394:	4b96      	ldr	r3, [pc, #600]	@ (800d5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d396:	637b      	str	r3, [r7, #52]	@ 0x34
 800d398:	f000 bc49 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800d39c:	4b93      	ldr	r3, [pc, #588]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f003 0320 	and.w	r3, r3, #32
 800d3a4:	2b20      	cmp	r3, #32
 800d3a6:	d11c      	bne.n	800d3e2 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800d3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3aa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800d3ae:	d118      	bne.n	800d3e2 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d3b0:	4b8e      	ldr	r3, [pc, #568]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3b2:	689b      	ldr	r3, [r3, #8]
 800d3b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d005      	beq.n	800d3c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800d3bc:	4b8b      	ldr	r3, [pc, #556]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	0e1b      	lsrs	r3, r3, #24
 800d3c2:	f003 030f 	and.w	r3, r3, #15
 800d3c6:	e006      	b.n	800d3d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800d3c8:	4b88      	ldr	r3, [pc, #544]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d3ce:	041b      	lsls	r3, r3, #16
 800d3d0:	0e1b      	lsrs	r3, r3, #24
 800d3d2:	f003 030f 	and.w	r3, r3, #15
 800d3d6:	4a87      	ldr	r2, [pc, #540]	@ (800d5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d3d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3de:	f000 bc26 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3e6:	f000 bc22 	b.w	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800d3ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3ee:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d3f2:	430b      	orrs	r3, r1
 800d3f4:	d164      	bne.n	800d4c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800d3f6:	4b7d      	ldr	r3, [pc, #500]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d3f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d3fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d400:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800d402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d404:	2b00      	cmp	r3, #0
 800d406:	d120      	bne.n	800d44a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d408:	4b78      	ldr	r3, [pc, #480]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f003 0320 	and.w	r3, r3, #32
 800d410:	2b20      	cmp	r3, #32
 800d412:	d117      	bne.n	800d444 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d414:	4b75      	ldr	r3, [pc, #468]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d416:	689b      	ldr	r3, [r3, #8]
 800d418:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d005      	beq.n	800d42c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800d420:	4b72      	ldr	r3, [pc, #456]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d422:	689b      	ldr	r3, [r3, #8]
 800d424:	0e1b      	lsrs	r3, r3, #24
 800d426:	f003 030f 	and.w	r3, r3, #15
 800d42a:	e006      	b.n	800d43a <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800d42c:	4b6f      	ldr	r3, [pc, #444]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d42e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d432:	041b      	lsls	r3, r3, #16
 800d434:	0e1b      	lsrs	r3, r3, #24
 800d436:	f003 030f 	and.w	r3, r3, #15
 800d43a:	4a6e      	ldr	r2, [pc, #440]	@ (800d5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d43c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d440:	637b      	str	r3, [r7, #52]	@ 0x34
 800d442:	e3f4      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d444:	2300      	movs	r3, #0
 800d446:	637b      	str	r3, [r7, #52]	@ 0x34
 800d448:	e3f1      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800d44a:	4b68      	ldr	r3, [pc, #416]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d44c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d450:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d454:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d458:	d112      	bne.n	800d480 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800d45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d45c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d460:	d10e      	bne.n	800d480 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d462:	4b62      	ldr	r3, [pc, #392]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d46c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d470:	d102      	bne.n	800d478 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800d472:	23fa      	movs	r3, #250	@ 0xfa
 800d474:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d476:	e3da      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d478:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d47c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d47e:	e3d6      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800d480:	4b5a      	ldr	r3, [pc, #360]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d488:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d48c:	d106      	bne.n	800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800d48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d494:	d102      	bne.n	800d49c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800d496:	4b56      	ldr	r3, [pc, #344]	@ (800d5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d498:	637b      	str	r3, [r7, #52]	@ 0x34
 800d49a:	e3c8      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800d49c:	4b53      	ldr	r3, [pc, #332]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d49e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d4a2:	f003 0302 	and.w	r3, r3, #2
 800d4a6:	2b02      	cmp	r3, #2
 800d4a8:	d107      	bne.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800d4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d4b0:	d103      	bne.n	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800d4b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d4b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4b8:	e3b9      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4be:	e3b6      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800d4c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4c4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800d4c8:	430b      	orrs	r3, r1
 800d4ca:	d164      	bne.n	800d596 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d4cc:	4b47      	ldr	r3, [pc, #284]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d4d2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d4d6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800d4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d120      	bne.n	800d520 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d4de:	4b43      	ldr	r3, [pc, #268]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f003 0320 	and.w	r3, r3, #32
 800d4e6:	2b20      	cmp	r3, #32
 800d4e8:	d117      	bne.n	800d51a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d4ea:	4b40      	ldr	r3, [pc, #256]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4ec:	689b      	ldr	r3, [r3, #8]
 800d4ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d005      	beq.n	800d502 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800d4f6:	4b3d      	ldr	r3, [pc, #244]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d4f8:	689b      	ldr	r3, [r3, #8]
 800d4fa:	0e1b      	lsrs	r3, r3, #24
 800d4fc:	f003 030f 	and.w	r3, r3, #15
 800d500:	e006      	b.n	800d510 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800d502:	4b3a      	ldr	r3, [pc, #232]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d508:	041b      	lsls	r3, r3, #16
 800d50a:	0e1b      	lsrs	r3, r3, #24
 800d50c:	f003 030f 	and.w	r3, r3, #15
 800d510:	4a38      	ldr	r2, [pc, #224]	@ (800d5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800d512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d516:	637b      	str	r3, [r7, #52]	@ 0x34
 800d518:	e389      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800d51a:	2300      	movs	r3, #0
 800d51c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d51e:	e386      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800d520:	4b32      	ldr	r3, [pc, #200]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d526:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d52a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d52e:	d112      	bne.n	800d556 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800d530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d536:	d10e      	bne.n	800d556 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d538:	4b2c      	ldr	r3, [pc, #176]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d53a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d53e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d542:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d546:	d102      	bne.n	800d54e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800d548:	23fa      	movs	r3, #250	@ 0xfa
 800d54a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d54c:	e36f      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800d54e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d552:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d554:	e36b      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800d556:	4b25      	ldr	r3, [pc, #148]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d55e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d562:	d106      	bne.n	800d572 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800d564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d566:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d56a:	d102      	bne.n	800d572 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800d56c:	4b20      	ldr	r3, [pc, #128]	@ (800d5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800d56e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d570:	e35d      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800d572:	4b1e      	ldr	r3, [pc, #120]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d574:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d578:	f003 0302 	and.w	r3, r3, #2
 800d57c:	2b02      	cmp	r3, #2
 800d57e:	d107      	bne.n	800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800d580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d582:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d586:	d103      	bne.n	800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800d588:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d58c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d58e:	e34e      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800d590:	2300      	movs	r3, #0
 800d592:	637b      	str	r3, [r7, #52]	@ 0x34
 800d594:	e34b      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800d596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d59a:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d59e:	430b      	orrs	r3, r1
 800d5a0:	d14e      	bne.n	800d640 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800d5a2:	4b12      	ldr	r3, [pc, #72]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d5a8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800d5ac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800d5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d103      	bne.n	800d5bc <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800d5b4:	f7fd fbb8 	bl	800ad28 <HAL_RCC_GetPCLK1Freq>
 800d5b8:	6378      	str	r0, [r7, #52]	@ 0x34
 800d5ba:	e338      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800d5bc:	4b0b      	ldr	r3, [pc, #44]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d5c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d5c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d5ca:	d119      	bne.n	800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800d5cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d5d2:	d115      	bne.n	800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d5d4:	4b05      	ldr	r3, [pc, #20]	@ (800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800d5d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d5da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d5de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d5e2:	d109      	bne.n	800d5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800d5e4:	23fa      	movs	r3, #250	@ 0xfa
 800d5e6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d5e8:	e321      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800d5ea:	bf00      	nop
 800d5ec:	46020c00 	.word	0x46020c00
 800d5f0:	00f42400 	.word	0x00f42400
 800d5f4:	08011940 	.word	0x08011940
      }
      else
      {
        frequency = LSI_VALUE;
 800d5f8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d5fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800d5fe:	e316      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800d600:	4ba8      	ldr	r3, [pc, #672]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d60c:	d106      	bne.n	800d61c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800d60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d610:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d614:	d102      	bne.n	800d61c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800d616:	4ba4      	ldr	r3, [pc, #656]	@ (800d8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d618:	637b      	str	r3, [r7, #52]	@ 0x34
 800d61a:	e308      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800d61c:	4ba1      	ldr	r3, [pc, #644]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d61e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d622:	f003 0302 	and.w	r3, r3, #2
 800d626:	2b02      	cmp	r3, #2
 800d628:	d107      	bne.n	800d63a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800d62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d62c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d630:	d103      	bne.n	800d63a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800d632:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d636:	637b      	str	r3, [r7, #52]	@ 0x34
 800d638:	e2f9      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800d63a:	2300      	movs	r3, #0
 800d63c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d63e:	e2f6      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800d640:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d644:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800d648:	430b      	orrs	r3, r1
 800d64a:	d12d      	bne.n	800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800d64c:	4b95      	ldr	r3, [pc, #596]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d64e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d652:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800d656:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800d658:	4b92      	ldr	r3, [pc, #584]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d660:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d664:	d105      	bne.n	800d672 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800d666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d102      	bne.n	800d672 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800d66c:	4b8e      	ldr	r3, [pc, #568]	@ (800d8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d66e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d670:	e2dd      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800d672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d678:	d107      	bne.n	800d68a <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d67a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d67e:	4618      	mov	r0, r3
 800d680:	f7fe fb4c 	bl	800bd1c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800d684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d686:	637b      	str	r3, [r7, #52]	@ 0x34
 800d688:	e2d1      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800d68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d68c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d690:	d107      	bne.n	800d6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d692:	f107 0318 	add.w	r3, r7, #24
 800d696:	4618      	mov	r0, r3
 800d698:	f7fe fc9a 	bl	800bfd0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800d69c:	69bb      	ldr	r3, [r7, #24]
 800d69e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6a0:	e2c5      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6a6:	e2c2      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800d6a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6ac:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800d6b0:	430b      	orrs	r3, r1
 800d6b2:	d156      	bne.n	800d762 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800d6b4:	4b7b      	ldr	r3, [pc, #492]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d6b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d6ba:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d6be:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d6c6:	d028      	beq.n	800d71a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800d6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d6ce:	d845      	bhi.n	800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d6d6:	d013      	beq.n	800d700 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800d6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d6de:	d83d      	bhi.n	800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800d6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d004      	beq.n	800d6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800d6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d6ec:	d004      	beq.n	800d6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800d6ee:	e035      	b.n	800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800d6f0:	f7fd fb2e 	bl	800ad50 <HAL_RCC_GetPCLK2Freq>
 800d6f4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d6f6:	e29a      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d6f8:	f7fd f9fa 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800d6fc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d6fe:	e296      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d700:	4b68      	ldr	r3, [pc, #416]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d70c:	d102      	bne.n	800d714 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800d70e:	4b66      	ldr	r3, [pc, #408]	@ (800d8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d710:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d712:	e28c      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d714:	2300      	movs	r3, #0
 800d716:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d718:	e289      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d71a:	4b62      	ldr	r3, [pc, #392]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f003 0320 	and.w	r3, r3, #32
 800d722:	2b20      	cmp	r3, #32
 800d724:	d117      	bne.n	800d756 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d726:	4b5f      	ldr	r3, [pc, #380]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d005      	beq.n	800d73e <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800d732:	4b5c      	ldr	r3, [pc, #368]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d734:	689b      	ldr	r3, [r3, #8]
 800d736:	0e1b      	lsrs	r3, r3, #24
 800d738:	f003 030f 	and.w	r3, r3, #15
 800d73c:	e006      	b.n	800d74c <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800d73e:	4b59      	ldr	r3, [pc, #356]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d740:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d744:	041b      	lsls	r3, r3, #16
 800d746:	0e1b      	lsrs	r3, r3, #24
 800d748:	f003 030f 	and.w	r3, r3, #15
 800d74c:	4a57      	ldr	r2, [pc, #348]	@ (800d8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d74e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d752:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d754:	e26b      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d756:	2300      	movs	r3, #0
 800d758:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d75a:	e268      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d75c:	2300      	movs	r3, #0
 800d75e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d760:	e265      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800d762:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d766:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800d76a:	430b      	orrs	r3, r1
 800d76c:	d156      	bne.n	800d81c <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800d76e:	4b4d      	ldr	r3, [pc, #308]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d774:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d778:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d77c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d780:	d028      	beq.n	800d7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800d782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d784:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d788:	d845      	bhi.n	800d816 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d78c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d790:	d013      	beq.n	800d7ba <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800d792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d794:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d798:	d83d      	bhi.n	800d816 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800d79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d004      	beq.n	800d7aa <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800d7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7a6:	d004      	beq.n	800d7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800d7a8:	e035      	b.n	800d816 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800d7aa:	f7fd fabd 	bl	800ad28 <HAL_RCC_GetPCLK1Freq>
 800d7ae:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d7b0:	e23d      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d7b2:	f7fd f99d 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800d7b6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d7b8:	e239      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d7ba:	4b3a      	ldr	r3, [pc, #232]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7c6:	d102      	bne.n	800d7ce <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800d7c8:	4b37      	ldr	r3, [pc, #220]	@ (800d8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800d7ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d7cc:	e22f      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d7d2:	e22c      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d7d4:	4b33      	ldr	r3, [pc, #204]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	f003 0320 	and.w	r3, r3, #32
 800d7dc:	2b20      	cmp	r3, #32
 800d7de:	d117      	bne.n	800d810 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d7e0:	4b30      	ldr	r3, [pc, #192]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7e2:	689b      	ldr	r3, [r3, #8]
 800d7e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d005      	beq.n	800d7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800d7ec:	4b2d      	ldr	r3, [pc, #180]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	0e1b      	lsrs	r3, r3, #24
 800d7f2:	f003 030f 	and.w	r3, r3, #15
 800d7f6:	e006      	b.n	800d806 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800d7f8:	4b2a      	ldr	r3, [pc, #168]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d7fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d7fe:	041b      	lsls	r3, r3, #16
 800d800:	0e1b      	lsrs	r3, r3, #24
 800d802:	f003 030f 	and.w	r3, r3, #15
 800d806:	4a29      	ldr	r2, [pc, #164]	@ (800d8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800d808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d80c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d80e:	e20e      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d810:	2300      	movs	r3, #0
 800d812:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d814:	e20b      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d816:	2300      	movs	r3, #0
 800d818:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d81a:	e208      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800d81c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d820:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800d824:	430b      	orrs	r3, r1
 800d826:	d17c      	bne.n	800d922 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800d828:	4b1e      	ldr	r3, [pc, #120]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800d82a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d82e:	f003 0318 	and.w	r3, r3, #24
 800d832:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800d834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d836:	2b18      	cmp	r3, #24
 800d838:	d870      	bhi.n	800d91c <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800d83a:	a201      	add	r2, pc, #4	@ (adr r2, 800d840 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800d83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d840:	0800d8b1 	.word	0x0800d8b1
 800d844:	0800d91d 	.word	0x0800d91d
 800d848:	0800d91d 	.word	0x0800d91d
 800d84c:	0800d91d 	.word	0x0800d91d
 800d850:	0800d91d 	.word	0x0800d91d
 800d854:	0800d91d 	.word	0x0800d91d
 800d858:	0800d91d 	.word	0x0800d91d
 800d85c:	0800d91d 	.word	0x0800d91d
 800d860:	0800d8b9 	.word	0x0800d8b9
 800d864:	0800d91d 	.word	0x0800d91d
 800d868:	0800d91d 	.word	0x0800d91d
 800d86c:	0800d91d 	.word	0x0800d91d
 800d870:	0800d91d 	.word	0x0800d91d
 800d874:	0800d91d 	.word	0x0800d91d
 800d878:	0800d91d 	.word	0x0800d91d
 800d87c:	0800d91d 	.word	0x0800d91d
 800d880:	0800d8c1 	.word	0x0800d8c1
 800d884:	0800d91d 	.word	0x0800d91d
 800d888:	0800d91d 	.word	0x0800d91d
 800d88c:	0800d91d 	.word	0x0800d91d
 800d890:	0800d91d 	.word	0x0800d91d
 800d894:	0800d91d 	.word	0x0800d91d
 800d898:	0800d91d 	.word	0x0800d91d
 800d89c:	0800d91d 	.word	0x0800d91d
 800d8a0:	0800d8db 	.word	0x0800d8db
 800d8a4:	46020c00 	.word	0x46020c00
 800d8a8:	00f42400 	.word	0x00f42400
 800d8ac:	08011940 	.word	0x08011940
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800d8b0:	f7fd fa62 	bl	800ad78 <HAL_RCC_GetPCLK3Freq>
 800d8b4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d8b6:	e1ba      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d8b8:	f7fd f91a 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800d8bc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d8be:	e1b6      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d8c0:	4b9f      	ldr	r3, [pc, #636]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d8c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8cc:	d102      	bne.n	800d8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800d8ce:	4b9d      	ldr	r3, [pc, #628]	@ (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800d8d0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d8d2:	e1ac      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d8d8:	e1a9      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d8da:	4b99      	ldr	r3, [pc, #612]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f003 0320 	and.w	r3, r3, #32
 800d8e2:	2b20      	cmp	r3, #32
 800d8e4:	d117      	bne.n	800d916 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d8e6:	4b96      	ldr	r3, [pc, #600]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d005      	beq.n	800d8fe <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800d8f2:	4b93      	ldr	r3, [pc, #588]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d8f4:	689b      	ldr	r3, [r3, #8]
 800d8f6:	0e1b      	lsrs	r3, r3, #24
 800d8f8:	f003 030f 	and.w	r3, r3, #15
 800d8fc:	e006      	b.n	800d90c <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800d8fe:	4b90      	ldr	r3, [pc, #576]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d900:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d904:	041b      	lsls	r3, r3, #16
 800d906:	0e1b      	lsrs	r3, r3, #24
 800d908:	f003 030f 	and.w	r3, r3, #15
 800d90c:	4a8e      	ldr	r2, [pc, #568]	@ (800db48 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d912:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d914:	e18b      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d916:	2300      	movs	r3, #0
 800d918:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d91a:	e188      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d91c:	2300      	movs	r3, #0
 800d91e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d920:	e185      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800d922:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d926:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800d92a:	430b      	orrs	r3, r1
 800d92c:	d155      	bne.n	800d9da <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800d92e:	4b84      	ldr	r3, [pc, #528]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d930:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d934:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800d938:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d93c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d940:	d013      	beq.n	800d96a <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800d942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d944:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d948:	d844      	bhi.n	800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d94c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d950:	d013      	beq.n	800d97a <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800d952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d954:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d958:	d83c      	bhi.n	800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800d95a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d014      	beq.n	800d98a <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800d960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d962:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d966:	d014      	beq.n	800d992 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800d968:	e034      	b.n	800d9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d96a:	f107 0318 	add.w	r3, r7, #24
 800d96e:	4618      	mov	r0, r3
 800d970:	f7fe fb2e 	bl	800bfd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800d974:	69fb      	ldr	r3, [r7, #28]
 800d976:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d978:	e159      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d97a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d97e:	4618      	mov	r0, r3
 800d980:	f7fe f9cc 	bl	800bd1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800d984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d986:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d988:	e151      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800d98a:	f7fd f8b1 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800d98e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d990:	e14d      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800d992:	4b6b      	ldr	r3, [pc, #428]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f003 0320 	and.w	r3, r3, #32
 800d99a:	2b20      	cmp	r3, #32
 800d99c:	d117      	bne.n	800d9ce <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800d99e:	4b68      	ldr	r3, [pc, #416]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9a0:	689b      	ldr	r3, [r3, #8]
 800d9a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d005      	beq.n	800d9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800d9aa:	4b65      	ldr	r3, [pc, #404]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9ac:	689b      	ldr	r3, [r3, #8]
 800d9ae:	0e1b      	lsrs	r3, r3, #24
 800d9b0:	f003 030f 	and.w	r3, r3, #15
 800d9b4:	e006      	b.n	800d9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800d9b6:	4b62      	ldr	r3, [pc, #392]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d9bc:	041b      	lsls	r3, r3, #16
 800d9be:	0e1b      	lsrs	r3, r3, #24
 800d9c0:	f003 030f 	and.w	r3, r3, #15
 800d9c4:	4a60      	ldr	r2, [pc, #384]	@ (800db48 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800d9c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d9cc:	e12f      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9d2:	e12c      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9d8:	e129      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800d9da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9de:	1e59      	subs	r1, r3, #1
 800d9e0:	ea52 0301 	orrs.w	r3, r2, r1
 800d9e4:	d13c      	bne.n	800da60 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800d9e6:	4b56      	ldr	r3, [pc, #344]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800d9e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d9ec:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800d9f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800d9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d9f8:	d027      	beq.n	800da4a <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800d9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800da00:	d82b      	bhi.n	800da5a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800da02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800da08:	d017      	beq.n	800da3a <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800da0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800da10:	d823      	bhi.n	800da5a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800da12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da14:	2b00      	cmp	r3, #0
 800da16:	d004      	beq.n	800da22 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800da18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800da1e:	d004      	beq.n	800da2a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800da20:	e01b      	b.n	800da5a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800da22:	f7fd f865 	bl	800aaf0 <HAL_RCC_GetSysClockFreq>
 800da26:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800da28:	e101      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800da2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da2e:	4618      	mov	r0, r3
 800da30:	f7fe f974 	bl	800bd1c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800da34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da38:	e0f9      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da3a:	f107 0318 	add.w	r3, r7, #24
 800da3e:	4618      	mov	r0, r3
 800da40:	f7fe fac6 	bl	800bfd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da48:	e0f1      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da4a:	f107 030c 	add.w	r3, r7, #12
 800da4e:	4618      	mov	r0, r3
 800da50:	f7fe fc18 	bl	800c284 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da58:	e0e9      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800da5a:	2300      	movs	r3, #0
 800da5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da5e:	e0e6      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800da60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da64:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800da68:	430b      	orrs	r3, r1
 800da6a:	d131      	bne.n	800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800da6c:	4b34      	ldr	r3, [pc, #208]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800da72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da76:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800da78:	4b31      	ldr	r3, [pc, #196]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da7e:	f003 0302 	and.w	r3, r3, #2
 800da82:	2b02      	cmp	r3, #2
 800da84:	d106      	bne.n	800da94 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800da86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d103      	bne.n	800da94 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800da8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da90:	637b      	str	r3, [r7, #52]	@ 0x34
 800da92:	e0cc      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800da94:	4b2a      	ldr	r3, [pc, #168]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800da96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800da9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800daa2:	d112      	bne.n	800daca <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800daa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800daaa:	d10e      	bne.n	800daca <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800daac:	4b24      	ldr	r3, [pc, #144]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800daae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dab6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800daba:	d102      	bne.n	800dac2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800dabc:	23fa      	movs	r3, #250	@ 0xfa
 800dabe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dac0:	e0b5      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800dac2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800dac6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800dac8:	e0b1      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800daca:	2300      	movs	r3, #0
 800dacc:	637b      	str	r3, [r7, #52]	@ 0x34
 800dace:	e0ae      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800dad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dad4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800dad8:	430b      	orrs	r3, r1
 800dada:	d13b      	bne.n	800db54 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800dadc:	4b18      	ldr	r3, [pc, #96]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800dade:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dae2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800dae6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800dae8:	4b15      	ldr	r3, [pc, #84]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800daf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800daf4:	d105      	bne.n	800db02 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800daf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d102      	bne.n	800db02 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800dafc:	4b13      	ldr	r3, [pc, #76]	@ (800db4c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800dafe:	637b      	str	r3, [r7, #52]	@ 0x34
 800db00:	e095      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800db02:	4b0f      	ldr	r3, [pc, #60]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800db0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db0e:	d106      	bne.n	800db1e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800db10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db16:	d102      	bne.n	800db1e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800db18:	4b0d      	ldr	r3, [pc, #52]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800db1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800db1c:	e087      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800db1e:	4b08      	ldr	r3, [pc, #32]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db2a:	d106      	bne.n	800db3a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800db2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db32:	d102      	bne.n	800db3a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800db34:	4b03      	ldr	r3, [pc, #12]	@ (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800db36:	637b      	str	r3, [r7, #52]	@ 0x34
 800db38:	e079      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800db3a:	2300      	movs	r3, #0
 800db3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800db3e:	e076      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800db40:	46020c00 	.word	0x46020c00
 800db44:	00f42400 	.word	0x00f42400
 800db48:	08011940 	.word	0x08011940
 800db4c:	02dc6c00 	.word	0x02dc6c00
 800db50:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800db54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db58:	1e99      	subs	r1, r3, #2
 800db5a:	ea52 0301 	orrs.w	r3, r2, r1
 800db5e:	d120      	bne.n	800dba2 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800db60:	4b35      	ldr	r3, [pc, #212]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800db62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800db66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800db6a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800db6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d004      	beq.n	800db7c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800db72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800db78:	d008      	beq.n	800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800db7a:	e00f      	b.n	800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db7c:	f107 030c 	add.w	r3, r7, #12
 800db80:	4618      	mov	r0, r3
 800db82:	f7fe fb7f 	bl	800c284 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db8a:	e050      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db8c:	f107 0318 	add.w	r3, r7, #24
 800db90:	4618      	mov	r0, r3
 800db92:	f7fe fa1d 	bl	800bfd0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800db96:	6a3b      	ldr	r3, [r7, #32]
 800db98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db9a:	e048      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800db9c:	2300      	movs	r3, #0
 800db9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dba0:	e045      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800dba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dba6:	f1a3 0108 	sub.w	r1, r3, #8
 800dbaa:	ea52 0301 	orrs.w	r3, r2, r1
 800dbae:	d13c      	bne.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800dbb0:	4b21      	ldr	r3, [pc, #132]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dbb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dbb6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800dbba:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800dbbc:	4b1e      	ldr	r3, [pc, #120]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dbc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dbc8:	d105      	bne.n	800dbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800dbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d102      	bne.n	800dbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800dbd0:	4b1a      	ldr	r3, [pc, #104]	@ (800dc3c <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800dbd2:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbd4:	e02b      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800dbd6:	4b18      	ldr	r3, [pc, #96]	@ (800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dbde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dbe2:	d106      	bne.n	800dbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800dbe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dbea:	d102      	bne.n	800dbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800dbec:	4b14      	ldr	r3, [pc, #80]	@ (800dc40 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800dbee:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbf0:	e01d      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800dbf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbf8:	d107      	bne.n	800dc0a <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dbfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fe f88c 	bl	800bd1c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800dc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc06:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc08:	e011      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800dc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc0c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800dc10:	d108      	bne.n	800dc24 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dc12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7fe f880 	bl	800bd1c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800dc1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc1e:	085b      	lsrs	r3, r3, #1
 800dc20:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc22:	e004      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800dc24:	2300      	movs	r3, #0
 800dc26:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc28:	e001      	b.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800dc2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3738      	adds	r7, #56	@ 0x38
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}
 800dc38:	46020c00 	.word	0x46020c00
 800dc3c:	00f42400 	.word	0x00f42400
 800dc40:	007a1200 	.word	0x007a1200

0800dc44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800dc4c:	4b47      	ldr	r3, [pc, #284]	@ (800dd6c <RCCEx_PLL2_Config+0x128>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4a46      	ldr	r2, [pc, #280]	@ (800dd6c <RCCEx_PLL2_Config+0x128>)
 800dc52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dc56:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dc58:	f7f5 f824 	bl	8002ca4 <HAL_GetTick>
 800dc5c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dc5e:	e008      	b.n	800dc72 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dc60:	f7f5 f820 	bl	8002ca4 <HAL_GetTick>
 800dc64:	4602      	mov	r2, r0
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	1ad3      	subs	r3, r2, r3
 800dc6a:	2b02      	cmp	r3, #2
 800dc6c:	d901      	bls.n	800dc72 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800dc6e:	2303      	movs	r3, #3
 800dc70:	e077      	b.n	800dd62 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dc72:	4b3e      	ldr	r3, [pc, #248]	@ (800dd6c <RCCEx_PLL2_Config+0x128>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d1f0      	bne.n	800dc60 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800dc7e:	4b3b      	ldr	r3, [pc, #236]	@ (800dd6c <RCCEx_PLL2_Config+0x128>)
 800dc80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc82:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800dc86:	f023 0303 	bic.w	r3, r3, #3
 800dc8a:	687a      	ldr	r2, [r7, #4]
 800dc8c:	6811      	ldr	r1, [r2, #0]
 800dc8e:	687a      	ldr	r2, [r7, #4]
 800dc90:	6852      	ldr	r2, [r2, #4]
 800dc92:	3a01      	subs	r2, #1
 800dc94:	0212      	lsls	r2, r2, #8
 800dc96:	430a      	orrs	r2, r1
 800dc98:	4934      	ldr	r1, [pc, #208]	@ (800dd6c <RCCEx_PLL2_Config+0x128>)
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800dc9e:	4b33      	ldr	r3, [pc, #204]	@ (800dd6c <RCCEx_PLL2_Config+0x128>)
 800dca0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dca2:	4b33      	ldr	r3, [pc, #204]	@ (800dd70 <RCCEx_PLL2_Config+0x12c>)
 800dca4:	4013      	ands	r3, r2
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	6892      	ldr	r2, [r2, #8]
 800dcaa:	3a01      	subs	r2, #1
 800dcac:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	68d2      	ldr	r2, [r2, #12]
 800dcb4:	3a01      	subs	r2, #1
 800dcb6:	0252      	lsls	r2, r2, #9
 800dcb8:	b292      	uxth	r2, r2
 800dcba:	4311      	orrs	r1, r2
 800dcbc:	687a      	ldr	r2, [r7, #4]
 800dcbe:	6912      	ldr	r2, [r2, #16]
 800dcc0:	3a01      	subs	r2, #1
 800dcc2:	0412      	lsls	r2, r2, #16
 800dcc4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800dcc8:	4311      	orrs	r1, r2
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	6952      	ldr	r2, [r2, #20]
 800dcce:	3a01      	subs	r2, #1
 800dcd0:	0612      	lsls	r2, r2, #24
 800dcd2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800dcd6:	430a      	orrs	r2, r1
 800dcd8:	4924      	ldr	r1, [pc, #144]	@ (800dd6c <RCCEx_PLL2_Config+0x128>)
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800dcde:	4b23      	ldr	r3, [pc, #140]	@ (800dd6c <RCCEx_PLL2_Config+0x128>)
 800dce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dce2:	f023 020c 	bic.w	r2, r3, #12
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	699b      	ldr	r3, [r3, #24]
 800dcea:	4920      	ldr	r1, [pc, #128]	@ (800dd6c <RCCEx_PLL2_Config+0x128>)
 800dcec:	4313      	orrs	r3, r2
 800dcee:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800dcf0:	4b1e      	ldr	r3, [pc, #120]	@ (800dd6c <RCCEx_PLL2_Config+0x128>)
 800dcf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6a1b      	ldr	r3, [r3, #32]
 800dcf8:	491c      	ldr	r1, [pc, #112]	@ (800dd6c <RCCEx_PLL2_Config+0x128>)
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800dcfe:	4b1b      	ldr	r3, [pc, #108]	@ (800dd6c <RCCEx_PLL2_Config+0x128>)
 800dd00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd02:	4a1a      	ldr	r2, [pc, #104]	@ (800dd6c <RCCEx_PLL2_Config+0x128>)
 800dd04:	f023 0310 	bic.w	r3, r3, #16
 800dd08:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dd0a:	4b18      	ldr	r3, [pc, #96]	@ (800dd6c <RCCEx_PLL2_Config+0x128>)
 800dd0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dd12:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	69d2      	ldr	r2, [r2, #28]
 800dd1a:	00d2      	lsls	r2, r2, #3
 800dd1c:	4913      	ldr	r1, [pc, #76]	@ (800dd6c <RCCEx_PLL2_Config+0x128>)
 800dd1e:	4313      	orrs	r3, r2
 800dd20:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800dd22:	4b12      	ldr	r3, [pc, #72]	@ (800dd6c <RCCEx_PLL2_Config+0x128>)
 800dd24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd26:	4a11      	ldr	r2, [pc, #68]	@ (800dd6c <RCCEx_PLL2_Config+0x128>)
 800dd28:	f043 0310 	orr.w	r3, r3, #16
 800dd2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800dd2e:	4b0f      	ldr	r3, [pc, #60]	@ (800dd6c <RCCEx_PLL2_Config+0x128>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	4a0e      	ldr	r2, [pc, #56]	@ (800dd6c <RCCEx_PLL2_Config+0x128>)
 800dd34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dd38:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dd3a:	f7f4 ffb3 	bl	8002ca4 <HAL_GetTick>
 800dd3e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dd40:	e008      	b.n	800dd54 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dd42:	f7f4 ffaf 	bl	8002ca4 <HAL_GetTick>
 800dd46:	4602      	mov	r2, r0
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	1ad3      	subs	r3, r2, r3
 800dd4c:	2b02      	cmp	r3, #2
 800dd4e:	d901      	bls.n	800dd54 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800dd50:	2303      	movs	r3, #3
 800dd52:	e006      	b.n	800dd62 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dd54:	4b05      	ldr	r3, [pc, #20]	@ (800dd6c <RCCEx_PLL2_Config+0x128>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d0f0      	beq.n	800dd42 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800dd60:	2300      	movs	r3, #0

}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3710      	adds	r7, #16
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	46020c00 	.word	0x46020c00
 800dd70:	80800000 	.word	0x80800000

0800dd74 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800dd7c:	4b47      	ldr	r3, [pc, #284]	@ (800de9c <RCCEx_PLL3_Config+0x128>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4a46      	ldr	r2, [pc, #280]	@ (800de9c <RCCEx_PLL3_Config+0x128>)
 800dd82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dd86:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dd88:	f7f4 ff8c 	bl	8002ca4 <HAL_GetTick>
 800dd8c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dd8e:	e008      	b.n	800dda2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dd90:	f7f4 ff88 	bl	8002ca4 <HAL_GetTick>
 800dd94:	4602      	mov	r2, r0
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	1ad3      	subs	r3, r2, r3
 800dd9a:	2b02      	cmp	r3, #2
 800dd9c:	d901      	bls.n	800dda2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800dd9e:	2303      	movs	r3, #3
 800dda0:	e077      	b.n	800de92 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dda2:	4b3e      	ldr	r3, [pc, #248]	@ (800de9c <RCCEx_PLL3_Config+0x128>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d1f0      	bne.n	800dd90 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ddae:	4b3b      	ldr	r3, [pc, #236]	@ (800de9c <RCCEx_PLL3_Config+0x128>)
 800ddb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddb2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ddb6:	f023 0303 	bic.w	r3, r3, #3
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	6811      	ldr	r1, [r2, #0]
 800ddbe:	687a      	ldr	r2, [r7, #4]
 800ddc0:	6852      	ldr	r2, [r2, #4]
 800ddc2:	3a01      	subs	r2, #1
 800ddc4:	0212      	lsls	r2, r2, #8
 800ddc6:	430a      	orrs	r2, r1
 800ddc8:	4934      	ldr	r1, [pc, #208]	@ (800de9c <RCCEx_PLL3_Config+0x128>)
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	630b      	str	r3, [r1, #48]	@ 0x30
 800ddce:	4b33      	ldr	r3, [pc, #204]	@ (800de9c <RCCEx_PLL3_Config+0x128>)
 800ddd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ddd2:	4b33      	ldr	r3, [pc, #204]	@ (800dea0 <RCCEx_PLL3_Config+0x12c>)
 800ddd4:	4013      	ands	r3, r2
 800ddd6:	687a      	ldr	r2, [r7, #4]
 800ddd8:	6892      	ldr	r2, [r2, #8]
 800ddda:	3a01      	subs	r2, #1
 800dddc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800dde0:	687a      	ldr	r2, [r7, #4]
 800dde2:	68d2      	ldr	r2, [r2, #12]
 800dde4:	3a01      	subs	r2, #1
 800dde6:	0252      	lsls	r2, r2, #9
 800dde8:	b292      	uxth	r2, r2
 800ddea:	4311      	orrs	r1, r2
 800ddec:	687a      	ldr	r2, [r7, #4]
 800ddee:	6912      	ldr	r2, [r2, #16]
 800ddf0:	3a01      	subs	r2, #1
 800ddf2:	0412      	lsls	r2, r2, #16
 800ddf4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ddf8:	4311      	orrs	r1, r2
 800ddfa:	687a      	ldr	r2, [r7, #4]
 800ddfc:	6952      	ldr	r2, [r2, #20]
 800ddfe:	3a01      	subs	r2, #1
 800de00:	0612      	lsls	r2, r2, #24
 800de02:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800de06:	430a      	orrs	r2, r1
 800de08:	4924      	ldr	r1, [pc, #144]	@ (800de9c <RCCEx_PLL3_Config+0x128>)
 800de0a:	4313      	orrs	r3, r2
 800de0c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800de0e:	4b23      	ldr	r3, [pc, #140]	@ (800de9c <RCCEx_PLL3_Config+0x128>)
 800de10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de12:	f023 020c 	bic.w	r2, r3, #12
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	699b      	ldr	r3, [r3, #24]
 800de1a:	4920      	ldr	r1, [pc, #128]	@ (800de9c <RCCEx_PLL3_Config+0x128>)
 800de1c:	4313      	orrs	r3, r2
 800de1e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800de20:	4b1e      	ldr	r3, [pc, #120]	@ (800de9c <RCCEx_PLL3_Config+0x128>)
 800de22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6a1b      	ldr	r3, [r3, #32]
 800de28:	491c      	ldr	r1, [pc, #112]	@ (800de9c <RCCEx_PLL3_Config+0x128>)
 800de2a:	4313      	orrs	r3, r2
 800de2c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800de2e:	4b1b      	ldr	r3, [pc, #108]	@ (800de9c <RCCEx_PLL3_Config+0x128>)
 800de30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de32:	4a1a      	ldr	r2, [pc, #104]	@ (800de9c <RCCEx_PLL3_Config+0x128>)
 800de34:	f023 0310 	bic.w	r3, r3, #16
 800de38:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800de3a:	4b18      	ldr	r3, [pc, #96]	@ (800de9c <RCCEx_PLL3_Config+0x128>)
 800de3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800de42:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800de46:	687a      	ldr	r2, [r7, #4]
 800de48:	69d2      	ldr	r2, [r2, #28]
 800de4a:	00d2      	lsls	r2, r2, #3
 800de4c:	4913      	ldr	r1, [pc, #76]	@ (800de9c <RCCEx_PLL3_Config+0x128>)
 800de4e:	4313      	orrs	r3, r2
 800de50:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800de52:	4b12      	ldr	r3, [pc, #72]	@ (800de9c <RCCEx_PLL3_Config+0x128>)
 800de54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de56:	4a11      	ldr	r2, [pc, #68]	@ (800de9c <RCCEx_PLL3_Config+0x128>)
 800de58:	f043 0310 	orr.w	r3, r3, #16
 800de5c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800de5e:	4b0f      	ldr	r3, [pc, #60]	@ (800de9c <RCCEx_PLL3_Config+0x128>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	4a0e      	ldr	r2, [pc, #56]	@ (800de9c <RCCEx_PLL3_Config+0x128>)
 800de64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800de68:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800de6a:	f7f4 ff1b 	bl	8002ca4 <HAL_GetTick>
 800de6e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800de70:	e008      	b.n	800de84 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800de72:	f7f4 ff17 	bl	8002ca4 <HAL_GetTick>
 800de76:	4602      	mov	r2, r0
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	1ad3      	subs	r3, r2, r3
 800de7c:	2b02      	cmp	r3, #2
 800de7e:	d901      	bls.n	800de84 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800de80:	2303      	movs	r3, #3
 800de82:	e006      	b.n	800de92 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800de84:	4b05      	ldr	r3, [pc, #20]	@ (800de9c <RCCEx_PLL3_Config+0x128>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d0f0      	beq.n	800de72 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800de90:	2300      	movs	r3, #0
}
 800de92:	4618      	mov	r0, r3
 800de94:	3710      	adds	r7, #16
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	46020c00 	.word	0x46020c00
 800dea0:	80800000 	.word	0x80800000

0800dea4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b084      	sub	sp, #16
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800deac:	2301      	movs	r3, #1
 800deae:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d071      	beq.n	800df9a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800debc:	b2db      	uxtb	r3, r3
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d106      	bne.n	800ded0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2200      	movs	r2, #0
 800dec6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f7f4 f990 	bl	80021f0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2202      	movs	r2, #2
 800ded4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ded8:	4b32      	ldr	r3, [pc, #200]	@ (800dfa4 <HAL_RTC_Init+0x100>)
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	f003 0310 	and.w	r3, r3, #16
 800dee0:	2b10      	cmp	r3, #16
 800dee2:	d051      	beq.n	800df88 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dee4:	4b2f      	ldr	r3, [pc, #188]	@ (800dfa4 <HAL_RTC_Init+0x100>)
 800dee6:	22ca      	movs	r2, #202	@ 0xca
 800dee8:	625a      	str	r2, [r3, #36]	@ 0x24
 800deea:	4b2e      	ldr	r3, [pc, #184]	@ (800dfa4 <HAL_RTC_Init+0x100>)
 800deec:	2253      	movs	r2, #83	@ 0x53
 800deee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f000 f88b 	bl	800e00c <RTC_EnterInitMode>
 800def6:	4603      	mov	r3, r0
 800def8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800defa:	7bfb      	ldrb	r3, [r7, #15]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d13f      	bne.n	800df80 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800df00:	4b28      	ldr	r3, [pc, #160]	@ (800dfa4 <HAL_RTC_Init+0x100>)
 800df02:	699b      	ldr	r3, [r3, #24]
 800df04:	4a27      	ldr	r2, [pc, #156]	@ (800dfa4 <HAL_RTC_Init+0x100>)
 800df06:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800df0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df0e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800df10:	4b24      	ldr	r3, [pc, #144]	@ (800dfa4 <HAL_RTC_Init+0x100>)
 800df12:	699a      	ldr	r2, [r3, #24]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6859      	ldr	r1, [r3, #4]
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	691b      	ldr	r3, [r3, #16]
 800df1c:	4319      	orrs	r1, r3
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	699b      	ldr	r3, [r3, #24]
 800df22:	430b      	orrs	r3, r1
 800df24:	491f      	ldr	r1, [pc, #124]	@ (800dfa4 <HAL_RTC_Init+0x100>)
 800df26:	4313      	orrs	r3, r2
 800df28:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	68da      	ldr	r2, [r3, #12]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	689b      	ldr	r3, [r3, #8]
 800df32:	041b      	lsls	r3, r3, #16
 800df34:	491b      	ldr	r1, [pc, #108]	@ (800dfa4 <HAL_RTC_Init+0x100>)
 800df36:	4313      	orrs	r3, r2
 800df38:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800df3a:	4b1a      	ldr	r3, [pc, #104]	@ (800dfa4 <HAL_RTC_Init+0x100>)
 800df3c:	68db      	ldr	r3, [r3, #12]
 800df3e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df4a:	430b      	orrs	r3, r1
 800df4c:	4915      	ldr	r1, [pc, #84]	@ (800dfa4 <HAL_RTC_Init+0x100>)
 800df4e:	4313      	orrs	r3, r2
 800df50:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f000 f896 	bl	800e084 <RTC_ExitInitMode>
 800df58:	4603      	mov	r3, r0
 800df5a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800df5c:	7bfb      	ldrb	r3, [r7, #15]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d10e      	bne.n	800df80 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800df62:	4b10      	ldr	r3, [pc, #64]	@ (800dfa4 <HAL_RTC_Init+0x100>)
 800df64:	699b      	ldr	r3, [r3, #24]
 800df66:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6a19      	ldr	r1, [r3, #32]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	69db      	ldr	r3, [r3, #28]
 800df72:	4319      	orrs	r1, r3
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	695b      	ldr	r3, [r3, #20]
 800df78:	430b      	orrs	r3, r1
 800df7a:	490a      	ldr	r1, [pc, #40]	@ (800dfa4 <HAL_RTC_Init+0x100>)
 800df7c:	4313      	orrs	r3, r2
 800df7e:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800df80:	4b08      	ldr	r3, [pc, #32]	@ (800dfa4 <HAL_RTC_Init+0x100>)
 800df82:	22ff      	movs	r2, #255	@ 0xff
 800df84:	625a      	str	r2, [r3, #36]	@ 0x24
 800df86:	e001      	b.n	800df8c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800df88:	2300      	movs	r3, #0
 800df8a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800df8c:	7bfb      	ldrb	r3, [r7, #15]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d103      	bne.n	800df9a <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2201      	movs	r2, #1
 800df96:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800df9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3710      	adds	r7, #16
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	46007800 	.word	0x46007800

0800dfa8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800dfb0:	4b15      	ldr	r3, [pc, #84]	@ (800e008 <HAL_RTC_WaitForSynchro+0x60>)
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	4a14      	ldr	r2, [pc, #80]	@ (800e008 <HAL_RTC_WaitForSynchro+0x60>)
 800dfb6:	f023 0320 	bic.w	r3, r3, #32
 800dfba:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800dfbc:	f7f4 fe72 	bl	8002ca4 <HAL_GetTick>
 800dfc0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800dfc2:	e013      	b.n	800dfec <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dfc4:	f7f4 fe6e 	bl	8002ca4 <HAL_GetTick>
 800dfc8:	4602      	mov	r2, r0
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	1ad3      	subs	r3, r2, r3
 800dfce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dfd2:	d90b      	bls.n	800dfec <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800dfd4:	4b0c      	ldr	r3, [pc, #48]	@ (800e008 <HAL_RTC_WaitForSynchro+0x60>)
 800dfd6:	68db      	ldr	r3, [r3, #12]
 800dfd8:	f003 0320 	and.w	r3, r3, #32
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d10c      	bne.n	800dffa <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2203      	movs	r2, #3
 800dfe4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800dfe8:	2303      	movs	r3, #3
 800dfea:	e008      	b.n	800dffe <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800dfec:	4b06      	ldr	r3, [pc, #24]	@ (800e008 <HAL_RTC_WaitForSynchro+0x60>)
 800dfee:	68db      	ldr	r3, [r3, #12]
 800dff0:	f003 0320 	and.w	r3, r3, #32
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d0e5      	beq.n	800dfc4 <HAL_RTC_WaitForSynchro+0x1c>
 800dff8:	e000      	b.n	800dffc <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800dffa:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800dffc:	2300      	movs	r3, #0
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	46007800 	.word	0x46007800

0800e00c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e014:	2300      	movs	r3, #0
 800e016:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e018:	4b19      	ldr	r3, [pc, #100]	@ (800e080 <RTC_EnterInitMode+0x74>)
 800e01a:	68db      	ldr	r3, [r3, #12]
 800e01c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e020:	2b00      	cmp	r3, #0
 800e022:	d128      	bne.n	800e076 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e024:	4b16      	ldr	r3, [pc, #88]	@ (800e080 <RTC_EnterInitMode+0x74>)
 800e026:	68db      	ldr	r3, [r3, #12]
 800e028:	4a15      	ldr	r2, [pc, #84]	@ (800e080 <RTC_EnterInitMode+0x74>)
 800e02a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e02e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800e030:	f7f4 fe38 	bl	8002ca4 <HAL_GetTick>
 800e034:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e036:	e013      	b.n	800e060 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e038:	f7f4 fe34 	bl	8002ca4 <HAL_GetTick>
 800e03c:	4602      	mov	r2, r0
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	1ad3      	subs	r3, r2, r3
 800e042:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e046:	d90b      	bls.n	800e060 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e048:	4b0d      	ldr	r3, [pc, #52]	@ (800e080 <RTC_EnterInitMode+0x74>)
 800e04a:	68db      	ldr	r3, [r3, #12]
 800e04c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e050:	2b00      	cmp	r3, #0
 800e052:	d10f      	bne.n	800e074 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800e054:	2303      	movs	r3, #3
 800e056:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2203      	movs	r2, #3
 800e05c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e060:	4b07      	ldr	r3, [pc, #28]	@ (800e080 <RTC_EnterInitMode+0x74>)
 800e062:	68db      	ldr	r3, [r3, #12]
 800e064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d104      	bne.n	800e076 <RTC_EnterInitMode+0x6a>
 800e06c:	7bfb      	ldrb	r3, [r7, #15]
 800e06e:	2b03      	cmp	r3, #3
 800e070:	d1e2      	bne.n	800e038 <RTC_EnterInitMode+0x2c>
 800e072:	e000      	b.n	800e076 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800e074:	bf00      	nop
        }
      }
    }
  }

  return status;
 800e076:	7bfb      	ldrb	r3, [r7, #15]
}
 800e078:	4618      	mov	r0, r3
 800e07a:	3710      	adds	r7, #16
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}
 800e080:	46007800 	.word	0x46007800

0800e084 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e08c:	2300      	movs	r3, #0
 800e08e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e090:	4b1a      	ldr	r3, [pc, #104]	@ (800e0fc <RTC_ExitInitMode+0x78>)
 800e092:	68db      	ldr	r3, [r3, #12]
 800e094:	4a19      	ldr	r2, [pc, #100]	@ (800e0fc <RTC_ExitInitMode+0x78>)
 800e096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e09a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e09c:	4b17      	ldr	r3, [pc, #92]	@ (800e0fc <RTC_ExitInitMode+0x78>)
 800e09e:	699b      	ldr	r3, [r3, #24]
 800e0a0:	f003 0320 	and.w	r3, r3, #32
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d10c      	bne.n	800e0c2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f7ff ff7d 	bl	800dfa8 <HAL_RTC_WaitForSynchro>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d01e      	beq.n	800e0f2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2203      	movs	r2, #3
 800e0b8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e0bc:	2303      	movs	r3, #3
 800e0be:	73fb      	strb	r3, [r7, #15]
 800e0c0:	e017      	b.n	800e0f2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e0c2:	4b0e      	ldr	r3, [pc, #56]	@ (800e0fc <RTC_ExitInitMode+0x78>)
 800e0c4:	699b      	ldr	r3, [r3, #24]
 800e0c6:	4a0d      	ldr	r2, [pc, #52]	@ (800e0fc <RTC_ExitInitMode+0x78>)
 800e0c8:	f023 0320 	bic.w	r3, r3, #32
 800e0cc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f7ff ff6a 	bl	800dfa8 <HAL_RTC_WaitForSynchro>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d005      	beq.n	800e0e6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2203      	movs	r2, #3
 800e0de:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800e0e2:	2303      	movs	r3, #3
 800e0e4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e0e6:	4b05      	ldr	r3, [pc, #20]	@ (800e0fc <RTC_ExitInitMode+0x78>)
 800e0e8:	699b      	ldr	r3, [r3, #24]
 800e0ea:	4a04      	ldr	r2, [pc, #16]	@ (800e0fc <RTC_ExitInitMode+0x78>)
 800e0ec:	f043 0320 	orr.w	r3, r3, #32
 800e0f0:	6193      	str	r3, [r2, #24]
  }
  return status;
 800e0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}
 800e0fc:	46007800 	.word	0x46007800

0800e100 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800e100:	b480      	push	{r7}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	4910      	ldr	r1, [pc, #64]	@ (800e154 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800e114:	4313      	orrs	r3, r2
 800e116:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	689a      	ldr	r2, [r3, #8]
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	68db      	ldr	r3, [r3, #12]
 800e120:	431a      	orrs	r2, r3
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	699b      	ldr	r3, [r3, #24]
 800e126:	490c      	ldr	r1, [pc, #48]	@ (800e158 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e128:	4313      	orrs	r3, r2
 800e12a:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800e12c:	4b0a      	ldr	r3, [pc, #40]	@ (800e158 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e12e:	6a1b      	ldr	r3, [r3, #32]
 800e130:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	6919      	ldr	r1, [r3, #16]
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	695b      	ldr	r3, [r3, #20]
 800e13c:	041b      	lsls	r3, r3, #16
 800e13e:	430b      	orrs	r3, r1
 800e140:	4905      	ldr	r1, [pc, #20]	@ (800e158 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800e142:	4313      	orrs	r3, r2
 800e144:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800e146:	2300      	movs	r3, #0
}
 800e148:	4618      	mov	r0, r3
 800e14a:	370c      	adds	r7, #12
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr
 800e154:	46007800 	.word	0x46007800
 800e158:	46007c00 	.word	0x46007c00

0800e15c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b086      	sub	sp, #24
 800e160:	af00      	add	r7, sp, #0
 800e162:	60f8      	str	r0, [r7, #12]
 800e164:	60b9      	str	r1, [r7, #8]
 800e166:	607a      	str	r2, [r7, #4]
 800e168:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	2b02      	cmp	r3, #2
 800e16e:	d904      	bls.n	800e17a <HAL_SAI_InitProtocol+0x1e>
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	3b03      	subs	r3, #3
 800e174:	2b01      	cmp	r3, #1
 800e176:	d812      	bhi.n	800e19e <HAL_SAI_InitProtocol+0x42>
 800e178:	e008      	b.n	800e18c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	687a      	ldr	r2, [r7, #4]
 800e17e:	68b9      	ldr	r1, [r7, #8]
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	f000 faeb 	bl	800e75c <SAI_InitI2S>
 800e186:	4603      	mov	r3, r0
 800e188:	75fb      	strb	r3, [r7, #23]
      break;
 800e18a:	e00b      	b.n	800e1a4 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	68b9      	ldr	r1, [r7, #8]
 800e192:	68f8      	ldr	r0, [r7, #12]
 800e194:	f000 fb94 	bl	800e8c0 <SAI_InitPCM>
 800e198:	4603      	mov	r3, r0
 800e19a:	75fb      	strb	r3, [r7, #23]
      break;
 800e19c:	e002      	b.n	800e1a4 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800e19e:	2301      	movs	r3, #1
 800e1a0:	75fb      	strb	r3, [r7, #23]
      break;
 800e1a2:	bf00      	nop
  }

  if (status == HAL_OK)
 800e1a4:	7dfb      	ldrb	r3, [r7, #23]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d104      	bne.n	800e1b4 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800e1aa:	68f8      	ldr	r0, [r7, #12]
 800e1ac:	f000 f808 	bl	800e1c0 <HAL_SAI_Init>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e1b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3718      	adds	r7, #24
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
	...

0800e1c0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b08a      	sub	sp, #40	@ 0x28
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d101      	bne.n	800e1d2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e1ce      	b.n	800e570 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	d10e      	bne.n	800e1fa <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4a83      	ldr	r2, [pc, #524]	@ (800e3f0 <HAL_SAI_Init+0x230>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d107      	bne.n	800e1f6 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800e1ea:	2b01      	cmp	r3, #1
 800e1ec:	d103      	bne.n	800e1f6 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d001      	beq.n	800e1fa <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	e1ba      	b.n	800e570 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e200:	b2db      	uxtb	r3, r3
 800e202:	2b00      	cmp	r3, #0
 800e204:	d106      	bne.n	800e214 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2200      	movs	r2, #0
 800e20a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f7f4 f9c0 	bl	8002594 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f000 fc0d 	bl	800ea34 <SAI_Disable>
 800e21a:	4603      	mov	r3, r0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d001      	beq.n	800e224 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800e220:	2301      	movs	r3, #1
 800e222:	e1a5      	b.n	800e570 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2202      	movs	r2, #2
 800e228:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	68db      	ldr	r3, [r3, #12]
 800e230:	2b02      	cmp	r3, #2
 800e232:	d00c      	beq.n	800e24e <HAL_SAI_Init+0x8e>
 800e234:	2b02      	cmp	r3, #2
 800e236:	d80d      	bhi.n	800e254 <HAL_SAI_Init+0x94>
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d002      	beq.n	800e242 <HAL_SAI_Init+0x82>
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d003      	beq.n	800e248 <HAL_SAI_Init+0x88>
 800e240:	e008      	b.n	800e254 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800e242:	2300      	movs	r3, #0
 800e244:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e246:	e008      	b.n	800e25a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800e248:	2310      	movs	r3, #16
 800e24a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e24c:	e005      	b.n	800e25a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800e24e:	2320      	movs	r3, #32
 800e250:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e252:	e002      	b.n	800e25a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800e254:	2300      	movs	r3, #0
 800e256:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e258:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	689b      	ldr	r3, [r3, #8]
 800e25e:	2b03      	cmp	r3, #3
 800e260:	d81d      	bhi.n	800e29e <HAL_SAI_Init+0xde>
 800e262:	a201      	add	r2, pc, #4	@ (adr r2, 800e268 <HAL_SAI_Init+0xa8>)
 800e264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e268:	0800e279 	.word	0x0800e279
 800e26c:	0800e27f 	.word	0x0800e27f
 800e270:	0800e287 	.word	0x0800e287
 800e274:	0800e28f 	.word	0x0800e28f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800e278:	2300      	movs	r3, #0
 800e27a:	61fb      	str	r3, [r7, #28]
      break;
 800e27c:	e012      	b.n	800e2a4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800e27e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e282:	61fb      	str	r3, [r7, #28]
      break;
 800e284:	e00e      	b.n	800e2a4 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e286:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e28a:	61fb      	str	r3, [r7, #28]
      break;
 800e28c:	e00a      	b.n	800e2a4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800e28e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e292:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800e294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e296:	f043 0301 	orr.w	r3, r3, #1
 800e29a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800e29c:	e002      	b.n	800e2a4 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	61fb      	str	r3, [r7, #28]
      break;
 800e2a2:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4a51      	ldr	r2, [pc, #324]	@ (800e3f0 <HAL_SAI_Init+0x230>)
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d004      	beq.n	800e2b8 <HAL_SAI_Init+0xf8>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	4a50      	ldr	r2, [pc, #320]	@ (800e3f4 <HAL_SAI_Init+0x234>)
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d103      	bne.n	800e2c0 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800e2b8:	4a4f      	ldr	r2, [pc, #316]	@ (800e3f8 <HAL_SAI_Init+0x238>)
 800e2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2bc:	6013      	str	r3, [r2, #0]
 800e2be:	e002      	b.n	800e2c6 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800e2c0:	4a4e      	ldr	r2, [pc, #312]	@ (800e3fc <HAL_SAI_Init+0x23c>)
 800e2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2c4:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6a1b      	ldr	r3, [r3, #32]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d077      	beq.n	800e3be <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	4a47      	ldr	r2, [pc, #284]	@ (800e3f0 <HAL_SAI_Init+0x230>)
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d004      	beq.n	800e2e2 <HAL_SAI_Init+0x122>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4a45      	ldr	r2, [pc, #276]	@ (800e3f4 <HAL_SAI_Init+0x234>)
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d107      	bne.n	800e2f2 <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800e2e2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e2e6:	f04f 0100 	mov.w	r1, #0
 800e2ea:	f7fe f925 	bl	800c538 <HAL_RCCEx_GetPeriphCLKFreq>
 800e2ee:	61b8      	str	r0, [r7, #24]
 800e2f0:	e006      	b.n	800e300 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800e2f2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800e2f6:	f04f 0100 	mov.w	r1, #0
 800e2fa:	f7fe f91d 	bl	800c538 <HAL_RCCEx_GetPeriphCLKFreq>
 800e2fe:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	699b      	ldr	r3, [r3, #24]
 800e304:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e308:	d120      	bne.n	800e34c <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e30e:	2b04      	cmp	r3, #4
 800e310:	d102      	bne.n	800e318 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800e312:	2340      	movs	r3, #64	@ 0x40
 800e314:	613b      	str	r3, [r7, #16]
 800e316:	e00a      	b.n	800e32e <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e31c:	2b08      	cmp	r3, #8
 800e31e:	d103      	bne.n	800e328 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800e320:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e324:	613b      	str	r3, [r7, #16]
 800e326:	e002      	b.n	800e32e <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e32c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800e32e:	69ba      	ldr	r2, [r7, #24]
 800e330:	4613      	mov	r3, r2
 800e332:	009b      	lsls	r3, r3, #2
 800e334:	4413      	add	r3, r2
 800e336:	005b      	lsls	r3, r3, #1
 800e338:	4619      	mov	r1, r3
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6a1b      	ldr	r3, [r3, #32]
 800e33e:	693a      	ldr	r2, [r7, #16]
 800e340:	fb02 f303 	mul.w	r3, r2, r3
 800e344:	fbb1 f3f3 	udiv	r3, r1, r3
 800e348:	617b      	str	r3, [r7, #20]
 800e34a:	e017      	b.n	800e37c <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e350:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e354:	d101      	bne.n	800e35a <HAL_SAI_Init+0x19a>
 800e356:	2302      	movs	r3, #2
 800e358:	e000      	b.n	800e35c <HAL_SAI_Init+0x19c>
 800e35a:	2301      	movs	r3, #1
 800e35c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800e35e:	69ba      	ldr	r2, [r7, #24]
 800e360:	4613      	mov	r3, r2
 800e362:	009b      	lsls	r3, r3, #2
 800e364:	4413      	add	r3, r2
 800e366:	005b      	lsls	r3, r3, #1
 800e368:	4619      	mov	r1, r3
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6a1b      	ldr	r3, [r3, #32]
 800e36e:	68fa      	ldr	r2, [r7, #12]
 800e370:	fb02 f303 	mul.w	r3, r2, r3
 800e374:	021b      	lsls	r3, r3, #8
 800e376:	fbb1 f3f3 	udiv	r3, r1, r3
 800e37a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	4a20      	ldr	r2, [pc, #128]	@ (800e400 <HAL_SAI_Init+0x240>)
 800e380:	fba2 2303 	umull	r2, r3, r2, r3
 800e384:	08da      	lsrs	r2, r3, #3
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800e38a:	6979      	ldr	r1, [r7, #20]
 800e38c:	4b1c      	ldr	r3, [pc, #112]	@ (800e400 <HAL_SAI_Init+0x240>)
 800e38e:	fba3 2301 	umull	r2, r3, r3, r1
 800e392:	08da      	lsrs	r2, r3, #3
 800e394:	4613      	mov	r3, r2
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	4413      	add	r3, r2
 800e39a:	005b      	lsls	r3, r3, #1
 800e39c:	1aca      	subs	r2, r1, r3
 800e39e:	2a08      	cmp	r2, #8
 800e3a0:	d904      	bls.n	800e3ac <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3a6:	1c5a      	adds	r2, r3, #1
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3b0:	2b04      	cmp	r3, #4
 800e3b2:	d104      	bne.n	800e3be <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3b8:	085a      	lsrs	r2, r3, #1
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d003      	beq.n	800e3ce <HAL_SAI_Init+0x20e>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	2b02      	cmp	r3, #2
 800e3cc:	d109      	bne.n	800e3e2 <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3d2:	2b01      	cmp	r3, #1
 800e3d4:	d101      	bne.n	800e3da <HAL_SAI_Init+0x21a>
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	e001      	b.n	800e3de <HAL_SAI_Init+0x21e>
 800e3da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e3de:	623b      	str	r3, [r7, #32]
 800e3e0:	e012      	b.n	800e408 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3e6:	2b01      	cmp	r3, #1
 800e3e8:	d10c      	bne.n	800e404 <HAL_SAI_Init+0x244>
 800e3ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e3ee:	e00a      	b.n	800e406 <HAL_SAI_Init+0x246>
 800e3f0:	40015404 	.word	0x40015404
 800e3f4:	40015424 	.word	0x40015424
 800e3f8:	40015400 	.word	0x40015400
 800e3fc:	40015800 	.word	0x40015800
 800e400:	cccccccd 	.word	0xcccccccd
 800e404:	2300      	movs	r3, #0
 800e406:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	6819      	ldr	r1, [r3, #0]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681a      	ldr	r2, [r3, #0]
 800e412:	4b59      	ldr	r3, [pc, #356]	@ (800e578 <HAL_SAI_Init+0x3b8>)
 800e414:	400b      	ands	r3, r1
 800e416:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	6819      	ldr	r1, [r3, #0]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	685a      	ldr	r2, [r3, #4]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e426:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e42c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e432:	431a      	orrs	r2, r3
 800e434:	6a3b      	ldr	r3, [r7, #32]
 800e436:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800e440:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	695b      	ldr	r3, [r3, #20]
 800e446:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e44c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e452:	051b      	lsls	r3, r3, #20
 800e454:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800e45a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	691b      	ldr	r3, [r3, #16]
 800e460:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	430a      	orrs	r2, r1
 800e468:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	6812      	ldr	r2, [r2, #0]
 800e474:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800e478:	f023 030f 	bic.w	r3, r3, #15
 800e47c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	6859      	ldr	r1, [r3, #4]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	69da      	ldr	r2, [r3, #28]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e48c:	431a      	orrs	r2, r3
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e492:	431a      	orrs	r2, r3
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	430a      	orrs	r2, r1
 800e49a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	6899      	ldr	r1, [r3, #8]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681a      	ldr	r2, [r3, #0]
 800e4a6:	4b35      	ldr	r3, [pc, #212]	@ (800e57c <HAL_SAI_Init+0x3bc>)
 800e4a8:	400b      	ands	r3, r1
 800e4aa:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	6899      	ldr	r1, [r3, #8]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4b6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e4bc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800e4c2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800e4c8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4ce:	3b01      	subs	r3, #1
 800e4d0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800e4d2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	430a      	orrs	r2, r1
 800e4da:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	68d9      	ldr	r1, [r3, #12]
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681a      	ldr	r2, [r3, #0]
 800e4e6:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800e4ea:	400b      	ands	r3, r1
 800e4ec:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	68d9      	ldr	r1, [r3, #12]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4fc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e502:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e504:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e50a:	3b01      	subs	r3, #1
 800e50c:	021b      	lsls	r3, r3, #8
 800e50e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	430a      	orrs	r2, r1
 800e516:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	4a18      	ldr	r2, [pc, #96]	@ (800e580 <HAL_SAI_Init+0x3c0>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	d119      	bne.n	800e556 <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800e522:	4b18      	ldr	r3, [pc, #96]	@ (800e584 <HAL_SAI_Init+0x3c4>)
 800e524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e526:	4a17      	ldr	r2, [pc, #92]	@ (800e584 <HAL_SAI_Init+0x3c4>)
 800e528:	f023 0301 	bic.w	r3, r3, #1
 800e52c:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e534:	2b01      	cmp	r3, #1
 800e536:	d10e      	bne.n	800e556 <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e540:	3b01      	subs	r3, #1
 800e542:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800e544:	490f      	ldr	r1, [pc, #60]	@ (800e584 <HAL_SAI_Init+0x3c4>)
 800e546:	4313      	orrs	r3, r2
 800e548:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800e54a:	4b0e      	ldr	r3, [pc, #56]	@ (800e584 <HAL_SAI_Init+0x3c4>)
 800e54c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e54e:	4a0d      	ldr	r2, [pc, #52]	@ (800e584 <HAL_SAI_Init+0x3c4>)
 800e550:	f043 0301 	orr.w	r3, r3, #1
 800e554:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2200      	movs	r2, #0
 800e55a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2201      	movs	r2, #1
 800e562:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2200      	movs	r2, #0
 800e56a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800e56e:	2300      	movs	r3, #0
}
 800e570:	4618      	mov	r0, r3
 800e572:	3728      	adds	r7, #40	@ 0x28
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	f005c010 	.word	0xf005c010
 800e57c:	fff88000 	.word	0xfff88000
 800e580:	40015404 	.word	0x40015404
 800e584:	40015400 	.word	0x40015400

0800e588 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b086      	sub	sp, #24
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	60b9      	str	r1, [r7, #8]
 800e592:	4613      	mov	r3, r2
 800e594:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d002      	beq.n	800e5a2 <HAL_SAI_Receive_DMA+0x1a>
 800e59c:	88fb      	ldrh	r3, [r7, #6]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d101      	bne.n	800e5a6 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	e0c6      	b.n	800e734 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e5ac:	b2db      	uxtb	r3, r3
 800e5ae:	2b01      	cmp	r3, #1
 800e5b0:	f040 80bf 	bne.w	800e732 <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e5ba:	2b01      	cmp	r3, #1
 800e5bc:	d101      	bne.n	800e5c2 <HAL_SAI_Receive_DMA+0x3a>
 800e5be:	2302      	movs	r3, #2
 800e5c0:	e0b8      	b.n	800e734 <HAL_SAI_Receive_DMA+0x1ac>
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	68ba      	ldr	r2, [r7, #8]
 800e5ce:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	88fa      	ldrh	r2, [r7, #6]
 800e5d4:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	88fa      	ldrh	r2, [r7, #6]
 800e5dc:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2222      	movs	r2, #34	@ 0x22
 800e5ec:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5f6:	4a51      	ldr	r2, [pc, #324]	@ (800e73c <HAL_SAI_Receive_DMA+0x1b4>)
 800e5f8:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e600:	4a4f      	ldr	r2, [pc, #316]	@ (800e740 <HAL_SAI_Receive_DMA+0x1b8>)
 800e602:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e60a:	4a4e      	ldr	r2, [pc, #312]	@ (800e744 <HAL_SAI_Receive_DMA+0x1bc>)
 800e60c:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e614:	2200      	movs	r2, #0
 800e616:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e61c:	2b40      	cmp	r3, #64	@ 0x40
 800e61e:	d106      	bne.n	800e62e <HAL_SAI_Receive_DMA+0xa6>
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e624:	2b00      	cmp	r3, #0
 800e626:	d102      	bne.n	800e62e <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800e628:	88fb      	ldrh	r3, [r7, #6]
 800e62a:	613b      	str	r3, [r7, #16]
 800e62c:	e00a      	b.n	800e644 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e632:	2b80      	cmp	r3, #128	@ 0x80
 800e634:	d803      	bhi.n	800e63e <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800e636:	88fb      	ldrh	r3, [r7, #6]
 800e638:	005b      	lsls	r3, r3, #1
 800e63a:	613b      	str	r3, [r7, #16]
 800e63c:	e002      	b.n	800e644 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800e63e:	88fb      	ldrh	r3, [r7, #6]
 800e640:	009b      	lsls	r3, r3, #2
 800e642:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e64a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e64c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e650:	2b00      	cmp	r3, #0
 800e652:	d02d      	beq.n	800e6b0 <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e65a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d021      	beq.n	800e6a4 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	693a      	ldr	r2, [r7, #16]
 800e66c:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f103 021c 	add.w	r2, r3, #28
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e67c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e68c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e698:	4618      	mov	r0, r3
 800e69a:	f7f7 ffa5 	bl	80065e8 <HAL_DMAEx_List_Start_IT>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	75fb      	strb	r3, [r7, #23]
 800e6a2:	e014      	b.n	800e6ce <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	e041      	b.n	800e734 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	331c      	adds	r3, #28
 800e6bc:	4619      	mov	r1, r3
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	f7f6 fffd 	bl	80056c4 <HAL_DMA_Start_IT>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800e6ce:	7dfb      	ldrb	r3, [r7, #23]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d005      	beq.n	800e6e0 <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800e6dc:	2301      	movs	r3, #1
 800e6de:	e029      	b.n	800e734 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e6e0:	2100      	movs	r1, #0
 800e6e2:	68f8      	ldr	r0, [r7, #12]
 800e6e4:	f000 f96e 	bl	800e9c4 <SAI_InterruptFlag>
 800e6e8:	4601      	mov	r1, r0
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	691a      	ldr	r2, [r3, #16]
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	430a      	orrs	r2, r1
 800e6f6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e706:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e712:	2b00      	cmp	r3, #0
 800e714:	d107      	bne.n	800e726 <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	681a      	ldr	r2, [r3, #0]
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e724:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	2200      	movs	r2, #0
 800e72a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800e72e:	2300      	movs	r3, #0
 800e730:	e000      	b.n	800e734 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800e732:	2302      	movs	r3, #2
  }
}
 800e734:	4618      	mov	r0, r3
 800e736:	3718      	adds	r7, #24
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	0800eb07 	.word	0x0800eb07
 800e740:	0800eaa9 	.word	0x0800eaa9
 800e744:	0800eb23 	.word	0x0800eb23

0800e748 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800e748:	b480      	push	{r7}
 800e74a:	b083      	sub	sp, #12
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800e750:	bf00      	nop
 800e752:	370c      	adds	r7, #12
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr

0800e75c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b087      	sub	sp, #28
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	60b9      	str	r1, [r7, #8]
 800e766:	607a      	str	r2, [r7, #4]
 800e768:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e76a:	2300      	movs	r3, #0
 800e76c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	2200      	movs	r2, #0
 800e772:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2200      	movs	r2, #0
 800e778:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d003      	beq.n	800e78a <SAI_InitI2S+0x2e>
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	685b      	ldr	r3, [r3, #4]
 800e786:	2b02      	cmp	r3, #2
 800e788:	d103      	bne.n	800e792 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2200      	movs	r2, #0
 800e78e:	651a      	str	r2, [r3, #80]	@ 0x50
 800e790:	e002      	b.n	800e798 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2201      	movs	r2, #1
 800e796:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e79e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e7a6:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	683a      	ldr	r2, [r7, #0]
 800e7b2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	f003 0301 	and.w	r3, r3, #1
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d001      	beq.n	800e7c2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	e077      	b.n	800e8b2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d107      	bne.n	800e7d8 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e7d4:	665a      	str	r2, [r3, #100]	@ 0x64
 800e7d6:	e006      	b.n	800e7e6 <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e7de:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2b03      	cmp	r3, #3
 800e7ea:	d84f      	bhi.n	800e88c <SAI_InitI2S+0x130>
 800e7ec:	a201      	add	r2, pc, #4	@ (adr r2, 800e7f4 <SAI_InitI2S+0x98>)
 800e7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7f2:	bf00      	nop
 800e7f4:	0800e805 	.word	0x0800e805
 800e7f8:	0800e827 	.word	0x0800e827
 800e7fc:	0800e849 	.word	0x0800e849
 800e800:	0800e86b 	.word	0x0800e86b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2280      	movs	r2, #128	@ 0x80
 800e808:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	085b      	lsrs	r3, r3, #1
 800e80e:	015a      	lsls	r2, r3, #5
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	085b      	lsrs	r3, r3, #1
 800e818:	011a      	lsls	r2, r3, #4
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2240      	movs	r2, #64	@ 0x40
 800e822:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e824:	e035      	b.n	800e892 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	2280      	movs	r2, #128	@ 0x80
 800e82a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	085b      	lsrs	r3, r3, #1
 800e830:	019a      	lsls	r2, r3, #6
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	085b      	lsrs	r3, r3, #1
 800e83a:	015a      	lsls	r2, r3, #5
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	2280      	movs	r2, #128	@ 0x80
 800e844:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e846:	e024      	b.n	800e892 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	22c0      	movs	r2, #192	@ 0xc0
 800e84c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	085b      	lsrs	r3, r3, #1
 800e852:	019a      	lsls	r2, r3, #6
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	085b      	lsrs	r3, r3, #1
 800e85c:	015a      	lsls	r2, r3, #5
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2280      	movs	r2, #128	@ 0x80
 800e866:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e868:	e013      	b.n	800e892 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	22e0      	movs	r2, #224	@ 0xe0
 800e86e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	085b      	lsrs	r3, r3, #1
 800e874:	019a      	lsls	r2, r3, #6
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	085b      	lsrs	r3, r3, #1
 800e87e:	015a      	lsls	r2, r3, #5
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	2280      	movs	r2, #128	@ 0x80
 800e888:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e88a:	e002      	b.n	800e892 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800e88c:	2301      	movs	r3, #1
 800e88e:	75fb      	strb	r3, [r7, #23]
      break;
 800e890:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	2b02      	cmp	r3, #2
 800e896:	d10b      	bne.n	800e8b0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2b01      	cmp	r3, #1
 800e89c:	d102      	bne.n	800e8a4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	2210      	movs	r2, #16
 800e8a2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2b02      	cmp	r3, #2
 800e8a8:	d102      	bne.n	800e8b0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	2208      	movs	r2, #8
 800e8ae:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800e8b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	371c      	adds	r7, #28
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop

0800e8c0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b087      	sub	sp, #28
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	607a      	str	r2, [r7, #4]
 800e8cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	685b      	ldr	r3, [r3, #4]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d003      	beq.n	800e8ee <SAI_InitPCM+0x2e>
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	2b02      	cmp	r3, #2
 800e8ec:	d103      	bne.n	800e8f6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	2201      	movs	r2, #1
 800e8f2:	651a      	str	r2, [r3, #80]	@ 0x50
 800e8f4:	e002      	b.n	800e8fc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2200      	movs	r2, #0
 800e900:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e908:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e910:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	2200      	movs	r2, #0
 800e916:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	683a      	ldr	r2, [r7, #0]
 800e91c:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e924:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	2b04      	cmp	r3, #4
 800e92a:	d103      	bne.n	800e934 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2201      	movs	r2, #1
 800e930:	659a      	str	r2, [r3, #88]	@ 0x58
 800e932:	e002      	b.n	800e93a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	220d      	movs	r2, #13
 800e938:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2b03      	cmp	r3, #3
 800e93e:	d837      	bhi.n	800e9b0 <SAI_InitPCM+0xf0>
 800e940:	a201      	add	r2, pc, #4	@ (adr r2, 800e948 <SAI_InitPCM+0x88>)
 800e942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e946:	bf00      	nop
 800e948:	0800e959 	.word	0x0800e959
 800e94c:	0800e96f 	.word	0x0800e96f
 800e950:	0800e985 	.word	0x0800e985
 800e954:	0800e99b 	.word	0x0800e99b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	2280      	movs	r2, #128	@ 0x80
 800e95c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	011a      	lsls	r2, r3, #4
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2240      	movs	r2, #64	@ 0x40
 800e96a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e96c:	e023      	b.n	800e9b6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2280      	movs	r2, #128	@ 0x80
 800e972:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	015a      	lsls	r2, r3, #5
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2280      	movs	r2, #128	@ 0x80
 800e980:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e982:	e018      	b.n	800e9b6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	22c0      	movs	r2, #192	@ 0xc0
 800e988:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	015a      	lsls	r2, r3, #5
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	2280      	movs	r2, #128	@ 0x80
 800e996:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e998:	e00d      	b.n	800e9b6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	22e0      	movs	r2, #224	@ 0xe0
 800e99e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	015a      	lsls	r2, r3, #5
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2280      	movs	r2, #128	@ 0x80
 800e9ac:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800e9ae:	e002      	b.n	800e9b6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	75fb      	strb	r3, [r7, #23]
      break;
 800e9b4:	bf00      	nop
  }

  return status;
 800e9b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	371c      	adds	r7, #28
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c2:	4770      	bx	lr

0800e9c4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800e9c4:	b480      	push	{r7}
 800e9c6:	b085      	sub	sp, #20
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
 800e9cc:	460b      	mov	r3, r1
 800e9ce:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800e9d4:	78fb      	ldrb	r3, [r7, #3]
 800e9d6:	2b01      	cmp	r3, #1
 800e9d8:	d103      	bne.n	800e9e2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	f043 0308 	orr.w	r3, r3, #8
 800e9e0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e9e6:	2b08      	cmp	r3, #8
 800e9e8:	d10b      	bne.n	800ea02 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e9ee:	2b03      	cmp	r3, #3
 800e9f0:	d003      	beq.n	800e9fa <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	2b01      	cmp	r3, #1
 800e9f8:	d103      	bne.n	800ea02 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	f043 0310 	orr.w	r3, r3, #16
 800ea00:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	2b03      	cmp	r3, #3
 800ea08:	d003      	beq.n	800ea12 <SAI_InterruptFlag+0x4e>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	685b      	ldr	r3, [r3, #4]
 800ea0e:	2b02      	cmp	r3, #2
 800ea10:	d104      	bne.n	800ea1c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ea18:	60fb      	str	r3, [r7, #12]
 800ea1a:	e003      	b.n	800ea24 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	f043 0304 	orr.w	r3, r3, #4
 800ea22:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ea24:	68fb      	ldr	r3, [r7, #12]
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3714      	adds	r7, #20
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr
	...

0800ea34 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b085      	sub	sp, #20
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ea3c:	4b18      	ldr	r3, [pc, #96]	@ (800eaa0 <SAI_Disable+0x6c>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	4a18      	ldr	r2, [pc, #96]	@ (800eaa4 <SAI_Disable+0x70>)
 800ea42:	fba2 2303 	umull	r2, r3, r2, r3
 800ea46:	0b1b      	lsrs	r3, r3, #12
 800ea48:	009b      	lsls	r3, r3, #2
 800ea4a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	681a      	ldr	r2, [r3, #0]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ea5e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d10a      	bne.n	800ea7c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ea6c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800ea76:	2303      	movs	r3, #3
 800ea78:	72fb      	strb	r3, [r7, #11]
      break;
 800ea7a:	e009      	b.n	800ea90 <SAI_Disable+0x5c>
    }
    count--;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	3b01      	subs	r3, #1
 800ea80:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d1e7      	bne.n	800ea60 <SAI_Disable+0x2c>

  return status;
 800ea90:	7afb      	ldrb	r3, [r7, #11]
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3714      	adds	r7, #20
 800ea96:	46bd      	mov	sp, r7
 800ea98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9c:	4770      	bx	lr
 800ea9e:	bf00      	nop
 800eaa0:	20000030 	.word	0x20000030
 800eaa4:	95cbec1b 	.word	0x95cbec1b

0800eaa8 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eab4:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eaba:	2b81      	cmp	r3, #129	@ 0x81
 800eabc:	d01c      	beq.n	800eaf8 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800eacc:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	2200      	movs	r2, #0
 800ead2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ead6:	2100      	movs	r1, #0
 800ead8:	68f8      	ldr	r0, [r7, #12]
 800eada:	f7ff ff73 	bl	800e9c4 <SAI_InterruptFlag>
 800eade:	4603      	mov	r3, r0
 800eae0:	43d9      	mvns	r1, r3
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	691a      	ldr	r2, [r3, #16]
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	400a      	ands	r2, r1
 800eaee:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800eaf8:	68f8      	ldr	r0, [r7, #12]
 800eafa:	f7f2 fe0b 	bl	8001714 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800eafe:	bf00      	nop
 800eb00:	3710      	adds	r7, #16
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}

0800eb06 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b084      	sub	sp, #16
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eb12:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800eb14:	68f8      	ldr	r0, [r7, #12]
 800eb16:	f7f2 fdad 	bl	8001674 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800eb1a:	bf00      	nop
 800eb1c:	3710      	adds	r7, #16
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800eb22:	b580      	push	{r7, lr}
 800eb24:	b084      	sub	sp, #16
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eb2e:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800eb36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	681a      	ldr	r2, [r3, #0]
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800eb4e:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800eb50:	68f8      	ldr	r0, [r7, #12]
 800eb52:	f7ff ff6f 	bl	800ea34 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2200      	movs	r2, #0
 800eb62:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800eb66:	68f8      	ldr	r0, [r7, #12]
 800eb68:	f7ff fdee 	bl	800e748 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800eb6c:	bf00      	nop
 800eb6e:	3710      	adds	r7, #16
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}

0800eb74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b082      	sub	sp, #8
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d101      	bne.n	800eb86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eb82:	2301      	movs	r3, #1
 800eb84:	e049      	b.n	800ec1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eb8c:	b2db      	uxtb	r3, r3
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d106      	bne.n	800eba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2200      	movs	r2, #0
 800eb96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f7f3 fb96 	bl	80022cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2202      	movs	r2, #2
 800eba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681a      	ldr	r2, [r3, #0]
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	3304      	adds	r3, #4
 800ebb0:	4619      	mov	r1, r3
 800ebb2:	4610      	mov	r0, r2
 800ebb4:	f000 fb3c 	bl	800f230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2201      	movs	r2, #1
 800ebcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2201      	movs	r2, #1
 800ebd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2201      	movs	r2, #1
 800ebdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2201      	movs	r2, #1
 800ebec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2201      	movs	r2, #1
 800ec04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2201      	movs	r2, #1
 800ec14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ec18:	2300      	movs	r3, #0
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3708      	adds	r7, #8
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
	...

0800ec24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b085      	sub	sp, #20
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	2b01      	cmp	r3, #1
 800ec36:	d001      	beq.n	800ec3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ec38:	2301      	movs	r3, #1
 800ec3a:	e06a      	b.n	800ed12 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2202      	movs	r2, #2
 800ec40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4a35      	ldr	r2, [pc, #212]	@ (800ed20 <HAL_TIM_Base_Start+0xfc>)
 800ec4a:	4293      	cmp	r3, r2
 800ec4c:	d040      	beq.n	800ecd0 <HAL_TIM_Base_Start+0xac>
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	4a34      	ldr	r2, [pc, #208]	@ (800ed24 <HAL_TIM_Base_Start+0x100>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d03b      	beq.n	800ecd0 <HAL_TIM_Base_Start+0xac>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec60:	d036      	beq.n	800ecd0 <HAL_TIM_Base_Start+0xac>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ec6a:	d031      	beq.n	800ecd0 <HAL_TIM_Base_Start+0xac>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	4a2d      	ldr	r2, [pc, #180]	@ (800ed28 <HAL_TIM_Base_Start+0x104>)
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d02c      	beq.n	800ecd0 <HAL_TIM_Base_Start+0xac>
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	4a2c      	ldr	r2, [pc, #176]	@ (800ed2c <HAL_TIM_Base_Start+0x108>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d027      	beq.n	800ecd0 <HAL_TIM_Base_Start+0xac>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	4a2a      	ldr	r2, [pc, #168]	@ (800ed30 <HAL_TIM_Base_Start+0x10c>)
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d022      	beq.n	800ecd0 <HAL_TIM_Base_Start+0xac>
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	4a29      	ldr	r2, [pc, #164]	@ (800ed34 <HAL_TIM_Base_Start+0x110>)
 800ec90:	4293      	cmp	r3, r2
 800ec92:	d01d      	beq.n	800ecd0 <HAL_TIM_Base_Start+0xac>
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	4a27      	ldr	r2, [pc, #156]	@ (800ed38 <HAL_TIM_Base_Start+0x114>)
 800ec9a:	4293      	cmp	r3, r2
 800ec9c:	d018      	beq.n	800ecd0 <HAL_TIM_Base_Start+0xac>
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	4a26      	ldr	r2, [pc, #152]	@ (800ed3c <HAL_TIM_Base_Start+0x118>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d013      	beq.n	800ecd0 <HAL_TIM_Base_Start+0xac>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	4a24      	ldr	r2, [pc, #144]	@ (800ed40 <HAL_TIM_Base_Start+0x11c>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d00e      	beq.n	800ecd0 <HAL_TIM_Base_Start+0xac>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	4a23      	ldr	r2, [pc, #140]	@ (800ed44 <HAL_TIM_Base_Start+0x120>)
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	d009      	beq.n	800ecd0 <HAL_TIM_Base_Start+0xac>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a21      	ldr	r2, [pc, #132]	@ (800ed48 <HAL_TIM_Base_Start+0x124>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d004      	beq.n	800ecd0 <HAL_TIM_Base_Start+0xac>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4a20      	ldr	r2, [pc, #128]	@ (800ed4c <HAL_TIM_Base_Start+0x128>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d115      	bne.n	800ecfc <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	689a      	ldr	r2, [r3, #8]
 800ecd6:	4b1e      	ldr	r3, [pc, #120]	@ (800ed50 <HAL_TIM_Base_Start+0x12c>)
 800ecd8:	4013      	ands	r3, r2
 800ecda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2b06      	cmp	r3, #6
 800ece0:	d015      	beq.n	800ed0e <HAL_TIM_Base_Start+0xea>
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ece8:	d011      	beq.n	800ed0e <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	681a      	ldr	r2, [r3, #0]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f042 0201 	orr.w	r2, r2, #1
 800ecf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecfa:	e008      	b.n	800ed0e <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	681a      	ldr	r2, [r3, #0]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	f042 0201 	orr.w	r2, r2, #1
 800ed0a:	601a      	str	r2, [r3, #0]
 800ed0c:	e000      	b.n	800ed10 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ed10:	2300      	movs	r3, #0
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	3714      	adds	r7, #20
 800ed16:	46bd      	mov	sp, r7
 800ed18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1c:	4770      	bx	lr
 800ed1e:	bf00      	nop
 800ed20:	40012c00 	.word	0x40012c00
 800ed24:	50012c00 	.word	0x50012c00
 800ed28:	40000400 	.word	0x40000400
 800ed2c:	50000400 	.word	0x50000400
 800ed30:	40000800 	.word	0x40000800
 800ed34:	50000800 	.word	0x50000800
 800ed38:	40000c00 	.word	0x40000c00
 800ed3c:	50000c00 	.word	0x50000c00
 800ed40:	40013400 	.word	0x40013400
 800ed44:	50013400 	.word	0x50013400
 800ed48:	40014000 	.word	0x40014000
 800ed4c:	50014000 	.word	0x50014000
 800ed50:	00010007 	.word	0x00010007

0800ed54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b082      	sub	sp, #8
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d101      	bne.n	800ed66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ed62:	2301      	movs	r3, #1
 800ed64:	e049      	b.n	800edfa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ed6c:	b2db      	uxtb	r3, r3
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d106      	bne.n	800ed80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2200      	movs	r2, #0
 800ed76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f7f3 fa84 	bl	8002288 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2202      	movs	r2, #2
 800ed84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681a      	ldr	r2, [r3, #0]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	3304      	adds	r3, #4
 800ed90:	4619      	mov	r1, r3
 800ed92:	4610      	mov	r0, r2
 800ed94:	f000 fa4c 	bl	800f230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2201      	movs	r2, #1
 800eda4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2201      	movs	r2, #1
 800edac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2201      	movs	r2, #1
 800edb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2201      	movs	r2, #1
 800edbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2201      	movs	r2, #1
 800edc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2201      	movs	r2, #1
 800edcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2201      	movs	r2, #1
 800eddc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2201      	movs	r2, #1
 800ede4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2201      	movs	r2, #1
 800edec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2201      	movs	r2, #1
 800edf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800edf8:	2300      	movs	r3, #0
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	3708      	adds	r7, #8
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}
	...

0800ee04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b086      	sub	sp, #24
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	60f8      	str	r0, [r7, #12]
 800ee0c:	60b9      	str	r1, [r7, #8]
 800ee0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ee10:	2300      	movs	r3, #0
 800ee12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ee1a:	2b01      	cmp	r3, #1
 800ee1c:	d101      	bne.n	800ee22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ee1e:	2302      	movs	r3, #2
 800ee20:	e0ff      	b.n	800f022 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	2201      	movs	r2, #1
 800ee26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2b14      	cmp	r3, #20
 800ee2e:	f200 80f0 	bhi.w	800f012 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ee32:	a201      	add	r2, pc, #4	@ (adr r2, 800ee38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ee34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee38:	0800ee8d 	.word	0x0800ee8d
 800ee3c:	0800f013 	.word	0x0800f013
 800ee40:	0800f013 	.word	0x0800f013
 800ee44:	0800f013 	.word	0x0800f013
 800ee48:	0800eecd 	.word	0x0800eecd
 800ee4c:	0800f013 	.word	0x0800f013
 800ee50:	0800f013 	.word	0x0800f013
 800ee54:	0800f013 	.word	0x0800f013
 800ee58:	0800ef0f 	.word	0x0800ef0f
 800ee5c:	0800f013 	.word	0x0800f013
 800ee60:	0800f013 	.word	0x0800f013
 800ee64:	0800f013 	.word	0x0800f013
 800ee68:	0800ef4f 	.word	0x0800ef4f
 800ee6c:	0800f013 	.word	0x0800f013
 800ee70:	0800f013 	.word	0x0800f013
 800ee74:	0800f013 	.word	0x0800f013
 800ee78:	0800ef91 	.word	0x0800ef91
 800ee7c:	0800f013 	.word	0x0800f013
 800ee80:	0800f013 	.word	0x0800f013
 800ee84:	0800f013 	.word	0x0800f013
 800ee88:	0800efd1 	.word	0x0800efd1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	68b9      	ldr	r1, [r7, #8]
 800ee92:	4618      	mov	r0, r3
 800ee94:	f000 fad2 	bl	800f43c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	699a      	ldr	r2, [r3, #24]
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f042 0208 	orr.w	r2, r2, #8
 800eea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	699a      	ldr	r2, [r3, #24]
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f022 0204 	bic.w	r2, r2, #4
 800eeb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	6999      	ldr	r1, [r3, #24]
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	691a      	ldr	r2, [r3, #16]
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	430a      	orrs	r2, r1
 800eec8:	619a      	str	r2, [r3, #24]
      break;
 800eeca:	e0a5      	b.n	800f018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	68b9      	ldr	r1, [r7, #8]
 800eed2:	4618      	mov	r0, r3
 800eed4:	f000 fb74 	bl	800f5c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	699a      	ldr	r2, [r3, #24]
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	699a      	ldr	r2, [r3, #24]
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	6999      	ldr	r1, [r3, #24]
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	691b      	ldr	r3, [r3, #16]
 800ef02:	021a      	lsls	r2, r3, #8
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	430a      	orrs	r2, r1
 800ef0a:	619a      	str	r2, [r3, #24]
      break;
 800ef0c:	e084      	b.n	800f018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	68b9      	ldr	r1, [r7, #8]
 800ef14:	4618      	mov	r0, r3
 800ef16:	f000 fc03 	bl	800f720 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	69da      	ldr	r2, [r3, #28]
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	f042 0208 	orr.w	r2, r2, #8
 800ef28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	69da      	ldr	r2, [r3, #28]
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	f022 0204 	bic.w	r2, r2, #4
 800ef38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	69d9      	ldr	r1, [r3, #28]
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	691a      	ldr	r2, [r3, #16]
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	430a      	orrs	r2, r1
 800ef4a:	61da      	str	r2, [r3, #28]
      break;
 800ef4c:	e064      	b.n	800f018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	68b9      	ldr	r1, [r7, #8]
 800ef54:	4618      	mov	r0, r3
 800ef56:	f000 fc91 	bl	800f87c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	69da      	ldr	r2, [r3, #28]
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ef68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	69da      	ldr	r2, [r3, #28]
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ef78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	69d9      	ldr	r1, [r3, #28]
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	691b      	ldr	r3, [r3, #16]
 800ef84:	021a      	lsls	r2, r3, #8
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	430a      	orrs	r2, r1
 800ef8c:	61da      	str	r2, [r3, #28]
      break;
 800ef8e:	e043      	b.n	800f018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	68b9      	ldr	r1, [r7, #8]
 800ef96:	4618      	mov	r0, r3
 800ef98:	f000 fd20 	bl	800f9dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f042 0208 	orr.w	r2, r2, #8
 800efaa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f022 0204 	bic.w	r2, r2, #4
 800efba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	691a      	ldr	r2, [r3, #16]
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	430a      	orrs	r2, r1
 800efcc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800efce:	e023      	b.n	800f018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	68b9      	ldr	r1, [r7, #8]
 800efd6:	4618      	mov	r0, r3
 800efd8:	f000 fd82 	bl	800fae0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800efea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800effa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	691b      	ldr	r3, [r3, #16]
 800f006:	021a      	lsls	r2, r3, #8
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	430a      	orrs	r2, r1
 800f00e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f010:	e002      	b.n	800f018 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f012:	2301      	movs	r3, #1
 800f014:	75fb      	strb	r3, [r7, #23]
      break;
 800f016:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2200      	movs	r2, #0
 800f01c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f020:	7dfb      	ldrb	r3, [r7, #23]
}
 800f022:	4618      	mov	r0, r3
 800f024:	3718      	adds	r7, #24
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop

0800f02c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b084      	sub	sp, #16
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f036:	2300      	movs	r3, #0
 800f038:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f040:	2b01      	cmp	r3, #1
 800f042:	d101      	bne.n	800f048 <HAL_TIM_ConfigClockSource+0x1c>
 800f044:	2302      	movs	r3, #2
 800f046:	e0e6      	b.n	800f216 <HAL_TIM_ConfigClockSource+0x1ea>
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2201      	movs	r2, #1
 800f04c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2202      	movs	r2, #2
 800f054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	689b      	ldr	r3, [r3, #8]
 800f05e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800f066:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f06a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f072:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	68ba      	ldr	r2, [r7, #8]
 800f07a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	4a67      	ldr	r2, [pc, #412]	@ (800f220 <HAL_TIM_ConfigClockSource+0x1f4>)
 800f082:	4293      	cmp	r3, r2
 800f084:	f000 80b1 	beq.w	800f1ea <HAL_TIM_ConfigClockSource+0x1be>
 800f088:	4a65      	ldr	r2, [pc, #404]	@ (800f220 <HAL_TIM_ConfigClockSource+0x1f4>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	f200 80b6 	bhi.w	800f1fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f090:	4a64      	ldr	r2, [pc, #400]	@ (800f224 <HAL_TIM_ConfigClockSource+0x1f8>)
 800f092:	4293      	cmp	r3, r2
 800f094:	f000 80a9 	beq.w	800f1ea <HAL_TIM_ConfigClockSource+0x1be>
 800f098:	4a62      	ldr	r2, [pc, #392]	@ (800f224 <HAL_TIM_ConfigClockSource+0x1f8>)
 800f09a:	4293      	cmp	r3, r2
 800f09c:	f200 80ae 	bhi.w	800f1fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f0a0:	4a61      	ldr	r2, [pc, #388]	@ (800f228 <HAL_TIM_ConfigClockSource+0x1fc>)
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	f000 80a1 	beq.w	800f1ea <HAL_TIM_ConfigClockSource+0x1be>
 800f0a8:	4a5f      	ldr	r2, [pc, #380]	@ (800f228 <HAL_TIM_ConfigClockSource+0x1fc>)
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	f200 80a6 	bhi.w	800f1fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f0b0:	4a5e      	ldr	r2, [pc, #376]	@ (800f22c <HAL_TIM_ConfigClockSource+0x200>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	f000 8099 	beq.w	800f1ea <HAL_TIM_ConfigClockSource+0x1be>
 800f0b8:	4a5c      	ldr	r2, [pc, #368]	@ (800f22c <HAL_TIM_ConfigClockSource+0x200>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	f200 809e 	bhi.w	800f1fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f0c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f0c4:	f000 8091 	beq.w	800f1ea <HAL_TIM_ConfigClockSource+0x1be>
 800f0c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f0cc:	f200 8096 	bhi.w	800f1fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f0d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f0d4:	f000 8089 	beq.w	800f1ea <HAL_TIM_ConfigClockSource+0x1be>
 800f0d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f0dc:	f200 808e 	bhi.w	800f1fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f0e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f0e4:	d03e      	beq.n	800f164 <HAL_TIM_ConfigClockSource+0x138>
 800f0e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f0ea:	f200 8087 	bhi.w	800f1fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f0ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f0f2:	f000 8086 	beq.w	800f202 <HAL_TIM_ConfigClockSource+0x1d6>
 800f0f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f0fa:	d87f      	bhi.n	800f1fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f0fc:	2b70      	cmp	r3, #112	@ 0x70
 800f0fe:	d01a      	beq.n	800f136 <HAL_TIM_ConfigClockSource+0x10a>
 800f100:	2b70      	cmp	r3, #112	@ 0x70
 800f102:	d87b      	bhi.n	800f1fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f104:	2b60      	cmp	r3, #96	@ 0x60
 800f106:	d050      	beq.n	800f1aa <HAL_TIM_ConfigClockSource+0x17e>
 800f108:	2b60      	cmp	r3, #96	@ 0x60
 800f10a:	d877      	bhi.n	800f1fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f10c:	2b50      	cmp	r3, #80	@ 0x50
 800f10e:	d03c      	beq.n	800f18a <HAL_TIM_ConfigClockSource+0x15e>
 800f110:	2b50      	cmp	r3, #80	@ 0x50
 800f112:	d873      	bhi.n	800f1fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f114:	2b40      	cmp	r3, #64	@ 0x40
 800f116:	d058      	beq.n	800f1ca <HAL_TIM_ConfigClockSource+0x19e>
 800f118:	2b40      	cmp	r3, #64	@ 0x40
 800f11a:	d86f      	bhi.n	800f1fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f11c:	2b30      	cmp	r3, #48	@ 0x30
 800f11e:	d064      	beq.n	800f1ea <HAL_TIM_ConfigClockSource+0x1be>
 800f120:	2b30      	cmp	r3, #48	@ 0x30
 800f122:	d86b      	bhi.n	800f1fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f124:	2b20      	cmp	r3, #32
 800f126:	d060      	beq.n	800f1ea <HAL_TIM_ConfigClockSource+0x1be>
 800f128:	2b20      	cmp	r3, #32
 800f12a:	d867      	bhi.n	800f1fc <HAL_TIM_ConfigClockSource+0x1d0>
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d05c      	beq.n	800f1ea <HAL_TIM_ConfigClockSource+0x1be>
 800f130:	2b10      	cmp	r3, #16
 800f132:	d05a      	beq.n	800f1ea <HAL_TIM_ConfigClockSource+0x1be>
 800f134:	e062      	b.n	800f1fc <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f146:	f000 fdcb 	bl	800fce0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	689b      	ldr	r3, [r3, #8]
 800f150:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f158:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	68ba      	ldr	r2, [r7, #8]
 800f160:	609a      	str	r2, [r3, #8]
      break;
 800f162:	e04f      	b.n	800f204 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f174:	f000 fdb4 	bl	800fce0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	689a      	ldr	r2, [r3, #8]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f186:	609a      	str	r2, [r3, #8]
      break;
 800f188:	e03c      	b.n	800f204 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f196:	461a      	mov	r2, r3
 800f198:	f000 fd26 	bl	800fbe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	2150      	movs	r1, #80	@ 0x50
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f000 fd7f 	bl	800fca6 <TIM_ITRx_SetConfig>
      break;
 800f1a8:	e02c      	b.n	800f204 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f1b6:	461a      	mov	r2, r3
 800f1b8:	f000 fd45 	bl	800fc46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	2160      	movs	r1, #96	@ 0x60
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f000 fd6f 	bl	800fca6 <TIM_ITRx_SetConfig>
      break;
 800f1c8:	e01c      	b.n	800f204 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f1d6:	461a      	mov	r2, r3
 800f1d8:	f000 fd06 	bl	800fbe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	2140      	movs	r1, #64	@ 0x40
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f000 fd5f 	bl	800fca6 <TIM_ITRx_SetConfig>
      break;
 800f1e8:	e00c      	b.n	800f204 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681a      	ldr	r2, [r3, #0]
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	4610      	mov	r0, r2
 800f1f6:	f000 fd56 	bl	800fca6 <TIM_ITRx_SetConfig>
      break;
 800f1fa:	e003      	b.n	800f204 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	73fb      	strb	r3, [r7, #15]
      break;
 800f200:	e000      	b.n	800f204 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800f202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2201      	movs	r2, #1
 800f208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2200      	movs	r2, #0
 800f210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f214:	7bfb      	ldrb	r3, [r7, #15]
}
 800f216:	4618      	mov	r0, r3
 800f218:	3710      	adds	r7, #16
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	00100070 	.word	0x00100070
 800f224:	00100040 	.word	0x00100040
 800f228:	00100030 	.word	0x00100030
 800f22c:	00100020 	.word	0x00100020

0800f230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f230:	b480      	push	{r7}
 800f232:	b085      	sub	sp, #20
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	4a6e      	ldr	r2, [pc, #440]	@ (800f3fc <TIM_Base_SetConfig+0x1cc>)
 800f244:	4293      	cmp	r3, r2
 800f246:	d02b      	beq.n	800f2a0 <TIM_Base_SetConfig+0x70>
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	4a6d      	ldr	r2, [pc, #436]	@ (800f400 <TIM_Base_SetConfig+0x1d0>)
 800f24c:	4293      	cmp	r3, r2
 800f24e:	d027      	beq.n	800f2a0 <TIM_Base_SetConfig+0x70>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f256:	d023      	beq.n	800f2a0 <TIM_Base_SetConfig+0x70>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f25e:	d01f      	beq.n	800f2a0 <TIM_Base_SetConfig+0x70>
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	4a68      	ldr	r2, [pc, #416]	@ (800f404 <TIM_Base_SetConfig+0x1d4>)
 800f264:	4293      	cmp	r3, r2
 800f266:	d01b      	beq.n	800f2a0 <TIM_Base_SetConfig+0x70>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	4a67      	ldr	r2, [pc, #412]	@ (800f408 <TIM_Base_SetConfig+0x1d8>)
 800f26c:	4293      	cmp	r3, r2
 800f26e:	d017      	beq.n	800f2a0 <TIM_Base_SetConfig+0x70>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	4a66      	ldr	r2, [pc, #408]	@ (800f40c <TIM_Base_SetConfig+0x1dc>)
 800f274:	4293      	cmp	r3, r2
 800f276:	d013      	beq.n	800f2a0 <TIM_Base_SetConfig+0x70>
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	4a65      	ldr	r2, [pc, #404]	@ (800f410 <TIM_Base_SetConfig+0x1e0>)
 800f27c:	4293      	cmp	r3, r2
 800f27e:	d00f      	beq.n	800f2a0 <TIM_Base_SetConfig+0x70>
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	4a64      	ldr	r2, [pc, #400]	@ (800f414 <TIM_Base_SetConfig+0x1e4>)
 800f284:	4293      	cmp	r3, r2
 800f286:	d00b      	beq.n	800f2a0 <TIM_Base_SetConfig+0x70>
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	4a63      	ldr	r2, [pc, #396]	@ (800f418 <TIM_Base_SetConfig+0x1e8>)
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d007      	beq.n	800f2a0 <TIM_Base_SetConfig+0x70>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	4a62      	ldr	r2, [pc, #392]	@ (800f41c <TIM_Base_SetConfig+0x1ec>)
 800f294:	4293      	cmp	r3, r2
 800f296:	d003      	beq.n	800f2a0 <TIM_Base_SetConfig+0x70>
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	4a61      	ldr	r2, [pc, #388]	@ (800f420 <TIM_Base_SetConfig+0x1f0>)
 800f29c:	4293      	cmp	r3, r2
 800f29e:	d108      	bne.n	800f2b2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f2a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	68fa      	ldr	r2, [r7, #12]
 800f2ae:	4313      	orrs	r3, r2
 800f2b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	4a51      	ldr	r2, [pc, #324]	@ (800f3fc <TIM_Base_SetConfig+0x1cc>)
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d043      	beq.n	800f342 <TIM_Base_SetConfig+0x112>
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	4a50      	ldr	r2, [pc, #320]	@ (800f400 <TIM_Base_SetConfig+0x1d0>)
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d03f      	beq.n	800f342 <TIM_Base_SetConfig+0x112>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f2c8:	d03b      	beq.n	800f342 <TIM_Base_SetConfig+0x112>
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f2d0:	d037      	beq.n	800f342 <TIM_Base_SetConfig+0x112>
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	4a4b      	ldr	r2, [pc, #300]	@ (800f404 <TIM_Base_SetConfig+0x1d4>)
 800f2d6:	4293      	cmp	r3, r2
 800f2d8:	d033      	beq.n	800f342 <TIM_Base_SetConfig+0x112>
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	4a4a      	ldr	r2, [pc, #296]	@ (800f408 <TIM_Base_SetConfig+0x1d8>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d02f      	beq.n	800f342 <TIM_Base_SetConfig+0x112>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	4a49      	ldr	r2, [pc, #292]	@ (800f40c <TIM_Base_SetConfig+0x1dc>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d02b      	beq.n	800f342 <TIM_Base_SetConfig+0x112>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	4a48      	ldr	r2, [pc, #288]	@ (800f410 <TIM_Base_SetConfig+0x1e0>)
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	d027      	beq.n	800f342 <TIM_Base_SetConfig+0x112>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	4a47      	ldr	r2, [pc, #284]	@ (800f414 <TIM_Base_SetConfig+0x1e4>)
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	d023      	beq.n	800f342 <TIM_Base_SetConfig+0x112>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	4a46      	ldr	r2, [pc, #280]	@ (800f418 <TIM_Base_SetConfig+0x1e8>)
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d01f      	beq.n	800f342 <TIM_Base_SetConfig+0x112>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	4a45      	ldr	r2, [pc, #276]	@ (800f41c <TIM_Base_SetConfig+0x1ec>)
 800f306:	4293      	cmp	r3, r2
 800f308:	d01b      	beq.n	800f342 <TIM_Base_SetConfig+0x112>
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	4a44      	ldr	r2, [pc, #272]	@ (800f420 <TIM_Base_SetConfig+0x1f0>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	d017      	beq.n	800f342 <TIM_Base_SetConfig+0x112>
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	4a43      	ldr	r2, [pc, #268]	@ (800f424 <TIM_Base_SetConfig+0x1f4>)
 800f316:	4293      	cmp	r3, r2
 800f318:	d013      	beq.n	800f342 <TIM_Base_SetConfig+0x112>
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	4a42      	ldr	r2, [pc, #264]	@ (800f428 <TIM_Base_SetConfig+0x1f8>)
 800f31e:	4293      	cmp	r3, r2
 800f320:	d00f      	beq.n	800f342 <TIM_Base_SetConfig+0x112>
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	4a41      	ldr	r2, [pc, #260]	@ (800f42c <TIM_Base_SetConfig+0x1fc>)
 800f326:	4293      	cmp	r3, r2
 800f328:	d00b      	beq.n	800f342 <TIM_Base_SetConfig+0x112>
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	4a40      	ldr	r2, [pc, #256]	@ (800f430 <TIM_Base_SetConfig+0x200>)
 800f32e:	4293      	cmp	r3, r2
 800f330:	d007      	beq.n	800f342 <TIM_Base_SetConfig+0x112>
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	4a3f      	ldr	r2, [pc, #252]	@ (800f434 <TIM_Base_SetConfig+0x204>)
 800f336:	4293      	cmp	r3, r2
 800f338:	d003      	beq.n	800f342 <TIM_Base_SetConfig+0x112>
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	4a3e      	ldr	r2, [pc, #248]	@ (800f438 <TIM_Base_SetConfig+0x208>)
 800f33e:	4293      	cmp	r3, r2
 800f340:	d108      	bne.n	800f354 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	68db      	ldr	r3, [r3, #12]
 800f34e:	68fa      	ldr	r2, [r7, #12]
 800f350:	4313      	orrs	r3, r2
 800f352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	695b      	ldr	r3, [r3, #20]
 800f35e:	4313      	orrs	r3, r2
 800f360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	68fa      	ldr	r2, [r7, #12]
 800f366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	689a      	ldr	r2, [r3, #8]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	4a20      	ldr	r2, [pc, #128]	@ (800f3fc <TIM_Base_SetConfig+0x1cc>)
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d023      	beq.n	800f3c8 <TIM_Base_SetConfig+0x198>
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	4a1f      	ldr	r2, [pc, #124]	@ (800f400 <TIM_Base_SetConfig+0x1d0>)
 800f384:	4293      	cmp	r3, r2
 800f386:	d01f      	beq.n	800f3c8 <TIM_Base_SetConfig+0x198>
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	4a24      	ldr	r2, [pc, #144]	@ (800f41c <TIM_Base_SetConfig+0x1ec>)
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d01b      	beq.n	800f3c8 <TIM_Base_SetConfig+0x198>
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	4a23      	ldr	r2, [pc, #140]	@ (800f420 <TIM_Base_SetConfig+0x1f0>)
 800f394:	4293      	cmp	r3, r2
 800f396:	d017      	beq.n	800f3c8 <TIM_Base_SetConfig+0x198>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	4a22      	ldr	r2, [pc, #136]	@ (800f424 <TIM_Base_SetConfig+0x1f4>)
 800f39c:	4293      	cmp	r3, r2
 800f39e:	d013      	beq.n	800f3c8 <TIM_Base_SetConfig+0x198>
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	4a21      	ldr	r2, [pc, #132]	@ (800f428 <TIM_Base_SetConfig+0x1f8>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d00f      	beq.n	800f3c8 <TIM_Base_SetConfig+0x198>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	4a20      	ldr	r2, [pc, #128]	@ (800f42c <TIM_Base_SetConfig+0x1fc>)
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	d00b      	beq.n	800f3c8 <TIM_Base_SetConfig+0x198>
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	4a1f      	ldr	r2, [pc, #124]	@ (800f430 <TIM_Base_SetConfig+0x200>)
 800f3b4:	4293      	cmp	r3, r2
 800f3b6:	d007      	beq.n	800f3c8 <TIM_Base_SetConfig+0x198>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	4a1e      	ldr	r2, [pc, #120]	@ (800f434 <TIM_Base_SetConfig+0x204>)
 800f3bc:	4293      	cmp	r3, r2
 800f3be:	d003      	beq.n	800f3c8 <TIM_Base_SetConfig+0x198>
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	4a1d      	ldr	r2, [pc, #116]	@ (800f438 <TIM_Base_SetConfig+0x208>)
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d103      	bne.n	800f3d0 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	691a      	ldr	r2, [r3, #16]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2201      	movs	r2, #1
 800f3d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	691b      	ldr	r3, [r3, #16]
 800f3da:	f003 0301 	and.w	r3, r3, #1
 800f3de:	2b01      	cmp	r3, #1
 800f3e0:	d105      	bne.n	800f3ee <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	691b      	ldr	r3, [r3, #16]
 800f3e6:	f023 0201 	bic.w	r2, r3, #1
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	611a      	str	r2, [r3, #16]
  }
}
 800f3ee:	bf00      	nop
 800f3f0:	3714      	adds	r7, #20
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f8:	4770      	bx	lr
 800f3fa:	bf00      	nop
 800f3fc:	40012c00 	.word	0x40012c00
 800f400:	50012c00 	.word	0x50012c00
 800f404:	40000400 	.word	0x40000400
 800f408:	50000400 	.word	0x50000400
 800f40c:	40000800 	.word	0x40000800
 800f410:	50000800 	.word	0x50000800
 800f414:	40000c00 	.word	0x40000c00
 800f418:	50000c00 	.word	0x50000c00
 800f41c:	40013400 	.word	0x40013400
 800f420:	50013400 	.word	0x50013400
 800f424:	40014000 	.word	0x40014000
 800f428:	50014000 	.word	0x50014000
 800f42c:	40014400 	.word	0x40014400
 800f430:	50014400 	.word	0x50014400
 800f434:	40014800 	.word	0x40014800
 800f438:	50014800 	.word	0x50014800

0800f43c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f43c:	b480      	push	{r7}
 800f43e:	b087      	sub	sp, #28
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
 800f444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6a1b      	ldr	r3, [r3, #32]
 800f44a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6a1b      	ldr	r3, [r3, #32]
 800f450:	f023 0201 	bic.w	r2, r3, #1
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	685b      	ldr	r3, [r3, #4]
 800f45c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	699b      	ldr	r3, [r3, #24]
 800f462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f46a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f46e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	f023 0303 	bic.w	r3, r3, #3
 800f476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	68fa      	ldr	r2, [r7, #12]
 800f47e:	4313      	orrs	r3, r2
 800f480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	f023 0302 	bic.w	r3, r3, #2
 800f488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	689b      	ldr	r3, [r3, #8]
 800f48e:	697a      	ldr	r2, [r7, #20]
 800f490:	4313      	orrs	r3, r2
 800f492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	4a40      	ldr	r2, [pc, #256]	@ (800f598 <TIM_OC1_SetConfig+0x15c>)
 800f498:	4293      	cmp	r3, r2
 800f49a:	d023      	beq.n	800f4e4 <TIM_OC1_SetConfig+0xa8>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	4a3f      	ldr	r2, [pc, #252]	@ (800f59c <TIM_OC1_SetConfig+0x160>)
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d01f      	beq.n	800f4e4 <TIM_OC1_SetConfig+0xa8>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	4a3e      	ldr	r2, [pc, #248]	@ (800f5a0 <TIM_OC1_SetConfig+0x164>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d01b      	beq.n	800f4e4 <TIM_OC1_SetConfig+0xa8>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	4a3d      	ldr	r2, [pc, #244]	@ (800f5a4 <TIM_OC1_SetConfig+0x168>)
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	d017      	beq.n	800f4e4 <TIM_OC1_SetConfig+0xa8>
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	4a3c      	ldr	r2, [pc, #240]	@ (800f5a8 <TIM_OC1_SetConfig+0x16c>)
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	d013      	beq.n	800f4e4 <TIM_OC1_SetConfig+0xa8>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	4a3b      	ldr	r2, [pc, #236]	@ (800f5ac <TIM_OC1_SetConfig+0x170>)
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d00f      	beq.n	800f4e4 <TIM_OC1_SetConfig+0xa8>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	4a3a      	ldr	r2, [pc, #232]	@ (800f5b0 <TIM_OC1_SetConfig+0x174>)
 800f4c8:	4293      	cmp	r3, r2
 800f4ca:	d00b      	beq.n	800f4e4 <TIM_OC1_SetConfig+0xa8>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	4a39      	ldr	r2, [pc, #228]	@ (800f5b4 <TIM_OC1_SetConfig+0x178>)
 800f4d0:	4293      	cmp	r3, r2
 800f4d2:	d007      	beq.n	800f4e4 <TIM_OC1_SetConfig+0xa8>
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	4a38      	ldr	r2, [pc, #224]	@ (800f5b8 <TIM_OC1_SetConfig+0x17c>)
 800f4d8:	4293      	cmp	r3, r2
 800f4da:	d003      	beq.n	800f4e4 <TIM_OC1_SetConfig+0xa8>
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	4a37      	ldr	r2, [pc, #220]	@ (800f5bc <TIM_OC1_SetConfig+0x180>)
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	d10c      	bne.n	800f4fe <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	f023 0308 	bic.w	r3, r3, #8
 800f4ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	68db      	ldr	r3, [r3, #12]
 800f4f0:	697a      	ldr	r2, [r7, #20]
 800f4f2:	4313      	orrs	r3, r2
 800f4f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	f023 0304 	bic.w	r3, r3, #4
 800f4fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	4a25      	ldr	r2, [pc, #148]	@ (800f598 <TIM_OC1_SetConfig+0x15c>)
 800f502:	4293      	cmp	r3, r2
 800f504:	d023      	beq.n	800f54e <TIM_OC1_SetConfig+0x112>
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	4a24      	ldr	r2, [pc, #144]	@ (800f59c <TIM_OC1_SetConfig+0x160>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	d01f      	beq.n	800f54e <TIM_OC1_SetConfig+0x112>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	4a23      	ldr	r2, [pc, #140]	@ (800f5a0 <TIM_OC1_SetConfig+0x164>)
 800f512:	4293      	cmp	r3, r2
 800f514:	d01b      	beq.n	800f54e <TIM_OC1_SetConfig+0x112>
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	4a22      	ldr	r2, [pc, #136]	@ (800f5a4 <TIM_OC1_SetConfig+0x168>)
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d017      	beq.n	800f54e <TIM_OC1_SetConfig+0x112>
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	4a21      	ldr	r2, [pc, #132]	@ (800f5a8 <TIM_OC1_SetConfig+0x16c>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d013      	beq.n	800f54e <TIM_OC1_SetConfig+0x112>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	4a20      	ldr	r2, [pc, #128]	@ (800f5ac <TIM_OC1_SetConfig+0x170>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d00f      	beq.n	800f54e <TIM_OC1_SetConfig+0x112>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4a1f      	ldr	r2, [pc, #124]	@ (800f5b0 <TIM_OC1_SetConfig+0x174>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d00b      	beq.n	800f54e <TIM_OC1_SetConfig+0x112>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	4a1e      	ldr	r2, [pc, #120]	@ (800f5b4 <TIM_OC1_SetConfig+0x178>)
 800f53a:	4293      	cmp	r3, r2
 800f53c:	d007      	beq.n	800f54e <TIM_OC1_SetConfig+0x112>
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	4a1d      	ldr	r2, [pc, #116]	@ (800f5b8 <TIM_OC1_SetConfig+0x17c>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d003      	beq.n	800f54e <TIM_OC1_SetConfig+0x112>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4a1c      	ldr	r2, [pc, #112]	@ (800f5bc <TIM_OC1_SetConfig+0x180>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d111      	bne.n	800f572 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f556:	693b      	ldr	r3, [r7, #16]
 800f558:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f55c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	695b      	ldr	r3, [r3, #20]
 800f562:	693a      	ldr	r2, [r7, #16]
 800f564:	4313      	orrs	r3, r2
 800f566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	699b      	ldr	r3, [r3, #24]
 800f56c:	693a      	ldr	r2, [r7, #16]
 800f56e:	4313      	orrs	r3, r2
 800f570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	693a      	ldr	r2, [r7, #16]
 800f576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	68fa      	ldr	r2, [r7, #12]
 800f57c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	685a      	ldr	r2, [r3, #4]
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	697a      	ldr	r2, [r7, #20]
 800f58a:	621a      	str	r2, [r3, #32]
}
 800f58c:	bf00      	nop
 800f58e:	371c      	adds	r7, #28
 800f590:	46bd      	mov	sp, r7
 800f592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f596:	4770      	bx	lr
 800f598:	40012c00 	.word	0x40012c00
 800f59c:	50012c00 	.word	0x50012c00
 800f5a0:	40013400 	.word	0x40013400
 800f5a4:	50013400 	.word	0x50013400
 800f5a8:	40014000 	.word	0x40014000
 800f5ac:	50014000 	.word	0x50014000
 800f5b0:	40014400 	.word	0x40014400
 800f5b4:	50014400 	.word	0x50014400
 800f5b8:	40014800 	.word	0x40014800
 800f5bc:	50014800 	.word	0x50014800

0800f5c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f5c0:	b480      	push	{r7}
 800f5c2:	b087      	sub	sp, #28
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6a1b      	ldr	r3, [r3, #32]
 800f5ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6a1b      	ldr	r3, [r3, #32]
 800f5d4:	f023 0210 	bic.w	r2, r3, #16
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	699b      	ldr	r3, [r3, #24]
 800f5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f5ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f5f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f5fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	021b      	lsls	r3, r3, #8
 800f602:	68fa      	ldr	r2, [r7, #12]
 800f604:	4313      	orrs	r3, r2
 800f606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	f023 0320 	bic.w	r3, r3, #32
 800f60e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	689b      	ldr	r3, [r3, #8]
 800f614:	011b      	lsls	r3, r3, #4
 800f616:	697a      	ldr	r2, [r7, #20]
 800f618:	4313      	orrs	r3, r2
 800f61a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	4a36      	ldr	r2, [pc, #216]	@ (800f6f8 <TIM_OC2_SetConfig+0x138>)
 800f620:	4293      	cmp	r3, r2
 800f622:	d00b      	beq.n	800f63c <TIM_OC2_SetConfig+0x7c>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	4a35      	ldr	r2, [pc, #212]	@ (800f6fc <TIM_OC2_SetConfig+0x13c>)
 800f628:	4293      	cmp	r3, r2
 800f62a:	d007      	beq.n	800f63c <TIM_OC2_SetConfig+0x7c>
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	4a34      	ldr	r2, [pc, #208]	@ (800f700 <TIM_OC2_SetConfig+0x140>)
 800f630:	4293      	cmp	r3, r2
 800f632:	d003      	beq.n	800f63c <TIM_OC2_SetConfig+0x7c>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	4a33      	ldr	r2, [pc, #204]	@ (800f704 <TIM_OC2_SetConfig+0x144>)
 800f638:	4293      	cmp	r3, r2
 800f63a:	d10d      	bne.n	800f658 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	68db      	ldr	r3, [r3, #12]
 800f648:	011b      	lsls	r3, r3, #4
 800f64a:	697a      	ldr	r2, [r7, #20]
 800f64c:	4313      	orrs	r3, r2
 800f64e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f656:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	4a27      	ldr	r2, [pc, #156]	@ (800f6f8 <TIM_OC2_SetConfig+0x138>)
 800f65c:	4293      	cmp	r3, r2
 800f65e:	d023      	beq.n	800f6a8 <TIM_OC2_SetConfig+0xe8>
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	4a26      	ldr	r2, [pc, #152]	@ (800f6fc <TIM_OC2_SetConfig+0x13c>)
 800f664:	4293      	cmp	r3, r2
 800f666:	d01f      	beq.n	800f6a8 <TIM_OC2_SetConfig+0xe8>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	4a25      	ldr	r2, [pc, #148]	@ (800f700 <TIM_OC2_SetConfig+0x140>)
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d01b      	beq.n	800f6a8 <TIM_OC2_SetConfig+0xe8>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	4a24      	ldr	r2, [pc, #144]	@ (800f704 <TIM_OC2_SetConfig+0x144>)
 800f674:	4293      	cmp	r3, r2
 800f676:	d017      	beq.n	800f6a8 <TIM_OC2_SetConfig+0xe8>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	4a23      	ldr	r2, [pc, #140]	@ (800f708 <TIM_OC2_SetConfig+0x148>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d013      	beq.n	800f6a8 <TIM_OC2_SetConfig+0xe8>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	4a22      	ldr	r2, [pc, #136]	@ (800f70c <TIM_OC2_SetConfig+0x14c>)
 800f684:	4293      	cmp	r3, r2
 800f686:	d00f      	beq.n	800f6a8 <TIM_OC2_SetConfig+0xe8>
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	4a21      	ldr	r2, [pc, #132]	@ (800f710 <TIM_OC2_SetConfig+0x150>)
 800f68c:	4293      	cmp	r3, r2
 800f68e:	d00b      	beq.n	800f6a8 <TIM_OC2_SetConfig+0xe8>
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	4a20      	ldr	r2, [pc, #128]	@ (800f714 <TIM_OC2_SetConfig+0x154>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d007      	beq.n	800f6a8 <TIM_OC2_SetConfig+0xe8>
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	4a1f      	ldr	r2, [pc, #124]	@ (800f718 <TIM_OC2_SetConfig+0x158>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d003      	beq.n	800f6a8 <TIM_OC2_SetConfig+0xe8>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	4a1e      	ldr	r2, [pc, #120]	@ (800f71c <TIM_OC2_SetConfig+0x15c>)
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	d113      	bne.n	800f6d0 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f6ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f6b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	695b      	ldr	r3, [r3, #20]
 800f6bc:	009b      	lsls	r3, r3, #2
 800f6be:	693a      	ldr	r2, [r7, #16]
 800f6c0:	4313      	orrs	r3, r2
 800f6c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	699b      	ldr	r3, [r3, #24]
 800f6c8:	009b      	lsls	r3, r3, #2
 800f6ca:	693a      	ldr	r2, [r7, #16]
 800f6cc:	4313      	orrs	r3, r2
 800f6ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	693a      	ldr	r2, [r7, #16]
 800f6d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	68fa      	ldr	r2, [r7, #12]
 800f6da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	685a      	ldr	r2, [r3, #4]
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	697a      	ldr	r2, [r7, #20]
 800f6e8:	621a      	str	r2, [r3, #32]
}
 800f6ea:	bf00      	nop
 800f6ec:	371c      	adds	r7, #28
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f4:	4770      	bx	lr
 800f6f6:	bf00      	nop
 800f6f8:	40012c00 	.word	0x40012c00
 800f6fc:	50012c00 	.word	0x50012c00
 800f700:	40013400 	.word	0x40013400
 800f704:	50013400 	.word	0x50013400
 800f708:	40014000 	.word	0x40014000
 800f70c:	50014000 	.word	0x50014000
 800f710:	40014400 	.word	0x40014400
 800f714:	50014400 	.word	0x50014400
 800f718:	40014800 	.word	0x40014800
 800f71c:	50014800 	.word	0x50014800

0800f720 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f720:	b480      	push	{r7}
 800f722:	b087      	sub	sp, #28
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	6a1b      	ldr	r3, [r3, #32]
 800f72e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6a1b      	ldr	r3, [r3, #32]
 800f734:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	685b      	ldr	r3, [r3, #4]
 800f740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	69db      	ldr	r3, [r3, #28]
 800f746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f74e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	f023 0303 	bic.w	r3, r3, #3
 800f75a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	68fa      	ldr	r2, [r7, #12]
 800f762:	4313      	orrs	r3, r2
 800f764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f76c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	689b      	ldr	r3, [r3, #8]
 800f772:	021b      	lsls	r3, r3, #8
 800f774:	697a      	ldr	r2, [r7, #20]
 800f776:	4313      	orrs	r3, r2
 800f778:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	4a35      	ldr	r2, [pc, #212]	@ (800f854 <TIM_OC3_SetConfig+0x134>)
 800f77e:	4293      	cmp	r3, r2
 800f780:	d00b      	beq.n	800f79a <TIM_OC3_SetConfig+0x7a>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	4a34      	ldr	r2, [pc, #208]	@ (800f858 <TIM_OC3_SetConfig+0x138>)
 800f786:	4293      	cmp	r3, r2
 800f788:	d007      	beq.n	800f79a <TIM_OC3_SetConfig+0x7a>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	4a33      	ldr	r2, [pc, #204]	@ (800f85c <TIM_OC3_SetConfig+0x13c>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	d003      	beq.n	800f79a <TIM_OC3_SetConfig+0x7a>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	4a32      	ldr	r2, [pc, #200]	@ (800f860 <TIM_OC3_SetConfig+0x140>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d10d      	bne.n	800f7b6 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f7a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	68db      	ldr	r3, [r3, #12]
 800f7a6:	021b      	lsls	r3, r3, #8
 800f7a8:	697a      	ldr	r2, [r7, #20]
 800f7aa:	4313      	orrs	r3, r2
 800f7ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f7b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	4a26      	ldr	r2, [pc, #152]	@ (800f854 <TIM_OC3_SetConfig+0x134>)
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	d023      	beq.n	800f806 <TIM_OC3_SetConfig+0xe6>
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	4a25      	ldr	r2, [pc, #148]	@ (800f858 <TIM_OC3_SetConfig+0x138>)
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d01f      	beq.n	800f806 <TIM_OC3_SetConfig+0xe6>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	4a24      	ldr	r2, [pc, #144]	@ (800f85c <TIM_OC3_SetConfig+0x13c>)
 800f7ca:	4293      	cmp	r3, r2
 800f7cc:	d01b      	beq.n	800f806 <TIM_OC3_SetConfig+0xe6>
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	4a23      	ldr	r2, [pc, #140]	@ (800f860 <TIM_OC3_SetConfig+0x140>)
 800f7d2:	4293      	cmp	r3, r2
 800f7d4:	d017      	beq.n	800f806 <TIM_OC3_SetConfig+0xe6>
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	4a22      	ldr	r2, [pc, #136]	@ (800f864 <TIM_OC3_SetConfig+0x144>)
 800f7da:	4293      	cmp	r3, r2
 800f7dc:	d013      	beq.n	800f806 <TIM_OC3_SetConfig+0xe6>
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	4a21      	ldr	r2, [pc, #132]	@ (800f868 <TIM_OC3_SetConfig+0x148>)
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d00f      	beq.n	800f806 <TIM_OC3_SetConfig+0xe6>
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	4a20      	ldr	r2, [pc, #128]	@ (800f86c <TIM_OC3_SetConfig+0x14c>)
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d00b      	beq.n	800f806 <TIM_OC3_SetConfig+0xe6>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	4a1f      	ldr	r2, [pc, #124]	@ (800f870 <TIM_OC3_SetConfig+0x150>)
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	d007      	beq.n	800f806 <TIM_OC3_SetConfig+0xe6>
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	4a1e      	ldr	r2, [pc, #120]	@ (800f874 <TIM_OC3_SetConfig+0x154>)
 800f7fa:	4293      	cmp	r3, r2
 800f7fc:	d003      	beq.n	800f806 <TIM_OC3_SetConfig+0xe6>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4a1d      	ldr	r2, [pc, #116]	@ (800f878 <TIM_OC3_SetConfig+0x158>)
 800f802:	4293      	cmp	r3, r2
 800f804:	d113      	bne.n	800f82e <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f80c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	695b      	ldr	r3, [r3, #20]
 800f81a:	011b      	lsls	r3, r3, #4
 800f81c:	693a      	ldr	r2, [r7, #16]
 800f81e:	4313      	orrs	r3, r2
 800f820:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	699b      	ldr	r3, [r3, #24]
 800f826:	011b      	lsls	r3, r3, #4
 800f828:	693a      	ldr	r2, [r7, #16]
 800f82a:	4313      	orrs	r3, r2
 800f82c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	693a      	ldr	r2, [r7, #16]
 800f832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	68fa      	ldr	r2, [r7, #12]
 800f838:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	685a      	ldr	r2, [r3, #4]
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	697a      	ldr	r2, [r7, #20]
 800f846:	621a      	str	r2, [r3, #32]
}
 800f848:	bf00      	nop
 800f84a:	371c      	adds	r7, #28
 800f84c:	46bd      	mov	sp, r7
 800f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f852:	4770      	bx	lr
 800f854:	40012c00 	.word	0x40012c00
 800f858:	50012c00 	.word	0x50012c00
 800f85c:	40013400 	.word	0x40013400
 800f860:	50013400 	.word	0x50013400
 800f864:	40014000 	.word	0x40014000
 800f868:	50014000 	.word	0x50014000
 800f86c:	40014400 	.word	0x40014400
 800f870:	50014400 	.word	0x50014400
 800f874:	40014800 	.word	0x40014800
 800f878:	50014800 	.word	0x50014800

0800f87c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f87c:	b480      	push	{r7}
 800f87e:	b087      	sub	sp, #28
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6a1b      	ldr	r3, [r3, #32]
 800f88a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6a1b      	ldr	r3, [r3, #32]
 800f890:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	685b      	ldr	r3, [r3, #4]
 800f89c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	69db      	ldr	r3, [r3, #28]
 800f8a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f8aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f8ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f8b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	021b      	lsls	r3, r3, #8
 800f8be:	68fa      	ldr	r2, [r7, #12]
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f8ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	689b      	ldr	r3, [r3, #8]
 800f8d0:	031b      	lsls	r3, r3, #12
 800f8d2:	697a      	ldr	r2, [r7, #20]
 800f8d4:	4313      	orrs	r3, r2
 800f8d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	4a36      	ldr	r2, [pc, #216]	@ (800f9b4 <TIM_OC4_SetConfig+0x138>)
 800f8dc:	4293      	cmp	r3, r2
 800f8de:	d00b      	beq.n	800f8f8 <TIM_OC4_SetConfig+0x7c>
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	4a35      	ldr	r2, [pc, #212]	@ (800f9b8 <TIM_OC4_SetConfig+0x13c>)
 800f8e4:	4293      	cmp	r3, r2
 800f8e6:	d007      	beq.n	800f8f8 <TIM_OC4_SetConfig+0x7c>
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	4a34      	ldr	r2, [pc, #208]	@ (800f9bc <TIM_OC4_SetConfig+0x140>)
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d003      	beq.n	800f8f8 <TIM_OC4_SetConfig+0x7c>
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	4a33      	ldr	r2, [pc, #204]	@ (800f9c0 <TIM_OC4_SetConfig+0x144>)
 800f8f4:	4293      	cmp	r3, r2
 800f8f6:	d10d      	bne.n	800f914 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f8fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	68db      	ldr	r3, [r3, #12]
 800f904:	031b      	lsls	r3, r3, #12
 800f906:	697a      	ldr	r2, [r7, #20]
 800f908:	4313      	orrs	r3, r2
 800f90a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f912:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	4a27      	ldr	r2, [pc, #156]	@ (800f9b4 <TIM_OC4_SetConfig+0x138>)
 800f918:	4293      	cmp	r3, r2
 800f91a:	d023      	beq.n	800f964 <TIM_OC4_SetConfig+0xe8>
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	4a26      	ldr	r2, [pc, #152]	@ (800f9b8 <TIM_OC4_SetConfig+0x13c>)
 800f920:	4293      	cmp	r3, r2
 800f922:	d01f      	beq.n	800f964 <TIM_OC4_SetConfig+0xe8>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	4a25      	ldr	r2, [pc, #148]	@ (800f9bc <TIM_OC4_SetConfig+0x140>)
 800f928:	4293      	cmp	r3, r2
 800f92a:	d01b      	beq.n	800f964 <TIM_OC4_SetConfig+0xe8>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4a24      	ldr	r2, [pc, #144]	@ (800f9c0 <TIM_OC4_SetConfig+0x144>)
 800f930:	4293      	cmp	r3, r2
 800f932:	d017      	beq.n	800f964 <TIM_OC4_SetConfig+0xe8>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	4a23      	ldr	r2, [pc, #140]	@ (800f9c4 <TIM_OC4_SetConfig+0x148>)
 800f938:	4293      	cmp	r3, r2
 800f93a:	d013      	beq.n	800f964 <TIM_OC4_SetConfig+0xe8>
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	4a22      	ldr	r2, [pc, #136]	@ (800f9c8 <TIM_OC4_SetConfig+0x14c>)
 800f940:	4293      	cmp	r3, r2
 800f942:	d00f      	beq.n	800f964 <TIM_OC4_SetConfig+0xe8>
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	4a21      	ldr	r2, [pc, #132]	@ (800f9cc <TIM_OC4_SetConfig+0x150>)
 800f948:	4293      	cmp	r3, r2
 800f94a:	d00b      	beq.n	800f964 <TIM_OC4_SetConfig+0xe8>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4a20      	ldr	r2, [pc, #128]	@ (800f9d0 <TIM_OC4_SetConfig+0x154>)
 800f950:	4293      	cmp	r3, r2
 800f952:	d007      	beq.n	800f964 <TIM_OC4_SetConfig+0xe8>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	4a1f      	ldr	r2, [pc, #124]	@ (800f9d4 <TIM_OC4_SetConfig+0x158>)
 800f958:	4293      	cmp	r3, r2
 800f95a:	d003      	beq.n	800f964 <TIM_OC4_SetConfig+0xe8>
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	4a1e      	ldr	r2, [pc, #120]	@ (800f9d8 <TIM_OC4_SetConfig+0x15c>)
 800f960:	4293      	cmp	r3, r2
 800f962:	d113      	bne.n	800f98c <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f96a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f96c:	693b      	ldr	r3, [r7, #16]
 800f96e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f972:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	695b      	ldr	r3, [r3, #20]
 800f978:	019b      	lsls	r3, r3, #6
 800f97a:	693a      	ldr	r2, [r7, #16]
 800f97c:	4313      	orrs	r3, r2
 800f97e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	699b      	ldr	r3, [r3, #24]
 800f984:	019b      	lsls	r3, r3, #6
 800f986:	693a      	ldr	r2, [r7, #16]
 800f988:	4313      	orrs	r3, r2
 800f98a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	693a      	ldr	r2, [r7, #16]
 800f990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	68fa      	ldr	r2, [r7, #12]
 800f996:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	685a      	ldr	r2, [r3, #4]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	697a      	ldr	r2, [r7, #20]
 800f9a4:	621a      	str	r2, [r3, #32]
}
 800f9a6:	bf00      	nop
 800f9a8:	371c      	adds	r7, #28
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b0:	4770      	bx	lr
 800f9b2:	bf00      	nop
 800f9b4:	40012c00 	.word	0x40012c00
 800f9b8:	50012c00 	.word	0x50012c00
 800f9bc:	40013400 	.word	0x40013400
 800f9c0:	50013400 	.word	0x50013400
 800f9c4:	40014000 	.word	0x40014000
 800f9c8:	50014000 	.word	0x50014000
 800f9cc:	40014400 	.word	0x40014400
 800f9d0:	50014400 	.word	0x50014400
 800f9d4:	40014800 	.word	0x40014800
 800f9d8:	50014800 	.word	0x50014800

0800f9dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f9dc:	b480      	push	{r7}
 800f9de:	b087      	sub	sp, #28
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6a1b      	ldr	r3, [r3, #32]
 800f9ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6a1b      	ldr	r3, [r3, #32]
 800f9f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	685b      	ldr	r3, [r3, #4]
 800f9fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fa0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	68fa      	ldr	r2, [r7, #12]
 800fa16:	4313      	orrs	r3, r2
 800fa18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fa1a:	693b      	ldr	r3, [r7, #16]
 800fa1c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800fa20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	689b      	ldr	r3, [r3, #8]
 800fa26:	041b      	lsls	r3, r3, #16
 800fa28:	693a      	ldr	r2, [r7, #16]
 800fa2a:	4313      	orrs	r3, r2
 800fa2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	4a21      	ldr	r2, [pc, #132]	@ (800fab8 <TIM_OC5_SetConfig+0xdc>)
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d023      	beq.n	800fa7e <TIM_OC5_SetConfig+0xa2>
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	4a20      	ldr	r2, [pc, #128]	@ (800fabc <TIM_OC5_SetConfig+0xe0>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d01f      	beq.n	800fa7e <TIM_OC5_SetConfig+0xa2>
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	4a1f      	ldr	r2, [pc, #124]	@ (800fac0 <TIM_OC5_SetConfig+0xe4>)
 800fa42:	4293      	cmp	r3, r2
 800fa44:	d01b      	beq.n	800fa7e <TIM_OC5_SetConfig+0xa2>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	4a1e      	ldr	r2, [pc, #120]	@ (800fac4 <TIM_OC5_SetConfig+0xe8>)
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	d017      	beq.n	800fa7e <TIM_OC5_SetConfig+0xa2>
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	4a1d      	ldr	r2, [pc, #116]	@ (800fac8 <TIM_OC5_SetConfig+0xec>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d013      	beq.n	800fa7e <TIM_OC5_SetConfig+0xa2>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	4a1c      	ldr	r2, [pc, #112]	@ (800facc <TIM_OC5_SetConfig+0xf0>)
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	d00f      	beq.n	800fa7e <TIM_OC5_SetConfig+0xa2>
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	4a1b      	ldr	r2, [pc, #108]	@ (800fad0 <TIM_OC5_SetConfig+0xf4>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d00b      	beq.n	800fa7e <TIM_OC5_SetConfig+0xa2>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	4a1a      	ldr	r2, [pc, #104]	@ (800fad4 <TIM_OC5_SetConfig+0xf8>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d007      	beq.n	800fa7e <TIM_OC5_SetConfig+0xa2>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	4a19      	ldr	r2, [pc, #100]	@ (800fad8 <TIM_OC5_SetConfig+0xfc>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d003      	beq.n	800fa7e <TIM_OC5_SetConfig+0xa2>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	4a18      	ldr	r2, [pc, #96]	@ (800fadc <TIM_OC5_SetConfig+0x100>)
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d109      	bne.n	800fa92 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fa84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	695b      	ldr	r3, [r3, #20]
 800fa8a:	021b      	lsls	r3, r3, #8
 800fa8c:	697a      	ldr	r2, [r7, #20]
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	697a      	ldr	r2, [r7, #20]
 800fa96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	68fa      	ldr	r2, [r7, #12]
 800fa9c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	685a      	ldr	r2, [r3, #4]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	693a      	ldr	r2, [r7, #16]
 800faaa:	621a      	str	r2, [r3, #32]
}
 800faac:	bf00      	nop
 800faae:	371c      	adds	r7, #28
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr
 800fab8:	40012c00 	.word	0x40012c00
 800fabc:	50012c00 	.word	0x50012c00
 800fac0:	40013400 	.word	0x40013400
 800fac4:	50013400 	.word	0x50013400
 800fac8:	40014000 	.word	0x40014000
 800facc:	50014000 	.word	0x50014000
 800fad0:	40014400 	.word	0x40014400
 800fad4:	50014400 	.word	0x50014400
 800fad8:	40014800 	.word	0x40014800
 800fadc:	50014800 	.word	0x50014800

0800fae0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fae0:	b480      	push	{r7}
 800fae2:	b087      	sub	sp, #28
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6a1b      	ldr	r3, [r3, #32]
 800faee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6a1b      	ldr	r3, [r3, #32]
 800faf4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	685b      	ldr	r3, [r3, #4]
 800fb00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fb0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fb12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	021b      	lsls	r3, r3, #8
 800fb1a:	68fa      	ldr	r2, [r7, #12]
 800fb1c:	4313      	orrs	r3, r2
 800fb1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fb26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	689b      	ldr	r3, [r3, #8]
 800fb2c:	051b      	lsls	r3, r3, #20
 800fb2e:	693a      	ldr	r2, [r7, #16]
 800fb30:	4313      	orrs	r3, r2
 800fb32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	4a22      	ldr	r2, [pc, #136]	@ (800fbc0 <TIM_OC6_SetConfig+0xe0>)
 800fb38:	4293      	cmp	r3, r2
 800fb3a:	d023      	beq.n	800fb84 <TIM_OC6_SetConfig+0xa4>
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	4a21      	ldr	r2, [pc, #132]	@ (800fbc4 <TIM_OC6_SetConfig+0xe4>)
 800fb40:	4293      	cmp	r3, r2
 800fb42:	d01f      	beq.n	800fb84 <TIM_OC6_SetConfig+0xa4>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	4a20      	ldr	r2, [pc, #128]	@ (800fbc8 <TIM_OC6_SetConfig+0xe8>)
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d01b      	beq.n	800fb84 <TIM_OC6_SetConfig+0xa4>
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	4a1f      	ldr	r2, [pc, #124]	@ (800fbcc <TIM_OC6_SetConfig+0xec>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d017      	beq.n	800fb84 <TIM_OC6_SetConfig+0xa4>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	4a1e      	ldr	r2, [pc, #120]	@ (800fbd0 <TIM_OC6_SetConfig+0xf0>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d013      	beq.n	800fb84 <TIM_OC6_SetConfig+0xa4>
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	4a1d      	ldr	r2, [pc, #116]	@ (800fbd4 <TIM_OC6_SetConfig+0xf4>)
 800fb60:	4293      	cmp	r3, r2
 800fb62:	d00f      	beq.n	800fb84 <TIM_OC6_SetConfig+0xa4>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	4a1c      	ldr	r2, [pc, #112]	@ (800fbd8 <TIM_OC6_SetConfig+0xf8>)
 800fb68:	4293      	cmp	r3, r2
 800fb6a:	d00b      	beq.n	800fb84 <TIM_OC6_SetConfig+0xa4>
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	4a1b      	ldr	r2, [pc, #108]	@ (800fbdc <TIM_OC6_SetConfig+0xfc>)
 800fb70:	4293      	cmp	r3, r2
 800fb72:	d007      	beq.n	800fb84 <TIM_OC6_SetConfig+0xa4>
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	4a1a      	ldr	r2, [pc, #104]	@ (800fbe0 <TIM_OC6_SetConfig+0x100>)
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	d003      	beq.n	800fb84 <TIM_OC6_SetConfig+0xa4>
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	4a19      	ldr	r2, [pc, #100]	@ (800fbe4 <TIM_OC6_SetConfig+0x104>)
 800fb80:	4293      	cmp	r3, r2
 800fb82:	d109      	bne.n	800fb98 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fb8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	695b      	ldr	r3, [r3, #20]
 800fb90:	029b      	lsls	r3, r3, #10
 800fb92:	697a      	ldr	r2, [r7, #20]
 800fb94:	4313      	orrs	r3, r2
 800fb96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	697a      	ldr	r2, [r7, #20]
 800fb9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	68fa      	ldr	r2, [r7, #12]
 800fba2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	685a      	ldr	r2, [r3, #4]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	693a      	ldr	r2, [r7, #16]
 800fbb0:	621a      	str	r2, [r3, #32]
}
 800fbb2:	bf00      	nop
 800fbb4:	371c      	adds	r7, #28
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbc:	4770      	bx	lr
 800fbbe:	bf00      	nop
 800fbc0:	40012c00 	.word	0x40012c00
 800fbc4:	50012c00 	.word	0x50012c00
 800fbc8:	40013400 	.word	0x40013400
 800fbcc:	50013400 	.word	0x50013400
 800fbd0:	40014000 	.word	0x40014000
 800fbd4:	50014000 	.word	0x50014000
 800fbd8:	40014400 	.word	0x40014400
 800fbdc:	50014400 	.word	0x50014400
 800fbe0:	40014800 	.word	0x40014800
 800fbe4:	50014800 	.word	0x50014800

0800fbe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b087      	sub	sp, #28
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	60f8      	str	r0, [r7, #12]
 800fbf0:	60b9      	str	r1, [r7, #8]
 800fbf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	6a1b      	ldr	r3, [r3, #32]
 800fbf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	6a1b      	ldr	r3, [r3, #32]
 800fbfe:	f023 0201 	bic.w	r2, r3, #1
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	699b      	ldr	r3, [r3, #24]
 800fc0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fc12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	011b      	lsls	r3, r3, #4
 800fc18:	693a      	ldr	r2, [r7, #16]
 800fc1a:	4313      	orrs	r3, r2
 800fc1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	f023 030a 	bic.w	r3, r3, #10
 800fc24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fc26:	697a      	ldr	r2, [r7, #20]
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	4313      	orrs	r3, r2
 800fc2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	693a      	ldr	r2, [r7, #16]
 800fc32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	697a      	ldr	r2, [r7, #20]
 800fc38:	621a      	str	r2, [r3, #32]
}
 800fc3a:	bf00      	nop
 800fc3c:	371c      	adds	r7, #28
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc44:	4770      	bx	lr

0800fc46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc46:	b480      	push	{r7}
 800fc48:	b087      	sub	sp, #28
 800fc4a:	af00      	add	r7, sp, #0
 800fc4c:	60f8      	str	r0, [r7, #12]
 800fc4e:	60b9      	str	r1, [r7, #8]
 800fc50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	6a1b      	ldr	r3, [r3, #32]
 800fc56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	6a1b      	ldr	r3, [r3, #32]
 800fc5c:	f023 0210 	bic.w	r2, r3, #16
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	699b      	ldr	r3, [r3, #24]
 800fc68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fc70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	031b      	lsls	r3, r3, #12
 800fc76:	693a      	ldr	r2, [r7, #16]
 800fc78:	4313      	orrs	r3, r2
 800fc7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800fc82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	011b      	lsls	r3, r3, #4
 800fc88:	697a      	ldr	r2, [r7, #20]
 800fc8a:	4313      	orrs	r3, r2
 800fc8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	693a      	ldr	r2, [r7, #16]
 800fc92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	697a      	ldr	r2, [r7, #20]
 800fc98:	621a      	str	r2, [r3, #32]
}
 800fc9a:	bf00      	nop
 800fc9c:	371c      	adds	r7, #28
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca4:	4770      	bx	lr

0800fca6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fca6:	b480      	push	{r7}
 800fca8:	b085      	sub	sp, #20
 800fcaa:	af00      	add	r7, sp, #0
 800fcac:	6078      	str	r0, [r7, #4]
 800fcae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	689b      	ldr	r3, [r3, #8]
 800fcb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800fcbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fcc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fcc2:	683a      	ldr	r2, [r7, #0]
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	4313      	orrs	r3, r2
 800fcc8:	f043 0307 	orr.w	r3, r3, #7
 800fccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	68fa      	ldr	r2, [r7, #12]
 800fcd2:	609a      	str	r2, [r3, #8]
}
 800fcd4:	bf00      	nop
 800fcd6:	3714      	adds	r7, #20
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr

0800fce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b087      	sub	sp, #28
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	607a      	str	r2, [r7, #4]
 800fcec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	689b      	ldr	r3, [r3, #8]
 800fcf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fcfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	021a      	lsls	r2, r3, #8
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	431a      	orrs	r2, r3
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	4313      	orrs	r3, r2
 800fd08:	697a      	ldr	r2, [r7, #20]
 800fd0a:	4313      	orrs	r3, r2
 800fd0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	697a      	ldr	r2, [r7, #20]
 800fd12:	609a      	str	r2, [r3, #8]
}
 800fd14:	bf00      	nop
 800fd16:	371c      	adds	r7, #28
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr

0800fd20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fd20:	b480      	push	{r7}
 800fd22:	b085      	sub	sp, #20
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
 800fd28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fd30:	2b01      	cmp	r3, #1
 800fd32:	d101      	bne.n	800fd38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fd34:	2302      	movs	r3, #2
 800fd36:	e097      	b.n	800fe68 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2202      	movs	r2, #2
 800fd44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	685b      	ldr	r3, [r3, #4]
 800fd4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	689b      	ldr	r3, [r3, #8]
 800fd56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	4a45      	ldr	r2, [pc, #276]	@ (800fe74 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800fd5e:	4293      	cmp	r3, r2
 800fd60:	d00e      	beq.n	800fd80 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	4a44      	ldr	r2, [pc, #272]	@ (800fe78 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d009      	beq.n	800fd80 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4a42      	ldr	r2, [pc, #264]	@ (800fe7c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d004      	beq.n	800fd80 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	4a41      	ldr	r2, [pc, #260]	@ (800fe80 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	d108      	bne.n	800fd92 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800fd86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	685b      	ldr	r3, [r3, #4]
 800fd8c:	68fa      	ldr	r2, [r7, #12]
 800fd8e:	4313      	orrs	r3, r2
 800fd90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800fd98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fd9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	68fa      	ldr	r2, [r7, #12]
 800fda4:	4313      	orrs	r3, r2
 800fda6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	68fa      	ldr	r2, [r7, #12]
 800fdae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	4a2f      	ldr	r2, [pc, #188]	@ (800fe74 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800fdb6:	4293      	cmp	r3, r2
 800fdb8:	d040      	beq.n	800fe3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	4a2e      	ldr	r2, [pc, #184]	@ (800fe78 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800fdc0:	4293      	cmp	r3, r2
 800fdc2:	d03b      	beq.n	800fe3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fdcc:	d036      	beq.n	800fe3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fdd6:	d031      	beq.n	800fe3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	4a29      	ldr	r2, [pc, #164]	@ (800fe84 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800fdde:	4293      	cmp	r3, r2
 800fde0:	d02c      	beq.n	800fe3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	4a28      	ldr	r2, [pc, #160]	@ (800fe88 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800fde8:	4293      	cmp	r3, r2
 800fdea:	d027      	beq.n	800fe3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	4a26      	ldr	r2, [pc, #152]	@ (800fe8c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800fdf2:	4293      	cmp	r3, r2
 800fdf4:	d022      	beq.n	800fe3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	4a25      	ldr	r2, [pc, #148]	@ (800fe90 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800fdfc:	4293      	cmp	r3, r2
 800fdfe:	d01d      	beq.n	800fe3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	4a23      	ldr	r2, [pc, #140]	@ (800fe94 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800fe06:	4293      	cmp	r3, r2
 800fe08:	d018      	beq.n	800fe3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	4a22      	ldr	r2, [pc, #136]	@ (800fe98 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800fe10:	4293      	cmp	r3, r2
 800fe12:	d013      	beq.n	800fe3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	4a18      	ldr	r2, [pc, #96]	@ (800fe7c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800fe1a:	4293      	cmp	r3, r2
 800fe1c:	d00e      	beq.n	800fe3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	4a17      	ldr	r2, [pc, #92]	@ (800fe80 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800fe24:	4293      	cmp	r3, r2
 800fe26:	d009      	beq.n	800fe3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	4a1b      	ldr	r2, [pc, #108]	@ (800fe9c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800fe2e:	4293      	cmp	r3, r2
 800fe30:	d004      	beq.n	800fe3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	4a1a      	ldr	r2, [pc, #104]	@ (800fea0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800fe38:	4293      	cmp	r3, r2
 800fe3a:	d10c      	bne.n	800fe56 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fe42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	689b      	ldr	r3, [r3, #8]
 800fe48:	68ba      	ldr	r2, [r7, #8]
 800fe4a:	4313      	orrs	r3, r2
 800fe4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	68ba      	ldr	r2, [r7, #8]
 800fe54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2201      	movs	r2, #1
 800fe5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2200      	movs	r2, #0
 800fe62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fe66:	2300      	movs	r3, #0
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	3714      	adds	r7, #20
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe72:	4770      	bx	lr
 800fe74:	40012c00 	.word	0x40012c00
 800fe78:	50012c00 	.word	0x50012c00
 800fe7c:	40013400 	.word	0x40013400
 800fe80:	50013400 	.word	0x50013400
 800fe84:	40000400 	.word	0x40000400
 800fe88:	50000400 	.word	0x50000400
 800fe8c:	40000800 	.word	0x40000800
 800fe90:	50000800 	.word	0x50000800
 800fe94:	40000c00 	.word	0x40000c00
 800fe98:	50000c00 	.word	0x50000c00
 800fe9c:	40014000 	.word	0x40014000
 800fea0:	50014000 	.word	0x50014000

0800fea4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d101      	bne.n	800feb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800feb2:	2301      	movs	r3, #1
 800feb4:	e042      	b.n	800ff3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800febc:	2b00      	cmp	r3, #0
 800febe:	d106      	bne.n	800fece <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2200      	movs	r2, #0
 800fec4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f7f2 fa5b 	bl	8002384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2224      	movs	r2, #36	@ 0x24
 800fed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	681a      	ldr	r2, [r3, #0]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	f022 0201 	bic.w	r2, r2, #1
 800fee4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800feea:	2b00      	cmp	r3, #0
 800feec:	d002      	beq.n	800fef4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f000 fd02 	bl	80108f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f000 fb51 	bl	801059c <UART_SetConfig>
 800fefa:	4603      	mov	r3, r0
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d101      	bne.n	800ff04 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ff00:	2301      	movs	r3, #1
 800ff02:	e01b      	b.n	800ff3c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	685a      	ldr	r2, [r3, #4]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ff12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	689a      	ldr	r2, [r3, #8]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ff22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	681a      	ldr	r2, [r3, #0]
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	f042 0201 	orr.w	r2, r2, #1
 800ff32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f000 fd81 	bl	8010a3c <UART_CheckIdleState>
 800ff3a:	4603      	mov	r3, r0
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3708      	adds	r7, #8
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}

0800ff44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b0ba      	sub	sp, #232	@ 0xe8
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	69db      	ldr	r3, [r3, #28]
 800ff52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	689b      	ldr	r3, [r3, #8]
 800ff66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ff6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ff6e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ff72:	4013      	ands	r3, r2
 800ff74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ff78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d11b      	bne.n	800ffb8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ff80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff84:	f003 0320 	and.w	r3, r3, #32
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d015      	beq.n	800ffb8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ff8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff90:	f003 0320 	and.w	r3, r3, #32
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d105      	bne.n	800ffa4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ff98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ff9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d009      	beq.n	800ffb8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	f000 82cb 	beq.w	8010544 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	4798      	blx	r3
      }
      return;
 800ffb6:	e2c5      	b.n	8010544 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ffb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	f000 8123 	beq.w	8010208 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ffc2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ffc6:	4b8d      	ldr	r3, [pc, #564]	@ (80101fc <HAL_UART_IRQHandler+0x2b8>)
 800ffc8:	4013      	ands	r3, r2
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d106      	bne.n	800ffdc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ffce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ffd2:	4b8b      	ldr	r3, [pc, #556]	@ (8010200 <HAL_UART_IRQHandler+0x2bc>)
 800ffd4:	4013      	ands	r3, r2
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	f000 8116 	beq.w	8010208 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ffdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ffe0:	f003 0301 	and.w	r3, r3, #1
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d011      	beq.n	801000c <HAL_UART_IRQHandler+0xc8>
 800ffe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ffec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d00b      	beq.n	801000c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	2201      	movs	r2, #1
 800fffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010002:	f043 0201 	orr.w	r2, r3, #1
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801000c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010010:	f003 0302 	and.w	r3, r3, #2
 8010014:	2b00      	cmp	r3, #0
 8010016:	d011      	beq.n	801003c <HAL_UART_IRQHandler+0xf8>
 8010018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801001c:	f003 0301 	and.w	r3, r3, #1
 8010020:	2b00      	cmp	r3, #0
 8010022:	d00b      	beq.n	801003c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	2202      	movs	r2, #2
 801002a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010032:	f043 0204 	orr.w	r2, r3, #4
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801003c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010040:	f003 0304 	and.w	r3, r3, #4
 8010044:	2b00      	cmp	r3, #0
 8010046:	d011      	beq.n	801006c <HAL_UART_IRQHandler+0x128>
 8010048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801004c:	f003 0301 	and.w	r3, r3, #1
 8010050:	2b00      	cmp	r3, #0
 8010052:	d00b      	beq.n	801006c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	2204      	movs	r2, #4
 801005a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010062:	f043 0202 	orr.w	r2, r3, #2
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801006c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010070:	f003 0308 	and.w	r3, r3, #8
 8010074:	2b00      	cmp	r3, #0
 8010076:	d017      	beq.n	80100a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801007c:	f003 0320 	and.w	r3, r3, #32
 8010080:	2b00      	cmp	r3, #0
 8010082:	d105      	bne.n	8010090 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010084:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010088:	4b5c      	ldr	r3, [pc, #368]	@ (80101fc <HAL_UART_IRQHandler+0x2b8>)
 801008a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801008c:	2b00      	cmp	r3, #0
 801008e:	d00b      	beq.n	80100a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	2208      	movs	r2, #8
 8010096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801009e:	f043 0208 	orr.w	r2, r3, #8
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80100a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d012      	beq.n	80100da <HAL_UART_IRQHandler+0x196>
 80100b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80100b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d00c      	beq.n	80100da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80100c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100d0:	f043 0220 	orr.w	r2, r3, #32
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	f000 8231 	beq.w	8010548 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80100e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100ea:	f003 0320 	and.w	r3, r3, #32
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d013      	beq.n	801011a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80100f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80100f6:	f003 0320 	and.w	r3, r3, #32
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d105      	bne.n	801010a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80100fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010106:	2b00      	cmp	r3, #0
 8010108:	d007      	beq.n	801011a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801010e:	2b00      	cmp	r3, #0
 8010110:	d003      	beq.n	801011a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010120:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	689b      	ldr	r3, [r3, #8]
 801012a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801012e:	2b40      	cmp	r3, #64	@ 0x40
 8010130:	d005      	beq.n	801013e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010136:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801013a:	2b00      	cmp	r3, #0
 801013c:	d054      	beq.n	80101e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f000 fd93 	bl	8010c6a <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	689b      	ldr	r3, [r3, #8]
 801014a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801014e:	2b40      	cmp	r3, #64	@ 0x40
 8010150:	d146      	bne.n	80101e0 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	3308      	adds	r3, #8
 8010158:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801015c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010160:	e853 3f00 	ldrex	r3, [r3]
 8010164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010168:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801016c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010170:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	3308      	adds	r3, #8
 801017a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801017e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010182:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010186:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801018a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801018e:	e841 2300 	strex	r3, r2, [r1]
 8010192:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010196:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801019a:	2b00      	cmp	r3, #0
 801019c:	d1d9      	bne.n	8010152 <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d017      	beq.n	80101d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101ae:	4a15      	ldr	r2, [pc, #84]	@ (8010204 <HAL_UART_IRQHandler+0x2c0>)
 80101b0:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7f5 fb5f 	bl	800587c <HAL_DMA_Abort_IT>
 80101be:	4603      	mov	r3, r0
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d019      	beq.n	80101f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101cc:	687a      	ldr	r2, [r7, #4]
 80101ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80101d2:	4610      	mov	r0, r2
 80101d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101d6:	e00f      	b.n	80101f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f000 f9c9 	bl	8010570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101de:	e00b      	b.n	80101f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f000 f9c5 	bl	8010570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101e6:	e007      	b.n	80101f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f000 f9c1 	bl	8010570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2200      	movs	r2, #0
 80101f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80101f6:	e1a7      	b.n	8010548 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101f8:	bf00      	nop
    return;
 80101fa:	e1a5      	b.n	8010548 <HAL_UART_IRQHandler+0x604>
 80101fc:	10000001 	.word	0x10000001
 8010200:	04000120 	.word	0x04000120
 8010204:	08010d37 	.word	0x08010d37

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801020c:	2b01      	cmp	r3, #1
 801020e:	f040 8150 	bne.w	80104b2 <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010216:	f003 0310 	and.w	r3, r3, #16
 801021a:	2b00      	cmp	r3, #0
 801021c:	f000 8149 	beq.w	80104b2 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010224:	f003 0310 	and.w	r3, r3, #16
 8010228:	2b00      	cmp	r3, #0
 801022a:	f000 8142 	beq.w	80104b2 <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	2210      	movs	r2, #16
 8010234:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	689b      	ldr	r3, [r3, #8]
 801023c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010240:	2b40      	cmp	r3, #64	@ 0x40
 8010242:	f040 80b8 	bne.w	80103b6 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010250:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010254:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010258:	2b00      	cmp	r3, #0
 801025a:	f000 8177 	beq.w	801054c <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010264:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010268:	429a      	cmp	r2, r3
 801026a:	f080 816f 	bcs.w	801054c <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010274:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801027e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010280:	2b81      	cmp	r3, #129	@ 0x81
 8010282:	f000 8087 	beq.w	8010394 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801028e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010292:	e853 3f00 	ldrex	r3, [r3]
 8010296:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801029a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801029e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80102a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	461a      	mov	r2, r3
 80102ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80102b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80102b4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80102bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80102c0:	e841 2300 	strex	r3, r2, [r1]
 80102c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80102c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d1da      	bne.n	8010286 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	3308      	adds	r3, #8
 80102d6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80102da:	e853 3f00 	ldrex	r3, [r3]
 80102de:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80102e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80102e2:	f023 0301 	bic.w	r3, r3, #1
 80102e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	3308      	adds	r3, #8
 80102f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80102f4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80102f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102fa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80102fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010300:	e841 2300 	strex	r3, r2, [r1]
 8010304:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010306:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010308:	2b00      	cmp	r3, #0
 801030a:	d1e1      	bne.n	80102d0 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	3308      	adds	r3, #8
 8010312:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010314:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010316:	e853 3f00 	ldrex	r3, [r3]
 801031a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801031c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801031e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010322:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	3308      	adds	r3, #8
 801032c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010330:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010332:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010334:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010336:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010338:	e841 2300 	strex	r3, r2, [r1]
 801033c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801033e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010340:	2b00      	cmp	r3, #0
 8010342:	d1e3      	bne.n	801030c <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2220      	movs	r2, #32
 8010348:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2200      	movs	r2, #0
 8010350:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801035a:	e853 3f00 	ldrex	r3, [r3]
 801035e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010362:	f023 0310 	bic.w	r3, r3, #16
 8010366:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	461a      	mov	r2, r3
 8010370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010374:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010376:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010378:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801037a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801037c:	e841 2300 	strex	r3, r2, [r1]
 8010380:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010384:	2b00      	cmp	r3, #0
 8010386:	d1e4      	bne.n	8010352 <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801038e:	4618      	mov	r0, r3
 8010390:	f7f5 f9f8 	bl	8005784 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2202      	movs	r2, #2
 8010398:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80103a6:	b29b      	uxth	r3, r3
 80103a8:	1ad3      	subs	r3, r2, r3
 80103aa:	b29b      	uxth	r3, r3
 80103ac:	4619      	mov	r1, r3
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 f8e8 	bl	8010584 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80103b4:	e0ca      	b.n	801054c <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80103c2:	b29b      	uxth	r3, r3
 80103c4:	1ad3      	subs	r3, r2, r3
 80103c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80103d0:	b29b      	uxth	r3, r3
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	f000 80bc 	beq.w	8010550 <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 80103d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80103dc:	2b00      	cmp	r3, #0
 80103de:	f000 80b7 	beq.w	8010550 <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ea:	e853 3f00 	ldrex	r3, [r3]
 80103ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80103f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80103f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	461a      	mov	r2, r3
 8010400:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010404:	647b      	str	r3, [r7, #68]	@ 0x44
 8010406:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010408:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801040a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801040c:	e841 2300 	strex	r3, r2, [r1]
 8010410:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010414:	2b00      	cmp	r3, #0
 8010416:	d1e4      	bne.n	80103e2 <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	3308      	adds	r3, #8
 801041e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010422:	e853 3f00 	ldrex	r3, [r3]
 8010426:	623b      	str	r3, [r7, #32]
   return(result);
 8010428:	6a3b      	ldr	r3, [r7, #32]
 801042a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801042e:	f023 0301 	bic.w	r3, r3, #1
 8010432:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	3308      	adds	r3, #8
 801043c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010440:	633a      	str	r2, [r7, #48]	@ 0x30
 8010442:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010444:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010448:	e841 2300 	strex	r3, r2, [r1]
 801044c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801044e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010450:	2b00      	cmp	r3, #0
 8010452:	d1e1      	bne.n	8010418 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2220      	movs	r2, #32
 8010458:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2200      	movs	r2, #0
 8010460:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2200      	movs	r2, #0
 8010466:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801046e:	693b      	ldr	r3, [r7, #16]
 8010470:	e853 3f00 	ldrex	r3, [r3]
 8010474:	60fb      	str	r3, [r7, #12]
   return(result);
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	f023 0310 	bic.w	r3, r3, #16
 801047c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	461a      	mov	r2, r3
 8010486:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801048a:	61fb      	str	r3, [r7, #28]
 801048c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801048e:	69b9      	ldr	r1, [r7, #24]
 8010490:	69fa      	ldr	r2, [r7, #28]
 8010492:	e841 2300 	strex	r3, r2, [r1]
 8010496:	617b      	str	r3, [r7, #20]
   return(result);
 8010498:	697b      	ldr	r3, [r7, #20]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d1e4      	bne.n	8010468 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2202      	movs	r2, #2
 80104a2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80104a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80104a8:	4619      	mov	r1, r3
 80104aa:	6878      	ldr	r0, [r7, #4]
 80104ac:	f000 f86a 	bl	8010584 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80104b0:	e04e      	b.n	8010550 <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80104b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80104b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d014      	beq.n	80104e8 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80104be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80104c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d105      	bne.n	80104d6 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80104ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80104ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d008      	beq.n	80104e8 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d03a      	beq.n	8010554 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	4798      	blx	r3
    }
    return;
 80104e6:	e035      	b.n	8010554 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80104e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80104ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d009      	beq.n	8010508 <HAL_UART_IRQHandler+0x5c4>
 80104f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80104f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d003      	beq.n	8010508 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f000 fc2e 	bl	8010d62 <UART_EndTransmit_IT>
    return;
 8010506:	e026      	b.n	8010556 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801050c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010510:	2b00      	cmp	r3, #0
 8010512:	d009      	beq.n	8010528 <HAL_UART_IRQHandler+0x5e4>
 8010514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010518:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801051c:	2b00      	cmp	r3, #0
 801051e:	d003      	beq.n	8010528 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	f000 fc53 	bl	8010dcc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010526:	e016      	b.n	8010556 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801052c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010530:	2b00      	cmp	r3, #0
 8010532:	d010      	beq.n	8010556 <HAL_UART_IRQHandler+0x612>
 8010534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010538:	2b00      	cmp	r3, #0
 801053a:	da0c      	bge.n	8010556 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f000 fc3b 	bl	8010db8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010542:	e008      	b.n	8010556 <HAL_UART_IRQHandler+0x612>
      return;
 8010544:	bf00      	nop
 8010546:	e006      	b.n	8010556 <HAL_UART_IRQHandler+0x612>
    return;
 8010548:	bf00      	nop
 801054a:	e004      	b.n	8010556 <HAL_UART_IRQHandler+0x612>
      return;
 801054c:	bf00      	nop
 801054e:	e002      	b.n	8010556 <HAL_UART_IRQHandler+0x612>
      return;
 8010550:	bf00      	nop
 8010552:	e000      	b.n	8010556 <HAL_UART_IRQHandler+0x612>
    return;
 8010554:	bf00      	nop
  }
}
 8010556:	37e8      	adds	r7, #232	@ 0xe8
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}

0801055c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801055c:	b480      	push	{r7}
 801055e:	b083      	sub	sp, #12
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010564:	bf00      	nop
 8010566:	370c      	adds	r7, #12
 8010568:	46bd      	mov	sp, r7
 801056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056e:	4770      	bx	lr

08010570 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010570:	b480      	push	{r7}
 8010572:	b083      	sub	sp, #12
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010578:	bf00      	nop
 801057a:	370c      	adds	r7, #12
 801057c:	46bd      	mov	sp, r7
 801057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010582:	4770      	bx	lr

08010584 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010584:	b480      	push	{r7}
 8010586:	b083      	sub	sp, #12
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
 801058c:	460b      	mov	r3, r1
 801058e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010590:	bf00      	nop
 8010592:	370c      	adds	r7, #12
 8010594:	46bd      	mov	sp, r7
 8010596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059a:	4770      	bx	lr

0801059c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801059c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80105a0:	b094      	sub	sp, #80	@ 0x50
 80105a2:	af00      	add	r7, sp, #0
 80105a4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80105a6:	2300      	movs	r3, #0
 80105a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80105ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105ae:	681a      	ldr	r2, [r3, #0]
 80105b0:	4b83      	ldr	r3, [pc, #524]	@ (80107c0 <UART_SetConfig+0x224>)
 80105b2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80105b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105b6:	689a      	ldr	r2, [r3, #8]
 80105b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105ba:	691b      	ldr	r3, [r3, #16]
 80105bc:	431a      	orrs	r2, r3
 80105be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105c0:	695b      	ldr	r3, [r3, #20]
 80105c2:	431a      	orrs	r2, r3
 80105c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105c6:	69db      	ldr	r3, [r3, #28]
 80105c8:	4313      	orrs	r3, r2
 80105ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80105cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	497c      	ldr	r1, [pc, #496]	@ (80107c4 <UART_SetConfig+0x228>)
 80105d4:	4019      	ands	r1, r3
 80105d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105d8:	681a      	ldr	r2, [r3, #0]
 80105da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80105dc:	430b      	orrs	r3, r1
 80105de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80105e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	685b      	ldr	r3, [r3, #4]
 80105e6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80105ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105ec:	68d9      	ldr	r1, [r3, #12]
 80105ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105f0:	681a      	ldr	r2, [r3, #0]
 80105f2:	ea40 0301 	orr.w	r3, r0, r1
 80105f6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80105f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105fa:	699b      	ldr	r3, [r3, #24]
 80105fc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80105fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010600:	681a      	ldr	r2, [r3, #0]
 8010602:	4b6f      	ldr	r3, [pc, #444]	@ (80107c0 <UART_SetConfig+0x224>)
 8010604:	429a      	cmp	r2, r3
 8010606:	d009      	beq.n	801061c <UART_SetConfig+0x80>
 8010608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801060a:	681a      	ldr	r2, [r3, #0]
 801060c:	4b6e      	ldr	r3, [pc, #440]	@ (80107c8 <UART_SetConfig+0x22c>)
 801060e:	429a      	cmp	r2, r3
 8010610:	d004      	beq.n	801061c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010614:	6a1a      	ldr	r2, [r3, #32]
 8010616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010618:	4313      	orrs	r3, r2
 801061a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801061c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	689b      	ldr	r3, [r3, #8]
 8010622:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8010626:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 801062a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801062c:	681a      	ldr	r2, [r3, #0]
 801062e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010630:	430b      	orrs	r3, r1
 8010632:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801063a:	f023 000f 	bic.w	r0, r3, #15
 801063e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010640:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8010642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010644:	681a      	ldr	r2, [r3, #0]
 8010646:	ea40 0301 	orr.w	r3, r0, r1
 801064a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801064c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801064e:	681a      	ldr	r2, [r3, #0]
 8010650:	4b5e      	ldr	r3, [pc, #376]	@ (80107cc <UART_SetConfig+0x230>)
 8010652:	429a      	cmp	r2, r3
 8010654:	d102      	bne.n	801065c <UART_SetConfig+0xc0>
 8010656:	2301      	movs	r3, #1
 8010658:	64bb      	str	r3, [r7, #72]	@ 0x48
 801065a:	e032      	b.n	80106c2 <UART_SetConfig+0x126>
 801065c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801065e:	681a      	ldr	r2, [r3, #0]
 8010660:	4b5b      	ldr	r3, [pc, #364]	@ (80107d0 <UART_SetConfig+0x234>)
 8010662:	429a      	cmp	r2, r3
 8010664:	d102      	bne.n	801066c <UART_SetConfig+0xd0>
 8010666:	2302      	movs	r3, #2
 8010668:	64bb      	str	r3, [r7, #72]	@ 0x48
 801066a:	e02a      	b.n	80106c2 <UART_SetConfig+0x126>
 801066c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801066e:	681a      	ldr	r2, [r3, #0]
 8010670:	4b58      	ldr	r3, [pc, #352]	@ (80107d4 <UART_SetConfig+0x238>)
 8010672:	429a      	cmp	r2, r3
 8010674:	d102      	bne.n	801067c <UART_SetConfig+0xe0>
 8010676:	2304      	movs	r3, #4
 8010678:	64bb      	str	r3, [r7, #72]	@ 0x48
 801067a:	e022      	b.n	80106c2 <UART_SetConfig+0x126>
 801067c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801067e:	681a      	ldr	r2, [r3, #0]
 8010680:	4b55      	ldr	r3, [pc, #340]	@ (80107d8 <UART_SetConfig+0x23c>)
 8010682:	429a      	cmp	r2, r3
 8010684:	d102      	bne.n	801068c <UART_SetConfig+0xf0>
 8010686:	2308      	movs	r3, #8
 8010688:	64bb      	str	r3, [r7, #72]	@ 0x48
 801068a:	e01a      	b.n	80106c2 <UART_SetConfig+0x126>
 801068c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801068e:	681a      	ldr	r2, [r3, #0]
 8010690:	4b52      	ldr	r3, [pc, #328]	@ (80107dc <UART_SetConfig+0x240>)
 8010692:	429a      	cmp	r2, r3
 8010694:	d102      	bne.n	801069c <UART_SetConfig+0x100>
 8010696:	2310      	movs	r3, #16
 8010698:	64bb      	str	r3, [r7, #72]	@ 0x48
 801069a:	e012      	b.n	80106c2 <UART_SetConfig+0x126>
 801069c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801069e:	681a      	ldr	r2, [r3, #0]
 80106a0:	4b4f      	ldr	r3, [pc, #316]	@ (80107e0 <UART_SetConfig+0x244>)
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d103      	bne.n	80106ae <UART_SetConfig+0x112>
 80106a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80106aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80106ac:	e009      	b.n	80106c2 <UART_SetConfig+0x126>
 80106ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106b0:	681a      	ldr	r2, [r3, #0]
 80106b2:	4b43      	ldr	r3, [pc, #268]	@ (80107c0 <UART_SetConfig+0x224>)
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d102      	bne.n	80106be <UART_SetConfig+0x122>
 80106b8:	2320      	movs	r3, #32
 80106ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80106bc:	e001      	b.n	80106c2 <UART_SetConfig+0x126>
 80106be:	2300      	movs	r3, #0
 80106c0:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80106c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106c4:	681a      	ldr	r2, [r3, #0]
 80106c6:	4b3e      	ldr	r3, [pc, #248]	@ (80107c0 <UART_SetConfig+0x224>)
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d005      	beq.n	80106d8 <UART_SetConfig+0x13c>
 80106cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106ce:	681a      	ldr	r2, [r3, #0]
 80106d0:	4b3d      	ldr	r3, [pc, #244]	@ (80107c8 <UART_SetConfig+0x22c>)
 80106d2:	429a      	cmp	r2, r3
 80106d4:	f040 8088 	bne.w	80107e8 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80106d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80106da:	2200      	movs	r2, #0
 80106dc:	623b      	str	r3, [r7, #32]
 80106de:	627a      	str	r2, [r7, #36]	@ 0x24
 80106e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80106e4:	f7fb ff28 	bl	800c538 <HAL_RCCEx_GetPeriphCLKFreq>
 80106e8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80106ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	f000 80eb 	beq.w	80108c8 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80106f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106f6:	4a3b      	ldr	r2, [pc, #236]	@ (80107e4 <UART_SetConfig+0x248>)
 80106f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80106fc:	461a      	mov	r2, r3
 80106fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010700:	fbb3 f3f2 	udiv	r3, r3, r2
 8010704:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010708:	685a      	ldr	r2, [r3, #4]
 801070a:	4613      	mov	r3, r2
 801070c:	005b      	lsls	r3, r3, #1
 801070e:	4413      	add	r3, r2
 8010710:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010712:	429a      	cmp	r2, r3
 8010714:	d305      	bcc.n	8010722 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801071c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801071e:	429a      	cmp	r2, r3
 8010720:	d903      	bls.n	801072a <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8010722:	2301      	movs	r3, #1
 8010724:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010728:	e048      	b.n	80107bc <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801072a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801072c:	2200      	movs	r2, #0
 801072e:	61bb      	str	r3, [r7, #24]
 8010730:	61fa      	str	r2, [r7, #28]
 8010732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010736:	4a2b      	ldr	r2, [pc, #172]	@ (80107e4 <UART_SetConfig+0x248>)
 8010738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801073c:	b29b      	uxth	r3, r3
 801073e:	2200      	movs	r2, #0
 8010740:	613b      	str	r3, [r7, #16]
 8010742:	617a      	str	r2, [r7, #20]
 8010744:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010748:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801074c:	f7ef fdb2 	bl	80002b4 <__aeabi_uldivmod>
 8010750:	4602      	mov	r2, r0
 8010752:	460b      	mov	r3, r1
 8010754:	4610      	mov	r0, r2
 8010756:	4619      	mov	r1, r3
 8010758:	f04f 0200 	mov.w	r2, #0
 801075c:	f04f 0300 	mov.w	r3, #0
 8010760:	020b      	lsls	r3, r1, #8
 8010762:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010766:	0202      	lsls	r2, r0, #8
 8010768:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801076a:	6849      	ldr	r1, [r1, #4]
 801076c:	0849      	lsrs	r1, r1, #1
 801076e:	2000      	movs	r0, #0
 8010770:	460c      	mov	r4, r1
 8010772:	4605      	mov	r5, r0
 8010774:	eb12 0804 	adds.w	r8, r2, r4
 8010778:	eb43 0905 	adc.w	r9, r3, r5
 801077c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801077e:	685b      	ldr	r3, [r3, #4]
 8010780:	2200      	movs	r2, #0
 8010782:	60bb      	str	r3, [r7, #8]
 8010784:	60fa      	str	r2, [r7, #12]
 8010786:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801078a:	4640      	mov	r0, r8
 801078c:	4649      	mov	r1, r9
 801078e:	f7ef fd91 	bl	80002b4 <__aeabi_uldivmod>
 8010792:	4602      	mov	r2, r0
 8010794:	460b      	mov	r3, r1
 8010796:	4613      	mov	r3, r2
 8010798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801079a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801079c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80107a0:	d308      	bcc.n	80107b4 <UART_SetConfig+0x218>
 80107a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80107a8:	d204      	bcs.n	80107b4 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80107aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80107b0:	60da      	str	r2, [r3, #12]
 80107b2:	e003      	b.n	80107bc <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80107b4:	2301      	movs	r3, #1
 80107b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80107ba:	e085      	b.n	80108c8 <UART_SetConfig+0x32c>
 80107bc:	e084      	b.n	80108c8 <UART_SetConfig+0x32c>
 80107be:	bf00      	nop
 80107c0:	46002400 	.word	0x46002400
 80107c4:	cfff69f3 	.word	0xcfff69f3
 80107c8:	56002400 	.word	0x56002400
 80107cc:	40013800 	.word	0x40013800
 80107d0:	40004400 	.word	0x40004400
 80107d4:	40004800 	.word	0x40004800
 80107d8:	40004c00 	.word	0x40004c00
 80107dc:	40005000 	.word	0x40005000
 80107e0:	40006400 	.word	0x40006400
 80107e4:	08011a00 	.word	0x08011a00
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80107e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ea:	69db      	ldr	r3, [r3, #28]
 80107ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80107f0:	d13c      	bne.n	801086c <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80107f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80107f4:	2200      	movs	r2, #0
 80107f6:	603b      	str	r3, [r7, #0]
 80107f8:	607a      	str	r2, [r7, #4]
 80107fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80107fe:	f7fb fe9b 	bl	800c538 <HAL_RCCEx_GetPeriphCLKFreq>
 8010802:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010806:	2b00      	cmp	r3, #0
 8010808:	d05e      	beq.n	80108c8 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801080a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801080c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801080e:	4a39      	ldr	r2, [pc, #228]	@ (80108f4 <UART_SetConfig+0x358>)
 8010810:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010814:	461a      	mov	r2, r3
 8010816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010818:	fbb3 f3f2 	udiv	r3, r3, r2
 801081c:	005a      	lsls	r2, r3, #1
 801081e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010820:	685b      	ldr	r3, [r3, #4]
 8010822:	085b      	lsrs	r3, r3, #1
 8010824:	441a      	add	r2, r3
 8010826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010828:	685b      	ldr	r3, [r3, #4]
 801082a:	fbb2 f3f3 	udiv	r3, r2, r3
 801082e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010832:	2b0f      	cmp	r3, #15
 8010834:	d916      	bls.n	8010864 <UART_SetConfig+0x2c8>
 8010836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801083c:	d212      	bcs.n	8010864 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801083e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010840:	b29b      	uxth	r3, r3
 8010842:	f023 030f 	bic.w	r3, r3, #15
 8010846:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801084a:	085b      	lsrs	r3, r3, #1
 801084c:	b29b      	uxth	r3, r3
 801084e:	f003 0307 	and.w	r3, r3, #7
 8010852:	b29a      	uxth	r2, r3
 8010854:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010856:	4313      	orrs	r3, r2
 8010858:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 801085a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010860:	60da      	str	r2, [r3, #12]
 8010862:	e031      	b.n	80108c8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8010864:	2301      	movs	r3, #1
 8010866:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801086a:	e02d      	b.n	80108c8 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801086c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801086e:	2200      	movs	r2, #0
 8010870:	469a      	mov	sl, r3
 8010872:	4693      	mov	fp, r2
 8010874:	4650      	mov	r0, sl
 8010876:	4659      	mov	r1, fp
 8010878:	f7fb fe5e 	bl	800c538 <HAL_RCCEx_GetPeriphCLKFreq>
 801087c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 801087e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010880:	2b00      	cmp	r3, #0
 8010882:	d021      	beq.n	80108c8 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010888:	4a1a      	ldr	r2, [pc, #104]	@ (80108f4 <UART_SetConfig+0x358>)
 801088a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801088e:	461a      	mov	r2, r3
 8010890:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010892:	fbb3 f2f2 	udiv	r2, r3, r2
 8010896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010898:	685b      	ldr	r3, [r3, #4]
 801089a:	085b      	lsrs	r3, r3, #1
 801089c:	441a      	add	r2, r3
 801089e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108a0:	685b      	ldr	r3, [r3, #4]
 80108a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80108a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80108a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108aa:	2b0f      	cmp	r3, #15
 80108ac:	d909      	bls.n	80108c2 <UART_SetConfig+0x326>
 80108ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80108b4:	d205      	bcs.n	80108c2 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80108b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108b8:	b29a      	uxth	r2, r3
 80108ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	60da      	str	r2, [r3, #12]
 80108c0:	e002      	b.n	80108c8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80108c2:	2301      	movs	r3, #1
 80108c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80108c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ca:	2201      	movs	r2, #1
 80108cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80108d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d2:	2201      	movs	r2, #1
 80108d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80108d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108da:	2200      	movs	r2, #0
 80108dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80108de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108e0:	2200      	movs	r2, #0
 80108e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80108e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80108e8:	4618      	mov	r0, r3
 80108ea:	3750      	adds	r7, #80	@ 0x50
 80108ec:	46bd      	mov	sp, r7
 80108ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80108f2:	bf00      	nop
 80108f4:	08011a00 	.word	0x08011a00

080108f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80108f8:	b480      	push	{r7}
 80108fa:	b083      	sub	sp, #12
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010904:	f003 0308 	and.w	r3, r3, #8
 8010908:	2b00      	cmp	r3, #0
 801090a:	d00a      	beq.n	8010922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	685b      	ldr	r3, [r3, #4]
 8010912:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	430a      	orrs	r2, r1
 8010920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010926:	f003 0301 	and.w	r3, r3, #1
 801092a:	2b00      	cmp	r3, #0
 801092c:	d00a      	beq.n	8010944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	685b      	ldr	r3, [r3, #4]
 8010934:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	430a      	orrs	r2, r1
 8010942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010948:	f003 0302 	and.w	r3, r3, #2
 801094c:	2b00      	cmp	r3, #0
 801094e:	d00a      	beq.n	8010966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	430a      	orrs	r2, r1
 8010964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801096a:	f003 0304 	and.w	r3, r3, #4
 801096e:	2b00      	cmp	r3, #0
 8010970:	d00a      	beq.n	8010988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	430a      	orrs	r2, r1
 8010986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801098c:	f003 0310 	and.w	r3, r3, #16
 8010990:	2b00      	cmp	r3, #0
 8010992:	d00a      	beq.n	80109aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	689b      	ldr	r3, [r3, #8]
 801099a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	430a      	orrs	r2, r1
 80109a8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109ae:	f003 0320 	and.w	r3, r3, #32
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d00a      	beq.n	80109cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	689b      	ldr	r3, [r3, #8]
 80109bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	430a      	orrs	r2, r1
 80109ca:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d01a      	beq.n	8010a0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	685b      	ldr	r3, [r3, #4]
 80109de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	430a      	orrs	r2, r1
 80109ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80109f6:	d10a      	bne.n	8010a0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	430a      	orrs	r2, r1
 8010a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d00a      	beq.n	8010a30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	685b      	ldr	r3, [r3, #4]
 8010a20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	430a      	orrs	r2, r1
 8010a2e:	605a      	str	r2, [r3, #4]
  }
}
 8010a30:	bf00      	nop
 8010a32:	370c      	adds	r7, #12
 8010a34:	46bd      	mov	sp, r7
 8010a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3a:	4770      	bx	lr

08010a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b098      	sub	sp, #96	@ 0x60
 8010a40:	af02      	add	r7, sp, #8
 8010a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	2200      	movs	r2, #0
 8010a48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010a4c:	f7f2 f92a 	bl	8002ca4 <HAL_GetTick>
 8010a50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f003 0308 	and.w	r3, r3, #8
 8010a5c:	2b08      	cmp	r3, #8
 8010a5e:	d12f      	bne.n	8010ac0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010a64:	9300      	str	r3, [sp, #0]
 8010a66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a68:	2200      	movs	r2, #0
 8010a6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f000 f88e 	bl	8010b90 <UART_WaitOnFlagUntilTimeout>
 8010a74:	4603      	mov	r3, r0
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d022      	beq.n	8010ac0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a82:	e853 3f00 	ldrex	r3, [r3]
 8010a86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010a8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	461a      	mov	r2, r3
 8010a96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a98:	647b      	str	r3, [r7, #68]	@ 0x44
 8010a9a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010a9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010aa0:	e841 2300 	strex	r3, r2, [r1]
 8010aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d1e6      	bne.n	8010a7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2220      	movs	r2, #32
 8010ab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010abc:	2303      	movs	r3, #3
 8010abe:	e063      	b.n	8010b88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	f003 0304 	and.w	r3, r3, #4
 8010aca:	2b04      	cmp	r3, #4
 8010acc:	d149      	bne.n	8010b62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ace:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010ad2:	9300      	str	r3, [sp, #0]
 8010ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f000 f857 	bl	8010b90 <UART_WaitOnFlagUntilTimeout>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d03c      	beq.n	8010b62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010af0:	e853 3f00 	ldrex	r3, [r3]
 8010af4:	623b      	str	r3, [r7, #32]
   return(result);
 8010af6:	6a3b      	ldr	r3, [r7, #32]
 8010af8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	461a      	mov	r2, r3
 8010b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b06:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010b0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b0e:	e841 2300 	strex	r3, r2, [r1]
 8010b12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d1e6      	bne.n	8010ae8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	3308      	adds	r3, #8
 8010b20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b22:	693b      	ldr	r3, [r7, #16]
 8010b24:	e853 3f00 	ldrex	r3, [r3]
 8010b28:	60fb      	str	r3, [r7, #12]
   return(result);
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	f023 0301 	bic.w	r3, r3, #1
 8010b30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	3308      	adds	r3, #8
 8010b38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010b3a:	61fa      	str	r2, [r7, #28]
 8010b3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b3e:	69b9      	ldr	r1, [r7, #24]
 8010b40:	69fa      	ldr	r2, [r7, #28]
 8010b42:	e841 2300 	strex	r3, r2, [r1]
 8010b46:	617b      	str	r3, [r7, #20]
   return(result);
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d1e5      	bne.n	8010b1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2220      	movs	r2, #32
 8010b52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010b5e:	2303      	movs	r3, #3
 8010b60:	e012      	b.n	8010b88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2220      	movs	r2, #32
 8010b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2220      	movs	r2, #32
 8010b6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2200      	movs	r2, #0
 8010b76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2200      	movs	r2, #0
 8010b82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010b86:	2300      	movs	r3, #0
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3758      	adds	r7, #88	@ 0x58
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}

08010b90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b084      	sub	sp, #16
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	60f8      	str	r0, [r7, #12]
 8010b98:	60b9      	str	r1, [r7, #8]
 8010b9a:	603b      	str	r3, [r7, #0]
 8010b9c:	4613      	mov	r3, r2
 8010b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010ba0:	e04f      	b.n	8010c42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010ba2:	69bb      	ldr	r3, [r7, #24]
 8010ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ba8:	d04b      	beq.n	8010c42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010baa:	f7f2 f87b 	bl	8002ca4 <HAL_GetTick>
 8010bae:	4602      	mov	r2, r0
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	1ad3      	subs	r3, r2, r3
 8010bb4:	69ba      	ldr	r2, [r7, #24]
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	d302      	bcc.n	8010bc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8010bba:	69bb      	ldr	r3, [r7, #24]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d101      	bne.n	8010bc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010bc0:	2303      	movs	r3, #3
 8010bc2:	e04e      	b.n	8010c62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	f003 0304 	and.w	r3, r3, #4
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d037      	beq.n	8010c42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	2b80      	cmp	r3, #128	@ 0x80
 8010bd6:	d034      	beq.n	8010c42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010bd8:	68bb      	ldr	r3, [r7, #8]
 8010bda:	2b40      	cmp	r3, #64	@ 0x40
 8010bdc:	d031      	beq.n	8010c42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	69db      	ldr	r3, [r3, #28]
 8010be4:	f003 0308 	and.w	r3, r3, #8
 8010be8:	2b08      	cmp	r3, #8
 8010bea:	d110      	bne.n	8010c0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	2208      	movs	r2, #8
 8010bf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010bf4:	68f8      	ldr	r0, [r7, #12]
 8010bf6:	f000 f838 	bl	8010c6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	2208      	movs	r2, #8
 8010bfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	2200      	movs	r2, #0
 8010c06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	e029      	b.n	8010c62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	69db      	ldr	r3, [r3, #28]
 8010c14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010c18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010c1c:	d111      	bne.n	8010c42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010c26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010c28:	68f8      	ldr	r0, [r7, #12]
 8010c2a:	f000 f81e 	bl	8010c6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	2220      	movs	r2, #32
 8010c32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	2200      	movs	r2, #0
 8010c3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010c3e:	2303      	movs	r3, #3
 8010c40:	e00f      	b.n	8010c62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	69da      	ldr	r2, [r3, #28]
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	4013      	ands	r3, r2
 8010c4c:	68ba      	ldr	r2, [r7, #8]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	bf0c      	ite	eq
 8010c52:	2301      	moveq	r3, #1
 8010c54:	2300      	movne	r3, #0
 8010c56:	b2db      	uxtb	r3, r3
 8010c58:	461a      	mov	r2, r3
 8010c5a:	79fb      	ldrb	r3, [r7, #7]
 8010c5c:	429a      	cmp	r2, r3
 8010c5e:	d0a0      	beq.n	8010ba2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010c60:	2300      	movs	r3, #0
}
 8010c62:	4618      	mov	r0, r3
 8010c64:	3710      	adds	r7, #16
 8010c66:	46bd      	mov	sp, r7
 8010c68:	bd80      	pop	{r7, pc}

08010c6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010c6a:	b480      	push	{r7}
 8010c6c:	b095      	sub	sp, #84	@ 0x54
 8010c6e:	af00      	add	r7, sp, #0
 8010c70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c7a:	e853 3f00 	ldrex	r3, [r3]
 8010c7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c90:	643b      	str	r3, [r7, #64]	@ 0x40
 8010c92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010c96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010c98:	e841 2300 	strex	r3, r2, [r1]
 8010c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d1e6      	bne.n	8010c72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	3308      	adds	r3, #8
 8010caa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cac:	6a3b      	ldr	r3, [r7, #32]
 8010cae:	e853 3f00 	ldrex	r3, [r3]
 8010cb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8010cb4:	69fb      	ldr	r3, [r7, #28]
 8010cb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010cba:	f023 0301 	bic.w	r3, r3, #1
 8010cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	3308      	adds	r3, #8
 8010cc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010cc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ccc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010cd0:	e841 2300 	strex	r3, r2, [r1]
 8010cd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d1e3      	bne.n	8010ca4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ce0:	2b01      	cmp	r3, #1
 8010ce2:	d118      	bne.n	8010d16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	e853 3f00 	ldrex	r3, [r3]
 8010cf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8010cf2:	68bb      	ldr	r3, [r7, #8]
 8010cf4:	f023 0310 	bic.w	r3, r3, #16
 8010cf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	461a      	mov	r2, r3
 8010d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d02:	61bb      	str	r3, [r7, #24]
 8010d04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d06:	6979      	ldr	r1, [r7, #20]
 8010d08:	69ba      	ldr	r2, [r7, #24]
 8010d0a:	e841 2300 	strex	r3, r2, [r1]
 8010d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d1e6      	bne.n	8010ce4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2220      	movs	r2, #32
 8010d1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2200      	movs	r2, #0
 8010d22:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2200      	movs	r2, #0
 8010d28:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010d2a:	bf00      	nop
 8010d2c:	3754      	adds	r7, #84	@ 0x54
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d34:	4770      	bx	lr

08010d36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010d36:	b580      	push	{r7, lr}
 8010d38:	b084      	sub	sp, #16
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010d42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	2200      	movs	r2, #0
 8010d48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	2200      	movs	r2, #0
 8010d50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010d54:	68f8      	ldr	r0, [r7, #12]
 8010d56:	f7ff fc0b 	bl	8010570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d5a:	bf00      	nop
 8010d5c:	3710      	adds	r7, #16
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd80      	pop	{r7, pc}

08010d62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010d62:	b580      	push	{r7, lr}
 8010d64:	b088      	sub	sp, #32
 8010d66:	af00      	add	r7, sp, #0
 8010d68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	e853 3f00 	ldrex	r3, [r3]
 8010d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d7e:	61fb      	str	r3, [r7, #28]
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	461a      	mov	r2, r3
 8010d86:	69fb      	ldr	r3, [r7, #28]
 8010d88:	61bb      	str	r3, [r7, #24]
 8010d8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d8c:	6979      	ldr	r1, [r7, #20]
 8010d8e:	69ba      	ldr	r2, [r7, #24]
 8010d90:	e841 2300 	strex	r3, r2, [r1]
 8010d94:	613b      	str	r3, [r7, #16]
   return(result);
 8010d96:	693b      	ldr	r3, [r7, #16]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d1e6      	bne.n	8010d6a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2220      	movs	r2, #32
 8010da0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2200      	movs	r2, #0
 8010da8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010daa:	6878      	ldr	r0, [r7, #4]
 8010dac:	f7ff fbd6 	bl	801055c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010db0:	bf00      	nop
 8010db2:	3720      	adds	r7, #32
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}

08010db8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b083      	sub	sp, #12
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010dc0:	bf00      	nop
 8010dc2:	370c      	adds	r7, #12
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dca:	4770      	bx	lr

08010dcc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010dcc:	b480      	push	{r7}
 8010dce:	b083      	sub	sp, #12
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010dd4:	bf00      	nop
 8010dd6:	370c      	adds	r7, #12
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dde:	4770      	bx	lr

08010de0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010de0:	b480      	push	{r7}
 8010de2:	b085      	sub	sp, #20
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010dee:	2b01      	cmp	r3, #1
 8010df0:	d101      	bne.n	8010df6 <HAL_UARTEx_DisableFifoMode+0x16>
 8010df2:	2302      	movs	r3, #2
 8010df4:	e027      	b.n	8010e46 <HAL_UARTEx_DisableFifoMode+0x66>
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	2201      	movs	r2, #1
 8010dfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2224      	movs	r2, #36	@ 0x24
 8010e02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	681a      	ldr	r2, [r3, #0]
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	f022 0201 	bic.w	r2, r2, #1
 8010e1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010e24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2200      	movs	r2, #0
 8010e2a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	68fa      	ldr	r2, [r7, #12]
 8010e32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2220      	movs	r2, #32
 8010e38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2200      	movs	r2, #0
 8010e40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010e44:	2300      	movs	r3, #0
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	3714      	adds	r7, #20
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e50:	4770      	bx	lr

08010e52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010e52:	b580      	push	{r7, lr}
 8010e54:	b084      	sub	sp, #16
 8010e56:	af00      	add	r7, sp, #0
 8010e58:	6078      	str	r0, [r7, #4]
 8010e5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010e62:	2b01      	cmp	r3, #1
 8010e64:	d101      	bne.n	8010e6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010e66:	2302      	movs	r3, #2
 8010e68:	e02d      	b.n	8010ec6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2201      	movs	r2, #1
 8010e6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	2224      	movs	r2, #36	@ 0x24
 8010e76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	681a      	ldr	r2, [r3, #0]
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	f022 0201 	bic.w	r2, r2, #1
 8010e90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	689b      	ldr	r3, [r3, #8]
 8010e98:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	683a      	ldr	r2, [r7, #0]
 8010ea2:	430a      	orrs	r2, r1
 8010ea4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f000 f850 	bl	8010f4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	68fa      	ldr	r2, [r7, #12]
 8010eb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2220      	movs	r2, #32
 8010eb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010ec4:	2300      	movs	r3, #0
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	3710      	adds	r7, #16
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bd80      	pop	{r7, pc}

08010ece <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010ece:	b580      	push	{r7, lr}
 8010ed0:	b084      	sub	sp, #16
 8010ed2:	af00      	add	r7, sp, #0
 8010ed4:	6078      	str	r0, [r7, #4]
 8010ed6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010ede:	2b01      	cmp	r3, #1
 8010ee0:	d101      	bne.n	8010ee6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010ee2:	2302      	movs	r3, #2
 8010ee4:	e02d      	b.n	8010f42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2201      	movs	r2, #1
 8010eea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2224      	movs	r2, #36	@ 0x24
 8010ef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	681a      	ldr	r2, [r3, #0]
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	f022 0201 	bic.w	r2, r2, #1
 8010f0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	689b      	ldr	r3, [r3, #8]
 8010f14:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	683a      	ldr	r2, [r7, #0]
 8010f1e:	430a      	orrs	r2, r1
 8010f20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010f22:	6878      	ldr	r0, [r7, #4]
 8010f24:	f000 f812 	bl	8010f4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	68fa      	ldr	r2, [r7, #12]
 8010f2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2220      	movs	r2, #32
 8010f34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010f40:	2300      	movs	r3, #0
}
 8010f42:	4618      	mov	r0, r3
 8010f44:	3710      	adds	r7, #16
 8010f46:	46bd      	mov	sp, r7
 8010f48:	bd80      	pop	{r7, pc}
	...

08010f4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010f4c:	b480      	push	{r7}
 8010f4e:	b085      	sub	sp, #20
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d108      	bne.n	8010f6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2201      	movs	r2, #1
 8010f60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2201      	movs	r2, #1
 8010f68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010f6c:	e031      	b.n	8010fd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010f6e:	2308      	movs	r3, #8
 8010f70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010f72:	2308      	movs	r3, #8
 8010f74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	689b      	ldr	r3, [r3, #8]
 8010f7c:	0e5b      	lsrs	r3, r3, #25
 8010f7e:	b2db      	uxtb	r3, r3
 8010f80:	f003 0307 	and.w	r3, r3, #7
 8010f84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	689b      	ldr	r3, [r3, #8]
 8010f8c:	0f5b      	lsrs	r3, r3, #29
 8010f8e:	b2db      	uxtb	r3, r3
 8010f90:	f003 0307 	and.w	r3, r3, #7
 8010f94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010f96:	7bbb      	ldrb	r3, [r7, #14]
 8010f98:	7b3a      	ldrb	r2, [r7, #12]
 8010f9a:	4911      	ldr	r1, [pc, #68]	@ (8010fe0 <UARTEx_SetNbDataToProcess+0x94>)
 8010f9c:	5c8a      	ldrb	r2, [r1, r2]
 8010f9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010fa2:	7b3a      	ldrb	r2, [r7, #12]
 8010fa4:	490f      	ldr	r1, [pc, #60]	@ (8010fe4 <UARTEx_SetNbDataToProcess+0x98>)
 8010fa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010fa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8010fac:	b29a      	uxth	r2, r3
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010fb4:	7bfb      	ldrb	r3, [r7, #15]
 8010fb6:	7b7a      	ldrb	r2, [r7, #13]
 8010fb8:	4909      	ldr	r1, [pc, #36]	@ (8010fe0 <UARTEx_SetNbDataToProcess+0x94>)
 8010fba:	5c8a      	ldrb	r2, [r1, r2]
 8010fbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010fc0:	7b7a      	ldrb	r2, [r7, #13]
 8010fc2:	4908      	ldr	r1, [pc, #32]	@ (8010fe4 <UARTEx_SetNbDataToProcess+0x98>)
 8010fc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010fc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8010fca:	b29a      	uxth	r2, r3
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010fd2:	bf00      	nop
 8010fd4:	3714      	adds	r7, #20
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fdc:	4770      	bx	lr
 8010fde:	bf00      	nop
 8010fe0:	08011a18 	.word	0x08011a18
 8010fe4:	08011a20 	.word	0x08011a20

08010fe8 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b086      	sub	sp, #24
 8010fec:	af02      	add	r7, sp, #8
 8010fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8010ff4:	f7f1 fe56 	bl	8002ca4 <HAL_GetTick>
 8010ff8:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d102      	bne.n	8011006 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8011000:	2301      	movs	r3, #1
 8011002:	73fb      	strb	r3, [r7, #15]
 8011004:	e137      	b.n	8011276 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	4a76      	ldr	r2, [pc, #472]	@ (80111e4 <HAL_XSPI_Init+0x1fc>)
 801100c:	4293      	cmp	r3, r2
 801100e:	d008      	beq.n	8011022 <HAL_XSPI_Init+0x3a>
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	4a74      	ldr	r2, [pc, #464]	@ (80111e8 <HAL_XSPI_Init+0x200>)
 8011016:	4293      	cmp	r3, r2
 8011018:	d003      	beq.n	8011022 <HAL_XSPI_Init+0x3a>
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	4a73      	ldr	r2, [pc, #460]	@ (80111ec <HAL_XSPI_Init+0x204>)
 8011020:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	4a72      	ldr	r2, [pc, #456]	@ (80111f0 <HAL_XSPI_Init+0x208>)
 8011028:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	4a6d      	ldr	r2, [pc, #436]	@ (80111e4 <HAL_XSPI_Init+0x1fc>)
 8011030:	4293      	cmp	r3, r2
 8011032:	d008      	beq.n	8011046 <HAL_XSPI_Init+0x5e>
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	4a6b      	ldr	r2, [pc, #428]	@ (80111e8 <HAL_XSPI_Init+0x200>)
 801103a:	4293      	cmp	r3, r2
 801103c:	d003      	beq.n	8011046 <HAL_XSPI_Init+0x5e>
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	4a6a      	ldr	r2, [pc, #424]	@ (80111ec <HAL_XSPI_Init+0x204>)
 8011044:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	4a66      	ldr	r2, [pc, #408]	@ (80111e4 <HAL_XSPI_Init+0x1fc>)
 801104c:	4293      	cmp	r3, r2
 801104e:	d008      	beq.n	8011062 <HAL_XSPI_Init+0x7a>
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	4a64      	ldr	r2, [pc, #400]	@ (80111e8 <HAL_XSPI_Init+0x200>)
 8011056:	4293      	cmp	r3, r2
 8011058:	d003      	beq.n	8011062 <HAL_XSPI_Init+0x7a>
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	4a63      	ldr	r2, [pc, #396]	@ (80111ec <HAL_XSPI_Init+0x204>)
 8011060:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	2200      	movs	r2, #0
 8011066:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801106c:	2b00      	cmp	r3, #0
 801106e:	f040 8102 	bne.w	8011276 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f7f0 fe14 	bl	8001ca0 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8011078:	f241 3188 	movw	r1, #5000	@ 0x1388
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f000 f8ff 	bl	8011280 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	689a      	ldr	r2, [r3, #8]
 8011088:	4b5a      	ldr	r3, [pc, #360]	@ (80111f4 <HAL_XSPI_Init+0x20c>)
 801108a:	4013      	ands	r3, r2
 801108c:	687a      	ldr	r2, [r7, #4]
 801108e:	68d1      	ldr	r1, [r2, #12]
 8011090:	687a      	ldr	r2, [r7, #4]
 8011092:	6912      	ldr	r2, [r2, #16]
 8011094:	0412      	lsls	r2, r2, #16
 8011096:	4311      	orrs	r1, r2
 8011098:	687a      	ldr	r2, [r7, #4]
 801109a:	6952      	ldr	r2, [r2, #20]
 801109c:	3a01      	subs	r2, #1
 801109e:	0212      	lsls	r2, r2, #8
 80110a0:	4311      	orrs	r1, r2
 80110a2:	687a      	ldr	r2, [r7, #4]
 80110a4:	69d2      	ldr	r2, [r2, #28]
 80110a6:	4311      	orrs	r1, r2
 80110a8:	687a      	ldr	r2, [r7, #4]
 80110aa:	6812      	ldr	r2, [r2, #0]
 80110ac:	430b      	orrs	r3, r1
 80110ae:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	4a4b      	ldr	r2, [pc, #300]	@ (80111e4 <HAL_XSPI_Init+0x1fc>)
 80110b6:	4293      	cmp	r3, r2
 80110b8:	d00e      	beq.n	80110d8 <HAL_XSPI_Init+0xf0>
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	4a4a      	ldr	r2, [pc, #296]	@ (80111e8 <HAL_XSPI_Init+0x200>)
 80110c0:	4293      	cmp	r3, r2
 80110c2:	d009      	beq.n	80110d8 <HAL_XSPI_Init+0xf0>
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	4a48      	ldr	r2, [pc, #288]	@ (80111ec <HAL_XSPI_Init+0x204>)
 80110ca:	4293      	cmp	r3, r2
 80110cc:	d004      	beq.n	80110d8 <HAL_XSPI_Init+0xf0>
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	4a49      	ldr	r2, [pc, #292]	@ (80111f8 <HAL_XSPI_Init+0x210>)
 80110d4:	4293      	cmp	r3, r2
 80110d6:	d10a      	bne.n	80110ee <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	689b      	ldr	r3, [r3, #8]
 80110de:	f023 0108 	bic.w	r1, r3, #8
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	430a      	orrs	r2, r1
 80110ec:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	68db      	ldr	r3, [r3, #12]
 80110f4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	6a1a      	ldr	r2, [r3, #32]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	430a      	orrs	r2, r1
 8011102:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	691b      	ldr	r3, [r3, #16]
 801110a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011112:	041a      	lsls	r2, r3, #16
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	430a      	orrs	r2, r1
 801111a:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	4a30      	ldr	r2, [pc, #192]	@ (80111e4 <HAL_XSPI_Init+0x1fc>)
 8011122:	4293      	cmp	r3, r2
 8011124:	d00e      	beq.n	8011144 <HAL_XSPI_Init+0x15c>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	4a2f      	ldr	r2, [pc, #188]	@ (80111e8 <HAL_XSPI_Init+0x200>)
 801112c:	4293      	cmp	r3, r2
 801112e:	d009      	beq.n	8011144 <HAL_XSPI_Init+0x15c>
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	4a2d      	ldr	r2, [pc, #180]	@ (80111ec <HAL_XSPI_Init+0x204>)
 8011136:	4293      	cmp	r3, r2
 8011138:	d004      	beq.n	8011144 <HAL_XSPI_Init+0x15c>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	4a2e      	ldr	r2, [pc, #184]	@ (80111f8 <HAL_XSPI_Init+0x210>)
 8011140:	4293      	cmp	r3, r2
 8011142:	d10a      	bne.n	801115a <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	691b      	ldr	r3, [r3, #16]
 801114a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	430a      	orrs	r2, r1
 8011158:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	687a      	ldr	r2, [r7, #4]
 8011160:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8011162:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	685b      	ldr	r3, [r3, #4]
 8011172:	3b01      	subs	r3, #1
 8011174:	021a      	lsls	r2, r3, #8
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	430a      	orrs	r2, r1
 801117c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011182:	9300      	str	r3, [sp, #0]
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	2200      	movs	r2, #0
 8011188:	2120      	movs	r1, #32
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f000 f887 	bl	801129e <XSPI_WaitFlagStateUntilTimeout>
 8011190:	4603      	mov	r3, r0
 8011192:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8011194:	7bfb      	ldrb	r3, [r7, #15]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d16d      	bne.n	8011276 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	68db      	ldr	r3, [r3, #12]
 80111a0:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	430a      	orrs	r2, r1
 80111ae:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	4a0e      	ldr	r2, [pc, #56]	@ (80111f0 <HAL_XSPI_Init+0x208>)
 80111b6:	4293      	cmp	r3, r2
 80111b8:	d004      	beq.n	80111c4 <HAL_XSPI_Init+0x1dc>
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	4a0f      	ldr	r2, [pc, #60]	@ (80111fc <HAL_XSPI_Init+0x214>)
 80111c0:	4293      	cmp	r3, r2
 80111c2:	d11d      	bne.n	8011200 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80111c8:	9300      	str	r3, [sp, #0]
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	2200      	movs	r2, #0
 80111ce:	2120      	movs	r1, #32
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f000 f864 	bl	801129e <XSPI_WaitFlagStateUntilTimeout>
 80111d6:	4603      	mov	r3, r0
 80111d8:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 80111da:	7bfb      	ldrb	r3, [r7, #15]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d00f      	beq.n	8011200 <HAL_XSPI_Init+0x218>
          {
            return status;
 80111e0:	7bfb      	ldrb	r3, [r7, #15]
 80111e2:	e049      	b.n	8011278 <HAL_XSPI_Init+0x290>
 80111e4:	420d1400 	.word	0x420d1400
 80111e8:	520d1400 	.word	0x520d1400
 80111ec:	420d2400 	.word	0x420d2400
 80111f0:	420d3400 	.word	0x420d3400
 80111f4:	f8e0c0fc 	.word	0xf8e0c0fc
 80111f8:	520d2400 	.word	0x520d2400
 80111fc:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	689a      	ldr	r2, [r3, #8]
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	430a      	orrs	r2, r1
 8011214:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801121e:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801122a:	431a      	orrs	r2, r3
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	430a      	orrs	r2, r1
 8011232:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	681a      	ldr	r2, [r3, #0]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	f042 0201 	orr.w	r2, r2, #1
 8011244:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	699b      	ldr	r3, [r3, #24]
 801124a:	2b02      	cmp	r3, #2
 801124c:	d107      	bne.n	801125e <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	689a      	ldr	r2, [r3, #8]
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	f042 0202 	orr.w	r2, r2, #2
 801125c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	68db      	ldr	r3, [r3, #12]
 8011262:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011266:	d103      	bne.n	8011270 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2201      	movs	r2, #1
 801126c:	655a      	str	r2, [r3, #84]	@ 0x54
 801126e:	e002      	b.n	8011276 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2202      	movs	r2, #2
 8011274:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 8011276:	7bfb      	ldrb	r3, [r7, #15]
}
 8011278:	4618      	mov	r0, r3
 801127a:	3710      	adds	r7, #16
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}

08011280 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8011280:	b480      	push	{r7}
 8011282:	b083      	sub	sp, #12
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	683a      	ldr	r2, [r7, #0]
 801128e:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 8011290:	2300      	movs	r3, #0
}
 8011292:	4618      	mov	r0, r3
 8011294:	370c      	adds	r7, #12
 8011296:	46bd      	mov	sp, r7
 8011298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129c:	4770      	bx	lr

0801129e <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 801129e:	b580      	push	{r7, lr}
 80112a0:	b084      	sub	sp, #16
 80112a2:	af00      	add	r7, sp, #0
 80112a4:	60f8      	str	r0, [r7, #12]
 80112a6:	60b9      	str	r1, [r7, #8]
 80112a8:	603b      	str	r3, [r7, #0]
 80112aa:	4613      	mov	r3, r2
 80112ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80112ae:	e01a      	b.n	80112e6 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80112b0:	69bb      	ldr	r3, [r7, #24]
 80112b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112b6:	d016      	beq.n	80112e6 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80112b8:	f7f1 fcf4 	bl	8002ca4 <HAL_GetTick>
 80112bc:	4602      	mov	r2, r0
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	1ad3      	subs	r3, r2, r3
 80112c2:	69ba      	ldr	r2, [r7, #24]
 80112c4:	429a      	cmp	r2, r3
 80112c6:	d302      	bcc.n	80112ce <XSPI_WaitFlagStateUntilTimeout+0x30>
 80112c8:	69bb      	ldr	r3, [r7, #24]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d10b      	bne.n	80112e6 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80112d4:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80112da:	f043 0201 	orr.w	r2, r3, #1
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 80112e2:	2303      	movs	r3, #3
 80112e4:	e00e      	b.n	8011304 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	6a1a      	ldr	r2, [r3, #32]
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	4013      	ands	r3, r2
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	bf14      	ite	ne
 80112f4:	2301      	movne	r3, #1
 80112f6:	2300      	moveq	r3, #0
 80112f8:	b2db      	uxtb	r3, r3
 80112fa:	461a      	mov	r2, r3
 80112fc:	79fb      	ldrb	r3, [r7, #7]
 80112fe:	429a      	cmp	r2, r3
 8011300:	d1d6      	bne.n	80112b0 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011302:	2300      	movs	r3, #0
}
 8011304:	4618      	mov	r0, r3
 8011306:	3710      	adds	r7, #16
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}

0801130c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801130c:	b084      	sub	sp, #16
 801130e:	b580      	push	{r7, lr}
 8011310:	b084      	sub	sp, #16
 8011312:	af00      	add	r7, sp, #0
 8011314:	6078      	str	r0, [r7, #4]
 8011316:	f107 001c 	add.w	r0, r7, #28
 801131a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 801131e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011322:	2b03      	cmp	r3, #3
 8011324:	d105      	bne.n	8011332 <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	68db      	ldr	r3, [r3, #12]
 801132a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8011332:	6878      	ldr	r0, [r7, #4]
 8011334:	f000 fa8e 	bl	8011854 <USB_CoreReset>
 8011338:	4603      	mov	r3, r0
 801133a:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 801133c:	7fbb      	ldrb	r3, [r7, #30]
 801133e:	2b01      	cmp	r3, #1
 8011340:	d10b      	bne.n	801135a <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	689b      	ldr	r3, [r3, #8]
 8011346:	f043 0208 	orr.w	r2, r3, #8
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	689b      	ldr	r3, [r3, #8]
 8011352:	f043 0220 	orr.w	r2, r3, #32
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 801135a:	7bfb      	ldrb	r3, [r7, #15]
}
 801135c:	4618      	mov	r0, r3
 801135e:	3710      	adds	r7, #16
 8011360:	46bd      	mov	sp, r7
 8011362:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011366:	b004      	add	sp, #16
 8011368:	4770      	bx	lr

0801136a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801136a:	b480      	push	{r7}
 801136c:	b083      	sub	sp, #12
 801136e:	af00      	add	r7, sp, #0
 8011370:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	689b      	ldr	r3, [r3, #8]
 8011376:	f023 0201 	bic.w	r2, r3, #1
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801137e:	2300      	movs	r3, #0
}
 8011380:	4618      	mov	r0, r3
 8011382:	370c      	adds	r7, #12
 8011384:	46bd      	mov	sp, r7
 8011386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138a:	4770      	bx	lr

0801138c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b084      	sub	sp, #16
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
 8011394:	460b      	mov	r3, r1
 8011396:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011398:	2300      	movs	r3, #0
 801139a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	68db      	ldr	r3, [r3, #12]
 80113a0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80113a8:	78fb      	ldrb	r3, [r7, #3]
 80113aa:	2b01      	cmp	r3, #1
 80113ac:	d115      	bne.n	80113da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	68db      	ldr	r3, [r3, #12]
 80113b2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80113ba:	200a      	movs	r0, #10
 80113bc:	f7f1 fc7e 	bl	8002cbc <HAL_Delay>
      ms += 10U;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	330a      	adds	r3, #10
 80113c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80113c6:	6878      	ldr	r0, [r7, #4]
 80113c8:	f000 fa36 	bl	8011838 <USB_GetMode>
 80113cc:	4603      	mov	r3, r0
 80113ce:	2b01      	cmp	r3, #1
 80113d0:	d01e      	beq.n	8011410 <USB_SetCurrentMode+0x84>
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80113d6:	d9f0      	bls.n	80113ba <USB_SetCurrentMode+0x2e>
 80113d8:	e01a      	b.n	8011410 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80113da:	78fb      	ldrb	r3, [r7, #3]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d115      	bne.n	801140c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	68db      	ldr	r3, [r3, #12]
 80113e4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80113ec:	200a      	movs	r0, #10
 80113ee:	f7f1 fc65 	bl	8002cbc <HAL_Delay>
      ms += 10U;
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	330a      	adds	r3, #10
 80113f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	f000 fa1d 	bl	8011838 <USB_GetMode>
 80113fe:	4603      	mov	r3, r0
 8011400:	2b00      	cmp	r3, #0
 8011402:	d005      	beq.n	8011410 <USB_SetCurrentMode+0x84>
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	2bc7      	cmp	r3, #199	@ 0xc7
 8011408:	d9f0      	bls.n	80113ec <USB_SetCurrentMode+0x60>
 801140a:	e001      	b.n	8011410 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801140c:	2301      	movs	r3, #1
 801140e:	e005      	b.n	801141c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	2bc8      	cmp	r3, #200	@ 0xc8
 8011414:	d101      	bne.n	801141a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011416:	2301      	movs	r3, #1
 8011418:	e000      	b.n	801141c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801141a:	2300      	movs	r3, #0
}
 801141c:	4618      	mov	r0, r3
 801141e:	3710      	adds	r7, #16
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}

08011424 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011424:	b084      	sub	sp, #16
 8011426:	b580      	push	{r7, lr}
 8011428:	b086      	sub	sp, #24
 801142a:	af00      	add	r7, sp, #0
 801142c:	6078      	str	r0, [r7, #4]
 801142e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011436:	2300      	movs	r3, #0
 8011438:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801143e:	2300      	movs	r3, #0
 8011440:	613b      	str	r3, [r7, #16]
 8011442:	e009      	b.n	8011458 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011444:	687a      	ldr	r2, [r7, #4]
 8011446:	693b      	ldr	r3, [r7, #16]
 8011448:	3340      	adds	r3, #64	@ 0x40
 801144a:	009b      	lsls	r3, r3, #2
 801144c:	4413      	add	r3, r2
 801144e:	2200      	movs	r2, #0
 8011450:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011452:	693b      	ldr	r3, [r7, #16]
 8011454:	3301      	adds	r3, #1
 8011456:	613b      	str	r3, [r7, #16]
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	2b0e      	cmp	r3, #14
 801145c:	d9f2      	bls.n	8011444 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011462:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801146a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801146e:	2b00      	cmp	r3, #0
 8011470:	d11c      	bne.n	80114ac <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011478:	685b      	ldr	r3, [r3, #4]
 801147a:	68fa      	ldr	r2, [r7, #12]
 801147c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011480:	f043 0302 	orr.w	r3, r3, #2
 8011484:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801148a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011496:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114a2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80114aa:	e011      	b.n	80114d0 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114bc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114c8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80114d6:	461a      	mov	r2, r3
 80114d8:	2300      	movs	r3, #0
 80114da:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80114dc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80114e0:	2b03      	cmp	r3, #3
 80114e2:	d10d      	bne.n	8011500 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80114e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d104      	bne.n	80114f6 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80114ec:	2100      	movs	r1, #0
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f000 f968 	bl	80117c4 <USB_SetDevSpeed>
 80114f4:	e008      	b.n	8011508 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80114f6:	2101      	movs	r1, #1
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f000 f963 	bl	80117c4 <USB_SetDevSpeed>
 80114fe:	e003      	b.n	8011508 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011500:	2103      	movs	r1, #3
 8011502:	6878      	ldr	r0, [r7, #4]
 8011504:	f000 f95e 	bl	80117c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011508:	2110      	movs	r1, #16
 801150a:	6878      	ldr	r0, [r7, #4]
 801150c:	f000 f8fa 	bl	8011704 <USB_FlushTxFifo>
 8011510:	4603      	mov	r3, r0
 8011512:	2b00      	cmp	r3, #0
 8011514:	d001      	beq.n	801151a <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8011516:	2301      	movs	r3, #1
 8011518:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f000 f924 	bl	8011768 <USB_FlushRxFifo>
 8011520:	4603      	mov	r3, r0
 8011522:	2b00      	cmp	r3, #0
 8011524:	d001      	beq.n	801152a <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8011526:	2301      	movs	r3, #1
 8011528:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011530:	461a      	mov	r2, r3
 8011532:	2300      	movs	r3, #0
 8011534:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801153c:	461a      	mov	r2, r3
 801153e:	2300      	movs	r3, #0
 8011540:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011548:	461a      	mov	r2, r3
 801154a:	2300      	movs	r3, #0
 801154c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801154e:	2300      	movs	r3, #0
 8011550:	613b      	str	r3, [r7, #16]
 8011552:	e043      	b.n	80115dc <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	015a      	lsls	r2, r3, #5
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	4413      	add	r3, r2
 801155c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011566:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801156a:	d118      	bne.n	801159e <USB_DevInit+0x17a>
    {
      if (i == 0U)
 801156c:	693b      	ldr	r3, [r7, #16]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d10a      	bne.n	8011588 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011572:	693b      	ldr	r3, [r7, #16]
 8011574:	015a      	lsls	r2, r3, #5
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	4413      	add	r3, r2
 801157a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801157e:	461a      	mov	r2, r3
 8011580:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011584:	6013      	str	r3, [r2, #0]
 8011586:	e013      	b.n	80115b0 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011588:	693b      	ldr	r3, [r7, #16]
 801158a:	015a      	lsls	r2, r3, #5
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	4413      	add	r3, r2
 8011590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011594:	461a      	mov	r2, r3
 8011596:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801159a:	6013      	str	r3, [r2, #0]
 801159c:	e008      	b.n	80115b0 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801159e:	693b      	ldr	r3, [r7, #16]
 80115a0:	015a      	lsls	r2, r3, #5
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	4413      	add	r3, r2
 80115a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115aa:	461a      	mov	r2, r3
 80115ac:	2300      	movs	r3, #0
 80115ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80115b0:	693b      	ldr	r3, [r7, #16]
 80115b2:	015a      	lsls	r2, r3, #5
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	4413      	add	r3, r2
 80115b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115bc:	461a      	mov	r2, r3
 80115be:	2300      	movs	r3, #0
 80115c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	015a      	lsls	r2, r3, #5
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	4413      	add	r3, r2
 80115ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115ce:	461a      	mov	r2, r3
 80115d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80115d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	3301      	adds	r3, #1
 80115da:	613b      	str	r3, [r7, #16]
 80115dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80115e0:	461a      	mov	r2, r3
 80115e2:	693b      	ldr	r3, [r7, #16]
 80115e4:	4293      	cmp	r3, r2
 80115e6:	d3b5      	bcc.n	8011554 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80115e8:	2300      	movs	r3, #0
 80115ea:	613b      	str	r3, [r7, #16]
 80115ec:	e043      	b.n	8011676 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80115ee:	693b      	ldr	r3, [r7, #16]
 80115f0:	015a      	lsls	r2, r3, #5
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	4413      	add	r3, r2
 80115f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011600:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011604:	d118      	bne.n	8011638 <USB_DevInit+0x214>
    {
      if (i == 0U)
 8011606:	693b      	ldr	r3, [r7, #16]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d10a      	bne.n	8011622 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801160c:	693b      	ldr	r3, [r7, #16]
 801160e:	015a      	lsls	r2, r3, #5
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	4413      	add	r3, r2
 8011614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011618:	461a      	mov	r2, r3
 801161a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801161e:	6013      	str	r3, [r2, #0]
 8011620:	e013      	b.n	801164a <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	015a      	lsls	r2, r3, #5
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	4413      	add	r3, r2
 801162a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801162e:	461a      	mov	r2, r3
 8011630:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011634:	6013      	str	r3, [r2, #0]
 8011636:	e008      	b.n	801164a <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011638:	693b      	ldr	r3, [r7, #16]
 801163a:	015a      	lsls	r2, r3, #5
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	4413      	add	r3, r2
 8011640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011644:	461a      	mov	r2, r3
 8011646:	2300      	movs	r3, #0
 8011648:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	015a      	lsls	r2, r3, #5
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	4413      	add	r3, r2
 8011652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011656:	461a      	mov	r2, r3
 8011658:	2300      	movs	r3, #0
 801165a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801165c:	693b      	ldr	r3, [r7, #16]
 801165e:	015a      	lsls	r2, r3, #5
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	4413      	add	r3, r2
 8011664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011668:	461a      	mov	r2, r3
 801166a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801166e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	3301      	adds	r3, #1
 8011674:	613b      	str	r3, [r7, #16]
 8011676:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801167a:	461a      	mov	r2, r3
 801167c:	693b      	ldr	r3, [r7, #16]
 801167e:	4293      	cmp	r3, r2
 8011680:	d3b5      	bcc.n	80115ee <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011688:	691b      	ldr	r3, [r3, #16]
 801168a:	68fa      	ldr	r2, [r7, #12]
 801168c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011690:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011694:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	2200      	movs	r2, #0
 801169a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80116a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80116a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d105      	bne.n	80116b8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	699b      	ldr	r3, [r3, #24]
 80116b0:	f043 0210 	orr.w	r2, r3, #16
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	699a      	ldr	r2, [r3, #24]
 80116bc:	4b10      	ldr	r3, [pc, #64]	@ (8011700 <USB_DevInit+0x2dc>)
 80116be:	4313      	orrs	r3, r2
 80116c0:	687a      	ldr	r2, [r7, #4]
 80116c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80116c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d005      	beq.n	80116d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	699b      	ldr	r3, [r3, #24]
 80116d0:	f043 0208 	orr.w	r2, r3, #8
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80116d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80116dc:	2b01      	cmp	r3, #1
 80116de:	d107      	bne.n	80116f0 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	699b      	ldr	r3, [r3, #24]
 80116e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80116e8:	f043 0304 	orr.w	r3, r3, #4
 80116ec:	687a      	ldr	r2, [r7, #4]
 80116ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80116f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80116f2:	4618      	mov	r0, r3
 80116f4:	3718      	adds	r7, #24
 80116f6:	46bd      	mov	sp, r7
 80116f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80116fc:	b004      	add	sp, #16
 80116fe:	4770      	bx	lr
 8011700:	803c3800 	.word	0x803c3800

08011704 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011704:	b480      	push	{r7}
 8011706:	b085      	sub	sp, #20
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801170e:	2300      	movs	r3, #0
 8011710:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	3301      	adds	r3, #1
 8011716:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801171e:	d901      	bls.n	8011724 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011720:	2303      	movs	r3, #3
 8011722:	e01b      	b.n	801175c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	691b      	ldr	r3, [r3, #16]
 8011728:	2b00      	cmp	r3, #0
 801172a:	daf2      	bge.n	8011712 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801172c:	2300      	movs	r3, #0
 801172e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011730:	683b      	ldr	r3, [r7, #0]
 8011732:	019b      	lsls	r3, r3, #6
 8011734:	f043 0220 	orr.w	r2, r3, #32
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	3301      	adds	r3, #1
 8011740:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011748:	d901      	bls.n	801174e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801174a:	2303      	movs	r3, #3
 801174c:	e006      	b.n	801175c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	691b      	ldr	r3, [r3, #16]
 8011752:	f003 0320 	and.w	r3, r3, #32
 8011756:	2b20      	cmp	r3, #32
 8011758:	d0f0      	beq.n	801173c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801175a:	2300      	movs	r3, #0
}
 801175c:	4618      	mov	r0, r3
 801175e:	3714      	adds	r7, #20
 8011760:	46bd      	mov	sp, r7
 8011762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011766:	4770      	bx	lr

08011768 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011768:	b480      	push	{r7}
 801176a:	b085      	sub	sp, #20
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011770:	2300      	movs	r3, #0
 8011772:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	3301      	adds	r3, #1
 8011778:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011780:	d901      	bls.n	8011786 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011782:	2303      	movs	r3, #3
 8011784:	e018      	b.n	80117b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	691b      	ldr	r3, [r3, #16]
 801178a:	2b00      	cmp	r3, #0
 801178c:	daf2      	bge.n	8011774 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801178e:	2300      	movs	r3, #0
 8011790:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	2210      	movs	r2, #16
 8011796:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	3301      	adds	r3, #1
 801179c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80117a4:	d901      	bls.n	80117aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80117a6:	2303      	movs	r3, #3
 80117a8:	e006      	b.n	80117b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	691b      	ldr	r3, [r3, #16]
 80117ae:	f003 0310 	and.w	r3, r3, #16
 80117b2:	2b10      	cmp	r3, #16
 80117b4:	d0f0      	beq.n	8011798 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80117b6:	2300      	movs	r3, #0
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	3714      	adds	r7, #20
 80117bc:	46bd      	mov	sp, r7
 80117be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c2:	4770      	bx	lr

080117c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80117c4:	b480      	push	{r7}
 80117c6:	b085      	sub	sp, #20
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	460b      	mov	r3, r1
 80117ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117da:	681a      	ldr	r2, [r3, #0]
 80117dc:	78fb      	ldrb	r3, [r7, #3]
 80117de:	68f9      	ldr	r1, [r7, #12]
 80117e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80117e4:	4313      	orrs	r3, r2
 80117e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80117e8:	2300      	movs	r3, #0
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3714      	adds	r7, #20
 80117ee:	46bd      	mov	sp, r7
 80117f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f4:	4770      	bx	lr

080117f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80117f6:	b480      	push	{r7}
 80117f8:	b085      	sub	sp, #20
 80117fa:	af00      	add	r7, sp, #0
 80117fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	68fa      	ldr	r2, [r7, #12]
 801180c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011810:	f023 0303 	bic.w	r3, r3, #3
 8011814:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801181c:	685b      	ldr	r3, [r3, #4]
 801181e:	68fa      	ldr	r2, [r7, #12]
 8011820:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011824:	f043 0302 	orr.w	r3, r3, #2
 8011828:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801182a:	2300      	movs	r3, #0
}
 801182c:	4618      	mov	r0, r3
 801182e:	3714      	adds	r7, #20
 8011830:	46bd      	mov	sp, r7
 8011832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011836:	4770      	bx	lr

08011838 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011838:	b480      	push	{r7}
 801183a:	b083      	sub	sp, #12
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	695b      	ldr	r3, [r3, #20]
 8011844:	f003 0301 	and.w	r3, r3, #1
}
 8011848:	4618      	mov	r0, r3
 801184a:	370c      	adds	r7, #12
 801184c:	46bd      	mov	sp, r7
 801184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011852:	4770      	bx	lr

08011854 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011854:	b480      	push	{r7}
 8011856:	b085      	sub	sp, #20
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801185c:	2300      	movs	r3, #0
 801185e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	3301      	adds	r3, #1
 8011864:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801186c:	d901      	bls.n	8011872 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801186e:	2303      	movs	r3, #3
 8011870:	e01b      	b.n	80118aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	691b      	ldr	r3, [r3, #16]
 8011876:	2b00      	cmp	r3, #0
 8011878:	daf2      	bge.n	8011860 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801187a:	2300      	movs	r3, #0
 801187c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	691b      	ldr	r3, [r3, #16]
 8011882:	f043 0201 	orr.w	r2, r3, #1
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	3301      	adds	r3, #1
 801188e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011896:	d901      	bls.n	801189c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011898:	2303      	movs	r3, #3
 801189a:	e006      	b.n	80118aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	691b      	ldr	r3, [r3, #16]
 80118a0:	f003 0301 	and.w	r3, r3, #1
 80118a4:	2b01      	cmp	r3, #1
 80118a6:	d0f0      	beq.n	801188a <USB_CoreReset+0x36>

  return HAL_OK;
 80118a8:	2300      	movs	r3, #0
}
 80118aa:	4618      	mov	r0, r3
 80118ac:	3714      	adds	r7, #20
 80118ae:	46bd      	mov	sp, r7
 80118b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b4:	4770      	bx	lr

080118b6 <memset>:
 80118b6:	4402      	add	r2, r0
 80118b8:	4603      	mov	r3, r0
 80118ba:	4293      	cmp	r3, r2
 80118bc:	d100      	bne.n	80118c0 <memset+0xa>
 80118be:	4770      	bx	lr
 80118c0:	f803 1b01 	strb.w	r1, [r3], #1
 80118c4:	e7f9      	b.n	80118ba <memset+0x4>
	...

080118c8 <__libc_init_array>:
 80118c8:	b570      	push	{r4, r5, r6, lr}
 80118ca:	4d0d      	ldr	r5, [pc, #52]	@ (8011900 <__libc_init_array+0x38>)
 80118cc:	2600      	movs	r6, #0
 80118ce:	4c0d      	ldr	r4, [pc, #52]	@ (8011904 <__libc_init_array+0x3c>)
 80118d0:	1b64      	subs	r4, r4, r5
 80118d2:	10a4      	asrs	r4, r4, #2
 80118d4:	42a6      	cmp	r6, r4
 80118d6:	d109      	bne.n	80118ec <__libc_init_array+0x24>
 80118d8:	4d0b      	ldr	r5, [pc, #44]	@ (8011908 <__libc_init_array+0x40>)
 80118da:	2600      	movs	r6, #0
 80118dc:	4c0b      	ldr	r4, [pc, #44]	@ (801190c <__libc_init_array+0x44>)
 80118de:	f000 f817 	bl	8011910 <_init>
 80118e2:	1b64      	subs	r4, r4, r5
 80118e4:	10a4      	asrs	r4, r4, #2
 80118e6:	42a6      	cmp	r6, r4
 80118e8:	d105      	bne.n	80118f6 <__libc_init_array+0x2e>
 80118ea:	bd70      	pop	{r4, r5, r6, pc}
 80118ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80118f0:	3601      	adds	r6, #1
 80118f2:	4798      	blx	r3
 80118f4:	e7ee      	b.n	80118d4 <__libc_init_array+0xc>
 80118f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80118fa:	3601      	adds	r6, #1
 80118fc:	4798      	blx	r3
 80118fe:	e7f2      	b.n	80118e6 <__libc_init_array+0x1e>
 8011900:	08011a30 	.word	0x08011a30
 8011904:	08011a30 	.word	0x08011a30
 8011908:	08011a30 	.word	0x08011a30
 801190c:	08011a34 	.word	0x08011a34

08011910 <_init>:
 8011910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011912:	bf00      	nop
 8011914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011916:	bc08      	pop	{r3}
 8011918:	469e      	mov	lr, r3
 801191a:	4770      	bx	lr

0801191c <_fini>:
 801191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801191e:	bf00      	nop
 8011920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011922:	bc08      	pop	{r3}
 8011924:	469e      	mov	lr, r3
 8011926:	4770      	bx	lr
